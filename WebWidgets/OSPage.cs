/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Web;
using System.Web.UI;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Cryptography;

namespace OutSystems.HubEdition.WebWidgets {
    public abstract class OSPage : BasePage {
        public BlocksJavascript BlocksJavaScript { get; private set; }

        public readonly bool QuirksMode;

        protected OSPage(bool quirksMode) {
            
            BlocksJavaScript = new BlocksJavascript(this);
            QuirksMode = quirksMode;

            
            RegisterPageClientScripts();
        }

        protected void RegisterPageClientScripts() {
            // Client-side scripting enabling
            // These scripts are always added, regardless of the existance of buttons/links with client side validation,
            // because using Ajax we can later on add them
            Page.ClientScript.RegisterOnSubmitStatement(Page.GetType(), "OsFixCheckboxesOnSubmit", JavaScriptManager.onSubmitFixCheckboxesCode);
            Page.ClientScript.RegisterOnSubmitStatement(Page.GetType(), "OsFixUploadOnSubmit", JavaScriptManager.onSubmitFixUploadCode);
            Page.ClientScript.RegisterStartupScript(Page.GetType(), "OsValidatorIncludeScript", JavaScriptManager.startupScript);
            Page.ClientScript.RegisterOnSubmitStatement(Page.GetType(), "OsValidatorOnSubmit", JavaScriptManager.onSubmitValidationCode);
        }

#if JAVA

        public abstract void RegisterOnSubmitStatement(string key, string script);

        public abstract void RegisterStartupScript(string key, string script);

#else
        /// <summary>
        /// Restore widget and variable data from the viewstate
        /// </summary>
        protected virtual void FetchViewState() {}

        private bool _pageNeedsToValidateCachedObjects = false;

        public bool PageNeedsToValidateCachedObjects {
            get {
                return _pageNeedsToValidateCachedObjects;
            }
            set {
                _pageNeedsToValidateCachedObjects = value;
            }
        }

#endif

        protected override void LoadViewState(object savedState) {
            base.LoadViewState(savedState);
            BlocksJavaScript.LoadAlreadyIncludedBlocks(ViewState);
        }

        protected void DisableViewState(Control c) {
            if (c == null)
                return;
            if (c is System.Web.UI.HtmlControls.HtmlInputFile)
                c.EnableViewState = false;

            string typeName = c.GetType().ToString();
            if (typeName == "System.Web.UI.DataBoundLiteralControl" ||
                typeName == "OutSystems.HubEdition.WebWidgets.DropDownList" ||
                typeName == "System.Web.UI.WebControls.DataGridTable" ||
                typeName == "OutSystems.HubEdition.WebWidgets.TextBox" ||
                typeName == "OutSystems.HubEdition.WebWidgets.CheckBox" ||
                typeName == "OutSystems.HubEdition.WebWidgets.Button" ||
                typeName == "OutSystems.HubEdition.WebWidgets.DynamicImage" ||
                typeName == "OutSystems.HubEdition.WebWidgets.HyperLink" ||
                typeName == "System.Web.UI.WebControls.Panel" ||
                typeName == "OutSystems.HubEdition.WebWidgets.LinkButton") {

                c.EnableViewState = false;
            }
            foreach (Control child in c.Controls) {
                DisableViewState(child);
            }
        }

        public override ValidateRequestMode ValidateRequestMode {
            get {
                return ValidateRequestMode.Disabled;
            }
            set {
                // prevents the set's so it doesn't end up in viewstate
            }
        }

        protected virtual void WriteBlockJavaScriptIncludes(StringWriter writer) {
            BlocksJavaScript.WriteBlockJavaScriptIncludes(writer);
        }

        public void RegisterBlock(OSUserControl block) {
            BlocksJavaScript.RegisterBlock(block);
        }

        /// <summary>
        /// Checks if a given control set as event target of a request will trigger any bubble up event in a parent OsDataGrid or Iterator
        /// </summary>
        /// <param name="eventTarget"></param>
        /// <returns></returns>
        public bool TriggersBubbleUpEvents(Control eventTarget) {
            // Cancel bubble up events for datagrind or iterator
            if (eventTarget is OSDataGrid) {
                return true;
            } else if (eventTarget is Iterator) {
                return true;
            }
            // follow to parent
            if (eventTarget.Parent != null) {
                return TriggersBubbleUpEvents(eventTarget.Parent);
            } else {
                return false;
            }

        }

        public override void DataBind() {
            if (!IsAjaxRequest) {
                var ie_x_ua_compat = XUACompatibleOverride ?? Settings.Get(Settings.Configs.Compiler_X_UA_Compatible);
                if (ie_x_ua_compat != null && ie_x_ua_compat != string.Empty) {
                    Response.AddHeader("X-UA-Compatible", ie_x_ua_compat);
                }

                
                base.DataBind();             
            }
            OnRender();
            NegotiateTabIndexes();
        }

        private void OnRender() {
        }


        private void NegotiateTabIndexes() {
        }

        // Fix for stackoverflow on exceptions during DataBind
        protected override void DataBindChildren() {
            if (!this.HasControls())
                return;

            int count = this.Controls.Count;
            for (int index = 0; index < count; ++index)
                this.Controls[index].DataBind();
        }

        protected virtual void StoreViewState() {
        }


        /// <summary>
        /// Checks if the current request is an Ajax request
        /// </summary>
        /// <returns></returns>
        public static bool IsAjaxRequest {
            get {
                return AppInfo.GetAppInfo().OsContext.IsAjaxRequest;
            }
        }


        public void GotoErrorHandlerPage(string pageUrl, string application) {
            if (AppInfo.GetAppInfo().eSpaceName == application) {
                HttpContext.Current.Server.Transfer(pageUrl);
            } else {
                HttpContext.Current.Response.Redirect("/" + application + "/" + pageUrl);
            }
        }


        /// <summary>
        /// Renders a specific control returning the rendered HTML
        /// </summary>
        /// <param name="c"></param>
        /// <returns></returns>
        protected string RenderControl(Control c) {
            using (StringWriter w = new StringWriter()) {
                using (HtmlTextWriter htmlWriter = CreateHtmlTextWriter(w)) {
                    
                    c.RenderControl(htmlWriter);
                }
                return w.ToString();
            }
        }


        /// <summary>
        /// Renders the row generated by the last ajax list operation in a list or table record control
        /// </summary>
        /// <param name="c"></param>
        /// <returns></returns>
        protected string RenderAjaxListOperationRow(Control c) {
            return RenderAjaxListOperationRow(c, false, -1);
        }

        /// <summary>
        /// Renders the row generated by the last ajax list operation in a list or table record control
        /// </summary>
        /// <param name="c"></param>
        /// <param name="isEmptyMessage">if this is for rendering the empty message row</param>
        /// <returns></returns>
        protected string RenderAjaxListOperationRow(Control c, bool isEmptyMessage) {
            return RenderAjaxListOperationRow(c, isEmptyMessage, -1);
        }


        /// <summary>
        /// Renders a specific row of a list or table record control
        /// </summary>
        /// <param name="c"></param>
        /// <returns></returns>
        protected string RenderAjaxListOperationRow(Control c, int rowIndex) {
            return RenderAjaxListOperationRow(c, false, rowIndex);
        }



        /// <summary>
        /// Renders a row generated by the last ajax list operation in list or table record control
        /// </summary>
        /// <param name="c"></param>
        /// <param name="isEmptyMessage">if this is for rendering the empty message row</param>
        /// <param name="rowIndex">the index of the row to render, -1 to render the last added / inserted row</param>
        /// <returns></returns>
        private string RenderAjaxListOperationRow(Control c, bool isEmptyMessage, int rowIndex) {
            using (StringWriter w = new StringWriter()) {
                using (HtmlTextWriter htmlWriter = CreateHtmlTextWriter(w)) {
                    IRowRendering list = (IRowRendering)c;

                    if (!isEmptyMessage) {
                        if (rowIndex == -1) {
                            list.RenderLastRow(htmlWriter);
                        } else {
                            list.RenderRow(htmlWriter, rowIndex);
                        }
                    } else {
                        list.RenderEmptyMessage(htmlWriter);
                    }
                }
                return w.ToString();
            }
        }

#if !JAVA

        protected override void OnPreRenderComplete(EventArgs e) {
            base.OnPreRenderComplete(e);
            // Notify events must be raised after prerender since some of the target controls might 
            // not be available before such as webblocks inside list records
            if (IsPostBack)
                RaiseAjaxEvents("Notify");
        }


        protected override void OnLoadComplete(EventArgs e) {
            base.OnLoadComplete(e);
            // the OnLoadComplete event occurs after the RaisePostBack phase. 
            // Since in Ajax we postback to controls that are not supposed to process postbacks
            // (all the ones that support On Click, On Change and On Notify) 
            // We must trigger "manually" the raising of these events in this phase, to mimic the normal click 
            // postbacks of buttons or links, since at this point all the request inputs have been processed
            // Raise only ajax events for Click and Change, Notifies are delayed: see above comment in OnPreRenderComplete
            if (IsPostBack)
                RaiseAjaxEvents("Click,Change");
        }



        public static Control FindControlRecursive(Control root, string ID) {
            if (root.UniqueID == ID || root.ClientID == ID)
                return root;

            foreach (Control Ctl in root.Controls) {
                Control FoundCtl = FindControlRecursive(Ctl, ID);
                if (FoundCtl != null)
                    return FoundCtl;
            }
            return null;
        }

#endif

        public static IValidationMessages ValidationMessagesInstance;
        
        public static IValidationMessages ValidationMessages { 
            get {
                return ValidationMessagesInstance;
            } 
            set {
                ValidationMessagesInstance = value;
            }
        }

        protected string GetMandatoryValidatorMsg() {
            return ValidationMessagesInstance.MandatoryValidatorMsg;
        }
        protected string GetIntegerValidatorMsg() {
            return ValidationMessagesInstance.IntegerValidatorMsg;
        }
        protected string GetDecimalValidatorMsg() {
            return ValidationMessagesInstance.DecimalValidatorMsg;
        }
        protected string GetCurrencyValidatorMsg() {
            return ValidationMessagesInstance.CurrencyValidatorMsg;
        }
        protected string GetDateValidatorMsg() {
            return ValidationMessagesInstance.DateValidatorMsg;
        }
        protected string GetTimeValidatorMsg() {
            return ValidationMessagesInstance.TimeValidatorMsg;
        }
        protected string GetDateTimeValidatorMsg() {
            return ValidationMessagesInstance.DateTimeValidatorMsg;
        }
        protected string GetTextValidatorMsg() {
            return ValidationMessagesInstance.TextValidatorMsg;
        }
        protected string GetPhoneNumberValidatorMsg() {
            return ValidationMessagesInstance.PhoneNumberValidatorMsg;
        }
        protected string GetNumericPasswordValidatorMsg() {
            return ValidationMessagesInstance.NumericPasswordValidatorMsg;
        }
        protected string GetEmailValidatorMsg() {
            return ValidationMessagesInstance.EmailValidatorMsg;
        }

#if !JAVA

        /// <summary>
        /// Raises the ajax event in the request if present
        /// </summary>
        protected void RaiseAjaxEvents(string eventTypes) {
            string ajaxEvent = Request["__AJAXEVENT"];
            if (ajaxEvent != null && eventTypes.Contains(ajaxEvent)) {
                string eventTarget = Request["__EVENTTARGET"];
                Control target = FindControlRecursive(this, eventTarget);

                // if target is not found, do nothing. Error message in the future?
                if (target == null)
                    return;

                // forward events...
                if (ajaxEvent == "Notify") {
                    ((IAjaxNotifyEvent)target).OnAjaxNotify(new EventArgs());
                } else if (ajaxEvent == "Click") {
                    ((IAjaxClickEvent)target).OnAjaxClick(new EventArgs());
                } else if (ajaxEvent == "Change") {
                    ((IAjaxChangeEvent)target).OnAjaxChange(new EventArgs());
                }
            }
        }


        private Dictionary<Control, Control> _registeredValidationControls = new Dictionary<Control, Control>();
        public void RegisterValidationControlOrder(Control controlToValidate) {
            if (!_registeredValidationControls.ContainsKey(controlToValidate)) {
                Page.ClientScript.RegisterArrayDeclaration("OsPage_ValidatorsOrder", "\"" + controlToValidate.ClientID + "\"");
                _registeredValidationControls.Add(controlToValidate, controlToValidate);
            }
        }
#endif

        #region IVarsBag Members

        protected VarsBag localVars = new VarsBag();

        public override void EvaluateFields(VarValue variable, object parent, string baseName, string fields) {
            localVars.EvaluateFields(variable, parent, baseName, fields);
        }

        public override object GetVariableValue(string varName) {
            return localVars.GetVariableValue(varName);
        }

        public override bool HasVariable(string varName) {
            return localVars.HasVariable(varName);
        }

        public override void ToXml(object parent, System.Xml.XmlElement baseElem, string fieldName, int detailLevel) {
            localVars.ToXml(parent, baseElem, fieldName, detailLevel);
        }

        public override string[] VarNames {
            get { return localVars.VarNames; }
        }

        public override void SetNewOrigin(object origin) {
            localVars.SetNewOrigin(origin);
        }

        public override void InitVars(string[] varNames, string[] varRtNames) {
            localVars.InitVars(varNames, varRtNames);
            SetNewOrigin(this);
        }

        #endregion

        public virtual void ClearErrorHandler() { }

        public virtual string ReplaceBasePath(string path) {
            return path.Replace("~/", GetAppUtils().getImagePath());
        }

        private string inlineCss;

        protected virtual string GetInlineCss() {
            return GetInlineCss(null);
        }

        protected virtual string GetInlineCss(string hostName) {
            if (inlineCss == null) {
                HashSet<string> flattened = new HashSet<string>();

                inlineCss = AddLocalInlineCss(BasicCssFile, "", flattened, hostName);    

                using (StringWriter localCssWriter = new StringWriter()) {
                    GetBlocksCss(localCssWriter, /*inline*/true, new HashSet<string>());
                    GetWidgetsCss(localCssWriter, /*inline*/true, new HashSet<string>());
                    inlineCss += localCssWriter.ToString();
                }

                inlineCss = AddLocalInlineCss(ThemeCssFile, inlineCss, flattened, hostName);
                inlineCss = AddLocalInlineCss(OwnCssFile, inlineCss, flattened, hostName);
                inlineCss = AddLocalInlineCss(ThemeExtraCssFile, inlineCss, flattened, hostName);
            }
            return inlineCss;
        }
        
        protected virtual string GetInlineStyleSheetInclude() {
            string css = GetInlineCss();
            if (string.IsNullOrEmpty(css)) {
                return string.Empty;
            }
            return "<style>" + Environment.NewLine + css + Environment.NewLine + "</style>";
        }

        protected virtual string GetUrlPrefix(out bool prefixWithImagePath) {
            string osPageHeader = AppInfo.GetAppInfo().OsContext.OsISAPIFilter.GetPage();
            prefixWithImagePath = osPageHeader != null && osPageHeader.IndexOf('/', 1) != -1;
            return prefixWithImagePath ? GetAppUtils().getImagePath() : null;
        }

        protected void WriteStyleSheetLink(TextWriter writer, string url) {
            bool prefixWithImagePath;
            var urlPrefix = GetUrlPrefix(out prefixWithImagePath);
            var stylesheetLink = GetStyleSheetLink(url, prefixWithImagePath, urlPrefix);
            if (!stylesheetLink.IsEmpty()) {
                writer.WriteLine(stylesheetLink);
            }
        }

        protected string GetStyleSheetLink(string url, bool prefixWithImagePath, string prefix) {
            string realUrl = url;
            if (!realUrl.IsEmpty()) {
                // i370377 - checks if the theme is external it don't need the local prefix 
                if (realUrl.StartsWith("/") || realUrl.StartsWith("http://") || realUrl.StartsWith("https://")) {
                    prefixWithImagePath = false;
                }
                if (prefixWithImagePath) {
                    realUrl = prefix + realUrl;
                }
                return "    " + CssHelper.GetCssInclude(realUrl + GetAppUtils().CacheInvalidationSuffix);
            }
            return null;
        }

        protected virtual string InnerGetStyleSheetIncludes() {
            using (var localCssWriter = new StringWriter()) {
                // for enhanced perfomance inline basic.css (since its supposed to be small)
                var basicCss = AddLocalInlineCss(BasicCssFile, "", new HashSet<string>());
                localCssWriter.WriteLine("<style>");
                localCssWriter.WriteLine(basicCss);
                localCssWriter.WriteLine("</style>");
                
                var visitedBlocksOrWidgets = new HashSet<string>();
                GetBlocksCss(localCssWriter, /*inline*/false, visitedBlocksOrWidgets);
                GetWidgetsCss(localCssWriter, /*inline*/false, visitedBlocksOrWidgets);
                GetExtraStyleSheetIncludes(localCssWriter);

                return localCssWriter.ToString();
            }
        }

        protected virtual void GetExtraStyleSheetIncludes(TextWriter writer) {
            bool prefixWithImagePath;
            string prefix = GetUrlPrefix(out prefixWithImagePath);

            string link = GetStyleSheetLink(ThemeCssUrl, prefixWithImagePath, prefix);
            if (!link.IsEmpty()) {
                writer.WriteLine(link);
            }

            link = GetStyleSheetLink(OwnCssUrl, prefixWithImagePath, prefix);
            if (!link.IsEmpty()) {
                writer.WriteLine(link);
            }

            link = GetStyleSheetLink(ThemeExtraCssUrl, prefixWithImagePath, prefix);
            if (!link.IsEmpty()) {
                writer.WriteLine(link);
            }
        }

        protected string styleSheetIncludes;

        protected string GetStyleSheetIncludes() {
            if (styleSheetIncludes == null) {
                styleSheetIncludes = InnerGetStyleSheetIncludes();
            }
            return styleSheetIncludes;
        }
        
        protected virtual string GetJavaScriptIncludes() {
            using (var writer = new StringWriter()) {
                foreach (string template in GetAppUtils().GetAjaxJQueryFileNames()) {
                    writer.WriteLine("    <script src=\"" + template + GetAppUtils().CacheInvalidationPlatformSuffix + "\" type=\"text/javascript\" charset=\"UTF-8\"></script>");
                }

                string javaScriptInclude = GetAppUtils().GetGlobalJavaScriptInclude();
                if (!string.IsNullOrEmpty(javaScriptInclude)) {
                    writer.WriteLine("    " + javaScriptInclude);
                }

                BlocksJavaScript.WriteBlockJavaScriptIncludes(writer);

                string screenJavaScript = OwnJavascriptInclude;
                if (!string.IsNullOrEmpty(screenJavaScript)) {
                    writer.WriteLine("    " + screenJavaScript);
                }

                writer.WriteLine();
                return writer.ToString();
            }
        }

        protected virtual bool PageAllowsCallbacks() {
            return false; // Webscreen might redifine this value
        }

        protected string GetInjectedCode(CodeInjectionFactory.Locations position, string webScreenKey, string webScreenName) {
            return AppInfo.GetAppInfo().GetInjectedContent(position, PageAllowsCallbacks(), webScreenKey, webScreenName);
        }

        protected virtual string GetRequestInfoJavaScript(string webScreenKey, string webScreenName) {
            AppInfo info = AppInfo.GetAppInfo();
            using (var writer = new StringWriter()) {
                writer.Write("    <script id=\"_OSrequestInfoScript\" type=\"text/javascript\">(function(global) { ");
                writer.Write("global.outsystems = global.outsystems || {};");
                writer.Write("global.outsystems.internal = global.outsystems.internal || {};");
                if (Settings.GetBool(Settings.Configs.JavascriptAPI_ShowHiddenFields)) {
                    writer.Write("global.outsystems.internal.showHiddenFields = true;");
                }
                writer.Write("global.outsystems.internal.requestInfo = {");
                writer.Write("requestKey:'{0}',", info.RequestId);
                //  #564602 OSVisit and OSVisitor cookies allow HTML injection -check if cookies' value  was modified
                writer.Write("visitorKey:'{0}',", GuidUtils.IsGuid(info.VisitorId) ? info.VisitorId : "");
                writer.Write("visitKey:'{0}',",   GuidUtils.IsGuid(info.VisitId) ?   info.VisitId : "");
                writer.Write("sessionKey:'{0}',", info.OsContext.Session.SessionIDHash);
                writer.Write("userKey:'{0}',", info.OsContext.Session.UserIdGuid);
                writer.Write("environmentKey:'{0}',", info.EnvironmentKey);
                writer.Write("applicationKey:'{0}',", info.ApplicationUID);
                writer.Write("applicationName:'{0}',", info.ApplicationName);
                writer.Write("espaceKey:'{0}',", info.eSpaceUID);
                writer.Write("espaceName:'{0}',", info.eSpaceName);
                writer.Write("webScreenKey:'{0}',", ObjectKeyUtils.DatabaseValue(ObjectKey.Parse(webScreenKey)));
                writer.Write("webScreenName:'{0}',", webScreenName);
                writer.Write("tenantKey:'{0}',", info.Tenant.Id_Guid);
                writer.Write("tenantName:'{0}',", info.Tenant.Name);
                if (Settings.GetBool(Settings.Configs.JavascriptAPI_ShowHiddenFields)) {
                    writer.Write("username:'{0}',", info.OsContext.Session.UserName);
                    writer.Write("frontendName:'{0}',", info.FrontendName);
                }
                // #664816 - When the host serial on OSSYS_SERVER is different from the one in the windows registry the FrontendName will not be read from the DB.
                // We do a null check here to prevent this not vital information from stopping the application load.
                string value = string.IsNullOrEmpty(info.FrontendName) ? "" : 
                    SymmRC4CryptHelper.Encrypt(info.FrontendName, SharedKeys.SettingsWeakSymmetricKey());

                writer.Write("frontendKey:'{0}'", value);
                writer.Write("}");
                writer.Write("})(this);");
                writer.Write("</script>\n");
                return writer.ToString();
            }
        }

        protected string bookmarkableUrl;
        public override string GetBookmarkableURL() {
            return bookmarkableUrl;
        }

        protected string actionUrl;
        public override string GetFormAction() {
            return actionUrl;
        }

        protected virtual BaseAppUtils GetAppUtils() {
            throw new NotImplementedException();
        }

        protected virtual string OwnCssUrl {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string OwnCssFile {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string BasicCssUrl {
            get {
                throw new NotImplementedException();
            }
        }        

        protected virtual string BasicCssFile {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string ServiceCenterBrandingCssUrl {
            get {
                throw new NotImplementedException();                
            }
        }

        protected virtual string ServiceCenterBrandingCssFile {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string LifeTimeCoreBrandingCssUrl {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string LifeTimeCoreBrandingCssFile {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string LifeTimePerformanceMonitorBrandingCssUrl {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string LifeTimePerformanceMonitorBrandingCssFile {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string LifeTimeStyleBrandingCssUrl {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string LifeTimeStyleBrandingCssFile {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string ThemeCssUrl {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string ThemeCssFile {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string ThemeExtraCssUrl {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string ThemeExtraCssFile {
            get {
                throw new NotImplementedException();
            }
        }

        protected virtual string OwnJavascriptInclude {
            get {
                throw new NotImplementedException();
            }
        }

        public virtual string XUACompatibleOverride {
            get {
                return null;
            }
        }

        protected virtual void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
            throw new NotImplementedException();
        }

        protected virtual void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {
            throw new NotImplementedException();
        }

        public virtual LocalState[] PopDebuggerState() {
            return null;
        }

        #if !JAVA

        #region IScreen members
        
        public virtual Control FindControlByName(string name) {
            return null;
        }
        #endregion

        #endif
        
        public virtual string GetRedirectionProtocol(bool destinationIsSecure) {
            IWebScreen page = (IWebScreen)Page;

            var protocol = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://" : "http://");
            if (destinationIsSecure) {
                return (!page.isSecure && !RuntimePlatformUtils.RequestIsSecure(Request)) ? "https://" : protocol;
            } else {
                return (page.isSecure && RuntimePlatformUtils.RequestIsSecure(Request)) ? "http://" : protocol;
            }
        }

        protected void WriteEmailExceptionInformation(HtmlTextWriter writer, Exception e) {
            writer.Write("<ExceptionMessage>" + e.Message + "</ExceptionMessage>");
            writer.Write("<ExceptionStackTrace>" + e.StackTrace + "</ExceptionStackTrace>");
        }
    }
}