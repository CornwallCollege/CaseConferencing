/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Linq;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.Internal.Db {

    using OutSystems.HubEdition.RuntimePlatform;
    using DAL = OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
    using DALPlatform = OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;

    public class DatabaseSettingsSerialization {

        /// <summary>
        /// Class that represents an exception that occurs during deserialization of a configuration.
        /// </summary>
        public class ConfigurationUnWrapException : Exception {
            public ConfigurationUnWrapException(Exception e) : base(e.Message, e) { }
        }

        public enum Source {
            Application,
            Services
        }

        public enum User {
            Admin,
            Runtime,
            Session,
            Log
        }
    }


    public static class DatabaseConfigurations {

        public const string ProviderKeyName = "ProviderKey";
        public const string SettingPrefix = "OutSystems.DB";

        public static bool IsSettingKey(string key) {
            return key.StartsWith(SettingPrefix);
        }

        internal static void Fill(object conf, Dictionary<string, object> @params) {
            var meta = new MetaDatabaseConfiguration(conf);
            foreach (var p in @params) {
                var setter = meta.GetParameter(p.Key);
                if (setter != null) {
                    object value = p.Value;
                    string strValue = (value == null)? null: value.ToString();
                    setter.Set(setter.Encrypt ? Settings.DecryptString(strValue) : strValue);
                }
            }
        }

        internal static string GetParameter(object conf, string name) {
            var meta = new MetaDatabaseConfiguration(conf);
            var param = meta.GetParameter(name);
            if (param == null) {
                return "";
            } else {
                return param.Get();
            }
        }

        internal static void SetParameters(object conf, Dictionary<string, object> @params) {
            Fill(conf, @params);
        }
        
    }

    sealed public class IntegrationDeserializer {

        private readonly DAL.IntegrationDeserializer dalDeserializer;
        private readonly Func<DatabaseProviderKey, IIntegrationDatabaseConfiguration> createConf;

        internal IntegrationDeserializer(Func<DatabaseProviderKey, IIntegrationDatabaseConfiguration> createConf, DAL.IntegrationDeserializer dalDeserializer) {
            this.createConf = createConf;
            this.dalDeserializer = dalDeserializer;
        }

        public IIntegrationDatabaseConfiguration Deserialize(string serialized) {
            try {
                TextReader reader = new StringReader(serialized);
                var providerKey = DatabaseProviderKey.Deserialize(reader.ReadLine().Replace(DatabaseConfigurations.ProviderKeyName + "=", ""));
                string criptedConfig = reader.ReadLine() ?? string.Empty;
                var config = createConf(providerKey);

                dalDeserializer.Deserialize(Settings.DecryptString(criptedConfig), config);

                return config;
            } catch (Exception e) {
                throw new DatabaseSettingsSerialization.ConfigurationUnWrapException(e);
            }
        }
    }

    sealed public class Deserializer<TConfiguration> {

        private static readonly string ProviderKeyAttribute = "ProviderKey";

        private readonly Func<DatabaseProviderKey, TConfiguration> createConf;
        private readonly DAL.Deserializer<TConfiguration> dalDeserializer;

        public string Tag { get { return dalDeserializer.Tag; } }

        internal Deserializer(Func<DatabaseProviderKey, TConfiguration> createConf, DAL.Deserializer<TConfiguration> dalDeserializer) {
            this.createConf = createConf;
            this.dalDeserializer = dalDeserializer;
        }

        public TConfiguration DeserializeFromDocument(XElement xml) {
            var section = xml.Element(Tag);
            if (section == null) {
                throw new ConfigurationSerializationException("Missing Session Database Configuration Section " + Tag);
            }

            return Deserialize(section);
        }

        public TConfiguration Deserialize(XElement xml) {
            try {
                var key = xml.Attribute(ProviderKeyAttribute);
                if (key == null) {
                    throw new ConfigurationSerializationException("No attribute " + ProviderKeyAttribute + " section " + xml.Name.LocalName);
                }

                var conf = createConf(DatabaseProviderKey.Deserialize(key.Value));
                dalDeserializer.Deserialize(xml, conf);
                return conf;
            } catch (Exception e) {
                throw new ConfigurationSerializationException(e);
            }
        }

    }

    public static class Deserializers {

        public static Deserializer<IPlatformDatabaseConfiguration> ForPlatform(Func<DatabaseProviderKey, IPlatformDatabaseConfiguration> createConf) {

            var dd = DALPlatform.Deserializers.ForPlatform;
            dd.ValueDecrypter = TryDecryptString;

            return new Deserializer<IPlatformDatabaseConfiguration>(createConf, dd);
        }

        public static Deserializer<ISessionDatabaseConfiguration> ForSession(Func<DatabaseProviderKey, ISessionDatabaseConfiguration> createConf) {

            var dd = DALPlatform.Deserializers.ForSession;
            dd.ValueDecrypter = TryDecryptString;

            return new Deserializer<ISessionDatabaseConfiguration>(createConf, dd);
        }

        private static string TryDecryptString(string text) {
            string result = Settings.DecryptString(text);
            return result == text ? "" : result;
        }

        public static IntegrationDeserializer ForIntegration(Func<DatabaseProviderKey, IIntegrationDatabaseConfiguration> createConf) {
            return new IntegrationDeserializer(createConf, DAL.Deserializers.ForIntegration);
        }

        public static Deserializer<IRuntimeDatabaseConfiguration> ForRuntime(Func<DatabaseProviderKey, IRuntimeDatabaseConfiguration> createConf) {
            return new Deserializer<IRuntimeDatabaseConfiguration>(createConf, DAL.Deserializers.ForRuntime);
        }

    }

    public sealed class IntegrationSerializer {

        private readonly DAL.IntegrationSerializer dalSerializer;

        internal IntegrationSerializer(DAL.IntegrationSerializer dalSerializer) {
            this.dalSerializer = dalSerializer;
        }

        public string Serialize(IIntegrationDatabaseConfiguration conf) {
            var sb = new StringBuilder();
            sb.AppendLine(DatabaseConfigurations.ProviderKeyName + "=" + conf.DatabaseProvider.Key.Serialize());
            sb.AppendLine(SecureConfidentialInformationEncryption.EncryptMaintainingCompatibility(null, dalSerializer.Serialize(conf)));
            return sb.ToString();
        }

    }

    public sealed class Serializer<TConfiguration> {
        
        private static readonly string ProviderKeyAttribute = "ProviderKey";

        private readonly DAL.Serializer<TConfiguration> dalSerializer;
        private readonly Func<TConfiguration, DatabaseProviderKey> keyExtractor;

        internal Serializer(Func<TConfiguration, DatabaseProviderKey> keyExtractor, DAL.Serializer<TConfiguration> dalSerializer) {
            this.keyExtractor = keyExtractor;
            this.dalSerializer = dalSerializer;
        }

        private static void AddKey(DatabaseProviderKey key, XElement xmlConf) {
            xmlConf.Add(new XAttribute(ProviderKeyAttribute, key.Serialize()));
        }

        public XElement Serialize(TConfiguration conf) {
            var xml = dalSerializer.Serialize(conf);
            AddKey(keyExtractor(conf), xml);
            return xml;
        }

    }

    public static class Serializers {

        public static Serializer<IPlatformDatabaseConfiguration> ForPlatform {
            get {
                var dalSerializer = DALPlatform.Serializers.ForPlatform;
                dalSerializer.ValueEncrypter = Settings.EncryptString;

                return new Serializer<IPlatformDatabaseConfiguration>(
                    c => c.PlatformDatabaseProvider.Key,
                    dalSerializer);
            }
        }

        public static Serializer<ISessionDatabaseConfiguration> ForSession {
            get {
                var dalSerializer = DALPlatform.Serializers.ForSession;
                dalSerializer.ValueEncrypter = Settings.EncryptString;

                return new Serializer<ISessionDatabaseConfiguration>(
                    c => c.PlatformDatabaseProvider.Key,
                    dalSerializer);
            }
        }

        public static IntegrationSerializer ForIntegration {
            get {
                return new IntegrationSerializer(DAL.Serializers.ForIntegration);
            }
        }

        public static Serializer<IRuntimeDatabaseConfiguration> ForRuntime {
            get {
                return new Serializer<IRuntimeDatabaseConfiguration>(
                    c => c.DatabaseProvider.Key,
                    DAL.Serializers.ForRuntime);
            }
        }

    }

    public static class RuntimeDatabaseConfigurations {

            private static Dictionary<string, object> Read(DatabaseSettingsSerialization.Source source, DatabaseSettingsSerialization.User user) {
                var prefix = DatabaseConfigurations.SettingPrefix + "." + source + "." + user + ".";
                var @params = new Dictionary<string, object>();
                foreach (var settings in Settings.GetByPrefix(prefix)) {
                    @params.Add(settings.First.Substring(prefix.Length), settings.Second);
                }
                return @params;
            }


            public static void Fill(IRuntimeDatabaseConfiguration conf, Dictionary<string, object> @params) {
                var meta = new MetaDatabaseConfiguration(conf);
                foreach (var p in @params) {
                    var setter = meta.GetParameter(p.Key);
                    if (setter != null && setter.Persist) {
                        object value = p.Value;
                        string strValue = value == null ? null : value.ToString();
                        setter.Set(setter.Encrypt ? Settings.DecryptString(strValue) : strValue);
                    }
                }
            }
            
            public static IRuntimeDatabaseConfiguration For(DatabasePluginProvider<IPlatformDatabaseProvider> provider, DatabaseSettingsSerialization.Source source, DatabaseSettingsSerialization.User user) {

                var @params = Read(source, user);
                if (@params.Count == 0) {
                    return null;
                }

                var providerKey = DatabaseProviderKey.Deserialize(@params[DatabaseConfigurations.ProviderKeyName].ToString());
                var conf = provider.GetImplementation(providerKey).CreateEmptyRuntimeDatabaseConfiguration();

                RuntimeDatabaseConfigurations.Fill(conf, @params);

                return conf;
            }

            public static void SetParameter(this IRuntimeDatabaseConfiguration conf, string name, string value) {
                DatabaseConfigurations.Fill(conf, new Dictionary<string,object> { {name, value } });
            }

            public static string GetParameter(this IRuntimeDatabaseConfiguration conf, string name) {
                return DatabaseConfigurations.GetParameter(conf, name);
            }

            public static void SetParameters(this IRuntimeDatabaseConfiguration conf, Dictionary<string, object> @params) {
                DatabaseConfigurations.Fill(conf, @params);
            }

            public static DatabaseProviderKey ProviderKey(this IRuntimeDatabaseConfiguration conf) {
                return conf.DatabaseProvider.Key;
            }

            public static void SetOnCacheFor(IRuntimeDatabaseConfiguration conf, DatabaseSettingsSerialization.Source source, DatabaseSettingsSerialization.User user) {
                SetFor(conf, source, user, Settings.Set);
            }

            public static void SetFor(IRuntimeDatabaseConfiguration conf, DatabaseSettingsSerialization.Source source, DatabaseSettingsSerialization.User user, Action<string, string> setter) {
                var prefix = DatabaseConfigurations.SettingPrefix + "." +  source + "." + user + ".";

                setter(prefix + DatabaseConfigurations.ProviderKeyName, conf.ProviderKey().Serialize());

                var wrapper = new MetaDatabaseConfiguration(conf);
                foreach (var param in wrapper.PersistableParameters) {
                    setter(prefix + param.Name, 
                        param.Encrypt? SecureConfidentialInformationEncryption.EncryptMaintainingCompatibility(null, param.Get()): param.Get());
                }
            }

        }
}
