/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.Log {
    [Serializable()]
    public class GeneralLog : ICloneable {
        // TODO : Create readonly accessor function for this batch of variables
        public DateTime Instant;
        public string SessionId;
        public int EspaceId;
        public int TenantId;
        public int UserId;
        public string Message;
        public string MessageType;
        public string ModuleName;
        public string ErrorId;
        // END OF TODO


        public GeneralLog() {
        }

        public GeneralLog(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message, string messageType, string moduleName, string errorId) {
            Instant = instant;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Message = message;
            MessageType = messageType;
            ModuleName = moduleName;
            ErrorId = errorId;
        }

        public GeneralLog(GeneralLog obj) {
            Instant = obj.Instant;
            SessionId = obj.SessionId;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            UserId = obj.UserId;
            Message = obj.Message;
            MessageType = obj.MessageType;
            ModuleName = obj.ModuleName;
            ErrorId = obj.ErrorId;
        }

        public object Clone() {
            return new GeneralLog(this);
        }

        public static void StaticWrite(
                DateTime instant,
                string sessionId,
                int espaceId,
                int tenantId,
                int userId,
                string message,
                string messageType,
                string moduleName,
                string errorId) {
            GeneralLog log = new GeneralLog();
            log.Write(instant, sessionId, espaceId, tenantId, userId, message, messageType, moduleName, errorId);
        }

        public void Write(
            DateTime instant,
            string sessionId,
            int espaceId,
            int tenantId,
            int userId,
            string message,
            string messageType,
            string moduleName,
            string errorId) {
            Instant = instant;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Message = message;
            MessageType = messageType;
            ErrorId = errorId;
            ModuleName = moduleName;
            RuntimeLogger.Log(this);
        }
    }
}
