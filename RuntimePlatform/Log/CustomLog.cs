/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using OutSystems.HubEdition.RuntimePlatform.MetaInformation;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.Db;
using System.Data;
using OutSystems.ObjectKeys;
using OutSystems.Internal.Db;

namespace OutSystems.HubEdition.RuntimePlatform.Log {

    [Serializable()]
    public class CustomLog {
        private readonly string entityName;
        private readonly int entityGeneration;
        private readonly string physicalTableName;
        private readonly string dbConnection;
        private readonly string dbCatalog;
        public readonly Hashtable Fields;

        private static IDictionary<string, int> catalogCache = new Dictionary<string, int>();

        internal CustomLog(string entityName, string physicalTableName, int entityGeneration, string dbConnection, string dbCatalog) {
            this.entityName = entityName;
            this.physicalTableName = physicalTableName;
            this.entityGeneration = entityGeneration;
            this.dbConnection = dbConnection;
            this.dbCatalog = dbCatalog;
            Fields = new Hashtable(10);

            if (!Settings.GetBool(Settings.Configs.Log_SupportCustomLogs)) {
                throw new NotSupportedException("Custom Logs not supported in this installation. Please contact {C} support.".ReplaceBranding());
            }
        }

        public string PhysicalTableName {
            get { return physicalTableName; }
        }

        public string EntityName {
            get { return entityName; }
        }

        public int EntityGeneration {
            get { return entityGeneration; }
        }

        public string DBConnection {
            get { return dbConnection; }
        }

        public string DbCatalog {
            get { return dbCatalog; }
        }

        private bool LogAsynchronousEnabled {
            get {
                return RuntimeLogger.LogAsynchronousEnabled;
            }
        }

        public CustomLog(object ssRecord) {

            if (ssRecord is IRecord) {
                // Record inspection:
                // - get structure field from record
                // - get its EntityRecordDetails attribute
                // - there must be a single structure in the record (this is an entity record and not a recordjoin)

                var entAttr = ssRecord.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance)
                                       .Select(
                                           field =>
                                               new {
                                                   Field = field,
                                                   EntityDetails =
                                                       field.FieldType.GetCustomAttributes(typeof(EntityRecordDetails), false)
                                                            .FirstOrDefault()
                                               })
                                       .Where(fa => fa.EntityDetails != null)
                                       .FirstIfSingleOrDefault();

                if (entAttr != null) {

                    var entityDetails = (EntityRecordDetails)entAttr.EntityDetails;

                    //var entityRecordAttributes = (Attribute[])structAttrs[0].FieldType.GetCustomAttributes(typeof(EntityRecordDetails), false);
                    //if (entityRecordAttributes.Length == 1) {
                    //EntityRecordDetails entityDetails = (EntityRecordDetails) entityRecordAttributes[0];

                        entityName = entityDetails.Name;
                        entityGeneration = entityDetails.Generation;
                        physicalTableName = entityDetails.PhysicalTableName;
                        dbConnection = entityDetails.DBConnection;

                        if (!LogAsynchronousEnabled) {
                            throw new NotSupportedException("Asynchronous logs not supported in this installation. Please contact {C}.".ReplaceBranding());
                        }

                        if (!Settings.GetBool(Settings.Configs.Log_SupportBulkLogs)) {
                            throw new NotSupportedException("Bulk logs not supported in this installation. Please contact {C}.".ReplaceBranding());
                        }

                        if (!Settings.GetBool(Settings.Configs.Log_SupportCustomLogs)) {
                            throw new NotSupportedException("Custom Logs not supported in this installation. Please contact {C} support.".ReplaceBranding());
                        }

                    ssRecord = entAttr.Field.GetValue(ssRecord);
                    var structAttrs = ssRecord.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);

                        int eSpaceId;
                        if (!catalogCache.TryGetValue(entityDetails.OwnerKey, out eSpaceId)) {
                            using (Transaction transaction = DatabaseAccess.ForSystemDatabase.GetCommitableTransaction()) {
                                eSpaceId = DBRuntimePlatform.Instance.GetESpaceIdbyKey(transaction, ObjectKey.Parse(entityDetails.OwnerKey));
                            }

                            lock (catalogCache) {
                                int tmpESpaceId;
                                // try again for concurrency reasons
                                if (!catalogCache.TryGetValue(entityDetails.OwnerKey, out tmpESpaceId)) {
                                    catalogCache.Add(entityDetails.OwnerKey, eSpaceId);
                                }
                            }
                        }

                        // This method uses also cache
                        dbCatalog = DatabaseAccess.ForEspaceDatabase(eSpaceId).DatabaseServices.DatabaseConfiguration.DatabaseIdentifier;

                        Fields = new Hashtable(10);

                        for (int i = 0; i < structAttrs.Length; i++) {
                            var attrs = (Attribute[])structAttrs[i].GetCustomAttributes(typeof(EntityAttributeDetails), false);
                            if (attrs.Length == 1) {
                            EntityAttributeDetails entityAttributeDetails = (EntityAttributeDetails)attrs[0];
                                if (!entityAttributeDetails.IsAutonumber) {
                                    Fields.Add(entityAttributeDetails.Name, structAttrs[i].GetValue(ssRecord));
                                }
                            }
                        }
                        return;
                    }
                }

            throw new InvalidCastException("Unable to convert to record");
        }
    }
}
