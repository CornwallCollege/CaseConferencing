/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowCourses {

	public class ScrnPopup_Target: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnPopup_Target(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Variable <code>varLcEmailTargetToLearners</code> that represents the Service Studio local variable
		///  <code>EmailTargetToLearners</code> <p>Description: </p>
		/// </summary>
		bool varLcEmailTargetToLearners = false;

		/// <summary>
		/// Variable wt_WebBlockInstance35
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout wt_WebBlockInstance35;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCTargetTargetStatusRecord ssTargetEditRecord = new RCTargetTargetStatusRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtTargetEdit_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtTarget_OfferingCategory") &&
			ValidationUtils.IsValid(this, "wtTarget_TargetTypeId") &&
			ValidationUtils.IsValid(this, "wtTarget_TargetStatusId") &&
			ValidationUtils.IsValid(this, "wtTarget_TargetDate") &&
			ValidationUtils.IsValid(this, "wtTarget_TargetHeader") &&
			ValidationUtils.IsValid(this, "wtTarget_TargetDescription") &&
			ValidationUtils.IsValid(this, "wt_CheckBox21");
			return res;
		}

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_OfferingCategoryValidatorRequired;
		protected SelectRtWidget Rt_wtTarget_OfferingCategory = new SelectRtWidget();
		RLCategoryRecordList Rt_wtTarget_OfferingCategory_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_TargetTypeIdValidatorRequired;
		protected SelectRtWidget Rt_wtTarget_TargetTypeId = new SelectRtWidget();
		RLTargetTypeRecordList Rt_wtTarget_TargetTypeId_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_TargetStatusIdValidatorRequired;
		protected SelectRtWidget Rt_wtTarget_TargetStatusId = new SelectRtWidget();
		RLTargetStatusRecordList Rt_wtTarget_TargetStatusId_reclist = null;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_TargetDateValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtTarget_TargetDateValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_TargetHeaderValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtTarget_TargetHeaderValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_TargetDescriptionValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtTarget_TargetDescriptionValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container42;
		/// <summary>
		/// Variable (wtSave) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtSave;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container53;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("AjqMJ_oC4EOCtLWSOwTRnQ", "Popup_Target");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "AjqMJ_oC4EOCtLWSOwTRnQ", "Popup_Target");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "AjqMJ_oC4EOCtLWSOwTRnQ", "Popup_Target");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "AjqMJ_oC4EOCtLWSOwTRnQ", "Popup_Target");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "AjqMJ_oC4EOCtLWSOwTRnQ", "Popup_Target");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnPopup_Target() {
			htTabIndexGroups["wt_Text1"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_InlineExpression37"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text8"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_OfferingCategory"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text19"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_TargetTypeId"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text27"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_TargetStatusId"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text47"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_TargetDate"] = "wtTargetEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance4"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text52"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_TargetHeader"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text51"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_TargetDescription"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text44"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_CheckBox21"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Container42"] = "wtTargetEdit-1";
			htTabIndexGroups["wtSave"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Container5"] = "wtTargetEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance24"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text57"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Container53"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text29"] = "wtTargetEdit-1";
		}




		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "Courses.Popup_Target.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "Courses.Popup_Target.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamCourseCode!= "")) {
				parameters.Add(new Pair<string, string>("CourseCode", HttpUtility.UrlEncode(inParamCourseCode, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Courses.Popup_Target", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Courses.Popup_Target", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance35 = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) FindControl("wt_WebBlockInstance35");
			wt_Container42 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container42");
			wtSave = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wtSave");
			if (this.wtSave != null) {
				this.wtSave.Click += new System.EventHandler(this.wtSave_Click);
			}
			wt_Container5 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container5");
			wt_Container53 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container53");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "RichWidgets_wt_WebBlockInstance23") {
				return wt_WebBlockInstance35.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance23");
			}
			if (id == "wt_Text36") {
				return wt_WebBlockInstance35.wtTitle.FindControl("wt_Text36");
			}
			if (id == "wtTargetEdit") {
				return wt_WebBlockInstance35.wtContent.FindControl("wtTargetEdit");
			}
			if (id == "wt_EditRecordRow40") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordRow40");
			}
			if (id == "wt_EditRecordCell14") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell14");
			}
			if (id == "wt_Text1") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Text1");
			}
			if (id == "wt_EditRecordCell26") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell26");
			}
			if (id == "wt_InlineExpression37") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_InlineExpression37");
			}
			if (id == "wt_EditRecordRow54") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordRow54");
			}
			if (id == "wt_EditRecordCell15") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell15");
			}
			if (id == "wt_Text8") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Text8");
			}
			if (id == "wt_EditRecordCell45") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell45");
			}
			if (id == "wtTarget_OfferingCategory") {
				return wt_WebBlockInstance35.wtContent.FindControl("wtTarget_OfferingCategory");
			}
			if (id == "wt_EditRecordRow17") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordRow17");
			}
			if (id == "wt_EditRecordCell55") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell55");
			}
			if (id == "wt_Text19") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Text19");
			}
			if (id == "wt_EditRecordCell31") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell31");
			}
			if (id == "wtTarget_TargetTypeId") {
				return wt_WebBlockInstance35.wtContent.FindControl("wtTarget_TargetTypeId");
			}
			if (id == "wt_EditRecordRow10") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordRow10");
			}
			if (id == "wt_EditRecordCell46") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell46");
			}
			if (id == "wt_Text27") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Text27");
			}
			if (id == "wt_EditRecordCell41") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell41");
			}
			if (id == "wtTarget_TargetStatusId") {
				return wt_WebBlockInstance35.wtContent.FindControl("wtTarget_TargetStatusId");
			}
			if (id == "wt_EditRecordRow12") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordRow12");
			}
			if (id == "wt_EditRecordCell33") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell33");
			}
			if (id == "wt_Text47") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Text47");
			}
			if (id == "wt_EditRecordCell16") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell16");
			}
			if (id == "wtTarget_TargetDate") {
				return wt_WebBlockInstance35.wtContent.FindControl("wtTarget_TargetDate");
			}
			if (id == "RichWidgets_wt_WebBlockInstance4") {
				return wt_WebBlockInstance35.wtContent.FindControl("RichWidgets_wt_WebBlockInstance4");
			}
			if (id == "wt_EditRecordRow6") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordRow6");
			}
			if (id == "wt_EditRecordCell7") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell7");
			}
			if (id == "wt_Text52") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Text52");
			}
			if (id == "wt_EditRecordCell9") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell9");
			}
			if (id == "wtTarget_TargetHeader") {
				return wt_WebBlockInstance35.wtContent.FindControl("wtTarget_TargetHeader");
			}
			if (id == "wt_EditRecordRow38") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordRow38");
			}
			if (id == "wt_EditRecordCell22") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell22");
			}
			if (id == "wt_Text51") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Text51");
			}
			if (id == "wt_EditRecordCell50") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell50");
			}
			if (id == "wtTarget_TargetDescription") {
				return wt_WebBlockInstance35.wtContent.FindControl("wtTarget_TargetDescription");
			}
			if (id == "wt_EditRecordRow11") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordRow11");
			}
			if (id == "wt_EditRecordCell32") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell32");
			}
			if (id == "wt_Text44") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Text44");
			}
			if (id == "wt_EditRecordCell3") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell3");
			}
			if (id == "wt_CheckBox21") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_CheckBox21");
			}
			if (id == "wt_EditRecordRow56") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordRow56");
			}
			if (id == "wt_EditRecordCell20") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell20");
			}
			if (id == "wt_EditRecordCell48") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_EditRecordCell48");
			}
			if (id == "wt_Container42") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Container42");
			}
			if (id == "wtSave") {
				return wt_WebBlockInstance35.wtContent.FindControl("wtSave");
			}
			if (id == "wt_Container5") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Container5");
			}
			if (id == "RichWidgets_wt_WebBlockInstance24") {
				return wt_WebBlockInstance35.wtContent.FindControl("RichWidgets_wt_WebBlockInstance24");
			}
			if (id == "wt_Text57") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Text57");
			}
			if (id == "wt_Container53") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Container53");
			}
			if (id == "wt_Text29") {
				return wt_WebBlockInstance35.wtContent.FindControl("wt_Text29");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_Target"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamCourseCode = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_Target"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["CourseCode"] != null) {
						inParamCourseCode = Request.QueryString["CourseCode"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["CourseCode"] != null) {
						inParamCourseCode = Request.Form["CourseCode"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				CheckPermissions(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtTargetEdit_onDataBindingDataSource(this.FindControl("wtTargetEdit"), null);
				}
				Title = "Popup Target"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_Target", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowCourses.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotCaseConferencingUser("CaseConferencingUser role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("AjqMJ_oC4EOCtLWSOwTRnQ"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandClose</code> that represents the Service Studio screen action
		///  <code>Close</code> <p> Description: </p>
		/// </summary>
		private bool CommandClose(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSave: VarsBag {
			public RLTextRecordList queryResGEtStudents_outParamList = new RLTextRecordList();
			public int queryResGEtStudents_outParamCount = 0;

			public int resCreateOrUpdateTarget_outParamId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				if ((ssTargetEditRecord.ssENTarget.ssOfferingCategory==BuiltInFunction.NullIdentifier())) {
					// Feedback_Message
					Actions.ActionFeedback_Message(heContext, "You must select the offering category.", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
					// Update Screen
					return true;

				} else {
					if (!((inParamCourseCode== ""))) {
						// Query QueryGEtStudents
						int QueryGEtStudents_maxRecords = 0;
						localVars.queryResGEtStudents_outParamList = FuncCommandSave.QueryGEtStudents(heContext, QueryGEtStudents_maxRecords, IterationMultiplicity.Single, out localVars.queryResGEtStudents_outParamCount, inParamCourseCode
						);
						// Foreach GEtStudents.List
						localVars.queryResGEtStudents_outParamList.StartIteration();
						try {
							while (!localVars.queryResGEtStudents_outParamList.Eof) {
								ssTargetEditRecord.ssENTarget.ssStudentReference = BuiltInFunction.TextToEntityRefText(localVars.queryResGEtStudents_outParamList.CurrentRec.ssSTText.ssValue); // TargetEdit.Record.Target.StudentReference = TextToEntityRefText
								ssTargetEditRecord.ssENTarget.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // TargetEdit.Record.Target.CreatedBy = UserID
								ssTargetEditRecord.ssENTarget.ssCreatedAt = BuiltInFunction.CurrDateTime(); // TargetEdit.Record.Target.CreatedAt = CurrDateTime
								// CreateOrUpdateTarget
								ExtendedActions.CreateOrUpdateTarget(heContext, ssTargetEditRecord.ssENTarget.ChangedAttributes, ((RCTargetRecord) ssTargetEditRecord.ssENTarget), out localVars.resCreateOrUpdateTarget_outParamId);
								localVars.queryResGEtStudents_outParamList.Advance();
							}
						} finally {
							localVars.queryResGEtStudents_outParamList.EndIteration();
						}
						if (varLcEmailTargetToLearners) {
							// Popup_Editor_Notify2
							Actions.ActionPopup_Editor_Notify(heContext, ((("SendEmail|" +inParamCourseCode) + "|") +ssTargetEditRecord.ssENTarget.ssTargetDescription));

						} else {
							// Popup_Editor_Notify
							Actions.ActionPopup_Editor_Notify(heContext, "OK");

						}

					}
					// Popup_Editor_Close
					Actions.ActionPopup_Editor_Close(heContext);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_WebBlockInstance35 Functions
		/// </summary>
		public void webBlck_WebBlockInstance35_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) sender;
			widget.inParamWidth = 550;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance23 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance23_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("44eRkHEjakqGaX+TzsJESA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtTargetEdit Functions
		/// </summary>
		public void wtTargetEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
		}
		/// <summary>
		/// wt_InlineExpression37 Functions
		/// </summary>
		public void expression_InlineExpression37_onDataBinding(object sender, System.EventArgs e) {
			expression_InlineExpression37_setInlineAttributes(sender, e);
		}
		public string expression_InlineExpression37_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-weight:bold;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Function to dump expression (Key = px2ltQnoskm_zzZ9ND+qTw) Expression: CourseCode
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression37() {
			return inParamCourseCode;
		}
		/// <summary>
		/// wtTarget_OfferingCategory Functions
		/// </summary>
		public void selTarget_OfferingCategory_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtTarget_OfferingCategory_reclist == null) {
				using(Transaction wtTarget_OfferingCategory_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtTarget_OfferingCategory_sql = "SELECT [ID], [LABEL], NULL, NULL, NULL FROM " + ENCategoryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtTarget_OfferingCategory_sqlCmd = wtTarget_OfferingCategory_trans.CreateCommand(wtTarget_OfferingCategory_sql);
					Rt_wtTarget_OfferingCategory_sqlCmd.CreateParameter("@Selection", ssTargetEditRecord.ssENTarget.ssOfferingCategory);
					Rt_wtTarget_OfferingCategory_sqlCmd.TransformParametersSyntax();
					Rt_wtTarget_OfferingCategory_reclist = new RLCategoryRecordList();
					Rt_wtTarget_OfferingCategory_reclist.Transaction = wtTarget_OfferingCategory_trans;
					Rt_wtTarget_OfferingCategory_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(5, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtTarget_OfferingCategory_sqlCmd, Rt_wtTarget_OfferingCategory_reclist, "WebSelectWidget load operation");
					Rt_wtTarget_OfferingCategory_reclist = (RLCategoryRecordList) Rt_wtTarget_OfferingCategory_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtTarget_OfferingCategory.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtTarget_OfferingCategory_reclist.StartIteration();
			try {
				while (!Rt_wtTarget_OfferingCategory_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtTarget_OfferingCategory_reclist.CurrentRec.ssENCategory.ssLabel, Convert.ToString(Rt_wtTarget_OfferingCategory_reclist.CurrentRec.ssENCategory.ssId)));
					if (ssTargetEditRecord.ssENTarget.ssOfferingCategory == Convert.ToInt32(Convert.ToString(Rt_wtTarget_OfferingCategory_reclist.CurrentRec.ssENCategory.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtTarget_OfferingCategory_reclist.Advance();
				}
			} finally {
				Rt_wtTarget_OfferingCategory_reclist.EndIteration();
			}
		}
		public void selTarget_OfferingCategory_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtTarget_OfferingCategory.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssTargetEditRecord.ssENTarget.ssOfferingCategory = 0;
			}
			else {
				Rt_wtTarget_OfferingCategory.SpecialListVal = "";
				try {
					ssTargetEditRecord.ssENTarget.ssOfferingCategory = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_OfferingCategory)
		/// </summary>
		/// <returns>The Visible State of wtTarget_OfferingCategory</returns>
		public bool selTarget_OfferingCategory_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_OfferingCategory)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_OfferingCategory</returns>
		public bool selTarget_OfferingCategory_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selTarget_OfferingCategory)
		/// </summary>
		/// <returns>The Mandatory Value of selTarget_OfferingCategory</returns>
		public bool selTarget_OfferingCategory_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtTarget_TargetTypeId Functions
		/// </summary>
		public void selTarget_TargetTypeId_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtTarget_TargetTypeId_reclist == null) {
				using(Transaction wtTarget_TargetTypeId_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtTarget_TargetTypeId_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENTargetTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtTarget_TargetTypeId_sqlCmd = wtTarget_TargetTypeId_trans.CreateCommand(wtTarget_TargetTypeId_sql);
					Rt_wtTarget_TargetTypeId_sqlCmd.CreateParameter("@Selection", ssTargetEditRecord.ssENTarget.ssTargetTypeId);
					Rt_wtTarget_TargetTypeId_sqlCmd.TransformParametersSyntax();
					Rt_wtTarget_TargetTypeId_reclist = new RLTargetTypeRecordList();
					Rt_wtTarget_TargetTypeId_reclist.Transaction = wtTarget_TargetTypeId_trans;
					Rt_wtTarget_TargetTypeId_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(4, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtTarget_TargetTypeId_sqlCmd, Rt_wtTarget_TargetTypeId_reclist, "WebSelectWidget load operation");
					Rt_wtTarget_TargetTypeId_reclist = (RLTargetTypeRecordList) Rt_wtTarget_TargetTypeId_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtTarget_TargetTypeId.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtTarget_TargetTypeId_reclist.StartIteration();
			try {
				while (!Rt_wtTarget_TargetTypeId_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtTarget_TargetTypeId_reclist.CurrentRec.ssENTargetType.ssLabel, Convert.ToString(Rt_wtTarget_TargetTypeId_reclist.CurrentRec.ssENTargetType.ssId)));
					if (ssTargetEditRecord.ssENTarget.ssTargetTypeId == Convert.ToInt32(Convert.ToString(Rt_wtTarget_TargetTypeId_reclist.CurrentRec.ssENTargetType.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtTarget_TargetTypeId_reclist.Advance();
				}
			} finally {
				Rt_wtTarget_TargetTypeId_reclist.EndIteration();
			}
		}
		public void selTarget_TargetTypeId_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtTarget_TargetTypeId.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssTargetEditRecord.ssENTarget.ssTargetTypeId = 0;
			}
			else {
				Rt_wtTarget_TargetTypeId.SpecialListVal = "";
				try {
					ssTargetEditRecord.ssENTarget.ssTargetTypeId = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_TargetTypeId)
		/// </summary>
		/// <returns>The Visible State of wtTarget_TargetTypeId</returns>
		public bool selTarget_TargetTypeId_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_TargetTypeId)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_TargetTypeId</returns>
		public bool selTarget_TargetTypeId_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selTarget_TargetTypeId)
		/// </summary>
		/// <returns>The Mandatory Value of selTarget_TargetTypeId</returns>
		public bool selTarget_TargetTypeId_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtTarget_TargetStatusId Functions
		/// </summary>
		public void selTarget_TargetStatusId_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtTarget_TargetStatusId_reclist == null) {
				using(Transaction wtTarget_TargetStatusId_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtTarget_TargetStatusId_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENTargetStatusEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtTarget_TargetStatusId_sqlCmd = wtTarget_TargetStatusId_trans.CreateCommand(wtTarget_TargetStatusId_sql);
					Rt_wtTarget_TargetStatusId_sqlCmd.CreateParameter("@Selection", ssTargetEditRecord.ssENTarget.ssTargetStatusId);
					Rt_wtTarget_TargetStatusId_sqlCmd.TransformParametersSyntax();
					Rt_wtTarget_TargetStatusId_reclist = new RLTargetStatusRecordList();
					Rt_wtTarget_TargetStatusId_reclist.Transaction = wtTarget_TargetStatusId_trans;
					Rt_wtTarget_TargetStatusId_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(4, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtTarget_TargetStatusId_sqlCmd, Rt_wtTarget_TargetStatusId_reclist, "WebSelectWidget load operation");
					Rt_wtTarget_TargetStatusId_reclist = (RLTargetStatusRecordList) Rt_wtTarget_TargetStatusId_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtTarget_TargetStatusId.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtTarget_TargetStatusId_reclist.StartIteration();
			try {
				while (!Rt_wtTarget_TargetStatusId_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtTarget_TargetStatusId_reclist.CurrentRec.ssENTargetStatus.ssLabel, Convert.ToString(Rt_wtTarget_TargetStatusId_reclist.CurrentRec.ssENTargetStatus.ssId)));
					if (ssTargetEditRecord.ssENTarget.ssTargetStatusId == Convert.ToInt32(Convert.ToString(Rt_wtTarget_TargetStatusId_reclist.CurrentRec.ssENTargetStatus.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtTarget_TargetStatusId_reclist.Advance();
				}
			} finally {
				Rt_wtTarget_TargetStatusId_reclist.EndIteration();
			}
		}
		public void selTarget_TargetStatusId_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtTarget_TargetStatusId.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssTargetEditRecord.ssENTarget.ssTargetStatusId = 0;
			}
			else {
				Rt_wtTarget_TargetStatusId.SpecialListVal = "";
				try {
					ssTargetEditRecord.ssENTarget.ssTargetStatusId = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_TargetStatusId)
		/// </summary>
		/// <returns>The Visible State of wtTarget_TargetStatusId</returns>
		public bool selTarget_TargetStatusId_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_TargetStatusId)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_TargetStatusId</returns>
		public bool selTarget_TargetStatusId_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selTarget_TargetStatusId)
		/// </summary>
		/// <returns>The Mandatory Value of selTarget_TargetStatusId</returns>
		public bool selTarget_TargetStatusId_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtTarget_TargetDate Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtTarget_TargetDate_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=ssTargetEditRecord.ssENTarget.ssTargetDate)) {
				return ssTargetEditRecord.ssENTarget.ssTargetDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtTarget_TargetDate");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==ssTargetEditRecord.ssENTarget.ssTargetDate)) {
						return "";
					}
					return ssTargetEditRecord.ssENTarget.ssTargetDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtTarget_TargetDate_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssTargetEditRecord.ssENTarget.ssTargetDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					ssTargetEditRecord.ssENTarget.ssTargetDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDate(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssTargetEditRecord.ssENTarget.ssTargetDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_TargetDate)
		/// </summary>
		/// <returns>The Visible State of wtTarget_TargetDate</returns>
		public bool inputwtTarget_TargetDate_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_TargetDate)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_TargetDate</returns>
		public bool inputwtTarget_TargetDate_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtTarget_TargetDate)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtTarget_TargetDate</returns>
		public bool inputwtTarget_TargetDate_isMandatory() {
			return false;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance4 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance4_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
			widget.inParamInputWidgetId = this.FindControl("wtTarget_TargetDate").ClientID;
			widget.inParamMinYear = -1;
			widget.inParamMaxYear = -1;
			widget.inParamAlign = "Bl";
			widget.inParamSingleClick = true;
			widget.inParamShowWeekNumbers = false;
			widget.inParamUpdateOnCloseOnly = false;
			widget.inParamShowOthers = false;
			widget.inParamFirstDay = 0;
			widget.inParamShowTime = false;
			widget.inParamShow24HourFormat = true;
			widget.inParamReuseCalendarObject = false;
			widget.inParamInitialDate = new DateTime(1900, 1, 1, 0, 0, 0);
			widget.inParamDateFormat = "";
			widget.inParamSpecialDays = "";
			widget.inParamOnUpdate = "";
			widget.inParamFlatStyle = false;
			widget.inParamButtonWidgetId = "";
			widget.inParamYearStep = 2;
		}
		/// <summary>
		/// wtTarget_TargetHeader Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtTarget_TargetHeader_input_value() {
			if (("" !=ssTargetEditRecord.ssENTarget.ssTargetHeader)) {
				return ssTargetEditRecord.ssENTarget.ssTargetHeader;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtTarget_TargetHeader");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssTargetEditRecord.ssENTarget.ssTargetHeader;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtTarget_TargetHeader_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssTargetEditRecord.ssENTarget.ssTargetHeader = ""; 
				} else {
					ssTargetEditRecord.ssENTarget.ssTargetHeader = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssTargetEditRecord.ssENTarget.ssTargetHeader = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_TargetHeader)
		/// </summary>
		/// <returns>The Visible State of wtTarget_TargetHeader</returns>
		public bool inputwtTarget_TargetHeader_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_TargetHeader)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_TargetHeader</returns>
		public bool inputwtTarget_TargetHeader_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtTarget_TargetHeader)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtTarget_TargetHeader</returns>
		public bool inputwtTarget_TargetHeader_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtTarget_TargetDescription Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtTarget_TargetDescription_input_value() {
			if (("" !=ssTargetEditRecord.ssENTarget.ssTargetDescription)) {
				return ssTargetEditRecord.ssENTarget.ssTargetDescription;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtTarget_TargetDescription");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssTargetEditRecord.ssENTarget.ssTargetDescription;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtTarget_TargetDescription_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssTargetEditRecord.ssENTarget.ssTargetDescription = ""; 
				} else {
					ssTargetEditRecord.ssENTarget.ssTargetDescription = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssTargetEditRecord.ssENTarget.ssTargetDescription = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_TargetDescription)
		/// </summary>
		/// <returns>The Visible State of wtTarget_TargetDescription</returns>
		public bool inputwtTarget_TargetDescription_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_TargetDescription)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_TargetDescription</returns>
		public bool inputwtTarget_TargetDescription_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtTarget_TargetDescription)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtTarget_TargetDescription</returns>
		public bool inputwtTarget_TargetDescription_isMandatory() {
			return true;
		}

		/// <summary>
		/// wt_CheckBox21 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box wcx4Y5tZZkevXmdppL1W7Q
		/// </summary>
		/// <returns>The Value of the Check Box wcx4Y5tZZkevXmdppL1W7Q</returns>
		public bool chk_CheckBox21_checked_value() {
			return varLcEmailTargetToLearners;
		}
		public void chk_CheckBox21_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				varLcEmailTargetToLearners = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox21)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox21</returns>
		public bool chk_CheckBox21_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox21)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox21</returns>
		public bool chk_CheckBox21_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container42 Functions
		/// </summary>
		public void cnt_Container42_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container42_setInlineAttributes(sender, e);
		}
		public string cnt_Container42_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container42_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container42)
		/// </summary>
		/// <returns>The Visible State of wt_Container42</returns>
		public bool cnt_Container42_isVisible() {
			return true;
		}

		/// <summary>
		/// wtSave Functions
		/// </summary>
		public void lnkSave_onDataBinding(object sender, System.EventArgs e) {
			string msg = OutSystems.HubEdition.RuntimePlatform.RuntimePlatformUtils.JavaScriptEscString("This will create this Target for all Learners in this Course, Are you sure?");
			((OutSystems.HubEdition.WebWidgets.LinkButton) sender).ConfirmationMessage = msg;
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtSave_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandSave(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wtSave)
		/// </summary>
		/// <returns>title of the Link (wtSave)</returns>
		public string
		lnkSave_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSave)
		/// </summary>
		/// <returns>The Visible State of wtSave</returns>
		public bool lnkSave_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtSave)
		/// </summary>
		/// <returns>The Enabled State of wtSave</returns>
		public bool lnkSave_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container5 Functions
		/// </summary>
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container5_setInlineAttributes(sender, e);
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("onclick", (("document.getElementById(\'" +wtSave.ClientID) + "\').click();").ToString());
			if (!cnt_Container5_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance24 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance24_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container53 Functions
		/// </summary>
		public void cnt_Container53_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container53_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container53_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container53_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container53
		/// </summary>
		public void cnt_Container53_AjaxClick(object sender, System.EventArgs e) {
			if (CommandClose(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container53)
		/// </summary>
		/// <returns>The Visible State of wt_Container53</returns>
		public bool cnt_Container53_isVisible() {
			return true;
		}



		public static class FuncCommandClose {
		}
		public static class FuncCommandSave {

			/// <summary>
			/// Query Function "GEtStudents" of Action "Save"
			/// </summary>
			public static RLTextRecordList QueryGEtStudents(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstCourseOfferCode) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstCourseOfferCode", DbType.String, qpstCourseOfferCode);
				string advSql = "SELECT  {Student_Group}.[STUDENTREFERENCE]   " +
				 "    FROM  {Student_Group} INNER JOIN  {Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID]  " +
				 "WHERE  {Student_Group}.[GROUPID] =  {Group}.[ID]   " +
				 "AND  {Student_Group}.[ENROLMENTSTATUS] = 'Active'   " +
				 "AND  {Group}.[GROUPNAME] = @qpstCourseOfferCode   " +
				 "GROUP BY  {Student_Group}.[STUDENTREFERENCE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLTextRecordList outParamList = new RLTextRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLTextRecordList _tmp = new RLTextRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Popup_Target.Save.GEtStudents.List");
							outParamList = (RLTextRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Popup_Target.Save.GEtStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Popup_Target.Save.GEtStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GEtStudents in Save in Popup_Target in Courses in CaseConferencing (SELECT {Student_Group}.[StudentReference]       FROM {Student_Group} INNER JOIN {Group} ON {Student_Group}.[GroupId] = {Group}.[Id]  WHERE {Student_Group}.[GroupId] = {Group}.[Id]   AND {Student_Group}.[EnrolmentStatus] = 'Active'   AND {Group}.[GroupName] = @CourseOfferCode   GROUP BY {Student_Group}.[StudentReference]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GEtStudents in Save in Popup_Target in Courses in CaseConferencing (SELECT {Student_Group}.[StudentReference]       FROM {Student_Group} INNER JOIN {Group} ON {Student_Group}.[GroupId] = {Group}.[Id]  WHERE {Student_Group}.[GroupId] = {Group}.[Id]   AND {Student_Group}.[EnrolmentStatus] = 'Active'   AND {Group}.[GroupName] = @CourseOfferCode   GROUP BY {Student_Group}.[StudentReference]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GEtStudents in Save in Popup_Target in Courses in CaseConferencing (SELECT {Student_Group}.[StudentReference]       FROM {Student_Group} INNER JOIN {Group} ON {Student_Group}.[GroupId] = {Group}.[Id]  WHERE {Student_Group}.[GroupId] = {Group}.[Id]   AND {Student_Group}.[EnrolmentStatus] = 'Active'   AND {Group}.[GroupName] = @CourseOfferCode   GROUP BY {Student_Group}.[StudentReference]): " + aqExcep.Message);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Title = "Popup Target"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_Target", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_Target", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamCourseCode", inParamCourseCode, "");
			ViewStateAttributes.SetInViewState("varLcEmailTargetToLearners", varLcEmailTargetToLearners, false);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssId", ssTargetEditRecord.ssENTarget.ssId, 0);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssTargetTypeId", ssTargetEditRecord.ssENTarget.ssTargetTypeId, 0);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssTargetHeader", ssTargetEditRecord.ssENTarget.ssTargetHeader, "");
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssTargetDescription", ssTargetEditRecord.ssENTarget.ssTargetDescription, "");
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssTargetStatusId", ssTargetEditRecord.ssENTarget.ssTargetStatusId, 0);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssTargetDate", ssTargetEditRecord.ssENTarget.ssTargetDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssOfferingCategory", ssTargetEditRecord.ssENTarget.ssOfferingCategory, 0);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssTargetEditRecord.ssENTarget.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssTargetEditRecord.ssENTarget.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtTarget_OfferingCategory_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_OfferingCategory")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_TargetTypeId_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetTypeId")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_TargetStatusId_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetStatusId")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_TargetDate_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetDate")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_TargetHeader_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetHeader")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_TargetDescription_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetDescription")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamCourseCode = (string) ViewStateAttributes.GetFromViewState("inParamCourseCode", "");
				varLcEmailTargetToLearners = (bool) ViewStateAttributes.GetFromViewState("varLcEmailTargetToLearners", false);
				ssTargetEditRecord.ssENTarget.ssId = (int) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssId", 0);
				ssTargetEditRecord.ssENTarget.ssTargetTypeId = (int) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssTargetTypeId", 0);
				ssTargetEditRecord.ssENTarget.ssTargetHeader = (string) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssTargetHeader", "");
				ssTargetEditRecord.ssENTarget.ssTargetDescription = (string) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssTargetDescription", "");
				ssTargetEditRecord.ssENTarget.ssTargetStatusId = (int) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssTargetStatusId", 0);
				ssTargetEditRecord.ssENTarget.ssTargetDate = (DateTime) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssTargetDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssTargetEditRecord.ssENTarget.ssOfferingCategory = (int) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssOfferingCategory", 0);
				ssTargetEditRecord.ssENTarget.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ChangedAttributes", null));
				ssTargetEditRecord.ssENTarget.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_OfferingCategory")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_OfferingCategory_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetTypeId")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_TargetTypeId_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetStatusId")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_TargetStatusId_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetDate")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_TargetDate_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetHeader")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_TargetHeader_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetDescription")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_TargetDescription_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wtTarget_OfferingCategory", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wtTarget_TargetTypeId", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wtTarget_TargetStatusId", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtTarget_TargetDate", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate);
			ValidationUtils.ValidateInput(this, "wtTarget_TargetHeader", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtTarget_TargetDescription", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
