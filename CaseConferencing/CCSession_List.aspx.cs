/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowCaseConference {

	public class ScrnCCSession_List: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnCCSession_List(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance8
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance8;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		/// <summary>
		/// Variable "True" if the Widget wt_If9
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If9T;

		/// <summary>
		/// Variable "True" if the Widget wt_If9
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If9F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		/// <summary>
		/// Variable (wtLinkAdd) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtLinkAdd;
		protected OutSystems.HubEdition.WebWidgets.Container wtListWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;
		private RLClusterUserCCSessionRecordList _ssSessionListList = new RLClusterUserCCSessionRecordList();
		public RLClusterUserCCSessionRecordList ssSessionListList {
			get {
				return _ssSessionListList; 
			}
			set {
				_ssSessionListList = value;
				wtSessionList.DataSource = value;
				ssSessionListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtSessionList;
		public ArrayList wtSessionList_storage = new ArrayList();
		protected bool ssSessionListList_notUsedYet = true;
		protected bool ssSessionListListDoDataBind;
		protected bool ssSessionListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkSessionBlock.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("GTbqPMKqekWIOtQ9zqHlVQ", "CCSession_List");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "GTbqPMKqekWIOtQ9zqHlVQ", "CCSession_List");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "GTbqPMKqekWIOtQ9zqHlVQ", "CCSession_List");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "GTbqPMKqekWIOtQ9zqHlVQ", "CCSession_List");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "GTbqPMKqekWIOtQ9zqHlVQ", "CCSession_List");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnCCSession_List() {
		}


		int resUserCheck_outParamPermissionType = 0;
		RLClusterUserCCSessionRecordList queryResGetCCSessions_outParamList = new RLClusterUserCCSessionRecordList();
		int queryResGetCCSessions_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("tAo+Eq5dL0aZHIgxzvoqww")).ssId, out resUserCheck_outParamPermissionType);
			if ((resUserCheck_outParamPermissionType==BuiltInFunction.NullIdentifier())) {
				// Destination = ExternalURL

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				}

			} else {
				// Query datasetGetCCSessions
				int datasetGetCCSessions_maxRecords = Math.Max(wtSessionList.StartIndex + wtSessionList.LineCount + 1, 0);
				queryResGetCCSessions_outParamList = FuncssPreparation.datasetGetCCSessions(heContext, datasetGetCCSessions_maxRecords, IterationMultiplicity.Single, out queryResGetCCSessions_outParamCount);

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "CCSession_List.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "CCSession_List.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "CCSession_List", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "CCSession_List", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance8 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance8");
			wt_Container1 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container1");
			wt_Container26 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container26");
			wtLinkAdd = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wtLinkAdd");
			wtListWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtListWrapper");
			wt_Container4 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container4");
			wt_Container33 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container33");
			wtSessionList = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtSessionList");
			wtSessionList.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtSessionList.ClientID, true, -1);
			wtSessionList.LineCountExpression = () => 10;
			wtSessionList.EmptyMessageExpression = () => "No items to show...";
			wt_Container5 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container5");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance14") {
				return ThemeProvider_wt_WebBlockInstance8.wtHelpUpdate.FindControl("wt_WebBlockInstance14");
			}
			if (id == "ThemeProvider_wt_WebBlockInstance23") {
				return ThemeProvider_wt_WebBlockInstance8.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance23");
			}
			if (id == "wt_Container1") {
				return ThemeProvider_wt_WebBlockInstance8.wtTitle.FindControl("wt_Container1");
			}
			if (id == "RichWidgets_wt_WebBlockInstance27") {
				return ThemeProvider_wt_WebBlockInstance8.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance27");
			}
			if (id == "wt_Text29") {
				return ThemeProvider_wt_WebBlockInstance8.wtTitle.FindControl("wt_Text29");
			}
			if (id == "wt_If9") {
				return ThemeProvider_wt_WebBlockInstance8.wtActions.FindControl("wt_If9");
			}
			if (id == "wt_If9T") {
				return ThemeProvider_wt_WebBlockInstance8.wtActions.FindControl("wt_If9T");
			}
			if (id == "wt_Container26") {
				return ThemeProvider_wt_WebBlockInstance8.wtActions.FindControl("wt_Container26");
			}
			if (id == "wtLinkAdd") {
				return ThemeProvider_wt_WebBlockInstance8.wtActions.FindControl("wtLinkAdd");
			}
			if (id == "RichWidgets_wt_WebBlockInstance21") {
				return ThemeProvider_wt_WebBlockInstance8.wtActions.FindControl("RichWidgets_wt_WebBlockInstance21");
			}
			if (id == "wt_Text34") {
				return ThemeProvider_wt_WebBlockInstance8.wtActions.FindControl("wt_Text34");
			}
			if (id == "wt_If9F") {
				return ThemeProvider_wt_WebBlockInstance8.wtActions.FindControl("wt_If9F");
			}
			if (id == "wtListWrapper") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wtListWrapper");
			}
			if (id == "wt_Container4") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Container4");
			}
			if (id == "RichWidgets_wt_WebBlockInstance18") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance18");
			}
			if (id == "wt_Container33") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Container33");
			}
			if (id == "wt_Table11") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Table11");
			}
			if (id == "wt_TableRow15") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_TableRow15");
			}
			if (id == "wt_TableCell3") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_TableCell3");
			}
			if (id == "wt_Text22") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Text22");
			}
			if (id == "wt_TableCell20") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_TableCell20");
			}
			if (id == "wt_Text30") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Text30");
			}
			if (id == "wt_TableCell16") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_TableCell16");
			}
			if (id == "wt_Text31") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Text31");
			}
			if (id == "wt_TableCell12") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_TableCell12");
			}
			if (id == "wt_Text28") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Text28");
			}
			if (id == "wt_TableCell10") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_TableCell10");
			}
			if (id == "wtSessionList") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wtSessionList");
			}
			if (id == "wt_Container5") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Container5");
			}
			if (id == "RichWidgets_wt_WebBlockInstance13") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance13");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssSessionListListDoDataBind = true;
				Title = "CCSession List"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CCSession_List", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowCaseConference.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotCaseConferencingBackoffice("CaseConferencingBackoffice role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("GTbqPMKqekWIOtQ9zqHlVQ"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvOnNotify: VarsBag {
			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public lcvOnNotify() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotify localVars = new lcvOnNotify();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				// Destination = CCSession_Edit

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "jHNbl_Td0ki81a3x3GKPSQ";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add(0);
						screenParameters.Add(BuiltInFunction.TextToEntityRefText(localVars.resNotifyWidgetGetMessage_outParamMessage));
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_Edit"] = screenParameters;
						string sURLQuery = "ClusterId=" + System.Web.HttpUtility.UrlEncode(BuiltInFunction.TextToEntityRefText(localVars.resNotifyWidgetGetMessage_outParamMessage));
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_Edit.aspx" + sURLQuery;
						((OSPageViewState) Page).RedirectLocation = sURL;
						return false;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "jHNbl_Td0ki81a3x3GKPSQ";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add(0);
						screenParameters.Add(BuiltInFunction.TextToEntityRefText(localVars.resNotifyWidgetGetMessage_outParamMessage));
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_Edit"] = screenParameters;
						Server.Transfer("CCSession_Edit.aspx");
						return false;

					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandRefreshTable</code> that represents the Service Studio screen action
		///  <code>RefreshTable</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshTable(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetCCSessions
				{
					int datasetGetCCSessions_maxRecords = Math.Max(wtSessionList.StartIndex + wtSessionList.LineCount + 1, 0);
					queryResGetCCSessions_outParamList = FuncssPreparation.datasetGetCCSessions(heContext, datasetGetCCSessions_maxRecords, IterationMultiplicity.Single, out queryResGetCCSessions_outParamCount);
				}
				// Refresh Widget (wtListWrapper)
				ssSessionListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListWrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance8 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance8_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance14 Functions
		/// </summary>
		public void webBlck_WebBlockInstance14_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate widget = (ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance23 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance23_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("KpCO1xHYc0eEHPpZk6Mmlg")).ssId;
		}
		/// <summary>
		/// wt_Container1 Functions
		/// </summary>
		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container1_setInlineAttributes(sender, e);
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container1_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance27 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance27_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("cmAzrjaBh0qFvctSMz9ufw")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_If9 Functions
		/// </summary>
		bool if_wt_If9_hasRun=false;
		bool if_wt_If9_evalResult;
		public bool if_wt_If9() {
			if (if_wt_If9_hasRun) {
				if_wt_If9_hasRun = false;
				return if_wt_If9_evalResult;
			}
			if_wt_If9_hasRun = true;
			if_wt_If9_evalResult = (resUserCheck_outParamPermissionType==ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId);
			return if_wt_If9_evalResult;
		}

		/// <summary>
		/// wt_Container26 Functions
		/// </summary>
		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container26_setInlineAttributes(sender, e);
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container26_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			return true;
		}

		/// <summary>
		/// wtLinkAdd Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtLinkAdd)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtLinkAdd)</returns>
		public string lnkLinkAdd_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_SelectCluster", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtLinkAdd)
		/// </summary>
		/// <returns>title of the Link (wtLinkAdd)</returns>
		public string
		lnkLinkAdd_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtLinkAdd)
		/// </summary>
		/// <returns>The Visible State of wtLinkAdd</returns>
		public bool lnkLinkAdd_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtLinkAdd)
		/// </summary>
		/// <returns>The Enabled State of wtLinkAdd</returns>
		public bool lnkLinkAdd_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance21 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance21_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
			widget.inParamLinkOrButtonWidgetId = wtLinkAdd.ClientID;
			widget.inParamTitle = " ";
			widget.inParamWidthPx = 700;
			widget.inParamHeightPx = -1;
			widget.inParamAutoResize = true;
			widget.inParamRecenterOnResize = true;
			widget.inParamHideCloseButton = false;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance21
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance21_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandOnNotify(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wtListWrapper Functions
		/// </summary>
		public void cntListWrapper_onDataBinding(object sender, System.EventArgs e) {
			cntListWrapper_setInlineAttributes(sender, e);
		}
		public string cntListWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntListWrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtListWrapper)
		/// </summary>
		/// <returns>The Visible State of wtListWrapper</returns>
		public bool cntListWrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container4 Functions
		/// </summary>
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container4_setInlineAttributes(sender, e);
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container4_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance18 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance18_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter) sender;
			widget.inParamStartIndex = Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtSessionList.ClientID, true, -1);
			widget.inParamTotalRowCount = queryResGetCCSessions_outParamCount;
			widget.inParamLineCount = wtSessionList.RtWidget.LineCount;
		}
		/// <summary>
		/// wt_Container33 Functions
		/// </summary>
		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container33_setInlineAttributes(sender, e);
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container33_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_TableCell3 Functions
		/// </summary>
		public void wt_TableCell3_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell3_setInlineAttributes(sender, e);
		}
		public string wt_TableCell3_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell20 Functions
		/// </summary>
		public void wt_TableCell20_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell20_setInlineAttributes(sender, e);
		}
		public string wt_TableCell20_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell16 Functions
		/// </summary>
		public void wt_TableCell16_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell16_setInlineAttributes(sender, e);
		}
		public string wt_TableCell16_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell12 Functions
		/// </summary>
		public void wt_TableCell12_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell12_setInlineAttributes(sender, e);
		}
		public string wt_TableCell12_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell10 Functions
		/// </summary>
		public void wt_TableCell10_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell10_setInlineAttributes(sender, e);
		}
		public string wt_TableCell10_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wtSessionList Functions
		/// </summary>
		public void recListSessionList_onDataBinding(object sender, System.EventArgs e) {
			// widget wtSessionList
			ssSessionListList = queryResGetCCSessions_outParamList;
			ssSessionListListDoDataBind = false;
			ssSessionListListDataBound = true;
		}
		public void recListSessionList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssSessionListList.Length > 0) {
					ssSessionListList.CurrentRec = ssSessionListList[ssSessionListList.CurrentRowNumber];
				}
				if (ssSessionListList.Length > e.SelectedIndex) {
					ssSessionListList.CurrentRec = ssSessionListList[e.SelectedIndex];
					ssSessionListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListSessionList_Store(object dataItem, int index) {
			return "";
		}
		public void recListSessionList_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListSessionList_Clear(object sender, EventArgs e) {
			wtSessionList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListSessionList_Rebuild(int startIndex, int lineCount) {
			if (ssSessionListList.Length != -1) {
				wtSessionList_storage.Clear();
				for (int i=startIndex; i<ssSessionListList.Data.Count && i<startIndex+lineCount; i++) {
					recListSessionList_Store(ssSessionListList.Data[i], wtSessionList_storage.Count);
				}
			}
		}
		public void recListSessionList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtSessionList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLClusterUserCCSessionRecordList getWtSessionListList() {
			if (ssSessionListListDoDataBind) {
				recListSessionList_onDataBinding(this, null);
			}

			return ssSessionListList;
		}
		/// <summary>
		/// wt_WebBlockInstance17 Functions
		/// </summary>
		public void webBlck_WebBlockInstance17_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkSessionBlock widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkSessionBlock) sender;
			widget.inParamSessionRecord = getWtSessionListList().CurrentRec;
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance17
		/// </summary>
		public void webBlck_WebBlockInstance17_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshTable(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container5 Functions
		/// </summary>
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container5_setInlineAttributes(sender, e);
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container5_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance13 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance13_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation) sender;
			widget.inParamListWidgetId = wtSessionList.ClientID;
			widget.inParamLineCount = wtSessionList.RtWidget.LineCount;
			widget.inParamTotalRowCount = queryResGetCCSessions_outParamCount;
			widget.inParamMaxPageNumbers = 5;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance13
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance13_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshTable(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}


		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandRefreshTable {
		}
		public static class FuncssPreparation {

			private static void datasetGetCCSessionsReadDB(ref RCClusterUserCCSessionRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENCCSession.Read(r, ref index);
				rec.ssENCluster.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetCCSessions" of Action "Preparation"
			/// </summary>
			public static RLClusterUserCCSessionRecordList datasetGetCCSessions(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Single {SessionList}
				// Refresh Query zEMafmIShEa2AamlpQuYtw Iterations: Single {SessionList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				string sql = "";
				string sqlCount = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCCSession.[ID] o1, ENCCSession.[DESCRIPTION] o2, ENCCSession.[NOTES] o3, ENCCSession.[CLUSTERID] o4, ENCCSession.[STARTDATE] o5, ENCCSession.[ENDDATE] o6, ENCCSession.[CREATEDBY] o7, ENCCSession.[ISACTIVE] o8, ENCluster.[ID] o9, ENCluster.[CLUSTERCODE] o10, ENCluster.[CLUSTERDESCRIPTION] o11, ENCluster.[ICONFILENAME] o12, ENCluster.[ORDER] o13, ENCluster.[ISACTIVE] o14, ENCluster.[PROSOLUTIONSID] o15, ENUser.[ID] o16, ENUser.[NAME] o17, ENUser.[USERNAME] o18, ENUser.[PASSWORD] o19, ENUser.[EMAIL] o20, ENUser.[MOBILEPHONE] o21, ENUser.[EXTERNAL_ID] o22, ENUser.[CREATION_DATE] o23, ENUser.[LAST_LOGIN] o24, ENUser.[IS_ACTIVE] o25");
				fromBuilder.Append(" FROM (({CCSession} ENCCSession Left JOIN {Cluster} ENCluster ON (ENCCSession.[CLUSTERID] = ENCluster.[ID]))  Left JOIN {User} ENUser ON (ENCCSession.[CREATEDBY] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE (ENCCSession.[ISACTIVE] = 1)");
				orderByBuilder.Append(" ORDER BY ENCCSession.[ID] DESC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCount = "SELECT COUNT(1) " + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString();
				sqlCount = AppUtils.Instance.ReplaceEntityReferences(heContext, sqlCount);
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				RLClusterUserCCSessionRecordList outParamList = new RLClusterUserCCSessionRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetCCSessionsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLClusterUserCCSessionRecordList _tmp = new RLClusterUserCCSessionRecordList();
					_tmp.AlternateReadDBMethod = datasetGetCCSessionsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSession_List.Preparation.GetCCSessions.List");
						outParamList = (RLClusterUserCCSessionRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						if (maxRecords > 0 && outParamList.Length == maxRecords)
						outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query CaseConference.CCSession_List.Preparation.GetCCSessions.Count", false));
						else
						outParamCount = outParamList.Length;
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query CaseConference.CCSession_List.Preparation.GetCCSessions.Count", false));
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_List.Preparation.GetCCSessions.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLClusterUserCCSessionRecordList _tmp = new RLClusterUserCCSessionRecordList();
						_tmp.AlternateReadDBMethod = datasetGetCCSessionsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSession_List.Preparation.GetCCSessions.List");
							outParamList = (RLClusterUserCCSessionRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query CaseConference.CCSession_List.Preparation.GetCCSessions.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query CaseConference.CCSession_List.Preparation.GetCCSessions.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSession_List.Preparation.GetCCSessions.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "CCSession List"; ssSessionListListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CCSession_List", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CCSession_List", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			if (IsAjaxRequest) {
				recListSessionList_Rebuild((ssSessionListListDataBound ? wtSessionList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtSessionList.LineCount);
			}
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				recListSessionList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
