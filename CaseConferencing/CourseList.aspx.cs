/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowCourses {

	public class ScrnCourseList: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnCourseList(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable <code>varLcOfferingCodeSElected</code> that represents the Service Studio local variable
		///  <code>OfferingCodeSElected</code> <p>Description: </p>
		/// </summary>
		string varLcOfferingCodeSElected = "";

		/// <summary>
		/// Variable <code>varLcIncludeClassGroups</code> that represents the Service Studio local variable
		///  <code>IncludeClassGroups</code> <p>Description: </p>
		/// </summary>
		bool varLcIncludeClassGroups = false;

		/// <summary>
		/// Variable <code>varLcURL</code> that represents the Service Studio local variable <code>URL</code>
		///  <p>Description: </p>
		/// </summary>
		string varLcURL = "";

		/// <summary>
		/// Variable <code>varLcGetTeamById_CurriculumLeadId</code> that represents the Service Studio local
		///  variable <code>GetTeamById_CurriculumLeadId</code> <p>Description: Created by the upgrade o
		/// f 'GetTeamById' to an Aggregate. Corresponds to the old query parameter 'CurriculumLeadId'.</p>
		/// </summary>
		int varLcGetTeamById_CurriculumLeadId = 0;

		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance15
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance15;
		/// <summary>
		/// Variable (wt_Button80) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button80;
		protected OutSystems.HubEdition.WebWidgets.Container wtPopupTarget;
		/// <summary>
		/// Variable (wtPopupLink) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtPopupLink;
		protected OutSystems.HubEdition.WebWidgets.Container wtdummy;
		protected OutSystems.HubEdition.WebWidgets.Container wtFilterContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container52;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container72;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container66;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input55ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input55ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container65;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox87ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox87 = new SelectRtWidget();
		RLClusterRecordList Rt_wt_ComboBox87_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container10;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container90;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox42ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox42 = new SelectRtWidget();
		RLCurriculumLeadRecordList Rt_wt_ComboBox42_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container48;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container70;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container60;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox35ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox35 = new SelectRtWidget();
		RLTeamCurriculumLeadRecordList Rt_wt_ComboBox35_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container43;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox94ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox94 = new SelectRtWidget();
		RLStringRecordList Rt_wt_ComboBox94_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container21;
		protected OutSystems.HubEdition.WebWidgets.Container wtCourseTableContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container97;
		protected OutSystems.HubEdition.WebWidgets.Container wtStudentFavourite3;
		/// <summary>
		/// Variable "True" if the Widget wtFiltterVavorite
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wtFiltterVavoriteT;

		/// <summary>
		/// Variable "True" if the Widget wtFiltterVavorite
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wtFiltterVavoriteF;
		/// <summary>
		/// Variable (wt_Link12) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link12;
		/// <summary>
		/// Variable (wt_Link68) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link68;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container39;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container54;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container50;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container78;
		private RLOfferingListRecordList _ssCourseListList = new RLOfferingListRecordList();
		public RLOfferingListRecordList ssCourseListList {
			get {
				return _ssCourseListList; 
			}
			set {
				_ssCourseListList = value;
				wtCourseList.DataSource = value;
				ssCourseListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtCourseList;
		public ArrayList wtCourseList_storage = new ArrayList();
		protected bool ssCourseListList_notUsedYet = true;
		protected bool ssCourseListListDoDataBind;
		protected bool ssCourseListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container102;
		protected OutSystems.HubEdition.WebWidgets.Container wtClusterIcon;
		protected OutSystems.HubEdition.WebWidgets.Container wtOfferingDetail;
		protected OutSystems.HubEdition.WebWidgets.Container wtOfferingCode;
		protected OutSystems.HubEdition.WebWidgets.Container wtOfferingDescription;
		protected OutSystems.HubEdition.WebWidgets.Container wtNumberOfActiveEnrolments;
		protected OutSystems.HubEdition.WebWidgets.Container wtGroupingInformation;
		protected OutSystems.HubEdition.WebWidgets.Container wtCluster;
		protected OutSystems.HubEdition.WebWidgets.Container wtCurriculumLead;
		protected OutSystems.HubEdition.WebWidgets.Container wtTeam;
		protected OutSystems.HubEdition.WebWidgets.Container wtSelectAction;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container49;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox58ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox58 = new SelectRtWidget();
		RLActionItemRecordList Rt_wt_ComboBox58_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wtStudentFavourite2;
		/// <summary>
		/// Variable "True" if the Widget wt_If88
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If88T;

		/// <summary>
		/// Variable "True" if the Widget wt_If88
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If88F;
		/// <summary>
		/// Variable (wt_Link34) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link34;
		/// <summary>
		/// Variable (wt_Link74) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link74;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container83;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("DbUqNvNFZU+wi7tlTyKtzw", "CourseList");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "DbUqNvNFZU+wi7tlTyKtzw", "CourseList");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "DbUqNvNFZU+wi7tlTyKtzw", "CourseList");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "DbUqNvNFZU+wi7tlTyKtzw", "CourseList");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "DbUqNvNFZU+wi7tlTyKtzw", "CourseList");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnCourseList() {
		}


		RLOfferingListRecordList queryResGetTableData_outParamList = new RLOfferingListRecordList();
		int queryResGetTableData_outParamCount = 0;
		RLCurriculumLeadRecordList queryResGetCurriculumLeadById_outParamList = new RLCurriculumLeadRecordList();
		int queryResGetCurriculumLeadById_outParamCount = 0;
		RLStringRecordList queryResGetSiteList_outParamList = new RLStringRecordList();
		int queryResGetSiteList_outParamCount = 0;
		RLOfferingListRecordList queryResGetTableData2_outParamList = new RLOfferingListRecordList();
		int queryResGetTableData2_outParamCount = 0;
		RLTeamCurriculumLeadRecordList queryResGetTeamById_outParamList = new RLTeamCurriculumLeadRecordList();
		int queryResGetTeamById_outParamCount = 0;
		RLClusterRecordList queryResGetClusters_outParamList = new RLClusterRecordList();
		int queryResGetClusters_outParamCount = 0;
		int resUserCheck_outParamPermissionType = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// AddMetaTags
			Actions.ActionAddMetaTags(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("e8IvgrC3vUalgVZjfMF0iA")).ssId, out resUserCheck_outParamPermissionType);
			if ((resUserCheck_outParamPermissionType==BuiltInFunction.NullIdentifier())) {
				// Destination = ExternalURL

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				}

			} else {
				// Query datasetGetClusters
				int datasetGetClusters_maxRecords = 0;
				queryResGetClusters_outParamList = FuncssPreparation.datasetGetClusters(heContext, datasetGetClusters_maxRecords, IterationMultiplicity.Multiple, out queryResGetClusters_outParamCount);
				// Query datasetGetCurriculumLeadById
				int datasetGetCurriculumLeadById_maxRecords = 0;
				queryResGetCurriculumLeadById_outParamList = FuncssPreparation.datasetGetCurriculumLeadById(heContext, datasetGetCurriculumLeadById_maxRecords, IterationMultiplicity.Multiple, out queryResGetCurriculumLeadById_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
				);
				// Created by the upgrade of 'GetTeamById' to an Aggregate.
				varLcGetTeamById_CurriculumLeadId = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId; // GetTeamById_CurriculumLeadId = CourseListFilter.CourseListFilter.CurriculumLeadId
				// Query datasetGetTeamById
				int datasetGetTeamById_maxRecords = 0;
				queryResGetTeamById_outParamList = FuncssPreparation.datasetGetTeamById(heContext, datasetGetTeamById_maxRecords, IterationMultiplicity.Multiple, out queryResGetTeamById_outParamCount, varLcGetTeamById_CurriculumLeadId
				, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
				);
				// Query QueryGetSiteList
				int QueryGetSiteList_maxRecords = 0;
				queryResGetSiteList_outParamList = FuncssPreparation.QueryGetSiteList(heContext, QueryGetSiteList_maxRecords, IterationMultiplicity.Multiple, out queryResGetSiteList_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
				, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
				, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId
				);
				// Query QueryGetTableData
				int QueryGetTableData_maxRecords = ((Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtCourseList.ClientID, true, -1) +wtCourseList.RtWidget.LineCount) +1);
				if (QueryGetTableData_maxRecords < 1) QueryGetTableData_maxRecords = 1;
				queryResGetTableData_outParamList = FuncssPreparation.QueryGetTableData(heContext, QueryGetTableData_maxRecords, IterationMultiplicity.Single, out queryResGetTableData_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
				, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
				, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId
				, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch
				, ((int) Global.App.OsContext.Session["UserID"])
				, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter
				, BuiltInFunction.TextToInteger(Functions.ActionGetCurrentAcademicYear2(heContext).ssENAcademicYears.ssFormatE)
				, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
				, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("IBxuFpDNH0qiWmB4W0X0Qw")).ssId
				, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssSiteName
				, varLcIncludeClassGroups
				);
				if (queryResGetTableData_outParamList.Empty) {
					RCCourseListFilterRecord CompID_Aux_12 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_12.ssSTCourseListFilter.ssIsFavouriteFilter = false;
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_12; // CourseListFilter.CourseListFilter.IsFavouriteFilter = False
					// Query QueryGetTableData2
					int QueryGetTableData2_maxRecords = Math.Max(wtCourseList.StartIndex + wtCourseList.LineCount + 1, 0);
					queryResGetTableData2_outParamList = FuncssPreparation.QueryGetTableData2(heContext, QueryGetTableData2_maxRecords, IterationMultiplicity.Single, out queryResGetTableData2_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch
					, ((int) Global.App.OsContext.Session["UserID"])
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("IBxuFpDNH0qiWmB4W0X0Qw")).ssId
					, varLcIncludeClassGroups
					);
					queryResGetTableData_outParamList = queryResGetTableData2_outParamList; // GetTableData.List = GetTableData2.List
					queryResGetTableData_outParamCount = queryResGetTableData2_outParamCount; // GetTableData.Count = GetTableData2.Count

				}

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "CourseList.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "CourseList.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "CourseList", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "CourseList", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance15 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance15");
			wt_Button80 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button80");
			if (this.wt_Button80 != null) {
				this.wt_Button80.Click += new System.EventHandler(this.wt_Button80_Click);
			}
			wtPopupTarget = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtPopupTarget");
			wtPopupLink = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wtPopupLink");
			wtdummy = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtdummy");
			wtFilterContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtFilterContainer");
			wt_Container52 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container52");
			wt_Container72 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container72");
			wt_Container66 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container66");
			wt_Container30 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container30");
			wt_Container65 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container65");
			wt_Container23 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container23");
			wt_Container10 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container10");
			wt_Container90 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container90");
			wt_Container5 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container5");
			wt_Container48 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container48");
			wt_Container70 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container70");
			wt_Container60 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container60");
			wt_Container43 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container43");
			wt_Container20 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container20");
			wt_Container29 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container29");
			wt_Container21 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container21");
			wtCourseTableContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtCourseTableContainer");
			wt_Container19 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container19");
			wt_Container97 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container97");
			wtStudentFavourite3 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtStudentFavourite3");
			wt_Link12 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link12");
			if (this.wt_Link12 != null) {
				this.wt_Link12.Click += new System.EventHandler(this.wt_Link12_Click);
			}
			wt_Link68 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link68");
			if (this.wt_Link68 != null) {
				this.wt_Link68.Click += new System.EventHandler(this.wt_Link68_Click);
			}
			wt_Container39 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container39");
			wt_Container54 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container54");
			wt_Container50 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container50");
			wt_Container78 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container78");
			wtCourseList = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtCourseList");
			wtCourseList.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtCourseList.ClientID, true, -1);
			wtCourseList.LineCountExpression = () => 10;
			wtCourseList.EmptyMessageExpression = () => "No items to show...";
			if (this.wt_Link34 != null) {
				this.wt_Link34.Click += new System.EventHandler(this.wt_Link34_Click);
			}
			if (this.wt_Link74 != null) {
				this.wt_Link74.Click += new System.EventHandler(this.wt_Link74_Click);
			}
			wt_Container83 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container83");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance26") {
				return ThemeProvider_wt_WebBlockInstance15.wtHelpUpdate.FindControl("wt_WebBlockInstance26");
			}
			if (id == "ThemeProvider_wt_WebBlockInstance64") {
				return ThemeProvider_wt_WebBlockInstance15.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance64");
			}
			if (id == "RichWidgets_wt_WebBlockInstance96") {
				return ThemeProvider_wt_WebBlockInstance15.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance96");
			}
			if (id == "wt_Text7") {
				return ThemeProvider_wt_WebBlockInstance15.wtTitle.FindControl("wt_Text7");
			}
			if (id == "wt_Button80") {
				return ThemeProvider_wt_WebBlockInstance15.wtTitle.FindControl("wt_Button80");
			}
			if (id == "wtPopupTarget") {
				return ThemeProvider_wt_WebBlockInstance15.wtTitle.FindControl("wtPopupTarget");
			}
			if (id == "wtPopupLink") {
				return ThemeProvider_wt_WebBlockInstance15.wtTitle.FindControl("wtPopupLink");
			}
			if (id == "RichWidgets_wt_WebBlockInstance57") {
				return ThemeProvider_wt_WebBlockInstance15.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance57");
			}
			if (id == "wtdummy") {
				return ThemeProvider_wt_WebBlockInstance15.wtTitle.FindControl("wtdummy");
			}
			if (id == "wt_Text2") {
				return ThemeProvider_wt_WebBlockInstance15.wtTitle.FindControl("wt_Text2");
			}
			if (id == "wtFilterContainer") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wtFilterContainer");
			}
			if (id == "wt_Container52") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container52");
			}
			if (id == "wt_Container72") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container72");
			}
			if (id == "wt_Text101") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Text101");
			}
			if (id == "wt_Container66") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container66");
			}
			if (id == "wt_Input55") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Input55");
			}
			if (id == "wt_Container30") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container30");
			}
			if (id == "wt_Container65") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container65");
			}
			if (id == "wt_Text31") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Text31");
			}
			if (id == "wt_Container23") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container23");
			}
			if (id == "wt_ComboBox87") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_ComboBox87");
			}
			if (id == "wt_Container10") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container10");
			}
			if (id == "wt_Container90") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container90");
			}
			if (id == "wt_Text16") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Text16");
			}
			if (id == "wt_Container5") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container5");
			}
			if (id == "wt_ComboBox42") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_ComboBox42");
			}
			if (id == "wt_Container48") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container48");
			}
			if (id == "wt_Container70") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container70");
			}
			if (id == "wt_Text53") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Text53");
			}
			if (id == "wt_Container60") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container60");
			}
			if (id == "wt_ComboBox35") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_ComboBox35");
			}
			if (id == "wt_Container43") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container43");
			}
			if (id == "wt_Container20") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container20");
			}
			if (id == "wt_Text14") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Text14");
			}
			if (id == "wt_Container29") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container29");
			}
			if (id == "wt_ComboBox94") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_ComboBox94");
			}
			if (id == "wt_Container21") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container21");
			}
			if (id == "wt_Table93") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Table93");
			}
			if (id == "wt_TableRow36") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_TableRow36");
			}
			if (id == "wt_TableCell76") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_TableCell76");
			}
			if (id == "wt_Text73") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Text73");
			}
			if (id == "wt_CheckBox67") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_CheckBox67");
			}
			if (id == "wtCourseTableContainer") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wtCourseTableContainer");
			}
			if (id == "wt_Container19") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container19");
			}
			if (id == "RichWidgets_wt_WebBlockInstance1") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance1");
			}
			if (id == "wt_Container97") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container97");
			}
			if (id == "wtStudentFavourite3") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wtStudentFavourite3");
			}
			if (id == "wtFiltterVavorite") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wtFiltterVavorite");
			}
			if (id == "wtFiltterVavoriteT") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wtFiltterVavoriteT");
			}
			if (id == "wt_Link12") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Link12");
			}
			if (id == "RichWidgets_wt_WebBlockInstance100") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance100");
			}
			if (id == "wtFiltterVavoriteF") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wtFiltterVavoriteF");
			}
			if (id == "wt_Link68") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Link68");
			}
			if (id == "RichWidgets_wt_WebBlockInstance45") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance45");
			}
			if (id == "wt_Container39") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container39");
			}
			if (id == "wt_Text17") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Text17");
			}
			if (id == "wt_Container54") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container54");
			}
			if (id == "wt_Text8") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Text8");
			}
			if (id == "wt_Container50") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container50");
			}
			if (id == "wt_Text4") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Text4");
			}
			if (id == "wt_Container78") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container78");
			}
			if (id == "wtCourseList") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wtCourseList");
			}
			if (id == "wt_Container83") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("wt_Container83");
			}
			if (id == "RichWidgets_wt_WebBlockInstance77") {
				return ThemeProvider_wt_WebBlockInstance15.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance77");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CourseList"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CourseList"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssCourseListListDoDataBind = true;
				Title = "CourseList"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CourseList", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button80 = wt_Button80 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button80");
			} catch {}
			string jsString = (wt_Button80 != null) ? "return OsEnterKey('" +wt_Button80.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowCourses.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotLearningSupportPractitioner("LearningSupportPractitioner role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("DbUqNvNFZU+wi7tlTyKtzw"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandOnSiteChange</code> that represents the Service Studio screen action
		///  <code>OnSiteChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnSiteChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				if ((((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId==BuiltInFunction.TextToEntityRefText("ALL"))) {
					RCCourseListFilterRecord CompID_Aux_13 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_13.ssSTCourseListFilter.ssClusterId = BuiltInFunction.NullTextIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_13; // CourseListFilter.CourseListFilter.ClusterId = NullTextIdentifier

				}
				// Query QueryGetTableData
				{
					int QueryGetTableData_maxRecords = Math.Max(wtCourseList.StartIndex + wtCourseList.LineCount + 1, 0);
					queryResGetTableData_outParamList = FuncssPreparation.QueryGetTableData(heContext, QueryGetTableData_maxRecords, IterationMultiplicity.Single, out queryResGetTableData_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch
					, ((int) Global.App.OsContext.Session["UserID"])
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter
					, BuiltInFunction.TextToInteger(Functions.ActionGetCurrentAcademicYear2(heContext).ssENAcademicYears.ssFormatE)
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("IBxuFpDNH0qiWmB4W0X0Qw")).ssId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssSiteName
					, varLcIncludeClassGroups
					);
				}
				// Refresh Widget (wtFilterContainer)
				((OSPageViewState) Page).AjaxRefresh(wtFilterContainer, "None", StoreViewState);
				// Refresh Widget (wtCourseTableContainer)
				ssCourseListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtCourseTableContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnNotifyInsert_BulkTargets: VarsBag {
			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public RLTextRecordList resString_Split_outParamList = new RLTextRecordList();

			public lcvOnNotifyInsert_BulkTargets() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotifyInsert_BulkTargets</code> that represents the Service Studio screen
		///  action <code>OnNotifyInsert_BulkTargets</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotifyInsert_BulkTargets(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotifyInsert_BulkTargets localVars = new lcvOnNotifyInsert_BulkTargets();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				if ((localVars.resNotifyWidgetGetMessage_outParamMessage!= "")) {
					// Feedback_Message
					Actions.ActionFeedback_Message(heContext, "Targets created with success.", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
					// String_Split
					Actions.ActionString_Split(heContext, localVars.resNotifyWidgetGetMessage_outParamMessage, "|", out localVars.resString_Split_outParamList);
					getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction = "SelectAction"; // CourseList.List.Current.OfferingList.SelectAction = "SelectAction"
					// Refresh Widget (wtCourseList)
					((OSPageViewState) Page).AjaxRefresh(wtCourseList, getWtCourseListList().CurrentRowNumber, "None", "Refresh", false, null, StoreViewState);
					if ((localVars.resString_Split_outParamList[0] .ssSTText.ssValue== "SendEmail")) {
						// Destination = Course_Email

						if (OSPage.IsAjaxRequest) {
							// go to target page
							{

								((OSPage) Page).ClearErrorHandler();
								// get parameters
								heContext.Session["_ScreenParametersKey"] = "MnNERCe+_Ua0oCoZSUx2Pg";
								ArrayList screenParameters = new ArrayList();
								screenParameters.Add(localVars.resString_Split_outParamList[1] .ssSTText.ssValue);
								screenParameters.Add(true);
								screenParameters.Add(localVars.resString_Split_outParamList[2] .ssSTText.ssValue);
								Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_Email"] = screenParameters;
								string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(localVars.resString_Split_outParamList[1] .ssSTText.ssValue) + "&" +
								 "IncludeTarget=" + System.Web.HttpUtility.UrlEncode("True") + "&" +
								 "TargetDescription=" + System.Web.HttpUtility.UrlEncode(localVars.resString_Split_outParamList[2] .ssSTText.ssValue);
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "Course_Email.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
								return false;

							}
						} else {
							// go to target page
							{

								((OSPage) Page).ClearErrorHandler();
								// get parameters
								heContext.Session["_ScreenParametersKey"] = "MnNERCe+_Ua0oCoZSUx2Pg";
								ArrayList screenParameters = new ArrayList();
								screenParameters.Add(localVars.resString_Split_outParamList[1] .ssSTText.ssValue);
								screenParameters.Add(true);
								screenParameters.Add(localVars.resString_Split_outParamList[2] .ssSTText.ssValue);
								Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_Email"] = screenParameters;
								Server.Transfer("Course_Email.aspx");
								return false;

							}
						}

					}

				}
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnTeamChange</code> that represents the Service Studio screen action
		///  <code>OnTeamChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnTeamChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				if ((((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId==BuiltInFunction.TextToEntityRefText("ALL"))) {
					RCCourseListFilterRecord CompID_Aux_14 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_14.ssSTCourseListFilter.ssClusterId = BuiltInFunction.NullTextIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_14; // CourseListFilter.CourseListFilter.ClusterId = NullTextIdentifier

				}
				// Query QueryGetSiteList
				{
					int QueryGetSiteList_maxRecords = 0;
					queryResGetSiteList_outParamList = FuncssPreparation.QueryGetSiteList(heContext, QueryGetSiteList_maxRecords, IterationMultiplicity.Multiple, out queryResGetSiteList_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId
					);
				}
				// Query QueryGetTableData
				{
					int QueryGetTableData_maxRecords = Math.Max(wtCourseList.StartIndex + wtCourseList.LineCount + 1, 0);
					queryResGetTableData_outParamList = FuncssPreparation.QueryGetTableData(heContext, QueryGetTableData_maxRecords, IterationMultiplicity.Single, out queryResGetTableData_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch
					, ((int) Global.App.OsContext.Session["UserID"])
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter
					, BuiltInFunction.TextToInteger(Functions.ActionGetCurrentAcademicYear2(heContext).ssENAcademicYears.ssFormatE)
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("IBxuFpDNH0qiWmB4W0X0Qw")).ssId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssSiteName
					, varLcIncludeClassGroups
					);
				}
				// Refresh Widget (wtFilterContainer)
				((OSPageViewState) Page).AjaxRefresh(wtFilterContainer, "None", StoreViewState);
				// Refresh Widget (wtCourseTableContainer)
				ssCourseListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtCourseTableContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnCourseClick</code> that represents the Service Studio screen action
		///  <code>OnCourseClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnCourseClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				Global.App.OsContext.Session["CaseConferencing.ClearLearnerPagination"] = true; // ClearLearnerPagination = True
				// Destination = LearnerList

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "ijmkL_iOQEuryYYknbKlDg";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerList"] = screenParameters;
						string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "LearnerList.aspx" + sURLQuery;
						((OSPageViewState) Page).RedirectLocation = sURL;
						return false;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "ijmkL_iOQEuryYYknbKlDg";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerList"] = screenParameters;
						Server.Transfer("LearnerList.aspx");
						return false;

					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnClusterChange</code> that represents the Service Studio screen action
		///  <code>OnClusterChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClusterChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				if ((((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId==BuiltInFunction.TextToEntityRefText("ALL"))) {
					RCCourseListFilterRecord CompID_Aux_15 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_15.ssSTCourseListFilter.ssClusterId = BuiltInFunction.NullTextIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_15; // CourseListFilter.CourseListFilter.ClusterId = NullTextIdentifier

				}
				// Query datasetGetCurriculumLeadById
				{
					int datasetGetCurriculumLeadById_maxRecords = 0;
					queryResGetCurriculumLeadById_outParamList = FuncssPreparation.datasetGetCurriculumLeadById(heContext, datasetGetCurriculumLeadById_maxRecords, IterationMultiplicity.Multiple, out queryResGetCurriculumLeadById_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					);
				}
				// Created by the upgrade of 'GetTeamById' to an Aggregate.
				varLcGetTeamById_CurriculumLeadId = BuiltInFunction.NullIdentifier(); // GetTeamById_CurriculumLeadId = NullIdentifier
				// Query datasetGetTeamById
				{
					int datasetGetTeamById_maxRecords = 0;
					queryResGetTeamById_outParamList = FuncssPreparation.datasetGetTeamById(heContext, datasetGetTeamById_maxRecords, IterationMultiplicity.Multiple, out queryResGetTeamById_outParamCount, varLcGetTeamById_CurriculumLeadId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					);
				}
				// Query QueryGetTableData
				{
					int QueryGetTableData_maxRecords = Math.Max(wtCourseList.StartIndex + wtCourseList.LineCount + 1, 0);
					queryResGetTableData_outParamList = FuncssPreparation.QueryGetTableData(heContext, QueryGetTableData_maxRecords, IterationMultiplicity.Single, out queryResGetTableData_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, BuiltInFunction.NullIdentifier()
					, BuiltInFunction.NullIdentifier()
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch
					, ((int) Global.App.OsContext.Session["UserID"])
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter
					, BuiltInFunction.TextToInteger(Functions.ActionGetCurrentAcademicYear2(heContext).ssENAcademicYears.ssFormatE)
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("IBxuFpDNH0qiWmB4W0X0Qw")).ssId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssSiteName
					, varLcIncludeClassGroups
					);
				}
				// Query QueryGetSiteList
				{
					int QueryGetSiteList_maxRecords = 0;
					queryResGetSiteList_outParamList = FuncssPreparation.QueryGetSiteList(heContext, QueryGetSiteList_maxRecords, IterationMultiplicity.Multiple, out queryResGetSiteList_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId
					);
				}
				// Refresh Widget (wtFilterContainer)
				((OSPageViewState) Page).AjaxRefresh(wtFilterContainer, "None", StoreViewState);
				// Refresh Widget (wtCourseTableContainer)
				ssCourseListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtCourseTableContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnActionChange</code> that represents the Service Studio screen action
		///  <code>OnActionChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnActionChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				if ((getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction== "ViewLearners")) {
					// Destination = StaffView

					if (OSPage.IsAjaxRequest) {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "j8jDU90qoUqC4OOZCvawmQ";
							ArrayList screenParameters = new ArrayList();
							screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
							screenParameters.Add(0);
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_StaffView"] = screenParameters;
							string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "StaffView.aspx" + sURLQuery;
							((OSPageViewState) Page).RedirectLocation = sURL;
							return false;

						}
					} else {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "j8jDU90qoUqC4OOZCvawmQ";
							ArrayList screenParameters = new ArrayList();
							screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
							screenParameters.Add(0);
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_StaffView"] = screenParameters;
							Server.Transfer("StaffView.aspx");
							return false;

						}
					}

				} else {
					if ((getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction== "AddOfferingTarget")) {
						varLcOfferingCodeSElected = getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode; // OfferingCodeSElected = CourseList.List.Current.OfferingList.OfferingCode
						// Refresh Widget (wtPopupTarget)
						((OSPageViewState) Page).AjaxRefresh(wtPopupTarget, "None", StoreViewState);
						// RunJavaScript
						Actions.ActionRunJavaScript(heContext, (("document.getElementById(\'" +wtPopupLink.ClientID) + "\').click();"));
						// Update Screen
						return true;

					} else {
						if ((getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction== "SendEmail")) {
							// Destination = Course_Email

							if (OSPage.IsAjaxRequest) {
								// go to target page
								{

									((OSPage) Page).ClearErrorHandler();
									// get parameters
									heContext.Session["_ScreenParametersKey"] = "MnNERCe+_Ua0oCoZSUx2Pg";
									ArrayList screenParameters = new ArrayList();
									screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
									screenParameters.Add(false);
									screenParameters.Add("");
									Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_Email"] = screenParameters;
									string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode) + "&" +
									 "IncludeTarget=" + System.Web.HttpUtility.UrlEncode("False");
									sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
									string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "Course_Email.aspx" + sURLQuery;
									((OSPageViewState) Page).RedirectLocation = sURL;
									return false;

								}
							} else {
								// go to target page
								{

									((OSPage) Page).ClearErrorHandler();
									// get parameters
									heContext.Session["_ScreenParametersKey"] = "MnNERCe+_Ua0oCoZSUx2Pg";
									ArrayList screenParameters = new ArrayList();
									screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
									screenParameters.Add(false);
									screenParameters.Add("");
									Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_Email"] = screenParameters;
									Server.Transfer("Course_Email.aspx");
									return false;

								}
							}

						} else {
							if ((getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction== "SendSMS")) {
								// Destination = Course_SMS

								if (OSPage.IsAjaxRequest) {
									// go to target page
									{

										((OSPage) Page).ClearErrorHandler();
										// get parameters
										heContext.Session["_ScreenParametersKey"] = "FeckNe9wREaOHAaVk_W_NA";
										ArrayList screenParameters = new ArrayList();
										screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
										Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_SMS"] = screenParameters;
										string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
										sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
										string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "Course_SMS.aspx" + sURLQuery;
										((OSPageViewState) Page).RedirectLocation = sURL;
										return false;

									}
								} else {
									// go to target page
									{

										((OSPage) Page).ClearErrorHandler();
										// get parameters
										heContext.Session["_ScreenParametersKey"] = "FeckNe9wREaOHAaVk_W_NA";
										ArrayList screenParameters = new ArrayList();
										screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
										Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_SMS"] = screenParameters;
										Server.Transfer("Course_SMS.aspx");
										return false;

									}
								}

							} else {
								if ((getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction== "SIASSupportNeeds")) {
									// Destination = Course_SIAS_Support

									if (OSPage.IsAjaxRequest) {
										// go to target page
										{

											((OSPage) Page).ClearErrorHandler();
											// get parameters
											heContext.Session["_ScreenParametersKey"] = "w72Tv92wv02NhreMcHKe8Q";
											ArrayList screenParameters = new ArrayList();
											screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
											Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_SIAS_Support"] = screenParameters;
											string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
											sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
											string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "Course_SIAS_Support.aspx" + sURLQuery;
											((OSPageViewState) Page).RedirectLocation = sURL;
											return false;

										}
									} else {
										// go to target page
										{

											((OSPage) Page).ClearErrorHandler();
											// get parameters
											heContext.Session["_ScreenParametersKey"] = "w72Tv92wv02NhreMcHKe8Q";
											ArrayList screenParameters = new ArrayList();
											screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
											Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_SIAS_Support"] = screenParameters;
											Server.Transfer("Course_SIAS_Support.aspx");
											return false;

										}
									}

								} else {
									if ((getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction== "ProgressReport")) {
										// Destination = Course_ProgressReportSignOff

										if (OSPage.IsAjaxRequest) {
											// go to target page
											{

												((OSPage) Page).ClearErrorHandler();
												// get parameters
												heContext.Session["_ScreenParametersKey"] = "jd0N8HYn7EWXsrmB6YefRw";
												ArrayList screenParameters = new ArrayList();
												screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
												screenParameters.Add(0);
												screenParameters.Add("");
												Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_ProgressReportSignOff"] = screenParameters;
												string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
												sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
												string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "Course_ProgressReportSignOff.aspx" + sURLQuery;
												((OSPageViewState) Page).RedirectLocation = sURL;
												return false;

											}
										} else {
											// go to target page
											{

												((OSPage) Page).ClearErrorHandler();
												// get parameters
												heContext.Session["_ScreenParametersKey"] = "jd0N8HYn7EWXsrmB6YefRw";
												ArrayList screenParameters = new ArrayList();
												screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
												screenParameters.Add(0);
												screenParameters.Add("");
												Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_ProgressReportSignOff"] = screenParameters;
												Server.Transfer("Course_ProgressReportSignOff.aspx");
												return false;

											}
										}

									} else {
										if ((getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction== "LearnerContactList")) {
											// Destination = LearnerContactList

											if (OSPage.IsAjaxRequest) {
												// go to target page
												{

													((OSPage) Page).ClearErrorHandler();
													// get parameters
													heContext.Session["_ScreenParametersKey"] = "5qYJBfAdKEi3iuGOkeXusQ";
													ArrayList screenParameters = new ArrayList();
													screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
													Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerContactList"] = screenParameters;
													string sURLQuery = "OfferingCode=" + System.Web.HttpUtility.UrlEncode(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
													sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
													string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "LearnerContactList.aspx" + sURLQuery;
													((OSPageViewState) Page).RedirectLocation = sURL;
													return false;

												}
											} else {
												// go to target page
												{

													((OSPage) Page).ClearErrorHandler();
													// get parameters
													heContext.Session["_ScreenParametersKey"] = "5qYJBfAdKEi3iuGOkeXusQ";
													ArrayList screenParameters = new ArrayList();
													screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
													Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerContactList"] = screenParameters;
													Server.Transfer("LearnerContactList.aspx");
													return false;

												}
											}

										} else {
											if ((getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction== "IntendedDestinationReport")) {
												varLcURL = BuiltInFunction.EncodeUrl(("https://reports.cornwall.ac.uk/ReportServer?/Destination+Reports/Intended+Destination+Form+2015&rs:Format=pdf&CourseCode=" +getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode)); // URL = EncodeUrl
												// Refresh Widget (wtdummy)
												((OSPageViewState) Page).AjaxRefresh(wtdummy, "None", StoreViewState);
												// RunJavaScript7
												Actions.ActionRunJavaScript(heContext, (("document.getElementById(\'" +wtdummy.ClientID) + "\').click()"));
												// Update Screen
												return true;

											} else {
												if ((getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction== "PENPortrait")) {
													// Destination = LearnersPENPortraitsList

													if (OSPage.IsAjaxRequest) {
														// go to target page
														{

															((OSPage) Page).ClearErrorHandler();
															// get parameters
															heContext.Session["_ScreenParametersKey"] = "QR4G3JmraU+y72BdsipgMg";
															ArrayList screenParameters = new ArrayList();
															screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
															Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnersPENPortraitsList"] = screenParameters;
															string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
															sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
															string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "LearnersPENPortraitsList.aspx" + sURLQuery;
															((OSPageViewState) Page).RedirectLocation = sURL;
															return false;

														}
													} else {
														// go to target page
														{

															((OSPage) Page).ClearErrorHandler();
															// get parameters
															heContext.Session["_ScreenParametersKey"] = "QR4G3JmraU+y72BdsipgMg";
															ArrayList screenParameters = new ArrayList();
															screenParameters.Add(getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode);
															Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnersPENPortraitsList"] = screenParameters;
															Server.Transfer("LearnersPENPortraitsList.aspx");
															return false;

														}
													}

												} else {
													// Update Screen
													return true;

												}

											}

										}

									}

								}

							}

						}

					}

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvRefreshTable: VarsBag {
			public bool inParamIsFavorite;
			public lcvRefreshTable(bool inParamIsFavorite) {
				this.inParamIsFavorite = inParamIsFavorite;
			}
		}
		/// <summary>
		/// Action <code>CommandRefreshTable</code> that represents the Service Studio screen action
		///  <code>RefreshTable</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshTable(HeContext heContext, bool inParamIsFavorite) {
			CheckPermissions(heContext);
			lcvRefreshTable localVars = new lcvRefreshTable(inParamIsFavorite);
			try {
				if (localVars.inParamIsFavorite) {
					// List_Navigation_ResetStartIndex
					Actions.ActionList_Navigation_ResetStartIndex(heContext, wtCourseList.ClientID);
					RCCourseListFilterRecord CompID_Aux_16 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_16.ssSTCourseListFilter.ssIsFavouriteFilter = (!((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter);
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_16; // CourseListFilter.CourseListFilter.IsFavouriteFilter = notCourseListFilter.CourseListFilter.IsFavouriteFilter

				}
				if ((((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId==BuiltInFunction.TextToEntityRefText("ALL"))) {
					RCCourseListFilterRecord CompID_Aux_17 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_17.ssSTCourseListFilter.ssClusterId = BuiltInFunction.NullTextIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_17; // CourseListFilter.CourseListFilter.ClusterId = NullTextIdentifier

				}
				// Query QueryGetTableData
				{
					int QueryGetTableData_maxRecords = ((Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtCourseList.ClientID, false, -1) +wtCourseList.RtWidget.LineCount) +1);
					if (QueryGetTableData_maxRecords < 1) QueryGetTableData_maxRecords = 1;
					queryResGetTableData_outParamList = FuncssPreparation.QueryGetTableData(heContext, QueryGetTableData_maxRecords, IterationMultiplicity.Single, out queryResGetTableData_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
					, BuiltInFunction.NullIdentifier()
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch
					, ((int) Global.App.OsContext.Session["UserID"])
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter
					, BuiltInFunction.TextToInteger(Functions.ActionGetCurrentAcademicYear2(heContext).ssENAcademicYears.ssFormatE)
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("IBxuFpDNH0qiWmB4W0X0Qw")).ssId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssSiteName
					, varLcIncludeClassGroups
					);
				}
				// Refresh Widget (wtFilterContainer)
				((OSPageViewState) Page).AjaxRefresh(wtFilterContainer, "None", StoreViewState);
				// Refresh Widget (wtCourseTableContainer)
				ssCourseListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtCourseTableContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnCurriculumChange</code> that represents the Service Studio screen action
		///  <code>OnCurriculumChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnCurriculumChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				if ((((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId==BuiltInFunction.TextToEntityRefText("ALL"))) {
					RCCourseListFilterRecord CompID_Aux_18 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_18.ssSTCourseListFilter.ssClusterId = BuiltInFunction.NullTextIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_18; // CourseListFilter.CourseListFilter.ClusterId = NullTextIdentifier

				}
				// Created by the upgrade of 'GetTeamById' to an Aggregate.
				varLcGetTeamById_CurriculumLeadId = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId; // GetTeamById_CurriculumLeadId = CourseListFilter.CourseListFilter.CurriculumLeadId
				// Query datasetGetTeamById
				{
					int datasetGetTeamById_maxRecords = 0;
					queryResGetTeamById_outParamList = FuncssPreparation.datasetGetTeamById(heContext, datasetGetTeamById_maxRecords, IterationMultiplicity.Multiple, out queryResGetTeamById_outParamCount, varLcGetTeamById_CurriculumLeadId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					);
				}
				// Query QueryGetSiteList
				{
					int QueryGetSiteList_maxRecords = 0;
					queryResGetSiteList_outParamList = FuncssPreparation.QueryGetSiteList(heContext, QueryGetSiteList_maxRecords, IterationMultiplicity.Multiple, out queryResGetSiteList_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId
					);
				}
				// Query QueryGetTableData
				{
					int QueryGetTableData_maxRecords = Math.Max(wtCourseList.StartIndex + wtCourseList.LineCount + 1, 0);
					queryResGetTableData_outParamList = FuncssPreparation.QueryGetTableData(heContext, QueryGetTableData_maxRecords, IterationMultiplicity.Single, out queryResGetTableData_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
					, BuiltInFunction.NullIdentifier()
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch
					, ((int) Global.App.OsContext.Session["UserID"])
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter
					, BuiltInFunction.TextToInteger(Functions.ActionGetCurrentAcademicYear2(heContext).ssENAcademicYears.ssFormatE)
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("IBxuFpDNH0qiWmB4W0X0Qw")).ssId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssSiteName
					, varLcIncludeClassGroups
					);
				}
				// Refresh Widget (wtFilterContainer)
				((OSPageViewState) Page).AjaxRefresh(wtFilterContainer, "None", StoreViewState);
				// Refresh Widget (wtCourseTableContainer)
				ssCourseListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtCourseTableContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvToogleFavourite: VarsBag {
			public RLStaffCourseFavouriteRecordList queryResGetStaffCourseFavouritesByUserId_outParamList = new RLStaffCourseFavouriteRecordList();
			public int queryResGetStaffCourseFavouritesByUserId_outParamCount = 0;

			public int resCreateOrUpdateStaffCourseFavourite_outParamId = 0;

			public lcvToogleFavourite() {
			}
		}
		/// <summary>
		/// Action <code>CommandToogleFavourite</code> that represents the Service Studio screen action
		///  <code>ToogleFavourite</code> <p> Description: </p>
		/// </summary>
		private bool CommandToogleFavourite(HeContext heContext) {
			CheckPermissions(heContext);
			lcvToogleFavourite localVars = new lcvToogleFavourite();
			try {
				// Query datasetGetStaffCourseFavouritesByUserId
				int datasetGetStaffCourseFavouritesByUserId_maxRecords = 0;
				localVars.queryResGetStaffCourseFavouritesByUserId_outParamList = FuncCommandToogleFavourite.datasetGetStaffCourseFavouritesByUserId(heContext, datasetGetStaffCourseFavouritesByUserId_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetStaffCourseFavouritesByUserId_outParamCount, getWtCourseListList().CurrentRec.ssSTOfferingList.ssGroupId
				, ((int) Global.App.OsContext.Session["UserID"])
				);
				if (getWtCourseListList().CurrentRec.ssSTOfferingList.ssIsGroupFavourite) {
					if (!(localVars.queryResGetStaffCourseFavouritesByUserId_outParamList.Empty)) {
						// DeleteStaffCourseFavourite
						ExtendedActions.DeleteStaffCourseFavourite(heContext, localVars.queryResGetStaffCourseFavouritesByUserId_outParamList.CurrentRec.ssENStaffCourseFavourite.ssId);

					}

				} else {
					localVars.queryResGetStaffCourseFavouritesByUserId_outParamList.CurrentRec.ssENStaffCourseFavourite.ssGroupId = getWtCourseListList().CurrentRec.ssSTOfferingList.ssGroupId; // GetStaffCourseFavouritesByUserId.List.Current.StaffCourseFavourite.GroupId =
					// CourseList.List.Current.OfferingList.GroupId
					localVars.queryResGetStaffCourseFavouritesByUserId_outParamList.CurrentRec.ssENStaffCourseFavourite.ssUserId = ((int) Global.App.OsContext.Session["UserID"]); // GetStaffCourseFavouritesByUserId.List.Current.StaffCourseFavourite.UserId = UserID
					// CreateOrUpdateStaffCourseFavourite
					ExtendedActions.CreateOrUpdateStaffCourseFavourite(heContext, localVars.queryResGetStaffCourseFavouritesByUserId_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetStaffCourseFavouritesByUserId_outParamList.CurrentRec, out localVars.resCreateOrUpdateStaffCourseFavourite_outParamId);

				}
				// Query QueryGetTableData
				{
					int QueryGetTableData_maxRecords = ((Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtCourseList.ClientID, false, -1) +wtCourseList.RtWidget.LineCount) +1);
					if (QueryGetTableData_maxRecords < 1) QueryGetTableData_maxRecords = 1;
					queryResGetTableData_outParamList = FuncssPreparation.QueryGetTableData(heContext, QueryGetTableData_maxRecords, IterationMultiplicity.Single, out queryResGetTableData_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch
					, ((int) Global.App.OsContext.Session["UserID"])
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter
					, BuiltInFunction.TextToInteger(Functions.ActionGetCurrentAcademicYear2(heContext).ssENAcademicYears.ssFormatE)
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("IBxuFpDNH0qiWmB4W0X0Qw")).ssId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssSiteName
					, varLcIncludeClassGroups
					);
				}
				// Refresh Widget (wtCourseTableContainer)
				ssCourseListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtCourseTableContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnOfferingKeywordChange</code> that represents the Service Studio screen action
		///  <code>OnOfferingKeywordChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnOfferingKeywordChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				if ((((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId==BuiltInFunction.TextToEntityRefText("ALL"))) {
					RCCourseListFilterRecord CompID_Aux_19 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_19.ssSTCourseListFilter.ssClusterId = BuiltInFunction.NullTextIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_19; // CourseListFilter.CourseListFilter.ClusterId = NullTextIdentifier

				}
				// Query QueryGetTableData
				{
					int QueryGetTableData_maxRecords = Math.Max(wtCourseList.StartIndex + wtCourseList.LineCount + 1, 0);
					queryResGetTableData_outParamList = FuncssPreparation.QueryGetTableData(heContext, QueryGetTableData_maxRecords, IterationMultiplicity.Single, out queryResGetTableData_outParamCount, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch
					, ((int) Global.App.OsContext.Session["UserID"])
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter
					, BuiltInFunction.TextToInteger(Functions.ActionGetCurrentAcademicYear2(heContext).ssENAcademicYears.ssFormatE)
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("IBxuFpDNH0qiWmB4W0X0Qw")).ssId
					, ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssSiteName
					, varLcIncludeClassGroups
					);
				}
				// Refresh Widget (wtCourseTableContainer)
				ssCourseListListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtCourseTableContainer, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance15 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance15_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance26 Functions
		/// </summary>
		public void webBlck_WebBlockInstance26_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate widget = (ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance64 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance64_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("7qeG0AIy00KFvJsqdEaGOg")).ssId;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance96 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance96_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("BDbvGpjWkkirEM_ATP7B6Q")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Button80 Functions
		/// </summary>
		public void btn_Button80_onDataBinding(object sender, System.EventArgs e) {
			btn_Button80_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string btn_Button80_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "display:none";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button80_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandOnOfferingKeywordChange(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button80)
		/// </summary>
		/// <returns>Label of the Button (wt_Button80)</returns>
		public string
		btn_Button80_getLabel() {
			return "search";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button80)
		/// </summary>
		/// <returns>The Visible State of wt_Button80</returns>
		public bool btn_Button80_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button80)
		/// </summary>
		/// <returns>The Enabled State of wt_Button80</returns>
		public bool btn_Button80_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtPopupTarget Functions
		/// </summary>
		public void cntPopupTarget_onDataBinding(object sender, System.EventArgs e) {
			cntPopupTarget_setInlineAttributes(sender, e);
		}
		public string cntPopupTarget_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntPopupTarget_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPopupTarget)
		/// </summary>
		/// <returns>The Visible State of wtPopupTarget</returns>
		public bool cntPopupTarget_isVisible() {
			return true;
		}

		/// <summary>
		/// wtPopupLink Functions
		/// </summary>
		public void btnPopupLink_onDataBinding(object sender, System.EventArgs e) {
			btnPopupLink_setInlineAttributes(sender, e);
		}
		public string btnPopupLink_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "display:none";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtPopupLink)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtPopupLink)</returns>
		public string btnPopupLink_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("CourseCode", System.Web.HttpUtility.UrlEncode(varLcOfferingCodeSElected, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Courses.Popup_Target", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the label of the button (wtPopupLink)
		/// </summary>
		/// <returns>Label of the Button (wtPopupLink)</returns>
		public string
		btnPopupLink_getLabel() {
			return "Popup Insert Bulk Targets";
		}
		/// <summary>
		/// Gets the visible state of component (wtPopupLink)
		/// </summary>
		/// <returns>The Visible State of wtPopupLink</returns>
		public bool btnPopupLink_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtPopupLink)
		/// </summary>
		/// <returns>The Enabled State of wtPopupLink</returns>
		public bool btnPopupLink_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance57 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance57_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
			widget.inParamLinkOrButtonWidgetId = wtPopupLink.ClientID;
			widget.inParamTitle = " ";
			widget.inParamWidthPx = -1;
			widget.inParamHeightPx = -1;
			widget.inParamAutoResize = true;
			widget.inParamRecenterOnResize = true;
			widget.inParamHideCloseButton = false;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance57
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance57_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandOnNotifyInsert_BulkTargets(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wtdummy Functions
		/// </summary>
		public void cntdummy_onDataBinding(object sender, System.EventArgs e) {
			cntdummy_setInlineAttributes(sender, e);
		}
		public string cntdummy_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("onclick", (("window.open(unescape(\'" +varLcURL) + "\'), \'_blank\',\'left=20,top=20\')").ToString());
			if (!cntdummy_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtdummy)
		/// </summary>
		/// <returns>The Visible State of wtdummy</returns>
		public bool cntdummy_isVisible() {
			return false;
		}

		/// <summary>
		/// wtFilterContainer Functions
		/// </summary>
		public void cntFilterContainer_onDataBinding(object sender, System.EventArgs e) {
			cntFilterContainer_setInlineAttributes(sender, e);
		}
		public string cntFilterContainer_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntFilterContainer_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtFilterContainer)
		/// </summary>
		/// <returns>The Visible State of wtFilterContainer</returns>
		public bool cntFilterContainer_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container52 Functions
		/// </summary>
		public void cnt_Container52_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container52_setInlineAttributes(sender, e);
		}
		public string cnt_Container52_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container52_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container52)
		/// </summary>
		/// <returns>The Visible State of wt_Container52</returns>
		public bool cnt_Container52_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container72 Functions
		/// </summary>
		public void cnt_Container72_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container72_setInlineAttributes(sender, e);
		}
		public string cnt_Container72_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container72_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container72)
		/// </summary>
		/// <returns>The Visible State of wt_Container72</returns>
		public bool cnt_Container72_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container66 Functions
		/// </summary>
		public void cnt_Container66_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container66_setInlineAttributes(sender, e);
		}
		public string cnt_Container66_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container66_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container66)
		/// </summary>
		/// <returns>The Visible State of wt_Container66</returns>
		public bool cnt_Container66_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Input55 Functions
		/// </summary>
		public void inputwt_Input55_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_Input55
		/// </summary>
		public void inputwt_Input55_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnOfferingKeywordChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input55_input_value() {
			if (("" != ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch)) {
				return ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input55");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssKeywordSearch;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input55_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					RCCourseListFilterRecord CompID_Aux_20 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_20.ssSTCourseListFilter.ssKeywordSearch = "";
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_20; 
				} else {
					RCCourseListFilterRecord CompID_Aux_21 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_21.ssSTCourseListFilter.ssKeywordSearch = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text);
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_21; 
				}

			} catch (Exception) {
				RCCourseListFilterRecord CompID_Aux_22 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
				CompID_Aux_22.ssSTCourseListFilter.ssKeywordSearch = "";
				Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_22; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input55)
		/// </summary>
		/// <returns>The Visible State of wt_Input55</returns>
		public bool inputwt_Input55_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input55)
		/// </summary>
		/// <returns>The Enabled State of wt_Input55</returns>
		public bool inputwt_Input55_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input55)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input55</returns>
		public bool inputwt_Input55_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container30 Functions
		/// </summary>
		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container30_setInlineAttributes(sender, e);
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container30_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container65 Functions
		/// </summary>
		public void cnt_Container65_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container65_setInlineAttributes(sender, e);
		}
		public string cnt_Container65_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container65_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container65)
		/// </summary>
		/// <returns>The Visible State of wt_Container65</returns>
		public bool cnt_Container65_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container23 Functions
		/// </summary>
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container23_setInlineAttributes(sender, e);
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container23_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_ComboBox87 Functions
		/// </summary>
		public void sel_ComboBox87_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("ALL", "__ossli_ALL"));
			if (Rt_wt_ComboBox87.SpecialListVal == "ALL")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			RLClusterRecordList Rt_wt_ComboBox87_reclist = queryResGetClusters_outParamList;
			Rt_wt_ComboBox87_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox87_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox87_reclist.CurrentRec.ssENCluster.ssClusterDescription, Rt_wt_ComboBox87_reclist.CurrentRec.ssENCluster.ssId));
					if (((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssClusterId == Convert.ToString(Rt_wt_ComboBox87_reclist.CurrentRec.ssENCluster.ssId)) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox87_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox87_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox87
		/// </summary>
		public void sel_ComboBox87_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnClusterChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox87_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox87.SpecialListVal = dropDown.SelectedValue.Substring(8);
				RCCourseListFilterRecord CompID_Aux_23 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
				CompID_Aux_23.ssSTCourseListFilter.ssClusterId = "";
				Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_23;
			}
			else {
				Rt_wt_ComboBox87.SpecialListVal = "";
				try {
					RCCourseListFilterRecord CompID_Aux_24 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_24.ssSTCourseListFilter.ssClusterId = Convert.ToString(dropDown.SelectedValue);
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_24;
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox87)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox87</returns>
		public bool sel_ComboBox87_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox87)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox87</returns>
		public bool sel_ComboBox87_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox87)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox87</returns>
		public bool sel_ComboBox87_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container10 Functions
		/// </summary>
		public void cnt_Container10_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container10_setInlineAttributes(sender, e);
		}
		public string cnt_Container10_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-left:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container10_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container10)
		/// </summary>
		/// <returns>The Visible State of wt_Container10</returns>
		public bool cnt_Container10_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container90 Functions
		/// </summary>
		public void cnt_Container90_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container90_setInlineAttributes(sender, e);
		}
		public string cnt_Container90_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container90_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container90)
		/// </summary>
		/// <returns>The Visible State of wt_Container90</returns>
		public bool cnt_Container90_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container5 Functions
		/// </summary>
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container5_setInlineAttributes(sender, e);
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container5_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_ComboBox42 Functions
		/// </summary>
		public void sel_ComboBox42_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("ALL", "__ossli_0"));
			if (Rt_wt_ComboBox42.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			RLCurriculumLeadRecordList Rt_wt_ComboBox42_reclist = queryResGetCurriculumLeadById_outParamList;
			Rt_wt_ComboBox42_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox42_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox42_reclist.CurrentRec.ssENCurriculumLead.ssDescription, Convert.ToString(Rt_wt_ComboBox42_reclist.CurrentRec.ssENCurriculumLead.ssId)));
					if (((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssCurriculumLeadId == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox42_reclist.CurrentRec.ssENCurriculumLead.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox42_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox42_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox42
		/// </summary>
		public void sel_ComboBox42_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnCurriculumChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox42_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox42.SpecialListVal = dropDown.SelectedValue.Substring(8);
				RCCourseListFilterRecord CompID_Aux_25 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
				CompID_Aux_25.ssSTCourseListFilter.ssCurriculumLeadId = 0;
				Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_25;
			}
			else {
				Rt_wt_ComboBox42.SpecialListVal = "";
				try {
					RCCourseListFilterRecord CompID_Aux_26 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_26.ssSTCourseListFilter.ssCurriculumLeadId = Convert.ToInt32(dropDown.SelectedValue);
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_26;
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox42)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox42</returns>
		public bool sel_ComboBox42_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox42)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox42</returns>
		public bool sel_ComboBox42_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox42)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox42</returns>
		public bool sel_ComboBox42_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container48 Functions
		/// </summary>
		public void cnt_Container48_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container48_setInlineAttributes(sender, e);
		}
		public string cnt_Container48_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-left:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container48_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container48)
		/// </summary>
		/// <returns>The Visible State of wt_Container48</returns>
		public bool cnt_Container48_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container70 Functions
		/// </summary>
		public void cnt_Container70_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container70_setInlineAttributes(sender, e);
		}
		public string cnt_Container70_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container70_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container70)
		/// </summary>
		/// <returns>The Visible State of wt_Container70</returns>
		public bool cnt_Container70_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container60 Functions
		/// </summary>
		public void cnt_Container60_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container60_setInlineAttributes(sender, e);
		}
		public string cnt_Container60_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container60_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container60)
		/// </summary>
		/// <returns>The Visible State of wt_Container60</returns>
		public bool cnt_Container60_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_ComboBox35 Functions
		/// </summary>
		public void sel_ComboBox35_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("ALL", "__ossli_0"));
			if (Rt_wt_ComboBox35.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			RLTeamCurriculumLeadRecordList Rt_wt_ComboBox35_reclist = queryResGetTeamById_outParamList;
			Rt_wt_ComboBox35_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox35_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox35_reclist.CurrentRec.ssENTeam.ssDescription, Convert.ToString(Rt_wt_ComboBox35_reclist.CurrentRec.ssENTeam.ssId)));
					if (((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssTeamId == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox35_reclist.CurrentRec.ssENTeam.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox35_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox35_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox35
		/// </summary>
		public void sel_ComboBox35_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnTeamChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox35_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox35.SpecialListVal = dropDown.SelectedValue.Substring(8);
				RCCourseListFilterRecord CompID_Aux_27 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
				CompID_Aux_27.ssSTCourseListFilter.ssTeamId = 0;
				Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_27;
			}
			else {
				Rt_wt_ComboBox35.SpecialListVal = "";
				try {
					RCCourseListFilterRecord CompID_Aux_28 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_28.ssSTCourseListFilter.ssTeamId = Convert.ToInt32(dropDown.SelectedValue);
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_28;
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox35)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox35</returns>
		public bool sel_ComboBox35_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox35)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox35</returns>
		public bool sel_ComboBox35_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox35)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox35</returns>
		public bool sel_ComboBox35_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container43 Functions
		/// </summary>
		public void cnt_Container43_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container43_setInlineAttributes(sender, e);
		}
		public string cnt_Container43_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container43_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container43)
		/// </summary>
		/// <returns>The Visible State of wt_Container43</returns>
		public bool cnt_Container43_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container20 Functions
		/// </summary>
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container20_setInlineAttributes(sender, e);
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container20_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container29 Functions
		/// </summary>
		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container29_setInlineAttributes(sender, e);
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container29_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_ComboBox94 Functions
		/// </summary>
		public void sel_ComboBox94_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("ALL", "__ossli_ALL"));
			if (Rt_wt_ComboBox94.SpecialListVal == "ALL")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			RLStringRecordList Rt_wt_ComboBox94_reclist = queryResGetSiteList_outParamList;
			Rt_wt_ComboBox94_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox94_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox94_reclist.CurrentRec.ssSTString.ssValue, Rt_wt_ComboBox94_reclist.CurrentRec.ssSTString.ssValue));
					if (((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssSiteName == Convert.ToString(Rt_wt_ComboBox94_reclist.CurrentRec.ssSTString.ssValue)) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox94_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox94_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox94
		/// </summary>
		public void sel_ComboBox94_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnSiteChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox94_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox94.SpecialListVal = dropDown.SelectedValue.Substring(8);
				RCCourseListFilterRecord CompID_Aux_29 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
				CompID_Aux_29.ssSTCourseListFilter.ssSiteName = "";
				Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_29;
			}
			else {
				Rt_wt_ComboBox94.SpecialListVal = "";
				try {
					RCCourseListFilterRecord CompID_Aux_30 = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]);
					CompID_Aux_30.ssSTCourseListFilter.ssSiteName = Convert.ToString(dropDown.SelectedValue);
					Global.App.OsContext.Session["CaseConferencing.CourseListFilter"] = CompID_Aux_30;
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox94)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox94</returns>
		public bool sel_ComboBox94_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox94)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox94</returns>
		public bool sel_ComboBox94_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox94)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox94</returns>
		public bool sel_ComboBox94_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container21 Functions
		/// </summary>
		public void cnt_Container21_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container21_setInlineAttributes(sender, e);
		}
		public string cnt_Container21_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align:center;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container21_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container21)
		/// </summary>
		/// <returns>The Visible State of wt_Container21</returns>
		public bool cnt_Container21_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_TableCell76 Functions
		/// </summary>
		public void wt_TableCell76_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell76_setInlineAttributes(sender, e);
		}
		public string wt_TableCell76_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_CheckBox67 Functions
		/// </summary>
		public void chk_CheckBox67_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_CheckBox67
		/// </summary>
		public void chk_CheckBox67_AjaxChange(object sender, System.EventArgs e) {
			if (CommandRefreshTable(heContext
			, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the "Checked" Value of the Check Box SdgnnUH2F0e4IA8lqgzlAA
		/// </summary>
		/// <returns>The Value of the Check Box SdgnnUH2F0e4IA8lqgzlAA</returns>
		public bool chk_CheckBox67_checked_value() {
			return varLcIncludeClassGroups;
		}
		public void chk_CheckBox67_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				varLcIncludeClassGroups = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox67)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox67</returns>
		public bool chk_CheckBox67_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox67)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox67</returns>
		public bool chk_CheckBox67_isVisible() {
			return true;
		}

		/// <summary>
		/// wtCourseTableContainer Functions
		/// </summary>
		public void cntCourseTableContainer_onDataBinding(object sender, System.EventArgs e) {
			cntCourseTableContainer_setInlineAttributes(sender, e);
		}
		public string cntCourseTableContainer_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntCourseTableContainer_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCourseTableContainer)
		/// </summary>
		/// <returns>The Visible State of wtCourseTableContainer</returns>
		public bool cntCourseTableContainer_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container19 Functions
		/// </summary>
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container19_setInlineAttributes(sender, e);
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-right:5px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container19_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance1 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance1_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter) sender;
			widget.inParamStartIndex = Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtCourseList.ClientID, true, -1);
			widget.inParamTotalRowCount = queryResGetTableData_outParamCount;
			widget.inParamLineCount = wtCourseList.RtWidget.LineCount;
		}
		/// <summary>
		/// wt_Container97 Functions
		/// </summary>
		public void cnt_Container97_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container97_setInlineAttributes(sender, e);
		}
		public string cnt_Container97_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container97_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container97)
		/// </summary>
		/// <returns>The Visible State of wt_Container97</returns>
		public bool cnt_Container97_isVisible() {
			return true;
		}

		/// <summary>
		/// wtStudentFavourite3 Functions
		/// </summary>
		public void cntStudentFavourite3_onDataBinding(object sender, System.EventArgs e) {
			cntStudentFavourite3_setInlineAttributes(sender, e);
		}
		public string cntStudentFavourite3_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-top:-10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntStudentFavourite3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtStudentFavourite3)
		/// </summary>
		/// <returns>The Visible State of wtStudentFavourite3</returns>
		public bool cntStudentFavourite3_isVisible() {
			return true;
		}

		/// <summary>
		/// wtFiltterVavorite Functions
		/// </summary>
		bool if_wtFiltterVavorite_hasRun=false;
		bool if_wtFiltterVavorite_evalResult;
		public bool if_wtFiltterVavorite() {
			if (if_wtFiltterVavorite_hasRun) {
				if_wtFiltterVavorite_hasRun = false;
				return if_wtFiltterVavorite_evalResult;
			}
			if_wtFiltterVavorite_hasRun = true;
			if_wtFiltterVavorite_evalResult = ((RCCourseListFilterRecord) Global.App.OsContext.Session["CaseConferencing.CourseListFilter"]).ssSTCourseListFilter.ssIsFavouriteFilter;
			return if_wtFiltterVavorite_evalResult;
		}

		/// <summary>
		/// wt_Link12 Functions
		/// </summary>
		public void lnk_Link12_onDataBinding(object sender, System.EventArgs e) {
			lnk_Link12_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string lnk_Link12_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-decoration:none;color:#FFD700;padding-right: 6px;";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link12_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandRefreshTable(heContext, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link12)
		/// </summary>
		/// <returns>title of the Link (wt_Link12)</returns>
		public string
		lnk_Link12_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link12)
		/// </summary>
		/// <returns>The Visible State of wt_Link12</returns>
		public bool lnk_Link12_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link12)
		/// </summary>
		/// <returns>The Enabled State of wt_Link12</returns>
		public bool lnk_Link12_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance100 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance100_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("qKwz4ZaPnkmbJYnyFjRtFg")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Link68 Functions
		/// </summary>
		public void lnk_Link68_onDataBinding(object sender, System.EventArgs e) {
			lnk_Link68_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string lnk_Link68_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-decoration:none;color:#DADADA;padding-right: 6px;";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link68_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandRefreshTable(heContext, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link68)
		/// </summary>
		/// <returns>title of the Link (wt_Link68)</returns>
		public string
		lnk_Link68_getTitle() {
			return "Filter Favorite";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link68)
		/// </summary>
		/// <returns>The Visible State of wt_Link68</returns>
		public bool lnk_Link68_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link68)
		/// </summary>
		/// <returns>The Enabled State of wt_Link68</returns>
		public bool lnk_Link68_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance45 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance45_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("ycc7nxlWj0WSykMfq37k4A")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container39 Functions
		/// </summary>
		public void cnt_Container39_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container39_setInlineAttributes(sender, e);
		}
		public string cnt_Container39_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container39_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container39)
		/// </summary>
		/// <returns>The Visible State of wt_Container39</returns>
		public bool cnt_Container39_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container54 Functions
		/// </summary>
		public void cnt_Container54_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container54_setInlineAttributes(sender, e);
		}
		public string cnt_Container54_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container54_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container54)
		/// </summary>
		/// <returns>The Visible State of wt_Container54</returns>
		public bool cnt_Container54_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container50 Functions
		/// </summary>
		public void cnt_Container50_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container50_setInlineAttributes(sender, e);
		}
		public string cnt_Container50_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container50_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container50)
		/// </summary>
		/// <returns>The Visible State of wt_Container50</returns>
		public bool cnt_Container50_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container78 Functions
		/// </summary>
		public void cnt_Container78_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container78_setInlineAttributes(sender, e);
		}
		public string cnt_Container78_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container78_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container78)
		/// </summary>
		/// <returns>The Visible State of wt_Container78</returns>
		public bool cnt_Container78_isVisible() {
			return true;
		}

		/// <summary>
		/// wtCourseList Functions
		/// </summary>
		public void recListCourseList_onDataBinding(object sender, System.EventArgs e) {
			// widget wtCourseList
			ssCourseListList = queryResGetTableData_outParamList;
			ssCourseListListDoDataBind = false;
			ssCourseListListDataBound = true;
		}
		public void recListCourseList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssCourseListList.Length > 0) {
					ssCourseListList.CurrentRec = ssCourseListList[ssCourseListList.CurrentRowNumber];
				}
				if (ssCourseListList.Length > e.SelectedIndex) {
					ssCourseListList.CurrentRec = ssCourseListList[e.SelectedIndex];
					ssCourseListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListCourseList_Store(object dataItem, int index) {
			RCOfferingListRecord tmprec = (RCOfferingListRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssSTOfferingList.ssGroupId == 0?(object) null: tmprec.ssSTOfferingList.ssGroupId);
			tmpFields.Add(tmprec.ssSTOfferingList.ssOfferingCode == "" ?(object) null: tmprec.ssSTOfferingList.ssOfferingCode);
			tmpFields.Add(tmprec.ssSTOfferingList.ssOfferingDescription == "" ?(object) null: tmprec.ssSTOfferingList.ssOfferingDescription);
			tmpFields.Add(tmprec.ssSTOfferingList.ssClusterDescription == "" ?(object) null: tmprec.ssSTOfferingList.ssClusterDescription);
			tmpFields.Add(tmprec.ssSTOfferingList.ssCurriculumLeadDescription == "" ?(object) null: tmprec.ssSTOfferingList.ssCurriculumLeadDescription);
			tmpFields.Add(tmprec.ssSTOfferingList.ssTeamLeadDescription == "" ?(object) null: tmprec.ssSTOfferingList.ssTeamLeadDescription);
			tmpFields.Add(tmprec.ssSTOfferingList.ssClusterIcon == "" ?(object) null: tmprec.ssSTOfferingList.ssClusterIcon);
			tmpFields.Add(tmprec.ssSTOfferingList.ssSelectAction == "" ?(object) null: tmprec.ssSTOfferingList.ssSelectAction);
			tmpFields.Add(tmprec.ssSTOfferingList.ssNumberOfActiveEnrolments == "" ?(object) null: tmprec.ssSTOfferingList.ssNumberOfActiveEnrolments);
			tmpFields.Add(tmprec.ssSTOfferingList.ssIsGroupFavourite == false?(object) null: tmprec.ssSTOfferingList.ssIsGroupFavourite);
			if (index < wtCourseList_storage.Count) {
				wtCourseList_storage[index] = tmpFields;
			} else {
				wtCourseList_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListCourseList_Restore() {

			#region fetch ssCourseListList.

			// Read the needed fields of ssCourseListList from storewtCourseList_list
			ssCourseListList = new RLOfferingListRecordList();
			ArrayList storewtCourseList_list;
			storewtCourseList_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtCourseList_list", null);
			if (storewtCourseList_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtCourseList_list in storewtCourseList_list) {
					if (tmpFieldswtCourseList_list != null) {
						// Aux current record variable
						RCOfferingListRecord tmpAuxCurrentRecordwtCourseList_list = new RCOfferingListRecord(null);
						tmpAuxCurrentRecordwtCourseList_list.ssSTOfferingList.ssGroupId = (int) (tmpFieldswtCourseList_list[0] == null ? 0: tmpFieldswtCourseList_list[0]);

						tmpAuxCurrentRecordwtCourseList_list.ssSTOfferingList.ssOfferingCode = (string) (tmpFieldswtCourseList_list[1] == null ? "": tmpFieldswtCourseList_list[1]);

						tmpAuxCurrentRecordwtCourseList_list.ssSTOfferingList.ssOfferingDescription = (string) (tmpFieldswtCourseList_list[2] == null ? "": tmpFieldswtCourseList_list[2]);

						tmpAuxCurrentRecordwtCourseList_list.ssSTOfferingList.ssClusterDescription = (string) (tmpFieldswtCourseList_list[3] == null ? "": tmpFieldswtCourseList_list[3]);

						tmpAuxCurrentRecordwtCourseList_list.ssSTOfferingList.ssCurriculumLeadDescription = (string) (tmpFieldswtCourseList_list[4] == null ? "": tmpFieldswtCourseList_list[4]);

						tmpAuxCurrentRecordwtCourseList_list.ssSTOfferingList.ssTeamLeadDescription = (string) (tmpFieldswtCourseList_list[5] == null ? "": tmpFieldswtCourseList_list[5]);

						tmpAuxCurrentRecordwtCourseList_list.ssSTOfferingList.ssClusterIcon = (string) (tmpFieldswtCourseList_list[6] == null ? "": tmpFieldswtCourseList_list[6]);

						tmpAuxCurrentRecordwtCourseList_list.ssSTOfferingList.ssSelectAction = (string) (tmpFieldswtCourseList_list[7] == null ? "": tmpFieldswtCourseList_list[7]);

						tmpAuxCurrentRecordwtCourseList_list.ssSTOfferingList.ssNumberOfActiveEnrolments = (string) (tmpFieldswtCourseList_list[8] == null ? "": tmpFieldswtCourseList_list[8]);

						tmpAuxCurrentRecordwtCourseList_list.ssSTOfferingList.ssIsGroupFavourite = (bool) (tmpFieldswtCourseList_list[9] == null ? false: tmpFieldswtCourseList_list[9]);

						ssCourseListList.Append(tmpAuxCurrentRecordwtCourseList_list);
					}
				}
			}
			ssCourseListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssCourseListList runtime properties state.


			if (storewtCourseList_list.Count > 0) {
				ssCourseListList.RestoreRecordListState(storewtCourseList_list.Count - 1, false);
			} else {
				ssCourseListList.CurrentRowNumber = 0;
			}

			#endregion

			wtCourseList_storage = storewtCourseList_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListCourseList_Clear(object sender, EventArgs e) {
			wtCourseList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListCourseList_Rebuild(int startIndex, int lineCount) {
			if (ssCourseListList.Length != -1) {
				wtCourseList_storage.Clear();
				for (int i=startIndex; i<ssCourseListList.Data.Count && i<startIndex+lineCount; i++) {
					recListCourseList_Store(ssCourseListList.Data[i], wtCourseList_storage.Count);
				}
			}
		}
		public void recListCourseList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtCourseList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLOfferingListRecordList getWtCourseListList() {
			if (ssCourseListListDoDataBind) {
				recListCourseList_onDataBinding(this, null);
			}

			return ssCourseListList;
		}
		/// <summary>
		/// wt_Container33 Functions
		/// </summary>
		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container33_setInlineAttributes(sender, e);
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "border-left: solid 1px #DADADA;position:relative;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container33_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container102 Functions
		/// </summary>
		public void cnt_Container102_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container102_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container102_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container102_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container102
		/// </summary>
		public void cnt_Container102_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnCourseClick(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container102)
		/// </summary>
		/// <returns>The Visible State of wt_Container102</returns>
		public bool cnt_Container102_isVisible() {
			return true;
		}

		/// <summary>
		/// wtClusterIcon Functions
		/// </summary>
		public void cntClusterIcon_onDataBinding(object sender, System.EventArgs e) {
			cntClusterIcon_setInlineAttributes(sender, e);
		}
		public string cntClusterIcon_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntClusterIcon_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtClusterIcon)
		/// </summary>
		/// <returns>The Visible State of wtClusterIcon</returns>
		public bool cntClusterIcon_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Image61 Functions
		/// </summary>

		/// <summary>
		/// Gets the URL of the image (wt_Image61)
		/// </summary>
		/// <returns>URL of the Image (wt_Image61)</returns>
		public string img_Image61_getURL() {
			string url = (((getWtCourseListList().CurrentRec.ssSTOfferingList.ssClusterIcon!= "")) ?(("img/" +getWtCourseListList().CurrentRec.ssSTOfferingList.ssClusterIcon)):("img/Cornwall_Logo.png"));
			url = url.Replace("&amp;", "&");
			return url; 
		}
		/// <summary>
		/// wtOfferingDetail Functions
		/// </summary>
		public void cntOfferingDetail_onDataBinding(object sender, System.EventArgs e) {
			cntOfferingDetail_setInlineAttributes(sender, e);
		}
		public string cntOfferingDetail_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntOfferingDetail_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtOfferingDetail)
		/// </summary>
		/// <returns>The Visible State of wtOfferingDetail</returns>
		public bool cntOfferingDetail_isVisible() {
			return true;
		}

		/// <summary>
		/// wtOfferingCode Functions
		/// </summary>
		public void cntOfferingCode_onDataBinding(object sender, System.EventArgs e) {
			cntOfferingCode_setInlineAttributes(sender, e);
		}
		public string cntOfferingCode_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntOfferingCode_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtOfferingCode)
		/// </summary>
		/// <returns>The Visible State of wtOfferingCode</returns>
		public bool cntOfferingCode_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression92 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = BmH_5T1G9ky+eLpXajS3xA) Expression:
		///  CourseList.List.Current.OfferingList.OfferingCode
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression92() {
			return getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingCode;
		}
		/// <summary>
		/// wtOfferingDescription Functions
		/// </summary>
		public void cntOfferingDescription_onDataBinding(object sender, System.EventArgs e) {
			cntOfferingDescription_setInlineAttributes(sender, e);
		}
		public string cntOfferingDescription_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntOfferingDescription_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtOfferingDescription)
		/// </summary>
		/// <returns>The Visible State of wtOfferingDescription</returns>
		public bool cntOfferingDescription_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression86 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = fzsb3Hh8YkCt0K2n3xOGlg) Expression:
		///  CourseList.List.Current.OfferingList.OfferingDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression86() {
			return getWtCourseListList().CurrentRec.ssSTOfferingList.ssOfferingDescription;
		}
		/// <summary>
		/// wtNumberOfActiveEnrolments Functions
		/// </summary>
		public void cntNumberOfActiveEnrolments_onDataBinding(object sender, System.EventArgs e) {
			cntNumberOfActiveEnrolments_setInlineAttributes(sender, e);
		}
		public string cntNumberOfActiveEnrolments_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntNumberOfActiveEnrolments_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtNumberOfActiveEnrolments)
		/// </summary>
		/// <returns>The Visible State of wtNumberOfActiveEnrolments</returns>
		public bool cntNumberOfActiveEnrolments_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression56 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = +LHwgf9WW02wSDpB4ureiw) Expression:
		///  CourseList.List.Current.OfferingList.NumberOfActiveEnrolments + " active enrolments."
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression56() {
			return (getWtCourseListList().CurrentRec.ssSTOfferingList.ssNumberOfActiveEnrolments+ " active enrolments.");
		}
		/// <summary>
		/// wtGroupingInformation Functions
		/// </summary>
		public void cntGroupingInformation_onDataBinding(object sender, System.EventArgs e) {
			cntGroupingInformation_setInlineAttributes(sender, e);
		}
		public string cntGroupingInformation_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntGroupingInformation_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtGroupingInformation)
		/// </summary>
		/// <returns>The Visible State of wtGroupingInformation</returns>
		public bool cntGroupingInformation_isVisible() {
			return true;
		}

		/// <summary>
		/// wtCluster Functions
		/// </summary>
		public void cntCluster_onDataBinding(object sender, System.EventArgs e) {
			cntCluster_setInlineAttributes(sender, e);
		}
		public string cntCluster_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntCluster_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCluster)
		/// </summary>
		/// <returns>The Visible State of wtCluster</returns>
		public bool cntCluster_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression18 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = UktRLFh7iUqh7p5zy8+n8Q) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression18() {
			return (((getWtCourseListList().CurrentRec.ssSTOfferingList.ssClusterDescription!= "")) ?(getWtCourseListList().CurrentRec.ssSTOfferingList.ssClusterDescription):("Cluster not set"));
		}
		/// <summary>
		/// wtCurriculumLead Functions
		/// </summary>
		public void cntCurriculumLead_onDataBinding(object sender, System.EventArgs e) {
			cntCurriculumLead_setInlineAttributes(sender, e);
		}
		public string cntCurriculumLead_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntCurriculumLead_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCurriculumLead)
		/// </summary>
		/// <returns>The Visible State of wtCurriculumLead</returns>
		public bool cntCurriculumLead_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression81 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Hoh7zFBG7E+H7JewRtioXQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression81() {
			return (((getWtCourseListList().CurrentRec.ssSTOfferingList.ssCurriculumLeadDescription!= "")) ?(getWtCourseListList().CurrentRec.ssSTOfferingList.ssCurriculumLeadDescription):("Curriculum Lead not set"));
		}
		/// <summary>
		/// wtTeam Functions
		/// </summary>
		public void cntTeam_onDataBinding(object sender, System.EventArgs e) {
			cntTeam_setInlineAttributes(sender, e);
		}
		public string cntTeam_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntTeam_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtTeam)
		/// </summary>
		/// <returns>The Visible State of wtTeam</returns>
		public bool cntTeam_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression24 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = OtpNQPzYW0+qClEFO9NNpA) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression24() {
			return (((getWtCourseListList().CurrentRec.ssSTOfferingList.ssTeamLeadDescription!= "")) ?(getWtCourseListList().CurrentRec.ssSTOfferingList.ssTeamLeadDescription):("Team not set"));
		}
		/// <summary>
		/// wtSelectAction Functions
		/// </summary>
		public void cntSelectAction_onDataBinding(object sender, System.EventArgs e) {
			cntSelectAction_setInlineAttributes(sender, e);
		}
		public string cntSelectAction_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSelectAction_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSelectAction)
		/// </summary>
		/// <returns>The Visible State of wtSelectAction</returns>
		public bool cntSelectAction_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_TableCell91 Functions
		/// </summary>
		public void wt_TableCell91_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell91_setInlineAttributes(sender, e);
		}
		public string wt_TableCell91_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Container49 Functions
		/// </summary>
		public void cnt_Container49_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container49_setInlineAttributes(sender, e);
		}
		public string cnt_Container49_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container49_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container49)
		/// </summary>
		/// <returns>The Visible State of wt_Container49</returns>
		public bool cnt_Container49_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_ComboBox58 Functions
		/// </summary>
		public void sel_ComboBox58_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			RLActionItemRecordList Rt_wt_ComboBox58_reclist = Functions.ActionCourseList_GetActionsByRole(heContext, ((int) Global.App.OsContext.Session["UserID"]));
			Rt_wt_ComboBox58_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox58_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox58_reclist.CurrentRec.ssSTActionItem.ssText, Rt_wt_ComboBox58_reclist.CurrentRec.ssSTActionItem.ssValue));
					if (getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction == Convert.ToString(Rt_wt_ComboBox58_reclist.CurrentRec.ssSTActionItem.ssValue)) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox58_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox58_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox58
		/// </summary>
		public void sel_ComboBox58_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnActionChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox58_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			Control parentControl = (Control) sender;
			while (parentControl != null) {
				if (parentControl is IIteratorItem)break;
				parentControl = parentControl.Parent;
			}
			int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
			if (ssCourseListList.Length > parentControlIndex && parentControlIndex > -1) {
				ssCourseListList.SetPosition(parentControlIndex);
			} else {
				return;
			}
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction = "";
			}
			else {
				try {
					getWtCourseListList().CurrentRec.ssSTOfferingList.ssSelectAction = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox58)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox58</returns>
		public bool sel_ComboBox58_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox58)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox58</returns>
		public bool sel_ComboBox58_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox58)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox58</returns>
		public bool sel_ComboBox58_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtStudentFavourite2 Functions
		/// </summary>
		public void cntStudentFavourite2_onDataBinding(object sender, System.EventArgs e) {
			cntStudentFavourite2_setInlineAttributes(sender, e);
		}
		public string cntStudentFavourite2_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntStudentFavourite2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtStudentFavourite2)
		/// </summary>
		/// <returns>The Visible State of wtStudentFavourite2</returns>
		public bool cntStudentFavourite2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_If88 Functions
		/// </summary>
		bool if_wt_If88_hasRun=false;
		bool if_wt_If88_evalResult;
		public bool if_wt_If88() {
			if (if_wt_If88_hasRun) {
				if_wt_If88_hasRun = false;
				return if_wt_If88_evalResult;
			}
			if_wt_If88_hasRun = true;
			if_wt_If88_evalResult = getWtCourseListList().CurrentRec.ssSTOfferingList.ssIsGroupFavourite;
			return if_wt_If88_evalResult;
		}

		/// <summary>
		/// wt_Link34 Functions
		/// </summary>
		public void lnk_Link34_onDataBinding(object sender, System.EventArgs e) {
			lnk_Link34_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string lnk_Link34_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-decoration:none;color:#FFD700;";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link34_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandToogleFavourite(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link34)
		/// </summary>
		/// <returns>title of the Link (wt_Link34)</returns>
		public string
		lnk_Link34_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link34)
		/// </summary>
		/// <returns>The Visible State of wt_Link34</returns>
		public bool lnk_Link34_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link34)
		/// </summary>
		/// <returns>The Enabled State of wt_Link34</returns>
		public bool lnk_Link34_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance84 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance84_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("qKwz4ZaPnkmbJYnyFjRtFg")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Link74 Functions
		/// </summary>
		public void lnk_Link74_onDataBinding(object sender, System.EventArgs e) {
			lnk_Link74_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string lnk_Link74_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-decoration:none;color:#DADADA;";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link74_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandToogleFavourite(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link74)
		/// </summary>
		/// <returns>title of the Link (wt_Link74)</returns>
		public string
		lnk_Link74_getTitle() {
			return "set as favourite";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link74)
		/// </summary>
		/// <returns>The Visible State of wt_Link74</returns>
		public bool lnk_Link74_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link74)
		/// </summary>
		/// <returns>The Enabled State of wt_Link74</returns>
		public bool lnk_Link74_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance95 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance95_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("ycc7nxlWj0WSykMfq37k4A")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container83 Functions
		/// </summary>
		public void cnt_Container83_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container83_setInlineAttributes(sender, e);
		}
		public string cnt_Container83_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container83_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container83)
		/// </summary>
		/// <returns>The Visible State of wt_Container83</returns>
		public bool cnt_Container83_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance77 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance77_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation) sender;
			widget.inParamListWidgetId = wtCourseList.ClientID;
			widget.inParamLineCount = wtCourseList.RtWidget.LineCount;
			widget.inParamTotalRowCount = queryResGetTableData_outParamCount;
			widget.inParamMaxPageNumbers = 5;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance77
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance77_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshTable(heContext
			, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}


		public static class FuncCommandOnSiteChange {
		}
		public static class FuncCommandOnNotifyInsert_BulkTargets {
		}
		public static class FuncCommandOnTeamChange {
		}
		public static class FuncCommandOnCourseClick {
		}
		public static class FuncCommandOnClusterChange {
		}
		public static class FuncCommandOnActionChange {
		}
		public static class FuncCommandRefreshTable {
		}
		public static class FuncCommandOnCurriculumChange {
		}
		public static class FuncCommandToogleFavourite {

			/// <summary>
			/// Query Function "GetStaffCourseFavouritesByUserId" of Action "ToogleFavourite"
			/// </summary>
			public static RLStaffCourseFavouriteRecordList datasetGetStaffCourseFavouritesByUserId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENStaffCourseFavourite.[ID] o1, ENStaffCourseFavourite.[GROUPID] o2, ENStaffCourseFavourite.[USERID] o3");
				fromBuilder.Append(" FROM {StaffCourseFavourite} ENStaffCourseFavourite");
				whereBuilder.Append(" WHERE ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENStaffCourseFavourite.[USERID] = @qpinP1) AND (ENStaffCourseFavourite.[USERID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENStaffCourseFavourite.[USERID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENStaffCourseFavourite.[GROUPID] = @qpinP) AND (ENStaffCourseFavourite.[GROUPID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENStaffCourseFavourite.[GROUPID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStaffCourseFavouriteRecordList outParamList = new RLStaffCourseFavouriteRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStaffCourseFavouriteRecordList _tmp = new RLStaffCourseFavouriteRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.ToogleFavourite.GetStaffCourseFavouritesByUserId.List");
						outParamList = (RLStaffCourseFavouriteRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.ToogleFavourite.GetStaffCourseFavouritesByUserId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStaffCourseFavouriteRecordList _tmp = new RLStaffCourseFavouriteRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.ToogleFavourite.GetStaffCourseFavouritesByUserId.List");
							outParamList = (RLStaffCourseFavouriteRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.ToogleFavourite.GetStaffCourseFavouritesByUserId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandOnOfferingKeywordChange {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetTableData" of Action "Preparation"
			/// </summary>
			public static RLOfferingListRecordList QueryGetTableData(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstClusterId, int qpinCurriculumLeadId, int qpinTeamId, string qpstOfferingKeyword, int qpinUserId, bool qpboIsFavourite, int qpinAcademicYear, int qpinGroupTypeOffering, int qpinGroupTypePLA, string qpstSiteName, bool qpboIncludeClassGroups) {
				// Query Iterations: Single {CourseList}
				// Refresh Query Pdy2Eaeu+0+AaRCYmtX3cQ Iterations: Single {CourseList}
				// Refresh Query eeuO0hQrsESYzxG1BvGplw Iterations: Single {CourseList}
				// Refresh Query uUF4csPjJUaMpW3eGh8gAA Iterations: Single {CourseList}
				// Refresh Query PfdUQFOb6ECc18f_rHYY5g Iterations: Single {CourseList}
				// Refresh Query mIJRK4uSCUCe9mWHb_Garg Iterations: Single {CourseList}
				// Refresh Query YbE62oHFrkmsSS1r58gA1g Iterations: Single {CourseList}
				// Refresh Query iFcjX2qsw0mdi+xT8DcTRw Iterations: Single {CourseList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinAcademicYear", DbType.Int32, qpinAcademicYear);
				sqlCountCmd.CreateParameter("@qpinAcademicYear", DbType.Int32, qpinAcademicYear);
				sqlCmd.CreateParameter("@qpinUserId", DbType.Int32, qpinUserId);
				sqlCountCmd.CreateParameter("@qpinUserId", DbType.Int32, qpinUserId);
				sqlCmd.CreateParameter("@qpboIncludeClassGroups", DbType.Boolean, qpboIncludeClassGroups);
				sqlCountCmd.CreateParameter("@qpboIncludeClassGroups", DbType.Boolean, qpboIncludeClassGroups);
				sqlCmd.CreateParameter("@qpinGroupTypeOffering", DbType.Int32, qpinGroupTypeOffering);
				sqlCountCmd.CreateParameter("@qpinGroupTypeOffering", DbType.Int32, qpinGroupTypeOffering);
				sqlCmd.CreateParameter("@qpinGroupTypePLA", DbType.Int32, qpinGroupTypePLA);
				sqlCountCmd.CreateParameter("@qpinGroupTypePLA", DbType.Int32, qpinGroupTypePLA);
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCountCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCmd.CreateParameter("@qpinCurriculumLeadId", DbType.Int32, qpinCurriculumLeadId);
				sqlCountCmd.CreateParameter("@qpinCurriculumLeadId", DbType.Int32, qpinCurriculumLeadId);
				sqlCmd.CreateParameter("@qpinTeamId", DbType.Int32, qpinTeamId);
				sqlCountCmd.CreateParameter("@qpinTeamId", DbType.Int32, qpinTeamId);
				sqlCmd.CreateParameter("@qpstOfferingKeyword", DbType.String, qpstOfferingKeyword);
				sqlCountCmd.CreateParameter("@qpstOfferingKeyword", DbType.String, qpstOfferingKeyword);
				sqlCmd.CreateParameter("@qpboIsFavourite", DbType.Boolean, qpboIsFavourite);
				sqlCountCmd.CreateParameter("@qpboIsFavourite", DbType.Boolean, qpboIsFavourite);
				sqlCmd.CreateParameter("@qpstSiteName", DbType.String, qpstSiteName);
				sqlCountCmd.CreateParameter("@qpstSiteName", DbType.String, qpstSiteName);
				string advSql = "SELECT   " +
				 "     {Group}.[ID],  " +
				 "     {Group}.[GROUPNAME],  " +
				 "     {Group}.[GROUPDESCRIPTION],  " +
				 "     {Cluster}.[CLUSTERDESCRIPTION],  " +
				 "     {CurriculumLead}.[DESCRIPTION],  " +
				 "     {Team}.[DESCRIPTION],  " +
				 "     {Cluster}.[ICONFILENAME],  " +
				 "    '',  " +
				 "    (SELECT COUNT(*) FROM  {Student_Group} WHERE  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[ENROLMENTSTATUS] = 'Active' AND  {Student_Group}.[ACADEMICYEAR] = @qpinAcademicYear),  " +
				 "    (CASE WHEN  {StaffCourseFavourite}.[ID] IS NULL THEN 0 ELSE 1 END) as IsFavourite  " +
				 "FROM   " +
				 "     {Group}  " +
				 "LEFT JOIN  {Team} ON  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "LEFT JOIN  {CurriculumLead} ON  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "LEFT JOIN  {Cluster} ON  {CurriculumLead}.[CLUSTER] =  {Cluster}.[ID]  " +
				 "INNER JOIN  {GroupType} ON  {Group}.[GROUPTYPEID] =  {GroupType}.[ID]  " +
				 "LEFT JOIN  {StaffCourseFavourite} ON  {Group}.[ID] =  {StaffCourseFavourite}.[GROUPID] AND  {StaffCourseFavourite}.[USERID] = @qpinUserId   " +
				 "WHERE   " +
				 "    (@qpboIncludeClassGroups = 1 OR ( {GroupType}.[ID] =@qpinGroupTypeOffering OR  {GroupType}.[ID] = @qpinGroupTypePLA))  " +
				 "AND  " +
				 "    (@qpstClusterId='' OR  {Cluster}.[ID] = @qpstClusterId)  " +
				 "AND  " +
				 "    (@qpinCurriculumLeadId = 0 OR  {CurriculumLead}.[ID] = @qpinCurriculumLeadId)  " +
				 "AND   " +
				 "    (@qpinTeamId = 0 OR  {Team}.[ID] = @qpinTeamId)  " +
				 "AND   " +
				 "    (@qpstOfferingKeyword = '' OR  {Group}.[GROUPNAME] like '%' + @qpstOfferingKeyword + '%' OR  {Group}.[GROUPDESCRIPTION] like '%' + @qpstOfferingKeyword + '%')  " +
				 "AND  " +
				 "    (@qpboIsFavourite = 0 OR  {StaffCourseFavourite}.[USERID] = @qpinUserId)  " +
				 "AND (@qpstSiteName = '' OR @qpstSiteName = 'ALL' OR  {Group}.[SITE] = @qpstSiteName)  " +
				 "ORDER BY   " +
				 "    (SELECT CASE WHEN (SELECT COUNT(*) FROM  {Student_Group} WHERE  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[ENROLMENTSTATUS] = 'Active') >0 THEN 1 ELSE 0 END) DESC,  " +
				 "     {Cluster}.[ORDER],  " +
				 "     {CurriculumLead}.[CURRICULUMLEADCODE],  " +
				 "     {Team}.[TEAMCODE],  " +
				 "     {Group}.[GROUPNAME]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLOfferingListRecordList outParamList = new RLOfferingListRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLOfferingListRecordList _tmp = new RLOfferingListRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.Preparation.GetTableData.List");
							outParamList = (RLOfferingListRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Courses.CourseList.Preparation.GetTableData.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Courses.CourseList.Preparation.GetTableData.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetTableData.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Courses.CourseList.Preparation.GetTableData.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetTableData.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetTableData in Preparation in CourseList in Courses in CaseConferencing (SELECT       {Group}.[Id],      {Group}.[GroupName],      {Group}.[GroupDescription],      {Cluster}.[ClusterDescription],      {CurriculumLead}.[Description],      {Team}.[Description],      {Cluster}.[IconFileName],      '',      (SELECT COUNT(*) FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = 'Active' AND {Student_Group}.[AcademicYear] = @AcademicYear),      (CASE WHEN {StaffCourseFavourite}.[Id] IS NULL THEN 0 ELSE 1 END) as IsFavourite  FROM       {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  INNER JOIN {GroupType} ON {Group}.[GroupTypeId] = {GroupType}.[Id]  LEFT JOIN {StaffCourseFavourite} ON {Group}.[Id] = {StaffCourseFavourite}.[GroupId] AND {StaffCourseFavourite}.[UserId] = @UserId   WHERE       (@IncludeClassGroups = 1 OR ({GroupType}.[Id] =@GroupTypeOffering ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetTableData in Preparation in CourseList in Courses in CaseConferencing (SELECT       {Group}.[Id],      {Group}.[GroupName],      {Group}.[GroupDescription],      {Cluster}.[ClusterDescription],      {CurriculumLead}.[Description],      {Team}.[Description],      {Cluster}.[IconFileName],      '',      (SELECT COUNT(*) FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = 'Active' AND {Student_Group}.[AcademicYear] = @AcademicYear),      (CASE WHEN {StaffCourseFavourite}.[Id] IS NULL THEN 0 ELSE 1 END) as IsFavourite  FROM       {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  INNER JOIN {GroupType} ON {Group}.[GroupTypeId] = {GroupType}.[Id]  LEFT JOIN {StaffCourseFavourite} ON {Group}.[Id] = {StaffCourseFavourite}.[GroupId] AND {StaffCourseFavourite}.[UserId] = @UserId   WHERE       (@IncludeClassGroups = 1 OR ({GroupType}.[Id] =@GroupTypeOffering ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetTableData in Preparation in CourseList in Courses in CaseConferencing (SELECT       {Group}.[Id],      {Group}.[GroupName],      {Group}.[GroupDescription],      {Cluster}.[ClusterDescription],      {CurriculumLead}.[Description],      {Team}.[Description],      {Cluster}.[IconFileName],      '',      (SELECT COUNT(*) FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = 'Active' AND {Student_Group}.[AcademicYear] = @AcademicYear),      (CASE WHEN {StaffCourseFavourite}.[Id] IS NULL THEN 0 ELSE 1 END) as IsFavourite  FROM       {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  INNER JOIN {GroupType} ON {Group}.[GroupTypeId] = {GroupType}.[Id]  LEFT JOIN {StaffCourseFavourite} ON {Group}.[Id] = {StaffCourseFavourite}.[GroupId] AND {StaffCourseFavourite}.[UserId] = @UserId   WHERE       (@IncludeClassGroups = 1 OR ({GroupType}.[Id] =@GroupTypeOffering ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetCurriculumLeadById" of Action "Preparation"
			/// </summary>
			public static RLCurriculumLeadRecordList datasetGetCurriculumLeadById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query qqdpPvFwOkSBjPBYykEiSg Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCurriculumLead.[ID] o1, NULL o2, ENCurriculumLead.[DESCRIPTION] o3, NULL o4, NULL o5");
				fromBuilder.Append(" FROM {CurriculumLead} ENCurriculumLead");
				if (qpstP != BuiltInFunction.NullTextIdentifier()) {
					whereBuilder.Append(" WHERE ");
					if (qpstP != BuiltInFunction.NullTextIdentifier()) {
						if (qpstP.Trim() != "") {
							whereBuilder.Append("((ENCurriculumLead.[CLUSTER] = @qpstP) AND (ENCurriculumLead.[CLUSTER] IS NOT NULL))");
							sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
						} else {
							whereBuilder.Append("(ENCurriculumLead.[CLUSTER] IS NULL)");
						}
					}
				}
				orderByBuilder.Append(" ORDER BY ENCurriculumLead.[CURRICULUMLEADCODE] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCurriculumLeadRecordList outParamList = new RLCurriculumLeadRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCurriculumLeadRecordList _tmp = new RLCurriculumLeadRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.Preparation.GetCurriculumLeadById.List");
						outParamList = (RLCurriculumLeadRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetCurriculumLeadById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCurriculumLeadRecordList _tmp = new RLCurriculumLeadRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.Preparation.GetCurriculumLeadById.List");
							outParamList = (RLCurriculumLeadRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetCurriculumLeadById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetSiteList" of Action "Preparation"
			/// </summary>
			public static RLStringRecordList QueryGetSiteList(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstClusterId, int qpinCurriculumLeadId, int qpinTeamId) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query dGMDjywSTEeDTc0UDOTRcA Iterations: Multiple {-unbound-}
				// Refresh Query 1vfsi+gDg0ypsCgmD4EIHg Iterations: Multiple {-unbound-}
				// Refresh Query 84wLkgOVM0ea0rnVP87FaA Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCmd.CreateParameter("@qpinCurriculumLeadId", DbType.Int32, qpinCurriculumLeadId);
				sqlCmd.CreateParameter("@qpinTeamId", DbType.Int32, qpinTeamId);
				string advSql = "SELECT DISTINCT  {Group}.[SITE] FROM  {Group}  " +
				 "LEFT JOIN  {Team} ON  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "LEFT JOIN  {CurriculumLead} ON  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "LEFT JOIN  {Cluster} ON  {CurriculumLead}.[CLUSTER] =  {Cluster}.[ID]  " +
				 "WHERE (@qpstClusterId = '' OR  {Cluster}.[ID] = @qpstClusterId)  " +
				 "AND (@qpinCurriculumLeadId = 0 OR  {CurriculumLead}.[ID] = @qpinCurriculumLeadId)  " +
				 "AND (@qpinTeamId = 0 OR  {Team}.[ID] = @qpinTeamId)  " +
				 "AND  {Group}.[SITE] <> ''  " +
				 "ORDER BY  {Group}.[SITE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringRecordList outParamList = new RLStringRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringRecordList _tmp = new RLStringRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.Preparation.GetSiteList.List");
							outParamList = (RLStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetSiteList.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetSiteList.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetSiteList in Preparation in CourseList in Courses in CaseConferencing (SELECT DISTINCT {Group}.[Site] FROM {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE (@ClusterId = '' OR {Cluster}.[Id] = @ClusterId)  AND (@CurriculumLeadId = 0 OR {CurriculumLead}.[Id] = @CurriculumLeadId)  AND (@TeamId = 0 OR {Team}.[Id] = @TeamId)  AND {Group}.[Site] <> ''  ORDER BY {Group}.[Site]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetSiteList in Preparation in CourseList in Courses in CaseConferencing (SELECT DISTINCT {Group}.[Site] FROM {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE (@ClusterId = '' OR {Cluster}.[Id] = @ClusterId)  AND (@CurriculumLeadId = 0 OR {CurriculumLead}.[Id] = @CurriculumLeadId)  AND (@TeamId = 0 OR {Team}.[Id] = @TeamId)  AND {Group}.[Site] <> ''  ORDER BY {Group}.[Site]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetSiteList in Preparation in CourseList in Courses in CaseConferencing (SELECT DISTINCT {Group}.[Site] FROM {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE (@ClusterId = '' OR {Cluster}.[Id] = @ClusterId)  AND (@CurriculumLeadId = 0 OR {CurriculumLead}.[Id] = @CurriculumLeadId)  AND (@TeamId = 0 OR {Team}.[Id] = @TeamId)  AND {Group}.[Site] <> ''  ORDER BY {Group}.[Site]): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetTableData2" of Action "Preparation"
			/// </summary>
			public static RLOfferingListRecordList QueryGetTableData2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstClusterId, int qpinCurriculumLeadId, int qpinTeamId, string qpstOfferingKeyword, int qpinUserId, bool qpboIsFavourite, int qpinGroupTypeOffering, int qpinGroupTypePLA, bool qpboIncludeClassGroups) {
				// Query Iterations: Single {CourseList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinUserId", DbType.Int32, qpinUserId);
				sqlCountCmd.CreateParameter("@qpinUserId", DbType.Int32, qpinUserId);
				sqlCmd.CreateParameter("@qpboIncludeClassGroups", DbType.Boolean, qpboIncludeClassGroups);
				sqlCountCmd.CreateParameter("@qpboIncludeClassGroups", DbType.Boolean, qpboIncludeClassGroups);
				sqlCmd.CreateParameter("@qpinGroupTypeOffering", DbType.Int32, qpinGroupTypeOffering);
				sqlCountCmd.CreateParameter("@qpinGroupTypeOffering", DbType.Int32, qpinGroupTypeOffering);
				sqlCmd.CreateParameter("@qpinGroupTypePLA", DbType.Int32, qpinGroupTypePLA);
				sqlCountCmd.CreateParameter("@qpinGroupTypePLA", DbType.Int32, qpinGroupTypePLA);
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCountCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCmd.CreateParameter("@qpinCurriculumLeadId", DbType.Int32, qpinCurriculumLeadId);
				sqlCountCmd.CreateParameter("@qpinCurriculumLeadId", DbType.Int32, qpinCurriculumLeadId);
				sqlCmd.CreateParameter("@qpinTeamId", DbType.Int32, qpinTeamId);
				sqlCountCmd.CreateParameter("@qpinTeamId", DbType.Int32, qpinTeamId);
				sqlCmd.CreateParameter("@qpstOfferingKeyword", DbType.String, qpstOfferingKeyword);
				sqlCountCmd.CreateParameter("@qpstOfferingKeyword", DbType.String, qpstOfferingKeyword);
				sqlCmd.CreateParameter("@qpboIsFavourite", DbType.Boolean, qpboIsFavourite);
				sqlCountCmd.CreateParameter("@qpboIsFavourite", DbType.Boolean, qpboIsFavourite);
				string advSql = "SELECT   " +
				 "     {Group}.[ID],  " +
				 "     {Group}.[GROUPNAME],  " +
				 "     {Group}.[GROUPDESCRIPTION],  " +
				 "     {Cluster}.[CLUSTERDESCRIPTION],  " +
				 "     {CurriculumLead}.[DESCRIPTION],  " +
				 "     {Team}.[DESCRIPTION],  " +
				 "     {Cluster}.[ICONFILENAME],  " +
				 "    '',  " +
				 "    (SELECT COUNT(*) FROM  {Student_Group} WHERE  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[ENROLMENTSTATUS] = 'Active'),  " +
				 "    (CASE WHEN  {StaffCourseFavourite}.[ID] IS NULL THEN 0 ELSE 1 END) as IsFavourite  " +
				 "FROM   " +
				 "     {Group}  " +
				 "LEFT JOIN  {Team} ON  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "LEFT JOIN  {CurriculumLead} ON  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "LEFT JOIN  {Cluster} ON  {CurriculumLead}.[CLUSTER] =  {Cluster}.[ID]  " +
				 "INNER JOIN  {GroupType} ON  {Group}.[GROUPTYPEID] =  {GroupType}.[ID]  " +
				 "LEFT JOIN  {StaffCourseFavourite} ON  {Group}.[ID] =  {StaffCourseFavourite}.[GROUPID] AND  {StaffCourseFavourite}.[USERID] = @qpinUserId   " +
				 "WHERE   " +
				 "  " +
				 "    (@qpboIncludeClassGroups=1 OR ( {GroupType}.[ID] = @qpinGroupTypeOffering OR  {GroupType}.[ID] = @qpinGroupTypePLA))  " +
				 "AND   " +
				 "    (@qpstClusterId='' OR  {Cluster}.[ID] = @qpstClusterId)  " +
				 "AND  " +
				 "    (@qpinCurriculumLeadId = 0 OR  {CurriculumLead}.[ID] = @qpinCurriculumLeadId)  " +
				 "AND   " +
				 "    (@qpinTeamId = 0 OR  {Team}.[ID] = @qpinTeamId)  " +
				 "AND   " +
				 "    (@qpstOfferingKeyword = '' OR  {Group}.[GROUPNAME] like '%' + @qpstOfferingKeyword + '%' OR  {Group}.[GROUPDESCRIPTION] like '%' + @qpstOfferingKeyword + '%')  " +
				 "AND  " +
				 "    (@qpboIsFavourite = 0 OR  {StaffCourseFavourite}.[USERID] = @qpinUserId)  " +
				 "ORDER BY   " +
				 "    (SELECT CASE WHEN (SELECT COUNT(*) FROM  {Student_Group} WHERE  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[ENROLMENTSTATUS] = 'Active') >0 THEN 1 ELSE 0 END) DESC,  " +
				 "     {Cluster}.[ORDER],  " +
				 "     {CurriculumLead}.[CURRICULUMLEADCODE],  " +
				 "     {Team}.[TEAMCODE],  " +
				 "     {Group}.[GROUPNAME]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLOfferingListRecordList outParamList = new RLOfferingListRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLOfferingListRecordList _tmp = new RLOfferingListRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.Preparation.GetTableData2.List");
							outParamList = (RLOfferingListRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Courses.CourseList.Preparation.GetTableData2.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Courses.CourseList.Preparation.GetTableData2.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetTableData2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query Courses.CourseList.Preparation.GetTableData2.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetTableData2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetTableData2 in Preparation in CourseList in Courses in CaseConferencing (SELECT       {Group}.[Id],      {Group}.[GroupName],      {Group}.[GroupDescription],      {Cluster}.[ClusterDescription],      {CurriculumLead}.[Description],      {Team}.[Description],      {Cluster}.[IconFileName],      '',      (SELECT COUNT(*) FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = 'Active'),      (CASE WHEN {StaffCourseFavourite}.[Id] IS NULL THEN 0 ELSE 1 END) as IsFavourite  FROM       {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  INNER JOIN {GroupType} ON {Group}.[GroupTypeId] = {GroupType}.[Id]  LEFT JOIN {StaffCourseFavourite} ON {Group}.[Id] = {StaffCourseFavourite}.[GroupId] AND {StaffCourseFavourite}.[UserId] = @UserId   WHERE         (@IncludeClassGroups=1 OR ({GroupType}.[Id] = @GroupTypeOffering OR {GroupType}.[Id] = @GroupTypePLA))  AND        ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetTableData2 in Preparation in CourseList in Courses in CaseConferencing (SELECT       {Group}.[Id],      {Group}.[GroupName],      {Group}.[GroupDescription],      {Cluster}.[ClusterDescription],      {CurriculumLead}.[Description],      {Team}.[Description],      {Cluster}.[IconFileName],      '',      (SELECT COUNT(*) FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = 'Active'),      (CASE WHEN {StaffCourseFavourite}.[Id] IS NULL THEN 0 ELSE 1 END) as IsFavourite  FROM       {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  INNER JOIN {GroupType} ON {Group}.[GroupTypeId] = {GroupType}.[Id]  LEFT JOIN {StaffCourseFavourite} ON {Group}.[Id] = {StaffCourseFavourite}.[GroupId] AND {StaffCourseFavourite}.[UserId] = @UserId   WHERE         (@IncludeClassGroups=1 OR ({GroupType}.[Id] = @GroupTypeOffering OR {GroupType}.[Id] = @GroupTypePLA))  AND        ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetTableData2 in Preparation in CourseList in Courses in CaseConferencing (SELECT       {Group}.[Id],      {Group}.[GroupName],      {Group}.[GroupDescription],      {Cluster}.[ClusterDescription],      {CurriculumLead}.[Description],      {Team}.[Description],      {Cluster}.[IconFileName],      '',      (SELECT COUNT(*) FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = 'Active'),      (CASE WHEN {StaffCourseFavourite}.[Id] IS NULL THEN 0 ELSE 1 END) as IsFavourite  FROM       {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  INNER JOIN {GroupType} ON {Group}.[GroupTypeId] = {GroupType}.[Id]  LEFT JOIN {StaffCourseFavourite} ON {Group}.[Id] = {StaffCourseFavourite}.[GroupId] AND {StaffCourseFavourite}.[UserId] = @UserId   WHERE         (@IncludeClassGroups=1 OR ({GroupType}.[Id] = @GroupTypeOffering OR {GroupType}.[Id] = @GroupTypePLA))  AND        ...): " + aqExcep.Message);
				}
			}

			private static void datasetGetTeamByIdReadDB(ref RCTeamCurriculumLeadRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENCurriculumLead.Read(r, ref index);
				rec.ssENTeam.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetTeamById" of Action "Preparation"
			/// </summary>
			public static RLTeamCurriculumLeadRecordList datasetGetTeamById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, string qpstP1) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query 9Zih8saCskmKKbjAq5Oi5Q Iterations: Multiple {-unbound-}
				// Refresh Query 2g5DyjRIb0qGVH__b5lHow Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, ENTeam.[ID] o6, NULL o7, ENTeam.[DESCRIPTION] o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM ({Team} ENTeam Left JOIN {CurriculumLead} ENCurriculumLead ON (ENTeam.[CURRICULUMLEAD] = ENCurriculumLead.[ID])) ");
				if (qpinP != BuiltInFunction.NullIdentifier() || qpstP1 != BuiltInFunction.NullTextIdentifier()) {
					whereBuilder.Append(" WHERE ");
					if (qpinP != BuiltInFunction.NullIdentifier()) {
						if (qpinP != 0) {
							whereBuilder.Append("((ENTeam.[CURRICULUMLEAD] = @qpinP) AND (ENTeam.[CURRICULUMLEAD] IS NOT NULL))");
							sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
						} else {
							whereBuilder.Append("(ENTeam.[CURRICULUMLEAD] IS NULL)");
						}
						whereBuilder.Append(" AND ");
					}
					if (qpstP1 != BuiltInFunction.NullTextIdentifier()) {
						if (qpstP1.Trim() != "") {
							whereBuilder.Append("((ENCurriculumLead.[CLUSTER] = @qpstP1) AND (ENCurriculumLead.[CLUSTER] IS NOT NULL))");
							sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
						} else {
							whereBuilder.Append("(ENCurriculumLead.[CLUSTER] IS NULL)");
						}
					}
				}
				string whereBuilderString = whereBuilder.ToString();
				if (whereBuilderString.EndsWith(" AND ")) {
					whereBuilder.Remove(whereBuilderString.Length - 5, 5);
				}
				orderByBuilder.Append(" ORDER BY ENTeam.[TEAMCODE] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLTeamCurriculumLeadRecordList outParamList = new RLTeamCurriculumLeadRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetTeamByIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLTeamCurriculumLeadRecordList _tmp = new RLTeamCurriculumLeadRecordList();
					_tmp.AlternateReadDBMethod = datasetGetTeamByIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.Preparation.GetTeamById.List");
						outParamList = (RLTeamCurriculumLeadRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetTeamById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLTeamCurriculumLeadRecordList _tmp = new RLTeamCurriculumLeadRecordList();
						_tmp.AlternateReadDBMethod = datasetGetTeamByIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.Preparation.GetTeamById.List");
							outParamList = (RLTeamCurriculumLeadRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetTeamById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetClusters" of Action "Preparation"
			/// </summary>
			public static RLClusterRecordList datasetGetClusters(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCluster.[ID] o1, NULL o2, ENCluster.[CLUSTERDESCRIPTION] o3, NULL o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {Cluster} ENCluster");
				orderByBuilder.Append(" ORDER BY ENCluster.[ORDER] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLClusterRecordList outParamList = new RLClusterRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLClusterRecordList _tmp = new RLClusterRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.Preparation.GetClusters.List");
						outParamList = (RLClusterRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetClusters.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLClusterRecordList _tmp = new RLClusterRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.CourseList.Preparation.GetClusters.List");
							outParamList = (RLClusterRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.CourseList.Preparation.GetClusters.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "CourseList"; ssCourseListListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CourseList", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CourseList", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetCurriculumLeadById_outParamList.

			int tmpcurrentrownumberqueryResGetCurriculumLeadById_outParamList = queryResGetCurriculumLeadById_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCurriculumLeadById_outParamList = queryResGetCurriculumLeadById_outParamList.Eof;
			ArrayList storequeryResGetCurriculumLeadById_outParamList = new ArrayList();

			// Write the needed fields of queryResGetCurriculumLeadById_outParamList to the storequeryResGetCurriculumLeadById_outParamList
			if (!queryResGetCurriculumLeadById_outParamList.Empty) {
				try {
					queryResGetCurriculumLeadById_outParamList.StartIteration();

					while (!queryResGetCurriculumLeadById_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetCurriculumLeadById_outParamList = new ArrayList();
						tmpFieldsqueryResGetCurriculumLeadById_outParamList.Add(queryResGetCurriculumLeadById_outParamList.CurrentRec.ssENCurriculumLead.ssId == 0?(object) null: queryResGetCurriculumLeadById_outParamList.CurrentRec.ssENCurriculumLead.ssId);
						tmpFieldsqueryResGetCurriculumLeadById_outParamList.Add(queryResGetCurriculumLeadById_outParamList.CurrentRec.ssENCurriculumLead.ssDescription == "" ?(object) null: queryResGetCurriculumLeadById_outParamList.CurrentRec.ssENCurriculumLead.ssDescription);
						tmpFieldsqueryResGetCurriculumLeadById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetCurriculumLeadById_outParamList.CurrentRec.ssENCurriculumLead.ChangedAttributes, new BitArray(new bool[] {
							true, false, true, false, false
						}
						))));
						tmpFieldsqueryResGetCurriculumLeadById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetCurriculumLeadById_outParamList.CurrentRec.ssENCurriculumLead.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false, true, true
						}
						))));
						storequeryResGetCurriculumLeadById_outParamList.Add(tmpFieldsqueryResGetCurriculumLeadById_outParamList);
						queryResGetCurriculumLeadById_outParamList.Advance();
					}
				} finally {
					queryResGetCurriculumLeadById_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetCurriculumLeadById_outParamList", storequeryResGetCurriculumLeadById_outParamList, null);

			#endregion


			#region store queryResGetCurriculumLeadById_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetCurriculumLeadById_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCurriculumLeadById_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCurriculumLeadById_outParamList_eof", tmpeofqueryResGetCurriculumLeadById_outParamList, false);
			queryResGetCurriculumLeadById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCurriculumLeadById_outParamList, tmpeofqueryResGetCurriculumLeadById_outParamList);

			#endregion


			#region store queryResGetSiteList_outParamList.

			int tmpcurrentrownumberqueryResGetSiteList_outParamList = queryResGetSiteList_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetSiteList_outParamList = queryResGetSiteList_outParamList.Eof;
			ArrayList storequeryResGetSiteList_outParamList = new ArrayList();

			// Write the needed fields of queryResGetSiteList_outParamList to the storequeryResGetSiteList_outParamList
			if (!queryResGetSiteList_outParamList.Empty) {
				try {
					queryResGetSiteList_outParamList.StartIteration();

					while (!queryResGetSiteList_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetSiteList_outParamList = new ArrayList();
						tmpFieldsqueryResGetSiteList_outParamList.Add(queryResGetSiteList_outParamList.CurrentRec.ssSTString.ssValue == "" ?(object) null: queryResGetSiteList_outParamList.CurrentRec.ssSTString.ssValue);
						storequeryResGetSiteList_outParamList.Add(tmpFieldsqueryResGetSiteList_outParamList);
						queryResGetSiteList_outParamList.Advance();
					}
				} finally {
					queryResGetSiteList_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetSiteList_outParamList", storequeryResGetSiteList_outParamList, null);

			#endregion


			#region store queryResGetSiteList_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetSiteList_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetSiteList_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetSiteList_outParamList_eof", tmpeofqueryResGetSiteList_outParamList, false);
			queryResGetSiteList_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSiteList_outParamList, tmpeofqueryResGetSiteList_outParamList);

			#endregion


			#region store queryResGetTeamById_outParamList.

			int tmpcurrentrownumberqueryResGetTeamById_outParamList = queryResGetTeamById_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetTeamById_outParamList = queryResGetTeamById_outParamList.Eof;
			ArrayList storequeryResGetTeamById_outParamList = new ArrayList();

			// Write the needed fields of queryResGetTeamById_outParamList to the storequeryResGetTeamById_outParamList
			if (!queryResGetTeamById_outParamList.Empty) {
				try {
					queryResGetTeamById_outParamList.StartIteration();

					while (!queryResGetTeamById_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetTeamById_outParamList = new ArrayList();
						tmpFieldsqueryResGetTeamById_outParamList.Add(queryResGetTeamById_outParamList.CurrentRec.ssENTeam.ssId == 0?(object) null: queryResGetTeamById_outParamList.CurrentRec.ssENTeam.ssId);
						tmpFieldsqueryResGetTeamById_outParamList.Add(queryResGetTeamById_outParamList.CurrentRec.ssENTeam.ssDescription == "" ?(object) null: queryResGetTeamById_outParamList.CurrentRec.ssENTeam.ssDescription);
						tmpFieldsqueryResGetTeamById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetTeamById_outParamList.CurrentRec.ssENTeam.ChangedAttributes, new BitArray(new bool[] {
							true, false, true, false, false
						}
						))));
						tmpFieldsqueryResGetTeamById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetTeamById_outParamList.CurrentRec.ssENTeam.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false, true, true
						}
						))));
						storequeryResGetTeamById_outParamList.Add(tmpFieldsqueryResGetTeamById_outParamList);
						queryResGetTeamById_outParamList.Advance();
					}
				} finally {
					queryResGetTeamById_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetTeamById_outParamList", storequeryResGetTeamById_outParamList, null);

			#endregion


			#region store queryResGetTeamById_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetTeamById_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetTeamById_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetTeamById_outParamList_eof", tmpeofqueryResGetTeamById_outParamList, false);
			queryResGetTeamById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetTeamById_outParamList, tmpeofqueryResGetTeamById_outParamList);

			#endregion


			#region store queryResGetClusters_outParamList.

			int tmpcurrentrownumberqueryResGetClusters_outParamList = queryResGetClusters_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetClusters_outParamList = queryResGetClusters_outParamList.Eof;
			ArrayList storequeryResGetClusters_outParamList = new ArrayList();

			// Write the needed fields of queryResGetClusters_outParamList to the storequeryResGetClusters_outParamList
			if (!queryResGetClusters_outParamList.Empty) {
				try {
					queryResGetClusters_outParamList.StartIteration();

					while (!queryResGetClusters_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetClusters_outParamList = new ArrayList();
						tmpFieldsqueryResGetClusters_outParamList.Add(queryResGetClusters_outParamList.CurrentRec.ssENCluster.ssId == "" ?(object) null: queryResGetClusters_outParamList.CurrentRec.ssENCluster.ssId);
						tmpFieldsqueryResGetClusters_outParamList.Add(queryResGetClusters_outParamList.CurrentRec.ssENCluster.ssClusterDescription == "" ?(object) null: queryResGetClusters_outParamList.CurrentRec.ssENCluster.ssClusterDescription);
						tmpFieldsqueryResGetClusters_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetClusters_outParamList.CurrentRec.ssENCluster.ChangedAttributes, new BitArray(new bool[] {
							true, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetClusters_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetClusters_outParamList.CurrentRec.ssENCluster.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false, true, true, true, true
						}
						))));
						storequeryResGetClusters_outParamList.Add(tmpFieldsqueryResGetClusters_outParamList);
						queryResGetClusters_outParamList.Advance();
					}
				} finally {
					queryResGetClusters_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetClusters_outParamList", storequeryResGetClusters_outParamList, null);

			#endregion


			#region store queryResGetClusters_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetClusters_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetClusters_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetClusters_outParamList_eof", tmpeofqueryResGetClusters_outParamList, false);
			queryResGetClusters_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetClusters_outParamList, tmpeofqueryResGetClusters_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("varLcOfferingCodeSElected", varLcOfferingCodeSElected, "");
			ViewStateAttributes.SetInViewState("varLcIncludeClassGroups", varLcIncludeClassGroups, false);
			ViewStateAttributes.SetInViewState("varLcURL", varLcURL, "");
			ViewStateAttributes.SetInViewState("wt_Input55_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input55")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_ComboBox87_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox87")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_ComboBox42_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox42")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_ComboBox35_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox35")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_ComboBox94_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox94")).Mandatory, false);
			if (IsAjaxRequest) {
				recListCourseList_Rebuild((ssCourseListListDataBound ? wtCourseList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtCourseList.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtCourseList_list", wtCourseList_storage, null);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetCurriculumLeadById_outParamList.

				// Read the needed fields of queryResGetCurriculumLeadById_outParamList from storequeryResGetCurriculumLeadById_outParamList
				queryResGetCurriculumLeadById_outParamList = new RLCurriculumLeadRecordList();
				ArrayList storequeryResGetCurriculumLeadById_outParamList;
				storequeryResGetCurriculumLeadById_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetCurriculumLeadById_outParamList", null);
				if (storequeryResGetCurriculumLeadById_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetCurriculumLeadById_outParamList in storequeryResGetCurriculumLeadById_outParamList) {
						if (tmpFieldsqueryResGetCurriculumLeadById_outParamList != null) {
							// Aux current record variable
							RCCurriculumLeadRecord tmpAuxCurrentRecordqueryResGetCurriculumLeadById_outParamList = new RCCurriculumLeadRecord(null);
							tmpAuxCurrentRecordqueryResGetCurriculumLeadById_outParamList.ssENCurriculumLead.ssId = (int) (tmpFieldsqueryResGetCurriculumLeadById_outParamList[0] == null ? 0: tmpFieldsqueryResGetCurriculumLeadById_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetCurriculumLeadById_outParamList.ssENCurriculumLead.ssDescription = (string) (tmpFieldsqueryResGetCurriculumLeadById_outParamList[1] == null ? "": tmpFieldsqueryResGetCurriculumLeadById_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetCurriculumLeadById_outParamList.ssENCurriculumLead.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCurriculumLeadById_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetCurriculumLeadById_outParamList.ssENCurriculumLead.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCurriculumLeadById_outParamList[3]);

							queryResGetCurriculumLeadById_outParamList.Append(tmpAuxCurrentRecordqueryResGetCurriculumLeadById_outParamList);
						}
					}
				}
				queryResGetCurriculumLeadById_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetCurriculumLeadById_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetCurriculumLeadById_outParamList;
				tmpcurrentrownumberqueryResGetCurriculumLeadById_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCurriculumLeadById_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCurriculumLeadById_outParamList;
				tmpeofqueryResGetCurriculumLeadById_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCurriculumLeadById_outParamList_eof", false);
				queryResGetCurriculumLeadById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCurriculumLeadById_outParamList, tmpeofqueryResGetCurriculumLeadById_outParamList);

				#endregion


				#region fetch queryResGetSiteList_outParamList.

				// Read the needed fields of queryResGetSiteList_outParamList from storequeryResGetSiteList_outParamList
				queryResGetSiteList_outParamList = new RLStringRecordList();
				ArrayList storequeryResGetSiteList_outParamList;
				storequeryResGetSiteList_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetSiteList_outParamList", null);
				if (storequeryResGetSiteList_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetSiteList_outParamList in storequeryResGetSiteList_outParamList) {
						if (tmpFieldsqueryResGetSiteList_outParamList != null) {
							// Aux current record variable
							RCStringRecord tmpAuxCurrentRecordqueryResGetSiteList_outParamList = new RCStringRecord(null);
							tmpAuxCurrentRecordqueryResGetSiteList_outParamList.ssSTString.ssValue = (string) (tmpFieldsqueryResGetSiteList_outParamList[0] == null ? "": tmpFieldsqueryResGetSiteList_outParamList[0]);

							queryResGetSiteList_outParamList.Append(tmpAuxCurrentRecordqueryResGetSiteList_outParamList);
						}
					}
				}
				queryResGetSiteList_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetSiteList_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetSiteList_outParamList;
				tmpcurrentrownumberqueryResGetSiteList_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetSiteList_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetSiteList_outParamList;
				tmpeofqueryResGetSiteList_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetSiteList_outParamList_eof", false);
				queryResGetSiteList_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSiteList_outParamList, tmpeofqueryResGetSiteList_outParamList);

				#endregion


				#region fetch queryResGetTeamById_outParamList.

				// Read the needed fields of queryResGetTeamById_outParamList from storequeryResGetTeamById_outParamList
				queryResGetTeamById_outParamList = new RLTeamCurriculumLeadRecordList();
				ArrayList storequeryResGetTeamById_outParamList;
				storequeryResGetTeamById_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetTeamById_outParamList", null);
				if (storequeryResGetTeamById_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetTeamById_outParamList in storequeryResGetTeamById_outParamList) {
						if (tmpFieldsqueryResGetTeamById_outParamList != null) {
							// Aux current record variable
							RCTeamCurriculumLeadRecord tmpAuxCurrentRecordqueryResGetTeamById_outParamList = new RCTeamCurriculumLeadRecord(null);
							tmpAuxCurrentRecordqueryResGetTeamById_outParamList.ssENTeam.ssId = (int) (tmpFieldsqueryResGetTeamById_outParamList[0] == null ? 0: tmpFieldsqueryResGetTeamById_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetTeamById_outParamList.ssENTeam.ssDescription = (string) (tmpFieldsqueryResGetTeamById_outParamList[1] == null ? "": tmpFieldsqueryResGetTeamById_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetTeamById_outParamList.ssENTeam.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetTeamById_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetTeamById_outParamList.ssENTeam.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetTeamById_outParamList[3]);

							queryResGetTeamById_outParamList.Append(tmpAuxCurrentRecordqueryResGetTeamById_outParamList);
						}
					}
				}
				queryResGetTeamById_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetTeamById_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetTeamById_outParamList;
				tmpcurrentrownumberqueryResGetTeamById_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetTeamById_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetTeamById_outParamList;
				tmpeofqueryResGetTeamById_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetTeamById_outParamList_eof", false);
				queryResGetTeamById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetTeamById_outParamList, tmpeofqueryResGetTeamById_outParamList);

				#endregion


				#region fetch queryResGetClusters_outParamList.

				// Read the needed fields of queryResGetClusters_outParamList from storequeryResGetClusters_outParamList
				queryResGetClusters_outParamList = new RLClusterRecordList();
				ArrayList storequeryResGetClusters_outParamList;
				storequeryResGetClusters_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetClusters_outParamList", null);
				if (storequeryResGetClusters_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetClusters_outParamList in storequeryResGetClusters_outParamList) {
						if (tmpFieldsqueryResGetClusters_outParamList != null) {
							// Aux current record variable
							RCClusterRecord tmpAuxCurrentRecordqueryResGetClusters_outParamList = new RCClusterRecord(null);
							tmpAuxCurrentRecordqueryResGetClusters_outParamList.ssENCluster.ssId = (string) (tmpFieldsqueryResGetClusters_outParamList[0] == null ? "": tmpFieldsqueryResGetClusters_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetClusters_outParamList.ssENCluster.ssClusterDescription = (string) (tmpFieldsqueryResGetClusters_outParamList[1] == null ? "": tmpFieldsqueryResGetClusters_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetClusters_outParamList.ssENCluster.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetClusters_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetClusters_outParamList.ssENCluster.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetClusters_outParamList[3]);

							queryResGetClusters_outParamList.Append(tmpAuxCurrentRecordqueryResGetClusters_outParamList);
						}
					}
				}
				queryResGetClusters_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetClusters_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetClusters_outParamList;
				tmpcurrentrownumberqueryResGetClusters_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetClusters_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetClusters_outParamList;
				tmpeofqueryResGetClusters_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetClusters_outParamList_eof", false);
				queryResGetClusters_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetClusters_outParamList, tmpeofqueryResGetClusters_outParamList);

				#endregion

				varLcOfferingCodeSElected = (string) ViewStateAttributes.GetFromViewState("varLcOfferingCodeSElected", "");
				varLcIncludeClassGroups = (bool) ViewStateAttributes.GetFromViewState("varLcIncludeClassGroups", false);
				varLcURL = (string) ViewStateAttributes.GetFromViewState("varLcURL", "");
				((IWidgetRuntimeProperties) this.FindControl("wt_Input55")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input55_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox87")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox87_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox42")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox42_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox35")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox35_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox94")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox94_Mandatory", false);
				recListCourseList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wt_Input55", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox87", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox42", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox35", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox94", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(FindControl("wtCourseList"), "wt_ComboBox58", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
