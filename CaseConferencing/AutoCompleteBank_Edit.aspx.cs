/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowBackofficeFlow {

	public class ScrnAutoCompleteBank_Edit: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnAutoCompleteBank_Edit(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamAutoCompleteBankId. Description:
		/// </summary>
		public int inParamAutoCompleteBankId = 0;
		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance1
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance1;
		/// <summary>
		/// Variable "True" if the Widget wt_If4
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If4T;

		/// <summary>
		/// Variable "True" if the Widget wt_If4
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If4F;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCAutoComplete_BankRecord ssAutoCompleteBankEditRecord = new RCAutoComplete_BankRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtAutoCompleteBankEdit_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtAutoCompleteBank_TypeId") &&
			ValidationUtils.IsValid(this, "wtAutoCompleteBank_Category_1") &&
			ValidationUtils.IsValid(this, "wtAutoCompleteBank_Category_2") &&
			ValidationUtils.IsValid(this, "wtAutoCompleteBank_Category_3") &&
			ValidationUtils.IsValid(this, "wtAutoCompleteBank_Category_4") &&
			ValidationUtils.IsValid(this, "wtAutoCompleteBank_Description");
			return res;
		}

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtAutoCompleteBank_TypeIdValidatorRequired;
		protected SelectRtWidget Rt_wtAutoCompleteBank_TypeId = new SelectRtWidget();
		RLAutoCompleteBankTypeRecordList Rt_wtAutoCompleteBank_TypeId_reclist = null;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtAutoCompleteBank_Category_1ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtAutoCompleteBank_Category_1ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtAutoCompleteBank_Category_2ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtAutoCompleteBank_Category_2ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtAutoCompleteBank_Category_3ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtAutoCompleteBank_Category_3ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtAutoCompleteBank_Category_4ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtAutoCompleteBank_Category_4ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtAutoCompleteBank_DescriptionValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtAutoCompleteBank_DescriptionValidatorType;
		/// <summary>
		/// Variable (wt_Button30) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button30;
		/// <summary>
		/// Variable (wt_Button50) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button50;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("RAOGIQQ8CkCkslbdj0Gp1g", "AutoCompleteBank_Edit");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "RAOGIQQ8CkCkslbdj0Gp1g", "AutoCompleteBank_Edit");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "RAOGIQQ8CkCkslbdj0Gp1g", "AutoCompleteBank_Edit");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "RAOGIQQ8CkCkslbdj0Gp1g", "AutoCompleteBank_Edit");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "RAOGIQQ8CkCkslbdj0Gp1g", "AutoCompleteBank_Edit");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnAutoCompleteBank_Edit() {
			htTabIndexGroups["wt_Text43"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wtAutoCompleteBank_TypeId"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wt_Text38"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wtAutoCompleteBank_Category_1"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wt_Text44"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wtAutoCompleteBank_Category_2"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wt_Text41"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wtAutoCompleteBank_Category_3"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wt_Text12"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wtAutoCompleteBank_Category_4"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wt_Text14"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wtAutoCompleteBank_Description"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wt_Button30"] = "wtAutoCompleteBankEdit-1";
			htTabIndexGroups["wt_Button50"] = "wtAutoCompleteBankEdit-1";
		}


		RLAutoComplete_BankRecordList queryResGetAutoCompleteBankById_outParamList = new RLAutoComplete_BankRecordList();
		int queryResGetAutoCompleteBankById_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetAutoCompleteBankById
			int datasetGetAutoCompleteBankById_maxRecords = 1;
			if (datasetGetAutoCompleteBankById_maxRecords < 1) datasetGetAutoCompleteBankById_maxRecords = 1;
			queryResGetAutoCompleteBankById_outParamList = FuncssPreparation.datasetGetAutoCompleteBankById(heContext, datasetGetAutoCompleteBankById_maxRecords, IterationMultiplicity.Never, out queryResGetAutoCompleteBankById_outParamCount, inParamAutoCompleteBankId
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamAutoCompleteBankId!=0)) {
				parameters.Add(new Pair<string, string>("AutoCompleteBankId", HttpUtility.UrlEncode(Convert.ToString(inParamAutoCompleteBankId), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "AutoCompleteBank_Edit", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "AutoCompleteBank_Edit", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance1 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance1");
			wt_Button30 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button30");
			if (this.wt_Button30 != null) {
				this.wt_Button30.Click += new System.EventHandler(this.wt_Button30_Click);
			}
			wt_Button50 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button50");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance20") {
				return ThemeProvider_wt_WebBlockInstance1.wtHelpUpdate.FindControl("wt_WebBlockInstance20");
			}
			if (id == "ThemeProvider_wt_WebBlockInstance29") {
				return ThemeProvider_wt_WebBlockInstance1.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance29");
			}
			if (id == "wt_If4") {
				return ThemeProvider_wt_WebBlockInstance1.wtTitle.FindControl("wt_If4");
			}
			if (id == "wt_If4T") {
				return ThemeProvider_wt_WebBlockInstance1.wtTitle.FindControl("wt_If4T");
			}
			if (id == "wt_Text49") {
				return ThemeProvider_wt_WebBlockInstance1.wtTitle.FindControl("wt_Text49");
			}
			if (id == "wt_If4F") {
				return ThemeProvider_wt_WebBlockInstance1.wtTitle.FindControl("wt_If4F");
			}
			if (id == "wt_Text46") {
				return ThemeProvider_wt_WebBlockInstance1.wtTitle.FindControl("wt_Text46");
			}
			if (id == "wt_InlineExpression36") {
				return ThemeProvider_wt_WebBlockInstance1.wtTitle.FindControl("wt_InlineExpression36");
			}
			if (id == "wt_Text37") {
				return ThemeProvider_wt_WebBlockInstance1.wtTitle.FindControl("wt_Text37");
			}
			if (id == "wtAutoCompleteBankEdit") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wtAutoCompleteBankEdit");
			}
			if (id == "wt_EditRecordRow2") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordRow2");
			}
			if (id == "wt_EditRecordCell33") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell33");
			}
			if (id == "wt_Text43") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_Text43");
			}
			if (id == "wt_EditRecordCell3") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell3");
			}
			if (id == "wtAutoCompleteBank_TypeId") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wtAutoCompleteBank_TypeId");
			}
			if (id == "wt_EditRecordRow27") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordRow27");
			}
			if (id == "wt_EditRecordCell47") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell47");
			}
			if (id == "wt_Text38") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_Text38");
			}
			if (id == "wt_EditRecordCell24") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell24");
			}
			if (id == "wtAutoCompleteBank_Category_1") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wtAutoCompleteBank_Category_1");
			}
			if (id == "wt_EditRecordRow16") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordRow16");
			}
			if (id == "wt_EditRecordCell8") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell8");
			}
			if (id == "wt_Text44") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_Text44");
			}
			if (id == "wt_EditRecordCell10") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell10");
			}
			if (id == "wtAutoCompleteBank_Category_2") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wtAutoCompleteBank_Category_2");
			}
			if (id == "wt_EditRecordRow23") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordRow23");
			}
			if (id == "wt_EditRecordCell51") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell51");
			}
			if (id == "wt_Text41") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_Text41");
			}
			if (id == "wt_EditRecordCell34") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell34");
			}
			if (id == "wtAutoCompleteBank_Category_3") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wtAutoCompleteBank_Category_3");
			}
			if (id == "wt_EditRecordRow9") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordRow9");
			}
			if (id == "wt_EditRecordCell18") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell18");
			}
			if (id == "wt_Text12") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_Text12");
			}
			if (id == "wt_EditRecordCell26") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell26");
			}
			if (id == "wtAutoCompleteBank_Category_4") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wtAutoCompleteBank_Category_4");
			}
			if (id == "wt_EditRecordRow40") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordRow40");
			}
			if (id == "wt_EditRecordCell42") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell42");
			}
			if (id == "wt_Text14") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_Text14");
			}
			if (id == "wt_EditRecordCell21") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell21");
			}
			if (id == "wtAutoCompleteBank_Description") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wtAutoCompleteBank_Description");
			}
			if (id == "wt_EditRecordRow6") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordRow6");
			}
			if (id == "wt_EditRecordCell39") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell39");
			}
			if (id == "wt_EditRecordCell31") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_EditRecordCell31");
			}
			if (id == "wt_Button30") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_Button30");
			}
			if (id == "wt_Button50") {
				return ThemeProvider_wt_WebBlockInstance1.wtMainContent.FindControl("wt_Button50");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_AutoCompleteBank_Edit"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamAutoCompleteBankId = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_AutoCompleteBank_Edit"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["AutoCompleteBankId"] != null) {
						inParamAutoCompleteBankId = Convert.ToInt32(Request.QueryString["AutoCompleteBankId"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["AutoCompleteBankId"] != null) {
						inParamAutoCompleteBankId = Convert.ToInt32(Request.Form["AutoCompleteBankId"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtAutoCompleteBankEdit_onDataBindingDataSource(this.FindControl("wtAutoCompleteBankEdit"), null);
				}
				Title = (((queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssId==BuiltInFunction.NullIdentifier())) ?("New Auto Complete Bank"):((("Edit \'" +queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_1) + "\'"))); Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "AutoCompleteBank_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button30 = wt_Button30 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button30");
			} catch {}
			string jsString = (wt_Button30 != null) ? "return OsEnterKey('" +wt_Button30.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowBackofficeFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotSLA("SLA role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("RAOGIQQ8CkCkslbdj0Gp1g"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvSave: VarsBag {
			public int resCreateOrUpdateAutoComplete_Bank_outParamId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				// Valid
				if (wtAutoCompleteBankEdit_Valid()) {
					// CreateOrUpdateAutoComplete_Bank
					ExtendedActions.CreateOrUpdateAutoComplete_Bank(heContext, ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ChangedAttributes, ((RCAutoComplete_BankRecord) ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank), out localVars.resCreateOrUpdateAutoComplete_Bank_outParamId);
					// Feedback_Message
					Actions.ActionFeedback_Message(heContext, ((("Auto Complete Bank \'" +ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_1) + "\' was successfully ") + (((ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssId==BuiltInFunction.NullIdentifier())) ?("created."):("updated."))), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
					// Destination = AutoCompleteBank_List

					if (OSPage.IsAjaxRequest) {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "JbfuDwgzI0W6M314dPCYdA";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_AutoCompleteBank_List"] = screenParameters;
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "AutoCompleteBank_List.aspx" + sURLQuery;
							((OSPageViewState) Page).RedirectLocation = sURL;
							return false;

						}
					} else {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "JbfuDwgzI0W6M314dPCYdA";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_AutoCompleteBank_List"] = screenParameters;
							Server.Transfer("AutoCompleteBank_List.aspx");
							return false;

						}
					}

				} else {
					// Refresh Widget (wtAutoCompleteBankEdit)
					((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtAutoCompleteBankEdit"), "None", StoreViewState);
					// Input_FocusFirstInvalid
					Actions.ActionInput_FocusFirstInvalid(heContext);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance1 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance1_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance20 Functions
		/// </summary>
		public void webBlck_WebBlockInstance20_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate widget = (ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance29 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance29_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("kQJpaGRLYkWSr3OLG+G8mw")).ssId;
		}
		/// <summary>
		/// wt_If4 Functions
		/// </summary>
		bool if_wt_If4_hasRun=false;
		bool if_wt_If4_evalResult;
		public bool if_wt_If4() {
			if (if_wt_If4_hasRun) {
				if_wt_If4_hasRun = false;
				return if_wt_If4_evalResult;
			}
			if_wt_If4_hasRun = true;
			if_wt_If4_evalResult = (queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssId==BuiltInFunction.NullIdentifier());
			return if_wt_If4_evalResult;
		}

		/// <summary>
		/// wt_InlineExpression36 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = OvFrriHAvUKaFlfWT5V60A) Expression:
		///  GetAutoCompleteBankById.List.Current.AutoComplete_Bank.Category_1
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression36() {
			return queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_1;
		}
		/// <summary>
		/// wtAutoCompleteBankEdit Functions
		/// </summary>
		public void wtAutoCompleteBankEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack) {
				ssAutoCompleteBankEditRecord = queryResGetAutoCompleteBankById_outParamList.CurrentRec;
			}
		}
		/// <summary>
		/// wtAutoCompleteBank_TypeId Functions
		/// </summary>
		public void selAutoCompleteBank_TypeId_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtAutoCompleteBank_TypeId_reclist == null) {
				using(Transaction wtAutoCompleteBank_TypeId_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtAutoCompleteBank_TypeId_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENAutoCompleteBankTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtAutoCompleteBank_TypeId_sqlCmd = wtAutoCompleteBank_TypeId_trans.CreateCommand(wtAutoCompleteBank_TypeId_sql);
					Rt_wtAutoCompleteBank_TypeId_sqlCmd.CreateParameter("@Selection", ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssTypeId);
					Rt_wtAutoCompleteBank_TypeId_sqlCmd.TransformParametersSyntax();
					Rt_wtAutoCompleteBank_TypeId_reclist = new RLAutoCompleteBankTypeRecordList();
					Rt_wtAutoCompleteBank_TypeId_reclist.Transaction = wtAutoCompleteBank_TypeId_trans;
					Rt_wtAutoCompleteBank_TypeId_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(4, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtAutoCompleteBank_TypeId_sqlCmd, Rt_wtAutoCompleteBank_TypeId_reclist, "WebSelectWidget load operation");
					Rt_wtAutoCompleteBank_TypeId_reclist = (RLAutoCompleteBankTypeRecordList) Rt_wtAutoCompleteBank_TypeId_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtAutoCompleteBank_TypeId.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtAutoCompleteBank_TypeId_reclist.StartIteration();
			try {
				while (!Rt_wtAutoCompleteBank_TypeId_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtAutoCompleteBank_TypeId_reclist.CurrentRec.ssENAutoCompleteBankType.ssLabel, Convert.ToString(Rt_wtAutoCompleteBank_TypeId_reclist.CurrentRec.ssENAutoCompleteBankType.ssId)));
					if (ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssTypeId == Convert.ToInt32(Convert.ToString(Rt_wtAutoCompleteBank_TypeId_reclist.CurrentRec.ssENAutoCompleteBankType.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtAutoCompleteBank_TypeId_reclist.Advance();
				}
			} finally {
				Rt_wtAutoCompleteBank_TypeId_reclist.EndIteration();
			}
		}
		public void selAutoCompleteBank_TypeId_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtAutoCompleteBank_TypeId.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssTypeId = 0;
			}
			else {
				Rt_wtAutoCompleteBank_TypeId.SpecialListVal = "";
				try {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssTypeId = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtAutoCompleteBank_TypeId)
		/// </summary>
		/// <returns>The Visible State of wtAutoCompleteBank_TypeId</returns>
		public bool selAutoCompleteBank_TypeId_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtAutoCompleteBank_TypeId)
		/// </summary>
		/// <returns>The Enabled State of wtAutoCompleteBank_TypeId</returns>
		public bool selAutoCompleteBank_TypeId_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selAutoCompleteBank_TypeId)
		/// </summary>
		/// <returns>The Mandatory Value of selAutoCompleteBank_TypeId</returns>
		public bool selAutoCompleteBank_TypeId_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtAutoCompleteBank_Category_1 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtAutoCompleteBank_Category_1_input_value() {
			if (("" !=ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_1)) {
				return ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_1;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtAutoCompleteBank_Category_1");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_1;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtAutoCompleteBank_Category_1_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_1 = ""; 
				} else {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_1 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_1 = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtAutoCompleteBank_Category_1)
		/// </summary>
		/// <returns>The Visible State of wtAutoCompleteBank_Category_1</returns>
		public bool inputwtAutoCompleteBank_Category_1_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtAutoCompleteBank_Category_1)
		/// </summary>
		/// <returns>The Enabled State of wtAutoCompleteBank_Category_1</returns>
		public bool inputwtAutoCompleteBank_Category_1_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtAutoCompleteBank_Category_1)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtAutoCompleteBank_Category_1</returns>
		public bool inputwtAutoCompleteBank_Category_1_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtAutoCompleteBank_Category_2 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtAutoCompleteBank_Category_2_input_value() {
			if (("" !=ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_2)) {
				return ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_2;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtAutoCompleteBank_Category_2");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_2;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtAutoCompleteBank_Category_2_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_2 = ""; 
				} else {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_2 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_2 = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtAutoCompleteBank_Category_2)
		/// </summary>
		/// <returns>The Visible State of wtAutoCompleteBank_Category_2</returns>
		public bool inputwtAutoCompleteBank_Category_2_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtAutoCompleteBank_Category_2)
		/// </summary>
		/// <returns>The Enabled State of wtAutoCompleteBank_Category_2</returns>
		public bool inputwtAutoCompleteBank_Category_2_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtAutoCompleteBank_Category_2)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtAutoCompleteBank_Category_2</returns>
		public bool inputwtAutoCompleteBank_Category_2_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtAutoCompleteBank_Category_3 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtAutoCompleteBank_Category_3_input_value() {
			if (("" !=ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_3)) {
				return ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_3;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtAutoCompleteBank_Category_3");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_3;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtAutoCompleteBank_Category_3_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_3 = ""; 
				} else {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_3 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_3 = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtAutoCompleteBank_Category_3)
		/// </summary>
		/// <returns>The Visible State of wtAutoCompleteBank_Category_3</returns>
		public bool inputwtAutoCompleteBank_Category_3_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtAutoCompleteBank_Category_3)
		/// </summary>
		/// <returns>The Enabled State of wtAutoCompleteBank_Category_3</returns>
		public bool inputwtAutoCompleteBank_Category_3_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtAutoCompleteBank_Category_3)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtAutoCompleteBank_Category_3</returns>
		public bool inputwtAutoCompleteBank_Category_3_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtAutoCompleteBank_Category_4 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtAutoCompleteBank_Category_4_input_value() {
			if (("" !=ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_4)) {
				return ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_4;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtAutoCompleteBank_Category_4");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_4;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtAutoCompleteBank_Category_4_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_4 = ""; 
				} else {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_4 = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_4 = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtAutoCompleteBank_Category_4)
		/// </summary>
		/// <returns>The Visible State of wtAutoCompleteBank_Category_4</returns>
		public bool inputwtAutoCompleteBank_Category_4_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtAutoCompleteBank_Category_4)
		/// </summary>
		/// <returns>The Enabled State of wtAutoCompleteBank_Category_4</returns>
		public bool inputwtAutoCompleteBank_Category_4_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtAutoCompleteBank_Category_4)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtAutoCompleteBank_Category_4</returns>
		public bool inputwtAutoCompleteBank_Category_4_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtAutoCompleteBank_Description Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtAutoCompleteBank_Description_input_value() {
			if (("" !=ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssDescription)) {
				return ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssDescription;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtAutoCompleteBank_Description");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssDescription;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtAutoCompleteBank_Description_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssDescription = ""; 
				} else {
					ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssDescription = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssDescription = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtAutoCompleteBank_Description)
		/// </summary>
		/// <returns>The Visible State of wtAutoCompleteBank_Description</returns>
		public bool inputwtAutoCompleteBank_Description_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtAutoCompleteBank_Description)
		/// </summary>
		/// <returns>The Enabled State of wtAutoCompleteBank_Description</returns>
		public bool inputwtAutoCompleteBank_Description_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtAutoCompleteBank_Description)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtAutoCompleteBank_Description</returns>
		public bool inputwtAutoCompleteBank_Description_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Button30 Functions
		/// </summary>
		public void btn_Button30_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button30_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandSave(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button30)
		/// </summary>
		/// <returns>Label of the Button (wt_Button30)</returns>
		public string
		btn_Button30_getLabel() {
			return "Save";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button30)
		/// </summary>
		/// <returns>The Visible State of wt_Button30</returns>
		public bool btn_Button30_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button30)
		/// </summary>
		/// <returns>The Enabled State of wt_Button30</returns>
		public bool btn_Button30_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button50 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Button50)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Button50)</returns>
		public string btn_Button50_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "AutoCompleteBank_List", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the label of the button (wt_Button50)
		/// </summary>
		/// <returns>Label of the Button (wt_Button50)</returns>
		public string
		btn_Button50_getLabel() {
			return "Cancel";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button50)
		/// </summary>
		/// <returns>The Visible State of wt_Button50</returns>
		public bool btn_Button50_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button50)
		/// </summary>
		/// <returns>The Enabled State of wt_Button50</returns>
		public bool btn_Button50_isEnabled() {
			return true; 
		}


		public static class FuncCommandSave {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetAutoCompleteBankById" of Action "Preparation"
			/// </summary>
			public static RLAutoComplete_BankRecordList datasetGetAutoCompleteBankById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENAutoComplete_Bank.[ID] o1, ENAutoComplete_Bank.[TYPEID] o2, ENAutoComplete_Bank.[CATEGORY_1] o3, ENAutoComplete_Bank.[CATEGORY_2] o4, ENAutoComplete_Bank.[CATEGORY_3] o5, ENAutoComplete_Bank.[CATEGORY_4] o6, ENAutoComplete_Bank.[DESCRIPTION] o7");
				fromBuilder.Append(" FROM {AutoComplete_Bank} ENAutoComplete_Bank");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENAutoComplete_Bank.[ID] = @qpinP) AND (ENAutoComplete_Bank.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENAutoComplete_Bank.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLAutoComplete_BankRecordList outParamList = new RLAutoComplete_BankRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLAutoComplete_BankRecordList _tmp = new RLAutoComplete_BankRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.AutoCompleteBank_Edit.Preparation.GetAutoCompleteBankById.List");
						outParamList = (RLAutoComplete_BankRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.AutoCompleteBank_Edit.Preparation.GetAutoCompleteBankById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLAutoComplete_BankRecordList _tmp = new RLAutoComplete_BankRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.AutoCompleteBank_Edit.Preparation.GetAutoCompleteBankById.List");
							outParamList = (RLAutoComplete_BankRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.AutoCompleteBank_Edit.Preparation.GetAutoCompleteBankById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = (((queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssId==BuiltInFunction.NullIdentifier())) ?("New Auto Complete Bank"):((("Edit \'" +queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_1) + "\'"))); Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "AutoCompleteBank_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "AutoCompleteBank_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetAutoCompleteBankById_outParamList.

			int tmpcurrentrownumberqueryResGetAutoCompleteBankById_outParamList = queryResGetAutoCompleteBankById_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetAutoCompleteBankById_outParamList = queryResGetAutoCompleteBankById_outParamList.Eof;
			ArrayList storequeryResGetAutoCompleteBankById_outParamList = new ArrayList();

			// Write the needed fields of queryResGetAutoCompleteBankById_outParamList to the storequeryResGetAutoCompleteBankById_outParamList
			if (!queryResGetAutoCompleteBankById_outParamList.Empty) {
				try {
					queryResGetAutoCompleteBankById_outParamList.StartIteration();

					while (!queryResGetAutoCompleteBankById_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetAutoCompleteBankById_outParamList = new ArrayList();
						tmpFieldsqueryResGetAutoCompleteBankById_outParamList.Add(queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssId == 0?(object) null: queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssId);
						tmpFieldsqueryResGetAutoCompleteBankById_outParamList.Add(queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssTypeId == 0?(object) null: queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssTypeId);
						tmpFieldsqueryResGetAutoCompleteBankById_outParamList.Add(queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_1 == "" ?(object) null: queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_1);
						tmpFieldsqueryResGetAutoCompleteBankById_outParamList.Add(queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_2 == "" ?(object) null: queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_2);
						tmpFieldsqueryResGetAutoCompleteBankById_outParamList.Add(queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_3 == "" ?(object) null: queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_3);
						tmpFieldsqueryResGetAutoCompleteBankById_outParamList.Add(queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_4 == "" ?(object) null: queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssCategory_4);
						tmpFieldsqueryResGetAutoCompleteBankById_outParamList.Add(queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssDescription == "" ?(object) null: queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ssDescription);
						tmpFieldsqueryResGetAutoCompleteBankById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetAutoCompleteBankById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetAutoCompleteBankById_outParamList.CurrentRec.ssENAutoComplete_Bank.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, false, false, false, false
						}
						))));
						storequeryResGetAutoCompleteBankById_outParamList.Add(tmpFieldsqueryResGetAutoCompleteBankById_outParamList);
						queryResGetAutoCompleteBankById_outParamList.Advance();
					}
				} finally {
					queryResGetAutoCompleteBankById_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetAutoCompleteBankById_outParamList", storequeryResGetAutoCompleteBankById_outParamList, null);

			#endregion


			#region store queryResGetAutoCompleteBankById_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetAutoCompleteBankById_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetAutoCompleteBankById_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetAutoCompleteBankById_outParamList_eof", tmpeofqueryResGetAutoCompleteBankById_outParamList, false);
			queryResGetAutoCompleteBankById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetAutoCompleteBankById_outParamList, tmpeofqueryResGetAutoCompleteBankById_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamAutoCompleteBankId", inParamAutoCompleteBankId, 0);
			ViewStateAttributes.SetInViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssId", ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssId, 0);
			ViewStateAttributes.SetInViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssTypeId", ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssTypeId, 0);
			ViewStateAttributes.SetInViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssCategory_1", ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_1, "");
			ViewStateAttributes.SetInViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssCategory_2", ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_2, "");
			ViewStateAttributes.SetInViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssCategory_3", ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_3, "");
			ViewStateAttributes.SetInViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssCategory_4", ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_4, "");
			ViewStateAttributes.SetInViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssDescription", ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssDescription, "");
			ViewStateAttributes.SetInViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtAutoCompleteBank_TypeId_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_TypeId")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtAutoCompleteBank_Category_1_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_Category_1")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtAutoCompleteBank_Category_2_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_Category_2")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtAutoCompleteBank_Category_3_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_Category_3")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtAutoCompleteBank_Category_4_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_Category_4")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtAutoCompleteBank_Description_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_Description")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetAutoCompleteBankById_outParamList.

				// Read the needed fields of queryResGetAutoCompleteBankById_outParamList from storequeryResGetAutoCompleteBankById_outParamList
				queryResGetAutoCompleteBankById_outParamList = new RLAutoComplete_BankRecordList();
				ArrayList storequeryResGetAutoCompleteBankById_outParamList;
				storequeryResGetAutoCompleteBankById_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetAutoCompleteBankById_outParamList", null);
				if (storequeryResGetAutoCompleteBankById_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetAutoCompleteBankById_outParamList in storequeryResGetAutoCompleteBankById_outParamList) {
						if (tmpFieldsqueryResGetAutoCompleteBankById_outParamList != null) {
							// Aux current record variable
							RCAutoComplete_BankRecord tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList = new RCAutoComplete_BankRecord(null);
							tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList.ssENAutoComplete_Bank.ssId = (int) (tmpFieldsqueryResGetAutoCompleteBankById_outParamList[0] == null ? 0: tmpFieldsqueryResGetAutoCompleteBankById_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList.ssENAutoComplete_Bank.ssTypeId = (int) (tmpFieldsqueryResGetAutoCompleteBankById_outParamList[1] == null ? 0: tmpFieldsqueryResGetAutoCompleteBankById_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList.ssENAutoComplete_Bank.ssCategory_1 = (string) (tmpFieldsqueryResGetAutoCompleteBankById_outParamList[2] == null ? "": tmpFieldsqueryResGetAutoCompleteBankById_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList.ssENAutoComplete_Bank.ssCategory_2 = (string) (tmpFieldsqueryResGetAutoCompleteBankById_outParamList[3] == null ? "": tmpFieldsqueryResGetAutoCompleteBankById_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList.ssENAutoComplete_Bank.ssCategory_3 = (string) (tmpFieldsqueryResGetAutoCompleteBankById_outParamList[4] == null ? "": tmpFieldsqueryResGetAutoCompleteBankById_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList.ssENAutoComplete_Bank.ssCategory_4 = (string) (tmpFieldsqueryResGetAutoCompleteBankById_outParamList[5] == null ? "": tmpFieldsqueryResGetAutoCompleteBankById_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList.ssENAutoComplete_Bank.ssDescription = (string) (tmpFieldsqueryResGetAutoCompleteBankById_outParamList[6] == null ? "": tmpFieldsqueryResGetAutoCompleteBankById_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList.ssENAutoComplete_Bank.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetAutoCompleteBankById_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList.ssENAutoComplete_Bank.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetAutoCompleteBankById_outParamList[8]);

							queryResGetAutoCompleteBankById_outParamList.Append(tmpAuxCurrentRecordqueryResGetAutoCompleteBankById_outParamList);
						}
					}
				}
				queryResGetAutoCompleteBankById_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetAutoCompleteBankById_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetAutoCompleteBankById_outParamList;
				tmpcurrentrownumberqueryResGetAutoCompleteBankById_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetAutoCompleteBankById_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetAutoCompleteBankById_outParamList;
				tmpeofqueryResGetAutoCompleteBankById_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetAutoCompleteBankById_outParamList_eof", false);
				queryResGetAutoCompleteBankById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetAutoCompleteBankById_outParamList, tmpeofqueryResGetAutoCompleteBankById_outParamList);

				#endregion

				inParamAutoCompleteBankId = (int) ViewStateAttributes.GetFromViewState("inParamAutoCompleteBankId", 0);
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssId = (int) ViewStateAttributes.GetFromViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssId", 0);
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssTypeId = (int) ViewStateAttributes.GetFromViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssTypeId", 0);
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_1 = (string) ViewStateAttributes.GetFromViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssCategory_1", "");
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_2 = (string) ViewStateAttributes.GetFromViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssCategory_2", "");
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_3 = (string) ViewStateAttributes.GetFromViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssCategory_3", "");
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssCategory_4 = (string) ViewStateAttributes.GetFromViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssCategory_4", "");
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ssDescription = (string) ViewStateAttributes.GetFromViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ssDescription", "");
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_ChangedAttributes", null));
				ssAutoCompleteBankEditRecord.ssENAutoComplete_Bank.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtAutoCompleteBankEdit_record_ssENAutoComplete_Bank_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_TypeId")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtAutoCompleteBank_TypeId_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_Category_1")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtAutoCompleteBank_Category_1_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_Category_2")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtAutoCompleteBank_Category_2_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_Category_3")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtAutoCompleteBank_Category_3_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_Category_4")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtAutoCompleteBank_Category_4_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtAutoCompleteBank_Description")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtAutoCompleteBank_Description_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wtAutoCompleteBank_TypeId", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtAutoCompleteBank_Category_1", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtAutoCompleteBank_Category_2", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtAutoCompleteBank_Category_3", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtAutoCompleteBank_Category_4", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtAutoCompleteBank_Description", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
