/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowCommon {

	public class ScrnPopup_ConfirmationMessage: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnPopup_ConfirmationMessage(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamMessageText. Description:
		/// </summary>
		public string inParamMessageText = "";
		/// <summary>
		/// Screen Input Parameter inParamTitle. Description:
		/// </summary>
		public string inParamTitle = "";
		/// <summary>
		/// Screen Input Parameter inParamConfirmationMessageButtons. Description:
		/// </summary>
		public int inParamConfirmationMessageButtons = 0;
		/// <summary>
		/// Screen Input Parameter inParamEscapeMessageText. Description: If set to true, all markup sensitive
		///  chars are translated into web safe format, Otherwise, the content is used as is, allowing you t
		/// o inject HTML in to messagetext
		/// </summary>
		public bool inParamEscapeMessageText = true;
		/// <summary>
		/// Variable wt_WebBlockInstance1
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout wt_WebBlockInstance1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		/// <summary>
		/// Variable "True" if the Widget wt_If7
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If7T;

		/// <summary>
		/// Variable "True" if the Widget wt_If7
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If7F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		protected OutSystems.HubEdition.WebWidgets.Container wtYesNo;
		/// <summary>
		/// Variable (wt_Button14) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button14;
		/// <summary>
		/// Variable (wt_Button2) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button2;
		protected OutSystems.HubEdition.WebWidgets.Container wtYesNoCancel;
		/// <summary>
		/// Variable (wt_Button5) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button5;
		/// <summary>
		/// Variable (wt_Button6) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button6;
		/// <summary>
		/// Variable (wt_Button24) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;
		/// <summary>
		/// Variable (wt_Button11) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button11;
		/// <summary>
		/// Variable (wt_Button21) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button21;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		/// <summary>
		/// Variable (wt_Button19) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button19;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("+L4obEsQgUqurALQQBplBQ", "Popup_ConfirmationMessage");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "+L4obEsQgUqurALQQBplBQ", "Popup_ConfirmationMessage");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "+L4obEsQgUqurALQQBplBQ", "Popup_ConfirmationMessage");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "+L4obEsQgUqurALQQBplBQ", "Popup_ConfirmationMessage");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "+L4obEsQgUqurALQQBplBQ", "Popup_ConfirmationMessage");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnPopup_ConfirmationMessage() {
		}




		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamMessageText!= "")) {
				parameters.Add(new Pair<string, string>("MessageText", HttpUtility.UrlEncode(inParamMessageText, Request.ContentEncoding)));
			}
			if ((inParamTitle!= "")) {
				parameters.Add(new Pair<string, string>("Title", HttpUtility.UrlEncode(inParamTitle, Request.ContentEncoding)));
			}
			if ((inParamConfirmationMessageButtons!=0)) {
				parameters.Add(new Pair<string, string>("ConfirmationMessageButtons", HttpUtility.UrlEncode(Convert.ToString(inParamConfirmationMessageButtons), Request.ContentEncoding)));
			}
			if ((inParamEscapeMessageText!=true)) {
				parameters.Add(new Pair<string, string>("EscapeMessageText", HttpUtility.UrlEncode(Convert.ToString(inParamEscapeMessageText), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ConfirmationMessage", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ConfirmationMessage", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance1 = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) FindControl("wt_WebBlockInstance1");
			wt_Container20 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container20");
			wt_Container3 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container3");
			wt_Container13 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container13");
			wt_Container9 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container9");
			wtYesNo = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtYesNo");
			wt_Button14 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button14");
			if (this.wt_Button14 != null) {
				this.wt_Button14.Click += new System.EventHandler(this.wt_Button14_Click);
			}
			wt_Button2 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button2");
			if (this.wt_Button2 != null) {
				this.wt_Button2.Click += new System.EventHandler(this.wt_Button2_Click);
			}
			wtYesNoCancel = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtYesNoCancel");
			wt_Button5 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button5");
			if (this.wt_Button5 != null) {
				this.wt_Button5.Click += new System.EventHandler(this.wt_Button5_Click);
			}
			wt_Button6 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button6");
			if (this.wt_Button6 != null) {
				this.wt_Button6.Click += new System.EventHandler(this.wt_Button6_Click);
			}
			wt_Button24 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button24");
			if (this.wt_Button24 != null) {
				this.wt_Button24.Click += new System.EventHandler(this.wt_Button24_Click);
			}
			wt_Container22 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container22");
			wt_Button11 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button11");
			if (this.wt_Button11 != null) {
				this.wt_Button11.Click += new System.EventHandler(this.wt_Button11_Click);
			}
			wt_Button21 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button21");
			if (this.wt_Button21 != null) {
				this.wt_Button21.Click += new System.EventHandler(this.wt_Button21_Click);
			}
			wt_Container4 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container4");
			wt_Button19 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button19");
			if (this.wt_Button19 != null) {
				this.wt_Button19.Click += new System.EventHandler(this.wt_Button19_Click);
			}
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_Container20") {
				return wt_WebBlockInstance1.wtTitle.FindControl("wt_Container20");
			}
			if (id == "wtConfirmBoxTitle") {
				return wt_WebBlockInstance1.wtTitle.FindControl("wtConfirmBoxTitle");
			}
			if (id == "wt_Container3") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Container3");
			}
			if (id == "wt_If7") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_If7");
			}
			if (id == "wt_If7T") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_If7T");
			}
			if (id == "wt_Container13") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Container13");
			}
			if (id == "wt_InlineExpression25") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_InlineExpression25");
			}
			if (id == "wt_If7F") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_If7F");
			}
			if (id == "wt_Container9") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Container9");
			}
			if (id == "wt_InlineExpression16") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_InlineExpression16");
			}
			if (id == "wtYesNo") {
				return wt_WebBlockInstance1.wtContent.FindControl("wtYesNo");
			}
			if (id == "wt_Button14") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Button14");
			}
			if (id == "wt_Button2") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Button2");
			}
			if (id == "wtYesNoCancel") {
				return wt_WebBlockInstance1.wtContent.FindControl("wtYesNoCancel");
			}
			if (id == "wt_Button5") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Button5");
			}
			if (id == "wt_Button6") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Button6");
			}
			if (id == "wt_Button24") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Button24");
			}
			if (id == "wt_Container22") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Container22");
			}
			if (id == "wt_Button11") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Button11");
			}
			if (id == "wt_Button21") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Button21");
			}
			if (id == "wt_Container4") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Container4");
			}
			if (id == "wt_Button19") {
				return wt_WebBlockInstance1.wtContent.FindControl("wt_Button19");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_ConfirmationMessage"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamMessageText = (string) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamTitle = (string) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamConfirmationMessageButtons = (int) paramValue;
							}
						}
						if (screenParameters.Count > 3) {
							object paramValue = screenParameters[3];
							if (paramValue != null) {
								inParamEscapeMessageText = (bool) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_ConfirmationMessage"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["MessageText"] != null) {
						inParamMessageText = Request.QueryString["MessageText"];
					}
					if (Request.QueryString["Title"] != null) {
						inParamTitle = Request.QueryString["Title"];
					}
					if (Request.QueryString["ConfirmationMessageButtons"] != null) {
						inParamConfirmationMessageButtons = Convert.ToInt32(Request.QueryString["ConfirmationMessageButtons"]);
					}
					if (Request.QueryString["EscapeMessageText"] != null) {
						inParamEscapeMessageText = (Request.QueryString["EscapeMessageText"]).ToLowerInvariant() == "true";
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["MessageText"] != null) {
						inParamMessageText = Request.Form["MessageText"];
					}
					if (Request.Form["Title"] != null) {
						inParamTitle = Request.Form["Title"];
					}
					if (Request.Form["ConfirmationMessageButtons"] != null) {
						inParamConfirmationMessageButtons = Convert.ToInt32(Request.Form["ConfirmationMessageButtons"]);
					}
					if (Request.Form["EscapeMessageText"] != null) {
						inParamEscapeMessageText = (Request.Form["EscapeMessageText"]).ToLowerInvariant() == "true";
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				CheckPermissions(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "Popup ConfirmationMessage"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_ConfirmationMessage", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, false);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button19 = wt_Button19 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button19");
			} catch {}
			string jsString = (wt_Button19 != null) ? "return OsEnterKey('" +wt_Button19.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowCommon.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotCaseConferencingUser("CaseConferencingUser role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("+L4obEsQgUqurALQQBplBQ"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvResponse: VarsBag {
			public int inParamConfirmationMessageResponse;
			public lcvResponse(int inParamConfirmationMessageResponse) {
				this.inParamConfirmationMessageResponse = inParamConfirmationMessageResponse;
			}
		}
		/// <summary>
		/// Action <code>CommandResponse</code> that represents the Service Studio screen action
		///  <code>Response</code> <p> Description: </p>
		/// </summary>
		private bool CommandResponse(HeContext heContext, int inParamConfirmationMessageResponse) {
			CheckPermissions(heContext);
			lcvResponse localVars = new lcvResponse(inParamConfirmationMessageResponse);
			try {
				// Popup_Editor_Notify
				Actions.ActionPopup_Editor_Notify(heContext, Convert.ToString(localVars.inParamConfirmationMessageResponse));
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_WebBlockInstance1 Functions
		/// </summary>
		public void webBlck_WebBlockInstance1_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) sender;
			widget.inParamWidth = ((((BuiltInFunction.Length(inParamTitle) *8) >220)) ?((BuiltInFunction.Length(inParamTitle) *8)):(220));
		}
		/// <summary>
		/// wt_Container20 Functions
		/// </summary>
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container20_setInlineAttributes(sender, e);
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container20_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			return true;
		}

		/// <summary>
		/// wtConfirmBoxTitle Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 2+PQmlBC5Ua310hbEDIFmQ) Expression: Title
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expressionConfirmBoxTitle() {
			return inParamTitle;
		}
		/// <summary>
		/// wt_Container3 Functions
		/// </summary>
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container3_setInlineAttributes(sender, e);
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_If7 Functions
		/// </summary>
		bool if_wt_If7_hasRun=false;
		bool if_wt_If7_evalResult;
		public bool if_wt_If7() {
			if (if_wt_If7_hasRun) {
				if_wt_If7_hasRun = false;
				return if_wt_If7_evalResult;
			}
			if_wt_If7_hasRun = true;
			if_wt_If7_evalResult = inParamEscapeMessageText;
			return if_wt_If7_evalResult;
		}

		/// <summary>
		/// wt_Container13 Functions
		/// </summary>
		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container13_setInlineAttributes(sender, e);
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "border-width: 1px;border-style: solid;border-radius: 4px;padding: 10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container13_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression25 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 3CFo_WEulE+22tAXl9pqOw) Expression: MessageText
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression25() {
			return inParamMessageText;
		}
		/// <summary>
		/// wt_Container9 Functions
		/// </summary>
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container9_setInlineAttributes(sender, e);
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "border-width: 1px;border-style: solid;border-radius: 4px;padding: 10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container9_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression16 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = GSZsik7D0E6xEgAXlW_uhQ) Expression: MessageText
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression16() {
			return inParamMessageText;
		}
		/// <summary>
		/// wtYesNo Functions
		/// </summary>
		public void cntYesNo_onDataBinding(object sender, System.EventArgs e) {
			cntYesNo_setInlineAttributes(sender, e);
		}
		public string cntYesNo_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntYesNo_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtYesNo)
		/// </summary>
		/// <returns>The Visible State of wtYesNo</returns>
		public bool cntYesNo_isVisible() {
			return (inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId);
		}

		/// <summary>
		/// wt_Button14 Functions
		/// </summary>
		public void btn_Button14_onDataBinding(object sender, System.EventArgs e) {
			btn_Button14_setInlineAttributes(sender, e);
		}
		public string btn_Button14_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string cssClass = (sender is WebControl) ?((WebControl) sender).CssClass:((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"];
				if (cssClass != null && cssClass != "") {
					if (sender is WebControl) {
						((WebControl) sender).CssClass = cssClass + " " + (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId)) ?("Button Is_Default"):("Button"));
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"] = cssClass + " " + (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId)) ?("Button Is_Default"):("Button"));
					}
				} else {
					if (sender is WebControl) {
						((WebControl) sender).CssClass = (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId)) ?("Button Is_Default"):("Button"));
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"] = (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("bNCZ3pU26UiJth6F_sAUOw")).ssId)) ?("Button Is_Default"):("Button"));
					}
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button14_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandResponse(heContext, ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("tEyHYiOBgEe6CLwwmz5WoQ")).ssId)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button14)
		/// </summary>
		/// <returns>Label of the Button (wt_Button14)</returns>
		public string
		btn_Button14_getLabel() {
			return "Yes";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button14)
		/// </summary>
		/// <returns>The Visible State of wt_Button14</returns>
		public bool btn_Button14_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button14)
		/// </summary>
		/// <returns>The Enabled State of wt_Button14</returns>
		public bool btn_Button14_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button2 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button2_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandResponse(heContext, ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("eX5PtFUMSk2cokwCv4u7iQ")).ssId)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button2)
		/// </summary>
		/// <returns>Label of the Button (wt_Button2)</returns>
		public string
		btn_Button2_getLabel() {
			return "No";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button2)
		/// </summary>
		/// <returns>The Visible State of wt_Button2</returns>
		public bool btn_Button2_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button2)
		/// </summary>
		/// <returns>The Enabled State of wt_Button2</returns>
		public bool btn_Button2_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtYesNoCancel Functions
		/// </summary>
		public void cntYesNoCancel_onDataBinding(object sender, System.EventArgs e) {
			cntYesNoCancel_setInlineAttributes(sender, e);
		}
		public string cntYesNoCancel_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntYesNoCancel_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtYesNoCancel)
		/// </summary>
		/// <returns>The Visible State of wtYesNoCancel</returns>
		public bool cntYesNoCancel_isVisible() {
			return (inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("ezYDprU25kWq7HSksNsLeQ")).ssId);
		}

		/// <summary>
		/// wt_Button5 Functions
		/// </summary>
		public void btn_Button5_onDataBinding(object sender, System.EventArgs e) {
			btn_Button5_setInlineAttributes(sender, e);
		}
		public string btn_Button5_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string cssClass = (sender is WebControl) ?((WebControl) sender).CssClass:((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"];
				if (cssClass != null && cssClass != "") {
					if (sender is WebControl) {
						((WebControl) sender).CssClass = cssClass + " " + (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("ezYDprU25kWq7HSksNsLeQ")).ssId)) ?("Button Is_Default"):("Button"));
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"] = cssClass + " " + (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("ezYDprU25kWq7HSksNsLeQ")).ssId)) ?("Button Is_Default"):("Button"));
					}
				} else {
					if (sender is WebControl) {
						((WebControl) sender).CssClass = (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("ezYDprU25kWq7HSksNsLeQ")).ssId)) ?("Button Is_Default"):("Button"));
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"] = (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("ezYDprU25kWq7HSksNsLeQ")).ssId)) ?("Button Is_Default"):("Button"));
					}
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button5_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandResponse(heContext, ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("tEyHYiOBgEe6CLwwmz5WoQ")).ssId)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button5)
		/// </summary>
		/// <returns>Label of the Button (wt_Button5)</returns>
		public string
		btn_Button5_getLabel() {
			return "Yes";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button5)
		/// </summary>
		/// <returns>The Visible State of wt_Button5</returns>
		public bool btn_Button5_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button5)
		/// </summary>
		/// <returns>The Enabled State of wt_Button5</returns>
		public bool btn_Button5_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button6 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button6_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandResponse(heContext, ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("eX5PtFUMSk2cokwCv4u7iQ")).ssId)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button6)
		/// </summary>
		/// <returns>Label of the Button (wt_Button6)</returns>
		public string
		btn_Button6_getLabel() {
			return "No";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button6)
		/// </summary>
		/// <returns>The Visible State of wt_Button6</returns>
		public bool btn_Button6_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button6)
		/// </summary>
		/// <returns>The Enabled State of wt_Button6</returns>
		public bool btn_Button6_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button24 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button24_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandResponse(heContext, ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("G+3FdQ+sV0qUW3kRHdOwIg")).ssId)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button24)
		/// </summary>
		/// <returns>Label of the Button (wt_Button24)</returns>
		public string
		btn_Button24_getLabel() {
			return "Cancel";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button24)
		/// </summary>
		/// <returns>The Visible State of wt_Button24</returns>
		public bool btn_Button24_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button24)
		/// </summary>
		/// <returns>The Enabled State of wt_Button24</returns>
		public bool btn_Button24_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container22 Functions
		/// </summary>
		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container22_setInlineAttributes(sender, e);
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container22_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			return (inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("jD2CLXxZvUeH5HZgTXSR1g")).ssId);
		}

		/// <summary>
		/// wt_Button11 Functions
		/// </summary>
		public void btn_Button11_onDataBinding(object sender, System.EventArgs e) {
			btn_Button11_setInlineAttributes(sender, e);
		}
		public string btn_Button11_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string cssClass = (sender is WebControl) ?((WebControl) sender).CssClass:((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"];
				if (cssClass != null && cssClass != "") {
					if (sender is WebControl) {
						((WebControl) sender).CssClass = cssClass + " " + (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("jD2CLXxZvUeH5HZgTXSR1g")).ssId)) ?("Button Is_Default"):("Button"));
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"] = cssClass + " " + (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("jD2CLXxZvUeH5HZgTXSR1g")).ssId)) ?("Button Is_Default"):("Button"));
					}
				} else {
					if (sender is WebControl) {
						((WebControl) sender).CssClass = (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("jD2CLXxZvUeH5HZgTXSR1g")).ssId)) ?("Button Is_Default"):("Button"));
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"] = (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("jD2CLXxZvUeH5HZgTXSR1g")).ssId)) ?("Button Is_Default"):("Button"));
					}
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button11_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandResponse(heContext, ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("cOkO+pjtKESwDJtV6b3E+g")).ssId)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button11)
		/// </summary>
		/// <returns>Label of the Button (wt_Button11)</returns>
		public string
		btn_Button11_getLabel() {
			return "Ok";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button11)
		/// </summary>
		/// <returns>The Visible State of wt_Button11</returns>
		public bool btn_Button11_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button11)
		/// </summary>
		/// <returns>The Enabled State of wt_Button11</returns>
		public bool btn_Button11_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button21 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button21_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandResponse(heContext, ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("G+3FdQ+sV0qUW3kRHdOwIg")).ssId)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button21)
		/// </summary>
		/// <returns>Label of the Button (wt_Button21)</returns>
		public string
		btn_Button21_getLabel() {
			return "Cancel";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button21)
		/// </summary>
		/// <returns>The Visible State of wt_Button21</returns>
		public bool btn_Button21_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button21)
		/// </summary>
		/// <returns>The Enabled State of wt_Button21</returns>
		public bool btn_Button21_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container4 Functions
		/// </summary>
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container4_setInlineAttributes(sender, e);
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container4_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			return (inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("LHI8e5GaZ0SGyaU24LfZCA")).ssId);
		}

		/// <summary>
		/// wt_Button19 Functions
		/// </summary>
		public void btn_Button19_onDataBinding(object sender, System.EventArgs e) {
			btn_Button19_setInlineAttributes(sender, e);
		}
		public string btn_Button19_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string cssClass = (sender is WebControl) ?((WebControl) sender).CssClass:((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"];
				if (cssClass != null && cssClass != "") {
					if (sender is WebControl) {
						((WebControl) sender).CssClass = cssClass + " " + (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("LHI8e5GaZ0SGyaU24LfZCA")).ssId)) ?("Button Is_Default"):("Button"));
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"] = cssClass + " " + (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("LHI8e5GaZ0SGyaU24LfZCA")).ssId)) ?("Button Is_Default"):("Button"));
					}
				} else {
					if (sender is WebControl) {
						((WebControl) sender).CssClass = (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("LHI8e5GaZ0SGyaU24LfZCA")).ssId)) ?("Button Is_Default"):("Button"));
					} else {
						((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["class"] = (((inParamConfirmationMessageButtons==ENConfirmationMessageButtonsEntity.GetRecordByKey(ObjectKey.Parse("LHI8e5GaZ0SGyaU24LfZCA")).ssId)) ?("Button Is_Default"):("Button"));
					}
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button19_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandResponse(heContext, ENConfirmationMessageResponseEntity.GetRecordByKey(ObjectKey.Parse("cOkO+pjtKESwDJtV6b3E+g")).ssId)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button19)
		/// </summary>
		/// <returns>Label of the Button (wt_Button19)</returns>
		public string
		btn_Button19_getLabel() {
			return "Ok";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button19)
		/// </summary>
		/// <returns>The Visible State of wt_Button19</returns>
		public bool btn_Button19_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button19)
		/// </summary>
		/// <returns>The Enabled State of wt_Button19</returns>
		public bool btn_Button19_isEnabled() {
			return true; 
		}


		public static class FuncCommandResponse {
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Title = "Popup ConfirmationMessage"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_ConfirmationMessage", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_ConfirmationMessage", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamMessageText", inParamMessageText, "");
			ViewStateAttributes.SetInViewState("inParamTitle", inParamTitle, "");
			ViewStateAttributes.SetInViewState("inParamConfirmationMessageButtons", inParamConfirmationMessageButtons, 0);
			ViewStateAttributes.SetInViewState("inParamEscapeMessageText", inParamEscapeMessageText, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamMessageText = (string) ViewStateAttributes.GetFromViewState("inParamMessageText", "");
				inParamTitle = (string) ViewStateAttributes.GetFromViewState("inParamTitle", "");
				inParamConfirmationMessageButtons = (int) ViewStateAttributes.GetFromViewState("inParamConfirmationMessageButtons", 0);
				inParamEscapeMessageText = (bool) ViewStateAttributes.GetFromViewState("inParamEscapeMessageText", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
