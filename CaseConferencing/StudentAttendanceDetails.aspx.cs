/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearnerView {

	public class ScrnStudentAttendanceDetails: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnStudentAttendanceDetails(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamOfferingCode. Description:
		/// </summary>
		public string inParamOfferingCode = "";
		/// <summary>
		/// Variable <code>varLcStudentAttendanceDropDownList</code> that represents the Service Studio local
		///  variable <code>StudentAttendanceDropDownList</code> <p>Description: </p>
		/// </summary>
		RLAttendancePeriodDropDownRecordList varLcStudentAttendanceDropDownList = new RLAttendancePeriodDropDownRecordList();

		/// <summary>
		/// Variable <code>varLcTableHTML</code> that represents the Service Studio local variable
		///  <code>TableHTML</code> <p>Description: </p>
		/// </summary>
		string varLcTableHTML = "";

		/// <summary>
		/// Variable <code>varLcLastMonday</code> that represents the Service Studio local variable
		///  <code>LastMonday</code> <p>Description: </p>
		/// </summary>
		DateTime varLcLastMonday = new DateTime(1900, 1, 1, 0, 0, 0);

		/// <summary>
		/// Variable <code>varLcLayoutTypeSelected2</code> that represents the Service Studio local variable
		///  <code>LayoutTypeSelected2</code> <p>Description: </p>
		/// </summary>
		int varLcLayoutTypeSelected2 = ENAttendanceViewTypeEntity.GetRecordByKey(ObjectKey.Parse("jUkOyF8wkkS3dK3NAltNtw")).ssId;

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container27;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox44ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox44 = new SelectRtWidget();
		RLAttendanceCourseDropDownRecordList Rt_wt_ComboBox44_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox10ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox10 = new SelectRtWidget();
		RLAttendancePeriodDropDownRecordList Rt_wt_ComboBox10_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtLayoutTypeSelectedValidatorRequired;
		protected SelectRtWidget Rt_wtLayoutTypeSelected = new SelectRtWidget();
		RLAttendanceViewTypeRecordList Rt_wtLayoutTypeSelected_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wtTitleContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtTableHTMLContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtLegend;
		/// <summary>
		/// Variable "True" if the Widget wt_If18
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If18T;

		/// <summary>
		/// Variable "True" if the Widget wt_If18
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If18F;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("yHUZAL2KX0qwKz4w8WD32A", "StudentAttendanceDetails");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "yHUZAL2KX0qwKz4w8WD32A", "StudentAttendanceDetails");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "yHUZAL2KX0qwKz4w8WD32A", "StudentAttendanceDetails");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "yHUZAL2KX0qwKz4w8WD32A", "StudentAttendanceDetails");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "yHUZAL2KX0qwKz4w8WD32A", "StudentAttendanceDetails");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnStudentAttendanceDetails() {
		}


		RLAttendanceCourseDropDownRecordList queryResGetStudentAttendancesByStudentReference_outParamList = new RLAttendanceCourseDropDownRecordList();
		int queryResGetStudentAttendancesByStudentReference_outParamCount = 0;
		Actions.lcoGetDropDownValues resGetDropDownValues = new Actions.lcoGetDropDownValues(); Actions.lcoRefreshStudentAttendanceTable resRefreshStudentAttendanceTable2 = new Actions.lcoRefreshStudentAttendanceTable(); /// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// GetDropDownValues
				Actions.ActionGetDropDownValues(heContext, out resGetDropDownValues.outParamStudentAttendanceDropDownList);
				// Query QueryGetStudentAttendancesByStudentReference
				int QueryGetStudentAttendancesByStudentReference_maxRecords = 0;
				queryResGetStudentAttendancesByStudentReference_outParamList = FuncssPreparation.QueryGetStudentAttendancesByStudentReference(heContext, QueryGetStudentAttendancesByStudentReference_maxRecords, IterationMultiplicity.Single, out queryResGetStudentAttendancesByStudentReference_outParamCount, BuiltInFunction.TextToEntityRefText(inParamStudentReference)
				);
				varLcLastMonday = Convert.ToDateTime(BuiltInFunction.AddDays(BuiltInFunction.CurrDate(), ( - (BuiltInFunction.DayOfWeek(BuiltInFunction.CurrDate()) +6))).ToString("yyyy-M-d")); // LastMonday = AddDays
				if (((inParamStudentReference!= "") && (inParamOfferingCode!= ""))) {
					// RefreshStudentAttendanceTable2
					Actions.ActionRefreshStudentAttendanceTable(heContext, inParamStudentReference, inParamOfferingCode, ((varLcLastMonday.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo) + "|") +BuiltInFunction.AddDays(varLcLastMonday, 7).ToString(FormatInfo.GetOutputDateTimeFormatString(), FormatInfo.defaultHeCultureInfo)), varLcLayoutTypeSelected2, out resRefreshStudentAttendanceTable2.outParamTableHTML);
					varLcTableHTML = resRefreshStudentAttendanceTable2.outParamTableHTML; // TableHTML = RefreshStudentAttendanceTable2.TableHTML

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
			}
			catch (DataBaseException exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// Feedback_Message
				Actions.ActionFeedback_Message(heContext, "Unable to retrieve attendance data, please try again.", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				return;
			} // Catch
			catch (System.Data.Common.DbException exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// Feedback_Message
				Actions.ActionFeedback_Message(heContext, "Unable to retrieve attendance data, please try again.", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				return;
			} // Catch
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "StudentAttendanceDetails.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "StudentAttendanceDetails.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamStudentReference!= "")) {
				parameters.Add(new Pair<string, string>("StudentReference", HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			}
			if ((inParamOfferingCode!= "")) {
				parameters.Add(new Pair<string, string>("OfferingCode", HttpUtility.UrlEncode(inParamOfferingCode, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "StudentAttendanceDetails", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "StudentAttendanceDetails", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_StudentAttendanceDetails"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamStudentReference = (string) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamOfferingCode = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_StudentAttendanceDetails"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["StudentReference"] != null) {
						inParamStudentReference = Request.QueryString["StudentReference"];
					}
					if (Request.QueryString["OfferingCode"] != null) {
						inParamOfferingCode = Request.QueryString["OfferingCode"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["StudentReference"] != null) {
						inParamStudentReference = Request.Form["StudentReference"];
					}
					if (Request.Form["OfferingCode"] != null) {
						inParamOfferingCode = Request.Form["OfferingCode"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "StudentAttendanceDetails"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "StudentAttendanceDetails", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, false);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearnerView.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotLearningSupportPractitioner("LearningSupportPractitioner role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("yHUZAL2KX0qwKz4w8WD32A"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvRefreshStudentAttendanceTable: VarsBag {
			public Actions.lcoRefreshStudentAttendanceTable resRefreshStudentAttendanceTable = new Actions.lcoRefreshStudentAttendanceTable();
			public lcvRefreshStudentAttendanceTable() {
			}
		}
		/// <summary>
		/// Action <code>CommandRefreshStudentAttendanceTable</code> that represents the Service Studio screen
		///  action <code>RefreshStudentAttendanceTable</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshStudentAttendanceTable(HeContext heContext) {
			CheckPermissions(heContext);
			lcvRefreshStudentAttendanceTable localVars = new lcvRefreshStudentAttendanceTable();
			try {
				// RefreshStudentAttendanceTable
				Actions.ActionRefreshStudentAttendanceTable(heContext, inParamStudentReference, inParamOfferingCode, varLcStudentAttendanceDropDownList.CurrentRec.ssSTAttendancePeriodDropDown.ssDateRange, varLcLayoutTypeSelected2, out localVars.resRefreshStudentAttendanceTable.outParamTableHTML);
				varLcTableHTML = localVars.resRefreshStudentAttendanceTable.outParamTableHTML; // TableHTML = RefreshStudentAttendanceTable.TableHTML
				// Refresh Widget (wtTableHTMLContainer)
				((OSPageViewState) Page).AjaxRefresh(wtTableHTMLContainer, "None", StoreViewState);
				// Refresh Widget (wtLegend)
				((OSPageViewState) Page).AjaxRefresh(wtLegend, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_Container7 Functions
		/// </summary>
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container7_setInlineAttributes(sender, e);
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container7_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container27 Functions
		/// </summary>
		public void cnt_Container27_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container27_setInlineAttributes(sender, e);
		}
		public string cnt_Container27_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container27_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container27)
		/// </summary>
		/// <returns>The Visible State of wt_Container27</returns>
		public bool cnt_Container27_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container32 Functions
		/// </summary>
		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container32_setInlineAttributes(sender, e);
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container32_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_ComboBox44 Functions
		/// </summary>
		public void sel_ComboBox44_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			RLAttendanceCourseDropDownRecordList Rt_wt_ComboBox44_reclist = queryResGetStudentAttendancesByStudentReference_outParamList;
			Rt_wt_ComboBox44_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox44_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox44_reclist.CurrentRec.ssSTAttendanceCourseDropDown.ssDescription, Rt_wt_ComboBox44_reclist.CurrentRec.ssSTAttendanceCourseDropDown.ssOfferingCode));
					if (inParamOfferingCode == Convert.ToString(Rt_wt_ComboBox44_reclist.CurrentRec.ssSTAttendanceCourseDropDown.ssOfferingCode)) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox44_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox44_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox44
		/// </summary>
		public void sel_ComboBox44_AjaxChange(object sender, System.EventArgs e) {
			if (CommandRefreshStudentAttendanceTable(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox44_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox44.SpecialListVal = dropDown.SelectedValue.Substring(8);
				inParamOfferingCode = "";
			}
			else {
				Rt_wt_ComboBox44.SpecialListVal = "";
				try {
					inParamOfferingCode = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox44)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox44</returns>
		public bool sel_ComboBox44_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox44)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox44</returns>
		public bool sel_ComboBox44_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox44)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox44</returns>
		public bool sel_ComboBox44_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container9 Functions
		/// </summary>
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container9_setInlineAttributes(sender, e);
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container9_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_ComboBox10 Functions
		/// </summary>
		public void sel_ComboBox10_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			RLAttendancePeriodDropDownRecordList Rt_wt_ComboBox10_reclist = resGetDropDownValues.outParamStudentAttendanceDropDownList;
			Rt_wt_ComboBox10_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox10_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox10_reclist.CurrentRec.ssSTAttendancePeriodDropDown.ssDescription, Rt_wt_ComboBox10_reclist.CurrentRec.ssSTAttendancePeriodDropDown.ssDateRange));
					if (varLcStudentAttendanceDropDownList.CurrentRec.ssSTAttendancePeriodDropDown.ssDateRange == Convert.ToString(Rt_wt_ComboBox10_reclist.CurrentRec.ssSTAttendancePeriodDropDown.ssDateRange)) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox10_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox10_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox10
		/// </summary>
		public void sel_ComboBox10_AjaxChange(object sender, System.EventArgs e) {
			if (CommandRefreshStudentAttendanceTable(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox10_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox10.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcStudentAttendanceDropDownList.CurrentRec.ssSTAttendancePeriodDropDown.ssDateRange = "";
			}
			else {
				Rt_wt_ComboBox10.SpecialListVal = "";
				try {
					varLcStudentAttendanceDropDownList.CurrentRec.ssSTAttendancePeriodDropDown.ssDateRange = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox10)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox10</returns>
		public bool sel_ComboBox10_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox10)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox10</returns>
		public bool sel_ComboBox10_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox10)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox10</returns>
		public bool sel_ComboBox10_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container13 Functions
		/// </summary>
		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container13_setInlineAttributes(sender, e);
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container13_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			return true;
		}

		/// <summary>
		/// wtLayoutTypeSelected Functions
		/// </summary>
		public void selLayoutTypeSelected_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtLayoutTypeSelected_reclist == null) {
				using(Transaction wtLayoutTypeSelected_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtLayoutTypeSelected_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENAttendanceViewTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtLayoutTypeSelected_sqlCmd = wtLayoutTypeSelected_trans.CreateCommand(wtLayoutTypeSelected_sql);
					Rt_wtLayoutTypeSelected_sqlCmd.CreateParameter("@Selection", varLcLayoutTypeSelected2);
					Rt_wtLayoutTypeSelected_sqlCmd.TransformParametersSyntax();
					Rt_wtLayoutTypeSelected_reclist = new RLAttendanceViewTypeRecordList();
					Rt_wtLayoutTypeSelected_reclist.Transaction = wtLayoutTypeSelected_trans;
					Rt_wtLayoutTypeSelected_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(4, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtLayoutTypeSelected_sqlCmd, Rt_wtLayoutTypeSelected_reclist, "WebSelectWidget load operation");
					Rt_wtLayoutTypeSelected_reclist = (RLAttendanceViewTypeRecordList) Rt_wtLayoutTypeSelected_reclist.Duplicate();
				}
			}
			Rt_wtLayoutTypeSelected_reclist.StartIteration();
			try {
				while (!Rt_wtLayoutTypeSelected_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtLayoutTypeSelected_reclist.CurrentRec.ssENAttendanceViewType.ssLabel, Convert.ToString(Rt_wtLayoutTypeSelected_reclist.CurrentRec.ssENAttendanceViewType.ssId)));
					if (varLcLayoutTypeSelected2 == Convert.ToInt32(Convert.ToString(Rt_wtLayoutTypeSelected_reclist.CurrentRec.ssENAttendanceViewType.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtLayoutTypeSelected_reclist.Advance();
				}
			} finally {
				Rt_wtLayoutTypeSelected_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wtLayoutTypeSelected
		/// </summary>
		public void selLayoutTypeSelected_AjaxChange(object sender, System.EventArgs e) {
			if (CommandRefreshStudentAttendanceTable(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void selLayoutTypeSelected_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtLayoutTypeSelected.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcLayoutTypeSelected2 = 0;
			}
			else {
				Rt_wtLayoutTypeSelected.SpecialListVal = "";
				try {
					varLcLayoutTypeSelected2 = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtLayoutTypeSelected)
		/// </summary>
		/// <returns>The Visible State of wtLayoutTypeSelected</returns>
		public bool selLayoutTypeSelected_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtLayoutTypeSelected)
		/// </summary>
		/// <returns>The Enabled State of wtLayoutTypeSelected</returns>
		public bool selLayoutTypeSelected_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selLayoutTypeSelected)
		/// </summary>
		/// <returns>The Mandatory Value of selLayoutTypeSelected</returns>
		public bool selLayoutTypeSelected_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtTitleContainer Functions
		/// </summary>
		public void cntTitleContainer_onDataBinding(object sender, System.EventArgs e) {
			cntTitleContainer_setInlineAttributes(sender, e);
		}
		public string cntTitleContainer_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntTitleContainer_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtTitleContainer)
		/// </summary>
		/// <returns>The Visible State of wtTitleContainer</returns>
		public bool cntTitleContainer_isVisible() {
			return true;
		}

		/// <summary>
		/// wtTableHTMLContainer Functions
		/// </summary>
		public void cntTableHTMLContainer_onDataBinding(object sender, System.EventArgs e) {
			cntTableHTMLContainer_setInlineAttributes(sender, e);
		}
		public string cntTableHTMLContainer_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntTableHTMLContainer_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtTableHTMLContainer)
		/// </summary>
		/// <returns>The Visible State of wtTableHTMLContainer</returns>
		public bool cntTableHTMLContainer_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression54 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = P8tH1KoiW0+PI3owpptkIQ) Expression: TableHTML
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression54() {
			return varLcTableHTML;
		}
		/// <summary>
		/// wtLegend Functions
		/// </summary>
		public void cntLegend_onDataBinding(object sender, System.EventArgs e) {
			cntLegend_setInlineAttributes(sender, e);
		}
		public string cntLegend_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntLegend_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtLegend)
		/// </summary>
		/// <returns>The Visible State of wtLegend</returns>
		public bool cntLegend_isVisible() {
			return (((BuiltInFunction.Length(varLcTableHTML) >150)) ?(true):(false));
		}

		/// <summary>
		/// wt_If18 Functions
		/// </summary>
		bool if_wt_If18_hasRun=false;
		bool if_wt_If18_evalResult;
		public bool if_wt_If18() {
			if (if_wt_If18_hasRun) {
				if_wt_If18_hasRun = false;
				return if_wt_If18_evalResult;
			}
			if_wt_If18_hasRun = true;
			if_wt_If18_evalResult = (varLcLayoutTypeSelected2==ENAttendanceViewTypeEntity.GetRecordByKey(ObjectKey.Parse("jUkOyF8wkkS3dK3NAltNtw")).ssId);
			return if_wt_If18_evalResult;
		}

		/// <summary>
		/// wt_TableCell40 Functions
		/// </summary>
		public void wt_TableCell40_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell40_setInlineAttributes(sender, e);
		}
		public string wt_TableCell40_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-align:center;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell56 Functions
		/// </summary>
		public void wt_TableCell56_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell56_setInlineAttributes(sender, e);
		}
		public string wt_TableCell56_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-align:center;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell47 Functions
		/// </summary>
		public void wt_TableCell47_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell47_setInlineAttributes(sender, e);
		}
		public string wt_TableCell47_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-align:center;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell37 Functions
		/// </summary>
		public void wt_TableCell37_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell37_setInlineAttributes(sender, e);
		}
		public string wt_TableCell37_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-align:center;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell42 Functions
		/// </summary>
		public void wt_TableCell42_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell42_setInlineAttributes(sender, e);
		}
		public string wt_TableCell42_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-align:center;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell43 Functions
		/// </summary>
		public void wt_TableCell43_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell43_setInlineAttributes(sender, e);
		}
		public string wt_TableCell43_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "text-align:center;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}


		public static class FuncCommandRefreshStudentAttendanceTable {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetStudentAttendancesByStudentReference" of Action "Preparation"
			/// </summary>
			public static RLAttendanceCourseDropDownRecordList QueryGetStudentAttendancesByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CommandTimeout = 5;
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT '%%','All Offerings'  " +
				 "FROM  {Group}  " +
				 "UNION  " +
				 "SELECT  {Group}.[GROUPNAME], {Group}.[GROUPNAME] + ' - ' +  {Group}.[GROUPDESCRIPTION]  " +
				 "FROM  {StudentAttendance}   " +
				 "LEFT JOIN  {Group} ON  {Group}.[GROUPNAME] =  {StudentAttendance}.[OFFERINGCODE]  " +
				 "INNER JOIN  {Student_Group} ON  {Group}.[ID] =  {Student_Group}.[GROUPID] AND  {StudentAttendance}.[STUDENTREFERENCE] =  {Student_Group}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentAttendance}.[STUDENTREFERENCE] = @qpstStudentReference   " +
				 "AND  {Student_Group}.[ENROLMENTSTATUS] = 'Active'";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLAttendanceCourseDropDownRecordList outParamList = new RLAttendanceCourseDropDownRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLAttendanceCourseDropDownRecordList _tmp = new RLAttendanceCourseDropDownRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.StudentAttendanceDetails.Preparation.GetStudentAttendancesByStudentReference.List");
							outParamList = (RLAttendanceCourseDropDownRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.StudentAttendanceDetails.Preparation.GetStudentAttendancesByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.StudentAttendanceDetails.Preparation.GetStudentAttendancesByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudentAttendancesByStudentReference in Preparation in StudentAttendanceDetails in LearnerView in CaseConferencing (SELECT '%%','All Offerings'  FROM {Group}  UNION  SELECT {Group}.[GroupName],{Group}.[GroupName] + ' - ' + {Group}.[GroupDescription]  FROM {StudentAttendance}   LEFT JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Group}.[Id] = {Student_Group}.[GroupId] AND {StudentAttendance}.[StudentReference] = {Student_Group}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus] = 'Active'    ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudentAttendancesByStudentReference in Preparation in StudentAttendanceDetails in LearnerView in CaseConferencing (SELECT '%%','All Offerings'  FROM {Group}  UNION  SELECT {Group}.[GroupName],{Group}.[GroupName] + ' - ' + {Group}.[GroupDescription]  FROM {StudentAttendance}   LEFT JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Group}.[Id] = {Student_Group}.[GroupId] AND {StudentAttendance}.[StudentReference] = {Student_Group}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus] = 'Active'    ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudentAttendancesByStudentReference in Preparation in StudentAttendanceDetails in LearnerView in CaseConferencing (SELECT '%%','All Offerings'  FROM {Group}  UNION  SELECT {Group}.[GroupName],{Group}.[GroupName] + ' - ' + {Group}.[GroupDescription]  FROM {StudentAttendance}   LEFT JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Group}.[Id] = {Student_Group}.[GroupId] AND {StudentAttendance}.[StudentReference] = {Student_Group}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus] = 'Active'    ): " + aqExcep.Message);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "StudentAttendanceDetails"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "StudentAttendanceDetails", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "StudentAttendanceDetails", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("inParamOfferingCode", inParamOfferingCode, "");

			#region store varLcStudentAttendanceDropDownList.

			int tmpcurrentrownumbervarLcStudentAttendanceDropDownList = varLcStudentAttendanceDropDownList.CurrentRowNumber;
			bool tmpeofvarLcStudentAttendanceDropDownList = varLcStudentAttendanceDropDownList.Eof;
			ArrayList storevarLcStudentAttendanceDropDownList = new ArrayList();

			// Write the needed fields of varLcStudentAttendanceDropDownList to the storevarLcStudentAttendanceDropDownList
			if (!varLcStudentAttendanceDropDownList.Empty) {
				try {
					varLcStudentAttendanceDropDownList.StartIteration();

					while (!varLcStudentAttendanceDropDownList.Eof) {
						ArrayList tmpFieldsvarLcStudentAttendanceDropDownList = new ArrayList();
						tmpFieldsvarLcStudentAttendanceDropDownList.Add(varLcStudentAttendanceDropDownList.CurrentRec.ssSTAttendancePeriodDropDown.ssDateRange == "" ?(object) null: varLcStudentAttendanceDropDownList.CurrentRec.ssSTAttendancePeriodDropDown.ssDateRange);
						storevarLcStudentAttendanceDropDownList.Add(tmpFieldsvarLcStudentAttendanceDropDownList);
						varLcStudentAttendanceDropDownList.Advance();
					}
				} finally {
					varLcStudentAttendanceDropDownList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcStudentAttendanceDropDownList", storevarLcStudentAttendanceDropDownList, null);

			#endregion


			#region store varLcStudentAttendanceDropDownList runtime properties state.

			ViewStateAttributes.SetInViewState("varLcStudentAttendanceDropDownList_currentrownumber", tmpcurrentrownumbervarLcStudentAttendanceDropDownList, 0);
			ViewStateAttributes.SetInViewState("varLcStudentAttendanceDropDownList_eof", tmpeofvarLcStudentAttendanceDropDownList, false);
			varLcStudentAttendanceDropDownList.RestoreRecordListState(tmpcurrentrownumbervarLcStudentAttendanceDropDownList, tmpeofvarLcStudentAttendanceDropDownList);

			#endregion

			ViewStateAttributes.SetInViewState("varLcLayoutTypeSelected2", varLcLayoutTypeSelected2, 0);
			ViewStateAttributes.SetInViewState("wt_ComboBox44_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox44")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_ComboBox10_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox10")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtLayoutTypeSelected_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtLayoutTypeSelected")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				inParamOfferingCode = (string) ViewStateAttributes.GetFromViewState("inParamOfferingCode", "");

				#region fetch varLcStudentAttendanceDropDownList.

				// Read the needed fields of varLcStudentAttendanceDropDownList from storevarLcStudentAttendanceDropDownList
				varLcStudentAttendanceDropDownList = new RLAttendancePeriodDropDownRecordList();
				ArrayList storevarLcStudentAttendanceDropDownList;
				storevarLcStudentAttendanceDropDownList = (ArrayList) ViewStateAttributes.GetFromViewState("varLcStudentAttendanceDropDownList", null);
				if (storevarLcStudentAttendanceDropDownList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcStudentAttendanceDropDownList in storevarLcStudentAttendanceDropDownList) {
						if (tmpFieldsvarLcStudentAttendanceDropDownList != null) {
							// Aux current record variable
							RCAttendancePeriodDropDownRecord tmpAuxCurrentRecordvarLcStudentAttendanceDropDownList = new RCAttendancePeriodDropDownRecord(null);
							tmpAuxCurrentRecordvarLcStudentAttendanceDropDownList.ssSTAttendancePeriodDropDown.ssDateRange = (string) (tmpFieldsvarLcStudentAttendanceDropDownList[0] == null ? "": tmpFieldsvarLcStudentAttendanceDropDownList[0]);

							varLcStudentAttendanceDropDownList.Append(tmpAuxCurrentRecordvarLcStudentAttendanceDropDownList);
						}
					}
				}
				varLcStudentAttendanceDropDownList.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcStudentAttendanceDropDownList runtime properties state.

				int tmpcurrentrownumbervarLcStudentAttendanceDropDownList;
				tmpcurrentrownumbervarLcStudentAttendanceDropDownList = (int) ViewStateAttributes.GetFromViewState("varLcStudentAttendanceDropDownList_currentrownumber", 0);
				bool tmpeofvarLcStudentAttendanceDropDownList;
				tmpeofvarLcStudentAttendanceDropDownList = (bool) ViewStateAttributes.GetFromViewState("varLcStudentAttendanceDropDownList_eof", false);
				varLcStudentAttendanceDropDownList.RestoreRecordListState(tmpcurrentrownumbervarLcStudentAttendanceDropDownList, tmpeofvarLcStudentAttendanceDropDownList);

				#endregion

				varLcLayoutTypeSelected2 = (int) ViewStateAttributes.GetFromViewState("varLcLayoutTypeSelected2", 0);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox44")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox44_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox10")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox10_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtLayoutTypeSelected")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtLayoutTypeSelected_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox44", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox10", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wtLayoutTypeSelected", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
