/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowCommon {

	public class ScrnLogin: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnLogin(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamOriginalURL. Description:
		/// </summary>
		public string inParamOriginalURL = "";
		/// <summary>
		/// Variable <code>varLcPassword</code> that represents the Service Studio local variable
		///  <code>Password</code> <p>Description: </p>
		/// </summary>
		string varLcPassword = "";

		/// <summary>
		/// Variable <code>varLcUserName</code> that represents the Service Studio local variable
		///  <code>UserName</code> <p>Description: </p>
		/// </summary>
		string varLcUserName = "";

		/// <summary>
		/// Variable <code>varLcRememberLogin</code> that represents the Service Studio local variable
		///  <code>RememberLogin</code> <p>Description: </p>
		/// </summary>
		bool varLcRememberLogin = true;

		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance24
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container31;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCUserRecord ssEditRecord1Record = new RCUserRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtEditRecord1_Valid() {
			bool res = true;
			return res;
		}


		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtUserNameInputValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtUserNameInputValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtPasswordInputValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtPasswordInputValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container44;
		/// <summary>
		/// Variable (wtLoginButton) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtLoginButton;
		/// <summary>
		/// Variable "True" if the Widget wt_If29
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If29T;

		/// <summary>
		/// Variable "True" if the Widget wt_If29
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If29F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container38;
		/// <summary>
		/// Variable (wt_Link15) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link15;
		/// <summary>
		/// Variable (wt_Link56) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link56;
		/// <summary>
		/// Variable (wt_Link6) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link6;
		/// <summary>
		/// Variable (wt_Link45) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link45;
		/// <summary>
		/// Variable (wt_Link9) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link9;
		/// <summary>
		/// Variable (wt_Link47) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link47;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkRemovePopups.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("SV9KNOjVAUOS7pfFlW6SKA", "Login");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "SV9KNOjVAUOS7pfFlW6SKA", "Login");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "SV9KNOjVAUOS7pfFlW6SKA", "Login");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "SV9KNOjVAUOS7pfFlW6SKA", "Login");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "SV9KNOjVAUOS7pfFlW6SKA", "Login");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnLogin() {
			htTabIndexGroups["wt_Text48"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Text19"] = "wtEditRecord1-1";
			htTabIndexGroups["wtUserNameInput"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Text58"] = "wtEditRecord1-1";
			htTabIndexGroups["wtPasswordInput"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Container26"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_CheckBox63"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Text23"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Container44"] = "wtEditRecord1-1";
			htTabIndexGroups["wtLoginButton"] = "wtEditRecord1-1";
		}


		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			if ((((int) Global.App.OsContext.Session["UserID"]) !=BuiltInFunction.NullIdentifier())) {
				// Destination = Login

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "SV9KNOjVAUOS7pfFlW6SKA";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add("");
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Login"] = screenParameters;
						if (OSPage.IsAjaxRequest) {
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "Login.aspx" + sURLQuery;
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							Server.Transfer("Login.aspx");
						}
						return;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "SV9KNOjVAUOS7pfFlW6SKA";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add("");
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Login"] = screenParameters;
						if (OSPage.IsAjaxRequest) {
							string sURLQuery = null;
							sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
							string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "Login.aspx" + sURLQuery;
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							Server.Transfer("Login.aspx");
						}
						return;

					}
				}

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "Login.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "Login.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamOriginalURL!= "")) {
				parameters.Add(new Pair<string, string>("OriginalURL", HttpUtility.UrlEncode(inParamOriginalURL, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Login", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Login", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance24 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance24");
			wt_Container31 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container31");
			wt_Container26 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container26");
			wt_Container44 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container44");
			wtLoginButton = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wtLoginButton");
			if (this.wtLoginButton != null) {
				this.wtLoginButton.Click += new System.EventHandler(this.wtLoginButton_Click);
			}
			wt_Container38 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container38");
			wt_Link15 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link15");
			if (this.wt_Link15 != null) {
				this.wt_Link15.Click += new System.EventHandler(this.wt_Link15_Click);
			}
			wt_Link56 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link56");
			if (this.wt_Link56 != null) {
				this.wt_Link56.Click += new System.EventHandler(this.wt_Link56_Click);
			}
			wt_Link6 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link6");
			if (this.wt_Link6 != null) {
				this.wt_Link6.Click += new System.EventHandler(this.wt_Link6_Click);
			}
			wt_Link45 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link45");
			if (this.wt_Link45 != null) {
				this.wt_Link45.Click += new System.EventHandler(this.wt_Link45_Click);
			}
			wt_Link9 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link9");
			if (this.wt_Link9 != null) {
				this.wt_Link9.Click += new System.EventHandler(this.wt_Link9_Click);
			}
			wt_Link47 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link47");
			if (this.wt_Link47 != null) {
				this.wt_Link47.Click += new System.EventHandler(this.wt_Link47_Click);
			}
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_Container31") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Container31");
			}
			if (id == "wtEditRecord1") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wtEditRecord1");
			}
			if (id == "wt_EditRecordRow1") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordRow1");
			}
			if (id == "wt_EditRecordCell60") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordCell60");
			}
			if (id == "wt_EditRecordCell53") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordCell53");
			}
			if (id == "wt_Text48") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Text48");
			}
			if (id == "wt_EditRecordRow61") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordRow61");
			}
			if (id == "wt_EditRecordCell8") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordCell8");
			}
			if (id == "wt_Text19") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Text19");
			}
			if (id == "wt_EditRecordCell51") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordCell51");
			}
			if (id == "wtUserNameInput") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wtUserNameInput");
			}
			if (id == "wt_EditRecordRow13") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordRow13");
			}
			if (id == "wt_EditRecordCell3") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordCell3");
			}
			if (id == "wt_Text58") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Text58");
			}
			if (id == "wt_EditRecordCell7") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordCell7");
			}
			if (id == "wtPasswordInput") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wtPasswordInput");
			}
			if (id == "wt_EditRecordRow10") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordRow10");
			}
			if (id == "wt_EditRecordCell36") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordCell36");
			}
			if (id == "wt_EditRecordCell39") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_EditRecordCell39");
			}
			if (id == "wt_Container26") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Container26");
			}
			if (id == "wt_CheckBox63") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_CheckBox63");
			}
			if (id == "wt_Text23") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Text23");
			}
			if (id == "wt_Container44") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Container44");
			}
			if (id == "wtLoginButton") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wtLoginButton");
			}
			if (id == "wt_If29") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_If29");
			}
			if (id == "wt_If29T") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_If29T");
			}
			if (id == "wt_Container38") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Container38");
			}
			if (id == "wt_Table32") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Table32");
			}
			if (id == "wt_TableRow52") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableRow52");
			}
			if (id == "wt_TableCell62") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableCell62");
			}
			if (id == "wt_Text46") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Text46");
			}
			if (id == "wt_TableRow4") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableRow4");
			}
			if (id == "wt_TableCell18") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableCell18");
			}
			if (id == "wt_Link15") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Link15");
			}
			if (id == "wt_InlineExpression50") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_InlineExpression50");
			}
			if (id == "wt_TableRow20") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableRow20");
			}
			if (id == "wt_TableCell43") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableCell43");
			}
			if (id == "wt_Link56") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Link56");
			}
			if (id == "wt_InlineExpression17") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_InlineExpression17");
			}
			if (id == "wt_TableRow34") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableRow34");
			}
			if (id == "wt_TableCell16") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableCell16");
			}
			if (id == "wt_Link6") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Link6");
			}
			if (id == "wt_InlineExpression14") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_InlineExpression14");
			}
			if (id == "wt_TableRow59") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableRow59");
			}
			if (id == "wt_TableCell42") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableCell42");
			}
			if (id == "wt_Link45") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Link45");
			}
			if (id == "wt_InlineExpression55") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_InlineExpression55");
			}
			if (id == "wt_TableRow11") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableRow11");
			}
			if (id == "wt_TableCell35") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableCell35");
			}
			if (id == "wt_Link9") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Link9");
			}
			if (id == "wt_InlineExpression33") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_InlineExpression33");
			}
			if (id == "wt_TableRow22") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableRow22");
			}
			if (id == "wt_TableCell2") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableCell2");
			}
			if (id == "wt_Link47") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_Link47");
			}
			if (id == "wt_InlineExpression5") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_InlineExpression5");
			}
			if (id == "wt_If29F") {
				return ThemeProvider_wt_WebBlockInstance24.wtMainContent.FindControl("wt_If29F");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Login"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamOriginalURL = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Login"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["OriginalURL"] != null) {
						inParamOriginalURL = Request.QueryString["OriginalURL"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["OriginalURL"] != null) {
						inParamOriginalURL = Request.Form["OriginalURL"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtEditRecord1_onDataBindingDataSource(this.FindControl("wtEditRecord1"), null);
				}
				Title = "Login"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Login", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wtLoginButton = wtLoginButton ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wtLoginButton");
			} catch {}
			string jsString = (wtLoginButton != null) ? "return OsEnterKey('" +wtLoginButton.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowCommon.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			return;
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("SV9KNOjVAUOS7pfFlW6SKA"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvLoginDummy: VarsBag {
			public string inParamuserdummy;
			public lcvLoginDummy(string inParamuserdummy) {
				this.inParamuserdummy = inParamuserdummy;
			}
		}
		/// <summary>
		/// Action <code>CommandLoginDummy</code> that represents the Service Studio screen action
		///  <code>LoginDummy</code> <p> Description: </p>
		/// </summary>
		private bool CommandLoginDummy(HeContext heContext, string inParamuserdummy) {
			CheckPermissions(heContext);
			lcvLoginDummy localVars = new lcvLoginDummy(inParamuserdummy);
			try {
				// User_Login
				Actions.ActionUser_Login(heContext, localVars.inParamuserdummy, "1234567", varLcRememberLogin);
				// Destination = HomePage

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "WKSQ_Cis+0SQKUbKih54NA";
						ArrayList screenParameters = new ArrayList();
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_HomePage"] = screenParameters;
						string sURLQuery = null;
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "HomePage.aspx" + sURLQuery;
						((OSPageViewState) Page).RedirectLocation = sURL;
						return false;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "WKSQ_Cis+0SQKUbKih54NA";
						ArrayList screenParameters = new ArrayList();
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_HomePage"] = screenParameters;
						Server.Transfer("HomePage.aspx");
						return false;

					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandLogin</code> that represents the Service Studio screen action
		///  <code>Login</code> <p> Description: </p>
		/// </summary>
		private bool CommandLogin(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Not Pass or Not UserName?
				if (((!((IWidgetRuntimeProperties) this.FindControl("wtPasswordInput")).Valid) || (!((IWidgetRuntimeProperties) this.FindControl("wtUserNameInput")).Valid))) {
					// Update Screen
					return true;

				} else {
					if ((((BuiltInFunction.Index(varLcUserName, "/", 0, false, false) >0) || (BuiltInFunction.Index(varLcUserName, "\\", 0, false, false) >0)) || (BuiltInFunction.Index(varLcUserName, "@", 0, false, false) >0))) {
						// Feedback_Message
						Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml("Login with only your UserName e.g. \'simon.davies\', not \'ccg\\simon.davies\' or \'simon.davies@cornwall.ac.uk\'"), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("0o80oKhv80mEG2V89eWP9w")).ssId);
						// Update Screen
						return true;

					} else {
						// User_Login
						Actions.ActionUser_Login(heContext, varLcUserName, varLcPassword, varLcRememberLogin);
						// LDAPSearchforUsersandGroups
						Actions.ActionLDAPSearchforUsersandGroups(heContext, varLcUserName);
						// Destination = HomePage

						if (OSPage.IsAjaxRequest) {
							// go to target page
							{

								((OSPage) Page).ClearErrorHandler();
								// get parameters
								heContext.Session["_ScreenParametersKey"] = "WKSQ_Cis+0SQKUbKih54NA";
								ArrayList screenParameters = new ArrayList();
								Global.App.OsContext.Session["CaseConferencing._ScreenParameters_HomePage"] = screenParameters;
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "HomePage.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
								return false;

							}
						} else {
							// go to target page
							{

								((OSPage) Page).ClearErrorHandler();
								// get parameters
								heContext.Session["_ScreenParametersKey"] = "WKSQ_Cis+0SQKUbKih54NA";
								ArrayList screenParameters = new ArrayList();
								Global.App.OsContext.Session["CaseConferencing._ScreenParameters_HomePage"] = screenParameters;
								Server.Transfer("HomePage.aspx");
								return false;

							}
						}

					}

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance24 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance24_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_Container31 Functions
		/// </summary>
		public void cnt_Container31_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container31_setInlineAttributes(sender, e);
		}
		public string cnt_Container31_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container31_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container31)
		/// </summary>
		/// <returns>The Visible State of wt_Container31</returns>
		public bool cnt_Container31_isVisible() {
			return true;
		}

		/// <summary>
		/// wtEditRecord1 Functions
		/// </summary>
		public void wtEditRecord1_onDataBindingDataSource(object sender, System.EventArgs e) {
		}
		/// <summary>
		/// wt_EditRecordCell8 Functions
		/// </summary>
		public void wt_EditRecordCell8_onDataBinding(object sender, System.EventArgs e) {
			wt_EditRecordCell8_setInlineAttributes(sender, e);
		}
		public string wt_EditRecordCell8_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-weight:600";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wtUserNameInput Functions
		/// </summary>
		public void inputwtUserNameInput_onDataBinding(object sender, System.EventArgs e) {
			inputwtUserNameInput_setInlineAttributes(sender, e);
		}
		public string inputwtUserNameInput_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["autofocus"] = "autofocus";
			return "";
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtUserNameInput_input_value() {
			if (("" !=varLcUserName)) {
				return varLcUserName;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtUserNameInput");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcUserName;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtUserNameInput_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcUserName = ""; 
				} else {
					varLcUserName = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcUserName = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtUserNameInput)
		/// </summary>
		/// <returns>The Visible State of wtUserNameInput</returns>
		public bool inputwtUserNameInput_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtUserNameInput)
		/// </summary>
		/// <returns>The Enabled State of wtUserNameInput</returns>
		public bool inputwtUserNameInput_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtUserNameInput)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtUserNameInput</returns>
		public bool inputwtUserNameInput_isMandatory() {
			return true;
		}

		/// <summary>
		/// wt_Text58 Functions
		/// </summary>
		public void wt_Text58_onDataBinding(object sender, System.EventArgs e) {
			wt_Text58_setInlineAttributes(sender, e);
		}
		public string wt_Text58_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-weight:600";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wtPasswordInput Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtPasswordInput_input_value() {
			return varLcPassword;
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtPasswordInput_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcPassword = ""; 
				} else {
					varLcPassword = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcPassword = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtPasswordInput)
		/// </summary>
		/// <returns>The Visible State of wtPasswordInput</returns>
		public bool inputwtPasswordInput_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtPasswordInput)
		/// </summary>
		/// <returns>The Enabled State of wtPasswordInput</returns>
		public bool inputwtPasswordInput_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtPasswordInput)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtPasswordInput</returns>
		public bool inputwtPasswordInput_isMandatory() {
			return true;
		}

		/// <summary>
		/// wt_EditRecordCell39 Functions
		/// </summary>
		public void wt_EditRecordCell39_onDataBinding(object sender, System.EventArgs e) {
			wt_EditRecordCell39_setInlineAttributes(sender, e);
		}
		public string wt_EditRecordCell39_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: top";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Container26 Functions
		/// </summary>
		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container26_setInlineAttributes(sender, e);
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container26_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_CheckBox63 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 7zBI_KywWEOSQtAJo4OgEg
		/// </summary>
		/// <returns>The Value of the Check Box 7zBI_KywWEOSQtAJo4OgEg</returns>
		public bool chk_CheckBox63_checked_value() {
			return varLcRememberLogin;
		}
		public void chk_CheckBox63_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				varLcRememberLogin = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox63)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox63</returns>
		public bool chk_CheckBox63_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox63)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox63</returns>
		public bool chk_CheckBox63_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Text23 Functions
		/// </summary>
		public void wt_Text23_onDataBinding(object sender, System.EventArgs e) {
			wt_Text23_setInlineAttributes(sender, e);
		}
		public string wt_Text23_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-weight:600";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Container44 Functions
		/// </summary>
		public void cnt_Container44_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container44_setInlineAttributes(sender, e);
		}
		public string cnt_Container44_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container44_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container44)
		/// </summary>
		/// <returns>The Visible State of wt_Container44</returns>
		public bool cnt_Container44_isVisible() {
			return true;
		}

		/// <summary>
		/// wtLoginButton Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtLoginButton_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandLogin(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wtLoginButton)
		/// </summary>
		/// <returns>Label of the Button (wtLoginButton)</returns>
		public string
		btnLoginButton_getLabel() {
			return "Login";
		}
		/// <summary>
		/// Gets the visible state of component (wtLoginButton)
		/// </summary>
		/// <returns>The Visible State of wtLoginButton</returns>
		public bool btnLoginButton_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtLoginButton)
		/// </summary>
		/// <returns>The Enabled State of wtLoginButton</returns>
		public bool btnLoginButton_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_If29 Functions
		/// </summary>
		bool if_wt_If29_hasRun=false;
		bool if_wt_If29_evalResult;
		public bool if_wt_If29() {
			if (if_wt_If29_hasRun) {
				if_wt_If29_hasRun = false;
				return if_wt_If29_evalResult;
			}
			if_wt_If29_hasRun = true;
			if_wt_If29_evalResult = ((bool) Global.SiteProperties["SampleLogins"]);
			return if_wt_If29_evalResult;
		}

		/// <summary>
		/// wt_Container38 Functions
		/// </summary>
		public void cnt_Container38_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container38_setInlineAttributes(sender, e);
		}
		public string cnt_Container38_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container38_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container38)
		/// </summary>
		/// <returns>The Visible State of wt_Container38</returns>
		public bool cnt_Container38_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Link15 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link15_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandLoginDummy(heContext, "CaseConferencingBackoffice")) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link15)
		/// </summary>
		/// <returns>title of the Link (wt_Link15)</returns>
		public string
		lnk_Link15_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link15)
		/// </summary>
		/// <returns>The Visible State of wt_Link15</returns>
		public bool lnk_Link15_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link15)
		/// </summary>
		/// <returns>The Enabled State of wt_Link15</returns>
		public bool lnk_Link15_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression50 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = vZF7tB5rB0uPWP4dLvLFKA) Expression: "CaseConferencing
		///  Backoffice"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression50() {
			return "CaseConferencing Backoffice";
		}
		/// <summary>
		/// wt_Link56 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link56_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandLoginDummy(heContext, "CaseConferencingUser")) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link56)
		/// </summary>
		/// <returns>title of the Link (wt_Link56)</returns>
		public string
		lnk_Link56_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link56)
		/// </summary>
		/// <returns>The Visible State of wt_Link56</returns>
		public bool lnk_Link56_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link56)
		/// </summary>
		/// <returns>The Enabled State of wt_Link56</returns>
		public bool lnk_Link56_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression17 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = uEtTRUQIf0SyfEWVCPIVUQ) Expression: "CaseConferencing User"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression17() {
			return "CaseConferencing User";
		}
		/// <summary>
		/// wt_Link6 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link6_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandLoginDummy(heContext, "Personal Tutor")) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link6)
		/// </summary>
		/// <returns>title of the Link (wt_Link6)</returns>
		public string
		lnk_Link6_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link6)
		/// </summary>
		/// <returns>The Visible State of wt_Link6</returns>
		public bool lnk_Link6_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link6)
		/// </summary>
		/// <returns>The Enabled State of wt_Link6</returns>
		public bool lnk_Link6_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression14 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = LNGtPb_KFUOx3NeY0sdJJQ) Expression: "Personal Tutor"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression14() {
			return "Personal Tutor";
		}
		/// <summary>
		/// wt_Link45 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link45_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandLoginDummy(heContext, "SafeGuardingLead")) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link45)
		/// </summary>
		/// <returns>title of the Link (wt_Link45)</returns>
		public string
		lnk_Link45_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link45)
		/// </summary>
		/// <returns>The Visible State of wt_Link45</returns>
		public bool lnk_Link45_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link45)
		/// </summary>
		/// <returns>The Enabled State of wt_Link45</returns>
		public bool lnk_Link45_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression55 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 7fIbwKoqUk6lJADVpTgDKQ) Expression: "SafeGuarding Lead"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression55() {
			return "SafeGuarding Lead";
		}
		/// <summary>
		/// wt_Link9 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link9_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandLoginDummy(heContext, "SLA")) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link9)
		/// </summary>
		/// <returns>title of the Link (wt_Link9)</returns>
		public string
		lnk_Link9_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link9)
		/// </summary>
		/// <returns>The Visible State of wt_Link9</returns>
		public bool lnk_Link9_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link9)
		/// </summary>
		/// <returns>The Enabled State of wt_Link9</returns>
		public bool lnk_Link9_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression33 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = VcqXbkjazUiBLdiz28T9+g) Expression: "SLA"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression33() {
			return "SLA";
		}
		/// <summary>
		/// wt_Link47 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link47_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandLoginDummy(heContext, "SuperUser")) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link47)
		/// </summary>
		/// <returns>title of the Link (wt_Link47)</returns>
		public string
		lnk_Link47_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link47)
		/// </summary>
		/// <returns>The Visible State of wt_Link47</returns>
		public bool lnk_Link47_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link47)
		/// </summary>
		/// <returns>The Enabled State of wt_Link47</returns>
		public bool lnk_Link47_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression5 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = iwW+D3X+RUulNdfxFyT7WQ) Expression: "SuperUser"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression5() {
			return "SuperUser";
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance30 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance30_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkRemovePopups widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkRemovePopups) sender;
		}


		public static class FuncCommandLoginDummy {
		}
		public static class FuncCommandLogin {
		}
		public static class FuncssPreparation {
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Login"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Login", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Login", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("varLcPassword", varLcPassword, "");
			ViewStateAttributes.SetInViewState("varLcUserName", varLcUserName, "");
			ViewStateAttributes.SetInViewState("varLcRememberLogin", varLcRememberLogin, false);
			ViewStateAttributes.SetInViewState("wtUserNameInput_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtUserNameInput")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtPasswordInput_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtPasswordInput")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				varLcPassword = (string) ViewStateAttributes.GetFromViewState("varLcPassword", "");
				varLcUserName = (string) ViewStateAttributes.GetFromViewState("varLcUserName", "");
				varLcRememberLogin = (bool) ViewStateAttributes.GetFromViewState("varLcRememberLogin", false);
				((IWidgetRuntimeProperties) this.FindControl("wtUserNameInput")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtUserNameInput_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtPasswordInput")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtPasswordInput_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtUserNameInput", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtPasswordInput", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
