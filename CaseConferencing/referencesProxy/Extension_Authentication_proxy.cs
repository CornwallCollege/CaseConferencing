/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

// Proxy for reference Extension with name Authentication and key iQkzwRPzq0STnGh8aFrZbg
using System;
using System.Data;
using System.Reflection;
using System.Collections;
using System.Runtime.Serialization;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using System.Web.UI;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.RuntimePlatform.Web;
using ssCaseConferencing;
namespace ssCaseConferencing {
	/// <summary>
	/// Class: RssExtensionAuthentication
	/// </summary>
	public class RssExtensionAuthentication {
		/// <summary>
		/// Extension Variable: issAuthentication
		/// </summary>
		protected static OutSystems.NssAuthentication.IssAuthentication issAuthentication = (OutSystems.NssAuthentication.IssAuthentication) new OutSystems.NssAuthentication.CssAuthentication();
		protected static int _maxExtensionLogsPerRequest = OutSystems.HubEdition.RuntimePlatform.Settings.GetInt(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Log_MaxLogsPerRequest_Extension);
		public static void MssSplitDomainAndUser(HeContext heContext, string inParamAccount, string inParamDefaultDomain, out string outParamDomain, out string outParamUsername) {
			DateTime startTime = DateTime.Now;
			String errorLogId = "";
			try {
				issAuthentication.MssSplitDomainAndUser(inParamAccount, inParamDefaultDomain, out outParamDomain, out outParamUsername);
			} catch (Exception ex) {
				errorLogId = ErrorLog.LogApplicationError(ex, heContext, "Extension method execution: Authentication.SplitDomainAndUser");
				throw ex;
			} finally {
				if (errorLogId != string.Empty || (!heContext.AppInfo.SelectiveLoggingEnabled ||
				(heContext.AppInfo.ExtensionProperties.AllowLogging(4) && heContext.AppInfo.Properties.AllowLogging))) {

					int extLogCount = heContext.ExtensionLogCount;
					if (extLogCount == _maxExtensionLogsPerRequest) {
						// issue warning
						GeneralLog.StaticWrite(
						DateTime.Now, heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, "The maximum number (" + _maxExtensionLogsPerRequest + ") of allowed Extension Log entries per request has been exceeded. No more entries will be logged in this request.",
						 "WARNING", "SLOWEXTENSION", "");
						heContext.ExtensionLogCount = extLogCount + 1;
					} else if (extLogCount < _maxExtensionLogsPerRequest) {
						ExtensionLog.StaticWrite(
						DateTime.Now, Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds), "SplitDomainAndUser",
						heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, 4, Environment.MachineName, errorLogId);
						heContext.ExtensionLogCount = extLogCount + 1;
					}
				}
				RuntimePlatformUtils.LogSlowExtensionCall(startTime, "Authentication.SplitDomainAndUser");
			}
		}




		public class Factory {
		}
		public class DefaultValues {
		}
	}
}
