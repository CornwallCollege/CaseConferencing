/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

// Proxy for reference eSpace with name ThemeProvider and key t2ij6MFLW0ahun__Ag1iyg
using System;
using System.Data;
using System.Reflection;
using System.Collections;
using System.Runtime.Serialization;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using System.Web.UI;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.RuntimePlatform.Web;
using ssCaseConferencing;
namespace ssCaseConferencing {
	/// <summary>
	/// Class: RsseSpaceThemeProvider
	/// </summary>
	public class RsseSpaceThemeProvider {
		protected static int _maxExtensionLogsPerRequest = OutSystems.HubEdition.RuntimePlatform.Settings.GetInt(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Log_MaxLogsPerRequest_Extension);
		public static void MssOnSessionStart(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				if (RuntimePlatformUtils.TestAndSetProducerSession("ThemeProvider")) {
					ssThemeProvider.Actions.ActionOnSessionStart(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public sealed partial class ENTabsEntity {
			public static string ViewName(int? tenant, string locale) {
				return ssThemeProvider.ENTabsEntity.ViewName(tenant, locale);
			}
			public const int eSpaceId = ssThemeProvider.Global.eSpaceId;
		} // ENTabsEntity
		partial class ENTabsEntity {


			public static IRecord GetRecordById(int id) {
				IRecord rec = Factory.FactoryENTabsEntityRecordSingleton.CreateENTabsEntityRecord();
				rec.FillFromOther(ssThemeProvider.ENTabsEntity.GetRecordById(id));
				return rec;
			}

			public static IRecord GetRecordByName(string name) {
				IRecord rec = Factory.FactoryENTabsEntityRecordSingleton.CreateENTabsEntityRecord();
				rec.FillFromOther(ssThemeProvider.ENTabsEntity.GetRecordByName(name));
				return rec;
			}

			public static IRecord GetRecordByKey(ObjectKey key) {
				IRecord rec = Factory.FactoryENTabsEntityRecordSingleton.CreateENTabsEntityRecord();
				rec.FillFromOther(ssThemeProvider.ENTabsEntity.GetRecordByKey(key));
				return rec;
			}
		} // ENTabsEntity;

		public sealed partial class ENColorEntity {
			public static string ViewName(int? tenant, string locale) {
				return ssThemeProvider.ENColorEntity.ViewName(tenant, locale);
			}
			public const int eSpaceId = ssThemeProvider.Global.eSpaceId;
		} // ENColorEntity
		partial class ENColorEntity {


			public static IRecord GetRecordById(string id) {
				IRecord rec = Factory.FactoryENColorEntityRecordSingleton.CreateENColorEntityRecord();
				rec.FillFromOther(ssThemeProvider.ENColorEntity.GetRecordById(id));
				return rec;
			}

			public static IRecord GetRecordByName(string name) {
				IRecord rec = Factory.FactoryENColorEntityRecordSingleton.CreateENColorEntityRecord();
				rec.FillFromOther(ssThemeProvider.ENColorEntity.GetRecordByName(name));
				return rec;
			}

			public static IRecord GetRecordByKey(ObjectKey key) {
				IRecord rec = Factory.FactoryENColorEntityRecordSingleton.CreateENColorEntityRecord();
				rec.FillFromOther(ssThemeProvider.ENColorEntity.GetRecordByKey(key));
				return rec;
			}
		} // ENColorEntity;

		public sealed partial class ENTileSizeEntity {
			public static string ViewName(int? tenant, string locale) {
				return ssThemeProvider.ENTileSizeEntity.ViewName(tenant, locale);
			}
			public const int eSpaceId = ssThemeProvider.Global.eSpaceId;
		} // ENTileSizeEntity
		partial class ENTileSizeEntity {


			public static IRecord GetRecordById(string id) {
				IRecord rec = Factory.FactoryENTileSizeEntityRecordSingleton.CreateENTileSizeEntityRecord();
				rec.FillFromOther(ssThemeProvider.ENTileSizeEntity.GetRecordById(id));
				return rec;
			}

			public static IRecord GetRecordByName(string name) {
				IRecord rec = Factory.FactoryENTileSizeEntityRecordSingleton.CreateENTileSizeEntityRecord();
				rec.FillFromOther(ssThemeProvider.ENTileSizeEntity.GetRecordByName(name));
				return rec;
			}

			public static IRecord GetRecordByKey(ObjectKey key) {
				IRecord rec = Factory.FactoryENTileSizeEntityRecordSingleton.CreateENTileSizeEntityRecord();
				rec.FillFromOther(ssThemeProvider.ENTileSizeEntity.GetRecordByKey(key));
				return rec;
			}
		} // ENTileSizeEntity;

		public sealed partial class ENMenuItem2Entity {
			public static string ViewName(int? tenant, string locale) {
				return ssThemeProvider.ENMenuItemEntity.ViewName(tenant, locale);
			}
			public const int eSpaceId = ssThemeProvider.Global.eSpaceId;
		} // ENMenuItem2Entity
		partial class ENMenuItem2Entity {


			public static IRecord GetRecordById(int id) {
				IRecord rec = Factory.FactoryENMenuItem2EntityRecordSingleton.CreateENMenuItem2EntityRecord();
				rec.FillFromOther(ssThemeProvider.ENMenuItemEntity.GetRecordById(id));
				return rec;
			}

			public static IRecord GetRecordByName(string name) {
				IRecord rec = Factory.FactoryENMenuItem2EntityRecordSingleton.CreateENMenuItem2EntityRecord();
				rec.FillFromOther(ssThemeProvider.ENMenuItemEntity.GetRecordByName(name));
				return rec;
			}

			public static IRecord GetRecordByKey(ObjectKey key) {
				IRecord rec = Factory.FactoryENMenuItem2EntityRecordSingleton.CreateENMenuItem2EntityRecord();
				rec.FillFromOther(ssThemeProvider.ENMenuItemEntity.GetRecordByKey(key));
				return rec;
			}
		} // ENMenuItem2Entity;


		public interface IENTabsEntityRecordTypeFactory {
			IRecord CreateENTabsEntityRecord();
		}
		public interface IENColorEntityRecordTypeFactory {
			IRecord CreateENColorEntityRecord();
		}
		public interface IENTileSizeEntityRecordTypeFactory {
			IRecord CreateENTileSizeEntityRecord();
		}
		public interface IENMenuItem2EntityRecordTypeFactory {
			IRecord CreateENMenuItem2EntityRecord();
		}

		public class Factory {
			public static IENTabsEntityRecordTypeFactory FactoryENTabsEntityRecordSingleton;
			public static IENColorEntityRecordTypeFactory FactoryENColorEntityRecordSingleton;
			public static IENTileSizeEntityRecordTypeFactory FactoryENTileSizeEntityRecordSingleton;
			public static IENMenuItem2EntityRecordTypeFactory FactoryENMenuItem2EntityRecordSingleton;
		}
		public class DefaultValues {
			public static int ReferenceWebFlow_Common2_ReferenceWebBlock_TabsSize3Client_Variables_ReferenceSerializableInputParameter_ActiveTab {
				get {
					return ssThemeProvider.DefaultValues.ReferenceWebFlow_Common_ReferenceWebBlock_TabsSize3Client_Variables_ReferenceSerializableInputParameter_ActiveTab; 
				}
			}
			public static int ReferenceWebFlow_Common2_ReferenceWebBlock_TabsClient_Variables_ReferenceSerializableInputParameter_ActiveTab {
				get {
					return ssThemeProvider.DefaultValues.ReferenceWebFlow_Common_ReferenceWebBlock_TabsClient_Variables_ReferenceSerializableInputParameter_ActiveTab; 
				}
			}
			public static string ReferenceWebFlow_Common2_ReferenceWebBlock_BreadCrumb_Variables_ReferenceSerializableInputParameter_Separator {
				get {
					return ssThemeProvider.DefaultValues.ReferenceWebFlow_Common_ReferenceWebBlock_BreadCrumb_Variables_ReferenceSerializableInputParameter_Separator; 
				}
			}
			public static string ReferenceWebFlow_Common2_ReferenceWebBlock_TileIcon_Variables_ReferenceSerializableInputParameter_BackgroundColor {
				get {
					return ssThemeProvider.DefaultValues.ReferenceWebFlow_Common_ReferenceWebBlock_TileIcon_Variables_ReferenceSerializableInputParameter_BackgroundColor; 
				}
			}
			public static string ReferenceWebFlow_Common2_ReferenceWebBlock_TileIcon_Variables_ReferenceSerializableInputParameter_Icon {
				get {
					return ssThemeProvider.DefaultValues.ReferenceWebFlow_Common_ReferenceWebBlock_TileIcon_Variables_ReferenceSerializableInputParameter_Icon; 
				}
			}
			public static string ReferenceWebFlow_Common2_ReferenceWebBlock_TileIcon_Variables_ReferenceSerializableInputParameter_Size {
				get {
					return ssThemeProvider.DefaultValues.ReferenceWebFlow_Common_ReferenceWebBlock_TileIcon_Variables_ReferenceSerializableInputParameter_Size; 
				}
			}
			public static int ReferenceWebFlow_Common2_ReferenceWebBlock_TabsWizard_Variables_ReferenceSerializableInputParameter_ActiveTab {
				get {
					return ssThemeProvider.DefaultValues.ReferenceWebFlow_Common_ReferenceWebBlock_TabsWizard_Variables_ReferenceSerializableInputParameter_ActiveTab; 
				}
			}
			public static int ReferenceWebFlow_MainLayouts_ReferenceWebBlock_Menu_Backoffice_Variables_ReferenceSerializableInputParameter_ActiveMenuItem {
				get {
					return ssThemeProvider.DefaultValues.ReferenceWebFlow_MainLayouts_ReferenceWebBlock_Menu_Backoffice_Variables_ReferenceSerializableInputParameter_ActiveMenuItem; 
				}
			}
			public static int ReferenceWebFlow_MainLayouts_ReferenceWebBlock_Menu_Main_Variables_ReferenceSerializableInputParameter_ActiveMenuItem {
				get {
					return ssThemeProvider.DefaultValues.ReferenceWebFlow_MainLayouts_ReferenceWebBlock_Menu_Main_Variables_ReferenceSerializableInputParameter_ActiveMenuItem; 
				}
			}
		}
		public class Themes {
			public class ThemeThemeProvider {

				public static string ThemeCssUrl {
					get {
						return "/ThemeProvider/Theme.ThemeProvider.css"; 
					}
				}

				public static string ThemeExtraCssUrl {
					get {
						return "/ThemeProvider/Theme.ThemeProvider.extra.css"; 
					}
				}

				public class ExceptionHandler {

					private readonly OSPage page;
					private readonly bool isEmailScreen;

					public ExceptionHandler(OSPage page, bool isEmailScreen) {
						this.page = page;
						this.isEmailScreen = isEmailScreen;
					}

					private OSPage Page {
						get {
							return page; 
						}
					}

					public bool HandleException() {
						LocalState dummy = null;
						return HandleException(ref dummy);
					}

					public bool HandleException(ref LocalState flowState) {
						return new ssThemeProvider.Themes.ThemeThemeProvider.ExceptionHandler(Page, isEmailScreen).HandleException(ref flowState);

					}
				}
			}
			public class ThemeThemeProviderWithoutLondon {

				public static string ThemeCssUrl {
					get {
						return "/ThemeProvider/Theme.ThemeProviderWithoutLondon.css"; 
					}
				}

				public static string ThemeExtraCssUrl {
					get {
						return "/ThemeProvider/Theme.ThemeProviderWithoutLondon.extra.css"; 
					}
				}

				public class ExceptionHandler {

					private readonly OSPage page;
					private readonly bool isEmailScreen;

					public ExceptionHandler(OSPage page, bool isEmailScreen) {
						this.page = page;
						this.isEmailScreen = isEmailScreen;
					}

					private OSPage Page {
						get {
							return page; 
						}
					}

					public bool HandleException() {
						LocalState dummy = null;
						return HandleException(ref dummy);
					}

					public bool HandleException(ref LocalState flowState) {
						return new ssThemeProvider.Themes.ThemeThemeProviderWithoutLondon.ExceptionHandler(Page, isEmailScreen).HandleException(ref flowState);

					}
				}
			}
		}

	}
}
namespace proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon {
	public class WBlkTabsSize3Client: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssThemeProvider.Flows.FlowCommon.WBlkTabsSize3Client block;
		public Container wtContent3 {
			get {
				return block.wtContent3; 
			}
		}
		public System.Web.UI.ITemplate phContent3 {
			get; set; 
		}
		public Container wtContent2 {
			get {
				return block.wtContent2; 
			}
		}
		public System.Web.UI.ITemplate phContent2 {
			get; set; 
		}
		public Container wtContent1 {
			get {
				return block.wtContent1; 
			}
		}
		public System.Web.UI.ITemplate phContent1 {
			get; set; 
		}
		public Container wtTab1 {
			get {
				return block.wtTab1; 
			}
		}
		public System.Web.UI.ITemplate phTab1 {
			get; set; 
		}
		public Container wtTab2 {
			get {
				return block.wtTab2; 
			}
		}
		public System.Web.UI.ITemplate phTab2 {
			get; set; 
		}
		public Container wtTab3 {
			get {
				return block.wtTab3; 
			}
		}
		public System.Web.UI.ITemplate phTab3 {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phContent3 = phContent3;
			block.phContent3.InstantiateIn(block.wtContent3);
			block.phContent2 = phContent2;
			block.phContent2.InstantiateIn(block.wtContent2);
			block.phContent1 = phContent1;
			block.phContent1.InstantiateIn(block.wtContent1);
			block.phTab1 = phTab1;
			block.phTab1.InstantiateIn(block.wtTab1);
			block.phTab2 = phTab2;
			block.phTab2.InstantiateIn(block.wtTab2);
			block.phTab3 = phTab3;
			block.phTab3.InstantiateIn(block.wtTab3);
		}
		static WBlkTabsSize3Client() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceThemeProvider.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssThemeProvider.Flows.FlowCommon.WBlkTabsSize3Client webBlock = (ssThemeProvider.Flows.FlowCommon.WBlkTabsSize3Client) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssThemeProvider.Flows.FlowCommon.WBlkTabsSize3Client.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable ActiveTab
		public int inParamActiveTab {
			get {
				return block.inParamActiveTab;
			}
			set {
				block.inParamActiveTab = value;
			}
		}

		// block input variable LoadOnClick
		public bool inParamLoadOnClick {
			get {
				return block.inParamLoadOnClick;
			}
			set {
				block.inParamLoadOnClick = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon {
	public class WBlkTabsClient: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssThemeProvider.Flows.FlowCommon.WBlkTabsClient block;
		public Container wtContent6 {
			get {
				return block.wtContent6; 
			}
		}
		public System.Web.UI.ITemplate phContent6 {
			get; set; 
		}
		public Container wtContent5 {
			get {
				return block.wtContent5; 
			}
		}
		public System.Web.UI.ITemplate phContent5 {
			get; set; 
		}
		public Container wtContent4 {
			get {
				return block.wtContent4; 
			}
		}
		public System.Web.UI.ITemplate phContent4 {
			get; set; 
		}
		public Container wtContent3 {
			get {
				return block.wtContent3; 
			}
		}
		public System.Web.UI.ITemplate phContent3 {
			get; set; 
		}
		public Container wtContent2 {
			get {
				return block.wtContent2; 
			}
		}
		public System.Web.UI.ITemplate phContent2 {
			get; set; 
		}
		public Container wtContent1 {
			get {
				return block.wtContent1; 
			}
		}
		public System.Web.UI.ITemplate phContent1 {
			get; set; 
		}
		public Container wtTab1 {
			get {
				return block.wtTab1; 
			}
		}
		public System.Web.UI.ITemplate phTab1 {
			get; set; 
		}
		public Container wtTab2 {
			get {
				return block.wtTab2; 
			}
		}
		public System.Web.UI.ITemplate phTab2 {
			get; set; 
		}
		public Container wtTab3 {
			get {
				return block.wtTab3; 
			}
		}
		public System.Web.UI.ITemplate phTab3 {
			get; set; 
		}
		public Container wtTab4 {
			get {
				return block.wtTab4; 
			}
		}
		public System.Web.UI.ITemplate phTab4 {
			get; set; 
		}
		public Container wtTab5 {
			get {
				return block.wtTab5; 
			}
		}
		public System.Web.UI.ITemplate phTab5 {
			get; set; 
		}
		public Container wtTab6 {
			get {
				return block.wtTab6; 
			}
		}
		public System.Web.UI.ITemplate phTab6 {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phContent6 = phContent6;
			block.phContent6.InstantiateIn(block.wtContent6);
			block.phContent5 = phContent5;
			block.phContent5.InstantiateIn(block.wtContent5);
			block.phContent4 = phContent4;
			block.phContent4.InstantiateIn(block.wtContent4);
			block.phContent3 = phContent3;
			block.phContent3.InstantiateIn(block.wtContent3);
			block.phContent2 = phContent2;
			block.phContent2.InstantiateIn(block.wtContent2);
			block.phContent1 = phContent1;
			block.phContent1.InstantiateIn(block.wtContent1);
			block.phTab1 = phTab1;
			block.phTab1.InstantiateIn(block.wtTab1);
			block.phTab2 = phTab2;
			block.phTab2.InstantiateIn(block.wtTab2);
			block.phTab3 = phTab3;
			block.phTab3.InstantiateIn(block.wtTab3);
			block.phTab4 = phTab4;
			block.phTab4.InstantiateIn(block.wtTab4);
			block.phTab5 = phTab5;
			block.phTab5.InstantiateIn(block.wtTab5);
			block.phTab6 = phTab6;
			block.phTab6.InstantiateIn(block.wtTab6);
		}
		static WBlkTabsClient() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceThemeProvider.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssThemeProvider.Flows.FlowCommon.WBlkTabsClient webBlock = (ssThemeProvider.Flows.FlowCommon.WBlkTabsClient) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssThemeProvider.Flows.FlowCommon.WBlkTabsClient.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable ActiveTab
		public int inParamActiveTab {
			get {
				return block.inParamActiveTab;
			}
			set {
				block.inParamActiveTab = value;
			}
		}

		// block input variable LoadOnClick
		public bool inParamLoadOnClick {
			get {
				return block.inParamLoadOnClick;
			}
			set {
				block.inParamLoadOnClick = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon {
	public class WBlkBreadCrumb: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssThemeProvider.Flows.FlowCommon.WBlkBreadCrumb block;
		public Container wtLevel1 {
			get {
				return block.wtLevel1; 
			}
		}
		public System.Web.UI.ITemplate phLevel1 {
			get; set; 
		}
		public Container wtLevel6 {
			get {
				return block.wtLevel6; 
			}
		}
		public System.Web.UI.ITemplate phLevel6 {
			get; set; 
		}
		public Container wtLevel5 {
			get {
				return block.wtLevel5; 
			}
		}
		public System.Web.UI.ITemplate phLevel5 {
			get; set; 
		}
		public Container wtLevel4 {
			get {
				return block.wtLevel4; 
			}
		}
		public System.Web.UI.ITemplate phLevel4 {
			get; set; 
		}
		public Container wtLevel3 {
			get {
				return block.wtLevel3; 
			}
		}
		public System.Web.UI.ITemplate phLevel3 {
			get; set; 
		}
		public Container wtLevel2 {
			get {
				return block.wtLevel2; 
			}
		}
		public System.Web.UI.ITemplate phLevel2 {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phLevel1 = phLevel1;
			block.phLevel1.InstantiateIn(block.wtLevel1);
			block.phLevel6 = phLevel6;
			block.phLevel6.InstantiateIn(block.wtLevel6);
			block.phLevel5 = phLevel5;
			block.phLevel5.InstantiateIn(block.wtLevel5);
			block.phLevel4 = phLevel4;
			block.phLevel4.InstantiateIn(block.wtLevel4);
			block.phLevel3 = phLevel3;
			block.phLevel3.InstantiateIn(block.wtLevel3);
			block.phLevel2 = phLevel2;
			block.phLevel2.InstantiateIn(block.wtLevel2);
		}
		static WBlkBreadCrumb() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceThemeProvider.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssThemeProvider.Flows.FlowCommon.WBlkBreadCrumb webBlock = (ssThemeProvider.Flows.FlowCommon.WBlkBreadCrumb) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssThemeProvider.Flows.FlowCommon.WBlkBreadCrumb.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable Separator
		public string inParamSeparator {
			get {
				return block.inParamSeparator;
			}
			set {
				block.inParamSeparator = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon {
	public class WBlkTileIcon: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssThemeProvider.Flows.FlowCommon.WBlkTileIcon block;
		public Container wtNotes {
			get {
				return block.wtNotes; 
			}
		}
		public System.Web.UI.ITemplate phNotes {
			get; set; 
		}
		public Container wtText {
			get {
				return block.wtText; 
			}
		}
		public System.Web.UI.ITemplate phText {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phNotes = phNotes;
			block.phNotes.InstantiateIn(block.wtNotes);
			block.phText = phText;
			block.phText.InstantiateIn(block.wtText);
		}
		static WBlkTileIcon() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceThemeProvider.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssThemeProvider.Flows.FlowCommon.WBlkTileIcon webBlock = (ssThemeProvider.Flows.FlowCommon.WBlkTileIcon) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssThemeProvider.Flows.FlowCommon.WBlkTileIcon.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable BackgroundColor
		public string inParamBackgroundColor {
			get {
				return block.inParamBackgroundColor;
			}
			set {
				block.inParamBackgroundColor = value;
			}
		}

		// block input variable Icon
		public string inParamIcon {
			get {
				return block.inParamIcon;
			}
			set {
				block.inParamIcon = value;
			}
		}

		// block input variable TooltipText
		public string inParamTooltipText {
			get {
				return block.inParamTooltipText;
			}
			set {
				block.inParamTooltipText = value;
			}
		}

		// block input variable Size
		public string inParamSize {
			get {
				return block.inParamSize;
			}
			set {
				block.inParamSize = value;
			}
		}

		// block input variable IsDisabled
		public bool inParamIsDisabled {
			get {
				return block.inParamIsDisabled;
			}
			set {
				block.inParamIsDisabled = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon {
	public class WBlkTabsWizard: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssThemeProvider.Flows.FlowCommon.WBlkTabsWizard block;
		public Container wtContent6 {
			get {
				return block.wtContent6; 
			}
		}
		public System.Web.UI.ITemplate phContent6 {
			get; set; 
		}
		public Container wtContent5 {
			get {
				return block.wtContent5; 
			}
		}
		public System.Web.UI.ITemplate phContent5 {
			get; set; 
		}
		public Container wtContent4 {
			get {
				return block.wtContent4; 
			}
		}
		public System.Web.UI.ITemplate phContent4 {
			get; set; 
		}
		public Container wtContent3 {
			get {
				return block.wtContent3; 
			}
		}
		public System.Web.UI.ITemplate phContent3 {
			get; set; 
		}
		public Container wtContent2 {
			get {
				return block.wtContent2; 
			}
		}
		public System.Web.UI.ITemplate phContent2 {
			get; set; 
		}
		public Container wtContent1 {
			get {
				return block.wtContent1; 
			}
		}
		public System.Web.UI.ITemplate phContent1 {
			get; set; 
		}
		public Container wtTab1 {
			get {
				return block.wtTab1; 
			}
		}
		public System.Web.UI.ITemplate phTab1 {
			get; set; 
		}
		public Container wtTab2 {
			get {
				return block.wtTab2; 
			}
		}
		public System.Web.UI.ITemplate phTab2 {
			get; set; 
		}
		public Container wtTab3 {
			get {
				return block.wtTab3; 
			}
		}
		public System.Web.UI.ITemplate phTab3 {
			get; set; 
		}
		public Container wtTab4 {
			get {
				return block.wtTab4; 
			}
		}
		public System.Web.UI.ITemplate phTab4 {
			get; set; 
		}
		public Container wtTab5 {
			get {
				return block.wtTab5; 
			}
		}
		public System.Web.UI.ITemplate phTab5 {
			get; set; 
		}
		public Container wtTab6 {
			get {
				return block.wtTab6; 
			}
		}
		public System.Web.UI.ITemplate phTab6 {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phContent6 = phContent6;
			block.phContent6.InstantiateIn(block.wtContent6);
			block.phContent5 = phContent5;
			block.phContent5.InstantiateIn(block.wtContent5);
			block.phContent4 = phContent4;
			block.phContent4.InstantiateIn(block.wtContent4);
			block.phContent3 = phContent3;
			block.phContent3.InstantiateIn(block.wtContent3);
			block.phContent2 = phContent2;
			block.phContent2.InstantiateIn(block.wtContent2);
			block.phContent1 = phContent1;
			block.phContent1.InstantiateIn(block.wtContent1);
			block.phTab1 = phTab1;
			block.phTab1.InstantiateIn(block.wtTab1);
			block.phTab2 = phTab2;
			block.phTab2.InstantiateIn(block.wtTab2);
			block.phTab3 = phTab3;
			block.phTab3.InstantiateIn(block.wtTab3);
			block.phTab4 = phTab4;
			block.phTab4.InstantiateIn(block.wtTab4);
			block.phTab5 = phTab5;
			block.phTab5.InstantiateIn(block.wtTab5);
			block.phTab6 = phTab6;
			block.phTab6.InstantiateIn(block.wtTab6);
		}
		static WBlkTabsWizard() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceThemeProvider.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssThemeProvider.Flows.FlowCommon.WBlkTabsWizard webBlock = (ssThemeProvider.Flows.FlowCommon.WBlkTabsWizard) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssThemeProvider.Flows.FlowCommon.WBlkTabsWizard.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable ActiveTab
		public int inParamActiveTab {
			get {
				return block.inParamActiveTab;
			}
			set {
				block.inParamActiveTab = value;
			}
		}

		// block input variable LoadOnClick
		public bool inParamLoadOnClick {
			get {
				return block.inParamLoadOnClick;
			}
			set {
				block.inParamLoadOnClick = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts {
	public class WBlkMenu_Backoffice: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice block;
		static WBlkMenu_Backoffice() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceThemeProvider.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice webBlock = (ssThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable ActiveMenuItem
		public int inParamActiveMenuItem {
			get {
				return block.inParamActiveMenuItem;
			}
			set {
				block.inParamActiveMenuItem = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts {
	public class WBlkHeader_NoHelpLink: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssThemeProvider.Flows.FlowMainLayouts.WBlkHeader_NoHelpLink block;
		public Container wtHeaderActions {
			get {
				return block.wtHeaderActions; 
			}
		}
		public System.Web.UI.ITemplate phHeaderActions {
			get; set; 
		}
		public Container wtHelpUpdate {
			get {
				return block.wtHelpUpdate; 
			}
		}
		public System.Web.UI.ITemplate phHelpUpdate {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phHeaderActions = phHeaderActions;
			block.phHeaderActions.InstantiateIn(block.wtHeaderActions);
			block.phHelpUpdate = phHelpUpdate;
			block.phHelpUpdate.InstantiateIn(block.wtHelpUpdate);
		}
		static WBlkHeader_NoHelpLink() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceThemeProvider.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssThemeProvider.Flows.FlowMainLayouts.WBlkHeader_NoHelpLink webBlock = (ssThemeProvider.Flows.FlowMainLayouts.WBlkHeader_NoHelpLink) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssThemeProvider.Flows.FlowMainLayouts.WBlkHeader_NoHelpLink.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

	}

}
namespace proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts {
	public class WBlkHeader: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssThemeProvider.Flows.FlowMainLayouts.WBlkHeader block;
		public Container wtHeaderActions {
			get {
				return block.wtHeaderActions; 
			}
		}
		public System.Web.UI.ITemplate phHeaderActions {
			get; set; 
		}
		public Container wtHelpUpdate {
			get {
				return block.wtHelpUpdate; 
			}
		}
		public System.Web.UI.ITemplate phHelpUpdate {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phHeaderActions = phHeaderActions;
			block.phHeaderActions.InstantiateIn(block.wtHeaderActions);
			block.phHelpUpdate = phHelpUpdate;
			block.phHelpUpdate.InstantiateIn(block.wtHelpUpdate);
		}
		static WBlkHeader() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceThemeProvider.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssThemeProvider.Flows.FlowMainLayouts.WBlkHeader webBlock = (ssThemeProvider.Flows.FlowMainLayouts.WBlkHeader) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssThemeProvider.Flows.FlowMainLayouts.WBlkHeader.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

	}

}
namespace proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts {
	public class WBlkMenu_Main: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main block;
		static WBlkMenu_Main() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceThemeProvider.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main webBlock = (ssThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable ActiveMenuItem
		public int inParamActiveMenuItem {
			get {
				return block.inParamActiveMenuItem;
			}
			set {
				block.inParamActiveMenuItem = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts {
	public class WBlkLayout_Main: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main block;
		public Container wtMainContent {
			get {
				return block.wtMainContent; 
			}
		}
		public System.Web.UI.ITemplate phMainContent {
			get; set; 
		}
		public Container wtTitle {
			get {
				return block.wtTitle; 
			}
		}
		public System.Web.UI.ITemplate phTitle {
			get; set; 
		}
		public Container wtActions {
			get {
				return block.wtActions; 
			}
		}
		public System.Web.UI.ITemplate phActions {
			get; set; 
		}
		public Container wtHeaderActions {
			get {
				return block.wtHeaderActions; 
			}
		}
		public System.Web.UI.ITemplate phHeaderActions {
			get; set; 
		}
		public Container wtHelpUpdate {
			get {
				return block.wtHelpUpdate; 
			}
		}
		public System.Web.UI.ITemplate phHelpUpdate {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phMainContent = phMainContent;
			block.phMainContent.InstantiateIn(block.wtMainContent);
			block.phTitle = phTitle;
			block.phTitle.InstantiateIn(block.wtTitle);
			block.phActions = phActions;
			block.phActions.InstantiateIn(block.wtActions);
			block.phHeaderActions = phHeaderActions;
			block.phHeaderActions.InstantiateIn(block.wtHeaderActions);
			block.phHelpUpdate = phHelpUpdate;
			block.phHelpUpdate.InstantiateIn(block.wtHelpUpdate);
		}
		static WBlkLayout_Main() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssThemeProvider.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceThemeProvider.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 22;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main webBlock = (ssThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

	}

}
