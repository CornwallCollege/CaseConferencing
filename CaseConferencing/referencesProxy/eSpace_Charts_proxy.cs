/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

// Proxy for reference eSpace with name Charts and key 1AW8fbwdt0+nDucOxv05vw
using System;
using System.Data;
using System.Reflection;
using System.Collections;
using System.Runtime.Serialization;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using System.Web.UI;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.RuntimePlatform.Web;
using ssCaseConferencing;
namespace ssCaseConferencing {
	/// <summary>
	/// Class: RsseSpaceCharts
	/// </summary>
	public class RsseSpaceCharts {
		protected static int _maxExtensionLogsPerRequest = OutSystems.HubEdition.RuntimePlatform.Settings.GetInt(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Log_MaxLogsPerRequest_Extension);
		public static void MssDataPoint_Init(HeContext heContext, string inParamLabel, decimal inParamValue, string inParamDataSeriesName, string inParamTooltip, string inParamColor, out IRecord outParamDataPoint) {
			outParamDataPoint = ssCaseConferencing.RsseSpaceCharts.Factory.FactoryRCDataPointRecordSingleton.CreateRsseSpaceChartsRCDataPointRecord();
			ssCharts.RCDataPointRecord _proxyoutParamDataPoint = new ssCharts.RCDataPointRecord(null);
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCharts.Global.eSpaceId;
				RsseSpaceCharts.MssOnSessionStart(heContext);
				ssCharts.Actions.ActionDataPoint_Init(heContext, inParamLabel, inParamValue, inParamDataSeriesName, inParamTooltip, inParamColor, out _proxyoutParamDataPoint);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
			outParamDataPoint.FillFromOther(_proxyoutParamDataPoint);
		}


		public static void MssChartFormat_Init(HeContext heContext, bool inParamShowDataPointValues, bool inParamUseAnimation, out IRecord outParamChartFormat) {
			outParamChartFormat = ssCaseConferencing.RsseSpaceCharts.Factory.FactoryRCChartFormatRecordSingleton.CreateRsseSpaceChartsRCChartFormatRecord();
			ssCharts.RCChartFormatRecord _proxyoutParamChartFormat = new ssCharts.RCChartFormatRecord(null);
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCharts.Global.eSpaceId;
				RsseSpaceCharts.MssOnSessionStart(heContext);
				ssCharts.Actions.ActionChartFormat_Init(heContext, inParamShowDataPointValues, inParamUseAnimation, out _proxyoutParamChartFormat);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
			outParamChartFormat.FillFromOther(_proxyoutParamChartFormat);
		}


		public static void MssDataPoint_GetClicked(HeContext heContext, out IRecord outParamDataPoint) {
			outParamDataPoint = ssCaseConferencing.RsseSpaceCharts.Factory.FactoryRCDataPointRecordSingleton.CreateRsseSpaceChartsRCDataPointRecord();
			ssCharts.RCDataPointRecord _proxyoutParamDataPoint = new ssCharts.RCDataPointRecord(null);
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCharts.Global.eSpaceId;
				RsseSpaceCharts.MssOnSessionStart(heContext);
				ssCharts.Actions.ActionDataPoint_GetClicked(heContext, out _proxyoutParamDataPoint);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
			outParamDataPoint.FillFromOther(_proxyoutParamDataPoint);
		}


		public static void MssAdvancedFormat_Init(HeContext heContext, RecordList inParamDataPointFormats, RecordList inParamDataSeriesFormats, string inParamXAxisJSON, string inParamYAxisJSON, string inParamHighchartsJSON, out IRecord outParamAdvancedFormat) {
			ssCharts.RLAdvancedDataPointFormatRecordList _proxyinParamDataPointFormats = new ssCharts.RLAdvancedDataPointFormatRecordList();
			ssCharts.RLAdvancedDataSeriesFormatRecordList _proxyinParamDataSeriesFormats = new ssCharts.RLAdvancedDataSeriesFormatRecordList();
			outParamAdvancedFormat = ssCaseConferencing.RsseSpaceCharts.Factory.FactoryRCAdvancedFormatRecordSingleton.CreateRsseSpaceChartsRCAdvancedFormatRecord();
			ssCharts.RCAdvancedFormatRecord _proxyoutParamAdvancedFormat = new ssCharts.RCAdvancedFormatRecord(null);
			_proxyinParamDataPointFormats.FillFromOther(inParamDataPointFormats);
			_proxyinParamDataSeriesFormats.FillFromOther(inParamDataSeriesFormats);
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCharts.Global.eSpaceId;
				RsseSpaceCharts.MssOnSessionStart(heContext);
				ssCharts.Actions.ActionAdvancedFormat_Init(heContext, _proxyinParamDataPointFormats, _proxyinParamDataSeriesFormats, inParamXAxisJSON, inParamYAxisJSON, inParamHighchartsJSON, out _proxyoutParamAdvancedFormat);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
			outParamAdvancedFormat.FillFromOther(_proxyoutParamAdvancedFormat);
		}


		public static void MssOnSessionStart(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCharts.Global.eSpaceId;
				if (RuntimePlatformUtils.TestAndSetProducerSession("Charts")) {
					ssCharts.Actions.ActionOnSessionStart(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public sealed partial class ENXAxisValuesTypeEntity {
			public static string ViewName(int? tenant, string locale) {
				return ssCharts.ENXAxisValuesTypeEntity.ViewName(tenant, locale);
			}
			public const int eSpaceId = ssCharts.Global.eSpaceId;
		} // ENXAxisValuesTypeEntity
		partial class ENXAxisValuesTypeEntity {


			public static IRecord GetRecordById(int id) {
				IRecord rec = Factory.FactoryENXAxisValuesTypeEntityRecordSingleton.CreateENXAxisValuesTypeEntityRecord();
				rec.FillFromOther(ssCharts.ENXAxisValuesTypeEntity.GetRecordById(id));
				return rec;
			}

			public static IRecord GetRecordByName(string name) {
				IRecord rec = Factory.FactoryENXAxisValuesTypeEntityRecordSingleton.CreateENXAxisValuesTypeEntityRecord();
				rec.FillFromOther(ssCharts.ENXAxisValuesTypeEntity.GetRecordByName(name));
				return rec;
			}

			public static IRecord GetRecordByKey(ObjectKey key) {
				IRecord rec = Factory.FactoryENXAxisValuesTypeEntityRecordSingleton.CreateENXAxisValuesTypeEntityRecord();
				rec.FillFromOther(ssCharts.ENXAxisValuesTypeEntity.GetRecordByKey(key));
				return rec;
			}
		} // ENXAxisValuesTypeEntity;

		public sealed partial class ENLegendPositionEntity {
			public static string ViewName(int? tenant, string locale) {
				return ssCharts.ENLegendPositionEntity.ViewName(tenant, locale);
			}
			public const int eSpaceId = ssCharts.Global.eSpaceId;
		} // ENLegendPositionEntity
		partial class ENLegendPositionEntity {


			public static IRecord GetRecordById(int id) {
				IRecord rec = Factory.FactoryENLegendPositionEntityRecordSingleton.CreateENLegendPositionEntityRecord();
				rec.FillFromOther(ssCharts.ENLegendPositionEntity.GetRecordById(id));
				return rec;
			}

			public static IRecord GetRecordByName(string name) {
				IRecord rec = Factory.FactoryENLegendPositionEntityRecordSingleton.CreateENLegendPositionEntityRecord();
				rec.FillFromOther(ssCharts.ENLegendPositionEntity.GetRecordByName(name));
				return rec;
			}

			public static IRecord GetRecordByKey(ObjectKey key) {
				IRecord rec = Factory.FactoryENLegendPositionEntityRecordSingleton.CreateENLegendPositionEntityRecord();
				rec.FillFromOther(ssCharts.ENLegendPositionEntity.GetRecordByKey(key));
				return rec;
			}
		} // ENLegendPositionEntity;

		public sealed partial class ENStackingTypeEntity {
			public static string ViewName(int? tenant, string locale) {
				return ssCharts.ENStackingTypeEntity.ViewName(tenant, locale);
			}
			public const int eSpaceId = ssCharts.Global.eSpaceId;
		} // ENStackingTypeEntity
		partial class ENStackingTypeEntity {


			public static IRecord GetRecordById(int id) {
				IRecord rec = Factory.FactoryENStackingTypeEntityRecordSingleton.CreateENStackingTypeEntityRecord();
				rec.FillFromOther(ssCharts.ENStackingTypeEntity.GetRecordById(id));
				return rec;
			}

			public static IRecord GetRecordByName(string name) {
				IRecord rec = Factory.FactoryENStackingTypeEntityRecordSingleton.CreateENStackingTypeEntityRecord();
				rec.FillFromOther(ssCharts.ENStackingTypeEntity.GetRecordByName(name));
				return rec;
			}

			public static IRecord GetRecordByKey(ObjectKey key) {
				IRecord rec = Factory.FactoryENStackingTypeEntityRecordSingleton.CreateENStackingTypeEntityRecord();
				rec.FillFromOther(ssCharts.ENStackingTypeEntity.GetRecordByKey(key));
				return rec;
			}
		} // ENStackingTypeEntity;

		public interface IRCDataPointRecordTypeFactory {
			IRecord CreateRsseSpaceChartsRCDataPointRecord();
		}
		public interface ISTDataPointStructureTypeFactory {
			IRecord CreateRsseSpaceChartsSTDataPointStructure();
		}
		public interface IRCChartFormatRecordTypeFactory {
			IRecord CreateRsseSpaceChartsRCChartFormatRecord();
		}
		public interface ISTChartFormatStructureTypeFactory {
			IRecord CreateRsseSpaceChartsSTChartFormatStructure();
		}
		public interface IRLAdvancedDataPointFormatRecordListTypeFactory {
			RecordList CreateRsseSpaceChartsRLAdvancedDataPointFormatRecordList();
		}
		public interface IRCAdvancedDataPointFormatRecordTypeFactory {
			IRecord CreateRsseSpaceChartsRCAdvancedDataPointFormatRecord();
		}
		public interface ISTAdvancedDataPointFormatStructureTypeFactory {
			IRecord CreateRsseSpaceChartsSTAdvancedDataPointFormatStructure();
		}
		public interface IRLAdvancedDataSeriesFormatRecordListTypeFactory {
			RecordList CreateRsseSpaceChartsRLAdvancedDataSeriesFormatRecordList();
		}
		public interface IRCAdvancedDataSeriesFormatRecordTypeFactory {
			IRecord CreateRsseSpaceChartsRCAdvancedDataSeriesFormatRecord();
		}
		public interface ISTAdvancedDataSeriesFormatStructureTypeFactory {
			IRecord CreateRsseSpaceChartsSTAdvancedDataSeriesFormatStructure();
		}
		public interface IRCAdvancedFormatRecordTypeFactory {
			IRecord CreateRsseSpaceChartsRCAdvancedFormatRecord();
		}
		public interface ISTAdvancedFormatStructureTypeFactory {
			IRecord CreateRsseSpaceChartsSTAdvancedFormatStructure();
		}
		public interface IRLDataPointRecordListTypeFactory {
			RecordList CreateRsseSpaceChartsRLDataPointRecordList();
		}
		public interface IRCXAxisFormatRecordTypeFactory {
			IRecord CreateRsseSpaceChartsRCXAxisFormatRecord();
		}
		public interface ISTXAxisFormatStructureTypeFactory {
			IRecord CreateRsseSpaceChartsSTXAxisFormatStructure();
		}
		public interface IRCYAxisFormatRecordTypeFactory {
			IRecord CreateRsseSpaceChartsRCYAxisFormatRecord();
		}
		public interface ISTYAxisFormatStructureTypeFactory {
			IRecord CreateRsseSpaceChartsSTYAxisFormatStructure();
		}

		public interface IENXAxisValuesTypeEntityRecordTypeFactory {
			IRecord CreateENXAxisValuesTypeEntityRecord();
		}
		public interface IENLegendPositionEntityRecordTypeFactory {
			IRecord CreateENLegendPositionEntityRecord();
		}
		public interface IENStackingTypeEntityRecordTypeFactory {
			IRecord CreateENStackingTypeEntityRecord();
		}

		public class Factory {
			public static ISTAdvancedDataPointFormatStructureTypeFactory FactorySTAdvancedDataPointFormatStructureSingleton;
			public static IRCAdvancedDataPointFormatRecordTypeFactory FactoryRCAdvancedDataPointFormatRecordSingleton;
			public static IRLAdvancedDataPointFormatRecordListTypeFactory FactoryRLAdvancedDataPointFormatRecordListSingleton;
			public static ISTAdvancedDataSeriesFormatStructureTypeFactory FactorySTAdvancedDataSeriesFormatStructureSingleton;
			public static IRCAdvancedDataSeriesFormatRecordTypeFactory FactoryRCAdvancedDataSeriesFormatRecordSingleton;
			public static IRLAdvancedDataSeriesFormatRecordListTypeFactory FactoryRLAdvancedDataSeriesFormatRecordListSingleton;
			public static ISTAdvancedFormatStructureTypeFactory FactorySTAdvancedFormatStructureSingleton;
			public static IRCAdvancedFormatRecordTypeFactory FactoryRCAdvancedFormatRecordSingleton;
			public static ISTChartFormatStructureTypeFactory FactorySTChartFormatStructureSingleton;
			public static IRCChartFormatRecordTypeFactory FactoryRCChartFormatRecordSingleton;
			public static ISTDataPointStructureTypeFactory FactorySTDataPointStructureSingleton;
			public static IRCDataPointRecordTypeFactory FactoryRCDataPointRecordSingleton;
			public static IRLDataPointRecordListTypeFactory FactoryRLDataPointRecordListSingleton;
			public static ISTXAxisFormatStructureTypeFactory FactorySTXAxisFormatStructureSingleton;
			public static IRCXAxisFormatRecordTypeFactory FactoryRCXAxisFormatRecordSingleton;
			public static ISTYAxisFormatStructureTypeFactory FactorySTYAxisFormatStructureSingleton;
			public static IRCYAxisFormatRecordTypeFactory FactoryRCYAxisFormatRecordSingleton;
			public static IENXAxisValuesTypeEntityRecordTypeFactory FactoryENXAxisValuesTypeEntityRecordSingleton;
			public static IENLegendPositionEntityRecordTypeFactory FactoryENLegendPositionEntityRecordSingleton;
			public static IENStackingTypeEntityRecordTypeFactory FactoryENStackingTypeEntityRecordSingleton;
		}
		public class DefaultValues {
			public static int ReferenceStructure_XAxisFormat_ReferenceStructureAttribute_ValuesType {
				get {
					return ssCharts.DefaultValues.ReferenceStructure_XAxisFormat_ReferenceStructureAttribute_ValuesType; 
				}
			}
			public static int ReferenceWebFlow_Charts_ReferenceWebBlock_ColumnChart_Variables_ReferenceSerializableInputParameter_StackingType {
				get {
					return ssCharts.DefaultValues.ReferenceWebFlow_Charts_ReferenceWebBlock_ColumnChart_Variables_ReferenceSerializableInputParameter_StackingType; 
				}
			}
			public static int ReferenceWebFlow_Charts_ReferenceWebBlock_ColumnChart_Variables_ReferenceSerializableInputParameter_LegendPosition {
				get {
					return ssCharts.DefaultValues.ReferenceWebFlow_Charts_ReferenceWebBlock_ColumnChart_Variables_ReferenceSerializableInputParameter_LegendPosition; 
				}
			}
		}
	}
}
namespace proxy_CaseConferencing_Charts.Flows.FlowCharts {
	public class WBlkColumnChart: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssCharts.Flows.FlowCharts.WBlkColumnChart block;
		static WBlkColumnChart() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCharts.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceCharts.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 3;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 3;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssCharts.Flows.FlowCharts.WBlkColumnChart webBlock = (ssCharts.Flows.FlowCharts.WBlkColumnChart) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssCharts.Flows.FlowCharts.WBlkColumnChart.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable SourceDataPointList
		public RecordList inParamSourceDataPointList {
			get {
				return block.inParamSourceDataPointList;
			}
			set {
				block.inParamSourceDataPointList.FillFromOther(value);
			}
		}

		// block input variable StackingType
		public int inParamStackingType {
			get {
				return block.inParamStackingType;
			}
			set {
				block.inParamStackingType = value;
			}
		}

		// block input variable Height
		public int inParamHeight {
			get {
				return block.inParamHeight;
			}
			set {
				block.inParamHeight = value;
			}
		}

		// block input variable LegendPosition
		public int inParamLegendPosition {
			get {
				return block.inParamLegendPosition;
			}
			set {
				block.inParamLegendPosition = value;
			}
		}

		// block input variable XAxisFormat
		public IRecord inParamXAxisFormat {
			get {
				return block.inParamXAxisFormat;
			}
			set {
				block.inParamXAxisFormat.FillFromOther(value);
			}
		}

		// block input variable YAxisFormat
		public IRecord inParamYAxisFormat {
			get {
				return block.inParamYAxisFormat;
			}
			set {
				block.inParamYAxisFormat.FillFromOther(value);
			}
		}

		// block input variable ChartFormat
		public IRecord inParamChartFormat {
			get {
				return block.inParamChartFormat;
			}
			set {
				block.inParamChartFormat.FillFromOther(value);
			}
		}

		// block input variable Clickable
		public bool inParamClickable {
			get {
				return block.inParamClickable;
			}
			set {
				block.inParamClickable = value;
			}
		}

		// block input variable AdvancedFormat
		public IRecord inParamAdvancedFormat {
			get {
				return block.inParamAdvancedFormat;
			}
			set {
				block.inParamAdvancedFormat.FillFromOther(value);
			}
		}

	}

}
