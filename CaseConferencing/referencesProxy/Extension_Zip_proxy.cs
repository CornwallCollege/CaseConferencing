/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

// Proxy for reference Extension with name Zip and key 3PrwBaaPWEqL57O8msZsVg
using System;
using System.Data;
using System.Reflection;
using System.Collections;
using System.Runtime.Serialization;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using System.Web.UI;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.RuntimePlatform.Web;
using ssCaseConferencing;
namespace ssCaseConferencing {
	/// <summary>
	/// Class: RssExtensionZip
	/// </summary>
	public class RssExtensionZip {
		/// <summary>
		/// Extension Variable: issZip
		/// </summary>
		protected static OutSystems.NssZip.IssZip issZip = (OutSystems.NssZip.IssZip) new OutSystems.NssZip.CssZip();
		protected static int _maxExtensionLogsPerRequest = OutSystems.HubEdition.RuntimePlatform.Settings.GetInt(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Log_MaxLogsPerRequest_Extension);
		public static void MssGetZipBinary(HeContext heContext, object inParamZipHandle, out byte[] outParamZipBinary) {
			DateTime startTime = DateTime.Now;
			String errorLogId = "";
			try {
				issZip.MssGetZipBinary(inParamZipHandle, out outParamZipBinary);
			} catch (Exception ex) {
				errorLogId = ErrorLog.LogApplicationError(ex, heContext, "Extension method execution: Zip.GetZipBinary");
				throw ex;
			} finally {
				if (errorLogId != string.Empty || (!heContext.AppInfo.SelectiveLoggingEnabled ||
				(heContext.AppInfo.ExtensionProperties.AllowLogging(19) && heContext.AppInfo.Properties.AllowLogging))) {

					int extLogCount = heContext.ExtensionLogCount;
					if (extLogCount == _maxExtensionLogsPerRequest) {
						// issue warning
						GeneralLog.StaticWrite(
						DateTime.Now, heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, "The maximum number (" + _maxExtensionLogsPerRequest + ") of allowed Extension Log entries per request has been exceeded. No more entries will be logged in this request.",
						 "WARNING", "SLOWEXTENSION", "");
						heContext.ExtensionLogCount = extLogCount + 1;
					} else if (extLogCount < _maxExtensionLogsPerRequest) {
						ExtensionLog.StaticWrite(
						DateTime.Now, Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds), "GetZipBinary",
						heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, 19, Environment.MachineName, errorLogId);
						heContext.ExtensionLogCount = extLogCount + 1;
					}
				}
				RuntimePlatformUtils.LogSlowExtensionCall(startTime, "Zip.GetZipBinary");
			}
		}


		public static void MssCreateZip(HeContext heContext, int inParamCompressionLevel, out object outParamZipHandle) {
			DateTime startTime = DateTime.Now;
			String errorLogId = "";
			try {
				issZip.MssCreateZip(out outParamZipHandle, inParamCompressionLevel);
			} catch (Exception ex) {
				errorLogId = ErrorLog.LogApplicationError(ex, heContext, "Extension method execution: Zip.CreateZip");
				throw ex;
			} finally {
				if (errorLogId != string.Empty || (!heContext.AppInfo.SelectiveLoggingEnabled ||
				(heContext.AppInfo.ExtensionProperties.AllowLogging(19) && heContext.AppInfo.Properties.AllowLogging))) {

					int extLogCount = heContext.ExtensionLogCount;
					if (extLogCount == _maxExtensionLogsPerRequest) {
						// issue warning
						GeneralLog.StaticWrite(
						DateTime.Now, heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, "The maximum number (" + _maxExtensionLogsPerRequest + ") of allowed Extension Log entries per request has been exceeded. No more entries will be logged in this request.",
						 "WARNING", "SLOWEXTENSION", "");
						heContext.ExtensionLogCount = extLogCount + 1;
					} else if (extLogCount < _maxExtensionLogsPerRequest) {
						ExtensionLog.StaticWrite(
						DateTime.Now, Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds), "CreateZip",
						heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, 19, Environment.MachineName, errorLogId);
						heContext.ExtensionLogCount = extLogCount + 1;
					}
				}
				RuntimePlatformUtils.LogSlowExtensionCall(startTime, "Zip.CreateZip");
			}
		}


		public static void MssCommitChanges(HeContext heContext, object inParamZipHandle) {
			DateTime startTime = DateTime.Now;
			String errorLogId = "";
			try {
				issZip.MssCommitChanges(inParamZipHandle);
			} catch (Exception ex) {
				errorLogId = ErrorLog.LogApplicationError(ex, heContext, "Extension method execution: Zip.CommitChanges");
				throw ex;
			} finally {
				if (errorLogId != string.Empty || (!heContext.AppInfo.SelectiveLoggingEnabled ||
				(heContext.AppInfo.ExtensionProperties.AllowLogging(19) && heContext.AppInfo.Properties.AllowLogging))) {

					int extLogCount = heContext.ExtensionLogCount;
					if (extLogCount == _maxExtensionLogsPerRequest) {
						// issue warning
						GeneralLog.StaticWrite(
						DateTime.Now, heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, "The maximum number (" + _maxExtensionLogsPerRequest + ") of allowed Extension Log entries per request has been exceeded. No more entries will be logged in this request.",
						 "WARNING", "SLOWEXTENSION", "");
						heContext.ExtensionLogCount = extLogCount + 1;
					} else if (extLogCount < _maxExtensionLogsPerRequest) {
						ExtensionLog.StaticWrite(
						DateTime.Now, Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds), "CommitChanges",
						heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, 19, Environment.MachineName, errorLogId);
						heContext.ExtensionLogCount = extLogCount + 1;
					}
				}
				RuntimePlatformUtils.LogSlowExtensionCall(startTime, "Zip.CommitChanges");
			}
		}


		public static void MssAddFile(HeContext heContext, object inParamZipHandle, string inParamFileName, DateTime inParamDateTime, byte[] inParamFileContent) {
			DateTime startTime = DateTime.Now;
			String errorLogId = "";
			try {
				issZip.MssAddFile(inParamZipHandle, inParamFileName, inParamDateTime, inParamFileContent);
			} catch (Exception ex) {
				errorLogId = ErrorLog.LogApplicationError(ex, heContext, "Extension method execution: Zip.AddFile");
				throw ex;
			} finally {
				if (errorLogId != string.Empty || (!heContext.AppInfo.SelectiveLoggingEnabled ||
				(heContext.AppInfo.ExtensionProperties.AllowLogging(19) && heContext.AppInfo.Properties.AllowLogging))) {

					int extLogCount = heContext.ExtensionLogCount;
					if (extLogCount == _maxExtensionLogsPerRequest) {
						// issue warning
						GeneralLog.StaticWrite(
						DateTime.Now, heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, "The maximum number (" + _maxExtensionLogsPerRequest + ") of allowed Extension Log entries per request has been exceeded. No more entries will be logged in this request.",
						 "WARNING", "SLOWEXTENSION", "");
						heContext.ExtensionLogCount = extLogCount + 1;
					} else if (extLogCount < _maxExtensionLogsPerRequest) {
						ExtensionLog.StaticWrite(
						DateTime.Now, Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds), "AddFile",
						heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, 19, Environment.MachineName, errorLogId);
						heContext.ExtensionLogCount = extLogCount + 1;
					}
				}
				RuntimePlatformUtils.LogSlowExtensionCall(startTime, "Zip.AddFile");
			}
		}




		public class Factory {
		}
		public class DefaultValues {
		}
	}
}
