/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

// Proxy for reference eSpace with name ProMonitorConnector and key +31TYsrIB06Y+rHaA0gi1w
using System;
using System.Data;
using System.Reflection;
using System.Collections;
using System.Runtime.Serialization;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using System.Web.UI;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.RuntimePlatform.Web;
using ssCaseConferencing;
namespace ssCaseConferencing {
	/// <summary>
	/// Class: RsseSpaceProMonitorConnector
	/// </summary>
	public class RsseSpaceProMonitorConnector {
		protected static int _maxExtensionLogsPerRequest = OutSystems.HubEdition.RuntimePlatform.Settings.GetInt(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Log_MaxLogsPerRequest_Extension);
		public static void MssGetMarkbookForLearnerQual(HeContext heContext, string inParamStudentReference, string inParamCourseCode, string inParamAcademicYear, out IRecord outParamMarkbookForQual, out bool outParamNoData) {
			outParamMarkbookForQual = ssCaseConferencing.RsseSpaceProMonitorConnector.Factory.FactorySTMarkbookForQualStructureSingleton.CreateRsseSpaceProMonitorConnectorSTMarkbookForQualStructure();
			ssProMonitorConnector.STMarkbookForQualStructure _proxyoutParamMarkbookForQual = new ssProMonitorConnector.STMarkbookForQualStructure(null);
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssProMonitorConnector.Global.eSpaceId;
				RsseSpaceProMonitorConnector.MssOnSessionStart(heContext);
				ssProMonitorConnector.Actions.ActionGetMarkbookForLearnerQual(heContext, inParamStudentReference, inParamCourseCode, inParamAcademicYear, out _proxyoutParamMarkbookForQual, out outParamNoData);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
			outParamMarkbookForQual.FillFromOther(_proxyoutParamMarkbookForQual);
		}


		public static void MssOnSessionStart(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssProMonitorConnector.Global.eSpaceId;
				if (RuntimePlatformUtils.TestAndSetProducerSession("ProMonitorConnector")) {
					ssProMonitorConnector.Actions.ActionOnSessionStart(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public interface ISTMarkbookForQualStructureTypeFactory {
			IRecord CreateRsseSpaceProMonitorConnectorSTMarkbookForQualStructure();
		}
		public interface IRLMarkbookUnitsListTypeFactory {
			RecordList CreateRsseSpaceProMonitorConnectorRLMarkbookUnitsList();
		}
		public interface ISTMarkbookUnitsStructureTypeFactory {
			IRecord CreateRsseSpaceProMonitorConnectorSTMarkbookUnitsStructure();
		}
		public interface IRLMarkbookAssessmentsListTypeFactory {
			RecordList CreateRsseSpaceProMonitorConnectorRLMarkbookAssessmentsList();
		}
		public interface ISTMarkbookAssessmentsStructureTypeFactory {
			IRecord CreateRsseSpaceProMonitorConnectorSTMarkbookAssessmentsStructure();
		}
		public interface IRLMarkbookTasksListTypeFactory {
			RecordList CreateRsseSpaceProMonitorConnectorRLMarkbookTasksList();
		}
		public interface ISTMarkbookTasksStructureTypeFactory {
			IRecord CreateRsseSpaceProMonitorConnectorSTMarkbookTasksStructure();
		}


		public class Factory {
			public static ISTMarkbookAssessmentsStructureTypeFactory FactorySTMarkbookAssessmentsStructureSingleton;
			public static IRLMarkbookAssessmentsListTypeFactory FactoryRLMarkbookAssessmentsListSingleton;
			public static ISTMarkbookForQualStructureTypeFactory FactorySTMarkbookForQualStructureSingleton;
			public static ISTMarkbookTasksStructureTypeFactory FactorySTMarkbookTasksStructureSingleton;
			public static IRLMarkbookTasksListTypeFactory FactoryRLMarkbookTasksListSingleton;
			public static ISTMarkbookUnitsStructureTypeFactory FactorySTMarkbookUnitsStructureSingleton;
			public static IRLMarkbookUnitsListTypeFactory FactoryRLMarkbookUnitsListSingleton;
		}
		public class DefaultValues {
		}
	}
}
namespace proxy_CaseConferencing_ProMonitorConnector.Flows.FlowTracking {
	public class WBlkTrackingGraph: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssProMonitorConnector.Flows.FlowTracking.WBlkTrackingGraph block;
		static WBlkTrackingGraph() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssProMonitorConnector.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceProMonitorConnector.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 63;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 63;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssProMonitorConnector.Flows.FlowTracking.WBlkTrackingGraph webBlock = (ssProMonitorConnector.Flows.FlowTracking.WBlkTrackingGraph) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssProMonitorConnector.Flows.FlowTracking.WBlkTrackingGraph.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable StudentReference
		public string inParamStudentReference {
			get {
				return block.inParamStudentReference;
			}
			set {
				block.inParamStudentReference = value;
			}
		}

		// block input variable CourseCode
		public string inParamCourseCode {
			get {
				return block.inParamCourseCode;
			}
			set {
				block.inParamCourseCode = value;
			}
		}

		// block input variable AcademicYear
		public string inParamAcademicYear {
			get {
				return block.inParamAcademicYear;
			}
			set {
				block.inParamAcademicYear = value;
			}
		}

	}

}
