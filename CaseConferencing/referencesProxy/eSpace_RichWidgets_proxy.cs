/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

// Proxy for reference eSpace with name RichWidgets and key XUSfe+LwJ3BJvoUEZMnu7g
using System;
using System.Data;
using System.Reflection;
using System.Collections;
using System.Runtime.Serialization;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using System.Web.UI;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.RuntimePlatform.Web;
using ssCaseConferencing;
namespace ssCaseConferencing {
	/// <summary>
	/// Class: RsseSpaceRichWidgets
	/// </summary>
	public class RsseSpaceRichWidgets {
		protected static int _maxExtensionLogsPerRequest = OutSystems.HubEdition.RuntimePlatform.Settings.GetInt(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Log_MaxLogsPerRequest_Extension);
		public static void MssDate_MonthName(HeContext heContext, DateTime inParamDate, out string outParamMonthName) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionDate_MonthName(heContext, inParamDate, out outParamMonthName);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssInput_FocusFirstInvalid(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionInput_FocusFirstInvalid(heContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssList_SortColumn_GetOrderBy(HeContext heContext, string inParamTableRecordsId, string inParamDefaultOrder, out string outParamOrderBy) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionList_SortColumn_GetOrderBy(heContext, inParamTableRecordsId, inParamDefaultOrder, out outParamOrderBy);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssDateTime_PrettyFormat(HeContext heContext, DateTime inParamDateTime, out string outParamFormattedText) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionDateTime_PrettyFormat(heContext, inParamDateTime, out outParamFormattedText);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssList_Navigation_GetStartIndex(HeContext heContext, string inParamListWidgetId, bool inParamRememberStartIndex, int inParamStartIndexOverride, out int outParamStartIndex) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionList_Navigation_GetStartIndex(heContext, inParamListWidgetId, inParamRememberStartIndex, inParamStartIndexOverride, out outParamStartIndex);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssPopup_Editor_Close(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionPopup_Editor_Close(heContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssList_BulkSelectToggleEnabled(HeContext heContext, string inParamTableRecordsWidget, string inParamButtonWidgetList) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionList_BulkSelectToggleEnabled(heContext, inParamTableRecordsWidget, inParamButtonWidgetList);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssWidget_Click(HeContext heContext, string inParamWidgetId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionWidget_Click(heContext, inParamWidgetId);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssFeedback_Message(HeContext heContext, string inParamMessageText, int inParamMessageType) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionFeedback_Message(heContext, inParamMessageText, inParamMessageType);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssList_Navigation_ResetStartIndex(HeContext heContext, string inParamListWidgetId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionList_Navigation_ResetStartIndex(heContext, inParamListWidgetId);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssDate_PrettyFormat(HeContext heContext, DateTime inParamDate, out string outParamFormattedText) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionDate_PrettyFormat(heContext, inParamDate, out outParamFormattedText);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssPopup_Editor_Notify(HeContext heContext, string inParamArgument) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				RsseSpaceRichWidgets.MssOnSessionStart(heContext);
				ssRichWidgets.Actions.ActionPopup_Editor_Notify(heContext, inParamArgument);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public static void MssOnSessionStart(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				if (RuntimePlatformUtils.TestAndSetProducerSession("RichWidgets")) {
					ssRichWidgets.Actions.ActionOnSessionStart(heContext);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		public sealed partial class ENIconNameEntity {
			public static string ViewName(int? tenant, string locale) {
				return ssRichWidgets.ENIconNameEntity.ViewName(tenant, locale);
			}
			public const int eSpaceId = ssRichWidgets.Global.eSpaceId;
		} // ENIconNameEntity
		partial class ENIconNameEntity {


			public static IRecord GetRecordById(string id) {
				IRecord rec = Factory.FactoryENIconNameEntityRecordSingleton.CreateENIconNameEntityRecord();
				rec.FillFromOther(ssRichWidgets.ENIconNameEntity.GetRecordById(id));
				return rec;
			}

			public static IRecord GetRecordByName(string name) {
				IRecord rec = Factory.FactoryENIconNameEntityRecordSingleton.CreateENIconNameEntityRecord();
				rec.FillFromOther(ssRichWidgets.ENIconNameEntity.GetRecordByName(name));
				return rec;
			}

			public static IRecord GetRecordByKey(ObjectKey key) {
				IRecord rec = Factory.FactoryENIconNameEntityRecordSingleton.CreateENIconNameEntityRecord();
				rec.FillFromOther(ssRichWidgets.ENIconNameEntity.GetRecordByKey(key));
				return rec;
			}
		} // ENIconNameEntity;

		public sealed partial class ENIconSizeEntity {
			public static string ViewName(int? tenant, string locale) {
				return ssRichWidgets.ENIconSizeEntity.ViewName(tenant, locale);
			}
			public const int eSpaceId = ssRichWidgets.Global.eSpaceId;
		} // ENIconSizeEntity
		partial class ENIconSizeEntity {


			public static IRecord GetRecordById(string id) {
				IRecord rec = Factory.FactoryENIconSizeEntityRecordSingleton.CreateENIconSizeEntityRecord();
				rec.FillFromOther(ssRichWidgets.ENIconSizeEntity.GetRecordById(id));
				return rec;
			}

			public static IRecord GetRecordByName(string name) {
				IRecord rec = Factory.FactoryENIconSizeEntityRecordSingleton.CreateENIconSizeEntityRecord();
				rec.FillFromOther(ssRichWidgets.ENIconSizeEntity.GetRecordByName(name));
				return rec;
			}

			public static IRecord GetRecordByKey(ObjectKey key) {
				IRecord rec = Factory.FactoryENIconSizeEntityRecordSingleton.CreateENIconSizeEntityRecord();
				rec.FillFromOther(ssRichWidgets.ENIconSizeEntity.GetRecordByKey(key));
				return rec;
			}
		} // ENIconSizeEntity;

		public sealed partial class ENMessageTypeEntity {
			public static string ViewName(int? tenant, string locale) {
				return ssRichWidgets.ENMessageTypeEntity.ViewName(tenant, locale);
			}
			public const int eSpaceId = ssRichWidgets.Global.eSpaceId;
		} // ENMessageTypeEntity
		partial class ENMessageTypeEntity {


			public static IRecord GetRecordById(int id) {
				IRecord rec = Factory.FactoryENMessageTypeEntityRecordSingleton.CreateENMessageTypeEntityRecord();
				rec.FillFromOther(ssRichWidgets.ENMessageTypeEntity.GetRecordById(id));
				return rec;
			}

			public static IRecord GetRecordByName(string name) {
				IRecord rec = Factory.FactoryENMessageTypeEntityRecordSingleton.CreateENMessageTypeEntityRecord();
				rec.FillFromOther(ssRichWidgets.ENMessageTypeEntity.GetRecordByName(name));
				return rec;
			}

			public static IRecord GetRecordByKey(ObjectKey key) {
				IRecord rec = Factory.FactoryENMessageTypeEntityRecordSingleton.CreateENMessageTypeEntityRecord();
				rec.FillFromOther(ssRichWidgets.ENMessageTypeEntity.GetRecordByKey(key));
				return rec;
			}
		} // ENMessageTypeEntity;


		public interface IENIconNameEntityRecordTypeFactory {
			IRecord CreateENIconNameEntityRecord();
		}
		public interface IENIconSizeEntityRecordTypeFactory {
			IRecord CreateENIconSizeEntityRecord();
		}
		public interface IENMessageTypeEntityRecordTypeFactory {
			IRecord CreateENMessageTypeEntityRecord();
		}

		public class Factory {
			public static IENIconNameEntityRecordTypeFactory FactoryENIconNameEntityRecordSingleton;
			public static IENIconSizeEntityRecordTypeFactory FactoryENIconSizeEntityRecordSingleton;
			public static IENMessageTypeEntityRecordTypeFactory FactoryENMessageTypeEntityRecordSingleton;
		}
		public class DefaultValues {
			public static int ReferenceAction_Feedback_Message_Variables_ReferenceGenericInputParameter_MessageType {
				get {
					return ssRichWidgets.DefaultValues.ReferenceAction_Feedback_Message_Variables_ReferenceGenericInputParameter_MessageType; 
				}
			}
			public static string ReferenceWebFlow_RichWidgets_ReferenceWebBlock_Icon_Variables_ReferenceSerializableInputParameter_Name {
				get {
					return ssRichWidgets.DefaultValues.ReferenceWebFlow_RichWidgets_ReferenceWebBlock_Icon_Variables_ReferenceSerializableInputParameter_Name; 
				}
			}
			public static string ReferenceWebFlow_RichWidgets_ReferenceWebBlock_Icon_Variables_ReferenceSerializableInputParameter_Size {
				get {
					return ssRichWidgets.DefaultValues.ReferenceWebFlow_RichWidgets_ReferenceWebBlock_Icon_Variables_ReferenceSerializableInputParameter_Size; 
				}
			}
		}
		public class Themes {
			public class ThemeLondonFixed {

				public static string ThemeCssUrl {
					get {
						return "/RichWidgets/Theme.LondonFixed.css"; 
					}
				}

				public static string ThemeExtraCssUrl {
					get {
						return "/RichWidgets/Theme.LondonFixed.extra.css"; 
					}
				}

				public class ExceptionHandler {

					private readonly OSPage page;
					private readonly bool isEmailScreen;

					public ExceptionHandler(OSPage page, bool isEmailScreen) {
						this.page = page;
						this.isEmailScreen = isEmailScreen;
					}

					private OSPage Page {
						get {
							return page; 
						}
					}

					public bool HandleException() {
						LocalState dummy = null;
						return HandleException(ref dummy);
					}

					public bool HandleException(ref LocalState flowState) {
						return new ssRichWidgets.Themes.ThemeLondonFixed.ExceptionHandler(Page, isEmailScreen).HandleException(ref flowState);

					}
				}
			}
			public class ThemeLondon {

				public static string ThemeCssUrl {
					get {
						return "/RichWidgets/Theme.London.css"; 
					}
				}

				public static string ThemeExtraCssUrl {
					get {
						return "/RichWidgets/Theme.London.extra.css"; 
					}
				}

				public class ExceptionHandler {

					private readonly OSPage page;
					private readonly bool isEmailScreen;

					public ExceptionHandler(OSPage page, bool isEmailScreen) {
						this.page = page;
						this.isEmailScreen = isEmailScreen;
					}

					private OSPage Page {
						get {
							return page; 
						}
					}

					public bool HandleException() {
						LocalState dummy = null;
						return HandleException(ref dummy);
					}

					public bool HandleException(ref LocalState flowState) {
						return new ssRichWidgets.Themes.ThemeLondon.ExceptionHandler(Page, isEmailScreen).HandleException(ref flowState);

					}
				}
			}
		}

	}
}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowLayouts {
	public class WBlkLayout_London: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowLayouts.WBlkLayout_London block;
		public Container wtFooter {
			get {
				return block.wtFooter; 
			}
		}
		public System.Web.UI.ITemplate phFooter {
			get; set; 
		}
		public Container wtMainContent {
			get {
				return block.wtMainContent; 
			}
		}
		public System.Web.UI.ITemplate phMainContent {
			get; set; 
		}
		public Container wtTitle {
			get {
				return block.wtTitle; 
			}
		}
		public System.Web.UI.ITemplate phTitle {
			get; set; 
		}
		public Container wtActions {
			get {
				return block.wtActions; 
			}
		}
		public System.Web.UI.ITemplate phActions {
			get; set; 
		}
		public Container wtMenu {
			get {
				return block.wtMenu; 
			}
		}
		public System.Web.UI.ITemplate phMenu {
			get; set; 
		}
		public Container wtHeader {
			get {
				return block.wtHeader; 
			}
		}
		public System.Web.UI.ITemplate phHeader {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phFooter = phFooter;
			block.phFooter.InstantiateIn(block.wtFooter);
			block.phMainContent = phMainContent;
			block.phMainContent.InstantiateIn(block.wtMainContent);
			block.phTitle = phTitle;
			block.phTitle.InstantiateIn(block.wtTitle);
			block.phActions = phActions;
			block.phActions.InstantiateIn(block.wtActions);
			block.phMenu = phMenu;
			block.phMenu.InstantiateIn(block.wtMenu);
			block.phHeader = phHeader;
			block.phHeader.InstantiateIn(block.wtHeader);
		}
		static WBlkLayout_London() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowLayouts.WBlkLayout_London webBlock = (ssRichWidgets.Flows.FlowLayouts.WBlkLayout_London) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowLayouts.WBlkLayout_London.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets {
	public class WBlkList_Navigation: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation block;
		static WBlkList_Navigation() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation webBlock = (ssRichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable ListWidgetId
		public string inParamListWidgetId {
			get {
				return block.inParamListWidgetId;
			}
			set {
				block.inParamListWidgetId = value;
			}
		}

		// block input variable LineCount
		public int inParamLineCount {
			get {
				return block.inParamLineCount;
			}
			set {
				block.inParamLineCount = value;
			}
		}

		// block input variable TotalRowCount
		public int inParamTotalRowCount {
			get {
				return block.inParamTotalRowCount;
			}
			set {
				block.inParamTotalRowCount = value;
			}
		}

		// block input variable MaxPageNumbers
		public int inParamMaxPageNumbers {
			get {
				return block.inParamMaxPageNumbers;
			}
			set {
				block.inParamMaxPageNumbers = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets {
	public class WBlkIcon: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowRichWidgets.WBlkIcon block;
		static WBlkIcon() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowRichWidgets.WBlkIcon webBlock = (ssRichWidgets.Flows.FlowRichWidgets.WBlkIcon) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable Name
		public string inParamName {
			get {
				return block.inParamName;
			}
			set {
				block.inParamName = value;
			}
		}

		// block input variable Size
		public string inParamSize {
			get {
				return block.inParamSize;
			}
			set {
				block.inParamSize = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets {
	public class WBlkInput_SetFocus: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowRichWidgets.WBlkInput_SetFocus block;
		static WBlkInput_SetFocus() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowRichWidgets.WBlkInput_SetFocus webBlock = (ssRichWidgets.Flows.FlowRichWidgets.WBlkInput_SetFocus) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowRichWidgets.WBlkInput_SetFocus.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable InputWidgetId
		public string inParamInputWidgetId {
			get {
				return block.inParamInputWidgetId;
			}
			set {
				block.inParamInputWidgetId = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets {
	public class WBlkList_SortColumn: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn block;
		static WBlkList_SortColumn() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn webBlock = (ssRichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable Column
		public string inParamColumn {
			get {
				return block.inParamColumn;
			}
			set {
				block.inParamColumn = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets {
	public class WBlkRemovePopups: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowRichWidgets.WBlkRemovePopups block;
		static WBlkRemovePopups() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowRichWidgets.WBlkRemovePopups webBlock = (ssRichWidgets.Flows.FlowRichWidgets.WBlkRemovePopups) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowRichWidgets.WBlkRemovePopups.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets {
	public class WBlkList_BulkSelect: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowRichWidgets.WBlkList_BulkSelect block;
		static WBlkList_BulkSelect() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowRichWidgets.WBlkList_BulkSelect webBlock = (ssRichWidgets.Flows.FlowRichWidgets.WBlkList_BulkSelect) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowRichWidgets.WBlkList_BulkSelect.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable TableRecordsWidgetId
		public string inParamTableRecordsWidgetId {
			get {
				return block.inParamTableRecordsWidgetId;
			}
			set {
				block.inParamTableRecordsWidgetId = value;
			}
		}

		// block input variable AssociatedLinkIds
		public string inParamAssociatedLinkIds {
			get {
				return block.inParamAssociatedLinkIds;
			}
			set {
				block.inParamAssociatedLinkIds = value;
			}
		}

		// block input variable Enabled
		public bool inParamEnabled {
			get {
				return block.inParamEnabled;
			}
			set {
				block.inParamEnabled = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets {
	public class WBlkPopup_InfoBalloon: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowRichWidgets.WBlkPopup_InfoBalloon block;
		static WBlkPopup_InfoBalloon() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowRichWidgets.WBlkPopup_InfoBalloon webBlock = (ssRichWidgets.Flows.FlowRichWidgets.WBlkPopup_InfoBalloon) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowRichWidgets.WBlkPopup_InfoBalloon.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable LinkId
		public string inParamLinkId {
			get {
				return block.inParamLinkId;
			}
			set {
				block.inParamLinkId = value;
			}
		}

		// block input variable WidthPx
		public int inParamWidthPx {
			get {
				return block.inParamWidthPx;
			}
			set {
				block.inParamWidthPx = value;
			}
		}

		// block input variable HeightPx
		public int inParamHeightPx {
			get {
				return block.inParamHeightPx;
			}
			set {
				block.inParamHeightPx = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets {
	public class WBlkList_Counter: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowRichWidgets.WBlkList_Counter block;
		static WBlkList_Counter() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowRichWidgets.WBlkList_Counter webBlock = (ssRichWidgets.Flows.FlowRichWidgets.WBlkList_Counter) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowRichWidgets.WBlkList_Counter.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable StartIndex
		public int inParamStartIndex {
			get {
				return block.inParamStartIndex;
			}
			set {
				block.inParamStartIndex = value;
			}
		}

		// block input variable TotalRowCount
		public int inParamTotalRowCount {
			get {
				return block.inParamTotalRowCount;
			}
			set {
				block.inParamTotalRowCount = value;
			}
		}

		// block input variable LineCount
		public int inParamLineCount {
			get {
				return block.inParamLineCount;
			}
			set {
				block.inParamLineCount = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets {
	public class WBlkPopup_Editor: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor block;
		static WBlkPopup_Editor() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor webBlock = (ssRichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable LinkOrButtonWidgetId
		public string inParamLinkOrButtonWidgetId {
			get {
				return block.inParamLinkOrButtonWidgetId;
			}
			set {
				block.inParamLinkOrButtonWidgetId = value;
			}
		}

		// block input variable Title
		public string inParamTitle {
			get {
				return block.inParamTitle;
			}
			set {
				block.inParamTitle = value;
			}
		}

		// block input variable WidthPx
		public int inParamWidthPx {
			get {
				return block.inParamWidthPx;
			}
			set {
				block.inParamWidthPx = value;
			}
		}

		// block input variable HeightPx
		public int inParamHeightPx {
			get {
				return block.inParamHeightPx;
			}
			set {
				block.inParamHeightPx = value;
			}
		}

		// block input variable AutoResize
		public bool inParamAutoResize {
			get {
				return block.inParamAutoResize;
			}
			set {
				block.inParamAutoResize = value;
			}
		}

		// block input variable RecenterOnResize
		public bool inParamRecenterOnResize {
			get {
				return block.inParamRecenterOnResize;
			}
			set {
				block.inParamRecenterOnResize = value;
			}
		}

		// block input variable HideCloseButton
		public bool inParamHideCloseButton {
			get {
				return block.inParamHideCloseButton;
			}
			set {
				block.inParamHideCloseButton = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets {
	public class WBlkInput_Calendar: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar block;
		static WBlkInput_Calendar() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar webBlock = (ssRichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

		// block input variable InputWidgetId
		public string inParamInputWidgetId {
			get {
				return block.inParamInputWidgetId;
			}
			set {
				block.inParamInputWidgetId = value;
			}
		}

		// block input variable MinYear
		public int inParamMinYear {
			get {
				return block.inParamMinYear;
			}
			set {
				block.inParamMinYear = value;
			}
		}

		// block input variable MaxYear
		public int inParamMaxYear {
			get {
				return block.inParamMaxYear;
			}
			set {
				block.inParamMaxYear = value;
			}
		}

		// block input variable Align
		public string inParamAlign {
			get {
				return block.inParamAlign;
			}
			set {
				block.inParamAlign = value;
			}
		}

		// block input variable SingleClick
		public bool inParamSingleClick {
			get {
				return block.inParamSingleClick;
			}
			set {
				block.inParamSingleClick = value;
			}
		}

		// block input variable ShowWeekNumbers
		public bool inParamShowWeekNumbers {
			get {
				return block.inParamShowWeekNumbers;
			}
			set {
				block.inParamShowWeekNumbers = value;
			}
		}

		// block input variable UpdateOnCloseOnly
		public bool inParamUpdateOnCloseOnly {
			get {
				return block.inParamUpdateOnCloseOnly;
			}
			set {
				block.inParamUpdateOnCloseOnly = value;
			}
		}

		// block input variable ShowOthers
		public bool inParamShowOthers {
			get {
				return block.inParamShowOthers;
			}
			set {
				block.inParamShowOthers = value;
			}
		}

		// block input variable FirstDay
		public int inParamFirstDay {
			get {
				return block.inParamFirstDay;
			}
			set {
				block.inParamFirstDay = value;
			}
		}

		// block input variable ShowTime
		public bool inParamShowTime {
			get {
				return block.inParamShowTime;
			}
			set {
				block.inParamShowTime = value;
			}
		}

		// block input variable Show24HourFormat
		public bool inParamShow24HourFormat {
			get {
				return block.inParamShow24HourFormat;
			}
			set {
				block.inParamShow24HourFormat = value;
			}
		}

		// block input variable ReuseCalendarObject
		public bool inParamReuseCalendarObject {
			get {
				return block.inParamReuseCalendarObject;
			}
			set {
				block.inParamReuseCalendarObject = value;
			}
		}

		// block input variable InitialDate
		public DateTime inParamInitialDate {
			get {
				return block.inParamInitialDate;
			}
			set {
				block.inParamInitialDate = value;
			}
		}

		// block input variable DateFormat
		public string inParamDateFormat {
			get {
				return block.inParamDateFormat;
			}
			set {
				block.inParamDateFormat = value;
			}
		}

		// block input variable SpecialDays
		public string inParamSpecialDays {
			get {
				return block.inParamSpecialDays;
			}
			set {
				block.inParamSpecialDays = value;
			}
		}

		// block input variable OnUpdate
		public string inParamOnUpdate {
			get {
				return block.inParamOnUpdate;
			}
			set {
				block.inParamOnUpdate = value;
			}
		}

		// block input variable FlatStyle
		public bool inParamFlatStyle {
			get {
				return block.inParamFlatStyle;
			}
			set {
				block.inParamFlatStyle = value;
			}
		}

		// block input variable ButtonWidgetId
		public string inParamButtonWidgetId {
			get {
				return block.inParamButtonWidgetId;
			}
			set {
				block.inParamButtonWidgetId = value;
			}
		}

		// block input variable YearStep
		public int inParamYearStep {
			get {
				return block.inParamYearStep;
			}
			set {
				block.inParamYearStep = value;
			}
		}

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowLayoutsOther {
	public class WBlkLayout_Popup: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Popup block;
		public Container wtMainContent {
			get {
				return block.wtMainContent; 
			}
		}
		public System.Web.UI.ITemplate phMainContent {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phMainContent = phMainContent;
			block.phMainContent.InstantiateIn(block.wtMainContent);
		}
		static WBlkLayout_Popup() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Popup webBlock = (ssRichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Popup) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Popup.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

	}

}
namespace proxy_CaseConferencing_RichWidgets.Flows.FlowLayoutsOther {
	public class WBlkLayout_Email: OSUserControl, INegotiateTabIndexes, IWebScreen
	{
		protected ssRichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Email block;
		public Container wtTitle {
			get {
				return block.wtTitle; 
			}
		}
		public System.Web.UI.ITemplate phTitle {
			get; set; 
		}
		public Container wtMainContent {
			get {
				return block.wtMainContent; 
			}
		}
		public System.Web.UI.ITemplate phMainContent {
			get; set; 
		}
		protected override void OnInit(EventArgs e) {
			base.OnInit(e);
			block.phTitle = phTitle;
			block.phTitle.InstantiateIn(block.wtTitle);
			block.phMainContent = phMainContent;
			block.phMainContent.InstantiateIn(block.wtMainContent);
		}
		static WBlkLayout_Email() {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssRichWidgets.Global.eSpaceId;
				ssCaseConferencing.RsseSpaceRichWidgets.MssOnSessionStart(AppInfo.GetAppInfo().OsContext);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}


		// override OSUserControl IsProxy()
		public override bool IsProxy() {
			return true;
		}

		// proxy implementation for WebScreen interface methods

		public override event EventHandler EvaluateParameters;

		public override string ClientID {
			get {
				return block.ClientID;
			}
		}

		public LocalState PushStack() {
			return block.PushStack();
		}

		public void doRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void doAJAXRefreshScreen(HeContext context) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = 8;
				block.doAJAXRefreshScreen(context);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		public void OnSubmit(String parentEditRecord, bool validate) {
			block.OnSubmit(parentEditRecord, validate);
		}

		public void CheckPermissions(HeContext context) {
			block.CheckPermissions(context);
		}

		public ObjectKey Key {
			get {
				return block.Key;
			}
		}
		public bool isSecure {
			get {
				return block.isSecure;
			}
		}

		public string InstanceID {
			get {
				return block.InstanceID;
			}
			set {
				block.InstanceID = value;
			}
		}

		public HeContext heContext {
			get {
				return block.heContext;
			}
			set {
				block.heContext = value;
			}
		}

		// proxy implementation INegociateTabs interface method

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			return block.NegotiateTabIndexes(tabindex, setTabIndex);
		}

		public short NegotiateTabIndexesRecursively(short tabindex, System.Web.UI.Control rootControl, bool setTabIndex) {
			return block.NegotiateTabIndexesRecursively(tabindex, rootControl, setTabIndex);
		}

		public override void DataBind() {
			HandleBreakpoint();
			if (EvaluateParameters != null) {
				EvaluateParameters(this, null);
			}
			block.DataBind();
		}

		public override bool IncludeSpan {
			get {
				return block.IncludeSpan; 
			}
			set {
				block.IncludeSpan = value; 
			}
		}

		public void BindProxyDelegates(object sender, BindDelegatesEventArgs e) {
			BindDelegatesIfNeeded();
			ssRichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Email webBlock = (ssRichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Email) e.UserControl;

		}

		public override string ParentEditRecord {
			get {
				return block.ParentEditRecord;
			}
			set {
				block.ParentEditRecord = value;
			}
		}

		public static void GetCss(System.IO.TextWriter writer, bool inline, HashSet<string> visited) {
			ssRichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Email.GetCss(writer, inline, visited);
		}

		public override string GridCssClasses {
			get {
				return block.GridCssClasses;
			}
			set {
				block.GridCssClasses = value;
			}
		}

		public override string Style {
			get {
				return block.Style;
			}
			set {
				block.Style = value;
			}
		}

		public override string WebBlockIdentifier {
			get {
				return "Proxy." + block.WebBlockIdentifier;
			}
		}

		/// <summary>
		/// Delegate Definitions
		/// </summary>

		// web block public declarations

	}

}
