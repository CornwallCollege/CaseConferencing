/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Web.Services.Protocols;
using System.Web.Services;
using System.Xml.Serialization;

namespace ssCaseConferencing {

	/// <summary>
	/// RecordList type <code>RLStudentUserNoteRecordList</code> that represents a record list of
	///  <code>Student, User, Note</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserNoteRecordList: GenericRecordList<RCStudentUserNoteRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserNoteRecord GetElementDefaultValue() {
			return new RCStudentUserNoteRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserNoteRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserNoteRecordList recordlist, Func<RCStudentUserNoteRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserNoteRecordList ToList<T>(T[] array, Func <T, RCStudentUserNoteRecord> converter) {
			RLStudentUserNoteRecordList result = new RLStudentUserNoteRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserNoteRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserNoteRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserNoteRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserNoteRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserNoteRecord> NewList() {
			return new RLStudentUserNoteRecordList();
		}


	} // RLStudentUserNoteRecordList
	/// <summary>
	/// RecordList type <code>RLUserStudentPastoralSupportRecordList</code> that represents a record list
	///  of <code>User, StudentPastoralSupport</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserStudentPastoralSupportRecordList: GenericRecordList<RCUserStudentPastoralSupportRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserStudentPastoralSupportRecord GetElementDefaultValue() {
			return new RCUserStudentPastoralSupportRecord("");
		}

		public T[] ToArray<T>(Func<RCUserStudentPastoralSupportRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserStudentPastoralSupportRecordList recordlist, Func<RCUserStudentPastoralSupportRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserStudentPastoralSupportRecordList ToList<T>(T[] array, Func <T, RCUserStudentPastoralSupportRecord> converter) {
			RLUserStudentPastoralSupportRecordList result = new RLUserStudentPastoralSupportRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserStudentPastoralSupportRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentPastoralSupportRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentPastoralSupportRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserStudentPastoralSupportRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserStudentPastoralSupportRecord> NewList() {
			return new RLUserStudentPastoralSupportRecordList();
		}


	} // RLUserStudentPastoralSupportRecordList
	/// <summary>
	/// RecordList type <code>RLTeamCurriculumLeadRecordList</code> that represents a record list of
	///  <code>Team, CurriculumLead</code>
	/// </summary>
	[Serializable()]
	public partial class RLTeamCurriculumLeadRecordList: GenericRecordList<RCTeamCurriculumLeadRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTeamCurriculumLeadRecord GetElementDefaultValue() {
			return new RCTeamCurriculumLeadRecord("");
		}

		public T[] ToArray<T>(Func<RCTeamCurriculumLeadRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTeamCurriculumLeadRecordList recordlist, Func<RCTeamCurriculumLeadRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTeamCurriculumLeadRecordList ToList<T>(T[] array, Func <T, RCTeamCurriculumLeadRecord> converter) {
			RLTeamCurriculumLeadRecordList result = new RLTeamCurriculumLeadRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTeamCurriculumLeadRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTeamCurriculumLeadRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTeamCurriculumLeadRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTeamCurriculumLeadRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(5, false);
			def[1] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTeamCurriculumLeadRecord> NewList() {
			return new RLTeamCurriculumLeadRecordList();
		}


	} // RLTeamCurriculumLeadRecordList
	/// <summary>
	/// RecordList type <code>RLSIASSupportNeedsDocumentsDocumentsRecordList</code> that represents a
	///  record list of <code>SIASSupportNeedsDocuments, Documents</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASSupportNeedsDocumentsDocumentsRecordList: GenericRecordList<RCSIASSupportNeedsDocumentsDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSIASSupportNeedsDocumentsDocumentsRecord GetElementDefaultValue() {
			return new RCSIASSupportNeedsDocumentsDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCSIASSupportNeedsDocumentsDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASSupportNeedsDocumentsDocumentsRecordList recordlist, Func<RCSIASSupportNeedsDocumentsDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASSupportNeedsDocumentsDocumentsRecordList ToList<T>(T[] array, Func <T, RCSIASSupportNeedsDocumentsDocumentsRecord> converter) {
			RLSIASSupportNeedsDocumentsDocumentsRecordList result = new RLSIASSupportNeedsDocumentsDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASSupportNeedsDocumentsDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportNeedsDocumentsDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportNeedsDocumentsDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASSupportNeedsDocumentsDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(5, false);
			def[1] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSIASSupportNeedsDocumentsDocumentsRecord> NewList() {
			return new RLSIASSupportNeedsDocumentsDocumentsRecordList();
		}


	} // RLSIASSupportNeedsDocumentsDocumentsRecordList
	/// <summary>
	/// RecordList type <code>RLDocument_ListCommunicationRecordList</code> that represents a record list
	///  of <code>Document_List, Communication</code>
	/// </summary>
	[Serializable()]
	public partial class RLDocument_ListCommunicationRecordList: GenericRecordList<RCDocument_ListCommunicationRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCDocument_ListCommunicationRecord GetElementDefaultValue() {
			return new RCDocument_ListCommunicationRecord("");
		}

		public T[] ToArray<T>(Func<RCDocument_ListCommunicationRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDocument_ListCommunicationRecordList recordlist, Func<RCDocument_ListCommunicationRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDocument_ListCommunicationRecordList ToList<T>(T[] array, Func <T, RCDocument_ListCommunicationRecord> converter) {
			RLDocument_ListCommunicationRecordList result = new RLDocument_ListCommunicationRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDocument_ListCommunicationRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocument_ListCommunicationRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocument_ListCommunicationRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDocument_ListCommunicationRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = null;
			def[1] = new BitArray(13, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCDocument_ListCommunicationRecord> NewList() {
			return new RLDocument_ListCommunicationRecordList();
		}


	} // RLDocument_ListCommunicationRecordList
	/// <summary>
	/// RecordList type <code>RLGroupStudent_GroupRecordList</code> that represents a record list of
	///  <code>Group, Student_Group</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupStudent_GroupRecordList: GenericRecordList<RCGroupStudent_GroupRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupStudent_GroupRecord GetElementDefaultValue() {
			return new RCGroupStudent_GroupRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupStudent_GroupRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupStudent_GroupRecordList recordlist, Func<RCGroupStudent_GroupRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupStudent_GroupRecordList ToList<T>(T[] array, Func <T, RCGroupStudent_GroupRecord> converter) {
			RLGroupStudent_GroupRecordList result = new RLGroupStudent_GroupRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupStudent_GroupRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudent_GroupRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudent_GroupRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupStudent_GroupRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupStudent_GroupRecord> NewList() {
			return new RLGroupStudent_GroupRecordList();
		}


	} // RLGroupStudent_GroupRecordList
	/// <summary>
	/// RecordList type <code>RLGroupStringStringStringBooleanRecordList</code> that represents a record
	///  list of <code>Group, String, String, String, Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupStringStringStringBooleanRecordList: GenericRecordList<RCGroupStringStringStringBooleanRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupStringStringStringBooleanRecord GetElementDefaultValue() {
			return new RCGroupStringStringStringBooleanRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupStringStringStringBooleanRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupStringStringStringBooleanRecordList recordlist, Func<RCGroupStringStringStringBooleanRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupStringStringStringBooleanRecordList ToList<T>(T[] array, Func <T, RCGroupStringStringStringBooleanRecord> converter) {
			RLGroupStringStringStringBooleanRecordList result = new RLGroupStringStringStringBooleanRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupStringStringStringBooleanRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStringStringStringBooleanRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStringStringStringBooleanRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupStringStringStringBooleanRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(9, false);
			def[1] = null;
			def[2] = null;
			def[3] = null;
			def[4] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupStringStringStringBooleanRecord> NewList() {
			return new RLGroupStringStringStringBooleanRecordList();
		}


	} // RLGroupStringStringStringBooleanRecordList
	/// <summary>
	/// RecordList type <code>RLGroupStudent_GroupStudentStudentAttendanceRecordList</code> that represents
	///  a record list of <code>Group, Student_Group, Student, StudentAttendance</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupStudent_GroupStudentStudentAttendanceRecordList: GenericRecordList<RCGroupStudent_GroupStudentStudentAttendanceRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupStudent_GroupStudentStudentAttendanceRecord GetElementDefaultValue() {
			return new RCGroupStudent_GroupStudentStudentAttendanceRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupStudent_GroupStudentStudentAttendanceRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupStudent_GroupStudentStudentAttendanceRecordList recordlist, Func<RCGroupStudent_GroupStudentStudentAttendanceRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupStudent_GroupStudentStudentAttendanceRecordList ToList<T>(T[] array, Func <T, RCGroupStudent_GroupStudentStudentAttendanceRecord> converter) {
			RLGroupStudent_GroupStudentStudentAttendanceRecordList result = new RLGroupStudent_GroupStudentStudentAttendanceRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupStudent_GroupStudentStudentAttendanceRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudent_GroupStudentStudentAttendanceRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudent_GroupStudentStudentAttendanceRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupStudent_GroupStudentStudentAttendanceRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(9, false);
			def[2] = new BitArray(27, false);
			def[3] = new BitArray(20, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupStudent_GroupStudentStudentAttendanceRecord> NewList() {
			return new RLGroupStudent_GroupStudentStudentAttendanceRecordList();
		}


	} // RLGroupStudent_GroupStudentStudentAttendanceRecordList
	/// <summary>
	/// RecordList type <code>RLProgressReportSectionProgressReportSectionsRecordList</code> that
	///  represents a record list of <code>ProgressReportSection, ProgressReportSections</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportSectionProgressReportSectionsRecordList: GenericRecordList<RCProgressReportSectionProgressReportSectionsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCProgressReportSectionProgressReportSectionsRecord GetElementDefaultValue() {
			return new RCProgressReportSectionProgressReportSectionsRecord("");
		}

		public T[] ToArray<T>(Func<RCProgressReportSectionProgressReportSectionsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportSectionProgressReportSectionsRecordList recordlist, Func<RCProgressReportSectionProgressReportSectionsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportSectionProgressReportSectionsRecordList ToList<T>(T[] array, Func <T, RCProgressReportSectionProgressReportSectionsRecord> converter) {
			RLProgressReportSectionProgressReportSectionsRecordList result = new RLProgressReportSectionProgressReportSectionsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportSectionProgressReportSectionsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportSectionProgressReportSectionsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(49, false);
			def[1] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCProgressReportSectionProgressReportSectionsRecord> NewList() {
			return new RLProgressReportSectionProgressReportSectionsRecordList();
		}


	} // RLProgressReportSectionProgressReportSectionsRecordList
	/// <summary>
	/// RecordList type <code>RLUserStudentPENPortraitRecordList</code> that represents a record list of
	///  <code>User, StudentPENPortrait</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserStudentPENPortraitRecordList: GenericRecordList<RCUserStudentPENPortraitRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserStudentPENPortraitRecord GetElementDefaultValue() {
			return new RCUserStudentPENPortraitRecord("");
		}

		public T[] ToArray<T>(Func<RCUserStudentPENPortraitRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserStudentPENPortraitRecordList recordlist, Func<RCUserStudentPENPortraitRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserStudentPENPortraitRecordList ToList<T>(T[] array, Func <T, RCUserStudentPENPortraitRecord> converter) {
			RLUserStudentPENPortraitRecordList result = new RLUserStudentPENPortraitRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserStudentPENPortraitRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentPENPortraitRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentPENPortraitRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserStudentPENPortraitRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserStudentPENPortraitRecord> NewList() {
			return new RLUserStudentPENPortraitRecordList();
		}


	} // RLUserStudentPENPortraitRecordList
	/// <summary>
	/// RecordList type <code>RLUserBooleanProgressReportRecordList</code> that represents a record list of
	///  <code>User, Boolean, ProgressReport</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserBooleanProgressReportRecordList: GenericRecordList<RCUserBooleanProgressReportRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserBooleanProgressReportRecord GetElementDefaultValue() {
			return new RCUserBooleanProgressReportRecord("");
		}

		public T[] ToArray<T>(Func<RCUserBooleanProgressReportRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserBooleanProgressReportRecordList recordlist, Func<RCUserBooleanProgressReportRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserBooleanProgressReportRecordList ToList<T>(T[] array, Func <T, RCUserBooleanProgressReportRecord> converter) {
			RLUserBooleanProgressReportRecordList result = new RLUserBooleanProgressReportRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserBooleanProgressReportRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserBooleanProgressReportRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserBooleanProgressReportRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserBooleanProgressReportRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(11, false);
			def[1] = null;
			def[2] = new BitArray(23, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserBooleanProgressReportRecord> NewList() {
			return new RLUserBooleanProgressReportRecordList();
		}


	} // RLUserBooleanProgressReportRecordList
	/// <summary>
	/// RecordList type <code>RLCommunicationDocumentsDocumentsRecordList</code> that represents a record
	///  list of <code>CommunicationDocuments, Documents</code>
	/// </summary>
	[Serializable()]
	public partial class RLCommunicationDocumentsDocumentsRecordList: GenericRecordList<RCCommunicationDocumentsDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCommunicationDocumentsDocumentsRecord GetElementDefaultValue() {
			return new RCCommunicationDocumentsDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCCommunicationDocumentsDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCommunicationDocumentsDocumentsRecordList recordlist, Func<RCCommunicationDocumentsDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCommunicationDocumentsDocumentsRecordList ToList<T>(T[] array, Func <T, RCCommunicationDocumentsDocumentsRecord> converter) {
			RLCommunicationDocumentsDocumentsRecordList result = new RLCommunicationDocumentsDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCommunicationDocumentsDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCommunicationDocumentsDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCommunicationDocumentsDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCommunicationDocumentsDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(3, false);
			def[1] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCommunicationDocumentsDocumentsRecord> NewList() {
			return new RLCommunicationDocumentsDocumentsRecordList();
		}


	} // RLCommunicationDocumentsDocumentsRecordList
	/// <summary>
	/// RecordList type <code>RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList</code>
	///  that represents a record list of <code>User, StudentLog, CommunicationType, StudentLogType
	/// , Communication</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList: GenericRecordList<RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord GetElementDefaultValue() {
			return new RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord("");
		}

		public T[] ToArray<T>(Func<RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList recordlist, Func<RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList ToList<T>(T[] array, Func <T, RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord> converter) {
			RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList result = new RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(44, false);
			def[2] = new BitArray(4, false);
			def[3] = new BitArray(3, false);
			def[4] = new BitArray(13, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord> NewList() {
			return new RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList();
		}


	} // RLUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecordList
	/// <summary>
	/// RecordList type <code>RLUserStudentLogStudentLogTypeRecordList</code> that represents a record list
	///  of <code>User, StudentLog, StudentLogType</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserStudentLogStudentLogTypeRecordList: GenericRecordList<RCUserStudentLogStudentLogTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserStudentLogStudentLogTypeRecord GetElementDefaultValue() {
			return new RCUserStudentLogStudentLogTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCUserStudentLogStudentLogTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserStudentLogStudentLogTypeRecordList recordlist, Func<RCUserStudentLogStudentLogTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserStudentLogStudentLogTypeRecordList ToList<T>(T[] array, Func <T, RCUserStudentLogStudentLogTypeRecord> converter) {
			RLUserStudentLogStudentLogTypeRecordList result = new RLUserStudentLogStudentLogTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserStudentLogStudentLogTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentLogStudentLogTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentLogStudentLogTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserStudentLogStudentLogTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(44, false);
			def[2] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserStudentLogStudentLogTypeRecord> NewList() {
			return new RLUserStudentLogStudentLogTypeRecordList();
		}


	} // RLUserStudentLogStudentLogTypeRecordList
	/// <summary>
	/// RecordList type <code>RLStudentDecimalStringStudentRAGRecordList</code> that represents a record
	///  list of <code>Student, Decimal, String, StudentRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentDecimalStringStudentRAGRecordList: GenericRecordList<RCStudentDecimalStringStudentRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentDecimalStringStudentRAGRecord GetElementDefaultValue() {
			return new RCStudentDecimalStringStudentRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentDecimalStringStudentRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentDecimalStringStudentRAGRecordList recordlist, Func<RCStudentDecimalStringStudentRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentDecimalStringStudentRAGRecordList ToList<T>(T[] array, Func <T, RCStudentDecimalStringStudentRAGRecord> converter) {
			RLStudentDecimalStringStudentRAGRecordList result = new RLStudentDecimalStringStudentRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentDecimalStringStudentRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentDecimalStringStudentRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentDecimalStringStudentRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentDecimalStringStudentRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(27, false);
			def[1] = null;
			def[2] = null;
			def[3] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentDecimalStringStudentRAGRecord> NewList() {
			return new RLStudentDecimalStringStudentRAGRecordList();
		}


	} // RLStudentDecimalStringStudentRAGRecordList
	/// <summary>
	/// RecordList type <code>RLSIASSupportNeedsSIASSupportNeedRecordList</code> that represents a record
	///  list of <code>SIASSupportNeeds, SIASSupportNeed</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASSupportNeedsSIASSupportNeedRecordList: GenericRecordList<RCSIASSupportNeedsSIASSupportNeedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSIASSupportNeedsSIASSupportNeedRecord GetElementDefaultValue() {
			return new RCSIASSupportNeedsSIASSupportNeedRecord("");
		}

		public T[] ToArray<T>(Func<RCSIASSupportNeedsSIASSupportNeedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASSupportNeedsSIASSupportNeedRecordList recordlist, Func<RCSIASSupportNeedsSIASSupportNeedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASSupportNeedsSIASSupportNeedRecordList ToList<T>(T[] array, Func <T, RCSIASSupportNeedsSIASSupportNeedRecord> converter) {
			RLSIASSupportNeedsSIASSupportNeedRecordList result = new RLSIASSupportNeedsSIASSupportNeedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASSupportNeedsSIASSupportNeedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportNeedsSIASSupportNeedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportNeedsSIASSupportNeedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASSupportNeedsSIASSupportNeedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(5, false);
			def[1] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSIASSupportNeedsSIASSupportNeedRecord> NewList() {
			return new RLSIASSupportNeedsSIASSupportNeedRecordList();
		}


	} // RLSIASSupportNeedsSIASSupportNeedRecordList
	/// <summary>
	/// RecordList type <code>RLAcademicYearsProgressReportLogoProgressReportTypeRecordList</code> that
	///  represents a record list of <code>AcademicYears, ProgressReport, Logo, ProgressReportType</code>
	/// </summary>
	[Serializable()]
	public partial class RLAcademicYearsProgressReportLogoProgressReportTypeRecordList: GenericRecordList<RCAcademicYearsProgressReportLogoProgressReportTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAcademicYearsProgressReportLogoProgressReportTypeRecord GetElementDefaultValue() {
			return new RCAcademicYearsProgressReportLogoProgressReportTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCAcademicYearsProgressReportLogoProgressReportTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAcademicYearsProgressReportLogoProgressReportTypeRecordList recordlist, Func<RCAcademicYearsProgressReportLogoProgressReportTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAcademicYearsProgressReportLogoProgressReportTypeRecordList ToList<T>(T[] array, Func <T, RCAcademicYearsProgressReportLogoProgressReportTypeRecord> converter) {
			RLAcademicYearsProgressReportLogoProgressReportTypeRecordList result = new RLAcademicYearsProgressReportLogoProgressReportTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAcademicYearsProgressReportLogoProgressReportTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAcademicYearsProgressReportLogoProgressReportTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAcademicYearsProgressReportLogoProgressReportTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAcademicYearsProgressReportLogoProgressReportTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(10, false);
			def[1] = new BitArray(23, false);
			def[2] = new BitArray(6, false);
			def[3] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAcademicYearsProgressReportLogoProgressReportTypeRecord> NewList() {
			return new RLAcademicYearsProgressReportLogoProgressReportTypeRecordList();
		}


	} // RLAcademicYearsProgressReportLogoProgressReportTypeRecordList
	/// <summary>
	/// RecordList type <code>RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList</code> that
	///  represents a record list of <code>Student, User, Boolean, CauseOfConcernReason
	/// , CauseOfConcern</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList: GenericRecordList<RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord GetElementDefaultValue() {
			return new RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList recordlist, Func<RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList ToList<T>(T[] array, Func <T, RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord> converter) {
			RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList result = new RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = null;
			def[3] = new BitArray(3, false);
			def[4] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord> NewList() {
			return new RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList();
		}


	} // RLStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecordList
	/// <summary>
	/// RecordList type <code>RLStudentSIASInitialAssessmentRecordList</code> that represents a record list
	///  of <code>Student, SIASInitialAssessment</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentSIASInitialAssessmentRecordList: GenericRecordList<RCStudentSIASInitialAssessmentRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentSIASInitialAssessmentRecord GetElementDefaultValue() {
			return new RCStudentSIASInitialAssessmentRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentSIASInitialAssessmentRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentSIASInitialAssessmentRecordList recordlist, Func<RCStudentSIASInitialAssessmentRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentSIASInitialAssessmentRecordList ToList<T>(T[] array, Func <T, RCStudentSIASInitialAssessmentRecord> converter) {
			RLStudentSIASInitialAssessmentRecordList result = new RLStudentSIASInitialAssessmentRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentSIASInitialAssessmentRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentSIASInitialAssessmentRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentSIASInitialAssessmentRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentSIASInitialAssessmentRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(25, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentSIASInitialAssessmentRecord> NewList() {
			return new RLStudentSIASInitialAssessmentRecordList();
		}


	} // RLStudentSIASInitialAssessmentRecordList
	/// <summary>
	/// RecordList type <code>RLUserAcademicYearsProgressReportProgressReportTypeRecordList</code> that
	///  represents a record list of <code>User, AcademicYears, ProgressReport, ProgressReportType</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserAcademicYearsProgressReportProgressReportTypeRecordList: GenericRecordList<RCUserAcademicYearsProgressReportProgressReportTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserAcademicYearsProgressReportProgressReportTypeRecord GetElementDefaultValue() {
			return new RCUserAcademicYearsProgressReportProgressReportTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCUserAcademicYearsProgressReportProgressReportTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserAcademicYearsProgressReportProgressReportTypeRecordList recordlist, Func<RCUserAcademicYearsProgressReportProgressReportTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserAcademicYearsProgressReportProgressReportTypeRecordList ToList<T>(T[] array, Func <T, RCUserAcademicYearsProgressReportProgressReportTypeRecord> converter) {
			RLUserAcademicYearsProgressReportProgressReportTypeRecordList result = new RLUserAcademicYearsProgressReportProgressReportTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserAcademicYearsProgressReportProgressReportTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserAcademicYearsProgressReportProgressReportTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserAcademicYearsProgressReportProgressReportTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserAcademicYearsProgressReportProgressReportTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(10, false);
			def[2] = new BitArray(23, false);
			def[3] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserAcademicYearsProgressReportProgressReportTypeRecord> NewList() {
			return new RLUserAcademicYearsProgressReportProgressReportTypeRecordList();
		}


	} // RLUserAcademicYearsProgressReportProgressReportTypeRecordList
	/// <summary>
	/// RecordList type
	///  <code>RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList</c
	/// ode> that represents a record list of <code>Staff, Student, RAGStatus, SafeguardingIssue,
	///  SafeguardingIssueType, SafeguardingOutcome</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList: GenericRecordList<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord GetElementDefaultValue() {
			return new RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList recordlist, Func<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList ToList<T>(T[] array, Func <T, RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord> converter) {
			RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList result = new RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[6];
			def[0] = new BitArray(15, false);
			def[1] = new BitArray(27, false);
			def[2] = new BitArray(5, false);
			def[3] = new BitArray(18, false);
			def[4] = new BitArray(4, false);
			def[5] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord> NewList() {
			return new RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList();
		}


	} // RLStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecordList
	/// <summary>
	/// RecordList type <code>RLGroupStudent_GroupStudentStudentRAGRecordList</code> that represents a
	///  record list of <code>Group, Student_Group, Student, StudentRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupStudent_GroupStudentStudentRAGRecordList: GenericRecordList<RCGroupStudent_GroupStudentStudentRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupStudent_GroupStudentStudentRAGRecord GetElementDefaultValue() {
			return new RCGroupStudent_GroupStudentStudentRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupStudent_GroupStudentStudentRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupStudent_GroupStudentStudentRAGRecordList recordlist, Func<RCGroupStudent_GroupStudentStudentRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupStudent_GroupStudentStudentRAGRecordList ToList<T>(T[] array, Func <T, RCGroupStudent_GroupStudentStudentRAGRecord> converter) {
			RLGroupStudent_GroupStudentStudentRAGRecordList result = new RLGroupStudent_GroupStudentStudentRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupStudent_GroupStudentStudentRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudent_GroupStudentStudentRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudent_GroupStudentStudentRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupStudent_GroupStudentStudentRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(9, false);
			def[2] = new BitArray(27, false);
			def[3] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupStudent_GroupStudentStudentRAGRecord> NewList() {
			return new RLGroupStudent_GroupStudentStudentRAGRecordList();
		}


	} // RLGroupStudent_GroupStudentStudentRAGRecordList
	/// <summary>
	/// RecordList type <code>RLStudentUserStudentLogStudentLogTypeRecordList</code> that represents a
	///  record list of <code>Student, User, StudentLog, StudentLogType</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserStudentLogStudentLogTypeRecordList: GenericRecordList<RCStudentUserStudentLogStudentLogTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserStudentLogStudentLogTypeRecord GetElementDefaultValue() {
			return new RCStudentUserStudentLogStudentLogTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserStudentLogStudentLogTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserStudentLogStudentLogTypeRecordList recordlist, Func<RCStudentUserStudentLogStudentLogTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserStudentLogStudentLogTypeRecordList ToList<T>(T[] array, Func <T, RCStudentUserStudentLogStudentLogTypeRecord> converter) {
			RLStudentUserStudentLogStudentLogTypeRecordList result = new RLStudentUserStudentLogStudentLogTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserStudentLogStudentLogTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserStudentLogStudentLogTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserStudentLogStudentLogTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserStudentLogStudentLogTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(44, false);
			def[3] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserStudentLogStudentLogTypeRecord> NewList() {
			return new RLStudentUserStudentLogStudentLogTypeRecordList();
		}


	} // RLStudentUserStudentLogStudentLogTypeRecordList
	/// <summary>
	/// RecordList type <code>RLTargetTypeTargetTargetStatusBooleanRecordList</code> that represents a
	///  record list of <code>TargetType, Target, TargetStatus, Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLTargetTypeTargetTargetStatusBooleanRecordList: GenericRecordList<RCTargetTypeTargetTargetStatusBooleanRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTargetTypeTargetTargetStatusBooleanRecord GetElementDefaultValue() {
			return new RCTargetTypeTargetTargetStatusBooleanRecord("");
		}

		public T[] ToArray<T>(Func<RCTargetTypeTargetTargetStatusBooleanRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTargetTypeTargetTargetStatusBooleanRecordList recordlist, Func<RCTargetTypeTargetTargetStatusBooleanRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTargetTypeTargetTargetStatusBooleanRecordList ToList<T>(T[] array, Func <T, RCTargetTypeTargetTargetStatusBooleanRecord> converter) {
			RLTargetTypeTargetTargetStatusBooleanRecordList result = new RLTargetTypeTargetTargetStatusBooleanRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTargetTypeTargetTargetStatusBooleanRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTargetTypeTargetTargetStatusBooleanRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTargetTypeTargetTargetStatusBooleanRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTargetTypeTargetTargetStatusBooleanRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(4, false);
			def[1] = new BitArray(17, false);
			def[2] = new BitArray(4, false);
			def[3] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTargetTypeTargetTargetStatusBooleanRecord> NewList() {
			return new RLTargetTypeTargetTargetStatusBooleanRecordList();
		}


	} // RLTargetTypeTargetTargetStatusBooleanRecordList
	/// <summary>
	/// RecordList type <code>RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList</code>
	///  that represents a record list of <code>Group, Student_Group, Student, User, StudentPENPortrait
	/// , StudentRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList: GenericRecordList<RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord GetElementDefaultValue() {
			return new RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList recordlist, Func<RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList ToList<T>(T[] array, Func <T, RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord> converter) {
			RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList result = new RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[6];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(9, false);
			def[2] = new BitArray(27, false);
			def[3] = new BitArray(11, false);
			def[4] = new BitArray(5, false);
			def[5] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord> NewList() {
			return new RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList();
		}


	} // RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList
	/// <summary>
	/// RecordList type <code>RLUserStudentExtraCARecordList</code> that represents a record list of
	///  <code>User, StudentExtraCA</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserStudentExtraCARecordList: GenericRecordList<RCUserStudentExtraCARecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserStudentExtraCARecord GetElementDefaultValue() {
			return new RCUserStudentExtraCARecord("");
		}

		public T[] ToArray<T>(Func<RCUserStudentExtraCARecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserStudentExtraCARecordList recordlist, Func<RCUserStudentExtraCARecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserStudentExtraCARecordList ToList<T>(T[] array, Func <T, RCUserStudentExtraCARecord> converter) {
			RLUserStudentExtraCARecordList result = new RLUserStudentExtraCARecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserStudentExtraCARecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentExtraCARecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentExtraCARecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserStudentExtraCARecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(6, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserStudentExtraCARecord> NewList() {
			return new RLUserStudentExtraCARecordList();
		}


	} // RLUserStudentExtraCARecordList
	/// <summary>
	/// RecordList type <code>RLSafeguardingIssueSafeguardingIssueTypeRecordList</code> that represents a
	///  record list of <code>SafeguardingIssue, SafeguardingIssueType</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingIssueSafeguardingIssueTypeRecordList: GenericRecordList<RCSafeguardingIssueSafeguardingIssueTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSafeguardingIssueSafeguardingIssueTypeRecord GetElementDefaultValue() {
			return new RCSafeguardingIssueSafeguardingIssueTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCSafeguardingIssueSafeguardingIssueTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingIssueSafeguardingIssueTypeRecordList recordlist, Func<RCSafeguardingIssueSafeguardingIssueTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingIssueSafeguardingIssueTypeRecordList ToList<T>(T[] array, Func <T, RCSafeguardingIssueSafeguardingIssueTypeRecord> converter) {
			RLSafeguardingIssueSafeguardingIssueTypeRecordList result = new RLSafeguardingIssueSafeguardingIssueTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingIssueSafeguardingIssueTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingIssueSafeguardingIssueTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingIssueSafeguardingIssueTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingIssueSafeguardingIssueTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(18, false);
			def[1] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSafeguardingIssueSafeguardingIssueTypeRecord> NewList() {
			return new RLSafeguardingIssueSafeguardingIssueTypeRecordList();
		}


	} // RLSafeguardingIssueSafeguardingIssueTypeRecordList
	/// <summary>
	/// RecordList type <code>RLUserRiskAssessmentKeepInformedRecordList</code> that represents a record
	///  list of <code>User, RiskAssessmentKeepInformed</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserRiskAssessmentKeepInformedRecordList: GenericRecordList<RCUserRiskAssessmentKeepInformedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserRiskAssessmentKeepInformedRecord GetElementDefaultValue() {
			return new RCUserRiskAssessmentKeepInformedRecord("");
		}

		public T[] ToArray<T>(Func<RCUserRiskAssessmentKeepInformedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserRiskAssessmentKeepInformedRecordList recordlist, Func<RCUserRiskAssessmentKeepInformedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserRiskAssessmentKeepInformedRecordList ToList<T>(T[] array, Func <T, RCUserRiskAssessmentKeepInformedRecord> converter) {
			RLUserRiskAssessmentKeepInformedRecordList result = new RLUserRiskAssessmentKeepInformedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserRiskAssessmentKeepInformedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserRiskAssessmentKeepInformedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserRiskAssessmentKeepInformedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserRiskAssessmentKeepInformedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserRiskAssessmentKeepInformedRecord> NewList() {
			return new RLUserRiskAssessmentKeepInformedRecordList();
		}


	} // RLUserRiskAssessmentKeepInformedRecordList
	/// <summary>
	/// RecordList type <code>RLUserCauseOfConcernReasonCauseOfConcernRecordList</code> that represents a
	///  record list of <code>User, CauseOfConcernReason, CauseOfConcern</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserCauseOfConcernReasonCauseOfConcernRecordList: GenericRecordList<RCUserCauseOfConcernReasonCauseOfConcernRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserCauseOfConcernReasonCauseOfConcernRecord GetElementDefaultValue() {
			return new RCUserCauseOfConcernReasonCauseOfConcernRecord("");
		}

		public T[] ToArray<T>(Func<RCUserCauseOfConcernReasonCauseOfConcernRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserCauseOfConcernReasonCauseOfConcernRecordList recordlist, Func<RCUserCauseOfConcernReasonCauseOfConcernRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserCauseOfConcernReasonCauseOfConcernRecordList ToList<T>(T[] array, Func <T, RCUserCauseOfConcernReasonCauseOfConcernRecord> converter) {
			RLUserCauseOfConcernReasonCauseOfConcernRecordList result = new RLUserCauseOfConcernReasonCauseOfConcernRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserCauseOfConcernReasonCauseOfConcernRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserCauseOfConcernReasonCauseOfConcernRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserCauseOfConcernReasonCauseOfConcernRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserCauseOfConcernReasonCauseOfConcernRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(3, false);
			def[2] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserCauseOfConcernReasonCauseOfConcernRecord> NewList() {
			return new RLUserCauseOfConcernReasonCauseOfConcernRecordList();
		}


	} // RLUserCauseOfConcernReasonCauseOfConcernRecordList
	/// <summary>
	/// RecordList type <code>RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList</code> that
	///  represents a record list of <code>User, StudentLog, StudentLogType, Communication
	/// , CCSession</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList: GenericRecordList<RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord GetElementDefaultValue() {
			return new RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord("");
		}

		public T[] ToArray<T>(Func<RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList recordlist, Func<RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList ToList<T>(T[] array, Func <T, RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord> converter) {
			RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList result = new RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(44, false);
			def[2] = new BitArray(3, false);
			def[3] = new BitArray(13, false);
			def[4] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord> NewList() {
			return new RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList();
		}


	} // RLUserStudentLogStudentLogTypeCommunicationCCSessionRecordList
	/// <summary>
	/// RecordList type <code>RLDocumentsLearningSupportDocumentsRecordList</code> that represents a record
	///  list of <code>Documents, LearningSupportDocuments</code>
	/// </summary>
	[Serializable()]
	public partial class RLDocumentsLearningSupportDocumentsRecordList: GenericRecordList<RCDocumentsLearningSupportDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCDocumentsLearningSupportDocumentsRecord GetElementDefaultValue() {
			return new RCDocumentsLearningSupportDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCDocumentsLearningSupportDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDocumentsLearningSupportDocumentsRecordList recordlist, Func<RCDocumentsLearningSupportDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDocumentsLearningSupportDocumentsRecordList ToList<T>(T[] array, Func <T, RCDocumentsLearningSupportDocumentsRecord> converter) {
			RLDocumentsLearningSupportDocumentsRecordList result = new RLDocumentsLearningSupportDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDocumentsLearningSupportDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocumentsLearningSupportDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocumentsLearningSupportDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDocumentsLearningSupportDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(7, false);
			def[1] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCDocumentsLearningSupportDocumentsRecord> NewList() {
			return new RLDocumentsLearningSupportDocumentsRecordList();
		}


	} // RLDocumentsLearningSupportDocumentsRecordList
	/// <summary>
	/// RecordList type
	///  <code>RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRe
	/// cordList</code> that represents a record list of <code>Group, User, User, User, User, User,
	///  Boolean, ProgressReport, ProgressReportSection, ProgressReportSections</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList: GenericRecordList<RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord GetElementDefaultValue() {
			return new RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList recordlist, Func<RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList ToList<T>(T[] array, Func <T, RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord> converter) {
			RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList result = new RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[10];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(11, false);
			def[3] = new BitArray(11, false);
			def[4] = new BitArray(11, false);
			def[5] = new BitArray(11, false);
			def[6] = null;
			def[7] = new BitArray(23, false);
			def[8] = new BitArray(49, false);
			def[9] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord> NewList() {
			return new RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
		}


	} // RLGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList
	/// <summary>
	/// RecordList type <code>RLClusterUserCCSessionRecordList</code> that represents a record list of
	///  <code>Cluster, User, CCSession</code>
	/// </summary>
	[Serializable()]
	public partial class RLClusterUserCCSessionRecordList: GenericRecordList<RCClusterUserCCSessionRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCClusterUserCCSessionRecord GetElementDefaultValue() {
			return new RCClusterUserCCSessionRecord("");
		}

		public T[] ToArray<T>(Func<RCClusterUserCCSessionRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLClusterUserCCSessionRecordList recordlist, Func<RCClusterUserCCSessionRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLClusterUserCCSessionRecordList ToList<T>(T[] array, Func <T, RCClusterUserCCSessionRecord> converter) {
			RLClusterUserCCSessionRecordList result = new RLClusterUserCCSessionRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLClusterUserCCSessionRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClusterUserCCSessionRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClusterUserCCSessionRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLClusterUserCCSessionRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(7, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCClusterUserCCSessionRecord> NewList() {
			return new RLClusterUserCCSessionRecordList();
		}


	} // RLClusterUserCCSessionRecordList
	/// <summary>
	/// RecordList type <code>RLRoleBooleanRecordList</code> that represents a record list of <code>Role,
	///  Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLRoleBooleanRecordList: GenericRecordList<RCRoleBooleanRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRoleBooleanRecord GetElementDefaultValue() {
			return new RCRoleBooleanRecord("");
		}

		public T[] ToArray<T>(Func<RCRoleBooleanRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRoleBooleanRecordList recordlist, Func<RCRoleBooleanRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRoleBooleanRecordList ToList<T>(T[] array, Func <T, RCRoleBooleanRecord> converter) {
			RLRoleBooleanRecordList result = new RLRoleBooleanRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRoleBooleanRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleBooleanRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleBooleanRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRoleBooleanRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(7, false);
			def[1] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRoleBooleanRecord> NewList() {
			return new RLRoleBooleanRecordList();
		}


	} // RLRoleBooleanRecordList
	/// <summary>
	/// RecordList type <code>RLProgressReportProgressReportTypeRecordList</code> that represents a record
	///  list of <code>ProgressReport, ProgressReportType</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportProgressReportTypeRecordList: GenericRecordList<RCProgressReportProgressReportTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCProgressReportProgressReportTypeRecord GetElementDefaultValue() {
			return new RCProgressReportProgressReportTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCProgressReportProgressReportTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportProgressReportTypeRecordList recordlist, Func<RCProgressReportProgressReportTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportProgressReportTypeRecordList ToList<T>(T[] array, Func <T, RCProgressReportProgressReportTypeRecord> converter) {
			RLProgressReportProgressReportTypeRecordList result = new RLProgressReportProgressReportTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportProgressReportTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportProgressReportTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportProgressReportTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportProgressReportTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(23, false);
			def[1] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCProgressReportProgressReportTypeRecord> NewList() {
			return new RLProgressReportProgressReportTypeRecordList();
		}


	} // RLProgressReportProgressReportTypeRecordList
	/// <summary>
	/// RecordList type <code>RLStudentStringStringStringStudentCategoryRAGRecordList</code> that
	///  represents a record list of <code>Student, String, String, String, StudentCategoryRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentStringStringStringStudentCategoryRAGRecordList: GenericRecordList<RCStudentStringStringStringStudentCategoryRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentStringStringStringStudentCategoryRAGRecord GetElementDefaultValue() {
			return new RCStudentStringStringStringStudentCategoryRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentStringStringStringStudentCategoryRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentStringStringStringStudentCategoryRAGRecordList recordlist, Func<RCStudentStringStringStringStudentCategoryRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentStringStringStringStudentCategoryRAGRecordList ToList<T>(T[] array, Func <T, RCStudentStringStringStringStudentCategoryRAGRecord> converter) {
			RLStudentStringStringStringStudentCategoryRAGRecordList result = new RLStudentStringStringStringStudentCategoryRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentStringStringStringStudentCategoryRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentStringStringStringStudentCategoryRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentStringStringStringStudentCategoryRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentStringStringStringStudentCategoryRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(27, false);
			def[1] = null;
			def[2] = null;
			def[3] = null;
			def[4] = new BitArray(12, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentStringStringStringStudentCategoryRAGRecord> NewList() {
			return new RLStudentStringStringStringStudentCategoryRAGRecordList();
		}


	} // RLStudentStringStringStringStudentCategoryRAGRecordList
	/// <summary>
	/// RecordList type
	///  <code>RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectio
	/// nsRecordList</code> that represents a record list of <code>Group, User, User, User, User, User,
	///  User, Boolean, ProgressReport, ProgressReportSection, ProgressReportSections</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList: GenericRecordList<RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord GetElementDefaultValue() {
			return new RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList recordlist, Func<RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList ToList<T>(T[] array, Func <T, RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord> converter) {
			RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList result = new RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[11];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(11, false);
			def[3] = new BitArray(11, false);
			def[4] = new BitArray(11, false);
			def[5] = new BitArray(11, false);
			def[6] = new BitArray(11, false);
			def[7] = null;
			def[8] = new BitArray(23, false);
			def[9] = new BitArray(49, false);
			def[10] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord> NewList() {
			return new RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
		}


	} // RLGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList
	/// <summary>
	/// RecordList type <code>RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList</code> that
	///  represents a record list of <code>SafeguardingAgency, SafeguardingAgenciesInvolved</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList: GenericRecordList<RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord GetElementDefaultValue() {
			return new RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord("");
		}

		public T[] ToArray<T>(Func<RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList recordlist, Func<RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList ToList<T>(T[] array, Func <T, RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord> converter) {
			RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList result = new RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(4, false);
			def[1] = new BitArray(6, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord> NewList() {
			return new RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList();
		}


	} // RLSafeguardingAgencySafeguardingAgenciesInvolvedRecordList
	/// <summary>
	/// RecordList type <code>RLIntIntRecordList</code> that represents a record list of <code>Int,
	///  Int</code>
	/// </summary>
	[Serializable()]
	public partial class RLIntIntRecordList: GenericRecordList<RCIntIntRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCIntIntRecord GetElementDefaultValue() {
			return new RCIntIntRecord("");
		}

		public T[] ToArray<T>(Func<RCIntIntRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLIntIntRecordList recordlist, Func<RCIntIntRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLIntIntRecordList ToList<T>(T[] array, Func <T, RCIntIntRecord> converter) {
			RLIntIntRecordList result = new RLIntIntRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLIntIntRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIntIntRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIntIntRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLIntIntRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = null;
			def[1] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCIntIntRecord> NewList() {
			return new RLIntIntRecordList();
		}


	} // RLIntIntRecordList
	/// <summary>
	/// RecordList type <code>RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList</code>
	///  that represents a record list of <code>Student, SelectAction, Boolean, StudentRAG
	/// , StaffStudentFavourite</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList: GenericRecordList<RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord GetElementDefaultValue() {
			return new RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList recordlist, Func<RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList ToList<T>(T[] array, Func <T, RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord> converter) {
			RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList result = new RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(27, false);
			def[1] = null;
			def[2] = null;
			def[3] = new BitArray(5, false);
			def[4] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord> NewList() {
			return new RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList();
		}


	} // RLStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecordList
	/// <summary>
	/// RecordList type <code>RLGroupStudent_GroupStudentRecordList</code> that represents a record list of
	///  <code>Group, Student_Group, Student</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupStudent_GroupStudentRecordList: GenericRecordList<RCGroupStudent_GroupStudentRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupStudent_GroupStudentRecord GetElementDefaultValue() {
			return new RCGroupStudent_GroupStudentRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupStudent_GroupStudentRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupStudent_GroupStudentRecordList recordlist, Func<RCGroupStudent_GroupStudentRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupStudent_GroupStudentRecordList ToList<T>(T[] array, Func <T, RCGroupStudent_GroupStudentRecord> converter) {
			RLGroupStudent_GroupStudentRecordList result = new RLGroupStudent_GroupStudentRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupStudent_GroupStudentRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudent_GroupStudentRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudent_GroupStudentRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupStudent_GroupStudentRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(9, false);
			def[2] = new BitArray(27, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupStudent_GroupStudentRecord> NewList() {
			return new RLGroupStudent_GroupStudentRecordList();
		}


	} // RLGroupStudent_GroupStudentRecordList
	/// <summary>
	/// RecordList type
	///  <code>RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList</code> tha
	/// t represents a record list of <code>Student, StudentIdentifier, User, User,
	///  RiskAssessmentSSPReason, RiskAssessment</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList: GenericRecordList<RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord GetElementDefaultValue() {
			return new RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList recordlist, Func<RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList ToList<T>(T[] array, Func <T, RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord> converter) {
			RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList result = new RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(11, false);
			def[3] = new BitArray(4, false);
			def[4] = new BitArray(22, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord> NewList() {
			return new RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList();
		}


	} // RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList
	/// <summary>
	/// RecordList type <code>RLStudent_GroupUserStaffCourseFavouriteRecordList</code> that represents a
	///  record list of <code>Student_Group, User, StaffCourseFavourite</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudent_GroupUserStaffCourseFavouriteRecordList: GenericRecordList<RCStudent_GroupUserStaffCourseFavouriteRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudent_GroupUserStaffCourseFavouriteRecord GetElementDefaultValue() {
			return new RCStudent_GroupUserStaffCourseFavouriteRecord("");
		}

		public T[] ToArray<T>(Func<RCStudent_GroupUserStaffCourseFavouriteRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudent_GroupUserStaffCourseFavouriteRecordList recordlist, Func<RCStudent_GroupUserStaffCourseFavouriteRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudent_GroupUserStaffCourseFavouriteRecordList ToList<T>(T[] array, Func <T, RCStudent_GroupUserStaffCourseFavouriteRecord> converter) {
			RLStudent_GroupUserStaffCourseFavouriteRecordList result = new RLStudent_GroupUserStaffCourseFavouriteRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudent_GroupUserStaffCourseFavouriteRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudent_GroupUserStaffCourseFavouriteRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudent_GroupUserStaffCourseFavouriteRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudent_GroupUserStaffCourseFavouriteRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudent_GroupUserStaffCourseFavouriteRecord> NewList() {
			return new RLStudent_GroupUserStaffCourseFavouriteRecordList();
		}


	} // RLStudent_GroupUserStaffCourseFavouriteRecordList
	/// <summary>
	/// RecordList type <code>RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList</code> that
	///  represents a record list of <code>RAGStatus, SafeguardingIssue, SafeguardingIssueType</code>
	/// </summary>
	[Serializable()]
	public partial class RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList: GenericRecordList<RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord GetElementDefaultValue() {
			return new RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList recordlist, Func<RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList ToList<T>(T[] array, Func <T, RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord> converter) {
			RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList result = new RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(5, false);
			def[1] = new BitArray(18, false);
			def[2] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord> NewList() {
			return new RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList();
		}


	} // RLRAGStatusSafeguardingIssueSafeguardingIssueTypeRecordList
	/// <summary>
	/// RecordList type <code>RLStudent_GroupStudentRAGRecordList</code> that represents a record list of
	///  <code>Student_Group, StudentRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudent_GroupStudentRAGRecordList: GenericRecordList<RCStudent_GroupStudentRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudent_GroupStudentRAGRecord GetElementDefaultValue() {
			return new RCStudent_GroupStudentRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCStudent_GroupStudentRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudent_GroupStudentRAGRecordList recordlist, Func<RCStudent_GroupStudentRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudent_GroupStudentRAGRecordList ToList<T>(T[] array, Func <T, RCStudent_GroupStudentRAGRecord> converter) {
			RLStudent_GroupStudentRAGRecordList result = new RLStudent_GroupStudentRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudent_GroupStudentRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudent_GroupStudentRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudent_GroupStudentRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudent_GroupStudentRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudent_GroupStudentRAGRecord> NewList() {
			return new RLStudent_GroupStudentRAGRecordList();
		}


	} // RLStudent_GroupStudentRAGRecordList
	/// <summary>
	/// RecordList type <code>RLUser_RoleUserRoleRecordList</code> that represents a record list of
	///  <code>User_Role, User, Role</code>
	/// </summary>
	[Serializable()]
	public partial class RLUser_RoleUserRoleRecordList: GenericRecordList<RCUser_RoleUserRoleRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUser_RoleUserRoleRecord GetElementDefaultValue() {
			return new RCUser_RoleUserRoleRecord("");
		}

		public T[] ToArray<T>(Func<RCUser_RoleUserRoleRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUser_RoleUserRoleRecordList recordlist, Func<RCUser_RoleUserRoleRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUser_RoleUserRoleRecordList ToList<T>(T[] array, Func <T, RCUser_RoleUserRoleRecord> converter) {
			RLUser_RoleUserRoleRecordList result = new RLUser_RoleUserRoleRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUser_RoleUserRoleRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUser_RoleUserRoleRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUser_RoleUserRoleRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUser_RoleUserRoleRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(4, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUser_RoleUserRoleRecord> NewList() {
			return new RLUser_RoleUserRoleRecordList();
		}


	} // RLUser_RoleUserRoleRecordList
	/// <summary>
	/// RecordList type <code>RLRewardRewardReasonRecordList</code> that represents a record list of
	///  <code>Reward, RewardReason</code>
	/// </summary>
	[Serializable()]
	public partial class RLRewardRewardReasonRecordList: GenericRecordList<RCRewardRewardReasonRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRewardRewardReasonRecord GetElementDefaultValue() {
			return new RCRewardRewardReasonRecord("");
		}

		public T[] ToArray<T>(Func<RCRewardRewardReasonRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRewardRewardReasonRecordList recordlist, Func<RCRewardRewardReasonRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRewardRewardReasonRecordList ToList<T>(T[] array, Func <T, RCRewardRewardReasonRecord> converter) {
			RLRewardRewardReasonRecordList result = new RLRewardRewardReasonRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRewardRewardReasonRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRewardRewardReasonRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRewardRewardReasonRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRewardRewardReasonRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(7, false);
			def[1] = new BitArray(2, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRewardRewardReasonRecord> NewList() {
			return new RLRewardRewardReasonRecordList();
		}


	} // RLRewardRewardReasonRecordList
	/// <summary>
	/// RecordList type <code>RLRAGStatusCauseOfConcernRecordList</code> that represents a record list of
	///  <code>RAGStatus, CauseOfConcern</code>
	/// </summary>
	[Serializable()]
	public partial class RLRAGStatusCauseOfConcernRecordList: GenericRecordList<RCRAGStatusCauseOfConcernRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRAGStatusCauseOfConcernRecord GetElementDefaultValue() {
			return new RCRAGStatusCauseOfConcernRecord("");
		}

		public T[] ToArray<T>(Func<RCRAGStatusCauseOfConcernRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRAGStatusCauseOfConcernRecordList recordlist, Func<RCRAGStatusCauseOfConcernRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRAGStatusCauseOfConcernRecordList ToList<T>(T[] array, Func <T, RCRAGStatusCauseOfConcernRecord> converter) {
			RLRAGStatusCauseOfConcernRecordList result = new RLRAGStatusCauseOfConcernRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRAGStatusCauseOfConcernRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRAGStatusCauseOfConcernRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRAGStatusCauseOfConcernRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRAGStatusCauseOfConcernRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(5, false);
			def[1] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRAGStatusCauseOfConcernRecord> NewList() {
			return new RLRAGStatusCauseOfConcernRecordList();
		}


	} // RLRAGStatusCauseOfConcernRecordList
	/// <summary>
	/// RecordList type <code>RLTargetTargetStatusRecordList</code> that represents a record list of
	///  <code>Target, TargetStatus</code>
	/// </summary>
	[Serializable()]
	public partial class RLTargetTargetStatusRecordList: GenericRecordList<RCTargetTargetStatusRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTargetTargetStatusRecord GetElementDefaultValue() {
			return new RCTargetTargetStatusRecord("");
		}

		public T[] ToArray<T>(Func<RCTargetTargetStatusRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTargetTargetStatusRecordList recordlist, Func<RCTargetTargetStatusRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTargetTargetStatusRecordList ToList<T>(T[] array, Func <T, RCTargetTargetStatusRecord> converter) {
			RLTargetTargetStatusRecordList result = new RLTargetTargetStatusRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTargetTargetStatusRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTargetTargetStatusRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTargetTargetStatusRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTargetTargetStatusRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(17, false);
			def[1] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTargetTargetStatusRecord> NewList() {
			return new RLTargetTargetStatusRecordList();
		}


	} // RLTargetTargetStatusRecordList
	/// <summary>
	/// RecordList type <code>RLSIASSupportDocumentsDocumentsRecordList</code> that represents a record
	///  list of <code>SIASSupportDocuments, Documents</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASSupportDocumentsDocumentsRecordList: GenericRecordList<RCSIASSupportDocumentsDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSIASSupportDocumentsDocumentsRecord GetElementDefaultValue() {
			return new RCSIASSupportDocumentsDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCSIASSupportDocumentsDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASSupportDocumentsDocumentsRecordList recordlist, Func<RCSIASSupportDocumentsDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASSupportDocumentsDocumentsRecordList ToList<T>(T[] array, Func <T, RCSIASSupportDocumentsDocumentsRecord> converter) {
			RLSIASSupportDocumentsDocumentsRecordList result = new RLSIASSupportDocumentsDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASSupportDocumentsDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportDocumentsDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportDocumentsDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASSupportDocumentsDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(5, false);
			def[1] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSIASSupportDocumentsDocumentsRecord> NewList() {
			return new RLSIASSupportDocumentsDocumentsRecordList();
		}


	} // RLSIASSupportDocumentsDocumentsRecordList
	/// <summary>
	/// RecordList type <code>RLStudentUserStudentLogRecordList</code> that represents a record list of
	///  <code>Student, User, StudentLog</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserStudentLogRecordList: GenericRecordList<RCStudentUserStudentLogRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserStudentLogRecord GetElementDefaultValue() {
			return new RCStudentUserStudentLogRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserStudentLogRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserStudentLogRecordList recordlist, Func<RCStudentUserStudentLogRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserStudentLogRecordList ToList<T>(T[] array, Func <T, RCStudentUserStudentLogRecord> converter) {
			RLStudentUserStudentLogRecordList result = new RLStudentUserStudentLogRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserStudentLogRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserStudentLogRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserStudentLogRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserStudentLogRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(44, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserStudentLogRecord> NewList() {
			return new RLStudentUserStudentLogRecordList();
		}


	} // RLStudentUserStudentLogRecordList
	/// <summary>
	/// RecordList type
	///  <code>RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRi
	/// skAssessmentRecordList</code> that represents a record list of <code>Student, User,
	///  RiskAssessmentSourceOfEvidence, RiskAssessmentWhoIsAtRisk, RiskAssessmentSSPReason
	/// , RiskAssessment</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList: GenericRecordList<RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord GetElementDefaultValue() {
			return new RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList recordlist, Func<RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList ToList<T>(T[] array, Func <T, RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord> converter) {
			RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList result = new RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[6];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(4, false);
			def[3] = new BitArray(4, false);
			def[4] = new BitArray(4, false);
			def[5] = new BitArray(22, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord> NewList() {
			return new RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
		}


	} // RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList
	/// <summary>
	/// RecordList type <code>RLStudentBooleanTextRecordList</code> that represents a record list of
	///  <code>Student, Boolean, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentBooleanTextRecordList: GenericRecordList<RCStudentBooleanTextRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentBooleanTextRecord GetElementDefaultValue() {
			return new RCStudentBooleanTextRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentBooleanTextRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentBooleanTextRecordList recordlist, Func<RCStudentBooleanTextRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentBooleanTextRecordList ToList<T>(T[] array, Func <T, RCStudentBooleanTextRecord> converter) {
			RLStudentBooleanTextRecordList result = new RLStudentBooleanTextRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentBooleanTextRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentBooleanTextRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentBooleanTextRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentBooleanTextRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(27, false);
			def[1] = null;
			def[2] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentBooleanTextRecord> NewList() {
			return new RLStudentBooleanTextRecordList();
		}


	} // RLStudentBooleanTextRecordList
	/// <summary>
	/// RecordList type <code>RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList</code> that
	///  represents a record list of <code>Category, Student, User, User, RAGStatus
	/// , StudentCategoryRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList: GenericRecordList<RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord GetElementDefaultValue() {
			return new RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList recordlist, Func<RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList ToList<T>(T[] array, Func <T, RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord> converter) {
			RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList result = new RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[6];
			def[0] = new BitArray(5, false);
			def[1] = new BitArray(27, false);
			def[2] = new BitArray(11, false);
			def[3] = new BitArray(11, false);
			def[4] = new BitArray(5, false);
			def[5] = new BitArray(12, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord> NewList() {
			return new RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList();
		}


	} // RLCategoryStudentUserUserRAGStatusStudentCategoryRAGRecordList
	/// <summary>
	/// RecordList type <code>RLGroupStudentAnnualValuesStudent_GroupStudentRecordList</code> that
	///  represents a record list of <code>Group, StudentAnnualValues, Student_Group, Student</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupStudentAnnualValuesStudent_GroupStudentRecordList: GenericRecordList<RCGroupStudentAnnualValuesStudent_GroupStudentRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupStudentAnnualValuesStudent_GroupStudentRecord GetElementDefaultValue() {
			return new RCGroupStudentAnnualValuesStudent_GroupStudentRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupStudentAnnualValuesStudent_GroupStudentRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupStudentAnnualValuesStudent_GroupStudentRecordList recordlist, Func<RCGroupStudentAnnualValuesStudent_GroupStudentRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupStudentAnnualValuesStudent_GroupStudentRecordList ToList<T>(T[] array, Func <T, RCGroupStudentAnnualValuesStudent_GroupStudentRecord> converter) {
			RLGroupStudentAnnualValuesStudent_GroupStudentRecordList result = new RLGroupStudentAnnualValuesStudent_GroupStudentRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupStudentAnnualValuesStudent_GroupStudentRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudentAnnualValuesStudent_GroupStudentRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupStudentAnnualValuesStudent_GroupStudentRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupStudentAnnualValuesStudent_GroupStudentRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(7, false);
			def[2] = new BitArray(9, false);
			def[3] = new BitArray(27, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupStudentAnnualValuesStudent_GroupStudentRecord> NewList() {
			return new RLGroupStudentAnnualValuesStudent_GroupStudentRecordList();
		}


	} // RLGroupStudentAnnualValuesStudent_GroupStudentRecordList
	/// <summary>
	/// RecordList type <code>RLCauseOfConcernReasonCauseOfConcernRecordList</code> that represents a
	///  record list of <code>CauseOfConcernReason, CauseOfConcern</code>
	/// </summary>
	[Serializable()]
	public partial class RLCauseOfConcernReasonCauseOfConcernRecordList: GenericRecordList<RCCauseOfConcernReasonCauseOfConcernRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCauseOfConcernReasonCauseOfConcernRecord GetElementDefaultValue() {
			return new RCCauseOfConcernReasonCauseOfConcernRecord("");
		}

		public T[] ToArray<T>(Func<RCCauseOfConcernReasonCauseOfConcernRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCauseOfConcernReasonCauseOfConcernRecordList recordlist, Func<RCCauseOfConcernReasonCauseOfConcernRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCauseOfConcernReasonCauseOfConcernRecordList ToList<T>(T[] array, Func <T, RCCauseOfConcernReasonCauseOfConcernRecord> converter) {
			RLCauseOfConcernReasonCauseOfConcernRecordList result = new RLCauseOfConcernReasonCauseOfConcernRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCauseOfConcernReasonCauseOfConcernRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCauseOfConcernReasonCauseOfConcernRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCauseOfConcernReasonCauseOfConcernRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCauseOfConcernReasonCauseOfConcernRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(3, false);
			def[1] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCauseOfConcernReasonCauseOfConcernRecord> NewList() {
			return new RLCauseOfConcernReasonCauseOfConcernRecordList();
		}


	} // RLCauseOfConcernReasonCauseOfConcernRecordList
	/// <summary>
	/// RecordList type <code>RLStudentUserDisciplinaryDisciplinaryTypeRecordList</code> that represents a
	///  record list of <code>Student, User, Disciplinary, DisciplinaryType</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserDisciplinaryDisciplinaryTypeRecordList: GenericRecordList<RCStudentUserDisciplinaryDisciplinaryTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserDisciplinaryDisciplinaryTypeRecord GetElementDefaultValue() {
			return new RCStudentUserDisciplinaryDisciplinaryTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserDisciplinaryDisciplinaryTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserDisciplinaryDisciplinaryTypeRecordList recordlist, Func<RCStudentUserDisciplinaryDisciplinaryTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserDisciplinaryDisciplinaryTypeRecordList ToList<T>(T[] array, Func <T, RCStudentUserDisciplinaryDisciplinaryTypeRecord> converter) {
			RLStudentUserDisciplinaryDisciplinaryTypeRecordList result = new RLStudentUserDisciplinaryDisciplinaryTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserDisciplinaryDisciplinaryTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserDisciplinaryDisciplinaryTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserDisciplinaryDisciplinaryTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserDisciplinaryDisciplinaryTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(6, false);
			def[3] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserDisciplinaryDisciplinaryTypeRecord> NewList() {
			return new RLStudentUserDisciplinaryDisciplinaryTypeRecordList();
		}


	} // RLStudentUserDisciplinaryDisciplinaryTypeRecordList
	/// <summary>
	/// RecordList type
	///  <code>RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAs
	/// sessmentRecordList</code> that represents a record list of <code>Student,
	///  RiskAssessmentSourceOfEvidence, RiskAssessmentWhoIsAtRisk, RiskAssessmentSSPReason
	/// , RiskAssessment</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList: GenericRecordList<RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord GetElementDefaultValue() {
			return new RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList recordlist, Func<RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList ToList<T>(T[] array, Func <T, RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord> converter) {
			RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList result = new RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(4, false);
			def[2] = new BitArray(4, false);
			def[3] = new BitArray(4, false);
			def[4] = new BitArray(22, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord> NewList() {
			return new RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
		}


	} // RLStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList
	/// <summary>
	/// RecordList type <code>RLBooleanAutoComplete_BankRecordList</code> that represents a record list of
	///  <code>Boolean, AutoComplete_Bank</code>
	/// </summary>
	[Serializable()]
	public partial class RLBooleanAutoComplete_BankRecordList: GenericRecordList<RCBooleanAutoComplete_BankRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCBooleanAutoComplete_BankRecord GetElementDefaultValue() {
			return new RCBooleanAutoComplete_BankRecord("");
		}

		public T[] ToArray<T>(Func<RCBooleanAutoComplete_BankRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLBooleanAutoComplete_BankRecordList recordlist, Func<RCBooleanAutoComplete_BankRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLBooleanAutoComplete_BankRecordList ToList<T>(T[] array, Func <T, RCBooleanAutoComplete_BankRecord> converter) {
			RLBooleanAutoComplete_BankRecordList result = new RLBooleanAutoComplete_BankRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLBooleanAutoComplete_BankRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBooleanAutoComplete_BankRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBooleanAutoComplete_BankRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLBooleanAutoComplete_BankRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = null;
			def[1] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCBooleanAutoComplete_BankRecord> NewList() {
			return new RLBooleanAutoComplete_BankRecordList();
		}


	} // RLBooleanAutoComplete_BankRecordList
	/// <summary>
	/// RecordList type <code>RLStringStringRecordList</code> that represents a record list of
	///  <code>String, String</code>
	/// </summary>
	[Serializable()]
	public partial class RLStringStringRecordList: GenericRecordList<RCStringStringRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStringStringRecord GetElementDefaultValue() {
			return new RCStringStringRecord("");
		}

		public T[] ToArray<T>(Func<RCStringStringRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStringStringRecordList recordlist, Func<RCStringStringRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStringStringRecordList ToList<T>(T[] array, Func <T, RCStringStringRecord> converter) {
			RLStringStringRecordList result = new RLStringStringRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStringStringRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStringStringRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStringStringRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStringStringRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = null;
			def[1] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStringStringRecord> NewList() {
			return new RLStringStringRecordList();
		}


	} // RLStringStringRecordList
	/// <summary>
	/// RecordList type <code>RLRoleEspaceRecordList</code> that represents a record list of <code>Role,
	///  Espace</code>
	/// </summary>
	[Serializable()]
	public partial class RLRoleEspaceRecordList: GenericRecordList<RCRoleEspaceRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRoleEspaceRecord GetElementDefaultValue() {
			return new RCRoleEspaceRecord("");
		}

		public T[] ToArray<T>(Func<RCRoleEspaceRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRoleEspaceRecordList recordlist, Func<RCRoleEspaceRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRoleEspaceRecordList ToList<T>(T[] array, Func <T, RCRoleEspaceRecord> converter) {
			RLRoleEspaceRecordList result = new RLRoleEspaceRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRoleEspaceRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleEspaceRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleEspaceRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRoleEspaceRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(7, false);
			def[1] = new BitArray(18, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRoleEspaceRecord> NewList() {
			return new RLRoleEspaceRecordList();
		}


	} // RLRoleEspaceRecordList
	/// <summary>
	/// RecordList type <code>RLRiskAssessmentRiskAssessmentKeepInformedRecordList</code> that represents a
	///  record list of <code>RiskAssessment, RiskAssessmentKeepInformed</code>
	/// </summary>
	[Serializable()]
	public partial class RLRiskAssessmentRiskAssessmentKeepInformedRecordList: GenericRecordList<RCRiskAssessmentRiskAssessmentKeepInformedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRiskAssessmentRiskAssessmentKeepInformedRecord GetElementDefaultValue() {
			return new RCRiskAssessmentRiskAssessmentKeepInformedRecord("");
		}

		public T[] ToArray<T>(Func<RCRiskAssessmentRiskAssessmentKeepInformedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRiskAssessmentRiskAssessmentKeepInformedRecordList recordlist, Func<RCRiskAssessmentRiskAssessmentKeepInformedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRiskAssessmentRiskAssessmentKeepInformedRecordList ToList<T>(T[] array, Func <T, RCRiskAssessmentRiskAssessmentKeepInformedRecord> converter) {
			RLRiskAssessmentRiskAssessmentKeepInformedRecordList result = new RLRiskAssessmentRiskAssessmentKeepInformedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRiskAssessmentRiskAssessmentKeepInformedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentRiskAssessmentKeepInformedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentRiskAssessmentKeepInformedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRiskAssessmentRiskAssessmentKeepInformedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(22, false);
			def[1] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRiskAssessmentRiskAssessmentKeepInformedRecord> NewList() {
			return new RLRiskAssessmentRiskAssessmentKeepInformedRecordList();
		}


	} // RLRiskAssessmentRiskAssessmentKeepInformedRecordList
	/// <summary>
	/// RecordList type <code>RLStaffGroupStudent_GroupRecordList</code> that represents a record list of
	///  <code>Staff, Group, Student_Group</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffGroupStudent_GroupRecordList: GenericRecordList<RCStaffGroupStudent_GroupRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffGroupStudent_GroupRecord GetElementDefaultValue() {
			return new RCStaffGroupStudent_GroupRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffGroupStudent_GroupRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffGroupStudent_GroupRecordList recordlist, Func<RCStaffGroupStudent_GroupRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffGroupStudent_GroupRecordList ToList<T>(T[] array, Func <T, RCStaffGroupStudent_GroupRecord> converter) {
			RLStaffGroupStudent_GroupRecordList result = new RLStaffGroupStudent_GroupRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffGroupStudent_GroupRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffGroupStudent_GroupRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffGroupStudent_GroupRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffGroupStudent_GroupRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(15, false);
			def[1] = new BitArray(9, false);
			def[2] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffGroupStudent_GroupRecord> NewList() {
			return new RLStaffGroupStudent_GroupRecordList();
		}


	} // RLStaffGroupStudent_GroupRecordList
	/// <summary>
	/// RecordList type <code>RLUserUpdatesRecordList</code> that represents a record list of <code>User,
	///  Updates</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserUpdatesRecordList: GenericRecordList<RCUserUpdatesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserUpdatesRecord GetElementDefaultValue() {
			return new RCUserUpdatesRecord("");
		}

		public T[] ToArray<T>(Func<RCUserUpdatesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserUpdatesRecordList recordlist, Func<RCUserUpdatesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserUpdatesRecordList ToList<T>(T[] array, Func <T, RCUserUpdatesRecord> converter) {
			RLUserUpdatesRecordList result = new RLUserUpdatesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserUpdatesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserUpdatesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserUpdatesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserUpdatesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserUpdatesRecord> NewList() {
			return new RLUserUpdatesRecordList();
		}


	} // RLUserUpdatesRecordList
	/// <summary>
	/// RecordList type <code>RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList</code>
	///  that represents a record list of <code>Group, Category, ProgressReportSection
	/// , ProgressReportSections</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList: GenericRecordList<RCGroupCategoryProgressReportSectionProgressReportSectionsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupCategoryProgressReportSectionProgressReportSectionsRecord GetElementDefaultValue() {
			return new RCGroupCategoryProgressReportSectionProgressReportSectionsRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupCategoryProgressReportSectionProgressReportSectionsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList recordlist, Func<RCGroupCategoryProgressReportSectionProgressReportSectionsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList ToList<T>(T[] array, Func <T, RCGroupCategoryProgressReportSectionProgressReportSectionsRecord> converter) {
			RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList result = new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(5, false);
			def[2] = new BitArray(49, false);
			def[3] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupCategoryProgressReportSectionProgressReportSectionsRecord> NewList() {
			return new RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList();
		}


	} // RLGroupCategoryProgressReportSectionProgressReportSectionsRecordList
	/// <summary>
	/// RecordList type <code>RLTargetTypeTargetBooleanRecordList</code> that represents a record list of
	///  <code>TargetType, Target, Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLTargetTypeTargetBooleanRecordList: GenericRecordList<RCTargetTypeTargetBooleanRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTargetTypeTargetBooleanRecord GetElementDefaultValue() {
			return new RCTargetTypeTargetBooleanRecord("");
		}

		public T[] ToArray<T>(Func<RCTargetTypeTargetBooleanRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTargetTypeTargetBooleanRecordList recordlist, Func<RCTargetTypeTargetBooleanRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTargetTypeTargetBooleanRecordList ToList<T>(T[] array, Func <T, RCTargetTypeTargetBooleanRecord> converter) {
			RLTargetTypeTargetBooleanRecordList result = new RLTargetTypeTargetBooleanRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTargetTypeTargetBooleanRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTargetTypeTargetBooleanRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTargetTypeTargetBooleanRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTargetTypeTargetBooleanRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(4, false);
			def[1] = new BitArray(17, false);
			def[2] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTargetTypeTargetBooleanRecord> NewList() {
			return new RLTargetTypeTargetBooleanRecordList();
		}


	} // RLTargetTypeTargetBooleanRecordList
	/// <summary>
	/// RecordList type <code>RLSupportTypeSupportRecordList</code> that represents a record list of
	///  <code>SupportType, Support</code>
	/// </summary>
	[Serializable()]
	public partial class RLSupportTypeSupportRecordList: GenericRecordList<RCSupportTypeSupportRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSupportTypeSupportRecord GetElementDefaultValue() {
			return new RCSupportTypeSupportRecord("");
		}

		public T[] ToArray<T>(Func<RCSupportTypeSupportRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSupportTypeSupportRecordList recordlist, Func<RCSupportTypeSupportRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSupportTypeSupportRecordList ToList<T>(T[] array, Func <T, RCSupportTypeSupportRecord> converter) {
			RLSupportTypeSupportRecordList result = new RLSupportTypeSupportRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSupportTypeSupportRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportTypeSupportRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportTypeSupportRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSupportTypeSupportRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(7, false);
			def[1] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSupportTypeSupportRecord> NewList() {
			return new RLSupportTypeSupportRecordList();
		}


	} // RLSupportTypeSupportRecordList
	/// <summary>
	/// RecordList type <code>RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList</code> that
	///  represents a record list of <code>User, Boolean, RiskAssessment, RiskAssessmentKeepInformed</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList: GenericRecordList<RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord GetElementDefaultValue() {
			return new RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord("");
		}

		public T[] ToArray<T>(Func<RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList recordlist, Func<RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList ToList<T>(T[] array, Func <T, RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord> converter) {
			RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList result = new RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(11, false);
			def[1] = null;
			def[2] = new BitArray(22, false);
			def[3] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord> NewList() {
			return new RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList();
		}


	} // RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList
	/// <summary>
	/// RecordList type <code>RLStudentSIASSupportNeedsSupportNeedsIdRecordList</code> that represents a
	///  record list of <code>Student, SIASSupportNeeds, SupportNeedsId</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentSIASSupportNeedsSupportNeedsIdRecordList: GenericRecordList<RCStudentSIASSupportNeedsSupportNeedsIdRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentSIASSupportNeedsSupportNeedsIdRecord GetElementDefaultValue() {
			return new RCStudentSIASSupportNeedsSupportNeedsIdRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentSIASSupportNeedsSupportNeedsIdRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentSIASSupportNeedsSupportNeedsIdRecordList recordlist, Func<RCStudentSIASSupportNeedsSupportNeedsIdRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentSIASSupportNeedsSupportNeedsIdRecordList ToList<T>(T[] array, Func <T, RCStudentSIASSupportNeedsSupportNeedsIdRecord> converter) {
			RLStudentSIASSupportNeedsSupportNeedsIdRecordList result = new RLStudentSIASSupportNeedsSupportNeedsIdRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentSIASSupportNeedsSupportNeedsIdRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentSIASSupportNeedsSupportNeedsIdRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentSIASSupportNeedsSupportNeedsIdRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentSIASSupportNeedsSupportNeedsIdRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(5, false);
			def[2] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentSIASSupportNeedsSupportNeedsIdRecord> NewList() {
			return new RLStudentSIASSupportNeedsSupportNeedsIdRecordList();
		}


	} // RLStudentSIASSupportNeedsSupportNeedsIdRecordList
	/// <summary>
	/// RecordList type <code>RLIntIntIntIntRecordList</code> that represents a record list of <code>Int,
	///  Int, Int, Int</code>
	/// </summary>
	[Serializable()]
	public partial class RLIntIntIntIntRecordList: GenericRecordList<RCIntIntIntIntRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCIntIntIntIntRecord GetElementDefaultValue() {
			return new RCIntIntIntIntRecord("");
		}

		public T[] ToArray<T>(Func<RCIntIntIntIntRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLIntIntIntIntRecordList recordlist, Func<RCIntIntIntIntRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLIntIntIntIntRecordList ToList<T>(T[] array, Func <T, RCIntIntIntIntRecord> converter) {
			RLIntIntIntIntRecordList result = new RLIntIntIntIntRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLIntIntIntIntRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIntIntIntIntRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIntIntIntIntRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLIntIntIntIntRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = null;
			def[1] = null;
			def[2] = null;
			def[3] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCIntIntIntIntRecord> NewList() {
			return new RLIntIntIntIntRecordList();
		}


	} // RLIntIntIntIntRecordList
	/// <summary>
	/// RecordList type <code>RLUserStudentExemptionRecordList</code> that represents a record list of
	///  <code>User, StudentExemption</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserStudentExemptionRecordList: GenericRecordList<RCUserStudentExemptionRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserStudentExemptionRecord GetElementDefaultValue() {
			return new RCUserStudentExemptionRecord("");
		}

		public T[] ToArray<T>(Func<RCUserStudentExemptionRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserStudentExemptionRecordList recordlist, Func<RCUserStudentExemptionRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserStudentExemptionRecordList ToList<T>(T[] array, Func <T, RCUserStudentExemptionRecord> converter) {
			RLUserStudentExemptionRecordList result = new RLUserStudentExemptionRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserStudentExemptionRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentExemptionRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentExemptionRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserStudentExemptionRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserStudentExemptionRecord> NewList() {
			return new RLUserStudentExemptionRecordList();
		}


	} // RLUserStudentExemptionRecordList
	/// <summary>
	/// RecordList type <code>RLStudentUserRewardRewardReasonRecordList</code> that represents a record
	///  list of <code>Student, User, Reward, RewardReason</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserRewardRewardReasonRecordList: GenericRecordList<RCStudentUserRewardRewardReasonRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserRewardRewardReasonRecord GetElementDefaultValue() {
			return new RCStudentUserRewardRewardReasonRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserRewardRewardReasonRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserRewardRewardReasonRecordList recordlist, Func<RCStudentUserRewardRewardReasonRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserRewardRewardReasonRecordList ToList<T>(T[] array, Func <T, RCStudentUserRewardRewardReasonRecord> converter) {
			RLStudentUserRewardRewardReasonRecordList result = new RLStudentUserRewardRewardReasonRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserRewardRewardReasonRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserRewardRewardReasonRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserRewardRewardReasonRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserRewardRewardReasonRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(7, false);
			def[3] = new BitArray(2, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserRewardRewardReasonRecord> NewList() {
			return new RLStudentUserRewardRewardReasonRecordList();
		}


	} // RLStudentUserRewardRewardReasonRecordList
	/// <summary>
	/// RecordList type <code>RLStudentUserProgressReportRecordList</code> that represents a record list of
	///  <code>Student, User, ProgressReport</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserProgressReportRecordList: GenericRecordList<RCStudentUserProgressReportRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserProgressReportRecord GetElementDefaultValue() {
			return new RCStudentUserProgressReportRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserProgressReportRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserProgressReportRecordList recordlist, Func<RCStudentUserProgressReportRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserProgressReportRecordList ToList<T>(T[] array, Func <T, RCStudentUserProgressReportRecord> converter) {
			RLStudentUserProgressReportRecordList result = new RLStudentUserProgressReportRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserProgressReportRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserProgressReportRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserProgressReportRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserProgressReportRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(23, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserProgressReportRecord> NewList() {
			return new RLStudentUserProgressReportRecordList();
		}


	} // RLStudentUserProgressReportRecordList
	/// <summary>
	/// RecordList type <code>RLUserNoteNoteTypeRecordList</code> that represents a record list of
	///  <code>User, Note, NoteType</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserNoteNoteTypeRecordList: GenericRecordList<RCUserNoteNoteTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserNoteNoteTypeRecord GetElementDefaultValue() {
			return new RCUserNoteNoteTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCUserNoteNoteTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserNoteNoteTypeRecordList recordlist, Func<RCUserNoteNoteTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserNoteNoteTypeRecordList ToList<T>(T[] array, Func <T, RCUserNoteNoteTypeRecord> converter) {
			RLUserNoteNoteTypeRecordList result = new RLUserNoteNoteTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserNoteNoteTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserNoteNoteTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserNoteNoteTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserNoteNoteTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(8, false);
			def[2] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserNoteNoteTypeRecord> NewList() {
			return new RLUserNoteNoteTypeRecordList();
		}


	} // RLUserNoteNoteTypeRecordList
	/// <summary>
	/// RecordList type <code>RLProgressReportProgressReportSectionProgressReportSectionsRecordList</code>
	///  that represents a record list of <code>ProgressReport, ProgressReportSection
	/// , ProgressReportSections</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportProgressReportSectionProgressReportSectionsRecordList: GenericRecordList<RCProgressReportProgressReportSectionProgressReportSectionsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCProgressReportProgressReportSectionProgressReportSectionsRecord GetElementDefaultValue() {
			return new RCProgressReportProgressReportSectionProgressReportSectionsRecord("");
		}

		public T[] ToArray<T>(Func<RCProgressReportProgressReportSectionProgressReportSectionsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportProgressReportSectionProgressReportSectionsRecordList recordlist, Func<RCProgressReportProgressReportSectionProgressReportSectionsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportProgressReportSectionProgressReportSectionsRecordList ToList<T>(T[] array, Func <T, RCProgressReportProgressReportSectionProgressReportSectionsRecord> converter) {
			RLProgressReportProgressReportSectionProgressReportSectionsRecordList result = new RLProgressReportProgressReportSectionProgressReportSectionsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportProgressReportSectionProgressReportSectionsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportProgressReportSectionProgressReportSectionsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(23, false);
			def[1] = new BitArray(49, false);
			def[2] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCProgressReportProgressReportSectionProgressReportSectionsRecord> NewList() {
			return new RLProgressReportProgressReportSectionProgressReportSectionsRecordList();
		}


	} // RLProgressReportProgressReportSectionProgressReportSectionsRecordList
	/// <summary>
	/// RecordList type <code>RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList</code>
	///  that represents a record list of <code>Student, User, RAGStatus, CauseOfConcernReason
	/// , CauseOfConcern</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList: GenericRecordList<RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord GetElementDefaultValue() {
			return new RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList recordlist, Func<RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList ToList<T>(T[] array, Func <T, RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord> converter) {
			RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList result = new RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(5, false);
			def[3] = new BitArray(3, false);
			def[4] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord> NewList() {
			return new RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList();
		}


	} // RLStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecordList
	/// <summary>
	/// RecordList type <code>RLStudentUserDestinationsStudentCareerAimRecordList</code> that represents a
	///  record list of <code>Student, User, Destinations, StudentCareerAim</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserDestinationsStudentCareerAimRecordList: GenericRecordList<RCStudentUserDestinationsStudentCareerAimRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserDestinationsStudentCareerAimRecord GetElementDefaultValue() {
			return new RCStudentUserDestinationsStudentCareerAimRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserDestinationsStudentCareerAimRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserDestinationsStudentCareerAimRecordList recordlist, Func<RCStudentUserDestinationsStudentCareerAimRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserDestinationsStudentCareerAimRecordList ToList<T>(T[] array, Func <T, RCStudentUserDestinationsStudentCareerAimRecord> converter) {
			RLStudentUserDestinationsStudentCareerAimRecordList result = new RLStudentUserDestinationsStudentCareerAimRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserDestinationsStudentCareerAimRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserDestinationsStudentCareerAimRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserDestinationsStudentCareerAimRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserDestinationsStudentCareerAimRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(4, false);
			def[3] = new BitArray(10, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserDestinationsStudentCareerAimRecord> NewList() {
			return new RLStudentUserDestinationsStudentCareerAimRecordList();
		}


	} // RLStudentUserDestinationsStudentCareerAimRecordList
	/// <summary>
	/// RecordList type
	///  <code>RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList</code
	/// > that represents a record list of <code>User, RAGStatus, CauseOfConcernReason,
	///  CauseOfConcernLearnerNotes, CauseOfConcern</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList: GenericRecordList<RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord GetElementDefaultValue() {
			return new RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord("");
		}

		public T[] ToArray<T>(Func<RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList recordlist, Func<RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList ToList<T>(T[] array, Func <T, RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord> converter) {
			RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList result = new RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(5, false);
			def[2] = new BitArray(3, false);
			def[3] = new BitArray(7, false);
			def[4] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord> NewList() {
			return new RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList();
		}


	} // RLUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecordList
	/// <summary>
	/// RecordList type <code>RLDocumentsUpdatesRecordList</code> that represents a record list of
	///  <code>Documents, Updates</code>
	/// </summary>
	[Serializable()]
	public partial class RLDocumentsUpdatesRecordList: GenericRecordList<RCDocumentsUpdatesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCDocumentsUpdatesRecord GetElementDefaultValue() {
			return new RCDocumentsUpdatesRecord("");
		}

		public T[] ToArray<T>(Func<RCDocumentsUpdatesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDocumentsUpdatesRecordList recordlist, Func<RCDocumentsUpdatesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDocumentsUpdatesRecordList ToList<T>(T[] array, Func <T, RCDocumentsUpdatesRecord> converter) {
			RLDocumentsUpdatesRecordList result = new RLDocumentsUpdatesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDocumentsUpdatesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocumentsUpdatesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocumentsUpdatesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDocumentsUpdatesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(7, false);
			def[1] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCDocumentsUpdatesRecord> NewList() {
			return new RLDocumentsUpdatesRecordList();
		}


	} // RLDocumentsUpdatesRecordList
	/// <summary>
	/// RecordList type <code>RLClusterCCSessionRecordList</code> that represents a record list of
	///  <code>Cluster, CCSession</code>
	/// </summary>
	[Serializable()]
	public partial class RLClusterCCSessionRecordList: GenericRecordList<RCClusterCCSessionRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCClusterCCSessionRecord GetElementDefaultValue() {
			return new RCClusterCCSessionRecord("");
		}

		public T[] ToArray<T>(Func<RCClusterCCSessionRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLClusterCCSessionRecordList recordlist, Func<RCClusterCCSessionRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLClusterCCSessionRecordList ToList<T>(T[] array, Func <T, RCClusterCCSessionRecord> converter) {
			RLClusterCCSessionRecordList result = new RLClusterCCSessionRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLClusterCCSessionRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClusterCCSessionRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClusterCCSessionRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLClusterCCSessionRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(7, false);
			def[1] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCClusterCCSessionRecord> NewList() {
			return new RLClusterCCSessionRecordList();
		}


	} // RLClusterCCSessionRecordList
	/// <summary>
	/// RecordList type <code>RLTeamStringStringStringBooleanRecordList</code> that represents a record
	///  list of <code>Team, String, String, String, Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLTeamStringStringStringBooleanRecordList: GenericRecordList<RCTeamStringStringStringBooleanRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTeamStringStringStringBooleanRecord GetElementDefaultValue() {
			return new RCTeamStringStringStringBooleanRecord("");
		}

		public T[] ToArray<T>(Func<RCTeamStringStringStringBooleanRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTeamStringStringStringBooleanRecordList recordlist, Func<RCTeamStringStringStringBooleanRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTeamStringStringStringBooleanRecordList ToList<T>(T[] array, Func <T, RCTeamStringStringStringBooleanRecord> converter) {
			RLTeamStringStringStringBooleanRecordList result = new RLTeamStringStringStringBooleanRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTeamStringStringStringBooleanRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTeamStringStringStringBooleanRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTeamStringStringStringBooleanRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTeamStringStringStringBooleanRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(5, false);
			def[1] = null;
			def[2] = null;
			def[3] = null;
			def[4] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTeamStringStringStringBooleanRecord> NewList() {
			return new RLTeamStringStringStringBooleanRecordList();
		}


	} // RLTeamStringStringStringBooleanRecordList
	/// <summary>
	/// RecordList type <code>RLCurriculumLeadStringStringStringBooleanRecordList</code> that represents a
	///  record list of <code>CurriculumLead, String, String, String, Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLCurriculumLeadStringStringStringBooleanRecordList: GenericRecordList<RCCurriculumLeadStringStringStringBooleanRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCurriculumLeadStringStringStringBooleanRecord GetElementDefaultValue() {
			return new RCCurriculumLeadStringStringStringBooleanRecord("");
		}

		public T[] ToArray<T>(Func<RCCurriculumLeadStringStringStringBooleanRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCurriculumLeadStringStringStringBooleanRecordList recordlist, Func<RCCurriculumLeadStringStringStringBooleanRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCurriculumLeadStringStringStringBooleanRecordList ToList<T>(T[] array, Func <T, RCCurriculumLeadStringStringStringBooleanRecord> converter) {
			RLCurriculumLeadStringStringStringBooleanRecordList result = new RLCurriculumLeadStringStringStringBooleanRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCurriculumLeadStringStringStringBooleanRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCurriculumLeadStringStringStringBooleanRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCurriculumLeadStringStringStringBooleanRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCurriculumLeadStringStringStringBooleanRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(5, false);
			def[1] = null;
			def[2] = null;
			def[3] = null;
			def[4] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCurriculumLeadStringStringStringBooleanRecord> NewList() {
			return new RLCurriculumLeadStringStringStringBooleanRecordList();
		}


	} // RLCurriculumLeadStringStringStringBooleanRecordList
	/// <summary>
	/// RecordList type <code>RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList</code> that
	///  represents a record list of <code>Student, User, Boolean, Disciplinary, DisciplinaryType</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList: GenericRecordList<RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord GetElementDefaultValue() {
			return new RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList recordlist, Func<RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList ToList<T>(T[] array, Func <T, RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord> converter) {
			RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList result = new RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = null;
			def[3] = new BitArray(6, false);
			def[4] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord> NewList() {
			return new RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList();
		}


	} // RLStudentUserBooleanDisciplinaryDisciplinaryTypeRecordList
	/// <summary>
	/// RecordList type <code>RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList</code> that represents
	///  a record list of <code>Documents, Disciplinary, DisciplinaryDocuments</code>
	/// </summary>
	[Serializable()]
	public partial class RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList: GenericRecordList<RCDocumentsDisciplinaryDisciplinaryDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCDocumentsDisciplinaryDisciplinaryDocumentsRecord GetElementDefaultValue() {
			return new RCDocumentsDisciplinaryDisciplinaryDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCDocumentsDisciplinaryDisciplinaryDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList recordlist, Func<RCDocumentsDisciplinaryDisciplinaryDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList ToList<T>(T[] array, Func <T, RCDocumentsDisciplinaryDisciplinaryDocumentsRecord> converter) {
			RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList result = new RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(7, false);
			def[1] = new BitArray(6, false);
			def[2] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCDocumentsDisciplinaryDisciplinaryDocumentsRecord> NewList() {
			return new RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList();
		}


	} // RLDocumentsDisciplinaryDisciplinaryDocumentsRecordList
	/// <summary>
	/// RecordList type <code>RLStaffView_SearchStaffView_FilterRecordList</code> that represents a record
	///  list of <code>StaffView_Search, StaffView_Filter</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffView_SearchStaffView_FilterRecordList: GenericRecordList<RCStaffView_SearchStaffView_FilterRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffView_SearchStaffView_FilterRecord GetElementDefaultValue() {
			return new RCStaffView_SearchStaffView_FilterRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffView_SearchStaffView_FilterRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffView_SearchStaffView_FilterRecordList recordlist, Func<RCStaffView_SearchStaffView_FilterRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffView_SearchStaffView_FilterRecordList ToList<T>(T[] array, Func <T, RCStaffView_SearchStaffView_FilterRecord> converter) {
			RLStaffView_SearchStaffView_FilterRecordList result = new RLStaffView_SearchStaffView_FilterRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffView_SearchStaffView_FilterRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_SearchStaffView_FilterRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_SearchStaffView_FilterRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffView_SearchStaffView_FilterRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = null;
			def[1] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffView_SearchStaffView_FilterRecord> NewList() {
			return new RLStaffView_SearchStaffView_FilterRecordList();
		}


	} // RLStaffView_SearchStaffView_FilterRecordList
	/// <summary>
	/// RecordList type <code>RLStudentStudentMLWProcessMLWStagesRecordList</code> that represents a record
	///  list of <code>Student, StudentMLWProcess, MLWStages</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentStudentMLWProcessMLWStagesRecordList: GenericRecordList<RCStudentStudentMLWProcessMLWStagesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentStudentMLWProcessMLWStagesRecord GetElementDefaultValue() {
			return new RCStudentStudentMLWProcessMLWStagesRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentStudentMLWProcessMLWStagesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentStudentMLWProcessMLWStagesRecordList recordlist, Func<RCStudentStudentMLWProcessMLWStagesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentStudentMLWProcessMLWStagesRecordList ToList<T>(T[] array, Func <T, RCStudentStudentMLWProcessMLWStagesRecord> converter) {
			RLStudentStudentMLWProcessMLWStagesRecordList result = new RLStudentStudentMLWProcessMLWStagesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentStudentMLWProcessMLWStagesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentStudentMLWProcessMLWStagesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentStudentMLWProcessMLWStagesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentStudentMLWProcessMLWStagesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(15, false);
			def[2] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentStudentMLWProcessMLWStagesRecord> NewList() {
			return new RLStudentStudentMLWProcessMLWStagesRecordList();
		}


	} // RLStudentStudentMLWProcessMLWStagesRecordList
	/// <summary>
	/// RecordList type <code>RLAutoComplete_BankAutoCompleteBankTypeRecordList</code> that represents a
	///  record list of <code>AutoComplete_Bank, AutoCompleteBankType</code>
	/// </summary>
	[Serializable()]
	public partial class RLAutoComplete_BankAutoCompleteBankTypeRecordList: GenericRecordList<RCAutoComplete_BankAutoCompleteBankTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAutoComplete_BankAutoCompleteBankTypeRecord GetElementDefaultValue() {
			return new RCAutoComplete_BankAutoCompleteBankTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCAutoComplete_BankAutoCompleteBankTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAutoComplete_BankAutoCompleteBankTypeRecordList recordlist, Func<RCAutoComplete_BankAutoCompleteBankTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAutoComplete_BankAutoCompleteBankTypeRecordList ToList<T>(T[] array, Func <T, RCAutoComplete_BankAutoCompleteBankTypeRecord> converter) {
			RLAutoComplete_BankAutoCompleteBankTypeRecordList result = new RLAutoComplete_BankAutoCompleteBankTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAutoComplete_BankAutoCompleteBankTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAutoComplete_BankAutoCompleteBankTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAutoComplete_BankAutoCompleteBankTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAutoComplete_BankAutoCompleteBankTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(7, false);
			def[1] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAutoComplete_BankAutoCompleteBankTypeRecord> NewList() {
			return new RLAutoComplete_BankAutoCompleteBankTypeRecordList();
		}


	} // RLAutoComplete_BankAutoCompleteBankTypeRecordList
	/// <summary>
	/// RecordList type <code>RLStudentStudentLogRecordList</code> that represents a record list of
	///  <code>Student, StudentLog</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentStudentLogRecordList: GenericRecordList<RCStudentStudentLogRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentStudentLogRecord GetElementDefaultValue() {
			return new RCStudentStudentLogRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentStudentLogRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentStudentLogRecordList recordlist, Func<RCStudentStudentLogRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentStudentLogRecordList ToList<T>(T[] array, Func <T, RCStudentStudentLogRecord> converter) {
			RLStudentStudentLogRecordList result = new RLStudentStudentLogRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentStudentLogRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentStudentLogRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentStudentLogRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentStudentLogRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(44, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentStudentLogRecord> NewList() {
			return new RLStudentStudentLogRecordList();
		}


	} // RLStudentStudentLogRecordList
	/// <summary>
	/// RecordList type <code>RLStaffSafeguardingPersonsInvolvedRecordList</code> that represents a record
	///  list of <code>Staff, SafeguardingPersonsInvolved</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffSafeguardingPersonsInvolvedRecordList: GenericRecordList<RCStaffSafeguardingPersonsInvolvedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffSafeguardingPersonsInvolvedRecord GetElementDefaultValue() {
			return new RCStaffSafeguardingPersonsInvolvedRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffSafeguardingPersonsInvolvedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffSafeguardingPersonsInvolvedRecordList recordlist, Func<RCStaffSafeguardingPersonsInvolvedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffSafeguardingPersonsInvolvedRecordList ToList<T>(T[] array, Func <T, RCStaffSafeguardingPersonsInvolvedRecord> converter) {
			RLStaffSafeguardingPersonsInvolvedRecordList result = new RLStaffSafeguardingPersonsInvolvedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffSafeguardingPersonsInvolvedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffSafeguardingPersonsInvolvedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffSafeguardingPersonsInvolvedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffSafeguardingPersonsInvolvedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(15, false);
			def[1] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffSafeguardingPersonsInvolvedRecord> NewList() {
			return new RLStaffSafeguardingPersonsInvolvedRecordList();
		}


	} // RLStaffSafeguardingPersonsInvolvedRecordList
	/// <summary>
	/// RecordList type <code>RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList</code>
	///  that represents a record list of <code>Staff, Student, RAGStatus, SafeguardingIssue
	/// , SafeguardingOutcome</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList: GenericRecordList<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord GetElementDefaultValue() {
			return new RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList recordlist, Func<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList ToList<T>(T[] array, Func <T, RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord> converter) {
			RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList result = new RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(15, false);
			def[1] = new BitArray(27, false);
			def[2] = new BitArray(5, false);
			def[3] = new BitArray(18, false);
			def[4] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord> NewList() {
			return new RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList();
		}


	} // RLStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecordList
	/// <summary>
	/// RecordList type <code>RLStudentStudentProcessNotesStudentMLWProcessRecordList</code> that
	///  represents a record list of <code>Student, StudentProcessNotes, StudentMLWProcess</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentStudentProcessNotesStudentMLWProcessRecordList: GenericRecordList<RCStudentStudentProcessNotesStudentMLWProcessRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentStudentProcessNotesStudentMLWProcessRecord GetElementDefaultValue() {
			return new RCStudentStudentProcessNotesStudentMLWProcessRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentStudentProcessNotesStudentMLWProcessRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentStudentProcessNotesStudentMLWProcessRecordList recordlist, Func<RCStudentStudentProcessNotesStudentMLWProcessRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentStudentProcessNotesStudentMLWProcessRecordList ToList<T>(T[] array, Func <T, RCStudentStudentProcessNotesStudentMLWProcessRecord> converter) {
			RLStudentStudentProcessNotesStudentMLWProcessRecordList result = new RLStudentStudentProcessNotesStudentMLWProcessRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentStudentProcessNotesStudentMLWProcessRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentStudentProcessNotesStudentMLWProcessRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentStudentProcessNotesStudentMLWProcessRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentStudentProcessNotesStudentMLWProcessRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(5, false);
			def[2] = new BitArray(15, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentStudentProcessNotesStudentMLWProcessRecord> NewList() {
			return new RLStudentStudentProcessNotesStudentMLWProcessRecordList();
		}


	} // RLStudentStudentProcessNotesStudentMLWProcessRecordList
	/// <summary>
	/// RecordList type <code>RLStudentUserRAGStatusStudentRAGRecordList</code> that represents a record
	///  list of <code>Student, User, RAGStatus, StudentRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentUserRAGStatusStudentRAGRecordList: GenericRecordList<RCStudentUserRAGStatusStudentRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentUserRAGStatusStudentRAGRecord GetElementDefaultValue() {
			return new RCStudentUserRAGStatusStudentRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentUserRAGStatusStudentRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentUserRAGStatusStudentRAGRecordList recordlist, Func<RCStudentUserRAGStatusStudentRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentUserRAGStatusStudentRAGRecordList ToList<T>(T[] array, Func <T, RCStudentUserRAGStatusStudentRAGRecord> converter) {
			RLStudentUserRAGStatusStudentRAGRecordList result = new RLStudentUserRAGStatusStudentRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentUserRAGStatusStudentRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserRAGStatusStudentRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentUserRAGStatusStudentRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentUserRAGStatusStudentRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(27, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(5, false);
			def[3] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentUserRAGStatusStudentRAGRecord> NewList() {
			return new RLStudentUserRAGStatusStudentRAGRecordList();
		}


	} // RLStudentUserRAGStatusStudentRAGRecordList
	/// <summary>
	/// RecordList type <code>RLLearningSupportLearningSupportTypesRecordList</code> that represents a
	///  record list of <code>LearningSupport, LearningSupportTypes</code>
	/// </summary>
	[Serializable()]
	public partial class RLLearningSupportLearningSupportTypesRecordList: GenericRecordList<RCLearningSupportLearningSupportTypesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCLearningSupportLearningSupportTypesRecord GetElementDefaultValue() {
			return new RCLearningSupportLearningSupportTypesRecord("");
		}

		public T[] ToArray<T>(Func<RCLearningSupportLearningSupportTypesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLLearningSupportLearningSupportTypesRecordList recordlist, Func<RCLearningSupportLearningSupportTypesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLLearningSupportLearningSupportTypesRecordList ToList<T>(T[] array, Func <T, RCLearningSupportLearningSupportTypesRecord> converter) {
			RLLearningSupportLearningSupportTypesRecordList result = new RLLearningSupportLearningSupportTypesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLLearningSupportLearningSupportTypesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearningSupportLearningSupportTypesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearningSupportLearningSupportTypesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLLearningSupportLearningSupportTypesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCLearningSupportLearningSupportTypesRecord> NewList() {
			return new RLLearningSupportLearningSupportTypesRecordList();
		}


	} // RLLearningSupportLearningSupportTypesRecordList
	/// <summary>
	/// RecordList type <code>RLGroupCategoryStudent_GroupIALevelsRecordList</code> that represents a
	///  record list of <code>Group, Category, Student_Group, IALevels</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupCategoryStudent_GroupIALevelsRecordList: GenericRecordList<RCGroupCategoryStudent_GroupIALevelsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupCategoryStudent_GroupIALevelsRecord GetElementDefaultValue() {
			return new RCGroupCategoryStudent_GroupIALevelsRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupCategoryStudent_GroupIALevelsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupCategoryStudent_GroupIALevelsRecordList recordlist, Func<RCGroupCategoryStudent_GroupIALevelsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupCategoryStudent_GroupIALevelsRecordList ToList<T>(T[] array, Func <T, RCGroupCategoryStudent_GroupIALevelsRecord> converter) {
			RLGroupCategoryStudent_GroupIALevelsRecordList result = new RLGroupCategoryStudent_GroupIALevelsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupCategoryStudent_GroupIALevelsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupCategoryStudent_GroupIALevelsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupCategoryStudent_GroupIALevelsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupCategoryStudent_GroupIALevelsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[4];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(5, false);
			def[2] = new BitArray(9, false);
			def[3] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupCategoryStudent_GroupIALevelsRecord> NewList() {
			return new RLGroupCategoryStudent_GroupIALevelsRecordList();
		}


	} // RLGroupCategoryStudent_GroupIALevelsRecordList
	/// <summary>
	/// RecordList type <code>RLUserTutorialRecordList</code> that represents a record list of <code>User,
	///  Tutorial</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserTutorialRecordList: GenericRecordList<RCUserTutorialRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserTutorialRecord GetElementDefaultValue() {
			return new RCUserTutorialRecord("");
		}

		public T[] ToArray<T>(Func<RCUserTutorialRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserTutorialRecordList recordlist, Func<RCUserTutorialRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserTutorialRecordList ToList<T>(T[] array, Func <T, RCUserTutorialRecord> converter) {
			RLUserTutorialRecordList result = new RLUserTutorialRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserTutorialRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserTutorialRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserTutorialRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserTutorialRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserTutorialRecord> NewList() {
			return new RLUserTutorialRecordList();
		}


	} // RLUserTutorialRecordList
	/// <summary>
	/// RecordList type
	///  <code>RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord
	/// List</code> that represents a record list of <code>Group, User, User, User, User, Boolean,
	///  ProgressReport, ProgressReportSection, ProgressReportSections</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList: GenericRecordList<RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord GetElementDefaultValue() {
			return new RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList recordlist, Func<RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList ToList<T>(T[] array, Func <T, RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord> converter) {
			RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList result = new RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[9];
			def[0] = new BitArray(9, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(11, false);
			def[3] = new BitArray(11, false);
			def[4] = new BitArray(11, false);
			def[5] = null;
			def[6] = new BitArray(23, false);
			def[7] = new BitArray(49, false);
			def[8] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord> NewList() {
			return new RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList();
		}


	} // RLGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecordList
	/// <summary>
	/// RecordList type <code>RLUserStudentLogRecordList</code> that represents a record list of
	///  <code>User, StudentLog</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserStudentLogRecordList: GenericRecordList<RCUserStudentLogRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserStudentLogRecord GetElementDefaultValue() {
			return new RCUserStudentLogRecord("");
		}

		public T[] ToArray<T>(Func<RCUserStudentLogRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserStudentLogRecordList recordlist, Func<RCUserStudentLogRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserStudentLogRecordList ToList<T>(T[] array, Func <T, RCUserStudentLogRecord> converter) {
			RLUserStudentLogRecordList result = new RLUserStudentLogRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserStudentLogRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentLogRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserStudentLogRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserStudentLogRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(44, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserStudentLogRecord> NewList() {
			return new RLUserStudentLogRecordList();
		}


	} // RLUserStudentLogRecordList
	/// <summary>
	/// RecordList type <code>RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList</code> that
	///  represents a record list of <code>User, User, AcademicYears, ProgressReport
	/// , ProgressReportType</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList: GenericRecordList<RCUserUserAcademicYearsProgressReportProgressReportTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserUserAcademicYearsProgressReportProgressReportTypeRecord GetElementDefaultValue() {
			return new RCUserUserAcademicYearsProgressReportProgressReportTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCUserUserAcademicYearsProgressReportProgressReportTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList recordlist, Func<RCUserUserAcademicYearsProgressReportProgressReportTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList ToList<T>(T[] array, Func <T, RCUserUserAcademicYearsProgressReportProgressReportTypeRecord> converter) {
			RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList result = new RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[5];
			def[0] = new BitArray(11, false);
			def[1] = new BitArray(11, false);
			def[2] = new BitArray(10, false);
			def[3] = new BitArray(23, false);
			def[4] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserUserAcademicYearsProgressReportProgressReportTypeRecord> NewList() {
			return new RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList();
		}


	} // RLUserUserAcademicYearsProgressReportProgressReportTypeRecordList
	/// <summary>
	/// RecordList type <code>RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList</code> that
	///  represents a record list of <code>SIASSupportNeeds, SIASSupportNeed, SupportNeeds</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList: GenericRecordList<RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord GetElementDefaultValue() {
			return new RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord("");
		}

		public T[] ToArray<T>(Func<RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList recordlist, Func<RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList ToList<T>(T[] array, Func <T, RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord> converter) {
			RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList result = new RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[3];
			def[0] = new BitArray(5, false);
			def[1] = new BitArray(5, false);
			def[2] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord> NewList() {
			return new RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList();
		}


	} // RLSIASSupportNeedsSIASSupportNeedSupportNeedsRecordList
	/// <summary>
	/// RecordList type <code>RLDisciplinaryDisciplinaryTypeRecordList</code> that represents a record list
	///  of <code>Disciplinary, DisciplinaryType</code>
	/// </summary>
	[Serializable()]
	public partial class RLDisciplinaryDisciplinaryTypeRecordList: GenericRecordList<RCDisciplinaryDisciplinaryTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCDisciplinaryDisciplinaryTypeRecord GetElementDefaultValue() {
			return new RCDisciplinaryDisciplinaryTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCDisciplinaryDisciplinaryTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDisciplinaryDisciplinaryTypeRecordList recordlist, Func<RCDisciplinaryDisciplinaryTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDisciplinaryDisciplinaryTypeRecordList ToList<T>(T[] array, Func <T, RCDisciplinaryDisciplinaryTypeRecord> converter) {
			RLDisciplinaryDisciplinaryTypeRecordList result = new RLDisciplinaryDisciplinaryTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDisciplinaryDisciplinaryTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDisciplinaryDisciplinaryTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDisciplinaryDisciplinaryTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDisciplinaryDisciplinaryTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(6, false);
			def[1] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCDisciplinaryDisciplinaryTypeRecord> NewList() {
			return new RLDisciplinaryDisciplinaryTypeRecordList();
		}


	} // RLDisciplinaryDisciplinaryTypeRecordList
	/// <summary>
	/// RecordList type
	///  <code>RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardin
	/// gReferralMadeToSafeguardiRecordList</code> that represents a record list of <code>Staff, Student,
	///  RAGStatus, SafeguardingIssue, SafeguardingDocuments, SafeguardingIssueType
	/// , SafeguardingReferralMadeTo, SafeguardingOutcome, SafeguardingNatureOfConcern</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList: GenericRecordList<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord GetElementDefaultValue() {
			return new RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList recordlist, Func<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList ToList<T>(T[] array, Func <T, RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord> converter) {
			RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList result = new RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[9];
			def[0] = new BitArray(15, false);
			def[1] = new BitArray(27, false);
			def[2] = new BitArray(5, false);
			def[3] = new BitArray(18, false);
			def[4] = new BitArray(4, false);
			def[5] = new BitArray(4, false);
			def[6] = new BitArray(4, false);
			def[7] = new BitArray(4, false);
			def[8] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord> NewList() {
			return new RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList();
		}


	} // RLStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardiRecordList
	/// <summary>
	/// RecordList type <code>RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList</code> that
	///  represents a record list of <code>SafeguardingDocumentsBinary, SafeguardingDocuments</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList: GenericRecordList<RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord GetElementDefaultValue() {
			return new RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList recordlist, Func<RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList ToList<T>(T[] array, Func <T, RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord> converter) {
			RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList result = new RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[2];
			def[0] = new BitArray(3, false);
			def[1] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord> NewList() {
			return new RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList();
		}


	} // RLSafeguardingDocumentsBinarySafeguardingDocumentsRecordList
}
namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRewardRewardReasonRecordList {
		public WORCRewardRewardReasonRecord[] Array;


		public WORLRewardRewardReasonRecordList(WORCRewardRewardReasonRecord[] r) {
			if (r == null)
			Array = new WORCRewardRewardReasonRecord[0];
			else
			Array = r;
		}
		public WORLRewardRewardReasonRecordList() {
			Array = new WORCRewardRewardReasonRecord[0];
		}

		public WORLRewardRewardReasonRecordList(RLRewardRewardReasonRecordList rl) {
			rl=(RLRewardRewardReasonRecordList) rl.Duplicate();
			Array = new WORCRewardRewardReasonRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRewardRewardReasonRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRewardRewardReasonRecordList {
		public static implicit operator RLRewardRewardReasonRecordList(WORCRewardRewardReasonRecord[] array) {
			RLRewardRewardReasonRecordList rl = new RLRewardRewardReasonRecordList();
			if (array != null) {
				foreach(WORCRewardRewardReasonRecord val in array) {
					rl.Append((RCRewardRewardReasonRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRewardRewardReasonRecord[](RLRewardRewardReasonRecordList rl) {
			WORCRewardRewardReasonRecord[] array = new WORCRewardRewardReasonRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRewardRewardReasonRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRewardRewardReasonRecordList {
		public static implicit operator RLRewardRewardReasonRecordList(WORLRewardRewardReasonRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRewardRewardReasonRecordList(RLRewardRewardReasonRecordList rl) {
			return new WORLRewardRewardReasonRecordList(rl);
		}
		public static implicit operator WORCRewardRewardReasonRecord[](WORLRewardRewardReasonRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRewardRewardReasonRecordList(WORCRewardRewardReasonRecord[] array) {
			return new WORLRewardRewardReasonRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCauseOfConcernReasonCauseOfConcernRecordList {
		public WORCCauseOfConcernReasonCauseOfConcernRecord[] Array;


		public WORLCauseOfConcernReasonCauseOfConcernRecordList(WORCCauseOfConcernReasonCauseOfConcernRecord[] r) {
			if (r == null)
			Array = new WORCCauseOfConcernReasonCauseOfConcernRecord[0];
			else
			Array = r;
		}
		public WORLCauseOfConcernReasonCauseOfConcernRecordList() {
			Array = new WORCCauseOfConcernReasonCauseOfConcernRecord[0];
		}

		public WORLCauseOfConcernReasonCauseOfConcernRecordList(RLCauseOfConcernReasonCauseOfConcernRecordList rl) {
			rl=(RLCauseOfConcernReasonCauseOfConcernRecordList) rl.Duplicate();
			Array = new WORCCauseOfConcernReasonCauseOfConcernRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCauseOfConcernReasonCauseOfConcernRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCauseOfConcernReasonCauseOfConcernRecordList {
		public static implicit operator RLCauseOfConcernReasonCauseOfConcernRecordList(WORCCauseOfConcernReasonCauseOfConcernRecord[] array) {
			RLCauseOfConcernReasonCauseOfConcernRecordList rl = new RLCauseOfConcernReasonCauseOfConcernRecordList();
			if (array != null) {
				foreach(WORCCauseOfConcernReasonCauseOfConcernRecord val in array) {
					rl.Append((RCCauseOfConcernReasonCauseOfConcernRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCauseOfConcernReasonCauseOfConcernRecord[](RLCauseOfConcernReasonCauseOfConcernRecordList rl) {
			WORCCauseOfConcernReasonCauseOfConcernRecord[] array = new WORCCauseOfConcernReasonCauseOfConcernRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCauseOfConcernReasonCauseOfConcernRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCauseOfConcernReasonCauseOfConcernRecordList {
		public static implicit operator RLCauseOfConcernReasonCauseOfConcernRecordList(WORLCauseOfConcernReasonCauseOfConcernRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCauseOfConcernReasonCauseOfConcernRecordList(RLCauseOfConcernReasonCauseOfConcernRecordList rl) {
			return new WORLCauseOfConcernReasonCauseOfConcernRecordList(rl);
		}
		public static implicit operator WORCCauseOfConcernReasonCauseOfConcernRecord[](WORLCauseOfConcernReasonCauseOfConcernRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCauseOfConcernReasonCauseOfConcernRecordList(WORCCauseOfConcernReasonCauseOfConcernRecord[] array) {
			return new WORLCauseOfConcernReasonCauseOfConcernRecordList(array);
		}
	}
}

