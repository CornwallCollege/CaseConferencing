/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowEmail_Templates {

	public class ScrnStudent_Email: OSPageViewStateCompressed, IEmailScreen, IBookmarkableURL {


		public ScrnStudent_Email(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamCommunicationId. Description:
		/// </summary>
		public int inParamCommunicationId = 0;
		protected OutSystems.HubEdition.WebWidgets.Container wt_EmailContainer20;
		protected OutSystems.HubEdition.WebWidgets.Container wt_EmailContainer12;
		protected OutSystems.HubEdition.WebWidgets.Container wt_EmailContainer2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_EmailContainer14;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}






		protected override string InnerGetStyleSheetIncludes() {


			return GetInlineStyleSheetInclude();

		}




		protected override void WriteBlockJavaScriptIncludes(StringWriter writer) {
			throw new InvalidOperationException();
		}




		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("GcjiRiXlykCID6kHxYxxIA", "Student_Email");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "GcjiRiXlykCID6kHxYxxIA", "Student_Email");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "GcjiRiXlykCID6kHxYxxIA", "Student_Email");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "GcjiRiXlykCID6kHxYxxIA", "Student_Email");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "GcjiRiXlykCID6kHxYxxIA", "Student_Email");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnStudent_Email() {
		}


		RLCommunicationDocumentsDocumentsRecordList queryResGetDocuments_outParamList = new RLCommunicationDocumentsDocumentsRecordList();
		int queryResGetDocuments_outParamCount = 0;
		RLCommunicationRecordList queryResGetCommunicationById_outParamList = new RLCommunicationRecordList();
		int queryResGetCommunicationById_outParamCount = 0;
		RLCommunicationDocumentsRecordList queryResGetCommunicationDocumentsByCommunicationId_outParamList = new RLCommunicationDocumentsRecordList();
		int queryResGetCommunicationDocumentsByCommunicationId_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetCommunicationById
			int datasetGetCommunicationById_maxRecords = 0;
			queryResGetCommunicationById_outParamList = FuncssPreparation.datasetGetCommunicationById(heContext, datasetGetCommunicationById_maxRecords, IterationMultiplicity.Never, out queryResGetCommunicationById_outParamCount, inParamCommunicationId
			);
			// Query datasetGetCommunicationDocumentsByCommunicationId
			int datasetGetCommunicationDocumentsByCommunicationId_maxRecords = 0;
			queryResGetCommunicationDocumentsByCommunicationId_outParamList = FuncssPreparation.datasetGetCommunicationDocumentsByCommunicationId(heContext, datasetGetCommunicationDocumentsByCommunicationId_maxRecords, IterationMultiplicity.Never, out queryResGetCommunicationDocumentsByCommunicationId_outParamCount, inParamCommunicationId
			);
			// Attach
			if (!(queryResGetCommunicationDocumentsByCommunicationId_outParamList.Empty)) {
				// Query datasetGetDocuments
				int datasetGetDocuments_maxRecords = 0;
				queryResGetDocuments_outParamList = FuncssPreparation.datasetGetDocuments(heContext, datasetGetDocuments_maxRecords, IterationMultiplicity.Single, out queryResGetDocuments_outParamCount, inParamCommunicationId
				);
				// Foreach GetDocuments.List
				queryResGetDocuments_outParamList.StartIteration();
				try {
					while (!queryResGetDocuments_outParamList.Eof) {
						// Attach File to email
						attachments.Add(new EmailProcessor.EmailAttachment(queryResGetDocuments_outParamList.CurrentRec.ssENDocuments.ssDocumentName, queryResGetDocuments_outParamList.CurrentRec.ssENDocuments.ssDocumentData, ""));
						queryResGetDocuments_outParamList.Advance();
					}
				} finally {
					queryResGetDocuments_outParamList.EndIteration();
				}

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamCommunicationId!=0)) {
				parameters.Add(new Pair<string, string>("CommunicationId", HttpUtility.UrlEncode(Convert.ToString(inParamCommunicationId), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Student_Email", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Student_Email", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			AppInfo.GetAppInfo().IsLoadingScreen = !IsPostBack;
			heContext = Global.App.OsContext;
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Student_Email"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamCommunicationId = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Student_Email"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["CommunicationId"] != null) {
						inParamCommunicationId = Convert.ToInt32(Request.QueryString["CommunicationId"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["CommunicationId"] != null) {
						inParamCommunicationId = Convert.ToInt32(Request.Form["CommunicationId"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			if (!IsPostBack) {
				EmailHost = heContext.AppInfo.Properties.DefaultDnsName;
				try {
					Preparation(heContext);
				} catch (Exception ex) {
					preparationException = ex;
				}
				bool bindEditRecords = !IsPostBack;
				Title = queryResGetCommunicationById_outParamList.CurrentRec.ssENCommunication.ssSubject;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Student_Email", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				FetchViewState();
			}

		}

		private void Page_PreRender(object sender, System.EventArgs e) {


			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}


		protected override void OnPreRenderComplete(EventArgs e) {
			base.OnPreRenderComplete(e);

			new ControlCss(GetInlineCss(this.EmailHost)).SetStyleFor(this);
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowEmail_Templates.ExceptionHandler(this, true).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			// Check if the request is from a valid IP
			if (!NetworkInterfaceUtils.IsLoopbackAddress(HttpContext.Current.Request.UserHostAddress)) {
				ErrorLog.LogApplicationError("Access to timerhandler with invalid IP: " + HttpContext.Current.Request.UserHostAddress,
				 "The email screen can only be accessed by the 127.0.0.1 IP", heContext, "ExecuteTimer");
				throw new Exception("The email screen can only be accessed by the 127.0.0.1 IP");
			}
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("GcjiRiXlykCID6kHxYxxIA"); 
			}
		}

		public bool isSecure {
			get {
				return false; 
			}
		}

		private string emailHost;

		public string EmailHost {
			get {
				return emailHost;
			}
			set {
				emailHost = value;
			}
		}

		/// <summary>
		/// wt_EmailContainer20 Functions
		/// </summary>
		public void cnt_EmailContainer20_onDataBinding(object sender, System.EventArgs e) {
			cnt_EmailContainer20_setInlineAttributes(sender, e);
		}
		public string cnt_EmailContainer20_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "border-bottom: 1px solid #ccc";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_EmailContainer20_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_EmailContainer20)
		/// </summary>
		/// <returns>The Visible State of wt_EmailContainer20</returns>
		public bool cnt_EmailContainer20_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_EmailContainer12 Functions
		/// </summary>
		public void cnt_EmailContainer12_onDataBinding(object sender, System.EventArgs e) {
			cnt_EmailContainer12_setInlineAttributes(sender, e);
		}
		public string cnt_EmailContainer12_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_EmailContainer12_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_EmailContainer12)
		/// </summary>
		/// <returns>The Visible State of wt_EmailContainer12</returns>
		public bool cnt_EmailContainer12_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Table13 Functions
		/// </summary>
		public void wt_Table13_onDataBinding(object sender, System.EventArgs e) {
			wt_Table13_setInlineAttributes(sender, e);
		}
		public string wt_Table13_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-family: \'Source Sans Pro\', sans-serif;font-size:14px;box-shadow: 0px 1px 2px #b1b1b1; border: solid 1px #DADADA;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell10 Functions
		/// </summary>
		public void wt_TableCell10_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell10_setInlineAttributes(sender, e);
		}
		public string wt_TableCell10_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "height:50px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_EmailContainer2 Functions
		/// </summary>
		public void cnt_EmailContainer2_onDataBinding(object sender, System.EventArgs e) {
			cnt_EmailContainer2_setInlineAttributes(sender, e);
		}
		public string cnt_EmailContainer2_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-left:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_EmailContainer2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_EmailContainer2)
		/// </summary>
		/// <returns>The Visible State of wt_EmailContainer2</returns>
		public bool cnt_EmailContainer2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression5 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = FR8WgCTNV0a_0WIOoxcVfg) Expression:
		///  GetCommunicationById.List.Current.Communication.Body
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression5() {
			return queryResGetCommunicationById_outParamList.CurrentRec.ssENCommunication.ssBody;
		}
		/// <summary>
		/// wt_TableCell19 Functions
		/// </summary>
		public void wt_TableCell19_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell19_setInlineAttributes(sender, e);
		}
		public string wt_TableCell19_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "height:50px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_EmailContainer14 Functions
		/// </summary>
		public void cnt_EmailContainer14_onDataBinding(object sender, System.EventArgs e) {
			cnt_EmailContainer14_setInlineAttributes(sender, e);
		}
		public string cnt_EmailContainer14_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-left:10px;margin-bottom:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_EmailContainer14_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_EmailContainer14)
		/// </summary>
		/// <returns>The Visible State of wt_EmailContainer14</returns>
		public bool cnt_EmailContainer14_isVisible() {
			return true;
		}



		public static class FuncssPreparation {

			private static void datasetGetDocumentsReadDB(ref RCCommunicationDocumentsDocumentsRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENCommunicationDocuments.Read(r, ref index);
				rec.ssENDocuments.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetDocuments" of Action "Preparation"
			/// </summary>
			public static RLCommunicationDocumentsDocumentsRecordList datasetGetDocuments(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: True
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 3));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, ENDocuments.[DOCUMENTNAME] o6, ENDocuments.[DOCUMENTDATA] o7, NULL o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM ({Documents} ENDocuments Inner JOIN {CommunicationDocuments} ENCommunicationDocuments ON (ENCommunicationDocuments.[DOCUMENTID] = ENDocuments.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCommunicationDocuments.[COMMUNICATIONID] = @qpinP) AND (ENCommunicationDocuments.[COMMUNICATIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCommunicationDocuments.[COMMUNICATIONID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENDocuments.[DOCUMENTNAME] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCommunicationDocumentsDocumentsRecordList outParamList = new RLCommunicationDocumentsDocumentsRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetDocumentsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCommunicationDocumentsDocumentsRecordList _tmp = new RLCommunicationDocumentsDocumentsRecordList();
					_tmp.AlternateReadDBMethod = datasetGetDocumentsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Email_Templates.Student_Email.Preparation.GetDocuments.List");
						outParamList = (RLCommunicationDocumentsDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Email_Templates.Student_Email.Preparation.GetDocuments.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 3) {
						RLCommunicationDocumentsDocumentsRecordList _tmp = new RLCommunicationDocumentsDocumentsRecordList();
						_tmp.AlternateReadDBMethod = datasetGetDocumentsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Email_Templates.Student_Email.Preparation.GetDocuments.List");
							outParamList = (RLCommunicationDocumentsDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Email_Templates.Student_Email.Preparation.GetDocuments.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetCommunicationById" of Action "Preparation"
			/// </summary>
			public static RLCommunicationRecordList datasetGetCommunicationById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, ENCommunication.[SUBJECT] o8, ENCommunication.[BODY] o9, NULL o10, NULL o11, NULL o12, NULL o13");
				fromBuilder.Append(" FROM {Communication} ENCommunication");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCommunication.[ID] = @qpinP) AND (ENCommunication.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCommunication.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCommunicationRecordList outParamList = new RLCommunicationRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, false, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCommunicationRecordList _tmp = new RLCommunicationRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Email_Templates.Student_Email.Preparation.GetCommunicationById.List");
						outParamList = (RLCommunicationRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Email_Templates.Student_Email.Preparation.GetCommunicationById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCommunicationRecordList _tmp = new RLCommunicationRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Email_Templates.Student_Email.Preparation.GetCommunicationById.List");
							outParamList = (RLCommunicationRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Email_Templates.Student_Email.Preparation.GetCommunicationById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetCommunicationDocumentsByCommunicationId" of Action "Preparation"
			/// </summary>
			public static RLCommunicationDocumentsRecordList datasetGetCommunicationDocumentsByCommunicationId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3");
				fromBuilder.Append(" FROM {CommunicationDocuments} ENCommunicationDocuments");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCommunicationDocuments.[COMMUNICATIONID] = @qpinP) AND (ENCommunicationDocuments.[COMMUNICATIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCommunicationDocuments.[COMMUNICATIONID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCommunicationDocumentsRecordList outParamList = new RLCommunicationDocumentsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCommunicationDocumentsRecordList _tmp = new RLCommunicationDocumentsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Email_Templates.Student_Email.Preparation.GetCommunicationDocumentsByCommunicationId.List");
						outParamList = (RLCommunicationDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Email_Templates.Student_Email.Preparation.GetCommunicationDocumentsByCommunicationId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCommunicationDocumentsRecordList _tmp = new RLCommunicationDocumentsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Email_Templates.Student_Email.Preparation.GetCommunicationDocumentsByCommunicationId.List");
							outParamList = (RLCommunicationDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Email_Templates.Student_Email.Preparation.GetCommunicationDocumentsByCommunicationId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {

		}

		public void doAJAXRefreshScreen(HeContext heContext) {

		}


		List<EmailProcessor.EmailAttachment> attachments = new List<EmailProcessor.EmailAttachment>();

		Exception preparationException = null;

		protected override void Render(HtmlTextWriter writer) {
			StringWriter stringWriter = new StringWriter();
			// prevent ECT / Taskbox in eMails
			AppInfo.GetAppInfo().OsContext.ResponseDisabledFeedback = true;
			base.Render(new HtmlTextWriter(stringWriter));
			string emailContent = stringWriter.ToString();
			List<String> headers = new List<String>();
			headers.Add("style: " + "box-shadow: 0px 1px 2px #b1b1b1; border: solid 1px #DADADA;");




			try {
				if (preparationException != null) {
					throw preparationException;
				}
				int emailId = EmailProcessor.CreateEmail(GetBookmarkableURL(),
				emailContent.Replace(Convert.ToString((char) 0xA0), "&nbsp;"),
				Request.Params["_From"],
				Request.Params["_To"],
				Request.Params["_CC"],
				Request.Params["_BCC"],
				Convert.ToInt32(Request.Params["_ActivityId"]),
				Convert.ToInt32(Request.Params["_TenantId"]),
				10,
				 "46e2c819-e525-40ca-880f-a907c58c7120",
				Request.Params["_StoreContent"] == "true",
				headers,
				attachments,
				EmailHost);

				writer.Write("<EmailId>" + emailId + "</EmailId>");
			} catch (Exception e) {
				WriteEmailExceptionInformation(writer, e);
				ErrorLog.LogApplicationError(e, heContext, "");
			}
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
		}




		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();

		}



	}




}
