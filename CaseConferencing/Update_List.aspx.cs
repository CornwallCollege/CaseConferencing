/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowBackofficeFlow {

	public class ScrnUpdate_List: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnUpdate_List(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance12
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance12;
		/// <summary>
		/// Variable (wt_Link2) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link2;
		protected OutSystems.HubEdition.WebWidgets.Container wtUpdateTable_Wrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wtFilters_Wrapper;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtSearchInputValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtSearchInputValidatorType;
		/// <summary>
		/// Variable (wt_Button43) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button43;
		/// <summary>
		/// Variable (wt_Button20) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button20;
		private RLUserUpdatesRecordList _ssUpdateTableList = new RLUserUpdatesRecordList();
		public RLUserUpdatesRecordList ssUpdateTableList {
			get {
				return _ssUpdateTableList; 
			}
			set {
				_ssUpdateTableList = value;
				wtUpdateTable.DataSource = value;
				ssUpdateTableListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.OSDataGrid wtUpdateTable;
		public ArrayList wtUpdateTable_storage = new ArrayList();
		protected bool ssUpdateTableList_notUsedYet = true;
		protected bool ssUpdateTableListDoDataBind;
		protected bool ssUpdateTableListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		/// <summary>
		/// Variable (wt_Link1) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container25;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container41;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("+YScYuxSG0m4BpXVzV7hKw", "Update_List");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "+YScYuxSG0m4BpXVzV7hKw", "Update_List");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "+YScYuxSG0m4BpXVzV7hKw", "Update_List");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "+YScYuxSG0m4BpXVzV7hKw", "Update_List");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "+YScYuxSG0m4BpXVzV7hKw", "Update_List");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnUpdate_List() {
		}


		RLUserUpdatesRecordList queryResGetUpdates_outParamList = new RLUserUpdatesRecordList();
		int queryResGetUpdates_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetUpdates
			int datasetGetUpdates_maxRecords = Math.Max(wtUpdateTable.StartIndex + wtUpdateTable.LineCount + 1, 0);
			queryResGetUpdates_outParamList = FuncssPreparation.datasetGetUpdates(heContext, datasetGetUpdates_maxRecords, IterationMultiplicity.Single, out queryResGetUpdates_outParamCount, Functions.rssespacerichwidgets_ActionList_SortColumn_GetOrderBy(heContext, wtUpdateTable.ClientID, "{Updates}.[UpdateTitle]")
			, ((string) Global.App.OsContext.Session["CaseConferencing.Update_List_SearchKeyword3"])
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Update_List", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Update_List", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance12 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance12");
			wt_Link2 = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wt_Link2");
			wtUpdateTable_Wrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtUpdateTable_Wrapper");
			wtFilters_Wrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtFilters_Wrapper");
			wt_Button43 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button43");
			if (this.wt_Button43 != null) {
				this.wt_Button43.Click += new System.EventHandler(this.wt_Button43_Click);
			}
			wt_Button20 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button20");
			if (this.wt_Button20 != null) {
				this.wt_Button20.Click += new System.EventHandler(this.wt_Button20_Click);
			}
			wtUpdateTable = (OutSystems.HubEdition.WebWidgets.OSDataGrid) FindControl("wtUpdateTable");
			wtUpdateTable.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtUpdateTable.ClientID, true, -1);
			wtUpdateTable.LineCountExpression = () => 50;
			wtUpdateTable.EmptyMessageExpression = () => "No updates to show...";
			wt_Container36 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container36");
			wt_Container25 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container25");
			wt_Container41 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container41");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance24") {
				return ThemeProvider_wt_WebBlockInstance12.wtHelpUpdate.FindControl("wt_WebBlockInstance24");
			}
			if (id == "ThemeProvider_wt_WebBlockInstance39") {
				return ThemeProvider_wt_WebBlockInstance12.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance39");
			}
			if (id == "wt_Text8") {
				return ThemeProvider_wt_WebBlockInstance12.wtTitle.FindControl("wt_Text8");
			}
			if (id == "wt_Link2") {
				return ThemeProvider_wt_WebBlockInstance12.wtActions.FindControl("wt_Link2");
			}
			if (id == "wt_Text27") {
				return ThemeProvider_wt_WebBlockInstance12.wtActions.FindControl("wt_Text27");
			}
			if (id == "wtUpdateTable_Wrapper") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("wtUpdateTable_Wrapper");
			}
			if (id == "wtFilters_Wrapper") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("wtFilters_Wrapper");
			}
			if (id == "wtSearchInput") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("wtSearchInput");
			}
			if (id == "wt_Button43") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("wt_Button43");
			}
			if (id == "wt_Button20") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("wt_Button20");
			}
			if (id == "wtUpdateTable") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("wtUpdateTable");
			}
			if (id == "wt_TableRecordsHeaderRow46") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("wt_TableRecordsHeaderRow46");
			}
			if (id == "wt_Container36") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("wt_Container36");
			}
			if (id == "wt_Container25") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("wt_Container25");
			}
			if (id == "RichWidgets_wt_WebBlockInstance32") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance32");
			}
			if (id == "wt_Container41") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("wt_Container41");
			}
			if (id == "RichWidgets_wt_WebBlockInstance13") {
				return ThemeProvider_wt_WebBlockInstance12.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance13");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Update_List"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Update_List"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssUpdateTableListDoDataBind = true;
				Title = "Updates"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Update_List", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button43 = wt_Button43 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button43");
			} catch {}
			string jsString = (wt_Button43 != null) ? "return OsEnterKey('" +wt_Button43.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowBackofficeFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotLearningSupportPractitioner("LearningSupportPractitioner role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("+YScYuxSG0m4BpXVzV7hKw"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvRefreshUpdateTable: VarsBag {
			public bool inParamResetFilters;
			public bool inParamResetPagination;
			public lcvRefreshUpdateTable(bool inParamResetFilters, bool inParamResetPagination) {
				this.inParamResetFilters = inParamResetFilters;
				this.inParamResetPagination = inParamResetPagination;
			}
		}
		/// <summary>
		/// Action <code>CommandRefreshUpdateTable</code> that represents the Service Studio screen action
		///  <code>RefreshUpdateTable</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshUpdateTable(HeContext heContext, bool inParamResetFilters, bool inParamResetPagination) {
			CheckPermissions(heContext);
			lcvRefreshUpdateTable localVars = new lcvRefreshUpdateTable(inParamResetFilters, inParamResetPagination);
			try {
				if (localVars.inParamResetFilters) {
					// ClearFilters
					Global.App.OsContext.Session["CaseConferencing.Update_List_SearchKeyword3"] = ""; // Update_List_SearchKeyword3 = ""
					// Refresh Widget (wtFilters_Wrapper)
					((OSPageViewState) Page).AjaxRefresh(wtFilters_Wrapper, "None", StoreViewState);

				}
				if (localVars.inParamResetPagination) {
					// ResetStartIndex
					Actions.ActionList_Navigation_ResetStartIndex(heContext, wtUpdateTable.ClientID);

				}
				// Query datasetGetUpdates
				{
					int datasetGetUpdates_maxRecords = Math.Max(wtUpdateTable.StartIndex + wtUpdateTable.LineCount + 1, 0);
					queryResGetUpdates_outParamList = FuncssPreparation.datasetGetUpdates(heContext, datasetGetUpdates_maxRecords, IterationMultiplicity.Single, out queryResGetUpdates_outParamCount, Functions.rssespacerichwidgets_ActionList_SortColumn_GetOrderBy(heContext, wtUpdateTable.ClientID, "{Updates}.[UpdateTitle]")
					, ((string) Global.App.OsContext.Session["CaseConferencing.Update_List_SearchKeyword3"])
					);
				}
				// Refresh Widget (wtUpdateTable_Wrapper)
				ssUpdateTableListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtUpdateTable_Wrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance12 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance12_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance24 Functions
		/// </summary>
		public void webBlck_WebBlockInstance24_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate widget = (ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance39 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance39_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("m4UeleQOz0eLvrp6PzKJPQ")).ssId;
		}
		/// <summary>
		/// wt_Link2 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link2)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link2)</returns>
		public string lnk_Link2_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Update_Edit", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link2)
		/// </summary>
		/// <returns>title of the Link (wt_Link2)</returns>
		public string
		lnk_Link2_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link2)
		/// </summary>
		/// <returns>The Visible State of wt_Link2</returns>
		public bool lnk_Link2_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link2)
		/// </summary>
		/// <returns>The Enabled State of wt_Link2</returns>
		public bool lnk_Link2_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtUpdateTable_Wrapper Functions
		/// </summary>
		public void cntUpdateTable_Wrapper_onDataBinding(object sender, System.EventArgs e) {
			cntUpdateTable_Wrapper_setInlineAttributes(sender, e);
		}
		public string cntUpdateTable_Wrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntUpdateTable_Wrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtUpdateTable_Wrapper)
		/// </summary>
		/// <returns>The Visible State of wtUpdateTable_Wrapper</returns>
		public bool cntUpdateTable_Wrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wtFilters_Wrapper Functions
		/// </summary>
		public void cntFilters_Wrapper_onDataBinding(object sender, System.EventArgs e) {
			cntFilters_Wrapper_setInlineAttributes(sender, e);
		}
		public string cntFilters_Wrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntFilters_Wrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtFilters_Wrapper)
		/// </summary>
		/// <returns>The Visible State of wtFilters_Wrapper</returns>
		public bool cntFilters_Wrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wtSearchInput Functions
		/// </summary>
		public void inputwtSearchInput_onDataBinding(object sender, System.EventArgs e) {
			inputwtSearchInput_setInlineAttributes(sender, e);
		}
		public string inputwtSearchInput_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["title"] = "Type the Update Title, Update HTML or Update Submitted By";
			return "";
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtSearchInput_input_value() {
			if (("" != ((string) Global.App.OsContext.Session["CaseConferencing.Update_List_SearchKeyword3"]))) {
				return ((string) Global.App.OsContext.Session["CaseConferencing.Update_List_SearchKeyword3"]);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtSearchInput");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ((string) Global.App.OsContext.Session["CaseConferencing.Update_List_SearchKeyword3"]);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtSearchInput_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					Global.App.OsContext.Session["CaseConferencing.Update_List_SearchKeyword3"] = ""; 
				} else {
					Global.App.OsContext.Session["CaseConferencing.Update_List_SearchKeyword3"] = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				Global.App.OsContext.Session["CaseConferencing.Update_List_SearchKeyword3"] = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtSearchInput)
		/// </summary>
		/// <returns>The Visible State of wtSearchInput</returns>
		public bool inputwtSearchInput_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtSearchInput)
		/// </summary>
		/// <returns>The Enabled State of wtSearchInput</returns>
		public bool inputwtSearchInput_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtSearchInput)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtSearchInput</returns>
		public bool inputwtSearchInput_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Button43 Functions
		/// </summary>
		public void btn_Button43_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button43_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandRefreshUpdateTable(heContext, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button43)
		/// </summary>
		/// <returns>Label of the Button (wt_Button43)</returns>
		public string
		btn_Button43_getLabel() {
			return "Search";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button43)
		/// </summary>
		/// <returns>The Visible State of wt_Button43</returns>
		public bool btn_Button43_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button43)
		/// </summary>
		/// <returns>The Enabled State of wt_Button43</returns>
		public bool btn_Button43_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button20 Functions
		/// </summary>
		public void btn_Button20_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button20_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandRefreshUpdateTable(heContext, true, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button20)
		/// </summary>
		/// <returns>Label of the Button (wt_Button20)</returns>
		public string
		btn_Button20_getLabel() {
			return "Reset";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button20)
		/// </summary>
		/// <returns>The Visible State of wt_Button20</returns>
		public bool btn_Button20_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button20)
		/// </summary>
		/// <returns>The Enabled State of wt_Button20</returns>
		public bool btn_Button20_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtUpdateTable Functions
		/// </summary>
		public void recTableUpdateTable_onDataBinding(object sender, System.EventArgs e) {
			recTableUpdateTable_setInlineAttributes(sender, e);
			// widget wtUpdateTable
			ssUpdateTableList = queryResGetUpdates_outParamList;
			ssUpdateTableListDoDataBind = false;
			ssUpdateTableListDataBound = true;
			wtUpdateTable.ShowHeader = true;
		}
		public string recTableUpdateTable_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding:0px;";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		public void recTableUpdateTable_Select(object sender, DataGridCommandEventArgs e) {
			if (e.Item.DataSetIndex != -1) {
				if (ssUpdateTableList.Length > 0) {
					ssUpdateTableList.CurrentRec = ssUpdateTableList[ssUpdateTableList.CurrentRowNumber];
				}
				if (ssUpdateTableList.Length > e.Item.DataSetIndex) {
					ssUpdateTableList.CurrentRec = ssUpdateTableList[e.Item.DataSetIndex];
					ssUpdateTableList.CurrentRowNumber = e.Item.DataSetIndex;
				}
			}
			if (e is DataGridCommandAjaxEventArgs) {
				((DataGridCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recTableUpdateTable_Store(object dataItem, int index) {
			return "";
		}
		public void recTableUpdateTable_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recTableUpdateTable_Clear(object sender, EventArgs e) {
			wtUpdateTable_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recTableUpdateTable_Rebuild(int startIndex, int lineCount) {
			if (ssUpdateTableList.Length != -1) {
				wtUpdateTable_storage.Clear();
				for (int i=startIndex; i<ssUpdateTableList.Data.Count && i<startIndex+lineCount; i++) {
					recTableUpdateTable_Store(ssUpdateTableList.Data[i], wtUpdateTable_storage.Count);
				}
			}
		}
		public void recTableUpdateTable_ListRefreshDataBind(object sender, EventArgs e) {
			wtUpdateTable.ShowHeader = true;
		}
		/// <summary>
		/// Function that returns the list of the wtUpdateTable widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLUserUpdatesRecordList getWtUpdateTableList() {
			if (ssUpdateTableListDoDataBind) {
				recTableUpdateTable_onDataBinding(this, null);
			}

			return ssUpdateTableList;
		}
		/// <summary>
		/// wt_Container11 Functions
		/// </summary>
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container11_setInlineAttributes(sender, e);
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container11_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance5 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance5_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{Updates}.[UpdateDate]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance5
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance5_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshUpdateTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance16 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance16_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{User}.[Name]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance16
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance16_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshUpdateTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance18 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance18_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{Updates}.[UpdateTitle]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance18
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance18_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshUpdateTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance31 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{Updates}.[UpdateHTML]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance31
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance31_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshUpdateTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container29 Functions
		/// </summary>
		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container29_setInlineAttributes(sender, e);
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container29_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Link1 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link1)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link1)</returns>
		public string lnk_Link1_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("UpdateId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtUpdateTableList().CurrentRec.ssENUpdates.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Update_Show", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link1)
		/// </summary>
		/// <returns>title of the Link (wt_Link1)</returns>
		public string
		lnk_Link1_getTitle() {
			return getWtUpdateTableList().CurrentRec.ssENUpdates.ssUpdateTitle;
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link1)
		/// </summary>
		/// <returns>The Visible State of wt_Link1</returns>
		public bool lnk_Link1_isVisible() {
			return (getWtUpdateTableList().CurrentRec.ssENUpdates.ssId!=BuiltInFunction.NullIdentifier());
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link1)
		/// </summary>
		/// <returns>The Enabled State of wt_Link1</returns>
		public bool lnk_Link1_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression15 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Njd4XqNou0W9yIOGbl3Hkg) Expression:
		///  Date_PrettyFormat(UpdateTable.List.Current.Updates.UpdateDate)
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression15() {
			return Functions.rssespacerichwidgets_ActionDate_PrettyFormat(heContext, getWtUpdateTableList().CurrentRec.ssENUpdates.ssUpdateDate);
		}
		/// <summary>
		/// wt_InlineExpression26 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = s23Jm_+faEC5rmqk4I2Hww) Expression:
		///  UpdateTable.List.Current.User.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression26() {
			return getWtUpdateTableList().CurrentRec.ssENUser.ssName;
		}
		/// <summary>
		/// wt_InlineExpression35 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = O7aWwPp5VUSIQqWR1AzpvQ) Expression:
		///  UpdateTable.List.Current.Updates.UpdateTitle
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression35() {
			return getWtUpdateTableList().CurrentRec.ssENUpdates.ssUpdateTitle;
		}
		/// <summary>
		/// wt_InlineExpression22 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = werlhjp2pkyJR9+r0s4icA) Expression:
		///  UpdateTable.List.Current.Updates.UpdateHTML
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression22() {
			return getWtUpdateTableList().CurrentRec.ssENUpdates.ssUpdateHTML;
		}
		/// <summary>
		/// wt_Container36 Functions
		/// </summary>
		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container36_setInlineAttributes(sender, e);
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container36_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container25 Functions
		/// </summary>
		public void cnt_Container25_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container25_setInlineAttributes(sender, e);
		}
		public string cnt_Container25_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container25_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container25)
		/// </summary>
		/// <returns>The Visible State of wt_Container25</returns>
		public bool cnt_Container25_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance32 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance32_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter) sender;
			widget.inParamStartIndex = Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtUpdateTable.ClientID, true, -1);
			widget.inParamTotalRowCount = queryResGetUpdates_outParamCount;
			widget.inParamLineCount = wtUpdateTable.RtWidget.LineCount;
		}
		/// <summary>
		/// wt_Container41 Functions
		/// </summary>
		public void cnt_Container41_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container41_setInlineAttributes(sender, e);
		}
		public string cnt_Container41_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container41_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container41)
		/// </summary>
		/// <returns>The Visible State of wt_Container41</returns>
		public bool cnt_Container41_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance13 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance13_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation) sender;
			widget.inParamListWidgetId = wtUpdateTable.ClientID;
			widget.inParamLineCount = wtUpdateTable.RtWidget.LineCount;
			widget.inParamTotalRowCount = queryResGetUpdates_outParamCount;
			widget.inParamMaxPageNumbers = 5;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance13
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance13_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshUpdateTable(heContext
			, false, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}


		public static class FuncCommandRefreshUpdateTable {
		}
		public static class FuncssPreparation {

			private static void datasetGetUpdatesReadDB(ref RCUserUpdatesRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENUpdates.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetUpdates" of Action "Preparation"
			/// </summary>
			public static RLUserUpdatesRecordList datasetGetUpdates(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP, string qpstP1) {
				// Query Iterations: Single {UpdateTable}
				// Refresh Query dFKyIn6dPECSUuGeXP8T0g Iterations: Single {UpdateTable}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				string sql = "";
				string sqlCount = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENUpdates.[ID] o1, ENUpdates.[UPDATEDATE] o2, NULL o3, ENUpdates.[UPDATETITLE] o4, ENUpdates.[UPDATEHTML] o5, NULL o6, NULL o7, NULL o8, NULL o9, ENUser.[NAME] o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18");
				fromBuilder.Append(" FROM ({Updates} ENUpdates Left JOIN {User} ENUser ON (ENUpdates.[UPDATESUBMITTEDBY] = ENUser.[ID])) ");
				if (qpstP1 != "") {
					whereBuilder.Append(" WHERE ");
					if (qpstP1 != "") {
						whereBuilder.Append("(((ENUpdates.[UPDATETITLE] LIKE ((N'%' + @qpstP1) + N'%')) OR (ENUpdates.[UPDATEHTML] LIKE ((N'%' + @qpstP1) + N'%'))) OR (ENUser.[NAME] LIKE ((N'%' + @qpstP1) + N'%')))");
						sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
						sqlCountCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
					}
				}
				if (qpstP.Trim() != "") {
					orderByBuilder.Append(" ORDER BY ");
					List<string> orderByColumns = new List<string>();
					orderByColumns.AddRange(BaseAppUtils.ReplaceEntityReferencesInOrderBy(DatabaseAccess.ForEspaceDatabase(10).DatabaseServices.DMLService.Identifiers, qpstP, new string[] { "Updates", "User"
					}
					, new string[] { "ENUpdates", "ENUser"
					}
					).Split(','));
					orderByBuilder.Append(BaseAppUtils.GetOrderByColumnsWithoutDuplicates(orderByColumns));
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCount = "SELECT COUNT(1) " + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString();
				sqlCount = AppUtils.Instance.ReplaceEntityReferences(heContext, sqlCount);
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				RLUserUpdatesRecordList outParamList = new RLUserUpdatesRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetUpdatesReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, false, true, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserUpdatesRecordList _tmp = new RLUserUpdatesRecordList();
					_tmp.AlternateReadDBMethod = datasetGetUpdatesReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.Update_List.Preparation.GetUpdates.List");
						outParamList = (RLUserUpdatesRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						if (maxRecords > 0 && outParamList.Length == maxRecords)
						outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.Update_List.Preparation.GetUpdates.Count", false));
						else
						outParamCount = outParamList.Length;
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.Update_List.Preparation.GetUpdates.Count", false));
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.Update_List.Preparation.GetUpdates.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserUpdatesRecordList _tmp = new RLUserUpdatesRecordList();
						_tmp.AlternateReadDBMethod = datasetGetUpdatesReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.Update_List.Preparation.GetUpdates.List");
							outParamList = (RLUserUpdatesRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.Update_List.Preparation.GetUpdates.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.Update_List.Preparation.GetUpdates.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.Update_List.Preparation.GetUpdates.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Updates"; ssUpdateTableListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Update_List", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Update_List", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("wtSearchInput_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtSearchInput")).Mandatory, false);
			if (IsAjaxRequest) {
				recTableUpdateTable_Rebuild((ssUpdateTableListDataBound ? wtUpdateTable.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtUpdateTable.LineCount);
			}
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				((IWidgetRuntimeProperties) this.FindControl("wtSearchInput")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtSearchInput_Mandatory", false);
				recTableUpdateTable_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtSearchInput", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
