/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowStaffView {

	public class ScrnDeleteConcern: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnDeleteConcern(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamCauseOfConcernId. Description:
		/// </summary>
		public int inParamCauseOfConcernId = 0;
		/// <summary>
		/// Variable <code>varLcReasonForDeletion</code> that represents the Service Studio local variable
		///  <code>ReasonForDeletion</code> <p>Description: </p>
		/// </summary>
		string varLcReasonForDeletion = "";

		/// <summary>
		/// Variable <code>varLcStudentLogRecord</code> that represents the Service Studio local variable
		///  <code>StudentLogRecord</code> <p>Description: </p>
		/// </summary>
		RCStudentLogRecord varLcStudentLogRecord = new RCStudentLogRecord(null);

		protected OutSystems.HubEdition.WebWidgets.Container wtViewCauseForConcern;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		/// <summary>
		/// Variable "True" if the Widget wt_If20
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If20T;

		/// <summary>
		/// Variable "True" if the Widget wt_If20
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If20F;
		/// <summary>
		/// Variable "True" if the Widget wt_If17
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If17T;

		/// <summary>
		/// Variable "True" if the Widget wt_If17
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If17F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container27;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container15;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input1ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input1ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;
		/// <summary>
		/// Variable (wt_Link10) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link10;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("PKCTpJC3W0C1+r00tOtTuQ", "DeleteConcern");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "PKCTpJC3W0C1+r00tOtTuQ", "DeleteConcern");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "PKCTpJC3W0C1+r00tOtTuQ", "DeleteConcern");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "PKCTpJC3W0C1+r00tOtTuQ", "DeleteConcern");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "PKCTpJC3W0C1+r00tOtTuQ", "DeleteConcern");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnDeleteConcern() {
		}


		RLUserCauseOfConcernReasonCauseOfConcernRecordList queryResGetCauseOfConcernById_outParamList = new RLUserCauseOfConcernReasonCauseOfConcernRecordList();
		int queryResGetCauseOfConcernById_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetCauseOfConcernById
			int datasetGetCauseOfConcernById_maxRecords = 0;
			queryResGetCauseOfConcernById_outParamList = FuncssPreparation.datasetGetCauseOfConcernById(heContext, datasetGetCauseOfConcernById_maxRecords, IterationMultiplicity.Never, out queryResGetCauseOfConcernById_outParamCount, inParamCauseOfConcernId
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "DeleteConcern.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "DeleteConcern.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProviderWithoutLondon.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProviderWithoutLondon.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return ""; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return ""; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamCauseOfConcernId!=0)) {
				parameters.Add(new Pair<string, string>("CauseOfConcernId", HttpUtility.UrlEncode(Convert.ToString(inParamCauseOfConcernId), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "DeleteConcern", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "DeleteConcern", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			if (this.wt_Link10 != null) {
				this.wt_Link10.Click += new System.EventHandler(this.wt_Link10_Click);
			}
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_DeleteConcern"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamCauseOfConcernId = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_DeleteConcern"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["CauseOfConcernId"] != null) {
						inParamCauseOfConcernId = Convert.ToInt32(Request.QueryString["CauseOfConcernId"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["CauseOfConcernId"] != null) {
						inParamCauseOfConcernId = Convert.ToInt32(Request.Form["CauseOfConcernId"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "DeleteConcern"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "DeleteConcern", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowStaffView.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotSLA("SLA role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("PKCTpJC3W0C1+r00tOtTuQ"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvDeleteConcern: VarsBag {
			public RLStudentLogRecordList queryResGetStudentLogsByStudentReference_outParamList = new RLStudentLogRecordList();
			public int queryResGetStudentLogsByStudentReference_outParamCount = 0;

			public RLStudentLogRecordList queryResGetStudentLogsByStudentReference2_outParamList = new RLStudentLogRecordList();
			public int queryResGetStudentLogsByStudentReference2_outParamCount = 0;

			public RLCauseOfConcernRecordList queryResGetCauseOfConcernById2_outParamList = new RLCauseOfConcernRecordList();
			public int queryResGetCauseOfConcernById2_outParamCount = 0;

			public int resCreateStudentLog_outParamId = 0;

			public lcvDeleteConcern() {
			}
		}
		/// <summary>
		/// Action <code>CommandDeleteConcern</code> that represents the Service Studio screen action
		///  <code>DeleteConcern</code> <p> Description: </p>
		/// </summary>
		private bool CommandDeleteConcern(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDeleteConcern localVars = new lcvDeleteConcern();
			try {
				// Query datasetGetCauseOfConcernById2
				int datasetGetCauseOfConcernById2_maxRecords = 0;
				localVars.queryResGetCauseOfConcernById2_outParamList = FuncCommandDeleteConcern.datasetGetCauseOfConcernById2(heContext, datasetGetCauseOfConcernById2_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetCauseOfConcernById2_outParamCount, inParamCauseOfConcernId
				);
				// Query datasetGetStudentLogsByStudentReference
				int datasetGetStudentLogsByStudentReference_maxRecords = 0;
				localVars.queryResGetStudentLogsByStudentReference_outParamList = FuncCommandDeleteConcern.datasetGetStudentLogsByStudentReference(heContext, datasetGetStudentLogsByStudentReference_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetStudentLogsByStudentReference_outParamCount, localVars.queryResGetCauseOfConcernById2_outParamList.CurrentRec.ssENCauseOfConcern.ssDescription
				, localVars.queryResGetCauseOfConcernById2_outParamList.CurrentRec.ssENCauseOfConcern.ssStudentReference
				);
				// Query datasetGetStudentLogsByStudentReference2
				int datasetGetStudentLogsByStudentReference2_maxRecords = 0;
				localVars.queryResGetStudentLogsByStudentReference2_outParamList = FuncCommandDeleteConcern.datasetGetStudentLogsByStudentReference2(heContext, datasetGetStudentLogsByStudentReference2_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetStudentLogsByStudentReference2_outParamCount, localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssENStudentLog.ssCauseOfConcernNumber
				, localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssENStudentLog.ssStudentReference
				);
				// Foreach GetStudentLogsByStudentReference2.List
				localVars.queryResGetStudentLogsByStudentReference2_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetStudentLogsByStudentReference2_outParamList.Eof) {
						// DeleteStudentLog
						ExtendedActions.DeleteStudentLog(heContext, localVars.queryResGetStudentLogsByStudentReference2_outParamList.CurrentRec.ssENStudentLog.ssId);
						localVars.queryResGetStudentLogsByStudentReference2_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetStudentLogsByStudentReference2_outParamList.EndIteration();
				}
				varLcStudentLogRecord.ssENStudentLog.ssStudentReference = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssENStudentLog.ssStudentReference; // StudentLogRecord.StudentLog.StudentReference =
				// GetStudentLogsByStudentReference.List.Current.StudentLog.StudentReference
				varLcStudentLogRecord.ssENStudentLog.ssDateTime = BuiltInFunction.CurrDate(); // StudentLogRecord.StudentLog.DateTime = CurrDate
				varLcStudentLogRecord.ssENStudentLog.ssEventBy = ((int) Global.App.OsContext.Session["UserID"]); // StudentLogRecord.StudentLog.EventBy = UserID
				varLcStudentLogRecord.ssENStudentLog.ssDescription = "Cause For Concern was Deleted"; // StudentLogRecord.StudentLog.Description = "Cause For Concern was Deleted"
				varLcStudentLogRecord.ssENStudentLog.ssUserDescription = varLcReasonForDeletion; // StudentLogRecord.StudentLog.UserDescription = ReasonForDeletion
				varLcStudentLogRecord.ssENStudentLog.ssStudentLogType = ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("hTcMAzvg9kmgJqUGGgXnPg")).ssLogType; // StudentLogRecord.StudentLog.StudentLogType = CauseOfConcerm
				// CreateStudentLog
				ExtendedActions.CreateStudentLog(heContext, varLcStudentLogRecord, out localVars.resCreateStudentLog_outParamId);
				// DeleteCauseOfConcern
				ExtendedActions.DeleteCauseOfConcern(heContext, inParamCauseOfConcernId);
				// Popup_Editor_Notify
				Actions.ActionPopup_Editor_Notify(heContext, "Deleted");
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandCancel</code> that represents the Service Studio screen action
		///  <code>Cancel</code> <p> Description: </p>
		/// </summary>
		private bool CommandCancel(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wtViewCauseForConcern Functions
		/// </summary>
		public void cntViewCauseForConcern_onDataBinding(object sender, System.EventArgs e) {
			cntViewCauseForConcern_setInlineAttributes(sender, e);
		}
		public string cntViewCauseForConcern_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin: 21px 0px 21px 21px;color:#757575;font-size: 12px;text-align: left;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntViewCauseForConcern_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtViewCauseForConcern)
		/// </summary>
		/// <returns>The Visible State of wtViewCauseForConcern</returns>
		public bool cntViewCauseForConcern_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container14 Functions
		/// </summary>
		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container14_setInlineAttributes(sender, e);
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container14_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_If20 Functions
		/// </summary>
		bool if_wt_If20_hasRun=false;
		bool if_wt_If20_evalResult;
		public bool if_wt_If20() {
			if (if_wt_If20_hasRun) {
				if_wt_If20_hasRun = false;
				return if_wt_If20_evalResult;
			}
			if_wt_If20_hasRun = true;
			if_wt_If20_evalResult = (queryResGetCauseOfConcernById_outParamList.CurrentRec.ssENCauseOfConcern.ssRAGStatusId==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("FyPKXxSFRUuY5g7bOusMrA")).ssId);
			return if_wt_If20_evalResult;
		}

		/// <summary>
		/// wt_If17 Functions
		/// </summary>
		bool if_wt_If17_hasRun=false;
		bool if_wt_If17_evalResult;
		public bool if_wt_If17() {
			if (if_wt_If17_hasRun) {
				if_wt_If17_hasRun = false;
				return if_wt_If17_evalResult;
			}
			if_wt_If17_hasRun = true;
			if_wt_If17_evalResult = (queryResGetCauseOfConcernById_outParamList.CurrentRec.ssENCauseOfConcern.ssRAGStatusId==ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("jY_plfZLbEmiO9KjvKGM3Q")).ssId);
			return if_wt_If17_evalResult;
		}

		/// <summary>
		/// wt_Container8 Functions
		/// </summary>
		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container8_setInlineAttributes(sender, e);
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:13px;margin-top: 2px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container8_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression18 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = E_zplk9smEGw6VMTeTekyw) Expression:
		///  GetCauseOfConcernById.List.Current.CauseOfConcernReason.Reason
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression18() {
			return queryResGetCauseOfConcernById_outParamList.CurrentRec.ssENCauseOfConcernReason.ssReason;
		}
		/// <summary>
		/// wt_Container5 Functions
		/// </summary>
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container5_setInlineAttributes(sender, e);
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "display:inline;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container5_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container12 Functions
		/// </summary>
		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container12_setInlineAttributes(sender, e);
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container12_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container27 Functions
		/// </summary>
		public void cnt_Container27_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container27_setInlineAttributes(sender, e);
		}
		public string cnt_Container27_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "display:inline-block;width:300px;height:70px;border:1px solid #E8E8E8;padding: 2px 5px; color: #6F6A6A;font-size: 13px;overflow-y: auto;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container27_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container27)
		/// </summary>
		/// <returns>The Visible State of wt_Container27</returns>
		public bool cnt_Container27_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression6 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = _YBaLcocIUOrAA1apeOf2w) Expression:
		///  GetCauseOfConcernById.List.Current.CauseOfConcern.Description
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression6() {
			return queryResGetCauseOfConcernById_outParamList.CurrentRec.ssENCauseOfConcern.ssDescription;
		}
		/// <summary>
		/// wt_Container4 Functions
		/// </summary>
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container4_setInlineAttributes(sender, e);
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container4_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression2 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = RMLfCRJPX0SX7ijrA1LdhQ) Expression: "by " +
		///  GetCauseOfConcernById.List.Current.User.Name + " on "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression2() {
			return (("by " +queryResGetCauseOfConcernById_outParamList.CurrentRec.ssENUser.ssName) + " on ");
		}
		/// <summary>
		/// wt_WebBlockInstance11 Functions
		/// </summary>
		public void webBlck_WebBlockInstance11_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
			widget.inParamDate = Convert.ToDateTime(queryResGetCauseOfConcernById_outParamList.CurrentRec.ssENCauseOfConcern.ssCreatedAt.ToString("yyyy-M-d"));
		}
		/// <summary>
		/// wt_Container15 Functions
		/// </summary>
		public void cnt_Container15_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container15_setInlineAttributes(sender, e);
		}
		public string cnt_Container15_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container15_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container15)
		/// </summary>
		/// <returns>The Visible State of wt_Container15</returns>
		public bool cnt_Container15_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container28 Functions
		/// </summary>
		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container28_setInlineAttributes(sender, e);
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container28_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Input1 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input1_input_value() {
			if (("" !=varLcReasonForDeletion)) {
				return varLcReasonForDeletion;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input1");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcReasonForDeletion;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input1_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcReasonForDeletion = ""; 
				} else {
					varLcReasonForDeletion = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcReasonForDeletion = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input1)
		/// </summary>
		/// <returns>The Visible State of wt_Input1</returns>
		public bool inputwt_Input1_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input1)
		/// </summary>
		/// <returns>The Enabled State of wt_Input1</returns>
		public bool inputwt_Input1_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input1)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input1</returns>
		public bool inputwt_Input1_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container7 Functions
		/// </summary>
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container7_setInlineAttributes(sender, e);
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "width:310px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container7_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container32 Functions
		/// </summary>
		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container32_setInlineAttributes(sender, e);
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container32_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Link10 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link10_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandCancel(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link10)
		/// </summary>
		/// <returns>title of the Link (wt_Link10)</returns>
		public string
		lnk_Link10_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link10)
		/// </summary>
		/// <returns>The Visible State of wt_Link10</returns>
		public bool lnk_Link10_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link10)
		/// </summary>
		/// <returns>The Enabled State of wt_Link10</returns>
		public bool lnk_Link10_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container23 Functions
		/// </summary>
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container23_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container23_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container23
		/// </summary>
		public void cnt_Container23_AjaxClick(object sender, System.EventArgs e) {
			if (CommandDeleteConcern(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance26 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance26_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
			widget.inParamSize = "";
		}


		public static class FuncCommandDeleteConcern {

			/// <summary>
			/// Query Function "GetStudentLogsByStudentReference" of Action "DeleteConcern"
			/// </summary>
			public static RLStudentLogRecordList datasetGetStudentLogsByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP, string qpstP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, ENStudentLog.[STUDENTREFERENCE] o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, ENStudentLog.[CAUSEOFCONCERNNUMBER] o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44");
				fromBuilder.Append(" FROM {StudentLog} ENStudentLog");
				whereBuilder.Append(" WHERE (ENStudentLog.[USERDESCRIPTION] = @qpstP) AND (ENStudentLog.[STUDENTLOGTYPE] = ");
				whereBuilder.Append("'" + ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("hTcMAzvg9kmgJqUGGgXnPg")).ssLogType.Replace("'", "''") + "'");
				whereBuilder.Append(") AND ");
				if (qpstP1.Trim() != "") {
					whereBuilder.Append("((ENStudentLog.[STUDENTREFERENCE] = @qpstP1) AND (ENStudentLog.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
				} else {
					whereBuilder.Append("(ENStudentLog.[STUDENTREFERENCE] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENStudentLog.[DESCRIPTION] ASC ");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentLogRecordList outParamList = new RLStudentLogRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentLogRecordList _tmp = new RLStudentLogRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.DeleteConcern.DeleteConcern.GetStudentLogsByStudentReference.List");
						outParamList = (RLStudentLogRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.DeleteConcern.DeleteConcern.GetStudentLogsByStudentReference.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentLogRecordList _tmp = new RLStudentLogRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.DeleteConcern.DeleteConcern.GetStudentLogsByStudentReference.List");
							outParamList = (RLStudentLogRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.DeleteConcern.DeleteConcern.GetStudentLogsByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetStudentLogsByStudentReference2" of Action "DeleteConcern"
			/// </summary>
			public static RLStudentLogRecordList datasetGetStudentLogsByStudentReference2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, string qpstP1) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENStudentLog.[ID] o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44");
				fromBuilder.Append(" FROM {StudentLog} ENStudentLog");
				whereBuilder.Append(" WHERE ");
				if (qpstP1.Trim() != "") {
					whereBuilder.Append("((ENStudentLog.[STUDENTREFERENCE] = @qpstP1) AND (ENStudentLog.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
				} else {
					whereBuilder.Append("(ENStudentLog.[STUDENTREFERENCE] IS NULL)");
				}
				whereBuilder.Append(" AND (ENStudentLog.[STUDENTLOGTYPE] = ");
				whereBuilder.Append("'" + ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("hTcMAzvg9kmgJqUGGgXnPg")).ssLogType.Replace("'", "''") + "'");
				whereBuilder.Append(") AND (ENStudentLog.[CAUSEOFCONCERNNUMBER] = @qpinP)");
				orderByBuilder.Append(" ORDER BY ENStudentLog.[DESCRIPTION] ASC ");
				sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentLogRecordList outParamList = new RLStudentLogRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentLogRecordList _tmp = new RLStudentLogRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.DeleteConcern.DeleteConcern.GetStudentLogsByStudentReference2.List");
						outParamList = (RLStudentLogRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.DeleteConcern.DeleteConcern.GetStudentLogsByStudentReference2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentLogRecordList _tmp = new RLStudentLogRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.DeleteConcern.DeleteConcern.GetStudentLogsByStudentReference2.List");
							outParamList = (RLStudentLogRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.DeleteConcern.DeleteConcern.GetStudentLogsByStudentReference2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetCauseOfConcernById2" of Action "DeleteConcern"
			/// </summary>
			public static RLCauseOfConcernRecordList datasetGetCauseOfConcernById2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, ENCauseOfConcern.[STUDENTREFERENCE] o2, NULL o3, NULL o4, ENCauseOfConcern.[DESCRIPTION] o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {CauseOfConcern} ENCauseOfConcern");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCauseOfConcern.[ID] = @qpinP) AND (ENCauseOfConcern.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCauseOfConcern.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCauseOfConcernRecordList outParamList = new RLCauseOfConcernRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, false, true, true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCauseOfConcernRecordList _tmp = new RLCauseOfConcernRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.DeleteConcern.DeleteConcern.GetCauseOfConcernById2.List");
						outParamList = (RLCauseOfConcernRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.DeleteConcern.DeleteConcern.GetCauseOfConcernById2.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCauseOfConcernRecordList _tmp = new RLCauseOfConcernRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.DeleteConcern.DeleteConcern.GetCauseOfConcernById2.List");
							outParamList = (RLCauseOfConcernRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.DeleteConcern.DeleteConcern.GetCauseOfConcernById2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandCancel {
		}
		public static class FuncssPreparation {

			private static void datasetGetCauseOfConcernByIdReadDB(ref RCUserCauseOfConcernReasonCauseOfConcernRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENCauseOfConcern.Read(r, ref index);
				rec.ssENCauseOfConcernReason.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetCauseOfConcernById" of Action "Preparation"
			/// </summary>
			public static RLUserCauseOfConcernReasonCauseOfConcernRecordList datasetGetCauseOfConcernById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENCauseOfConcern.[RAGSTATUSID] o3, NULL o4, ENCauseOfConcern.[DESCRIPTION] o5, NULL o6, ENCauseOfConcern.[CREATEDAT] o7, NULL o8, ENCauseOfConcernReason.[REASON] o9, NULL o10, NULL o11, ENUser.[NAME] o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20");
				fromBuilder.Append(" FROM (({CauseOfConcern} ENCauseOfConcern Left JOIN {CauseOfConcernReason} ENCauseOfConcernReason ON (ENCauseOfConcern.[REASONID] = ENCauseOfConcernReason.[ID]))  Left JOIN {User} ENUser ON (ENCauseOfConcern.[CREATEDBY] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCauseOfConcern.[ID] = @qpinP) AND (ENCauseOfConcern.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCauseOfConcern.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserCauseOfConcernReasonCauseOfConcernRecordList outParamList = new RLUserCauseOfConcernReasonCauseOfConcernRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetCauseOfConcernByIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, false, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, true, false, true, false, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserCauseOfConcernReasonCauseOfConcernRecordList _tmp = new RLUserCauseOfConcernReasonCauseOfConcernRecordList();
					_tmp.AlternateReadDBMethod = datasetGetCauseOfConcernByIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.DeleteConcern.Preparation.GetCauseOfConcernById.List");
						outParamList = (RLUserCauseOfConcernReasonCauseOfConcernRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.DeleteConcern.Preparation.GetCauseOfConcernById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserCauseOfConcernReasonCauseOfConcernRecordList _tmp = new RLUserCauseOfConcernReasonCauseOfConcernRecordList();
						_tmp.AlternateReadDBMethod = datasetGetCauseOfConcernByIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query StaffView.DeleteConcern.Preparation.GetCauseOfConcernById.List");
							outParamList = (RLUserCauseOfConcernReasonCauseOfConcernRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query StaffView.DeleteConcern.Preparation.GetCauseOfConcernById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "DeleteConcern"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "DeleteConcern", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "DeleteConcern", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamCauseOfConcernId", inParamCauseOfConcernId, 0);
			ViewStateAttributes.SetInViewState("varLcReasonForDeletion", varLcReasonForDeletion, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssId", varLcStudentLogRecord.ssENStudentLog.ssId, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssLogRAGId", varLcStudentLogRecord.ssENStudentLog.ssLogRAGId, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssRAGCategoryId", varLcStudentLogRecord.ssENStudentLog.ssRAGCategoryId, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssStudentRAG", varLcStudentLogRecord.ssENStudentLog.ssStudentRAG, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssLastWeekPunctuality", varLcStudentLogRecord.ssENStudentLog.ssLastWeekPunctuality, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssOverallPunctuality", varLcStudentLogRecord.ssENStudentLog.ssOverallPunctuality, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssLastWeekAttendance", varLcStudentLogRecord.ssENStudentLog.ssLastWeekAttendance, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssOverallAttendance", varLcStudentLogRecord.ssENStudentLog.ssOverallAttendance, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssCauseOfConcernRAG", varLcStudentLogRecord.ssENStudentLog.ssCauseOfConcernRAG, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssCauseOfConcernNumber", varLcStudentLogRecord.ssENStudentLog.ssCauseOfConcernNumber, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssSafeguardIdList", varLcStudentLogRecord.ssENStudentLog.ssSafeguardIdList, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssSupportIdList", varLcStudentLogRecord.ssENStudentLog.ssSupportIdList, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssRewardsGoldNumber", varLcStudentLogRecord.ssENStudentLog.ssRewardsGoldNumber, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssRewardsGreenNumber", varLcStudentLogRecord.ssENStudentLog.ssRewardsGreenNumber, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssVocPeriodRAG", varLcStudentLogRecord.ssENStudentLog.ssVocPeriodRAG, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssVocOverallRAG", varLcStudentLogRecord.ssENStudentLog.ssVocOverallRAG, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssVocCompletedUnits", varLcStudentLogRecord.ssENStudentLog.ssVocCompletedUnits, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssVocRegisteredUnits", varLcStudentLogRecord.ssENStudentLog.ssVocRegisteredUnits, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssMathPeriodRAG", varLcStudentLogRecord.ssENStudentLog.ssMathPeriodRAG, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssMathOverallRAG", varLcStudentLogRecord.ssENStudentLog.ssMathOverallRAG, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssMathCompletedUnits", varLcStudentLogRecord.ssENStudentLog.ssMathCompletedUnits, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssMathRegisteredUnits", varLcStudentLogRecord.ssENStudentLog.ssMathRegisteredUnits, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssEngPeriodRAG", varLcStudentLogRecord.ssENStudentLog.ssEngPeriodRAG, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssEngOverallRAG", varLcStudentLogRecord.ssENStudentLog.ssEngOverallRAG, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssEngCompletedUnits", varLcStudentLogRecord.ssENStudentLog.ssEngCompletedUnits, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssEngRegisteredUnits", varLcStudentLogRecord.ssENStudentLog.ssEngRegisteredUnits, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWPeriodRAG", varLcStudentLogRecord.ssENStudentLog.ssMLWPeriodRAG, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWOverallRAG", varLcStudentLogRecord.ssENStudentLog.ssMLWOverallRAG, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWCompletedUnits", varLcStudentLogRecord.ssENStudentLog.ssMLWCompletedUnits, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWRegisteredUnits", varLcStudentLogRecord.ssENStudentLog.ssMLWRegisteredUnits, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssRewardType", varLcStudentLogRecord.ssENStudentLog.ssRewardType, false);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssDescriptionType", varLcStudentLogRecord.ssENStudentLog.ssDescriptionType, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssDisciplinaryTypeNumber", varLcStudentLogRecord.ssENStudentLog.ssDisciplinaryTypeNumber, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssDisciplinaryType", varLcStudentLogRecord.ssENStudentLog.ssDisciplinaryType, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWCompetencieId", varLcStudentLogRecord.ssENStudentLog.ssMLWCompetencieId, "");
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWCompetencieCurrentLevel", varLcStudentLogRecord.ssENStudentLog.ssMLWCompetencieCurrentLevel, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssSessionId", varLcStudentLogRecord.ssENStudentLog.ssSessionId, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ssCommunicationId", varLcStudentLogRecord.ssENStudentLog.ssCommunicationId, 0);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(varLcStudentLogRecord.ssENStudentLog.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("varLcStudentLogRecord_ssENStudentLog_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(varLcStudentLogRecord.ssENStudentLog.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wt_Input1_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input1")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamCauseOfConcernId = (int) ViewStateAttributes.GetFromViewState("inParamCauseOfConcernId", 0);
				varLcReasonForDeletion = (string) ViewStateAttributes.GetFromViewState("varLcReasonForDeletion", "");
				varLcStudentLogRecord.ssENStudentLog.ssId = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssId", 0);
				varLcStudentLogRecord.ssENStudentLog.ssLogRAGId = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssLogRAGId", "");
				varLcStudentLogRecord.ssENStudentLog.ssRAGCategoryId = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssRAGCategoryId", 0);
				varLcStudentLogRecord.ssENStudentLog.ssStudentRAG = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssStudentRAG", "");
				varLcStudentLogRecord.ssENStudentLog.ssLastWeekPunctuality = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssLastWeekPunctuality", 0);
				varLcStudentLogRecord.ssENStudentLog.ssOverallPunctuality = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssOverallPunctuality", 0);
				varLcStudentLogRecord.ssENStudentLog.ssLastWeekAttendance = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssLastWeekAttendance", 0);
				varLcStudentLogRecord.ssENStudentLog.ssOverallAttendance = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssOverallAttendance", 0);
				varLcStudentLogRecord.ssENStudentLog.ssCauseOfConcernRAG = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssCauseOfConcernRAG", "");
				varLcStudentLogRecord.ssENStudentLog.ssCauseOfConcernNumber = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssCauseOfConcernNumber", 0);
				varLcStudentLogRecord.ssENStudentLog.ssSafeguardIdList = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssSafeguardIdList", "");
				varLcStudentLogRecord.ssENStudentLog.ssSupportIdList = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssSupportIdList", "");
				varLcStudentLogRecord.ssENStudentLog.ssRewardsGoldNumber = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssRewardsGoldNumber", 0);
				varLcStudentLogRecord.ssENStudentLog.ssRewardsGreenNumber = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssRewardsGreenNumber", 0);
				varLcStudentLogRecord.ssENStudentLog.ssVocPeriodRAG = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssVocPeriodRAG", "");
				varLcStudentLogRecord.ssENStudentLog.ssVocOverallRAG = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssVocOverallRAG", "");
				varLcStudentLogRecord.ssENStudentLog.ssVocCompletedUnits = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssVocCompletedUnits", 0);
				varLcStudentLogRecord.ssENStudentLog.ssVocRegisteredUnits = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssVocRegisteredUnits", 0);
				varLcStudentLogRecord.ssENStudentLog.ssMathPeriodRAG = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssMathPeriodRAG", "");
				varLcStudentLogRecord.ssENStudentLog.ssMathOverallRAG = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssMathOverallRAG", "");
				varLcStudentLogRecord.ssENStudentLog.ssMathCompletedUnits = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssMathCompletedUnits", 0);
				varLcStudentLogRecord.ssENStudentLog.ssMathRegisteredUnits = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssMathRegisteredUnits", 0);
				varLcStudentLogRecord.ssENStudentLog.ssEngPeriodRAG = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssEngPeriodRAG", "");
				varLcStudentLogRecord.ssENStudentLog.ssEngOverallRAG = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssEngOverallRAG", "");
				varLcStudentLogRecord.ssENStudentLog.ssEngCompletedUnits = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssEngCompletedUnits", 0);
				varLcStudentLogRecord.ssENStudentLog.ssEngRegisteredUnits = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssEngRegisteredUnits", 0);
				varLcStudentLogRecord.ssENStudentLog.ssMLWPeriodRAG = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWPeriodRAG", "");
				varLcStudentLogRecord.ssENStudentLog.ssMLWOverallRAG = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWOverallRAG", "");
				varLcStudentLogRecord.ssENStudentLog.ssMLWCompletedUnits = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWCompletedUnits", 0);
				varLcStudentLogRecord.ssENStudentLog.ssMLWRegisteredUnits = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWRegisteredUnits", 0);
				varLcStudentLogRecord.ssENStudentLog.ssRewardType = (bool) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssRewardType", false);
				varLcStudentLogRecord.ssENStudentLog.ssDescriptionType = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssDescriptionType", "");
				varLcStudentLogRecord.ssENStudentLog.ssDisciplinaryTypeNumber = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssDisciplinaryTypeNumber", 0);
				varLcStudentLogRecord.ssENStudentLog.ssDisciplinaryType = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssDisciplinaryType", "");
				varLcStudentLogRecord.ssENStudentLog.ssMLWCompetencieId = (string) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWCompetencieId", "");
				varLcStudentLogRecord.ssENStudentLog.ssMLWCompetencieCurrentLevel = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssMLWCompetencieCurrentLevel", 0);
				varLcStudentLogRecord.ssENStudentLog.ssSessionId = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssSessionId", 0);
				varLcStudentLogRecord.ssENStudentLog.ssCommunicationId = (int) ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ssCommunicationId", 0);
				varLcStudentLogRecord.ssENStudentLog.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_ChangedAttributes", null));
				varLcStudentLogRecord.ssENStudentLog.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("varLcStudentLogRecord_ssENStudentLog_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wt_Input1")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input1_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wt_Input1", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
