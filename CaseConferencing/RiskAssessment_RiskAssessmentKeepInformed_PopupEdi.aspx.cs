/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowBackofficeFlow {

	public class ScrnRiskAssessment_RiskAssessmentKeepInformed_PopupEdi: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnRiskAssessment_RiskAssessmentKeepInformed_PopupEdi(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamRiskAssessmentKeepInformedId. Description:
		/// </summary>
		public int inParamRiskAssessmentKeepInformedId = 0;
		/// <summary>
		/// Screen Input Parameter inParamRiskAssessmentId. Description:
		/// </summary>
		public int inParamRiskAssessmentId = 0;
		/// <summary>
		/// Variable RichWidgets_wt_WebBlockInstance7
		/// </summary>
		protected proxy_CaseConferencing_RichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Popup RichWidgets_wt_WebBlockInstance7;
		protected OutSystems.HubEdition.WebWidgets.CustomWidget wtRiskAssessmentKeepInformedForm;
		RCRiskAssessmentKeepInformedRecord ssRiskAssessmentKeepInformedFormRecord = new RCRiskAssessmentKeepInformedRecord(null);
		bool ssRiskAssessmentKeepInformedFormValid {
			get {
				return wtRiskAssessmentKeepInformedForm.GetBehavior<OutSystems.Plugin.Widgets.Form>().Valid(); 
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		protected OutSystems.HubEdition.WebWidgets.CustomWidget wt_CustomWidget4;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtRiskAssessmentKeepInformed_UserValidatorRequired;
		protected SelectRtWidget Rt_wtRiskAssessmentKeepInformed_User = new SelectRtWidget();
		RLUserRecordList Rt_wtRiskAssessmentKeepInformed_User_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container10;
		/// <summary>
		/// Variable (wt_Button5) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button5;
		/// <summary>
		/// Variable (wt_Button2) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button2;
		/// <summary>
		/// Variable (wt_Button1) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button1;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Popup.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {
			if (visited.Add("2f4b8ff5-3fc8-4444-abb8-bbc225cb711b")) {
				CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Widgets/Form/Form.css" + AppUtils.Instance.CacheInvalidationSuffix);
			}

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("dVeiR+rFYUqUJsyl2UGaqQ", "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "dVeiR+rFYUqUJsyl2UGaqQ", "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "dVeiR+rFYUqUJsyl2UGaqQ", "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "dVeiR+rFYUqUJsyl2UGaqQ", "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "dVeiR+rFYUqUJsyl2UGaqQ", "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnRiskAssessment_RiskAssessmentKeepInformed_PopupEdi() {
		}


		RLRiskAssessmentKeepInformedRecordList queryResGetRiskAssessmentKeepInformedById_outParamList = new RLRiskAssessmentKeepInformedRecordList();
		int queryResGetRiskAssessmentKeepInformedById_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetRiskAssessmentKeepInformedById
			int datasetGetRiskAssessmentKeepInformedById_maxRecords = 1;
			if (datasetGetRiskAssessmentKeepInformedById_maxRecords < 1) datasetGetRiskAssessmentKeepInformedById_maxRecords = 1;
			queryResGetRiskAssessmentKeepInformedById_outParamList = FuncssPreparation.datasetGetRiskAssessmentKeepInformedById(heContext, datasetGetRiskAssessmentKeepInformedById_maxRecords, IterationMultiplicity.Never, out queryResGetRiskAssessmentKeepInformedById_outParamCount, inParamRiskAssessmentKeepInformedId
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamRiskAssessmentKeepInformedId!=0)) {
				parameters.Add(new Pair<string, string>("RiskAssessmentKeepInformedId", HttpUtility.UrlEncode(Convert.ToString(inParamRiskAssessmentKeepInformedId), Request.ContentEncoding)));
			}
			if ((inParamRiskAssessmentId!=0)) {
				parameters.Add(new Pair<string, string>("RiskAssessmentId", HttpUtility.UrlEncode(Convert.ToString(inParamRiskAssessmentId), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			RichWidgets_wt_WebBlockInstance7 = (proxy_CaseConferencing_RichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Popup) FindControl("RichWidgets_wt_WebBlockInstance7");
			wtRiskAssessmentKeepInformedForm = (CustomWidget) FindControl("wtRiskAssessmentKeepInformedForm");
			wtRiskAssessmentKeepInformedForm.AddBehavior(new JavascriptIncludeBehavior(new String[] {
				AppUtils.Instance.getImagePath() + "Widgets/Form/fastclick.js" + AppUtils.Instance.CacheInvalidationPlatformSuffix, AppUtils.Instance.getImagePath() + "Widgets/Form/Form.js" + AppUtils.Instance.CacheInvalidationPlatformSuffix
			}
			));
			wtRiskAssessmentKeepInformedForm.AddBehavior(new OutSystems.Plugin.Widgets.Form());
			{
				OutSystems.Plugin.Widgets.Form behavior = wtRiskAssessmentKeepInformedForm.GetBehavior<OutSystems.Plugin.Widgets.Form>();
				behavior.IsEditable = () => true;
			}
			wt_Container9 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container9");
			wt_CustomWidget4 = (CustomWidget) FindControl("wt_CustomWidget4");
			wt_CustomWidget4.AddBehavior(new OutSystems.Plugin.Widgets.Label());
			{
				OutSystems.Plugin.Widgets.Label behavior = wt_CustomWidget4.GetBehavior<OutSystems.Plugin.Widgets.Label>();
				behavior.Value = () => "User";
			}
			wt_Container10 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container10");
			wt_Button5 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button5");
			if (this.wt_Button5 != null) {
				this.wt_Button5.Click += new System.EventHandler(this.wt_Button5_Click);
			}
			wt_Button2 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button2");
			if (this.wt_Button2 != null) {
				this.wt_Button2.Click += new System.EventHandler(this.wt_Button2_Click);
			}
			wt_Button1 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button1");
			if (this.wt_Button1 != null) {
				this.wt_Button1.Click += new System.EventHandler(this.wt_Button1_Click);
			}
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wtRiskAssessmentKeepInformedForm") {
				return RichWidgets_wt_WebBlockInstance7.wtMainContent.FindControl("wtRiskAssessmentKeepInformedForm");
			}
			if (id == "wt_Container9") {
				return RichWidgets_wt_WebBlockInstance7.wtMainContent.FindControl("wt_Container9");
			}
			if (id == "wt_CustomWidget4") {
				return RichWidgets_wt_WebBlockInstance7.wtMainContent.FindControl("wt_CustomWidget4");
			}
			if (id == "wtRiskAssessmentKeepInformed_User") {
				return RichWidgets_wt_WebBlockInstance7.wtMainContent.FindControl("wtRiskAssessmentKeepInformed_User");
			}
			if (id == "wt_Container10") {
				return RichWidgets_wt_WebBlockInstance7.wtMainContent.FindControl("wt_Container10");
			}
			if (id == "wt_Button5") {
				return RichWidgets_wt_WebBlockInstance7.wtMainContent.FindControl("wt_Button5");
			}
			if (id == "wt_Button2") {
				return RichWidgets_wt_WebBlockInstance7.wtMainContent.FindControl("wt_Button2");
			}
			if (id == "wt_Button1") {
				return RichWidgets_wt_WebBlockInstance7.wtMainContent.FindControl("wt_Button1");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_RiskAssessment_RiskAssessmentKeepInformed_PopupEdi"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamRiskAssessmentKeepInformedId = (int) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamRiskAssessmentId = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_RiskAssessment_RiskAssessmentKeepInformed_PopupEdi"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["RiskAssessmentKeepInformedId"] != null) {
						inParamRiskAssessmentKeepInformedId = Convert.ToInt32(Request.QueryString["RiskAssessmentKeepInformedId"]);
					}
					if (Request.QueryString["RiskAssessmentId"] != null) {
						inParamRiskAssessmentId = Convert.ToInt32(Request.QueryString["RiskAssessmentId"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["RiskAssessmentKeepInformedId"] != null) {
						inParamRiskAssessmentKeepInformedId = Convert.ToInt32(Request.Form["RiskAssessmentKeepInformedId"]);
					}
					if (Request.Form["RiskAssessmentId"] != null) {
						inParamRiskAssessmentId = Convert.ToInt32(Request.Form["RiskAssessmentId"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtRiskAssessmentKeepInformedForm_onDataBinding(wtRiskAssessmentKeepInformedForm, null);
				}
				Title = "RiskAssessment RiskAssessmentKeepInformed PopupEdi"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button5 = wt_Button5 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button5");
			} catch {}
			string jsString = (wt_Button5 != null) ? "return OsEnterKey('" +wt_Button5.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowBackofficeFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotPLA("PLA role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("dVeiR+rFYUqUJsyl2UGaqQ"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandCancel</code> that represents the Service Studio screen action
		///  <code>Cancel</code> <p> Description: </p>
		/// </summary>
		private bool CommandCancel(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSave: VarsBag {
			public bool inParamSaveAndNew;
			/// <summary>
			/// Variable <code>varLcEmpty</code> that represents the Service Studio local variable
			///  <code>Empty</code> <p>Description: </p>
			/// </summary>
			public RCRiskAssessmentKeepInformedRecord varLcEmpty = new RCRiskAssessmentKeepInformedRecord(null);

			public int resCreateOrUpdateRiskAssessmentKeepInformed_outParamId = 0;

			public lcvSave(bool inParamSaveAndNew) {
				this.inParamSaveAndNew = inParamSaveAndNew;
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext, bool inParamSaveAndNew) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave(inParamSaveAndNew);
			try {
				// SetRiskAssessment
				ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssRiskAssessment = inParamRiskAssessmentId; // RiskAssessmentKeepInformedForm.Record.RiskAssessmentKeepInformed.RiskAssessment = RiskAssessmentId
				// Valid?
				if (ssRiskAssessmentKeepInformedFormValid) {
					// CreateOrUpdateRiskAssessmentKeepInformed
					ExtendedActions.CreateOrUpdateRiskAssessmentKeepInformed(heContext, ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ChangedAttributes, ((RCRiskAssessmentKeepInformedRecord) ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed), out localVars.resCreateOrUpdateRiskAssessmentKeepInformed_outParamId);
					// Feedback_Message
					Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(("The risk assessment keep informed was successfully " + (((ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssId==BuiltInFunction.NullIdentifier())) ?("created."):("updated.")))), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
					// Popup_Editor_Notify
					Actions.ActionPopup_Editor_Notify(heContext, "");
					if (localVars.inParamSaveAndNew) {
						// Clear Form
						ssRiskAssessmentKeepInformedFormRecord = localVars.varLcEmpty; // RiskAssessmentKeepInformedForm.Record = Empty
						inParamRiskAssessmentKeepInformedId = BuiltInFunction.NullIdentifier(); // RiskAssessmentKeepInformedId = NullIdentifier
						// Refresh Widget (wtRiskAssessmentKeepInformedForm)
						((OSPageViewState) Page).AjaxRefresh(wtRiskAssessmentKeepInformedForm, "None", StoreViewState);
						// Update Screen
						return true;

					} else {
						// Popup_Editor_Close
						Actions.ActionPopup_Editor_Close(heContext);
						// Update Screen
						return true;

					}

				} else {
					// Refresh Widget (wtRiskAssessmentKeepInformedForm)
					((OSPageViewState) Page).AjaxRefresh(wtRiskAssessmentKeepInformedForm, "None", StoreViewState);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance7 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance7_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Popup widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowLayoutsOther.WBlkLayout_Popup) sender;
		}
		/// <summary>
		/// wtRiskAssessmentKeepInformedForm Functions
		/// </summary>
		public void wtRiskAssessmentKeepInformedForm_onDataBinding(object sender, System.EventArgs e) {
			if (!IsPostBack)
			ssRiskAssessmentKeepInformedFormRecord = queryResGetRiskAssessmentKeepInformedById_outParamList.CurrentRec;
		}
		/// <summary>
		/// wt_Container9 Functions
		/// </summary>
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container9_setInlineAttributes(sender, e);
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container9_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_CustomWidget4 Functions
		/// </summary>
		public void wt_CustomWidget4_onDataBinding(object sender, System.EventArgs e) {
			wt_CustomWidget4.GetBehavior<OutSystems.Plugin.Widgets.Label>().Data["ForInputIdMandatoryFunction"] = selRiskAssessmentKeepInformed_User_isMandatory();
			wt_CustomWidget4.GetBehavior<OutSystems.Plugin.Widgets.Label>().Data["ForInputId"] = this.FindControl("wtRiskAssessmentKeepInformed_User").ClientID;
		}
		/// <summary>
		/// wtRiskAssessmentKeepInformed_User Functions
		/// </summary>
		public void selRiskAssessmentKeepInformed_User_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtRiskAssessmentKeepInformed_User_reclist == null) {
				using(Transaction wtRiskAssessmentKeepInformed_User_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtRiskAssessmentKeepInformed_User_sql = "SELECT [ID], [NAME], NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL FROM " + ENUserEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [NAME]";
					Command Rt_wtRiskAssessmentKeepInformed_User_sqlCmd = wtRiskAssessmentKeepInformed_User_trans.CreateCommand(wtRiskAssessmentKeepInformed_User_sql);
					Rt_wtRiskAssessmentKeepInformed_User_sqlCmd.CreateParameter("@Selection", ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssUser);
					Rt_wtRiskAssessmentKeepInformed_User_sqlCmd.TransformParametersSyntax();
					Rt_wtRiskAssessmentKeepInformed_User_reclist = new RLUserRecordList();
					Rt_wtRiskAssessmentKeepInformed_User_reclist.Transaction = wtRiskAssessmentKeepInformed_User_trans;
					Rt_wtRiskAssessmentKeepInformed_User_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(11, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtRiskAssessmentKeepInformed_User_sqlCmd, Rt_wtRiskAssessmentKeepInformed_User_reclist, "WebSelectWidget load operation");
					Rt_wtRiskAssessmentKeepInformed_User_reclist = (RLUserRecordList) Rt_wtRiskAssessmentKeepInformed_User_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtRiskAssessmentKeepInformed_User.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtRiskAssessmentKeepInformed_User_reclist.StartIteration();
			try {
				while (!Rt_wtRiskAssessmentKeepInformed_User_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtRiskAssessmentKeepInformed_User_reclist.CurrentRec.ssENUser.ssName, Convert.ToString(Rt_wtRiskAssessmentKeepInformed_User_reclist.CurrentRec.ssENUser.ssId)));
					if (ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssUser == Convert.ToInt32(Convert.ToString(Rt_wtRiskAssessmentKeepInformed_User_reclist.CurrentRec.ssENUser.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtRiskAssessmentKeepInformed_User_reclist.Advance();
				}
			} finally {
				Rt_wtRiskAssessmentKeepInformed_User_reclist.EndIteration();
			}
		}
		public void selRiskAssessmentKeepInformed_User_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtRiskAssessmentKeepInformed_User.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssUser = 0;
			}
			else {
				Rt_wtRiskAssessmentKeepInformed_User.SpecialListVal = "";
				try {
					ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssUser = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtRiskAssessmentKeepInformed_User)
		/// </summary>
		/// <returns>The Visible State of wtRiskAssessmentKeepInformed_User</returns>
		public bool selRiskAssessmentKeepInformed_User_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtRiskAssessmentKeepInformed_User)
		/// </summary>
		/// <returns>The Enabled State of wtRiskAssessmentKeepInformed_User</returns>
		public bool selRiskAssessmentKeepInformed_User_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selRiskAssessmentKeepInformed_User)
		/// </summary>
		/// <returns>The Mandatory Value of selRiskAssessmentKeepInformed_User</returns>
		public bool selRiskAssessmentKeepInformed_User_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container10 Functions
		/// </summary>
		public void cnt_Container10_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container10_setInlineAttributes(sender, e);
		}
		public string cnt_Container10_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container10_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container10)
		/// </summary>
		/// <returns>The Visible State of wt_Container10</returns>
		public bool cnt_Container10_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Button5 Functions
		/// </summary>
		public void btn_Button5_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button5_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandSave(heContext, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button5)
		/// </summary>
		/// <returns>Label of the Button (wt_Button5)</returns>
		public string
		btn_Button5_getLabel() {
			return "Save";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button5)
		/// </summary>
		/// <returns>The Visible State of wt_Button5</returns>
		public bool btn_Button5_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button5)
		/// </summary>
		/// <returns>The Enabled State of wt_Button5</returns>
		public bool btn_Button5_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button2 Functions
		/// </summary>
		public void btn_Button2_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button2_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandSave(heContext, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button2)
		/// </summary>
		/// <returns>Label of the Button (wt_Button2)</returns>
		public string
		btn_Button2_getLabel() {
			return "Save & New";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button2)
		/// </summary>
		/// <returns>The Visible State of wt_Button2</returns>
		public bool btn_Button2_isVisible() {
			return (ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssId==BuiltInFunction.NullIdentifier());
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button2)
		/// </summary>
		/// <returns>The Enabled State of wt_Button2</returns>
		public bool btn_Button2_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button1 Functions
		/// </summary>
		public void btn_Button1_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button1_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandCancel(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button1)
		/// </summary>
		/// <returns>Label of the Button (wt_Button1)</returns>
		public string
		btn_Button1_getLabel() {
			return "Cancel";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button1)
		/// </summary>
		/// <returns>The Visible State of wt_Button1</returns>
		public bool btn_Button1_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button1)
		/// </summary>
		/// <returns>The Enabled State of wt_Button1</returns>
		public bool btn_Button1_isEnabled() {
			return true; 
		}


		public static class FuncCommandCancel {
		}
		public static class FuncCommandSave {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetRiskAssessmentKeepInformedById" of Action "Preparation"
			/// </summary>
			public static RLRiskAssessmentKeepInformedRecordList datasetGetRiskAssessmentKeepInformedById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessmentKeepInformed.[ID] o1, NULL o2, ENRiskAssessmentKeepInformed.[USER] o3");
				fromBuilder.Append(" FROM {RiskAssessmentKeepInformed} ENRiskAssessmentKeepInformed");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentKeepInformed.[ID] = @qpinP) AND (ENRiskAssessmentKeepInformed.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentKeepInformed.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentKeepInformedRecordList outParamList = new RLRiskAssessmentKeepInformedRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentKeepInformedRecordList _tmp = new RLRiskAssessmentKeepInformedRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RiskAssessment_RiskAssessmentKeepInformed_PopupEdi.Preparation.GetRiskAssessmentKeepInformedById.List");
						outParamList = (RLRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RiskAssessment_RiskAssessmentKeepInformed_PopupEdi.Preparation.GetRiskAssessmentKeepInformedById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentKeepInformedRecordList _tmp = new RLRiskAssessmentKeepInformedRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RiskAssessment_RiskAssessmentKeepInformed_PopupEdi.Preparation.GetRiskAssessmentKeepInformedById.List");
							outParamList = (RLRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RiskAssessment_RiskAssessmentKeepInformed_PopupEdi.Preparation.GetRiskAssessmentKeepInformedById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "RiskAssessment RiskAssessmentKeepInformed PopupEdi"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetRiskAssessmentKeepInformedById_outParamList.

			int tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedById_outParamList = queryResGetRiskAssessmentKeepInformedById_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetRiskAssessmentKeepInformedById_outParamList = queryResGetRiskAssessmentKeepInformedById_outParamList.Eof;
			ArrayList storequeryResGetRiskAssessmentKeepInformedById_outParamList = new ArrayList();

			// Write the needed fields of queryResGetRiskAssessmentKeepInformedById_outParamList to the storequeryResGetRiskAssessmentKeepInformedById_outParamList
			if (!queryResGetRiskAssessmentKeepInformedById_outParamList.Empty) {
				try {
					queryResGetRiskAssessmentKeepInformedById_outParamList.StartIteration();

					while (!queryResGetRiskAssessmentKeepInformedById_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList = new ArrayList();
						tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList.Add(queryResGetRiskAssessmentKeepInformedById_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ssId == 0?(object) null: queryResGetRiskAssessmentKeepInformedById_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ssId);
						tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList.Add(queryResGetRiskAssessmentKeepInformedById_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ssUser == 0?(object) null: queryResGetRiskAssessmentKeepInformedById_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ssUser);
						tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetRiskAssessmentKeepInformedById_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ChangedAttributes, new BitArray(new bool[] {
							true, false, true
						}
						))));
						tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetRiskAssessmentKeepInformedById_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false
						}
						))));
						storequeryResGetRiskAssessmentKeepInformedById_outParamList.Add(tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList);
						queryResGetRiskAssessmentKeepInformedById_outParamList.Advance();
					}
				} finally {
					queryResGetRiskAssessmentKeepInformedById_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentKeepInformedById_outParamList", storequeryResGetRiskAssessmentKeepInformedById_outParamList, null);

			#endregion


			#region store queryResGetRiskAssessmentKeepInformedById_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentKeepInformedById_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedById_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetRiskAssessmentKeepInformedById_outParamList_eof", tmpeofqueryResGetRiskAssessmentKeepInformedById_outParamList, false);
			queryResGetRiskAssessmentKeepInformedById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedById_outParamList, tmpeofqueryResGetRiskAssessmentKeepInformedById_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamRiskAssessmentId", inParamRiskAssessmentId, 0);
			ViewStateAttributes.SetInViewState("wtRiskAssessmentKeepInformedForm_ssRiskAssessmentKeepInformedFormRecord_ssENRiskAssessmentKeepInformed_ssId", ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssId, 0);
			ViewStateAttributes.SetInViewState("wtRiskAssessmentKeepInformedForm_ssRiskAssessmentKeepInformedFormRecord_ssENRiskAssessmentKeepInformed_ssUser", ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssUser, 0);
			ViewStateAttributes.SetInViewState("wtRiskAssessmentKeepInformedForm_ssRiskAssessmentKeepInformedFormRecord_ssENRiskAssessmentKeepInformed_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ChangedAttributes, new BitArray(new bool[] {
				true, false, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtRiskAssessmentKeepInformedForm_ssRiskAssessmentKeepInformedFormRecord_ssENRiskAssessmentKeepInformed_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.OptimizedAttributes, new BitArray(new bool[] {
				false, true, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtRiskAssessmentKeepInformed_User_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtRiskAssessmentKeepInformed_User")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetRiskAssessmentKeepInformedById_outParamList.

				// Read the needed fields of queryResGetRiskAssessmentKeepInformedById_outParamList from storequeryResGetRiskAssessmentKeepInformedById_outParamList
				queryResGetRiskAssessmentKeepInformedById_outParamList = new RLRiskAssessmentKeepInformedRecordList();
				ArrayList storequeryResGetRiskAssessmentKeepInformedById_outParamList;
				storequeryResGetRiskAssessmentKeepInformedById_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentKeepInformedById_outParamList", null);
				if (storequeryResGetRiskAssessmentKeepInformedById_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList in storequeryResGetRiskAssessmentKeepInformedById_outParamList) {
						if (tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList != null) {
							// Aux current record variable
							RCRiskAssessmentKeepInformedRecord tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedById_outParamList = new RCRiskAssessmentKeepInformedRecord(null);
							tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedById_outParamList.ssENRiskAssessmentKeepInformed.ssId = (int) (tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList[0] == null ? 0: tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedById_outParamList.ssENRiskAssessmentKeepInformed.ssUser = (int) (tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList[1] == null ? 0: tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedById_outParamList.ssENRiskAssessmentKeepInformed.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedById_outParamList.ssENRiskAssessmentKeepInformed.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetRiskAssessmentKeepInformedById_outParamList[3]);

							queryResGetRiskAssessmentKeepInformedById_outParamList.Append(tmpAuxCurrentRecordqueryResGetRiskAssessmentKeepInformedById_outParamList);
						}
					}
				}
				queryResGetRiskAssessmentKeepInformedById_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetRiskAssessmentKeepInformedById_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedById_outParamList;
				tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedById_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentKeepInformedById_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetRiskAssessmentKeepInformedById_outParamList;
				tmpeofqueryResGetRiskAssessmentKeepInformedById_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetRiskAssessmentKeepInformedById_outParamList_eof", false);
				queryResGetRiskAssessmentKeepInformedById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetRiskAssessmentKeepInformedById_outParamList, tmpeofqueryResGetRiskAssessmentKeepInformedById_outParamList);

				#endregion

				inParamRiskAssessmentId = (int) ViewStateAttributes.GetFromViewState("inParamRiskAssessmentId", 0);
				ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssId = (int) ViewStateAttributes.GetFromViewState("wtRiskAssessmentKeepInformedForm_ssRiskAssessmentKeepInformedFormRecord_ssENRiskAssessmentKeepInformed_ssId", 0);
				ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ssUser = (int) ViewStateAttributes.GetFromViewState("wtRiskAssessmentKeepInformedForm_ssRiskAssessmentKeepInformedFormRecord_ssENRiskAssessmentKeepInformed_ssUser", 0);
				ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtRiskAssessmentKeepInformedForm_ssRiskAssessmentKeepInformedFormRecord_ssENRiskAssessmentKeepInformed_ChangedAttributes", null));
				ssRiskAssessmentKeepInformedFormRecord.ssENRiskAssessmentKeepInformed.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtRiskAssessmentKeepInformedForm_ssRiskAssessmentKeepInformedFormRecord_ssENRiskAssessmentKeepInformed_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wtRiskAssessmentKeepInformed_User")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtRiskAssessmentKeepInformed_User_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wtRiskAssessmentKeepInformed_User", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
