/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearner_ILP {

	public class ScrnPopup_Target: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnPopup_Target(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamTargetId. Description:
		/// </summary>
		public int inParamTargetId = 0;
		/// <summary>
		/// Screen Input Parameter inParamCategoryId. Description:
		/// </summary>
		public int inParamCategoryId = 0;
		/// <summary>
		/// Screen Input Parameter inParamStudentId. Description:
		/// </summary>
		public string inParamStudentId = "";
		/// <summary>
		/// Screen Input Parameter inParamOfferingCode. Description:
		/// </summary>
		public string inParamOfferingCode = "";
		/// <summary>
		/// Screen Input Parameter inParamOfferingName. Description:
		/// </summary>
		public string inParamOfferingName = "";
		/// <summary>
		/// Variable wt_WebBlockInstance4
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout wt_WebBlockInstance4;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCTargetRecord ssTargetEditRecord = new RCTargetRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtTargetEdit_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtTarget_OfferingCategory") &&
			ValidationUtils.IsValid(this, "wtTarget_TargetTypeId") &&
			ValidationUtils.IsValid(this, "wtTarget_TargetStatusId") &&
			ValidationUtils.IsValid(this, "wtTarget_TargetDate") &&
			ValidationUtils.IsValid(this, "wtTarget_CompletionDate") &&
			ValidationUtils.IsValid(this, "wtTarget_TargetHeader") &&
			ValidationUtils.IsValid(this, "wtTarget_TargetDescription");
			return res;
		}

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_OfferingCategoryValidatorRequired;
		protected SelectRtWidget Rt_wtTarget_OfferingCategory = new SelectRtWidget();
		RLCategoryRecordList Rt_wtTarget_OfferingCategory_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_TargetTypeIdValidatorRequired;
		protected SelectRtWidget Rt_wtTarget_TargetTypeId = new SelectRtWidget();
		RLTargetTypeRecordList Rt_wtTarget_TargetTypeId_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_TargetStatusIdValidatorRequired;
		protected SelectRtWidget Rt_wtTarget_TargetStatusId = new SelectRtWidget();
		RLTargetStatusRecordList Rt_wtTarget_TargetStatusId_reclist = null;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_TargetDateValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtTarget_TargetDateValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_CompletionDateValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtTarget_CompletionDateValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_TargetHeaderValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtTarget_TargetHeaderValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtTarget_TargetDescriptionValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtTarget_TargetDescriptionValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wtButtonContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container51;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container52;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container48;
		/// <summary>
		/// Variable (wtValidateAndSave) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtValidateAndSave;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("tNW_PGuKF0yvcRl7BXr4Vg", "Popup_Target");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "tNW_PGuKF0yvcRl7BXr4Vg", "Popup_Target");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "tNW_PGuKF0yvcRl7BXr4Vg", "Popup_Target");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "tNW_PGuKF0yvcRl7BXr4Vg", "Popup_Target");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "tNW_PGuKF0yvcRl7BXr4Vg", "Popup_Target");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnPopup_Target() {
			htTabIndexGroups["wt_Text44"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_OfferingCategory"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text53"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_TargetTypeId"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text13"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_TargetStatusId"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text49"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_TargetDate"] = "wtTargetEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance6"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text54"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_CompletionDate"] = "wtTargetEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance36"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text55"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_TargetHeader"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text23"] = "wtTargetEdit-1";
			htTabIndexGroups["wtTarget_TargetDescription"] = "wtTargetEdit-1";
			htTabIndexGroups["wtButtonContainer"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Container51"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Container14"] = "wtTargetEdit-1";
			htTabIndexGroups["Hunspell_wt_WebBlockInstance47"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Container52"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_WebBlockInstance1"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Container48"] = "wtTargetEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance39"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text5"] = "wtTargetEdit-1";
			htTabIndexGroups["wtValidateAndSave"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Container19"] = "wtTargetEdit-1";
			htTabIndexGroups["wt_Text46"] = "wtTargetEdit-1";
		}


		RLTargetRecordList queryResGetTargetById_outParamList = new RLTargetRecordList();
		int queryResGetTargetById_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetTargetById
			int datasetGetTargetById_maxRecords = 0;
			queryResGetTargetById_outParamList = FuncssPreparation.datasetGetTargetById(heContext, datasetGetTargetById_maxRecords, IterationMultiplicity.Never, out queryResGetTargetById_outParamCount, inParamTargetId
			);
			queryResGetTargetById_outParamList.CurrentRec.ssENTarget.ssOfferingCategory = inParamCategoryId; // GetTargetById.List.Current.Target.OfferingCategory = CategoryId
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamTargetId!=0)) {
				parameters.Add(new Pair<string, string>("TargetId", HttpUtility.UrlEncode(Convert.ToString(inParamTargetId), Request.ContentEncoding)));
			}
			if ((inParamCategoryId!=0)) {
				parameters.Add(new Pair<string, string>("CategoryId", HttpUtility.UrlEncode(Convert.ToString(inParamCategoryId), Request.ContentEncoding)));
			}
			if ((inParamStudentId!= "")) {
				parameters.Add(new Pair<string, string>("StudentId", HttpUtility.UrlEncode(inParamStudentId, Request.ContentEncoding)));
			}
			if ((inParamOfferingCode!= "")) {
				parameters.Add(new Pair<string, string>("OfferingCode", HttpUtility.UrlEncode(inParamOfferingCode, Request.ContentEncoding)));
			}
			if ((inParamOfferingName!= "")) {
				parameters.Add(new Pair<string, string>("OfferingName", HttpUtility.UrlEncode(inParamOfferingName, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Learner_ILP.Popup_Target", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Learner_ILP.Popup_Target", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance4 = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) FindControl("wt_WebBlockInstance4");
			wtButtonContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtButtonContainer");
			wt_Container51 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container51");
			wt_Container14 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container14");
			wt_Container52 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container52");
			wt_Container48 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container48");
			wtValidateAndSave = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wtValidateAndSave");
			if (this.wtValidateAndSave != null) {
				this.wtValidateAndSave.Click += new System.EventHandler(this.wtValidateAndSave_Click);
			}
			wt_Container19 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container19");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "RichWidgets_wt_WebBlockInstance2") {
				return wt_WebBlockInstance4.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance2");
			}
			if (id == "wt_Text25") {
				return wt_WebBlockInstance4.wtTitle.FindControl("wt_Text25");
			}
			if (id == "wtTargetEdit") {
				return wt_WebBlockInstance4.wtContent.FindControl("wtTargetEdit");
			}
			if (id == "wt_EditRecordRow38") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordRow38");
			}
			if (id == "wt_EditRecordCell41") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell41");
			}
			if (id == "wt_Text44") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Text44");
			}
			if (id == "wt_EditRecordCell10") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell10");
			}
			if (id == "wtTarget_OfferingCategory") {
				return wt_WebBlockInstance4.wtContent.FindControl("wtTarget_OfferingCategory");
			}
			if (id == "wt_EditRecordRow40") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordRow40");
			}
			if (id == "wt_EditRecordCell20") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell20");
			}
			if (id == "wt_Text53") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Text53");
			}
			if (id == "wt_EditRecordCell18") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell18");
			}
			if (id == "wtTarget_TargetTypeId") {
				return wt_WebBlockInstance4.wtContent.FindControl("wtTarget_TargetTypeId");
			}
			if (id == "wt_EditRecordRow45") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordRow45");
			}
			if (id == "wt_EditRecordCell8") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell8");
			}
			if (id == "wt_Text13") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Text13");
			}
			if (id == "wt_EditRecordCell43") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell43");
			}
			if (id == "wtTarget_TargetStatusId") {
				return wt_WebBlockInstance4.wtContent.FindControl("wtTarget_TargetStatusId");
			}
			if (id == "wt_EditRecordRow17") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordRow17");
			}
			if (id == "wt_EditRecordCell35") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell35");
			}
			if (id == "wt_Text49") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Text49");
			}
			if (id == "wt_EditRecordCell33") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell33");
			}
			if (id == "wtTarget_TargetDate") {
				return wt_WebBlockInstance4.wtContent.FindControl("wtTarget_TargetDate");
			}
			if (id == "RichWidgets_wt_WebBlockInstance6") {
				return wt_WebBlockInstance4.wtContent.FindControl("RichWidgets_wt_WebBlockInstance6");
			}
			if (id == "wt_EditRecordRow50") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordRow50");
			}
			if (id == "wt_EditRecordCell26") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell26");
			}
			if (id == "wt_Text54") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Text54");
			}
			if (id == "wt_EditRecordCell24") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell24");
			}
			if (id == "wtTarget_CompletionDate") {
				return wt_WebBlockInstance4.wtContent.FindControl("wtTarget_CompletionDate");
			}
			if (id == "RichWidgets_wt_WebBlockInstance36") {
				return wt_WebBlockInstance4.wtContent.FindControl("RichWidgets_wt_WebBlockInstance36");
			}
			if (id == "wt_EditRecordRow15") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordRow15");
			}
			if (id == "wt_EditRecordCell57") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell57");
			}
			if (id == "wt_Text55") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Text55");
			}
			if (id == "wt_EditRecordCell3") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell3");
			}
			if (id == "wtTarget_TargetHeader") {
				return wt_WebBlockInstance4.wtContent.FindControl("wtTarget_TargetHeader");
			}
			if (id == "wt_EditRecordRow37") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordRow37");
			}
			if (id == "wt_EditRecordCell7") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell7");
			}
			if (id == "wt_Text23") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Text23");
			}
			if (id == "wt_EditRecordCell58") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell58");
			}
			if (id == "wtTarget_TargetDescription") {
				return wt_WebBlockInstance4.wtContent.FindControl("wtTarget_TargetDescription");
			}
			if (id == "wt_EditRecordRow11") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordRow11");
			}
			if (id == "wt_EditRecordCell42") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell42");
			}
			if (id == "wt_EditRecordCell56") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_EditRecordCell56");
			}
			if (id == "wtButtonContainer") {
				return wt_WebBlockInstance4.wtContent.FindControl("wtButtonContainer");
			}
			if (id == "wt_Container51") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Container51");
			}
			if (id == "wt_Container14") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Container14");
			}
			if (id == "Hunspell_wt_WebBlockInstance47") {
				return wt_WebBlockInstance4.wtContent.FindControl("Hunspell_wt_WebBlockInstance47");
			}
			if (id == "wt_Container52") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Container52");
			}
			if (id == "wt_WebBlockInstance1") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_WebBlockInstance1");
			}
			if (id == "wt_Container48") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Container48");
			}
			if (id == "RichWidgets_wt_WebBlockInstance39") {
				return wt_WebBlockInstance4.wtContent.FindControl("RichWidgets_wt_WebBlockInstance39");
			}
			if (id == "wt_Text5") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Text5");
			}
			if (id == "wtValidateAndSave") {
				return wt_WebBlockInstance4.wtContent.FindControl("wtValidateAndSave");
			}
			if (id == "wt_Container19") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Container19");
			}
			if (id == "wt_Text46") {
				return wt_WebBlockInstance4.wtContent.FindControl("wt_Text46");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_Target"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamTargetId = (int) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamCategoryId = (int) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamStudentId = (string) paramValue;
							}
						}
						if (screenParameters.Count > 3) {
							object paramValue = screenParameters[3];
							if (paramValue != null) {
								inParamOfferingCode = (string) paramValue;
							}
						}
						if (screenParameters.Count > 4) {
							object paramValue = screenParameters[4];
							if (paramValue != null) {
								inParamOfferingName = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_Target"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["TargetId"] != null) {
						inParamTargetId = Convert.ToInt32(Request.QueryString["TargetId"]);
					}
					if (Request.QueryString["CategoryId"] != null) {
						inParamCategoryId = Convert.ToInt32(Request.QueryString["CategoryId"]);
					}
					if (Request.QueryString["StudentId"] != null) {
						inParamStudentId = Request.QueryString["StudentId"];
					}
					if (Request.QueryString["OfferingCode"] != null) {
						inParamOfferingCode = Request.QueryString["OfferingCode"];
					}
					if (Request.QueryString["OfferingName"] != null) {
						inParamOfferingName = Request.QueryString["OfferingName"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["TargetId"] != null) {
						inParamTargetId = Convert.ToInt32(Request.Form["TargetId"]);
					}
					if (Request.Form["CategoryId"] != null) {
						inParamCategoryId = Convert.ToInt32(Request.Form["CategoryId"]);
					}
					if (Request.Form["StudentId"] != null) {
						inParamStudentId = Request.Form["StudentId"];
					}
					if (Request.Form["OfferingCode"] != null) {
						inParamOfferingCode = Request.Form["OfferingCode"];
					}
					if (Request.Form["OfferingName"] != null) {
						inParamOfferingName = Request.Form["OfferingName"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtTargetEdit_onDataBindingDataSource(this.FindControl("wtTargetEdit"), null);
				}
				Title = "Popup Target"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_Target", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearner_ILP.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotSuperUser("SuperUser role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("tNW_PGuKF0yvcRl7BXr4Vg"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandOnClick</code> that represents the Service Studio screen action
		///  <code>OnClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Refresh Widget (wtButtonContainer)
				((OSPageViewState) Page).AjaxRefresh(wtButtonContainer, "None", StoreViewState);
				// RunJavaScript
				Actions.ActionRunJavaScript(heContext, (("document.getElementById(\'" +wtValidateAndSave.ClientID) + "\').click()"));
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandClose</code> that represents the Service Studio screen action
		///  <code>Close</code> <p> Description: </p>
		/// </summary>
		private bool CommandClose(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSave: VarsBag {
			public int resStudentLog_Create_outParamStudentLogId = 0;

			public int resCreateOrUpdateTarget_outParamId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				if (wtTargetEdit_Valid()) {
					if ((inParamTargetId==BuiltInFunction.NullIdentifier())) {
						ssTargetEditRecord.ssENTarget.ssStudentReference = inParamStudentId; // TargetEdit.Record.Target.StudentReference = StudentId
						ssTargetEditRecord.ssENTarget.ssOfferingCode = inParamOfferingCode; // TargetEdit.Record.Target.OfferingCode = OfferingCode
						ssTargetEditRecord.ssENTarget.ssOfferingName = inParamOfferingName; // TargetEdit.Record.Target.OfferingName = OfferingName
						ssTargetEditRecord.ssENTarget.ssCreatedAt = BuiltInFunction.CurrDateTime(); // TargetEdit.Record.Target.CreatedAt = CurrDateTime
						ssTargetEditRecord.ssENTarget.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // TargetEdit.Record.Target.CreatedBy = UserID

					}
					inParamCategoryId = ssTargetEditRecord.ssENTarget.ssOfferingCategory; // CategoryId = TargetEdit.Record.Target.OfferingCategory
					// CreateOrUpdateTarget
					ExtendedActions.CreateOrUpdateTarget(heContext, ssTargetEditRecord.ChangedAttributes, ssTargetEditRecord, out localVars.resCreateOrUpdateTarget_outParamId);
					// StudentLog_Create
					Actions.ActionStudentLog_Create(heContext, inParamStudentId, ((int) Global.App.OsContext.Session["UserID"]), ((("Target (" +Functions.ssGetCategory(heContext, inParamCategoryId).ssENCategory.ssLabel) + ") ") + (((inParamTargetId==BuiltInFunction.NullIdentifier())) ?("created"):("edited"))), ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("6zvt4MEsuUGcFkcAw6pWSw")).ssLogType, ((((("Category - (" +Functions.ssGetCategory(heContext, inParamCategoryId).ssENCategory.ssLabel) + ") ") + (((inParamTargetId==BuiltInFunction.NullIdentifier())) ?("created"):("edited"))) + " ") +ssTargetEditRecord.ssENTarget.ssTargetDescription), BuiltInFunction.NullTextIdentifier(), false, 0, "Target", "", 0, 0, "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
					// Popup_Editor_Notify
					Actions.ActionPopup_Editor_Notify(heContext, "OK");
					// Popup_Editor_Close
					Actions.ActionPopup_Editor_Close(heContext);
					// Update Screen
					return true;

				} else {
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_WebBlockInstance4 Functions
		/// </summary>
		public void webBlck_WebBlockInstance4_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) sender;
			widget.inParamWidth = 550;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance2 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance2_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("44eRkHEjakqGaX+TzsJESA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtTargetEdit Functions
		/// </summary>
		public void wtTargetEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack) {
				ssTargetEditRecord = queryResGetTargetById_outParamList.CurrentRec;
			}
		}
		/// <summary>
		/// wtTarget_OfferingCategory Functions
		/// </summary>
		public void selTarget_OfferingCategory_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtTarget_OfferingCategory_reclist == null) {
				using(Transaction wtTarget_OfferingCategory_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtTarget_OfferingCategory_sql = "SELECT [ID], [LABEL], NULL, NULL, NULL FROM " + ENCategoryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtTarget_OfferingCategory_sqlCmd = wtTarget_OfferingCategory_trans.CreateCommand(wtTarget_OfferingCategory_sql);
					Rt_wtTarget_OfferingCategory_sqlCmd.CreateParameter("@Selection", ssTargetEditRecord.ssENTarget.ssOfferingCategory);
					Rt_wtTarget_OfferingCategory_sqlCmd.TransformParametersSyntax();
					Rt_wtTarget_OfferingCategory_reclist = new RLCategoryRecordList();
					Rt_wtTarget_OfferingCategory_reclist.Transaction = wtTarget_OfferingCategory_trans;
					Rt_wtTarget_OfferingCategory_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(5, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtTarget_OfferingCategory_sqlCmd, Rt_wtTarget_OfferingCategory_reclist, "WebSelectWidget load operation");
					Rt_wtTarget_OfferingCategory_reclist = (RLCategoryRecordList) Rt_wtTarget_OfferingCategory_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtTarget_OfferingCategory.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtTarget_OfferingCategory_reclist.StartIteration();
			try {
				while (!Rt_wtTarget_OfferingCategory_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtTarget_OfferingCategory_reclist.CurrentRec.ssENCategory.ssLabel, Convert.ToString(Rt_wtTarget_OfferingCategory_reclist.CurrentRec.ssENCategory.ssId)));
					if (ssTargetEditRecord.ssENTarget.ssOfferingCategory == Convert.ToInt32(Convert.ToString(Rt_wtTarget_OfferingCategory_reclist.CurrentRec.ssENCategory.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtTarget_OfferingCategory_reclist.Advance();
				}
			} finally {
				Rt_wtTarget_OfferingCategory_reclist.EndIteration();
			}
		}
		public void selTarget_OfferingCategory_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtTarget_OfferingCategory.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssTargetEditRecord.ssENTarget.ssOfferingCategory = 0;
			}
			else {
				Rt_wtTarget_OfferingCategory.SpecialListVal = "";
				try {
					ssTargetEditRecord.ssENTarget.ssOfferingCategory = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_OfferingCategory)
		/// </summary>
		/// <returns>The Visible State of wtTarget_OfferingCategory</returns>
		public bool selTarget_OfferingCategory_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_OfferingCategory)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_OfferingCategory</returns>
		public bool selTarget_OfferingCategory_isEnabled() {
			return (((ssTargetEditRecord.ssENTarget.ssOfferingCategory==BuiltInFunction.NullIdentifier())) ?(true):(false)); 
		}

		/// <summary>
		/// Gets the mandatory value of component (selTarget_OfferingCategory)
		/// </summary>
		/// <returns>The Mandatory Value of selTarget_OfferingCategory</returns>
		public bool selTarget_OfferingCategory_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtTarget_TargetTypeId Functions
		/// </summary>
		public void selTarget_TargetTypeId_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtTarget_TargetTypeId_reclist == null) {
				using(Transaction wtTarget_TargetTypeId_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtTarget_TargetTypeId_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENTargetTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtTarget_TargetTypeId_sqlCmd = wtTarget_TargetTypeId_trans.CreateCommand(wtTarget_TargetTypeId_sql);
					Rt_wtTarget_TargetTypeId_sqlCmd.CreateParameter("@Selection", ssTargetEditRecord.ssENTarget.ssTargetTypeId);
					Rt_wtTarget_TargetTypeId_sqlCmd.TransformParametersSyntax();
					Rt_wtTarget_TargetTypeId_reclist = new RLTargetTypeRecordList();
					Rt_wtTarget_TargetTypeId_reclist.Transaction = wtTarget_TargetTypeId_trans;
					Rt_wtTarget_TargetTypeId_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(4, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtTarget_TargetTypeId_sqlCmd, Rt_wtTarget_TargetTypeId_reclist, "WebSelectWidget load operation");
					Rt_wtTarget_TargetTypeId_reclist = (RLTargetTypeRecordList) Rt_wtTarget_TargetTypeId_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtTarget_TargetTypeId.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtTarget_TargetTypeId_reclist.StartIteration();
			try {
				while (!Rt_wtTarget_TargetTypeId_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtTarget_TargetTypeId_reclist.CurrentRec.ssENTargetType.ssLabel, Convert.ToString(Rt_wtTarget_TargetTypeId_reclist.CurrentRec.ssENTargetType.ssId)));
					if (ssTargetEditRecord.ssENTarget.ssTargetTypeId == Convert.ToInt32(Convert.ToString(Rt_wtTarget_TargetTypeId_reclist.CurrentRec.ssENTargetType.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtTarget_TargetTypeId_reclist.Advance();
				}
			} finally {
				Rt_wtTarget_TargetTypeId_reclist.EndIteration();
			}
		}
		public void selTarget_TargetTypeId_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtTarget_TargetTypeId.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssTargetEditRecord.ssENTarget.ssTargetTypeId = 0;
			}
			else {
				Rt_wtTarget_TargetTypeId.SpecialListVal = "";
				try {
					ssTargetEditRecord.ssENTarget.ssTargetTypeId = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_TargetTypeId)
		/// </summary>
		/// <returns>The Visible State of wtTarget_TargetTypeId</returns>
		public bool selTarget_TargetTypeId_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_TargetTypeId)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_TargetTypeId</returns>
		public bool selTarget_TargetTypeId_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selTarget_TargetTypeId)
		/// </summary>
		/// <returns>The Mandatory Value of selTarget_TargetTypeId</returns>
		public bool selTarget_TargetTypeId_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtTarget_TargetStatusId Functions
		/// </summary>
		public void selTarget_TargetStatusId_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtTarget_TargetStatusId_reclist == null) {
				using(Transaction wtTarget_TargetStatusId_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtTarget_TargetStatusId_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENTargetStatusEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtTarget_TargetStatusId_sqlCmd = wtTarget_TargetStatusId_trans.CreateCommand(wtTarget_TargetStatusId_sql);
					Rt_wtTarget_TargetStatusId_sqlCmd.CreateParameter("@Selection", ssTargetEditRecord.ssENTarget.ssTargetStatusId);
					Rt_wtTarget_TargetStatusId_sqlCmd.TransformParametersSyntax();
					Rt_wtTarget_TargetStatusId_reclist = new RLTargetStatusRecordList();
					Rt_wtTarget_TargetStatusId_reclist.Transaction = wtTarget_TargetStatusId_trans;
					Rt_wtTarget_TargetStatusId_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(4, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtTarget_TargetStatusId_sqlCmd, Rt_wtTarget_TargetStatusId_reclist, "WebSelectWidget load operation");
					Rt_wtTarget_TargetStatusId_reclist = (RLTargetStatusRecordList) Rt_wtTarget_TargetStatusId_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtTarget_TargetStatusId.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtTarget_TargetStatusId_reclist.StartIteration();
			try {
				while (!Rt_wtTarget_TargetStatusId_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtTarget_TargetStatusId_reclist.CurrentRec.ssENTargetStatus.ssLabel, Convert.ToString(Rt_wtTarget_TargetStatusId_reclist.CurrentRec.ssENTargetStatus.ssId)));
					if (ssTargetEditRecord.ssENTarget.ssTargetStatusId == Convert.ToInt32(Convert.ToString(Rt_wtTarget_TargetStatusId_reclist.CurrentRec.ssENTargetStatus.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtTarget_TargetStatusId_reclist.Advance();
				}
			} finally {
				Rt_wtTarget_TargetStatusId_reclist.EndIteration();
			}
		}
		public void selTarget_TargetStatusId_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtTarget_TargetStatusId.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssTargetEditRecord.ssENTarget.ssTargetStatusId = 0;
			}
			else {
				Rt_wtTarget_TargetStatusId.SpecialListVal = "";
				try {
					ssTargetEditRecord.ssENTarget.ssTargetStatusId = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_TargetStatusId)
		/// </summary>
		/// <returns>The Visible State of wtTarget_TargetStatusId</returns>
		public bool selTarget_TargetStatusId_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_TargetStatusId)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_TargetStatusId</returns>
		public bool selTarget_TargetStatusId_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selTarget_TargetStatusId)
		/// </summary>
		/// <returns>The Mandatory Value of selTarget_TargetStatusId</returns>
		public bool selTarget_TargetStatusId_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtTarget_TargetDate Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtTarget_TargetDate_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=ssTargetEditRecord.ssENTarget.ssTargetDate)) {
				return ssTargetEditRecord.ssENTarget.ssTargetDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtTarget_TargetDate");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==ssTargetEditRecord.ssENTarget.ssTargetDate)) {
						return "";
					}
					return ssTargetEditRecord.ssENTarget.ssTargetDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtTarget_TargetDate_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssTargetEditRecord.ssENTarget.ssTargetDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					ssTargetEditRecord.ssENTarget.ssTargetDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDate(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssTargetEditRecord.ssENTarget.ssTargetDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_TargetDate)
		/// </summary>
		/// <returns>The Visible State of wtTarget_TargetDate</returns>
		public bool inputwtTarget_TargetDate_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_TargetDate)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_TargetDate</returns>
		public bool inputwtTarget_TargetDate_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtTarget_TargetDate)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtTarget_TargetDate</returns>
		public bool inputwtTarget_TargetDate_isMandatory() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance6 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance6_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
			widget.inParamInputWidgetId = this.FindControl("wtTarget_TargetDate").ClientID;
			widget.inParamMinYear = -1;
			widget.inParamMaxYear = -1;
			widget.inParamAlign = "Bl";
			widget.inParamSingleClick = true;
			widget.inParamShowWeekNumbers = false;
			widget.inParamUpdateOnCloseOnly = false;
			widget.inParamShowOthers = false;
			widget.inParamFirstDay = 0;
			widget.inParamShowTime = false;
			widget.inParamShow24HourFormat = true;
			widget.inParamReuseCalendarObject = false;
			widget.inParamInitialDate = new DateTime(1900, 1, 1, 0, 0, 0);
			widget.inParamDateFormat = "";
			widget.inParamSpecialDays = "";
			widget.inParamOnUpdate = "";
			widget.inParamFlatStyle = false;
			widget.inParamButtonWidgetId = "";
			widget.inParamYearStep = 2;
		}
		/// <summary>
		/// wtTarget_CompletionDate Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtTarget_CompletionDate_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=ssTargetEditRecord.ssENTarget.ssCompletionDate)) {
				return ssTargetEditRecord.ssENTarget.ssCompletionDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtTarget_CompletionDate");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==ssTargetEditRecord.ssENTarget.ssCompletionDate)) {
						return "";
					}
					return ssTargetEditRecord.ssENTarget.ssCompletionDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtTarget_CompletionDate_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssTargetEditRecord.ssENTarget.ssCompletionDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					ssTargetEditRecord.ssENTarget.ssCompletionDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDate(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssTargetEditRecord.ssENTarget.ssCompletionDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_CompletionDate)
		/// </summary>
		/// <returns>The Visible State of wtTarget_CompletionDate</returns>
		public bool inputwtTarget_CompletionDate_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_CompletionDate)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_CompletionDate</returns>
		public bool inputwtTarget_CompletionDate_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtTarget_CompletionDate)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtTarget_CompletionDate</returns>
		public bool inputwtTarget_CompletionDate_isMandatory() {
			return false;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance36 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance36_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
			widget.inParamInputWidgetId = this.FindControl("wtTarget_CompletionDate").ClientID;
			widget.inParamMinYear = -1;
			widget.inParamMaxYear = -1;
			widget.inParamAlign = "Bl";
			widget.inParamSingleClick = true;
			widget.inParamShowWeekNumbers = false;
			widget.inParamUpdateOnCloseOnly = false;
			widget.inParamShowOthers = false;
			widget.inParamFirstDay = 0;
			widget.inParamShowTime = false;
			widget.inParamShow24HourFormat = true;
			widget.inParamReuseCalendarObject = false;
			widget.inParamInitialDate = new DateTime(1900, 1, 1, 0, 0, 0);
			widget.inParamDateFormat = "";
			widget.inParamSpecialDays = "";
			widget.inParamOnUpdate = "";
			widget.inParamFlatStyle = false;
			widget.inParamButtonWidgetId = "";
			widget.inParamYearStep = 2;
		}
		/// <summary>
		/// wtTarget_TargetHeader Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtTarget_TargetHeader_input_value() {
			if (("" !=ssTargetEditRecord.ssENTarget.ssTargetHeader)) {
				return ssTargetEditRecord.ssENTarget.ssTargetHeader;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtTarget_TargetHeader");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssTargetEditRecord.ssENTarget.ssTargetHeader;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtTarget_TargetHeader_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssTargetEditRecord.ssENTarget.ssTargetHeader = ""; 
				} else {
					ssTargetEditRecord.ssENTarget.ssTargetHeader = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssTargetEditRecord.ssENTarget.ssTargetHeader = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_TargetHeader)
		/// </summary>
		/// <returns>The Visible State of wtTarget_TargetHeader</returns>
		public bool inputwtTarget_TargetHeader_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_TargetHeader)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_TargetHeader</returns>
		public bool inputwtTarget_TargetHeader_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtTarget_TargetHeader)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtTarget_TargetHeader</returns>
		public bool inputwtTarget_TargetHeader_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtTarget_TargetDescription Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtTarget_TargetDescription_input_value() {
			if (("" !=ssTargetEditRecord.ssENTarget.ssTargetDescription)) {
				return ssTargetEditRecord.ssENTarget.ssTargetDescription;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtTarget_TargetDescription");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssTargetEditRecord.ssENTarget.ssTargetDescription;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtTarget_TargetDescription_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssTargetEditRecord.ssENTarget.ssTargetDescription = ""; 
				} else {
					ssTargetEditRecord.ssENTarget.ssTargetDescription = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssTargetEditRecord.ssENTarget.ssTargetDescription = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtTarget_TargetDescription)
		/// </summary>
		/// <returns>The Visible State of wtTarget_TargetDescription</returns>
		public bool inputwtTarget_TargetDescription_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTarget_TargetDescription)
		/// </summary>
		/// <returns>The Enabled State of wtTarget_TargetDescription</returns>
		public bool inputwtTarget_TargetDescription_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtTarget_TargetDescription)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtTarget_TargetDescription</returns>
		public bool inputwtTarget_TargetDescription_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtButtonContainer Functions
		/// </summary>
		public void cntButtonContainer_onDataBinding(object sender, System.EventArgs e) {
			cntButtonContainer_setInlineAttributes(sender, e);
		}
		public string cntButtonContainer_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntButtonContainer_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtButtonContainer)
		/// </summary>
		/// <returns>The Visible State of wtButtonContainer</returns>
		public bool cntButtonContainer_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container51 Functions
		/// </summary>
		public void cnt_Container51_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container51_setInlineAttributes(sender, e);
		}
		public string cnt_Container51_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container51_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container51)
		/// </summary>
		/// <returns>The Visible State of wt_Container51</returns>
		public bool cnt_Container51_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container14 Functions
		/// </summary>
		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container14_setInlineAttributes(sender, e);
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container14_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			return true;
		}

		/// <summary>
		/// Hunspell_wt_WebBlockInstance47 Functions
		/// </summary>
		public void Hunspell_webBlck_WebBlockInstance47_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
			widget.inParamTextInputId = this.FindControl("wtTarget_TargetDescription").ClientID;
			widget.inParamExtraStyle = "";
			widget.inParamInPopupWindow = true;
		}
		/// <summary>
		/// wt_Container52 Functions
		/// </summary>
		public void cnt_Container52_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container52_setInlineAttributes(sender, e);
		}
		public string cnt_Container52_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container52_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container52)
		/// </summary>
		/// <returns>The Visible State of wt_Container52</returns>
		public bool cnt_Container52_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance1 Functions
		/// </summary>
		public void webBlck_WebBlockInstance1_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon widget = (ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon) sender;
			widget.inParamTextInputId = this.FindControl("wtTarget_TargetDescription").ClientID;
			widget.inParamAutoCompleteType = ENAutoCompleteBankTypeEntity.GetRecordByKey(ObjectKey.Parse("o+gvUEOa2EeKiI_XwS6j3A")).ssId;
		}
		/// <summary>
		/// wt_Container48 Functions
		/// </summary>
		public void cnt_Container48_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container48_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container48_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container48_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container48
		/// </summary>
		public void cnt_Container48_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnClick(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container48)
		/// </summary>
		/// <returns>The Visible State of wt_Container48</returns>
		public bool cnt_Container48_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance39 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance39_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtValidateAndSave Functions
		/// </summary>
		public void btnValidateAndSave_onDataBinding(object sender, System.EventArgs e) {
			btnValidateAndSave_setInlineAttributes(sender, e);
		}
		public string btnValidateAndSave_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "display:none;";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtValidateAndSave_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandSave(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wtValidateAndSave)
		/// </summary>
		/// <returns>Label of the Button (wtValidateAndSave)</returns>
		public string
		btnValidateAndSave_getLabel() {
			return "Save";
		}
		/// <summary>
		/// Gets the visible state of component (wtValidateAndSave)
		/// </summary>
		/// <returns>The Visible State of wtValidateAndSave</returns>
		public bool btnValidateAndSave_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtValidateAndSave)
		/// </summary>
		/// <returns>The Enabled State of wtValidateAndSave</returns>
		public bool btnValidateAndSave_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container19 Functions
		/// </summary>
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container19_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container19_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container19
		/// </summary>
		public void cnt_Container19_AjaxClick(object sender, System.EventArgs e) {
			if (CommandClose(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			return true;
		}



		public static class FuncCommandOnClick {
		}
		public static class FuncCommandClose {
		}
		public static class FuncCommandSave {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetTargetById" of Action "Preparation"
			/// </summary>
			public static RLTargetRecordList datasetGetTargetById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENTarget.[ID] o1, ENTarget.[STUDENTREFERENCE] o2, ENTarget.[OFFERINGCODE] o3, ENTarget.[OFFERINGNAME] o4, ENTarget.[TARGETTYPEID] o5, ENTarget.[TARGETHEADER] o6, ENTarget.[TARGETDESCRIPTION] o7, ENTarget.[TARGETSTATUSID] o8, ENTarget.[COMPLETIONDATE] o9, ENTarget.[TARGETDATE] o10, ENTarget.[OFFERINGCATEGORY] o11, NULL o12, ENTarget.[CREATEDBY] o13, ENTarget.[CREATEDAT] o14, NULL o15, NULL o16, NULL o17");
				fromBuilder.Append(" FROM {Target} ENTarget");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENTarget.[ID] = @qpinP) AND (ENTarget.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENTarget.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLTargetRecordList outParamList = new RLTargetRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLTargetRecordList _tmp = new RLTargetRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.Popup_Target.Preparation.GetTargetById.List");
						outParamList = (RLTargetRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.Popup_Target.Preparation.GetTargetById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLTargetRecordList _tmp = new RLTargetRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.Popup_Target.Preparation.GetTargetById.List");
							outParamList = (RLTargetRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.Popup_Target.Preparation.GetTargetById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Popup Target"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_Target", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_Target", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamTargetId", inParamTargetId, 0);
			ViewStateAttributes.SetInViewState("inParamCategoryId", inParamCategoryId, 0);
			ViewStateAttributes.SetInViewState("inParamStudentId", inParamStudentId, "");
			ViewStateAttributes.SetInViewState("inParamOfferingCode", inParamOfferingCode, "");
			ViewStateAttributes.SetInViewState("inParamOfferingName", inParamOfferingName, "");
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssId", ssTargetEditRecord.ssENTarget.ssId, 0);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssStudentReference", ssTargetEditRecord.ssENTarget.ssStudentReference, "");
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssOfferingCode", ssTargetEditRecord.ssENTarget.ssOfferingCode, "");
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssOfferingName", ssTargetEditRecord.ssENTarget.ssOfferingName, "");
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssTargetTypeId", ssTargetEditRecord.ssENTarget.ssTargetTypeId, 0);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssTargetHeader", ssTargetEditRecord.ssENTarget.ssTargetHeader, "");
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssTargetDescription", ssTargetEditRecord.ssENTarget.ssTargetDescription, "");
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssTargetStatusId", ssTargetEditRecord.ssENTarget.ssTargetStatusId, 0);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssCompletionDate", ssTargetEditRecord.ssENTarget.ssCompletionDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssTargetDate", ssTargetEditRecord.ssENTarget.ssTargetDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssOfferingCategory", ssTargetEditRecord.ssENTarget.ssOfferingCategory, 0);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssCreatedBy", ssTargetEditRecord.ssENTarget.ssCreatedBy, 0);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ssCreatedAt", ssTargetEditRecord.ssENTarget.ssCreatedAt, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssTargetEditRecord.ssENTarget.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtTargetEdit_record_ssENTarget_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssTargetEditRecord.ssENTarget.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtTarget_OfferingCategory_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_OfferingCategory")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_TargetTypeId_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetTypeId")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_TargetStatusId_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetStatusId")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_TargetDate_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetDate")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_CompletionDate_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_CompletionDate")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_TargetHeader_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetHeader")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtTarget_TargetDescription_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetDescription")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamTargetId = (int) ViewStateAttributes.GetFromViewState("inParamTargetId", 0);
				inParamCategoryId = (int) ViewStateAttributes.GetFromViewState("inParamCategoryId", 0);
				inParamStudentId = (string) ViewStateAttributes.GetFromViewState("inParamStudentId", "");
				inParamOfferingCode = (string) ViewStateAttributes.GetFromViewState("inParamOfferingCode", "");
				inParamOfferingName = (string) ViewStateAttributes.GetFromViewState("inParamOfferingName", "");
				ssTargetEditRecord.ssENTarget.ssId = (int) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssId", 0);
				ssTargetEditRecord.ssENTarget.ssStudentReference = (string) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssStudentReference", "");
				ssTargetEditRecord.ssENTarget.ssOfferingCode = (string) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssOfferingCode", "");
				ssTargetEditRecord.ssENTarget.ssOfferingName = (string) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssOfferingName", "");
				ssTargetEditRecord.ssENTarget.ssTargetTypeId = (int) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssTargetTypeId", 0);
				ssTargetEditRecord.ssENTarget.ssTargetHeader = (string) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssTargetHeader", "");
				ssTargetEditRecord.ssENTarget.ssTargetDescription = (string) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssTargetDescription", "");
				ssTargetEditRecord.ssENTarget.ssTargetStatusId = (int) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssTargetStatusId", 0);
				ssTargetEditRecord.ssENTarget.ssCompletionDate = (DateTime) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssCompletionDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssTargetEditRecord.ssENTarget.ssTargetDate = (DateTime) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssTargetDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssTargetEditRecord.ssENTarget.ssOfferingCategory = (int) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssOfferingCategory", 0);
				ssTargetEditRecord.ssENTarget.ssCreatedBy = (int) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssCreatedBy", 0);
				ssTargetEditRecord.ssENTarget.ssCreatedAt = (DateTime) ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ssCreatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
				ssTargetEditRecord.ssENTarget.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_ChangedAttributes", null));
				ssTargetEditRecord.ssENTarget.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtTargetEdit_record_ssENTarget_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_OfferingCategory")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_OfferingCategory_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetTypeId")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_TargetTypeId_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetStatusId")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_TargetStatusId_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetDate")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_TargetDate_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_CompletionDate")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_CompletionDate_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetHeader")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_TargetHeader_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtTarget_TargetDescription")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtTarget_TargetDescription_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wtTarget_OfferingCategory", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wtTarget_TargetTypeId", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wtTarget_TargetStatusId", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtTarget_TargetDate", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate);
			ValidationUtils.ValidateInput(this, "wtTarget_CompletionDate", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate);
			ValidationUtils.ValidateInput(this, "wtTarget_TargetHeader", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtTarget_TargetDescription", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
