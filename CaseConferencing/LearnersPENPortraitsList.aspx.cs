/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearners {

	public class ScrnLearnersPENPortraitsList: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnLearnersPENPortraitsList(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance25
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance25;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		private RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList _ssLearnerListList = new RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList();
		public RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList ssLearnerListList {
			get {
				return _ssLearnerListList; 
			}
			set {
				_ssLearnerListList = value;
				wtLearnerList.DataSource = value;
				ssLearnerListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtLearnerList;
		public ArrayList wtLearnerList_storage = new ArrayList();
		protected bool ssLearnerListList_notUsedYet = true;
		protected bool ssLearnerListListDoDataBind;
		protected bool ssLearnerListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		/// <summary>
		/// Variable (wtListCourseClassEnrolments) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtListCourseClassEnrolments;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_InfoBalloon.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("QR4G3JmraU+y72BdsipgMg", "LearnersPENPortraitsList");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "QR4G3JmraU+y72BdsipgMg", "LearnersPENPortraitsList");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "QR4G3JmraU+y72BdsipgMg", "LearnersPENPortraitsList");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "QR4G3JmraU+y72BdsipgMg", "LearnersPENPortraitsList");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "QR4G3JmraU+y72BdsipgMg", "LearnersPENPortraitsList");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnLearnersPENPortraitsList() {
		}


		RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = new RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList();
		int queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetStudentPENPortraitsWithOrWithoutUsers
			int datasetGetStudentPENPortraitsWithOrWithoutUsers_maxRecords = Math.Max(wtLearnerList.StartIndex + wtLearnerList.LineCount + 1, 0);
			queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = FuncssPreparation.datasetGetStudentPENPortraitsWithOrWithoutUsers(heContext, datasetGetStudentPENPortraitsWithOrWithoutUsers_maxRecords, IterationMultiplicity.Single, out queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamCount, inParamCourseCode
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamCourseCode!= "")) {
				parameters.Add(new Pair<string, string>("CourseCode", HttpUtility.UrlEncode(inParamCourseCode, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnersPENPortraitsList", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnersPENPortraitsList", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance25 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance25");
			wt_Container14 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container14");
			wt_Container30 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container30");
			wt_Container7 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container7");
			wtLearnerList = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtLearnerList");
			wtLearnerList.StartIndexExpression = () => 0;
			wtLearnerList.LineCountExpression = () => 50;
			wtLearnerList.EmptyMessageExpression = () => "No items to show...";
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "ThemeProvider_wt_WebBlockInstance11") {
				return ThemeProvider_wt_WebBlockInstance25.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance11");
			}
			if (id == "wt_Text26") {
				return ThemeProvider_wt_WebBlockInstance25.wtTitle.FindControl("wt_Text26");
			}
			if (id == "wt_InlineExpression12") {
				return ThemeProvider_wt_WebBlockInstance25.wtTitle.FindControl("wt_InlineExpression12");
			}
			if (id == "wt_Container14") {
				return ThemeProvider_wt_WebBlockInstance25.wtMainContent.FindControl("wt_Container14");
			}
			if (id == "wt_Container30") {
				return ThemeProvider_wt_WebBlockInstance25.wtMainContent.FindControl("wt_Container30");
			}
			if (id == "wt_Text4") {
				return ThemeProvider_wt_WebBlockInstance25.wtMainContent.FindControl("wt_Text4");
			}
			if (id == "wt_Container7") {
				return ThemeProvider_wt_WebBlockInstance25.wtMainContent.FindControl("wt_Container7");
			}
			if (id == "wt_Text18") {
				return ThemeProvider_wt_WebBlockInstance25.wtMainContent.FindControl("wt_Text18");
			}
			if (id == "wtLearnerList") {
				return ThemeProvider_wt_WebBlockInstance25.wtMainContent.FindControl("wtLearnerList");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnersPENPortraitsList"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamCourseCode = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnersPENPortraitsList"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["CourseCode"] != null) {
						inParamCourseCode = Request.QueryString["CourseCode"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["CourseCode"] != null) {
						inParamCourseCode = Request.Form["CourseCode"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssLearnerListListDoDataBind = true;
				Title = "LearnersPENPortraitsList"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnersPENPortraitsList", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearners.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotSafeGuardingLead("SafeGuardingLead role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("QR4G3JmraU+y72BdsipgMg"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandOnLearnerClick</code> that represents the Service Studio screen action
		///  <code>OnLearnerClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnLearnerClick(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Destination = LearnerDetailsOverview

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "Ll6e8OlyEUirEGk6MODdUA";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add(getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference);
						screenParameters.Add(0);
						screenParameters.Add("");
						screenParameters.Add(true);
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailsOverview"] = screenParameters;
						string sURLQuery = "StudentReference=" + System.Web.HttpUtility.UrlEncode(getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference) + "&" +
						 "FromLearnerList=" + System.Web.HttpUtility.UrlEncode("True");
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "LearnerDetailsOverview.aspx" + sURLQuery;
						((OSPageViewState) Page).RedirectLocation = sURL;
						return false;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "Ll6e8OlyEUirEGk6MODdUA";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add(getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference);
						screenParameters.Add(0);
						screenParameters.Add("");
						screenParameters.Add(true);
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailsOverview"] = screenParameters;
						Server.Transfer("LearnerDetailsOverview.aspx");
						return false;

					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance25 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance25_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance11 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance11_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("7qeG0AIy00KFvJsqdEaGOg")).ssId;
		}
		/// <summary>
		/// wt_InlineExpression12 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = ygnJUluohk64M9_GR0a+Jw) Expression: CourseCode
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression12() {
			return inParamCourseCode;
		}
		/// <summary>
		/// wt_Container14 Functions
		/// </summary>
		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container14_setInlineAttributes(sender, e);
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container14_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container30 Functions
		/// </summary>
		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container30_setInlineAttributes(sender, e);
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container30_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container7 Functions
		/// </summary>
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container7_setInlineAttributes(sender, e);
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container7_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			return true;
		}

		/// <summary>
		/// wtLearnerList Functions
		/// </summary>
		public void recListLearnerList_onDataBinding(object sender, System.EventArgs e) {
			// widget wtLearnerList
			ssLearnerListList = queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList;
			ssLearnerListListDoDataBind = false;
			ssLearnerListListDataBound = true;
		}
		public void recListLearnerList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssLearnerListList.Length > 0) {
					ssLearnerListList.CurrentRec = ssLearnerListList[ssLearnerListList.CurrentRowNumber];
				}
				if (ssLearnerListList.Length > e.SelectedIndex) {
					ssLearnerListList.CurrentRec = ssLearnerListList[e.SelectedIndex];
					ssLearnerListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListLearnerList_Store(object dataItem, int index) {
			RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord tmprec = (RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENStudent.ssStudentReference == "" ?(object) null: tmprec.ssENStudent.ssStudentReference);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENStudent.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENStudent.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			if (index < wtLearnerList_storage.Count) {
				wtLearnerList_storage[index] = tmpFields;
			} else {
				wtLearnerList_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListLearnerList_Restore() {

			#region fetch ssLearnerListList.

			// Read the needed fields of ssLearnerListList from storewtLearnerList_list
			ssLearnerListList = new RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList();
			ArrayList storewtLearnerList_list;
			storewtLearnerList_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtLearnerList_list", null);
			if (storewtLearnerList_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtLearnerList_list in storewtLearnerList_list) {
					if (tmpFieldswtLearnerList_list != null) {
						// Aux current record variable
						RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord tmpAuxCurrentRecordwtLearnerList_list = new RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord(null);
						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssStudentReference = (string) (tmpFieldswtLearnerList_list[0] == null ? "": tmpFieldswtLearnerList_list[0]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list[1]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list[2]);

						ssLearnerListList.Append(tmpAuxCurrentRecordwtLearnerList_list);
					}
				}
			}
			ssLearnerListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssLearnerListList runtime properties state.


			if (storewtLearnerList_list.Count > 0) {
				ssLearnerListList.RestoreRecordListState(storewtLearnerList_list.Count - 1, false);
			} else {
				ssLearnerListList.CurrentRowNumber = 0;
			}

			#endregion

			wtLearnerList_storage = storewtLearnerList_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListLearnerList_Clear(object sender, EventArgs e) {
			wtLearnerList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListLearnerList_Rebuild(int startIndex, int lineCount) {
			if (ssLearnerListList.Length != -1) {
				wtLearnerList_storage.Clear();
				for (int i=startIndex; i<ssLearnerListList.Data.Count && i<startIndex+lineCount; i++) {
					recListLearnerList_Store(ssLearnerListList.Data[i], wtLearnerList_storage.Count);
				}
			}
		}
		public void recListLearnerList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtLearnerList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList getWtLearnerListList() {
			if (ssLearnerListListDoDataBind) {
				recListLearnerList_onDataBinding(this, null);
			}

			return ssLearnerListList;
		}
		/// <summary>
		/// wt_Container13 Functions
		/// </summary>
		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container13_setInlineAttributes(sender, e);
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = (("border-color: " + (((getWtLearnerListList().CurrentRec.ssENStudentRAG.ssRAG==BuiltInFunction.NullTextIdentifier())) ?("#DADADA"):(Functions.ssGetRAGStatus(heContext, getWtLearnerListList().CurrentRec.ssENStudentRAG.ssRAG).ssENRAGStatus.ssHexColor))) + ";position:relative");
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container13_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container3 Functions
		/// </summary>
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container3_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container3
		/// </summary>
		public void cnt_Container3_AjaxClick(object sender, System.EventArgs e) {
			if (CommandOnLearnerClick(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container19 Functions
		/// </summary>
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container19_setInlineAttributes(sender, e);
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container19_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Image21 Functions
		/// </summary>
		public void img_Image21_onDataBinding(object sender, System.EventArgs e) {
			img_Image21_setInlineAttributes(sender, e);
		}
		public string img_Image21_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("onerror", "this.src=\'img/missingphoto.png\';" .ToString());
			((WebControl) sender).CssClass = ((getWtLearnerListList().CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?("StudentPhoto SilverBorder"):("StudentPhoto SilverBorder BlackAndWhiteFilter"));
			return "";
		}

		/// <summary>
		/// Gets the URL of the image (wt_Image21)
		/// </summary>
		/// <returns>URL of the Image (wt_Image21)</returns>
		public string img_Image21_getURL() {
			string url = getWtLearnerListList().CurrentRec.ssENStudent.ssStudentPhotoURL;
			url = url.Replace("&amp;", "&");
			return url; 
		}
		/// <summary>
		/// wtListCourseClassEnrolments Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtListCourseClassEnrolments)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtListCourseClassEnrolments)</returns>
		public string lnkListCourseClassEnrolments_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "EnrolmentToolTip", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtListCourseClassEnrolments)
		/// </summary>
		/// <returns>title of the Link (wtListCourseClassEnrolments)</returns>
		public string
		lnkListCourseClassEnrolments_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtListCourseClassEnrolments)
		/// </summary>
		/// <returns>The Visible State of wtListCourseClassEnrolments</returns>
		public bool lnkListCourseClassEnrolments_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtListCourseClassEnrolments)
		/// </summary>
		/// <returns>The Enabled State of wtListCourseClassEnrolments</returns>
		public bool lnkListCourseClassEnrolments_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container8 Functions
		/// </summary>
		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container8_setInlineAttributes(sender, e);
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-left:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container8_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container24 Functions
		/// </summary>
		public void cnt_Container24_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container24_setInlineAttributes(sender, e);
		}
		public string cnt_Container24_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container24_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container24)
		/// </summary>
		/// <returns>The Visible State of wt_Container24</returns>
		public bool cnt_Container24_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression22 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = +wsgg9nxMUiVhjHSGmBplg) Expression: ToUpper + ", " +
		///  LearnerList.List.Current.Student.Forenames + "("
		/// + LearnerList.List.Current.Student.StudentReference + ")"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression22() {
			return (((((BuiltInFunction.ToUpper(getWtLearnerListList().CurrentRec.ssENStudent.ssSurname) + ", ") +getWtLearnerListList().CurrentRec.ssENStudent.ssForenames) + "(") +getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference) + ")");
		}
		/// <summary>
		/// wt_Container1 Functions
		/// </summary>
		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container1_setInlineAttributes(sender, e);
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container1_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression16 Functions
		/// </summary>
		public void expression_InlineExpression16_onDataBinding(object sender, System.EventArgs e) {
			expression_InlineExpression16_setInlineAttributes(sender, e);
		}
		public string expression_InlineExpression16_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = ((getWtLearnerListList().CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?("height:45px;display:block;"):("height:45px;display:block;color:red"));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Function to dump expression (Key = ttbDYREmXUutNTNiI_hwig) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression16() {
			return ((getWtLearnerListList().CurrentRec.ssENStudent.ssHasCurrentActiveEnrolment) ?((((getWtLearnerListList().CurrentRec.ssENStudent.ssMainOfferingName+ " [") +getWtLearnerListList().CurrentRec.ssENStudent.ssMainOfferingCode) + "]")):("Learner has no active enrolments"));
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance23 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance23_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_InfoBalloon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_InfoBalloon) sender;
			widget.inParamLinkId = Utils.getControlInRecordWidget(wtLearnerList, "wtListCourseClassEnrolments").ClientID;
			widget.inParamWidthPx = 500;
			widget.inParamHeightPx = -1;
		}
		/// <summary>
		/// wt_Container6 Functions
		/// </summary>
		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container6_setInlineAttributes(sender, e);
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-bottom:25px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container6_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression10 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Zhg2N6YRkEu9vJBSTs6q8A) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression10() {
			return (((getWtLearnerListList().CurrentRec.ssENStudentPENPortrait.ssPENPortrait== "")) ?("No PEN Portrait exists for this learner."):(getWtLearnerListList().CurrentRec.ssENStudentPENPortrait.ssPENPortrait));
		}
		/// <summary>
		/// wt_Container5 Functions
		/// </summary>
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container5_setInlineAttributes(sender, e);
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position: absolute; right: 2px; bottom: 1px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container5_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression2 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = iYnAFY412EOhpz4jeleywg) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression2() {
			return (((getWtLearnerListList().CurrentRec.ssENStudentPENPortrait.ssLastUpdatedBy==BuiltInFunction.NullIdentifier())) ?(""):(((("Last updated by " +getWtLearnerListList().CurrentRec.ssENUser.ssName) + " on ") +BuiltInFunction.FormatFullDate(Convert.ToDateTime(getWtLearnerListList().CurrentRec.ssENStudentPENPortrait.ssLastUpdatedAt.ToString("yyyy-M-d")), " "))));
		}


		public static class FuncCommandOnLearnerClick {
		}
		public static class FuncssPreparation {

			private static void datasetGetStudentPENPortraitsWithOrWithoutUsersReadDB(ref RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENGroup.Read(r, ref index);
				rec.ssENStudent.Read(r, ref index);
				rec.ssENStudent_Group.Read(r, ref index);
				rec.ssENStudentPENPortrait.Read(r, ref index);
				rec.ssENStudentRAG.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudentPENPortraitsWithOrWithoutUsers" of Action "Preparation"
			/// </summary>
			public static RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList datasetGetStudentPENPortraitsWithOrWithoutUsers(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Single {LearnerList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, ENStudent.[STUDENTREFERENCE] o10, ENStudent.[FORENAMES] o11, ENStudent.[SURNAME] o12, NULL o13, NULL o14, ENStudent.[MAINOFFERINGCODE] o15, ENStudent.[MAINOFFERINGNAME] o16, ENStudent.[STUDENTPHOTOURL] o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, ENStudent.[HASCURRENTACTIVEENROLMENT] o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, ENStudentPENPortrait.[PENPORTRAIT] o48, ENStudentPENPortrait.[LASTUPDATEDBY] o49, ENStudentPENPortrait.[LASTUPDATEDAT] o50, NULL o51, ENStudentRAG.[RAG] o52, NULL o53, NULL o54, NULL o55, NULL o56, ENUser.[NAME] o57, NULL o58, NULL o59, NULL o60, NULL o61, NULL o62, NULL o63, NULL o64, NULL o65");
				fromBuilder.Append(" FROM ((((({Student_Group} ENStudent_Group Left JOIN {StudentPENPortrait} ENStudentPENPortrait ON (ENStudent_Group.[STUDENTREFERENCE] = ENStudentPENPortrait.[STUDENTREFERENCE]))  Left JOIN {Group} ENGroup ON (ENStudent_Group.[GROUPID] = ENGroup.[ID]))  Left JOIN {Student} ENStudent ON (ENStudent_Group.[STUDENTREFERENCE] = ENStudent.[STUDENTREFERENCE]))  Left JOIN {User} ENUser ON (ENStudentPENPortrait.[LASTUPDATEDBY] = ENUser.[ID]))  Left JOIN {StudentRAG} ENStudentRAG ON (ENStudent.[STUDENTREFERENCE] = ENStudentRAG.[STUDENTREFERENCE])) ");
				whereBuilder.Append(" WHERE (ENGroup.[GROUPNAME] = @qpstP)");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList outParamList = new RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetStudentPENPortraitsWithOrWithoutUsersReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[6];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, false, false, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[4] = new BitArray(new bool[] {
					true, true, false, false, false
				}
				);
				opt[5] = new BitArray(new bool[] {
					true, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList _tmp = new RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList();
					_tmp.AlternateReadDBMethod = datasetGetStudentPENPortraitsWithOrWithoutUsersReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learners.LearnersPENPortraitsList.Preparation.GetStudentPENPortraitsWithOrWithoutUsers.List");
						outParamList = (RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learners.LearnersPENPortraitsList.Preparation.GetStudentPENPortraitsWithOrWithoutUsers.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList _tmp = new RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList();
						_tmp.AlternateReadDBMethod = datasetGetStudentPENPortraitsWithOrWithoutUsersReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learners.LearnersPENPortraitsList.Preparation.GetStudentPENPortraitsWithOrWithoutUsers.List");
							outParamList = (RLGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learners.LearnersPENPortraitsList.Preparation.GetStudentPENPortraitsWithOrWithoutUsers.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "LearnersPENPortraitsList"; ssLearnerListListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnersPENPortraitsList", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnersPENPortraitsList", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			if (IsAjaxRequest) {
				recListLearnerList_Rebuild((ssLearnerListListDataBound ? wtLearnerList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtLearnerList.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtLearnerList_list", wtLearnerList_storage, null);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				recListLearnerList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
