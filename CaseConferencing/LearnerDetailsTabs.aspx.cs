/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearnerView {

	public class ScrnLearnerDetailsTabs: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnLearnerDetailsTabs(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamSessionID. Description:
		/// </summary>
		public int inParamSessionID = 0;
		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Screen Input Parameter inParamFromLearnerList. Description:
		/// </summary>
		public bool inParamFromLearnerList = false;
		/// <summary>
		/// Screen Input Parameter inParamActiveTabId. Description:
		/// </summary>
		public int inParamActiveTabId = 0;
		/// <summary>
		/// Variable <code>varLcDummyREcord</code> that represents the Service Studio local variable
		///  <code>DummyREcord</code> <p>Description: </p>
		/// </summary>
		RCLearnerCategoryCoursesRecord varLcDummyREcord = new RCLearnerCategoryCoursesRecord(null);

		/// <summary>
		/// Variable wt_WebBlockInstance6
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout wt_WebBlockInstance6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ILP.WBlkILP_Tab.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkSIAS_Tab.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_Programme.WBlkProgramme_Tab.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowSafeguarding.WBlkSafeguarding_Tab.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReport_Tab.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("D63wS0IcrU6RmCO_pzVF0w", "LearnerDetailsTabs");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "D63wS0IcrU6RmCO_pzVF0w", "LearnerDetailsTabs");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "D63wS0IcrU6RmCO_pzVF0w", "LearnerDetailsTabs");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "D63wS0IcrU6RmCO_pzVF0w", "LearnerDetailsTabs");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "D63wS0IcrU6RmCO_pzVF0w", "LearnerDetailsTabs");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnLearnerDetailsTabs() {
		}


		RLLearnerCategoryCoursesRecordList queryResGetCoursesMLW_outParamList = new RLLearnerCategoryCoursesRecordList();
		int queryResGetCoursesMLW_outParamCount = 0;
		RLLearnerCategoryCoursesRecordList queryResGetCoursesEnglish_outParamList = new RLLearnerCategoryCoursesRecordList();
		int queryResGetCoursesEnglish_outParamCount = 0;
		RLLearnerCategoryCoursesRecordList queryResGetCoursesMath_outParamList = new RLLearnerCategoryCoursesRecordList();
		int queryResGetCoursesMath_outParamCount = 0;
		RLLearnerCategoryCoursesRecordList queryResGetCoursesVOC_outParamList = new RLLearnerCategoryCoursesRecordList();
		int queryResGetCoursesVOC_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query QueryGetCoursesMath
			int QueryGetCoursesMath_maxRecords = 0;
			queryResGetCoursesMath_outParamList = FuncssPreparation.QueryGetCoursesMath(heContext, QueryGetCoursesMath_maxRecords, IterationMultiplicity.Multiple, out queryResGetCoursesMath_outParamCount, inParamStudentReference
			, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("9J+4M6ZeU0+g4qKAzSFbVg")).ssId
			, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId
			);
			if ((queryResGetCoursesMath_outParamCount==0)) {
				// ListAppend
				ExtendedActions.ListAppend(heContext, queryResGetCoursesMath_outParamList, varLcDummyREcord);

			}
			// Query QueryGetCoursesEnglish
			int QueryGetCoursesEnglish_maxRecords = 0;
			queryResGetCoursesEnglish_outParamList = FuncssPreparation.QueryGetCoursesEnglish(heContext, QueryGetCoursesEnglish_maxRecords, IterationMultiplicity.Multiple, out queryResGetCoursesEnglish_outParamCount, inParamStudentReference
			, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("hh0WWQ2FF0acLTzRV4EL3Q")).ssId
			, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId
			);
			if ((queryResGetCoursesEnglish_outParamCount==0)) {
				// ListAppend2
				ExtendedActions.ListAppend(heContext, queryResGetCoursesEnglish_outParamList, varLcDummyREcord);

			}
			// Query QueryGetCoursesVOC
			int QueryGetCoursesVOC_maxRecords = 0;
			queryResGetCoursesVOC_outParamList = FuncssPreparation.QueryGetCoursesVOC(heContext, QueryGetCoursesVOC_maxRecords, IterationMultiplicity.Multiple, out queryResGetCoursesVOC_outParamCount, inParamStudentReference
			, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId
			, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId
			);
			if ((queryResGetCoursesVOC_outParamCount==0)) {
				// ListAppend3
				ExtendedActions.ListAppend(heContext, queryResGetCoursesVOC_outParamList, varLcDummyREcord);

			}
			// Query QueryGetCoursesMLW
			int QueryGetCoursesMLW_maxRecords = 0;
			queryResGetCoursesMLW_outParamList = FuncssPreparation.QueryGetCoursesMLW(heContext, QueryGetCoursesMLW_maxRecords, IterationMultiplicity.Multiple, out queryResGetCoursesMLW_outParamCount, inParamStudentReference
			, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("iy5u49fNYkGR3K77QLSz4g")).ssId
			, ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId
			);
			if ((queryResGetCoursesMLW_outParamCount==0)) {
				// ListAppend4
				ExtendedActions.ListAppend(heContext, queryResGetCoursesMLW_outParamList, varLcDummyREcord);

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "LearnerDetailsTabs.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "LearnerDetailsTabs.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamStudentReference!= "")) {
				parameters.Add(new Pair<string, string>("StudentReference", HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			}
			if ((inParamSessionID!=0)) {
				parameters.Add(new Pair<string, string>("SessionID", HttpUtility.UrlEncode(Convert.ToString(inParamSessionID), Request.ContentEncoding)));
			}
			if ((inParamCourseCode!= "")) {
				parameters.Add(new Pair<string, string>("CourseCode", HttpUtility.UrlEncode(inParamCourseCode, Request.ContentEncoding)));
			}
			if ((inParamFromLearnerList!=false)) {
				parameters.Add(new Pair<string, string>("FromLearnerList", HttpUtility.UrlEncode(Convert.ToString(inParamFromLearnerList), Request.ContentEncoding)));
			}
			if ((inParamActiveTabId!=0)) {
				parameters.Add(new Pair<string, string>("ActiveTabId", HttpUtility.UrlEncode(Convert.ToString(inParamActiveTabId), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsTabs", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsTabs", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance6 = (ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout) FindControl("wt_WebBlockInstance6");
			wt_Container3 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container3");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance4") {
				return wt_WebBlockInstance6.wtILP.FindControl("wt_WebBlockInstance4");
			}
			if (id == "wt_WebBlockInstance12") {
				return wt_WebBlockInstance6.wtSIAS.FindControl("wt_WebBlockInstance12");
			}
			if (id == "wt_WebBlockInstance9") {
				return wt_WebBlockInstance6.wtProgramme.FindControl("wt_WebBlockInstance9");
			}
			if (id == "wt_WebBlockInstance5") {
				return wt_WebBlockInstance6.wtSafeguarding.FindControl("wt_WebBlockInstance5");
			}
			if (id == "wt_Container3") {
				return wt_WebBlockInstance6.wtProgressReport.FindControl("wt_Container3");
			}
			if (id == "wt_WebBlockInstance8") {
				return wt_WebBlockInstance6.wtProgressReport.FindControl("wt_WebBlockInstance8");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailsTabs"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamStudentReference = (string) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamSessionID = (int) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamCourseCode = (string) paramValue;
							}
						}
						if (screenParameters.Count > 3) {
							object paramValue = screenParameters[3];
							if (paramValue != null) {
								inParamFromLearnerList = (bool) paramValue;
							}
						}
						if (screenParameters.Count > 4) {
							object paramValue = screenParameters[4];
							if (paramValue != null) {
								inParamActiveTabId = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailsTabs"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["StudentReference"] != null) {
						inParamStudentReference = Request.QueryString["StudentReference"];
					}
					if (Request.QueryString["SessionID"] != null) {
						inParamSessionID = Convert.ToInt32(Request.QueryString["SessionID"]);
					}
					if (Request.QueryString["CourseCode"] != null) {
						inParamCourseCode = Request.QueryString["CourseCode"];
					}
					if (Request.QueryString["FromLearnerList"] != null) {
						inParamFromLearnerList = (Request.QueryString["FromLearnerList"]).ToLowerInvariant() == "true";
					}
					if (Request.QueryString["ActiveTabId"] != null) {
						inParamActiveTabId = Convert.ToInt32(Request.QueryString["ActiveTabId"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["StudentReference"] != null) {
						inParamStudentReference = Request.Form["StudentReference"];
					}
					if (Request.Form["SessionID"] != null) {
						inParamSessionID = Convert.ToInt32(Request.Form["SessionID"]);
					}
					if (Request.Form["CourseCode"] != null) {
						inParamCourseCode = Request.Form["CourseCode"];
					}
					if (Request.Form["FromLearnerList"] != null) {
						inParamFromLearnerList = (Request.Form["FromLearnerList"]).ToLowerInvariant() == "true";
					}
					if (Request.Form["ActiveTabId"] != null) {
						inParamActiveTabId = Convert.ToInt32(Request.Form["ActiveTabId"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "LearnerDetailsTabs"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnerDetailsTabs", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearnerView.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotCaseConferencingBackoffice("CaseConferencingBackoffice role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("D63wS0IcrU6RmCO_pzVF0w"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// wt_WebBlockInstance6 Functions
		/// </summary>
		public void webBlck_WebBlockInstance6_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout widget = (ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout) sender;
			widget.inParamStudentReference = inParamStudentReference;
			widget.inParamCategoryId = BuiltInFunction.NullIdentifier();
			widget.inParamOfferingCode = "";
			widget.inParamShowUnit = false;
			widget.inParamShowTarget = false;
			widget.inParamActiveLearnerDetailMenu = ENLearnerDetailMenuEntity.GetRecordByKey(ObjectKey.Parse("pDmvSu5p7E+Wvu3K3A3ttg")).ssMenu;
			widget.inParamSessionId = inParamSessionID;
			widget.inParamCourseCode = inParamCourseCode;
			widget.inParamFromLearnerList = inParamFromLearnerList;
			widget.inParamActiveTab = inParamActiveTabId;
		}
		/// <summary>
		/// wt_WebBlockInstance4 Functions
		/// </summary>
		public void webBlck_WebBlockInstance4_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowLearner_ILP.WBlkILP_Tab widget = (ssCaseConferencing.Flows.FlowLearner_ILP.WBlkILP_Tab) sender;
			widget.inParamStudentReference = inParamStudentReference;
		}
		/// <summary>
		/// wt_WebBlockInstance12 Functions
		/// </summary>
		public void webBlck_WebBlockInstance12_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkSIAS_Tab widget = (ssCaseConferencing.Flows.FlowLearner_InitialAssessment.WBlkSIAS_Tab) sender;
			widget.inParamStudentReference = inParamStudentReference;
			widget.inParamSelectedTab = 1;
		}
		/// <summary>
		/// wt_WebBlockInstance9 Functions
		/// </summary>
		public void webBlck_WebBlockInstance9_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowLearner_Programme.WBlkProgramme_Tab widget = (ssCaseConferencing.Flows.FlowLearner_Programme.WBlkProgramme_Tab) sender;
			widget.inParamStudentReference = inParamStudentReference;
		}
		/// <summary>
		/// wt_WebBlockInstance5 Functions
		/// </summary>
		public void webBlck_WebBlockInstance5_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowSafeguarding.WBlkSafeguarding_Tab widget = (ssCaseConferencing.Flows.FlowSafeguarding.WBlkSafeguarding_Tab) sender;
			widget.inParamStudentReference = inParamStudentReference;
		}
		/// <summary>
		/// wt_Container3 Functions
		/// </summary>
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container3_setInlineAttributes(sender, e);
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance8 Functions
		/// </summary>
		public void webBlck_WebBlockInstance8_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReport_Tab widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkProgressReport_Tab) sender;
			widget.inParamStudentReference = inParamStudentReference;
		}


		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetCoursesMLW" of Action "Preparation"
			/// </summary>
			public static RLLearnerCategoryCoursesRecordList QueryGetCoursesMLW(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference, int qpinCategoryId, int qpinCategoryVOC) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCountCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCountCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				sqlCountCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT  [OFFERINGNAME],    " +
				 "        [OFFERINGCODE],  " +
				 "        MAX( [COMPLETEDTARGETS]),  " +
				 "        MAX( [TOTALTARGETS]),  " +
				 "        MAX( [COMPLETEDUNITS]),  " +
				 "        MAX( [TOTALUNITS]),  " +
				 "        0   " +
				 "FROM (  " +
				 "    SELECT   " +
				 "         {Target}.[OFFERINGNAME],    " +
				 "         {Target}.[OFFERINGCODE],   " +
				 "        SUM(CASE WHEN ISNULL( {Target}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "                 THEN 0   " +
				 "                 ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDTARGETS],  " +
				 "        COUNT(*) AS [TOTALTARGETS],  " +
				 "        0 [COMPLETEDUNITS],  " +
				 "        0 [TOTALUNITS]  " +
				 "    FROM  {Target}   " +
				 "    WHERE   ISNULL( {Target}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Target}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Target}.[OFFERINGNAME] ,  {Target}.[OFFERINGCODE]  " +
				 "  " +
				 "UNION  " +
				 "   " +
				 "    SELECT   " +
				 "         {Tracking}.[OFFERINGNAME],   " +
				 "         {Tracking}.[OFFERINGCODE],   " +
				 "        0 [COMPLETEDTARGETS],  " +
				 "        0 [TOTALTARGETS],  " +
				 "         SUM(CASE WHEN ISNULL( {Tracking}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "             THEN 0   " +
				 "             ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDUNITS],  " +
				 "        COUNT(*) AS [TOTALUNITS]  " +
				 "  " +
				 "    FROM  {Tracking}  " +
				 "    WHERE   ISNULL( {Tracking}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Tracking}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Tracking}.[OFFERINGNAME] ,  {Tracking}.[OFFERINGCODE]  " +
				 ") c group by c.[OFFERINGNAME] , c.[OFFERINGCODE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLLearnerCategoryCoursesRecordList outParamList = new RLLearnerCategoryCoursesRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLLearnerCategoryCoursesRecordList _tmp = new RLLearnerCategoryCoursesRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMLW.List");
							outParamList = (RLLearnerCategoryCoursesRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMLW.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMLW.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMLW.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMLW.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMLW.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetCoursesMLW in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetCoursesMLW in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetCoursesMLW in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetCoursesEnglish" of Action "Preparation"
			/// </summary>
			public static RLLearnerCategoryCoursesRecordList QueryGetCoursesEnglish(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference, int qpinCategoryId, int qpinCategoryVOC) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCountCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCountCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				sqlCountCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT  [OFFERINGNAME],    " +
				 "        [OFFERINGCODE],  " +
				 "        MAX( [COMPLETEDTARGETS]),  " +
				 "        MAX( [TOTALTARGETS]),  " +
				 "        MAX( [COMPLETEDUNITS]),  " +
				 "        MAX( [TOTALUNITS]),  " +
				 "        0   " +
				 "FROM (  " +
				 "    SELECT   " +
				 "         {Target}.[OFFERINGNAME],    " +
				 "         {Target}.[OFFERINGCODE],   " +
				 "        SUM(CASE WHEN ISNULL( {Target}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "                 THEN 0   " +
				 "                 ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDTARGETS],  " +
				 "        COUNT(*) AS [TOTALTARGETS],  " +
				 "        0 [COMPLETEDUNITS],  " +
				 "        0 [TOTALUNITS]  " +
				 "    FROM  {Target}   " +
				 "    WHERE   ISNULL( {Target}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Target}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Target}.[OFFERINGNAME] ,  {Target}.[OFFERINGCODE]  " +
				 "  " +
				 "UNION  " +
				 "   " +
				 "    SELECT   " +
				 "         {Tracking}.[OFFERINGNAME],   " +
				 "         {Tracking}.[OFFERINGCODE],   " +
				 "        0 [COMPLETEDTARGETS],  " +
				 "        0 [TOTALTARGETS],  " +
				 "         SUM(CASE WHEN ISNULL( {Tracking}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "             THEN 0   " +
				 "             ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDUNITS],  " +
				 "        COUNT(*) AS [TOTALUNITS]  " +
				 "  " +
				 "    FROM  {Tracking}  " +
				 "    WHERE   ISNULL( {Tracking}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Tracking}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Tracking}.[OFFERINGNAME] ,  {Tracking}.[OFFERINGCODE]  " +
				 ") c group by c.[OFFERINGNAME] , c.[OFFERINGCODE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLLearnerCategoryCoursesRecordList outParamList = new RLLearnerCategoryCoursesRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLLearnerCategoryCoursesRecordList _tmp = new RLLearnerCategoryCoursesRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesEnglish.List");
							outParamList = (RLLearnerCategoryCoursesRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesEnglish.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesEnglish.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesEnglish.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesEnglish.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesEnglish.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetCoursesEnglish in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetCoursesEnglish in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetCoursesEnglish in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetCoursesMath" of Action "Preparation"
			/// </summary>
			public static RLLearnerCategoryCoursesRecordList QueryGetCoursesMath(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference, int qpinCategoryId, int qpinCategoryVOC) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCountCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCountCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				sqlCountCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT  [OFFERINGNAME],    " +
				 "        [OFFERINGCODE],  " +
				 "        MAX( [COMPLETEDTARGETS]),  " +
				 "        MAX( [TOTALTARGETS]),  " +
				 "        MAX( [COMPLETEDUNITS]),  " +
				 "        MAX( [TOTALUNITS]),  " +
				 "        0   " +
				 "FROM (  " +
				 "    SELECT   " +
				 "         {Target}.[OFFERINGNAME],    " +
				 "         {Target}.[OFFERINGCODE],   " +
				 "        SUM(CASE WHEN ISNULL( {Target}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "                 THEN 0   " +
				 "                 ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDTARGETS],  " +
				 "        COUNT(*) AS [TOTALTARGETS],  " +
				 "        0 [COMPLETEDUNITS],  " +
				 "        0 [TOTALUNITS]  " +
				 "    FROM  {Target}   " +
				 "    WHERE   ISNULL( {Target}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Target}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Target}.[OFFERINGNAME] ,  {Target}.[OFFERINGCODE]  " +
				 "  " +
				 "UNION  " +
				 "   " +
				 "    SELECT   " +
				 "         {Tracking}.[OFFERINGNAME],   " +
				 "         {Tracking}.[OFFERINGCODE],   " +
				 "        0 [COMPLETEDTARGETS],  " +
				 "        0 [TOTALTARGETS],  " +
				 "         SUM(CASE WHEN ISNULL( {Tracking}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "             THEN 0   " +
				 "             ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDUNITS],  " +
				 "        COUNT(*) AS [TOTALUNITS]  " +
				 "  " +
				 "    FROM  {Tracking}  " +
				 "    WHERE   ISNULL( {Tracking}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Tracking}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Tracking}.[OFFERINGNAME] ,  {Tracking}.[OFFERINGCODE]  " +
				 ") c group by c.[OFFERINGNAME] , c.[OFFERINGCODE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLLearnerCategoryCoursesRecordList outParamList = new RLLearnerCategoryCoursesRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLLearnerCategoryCoursesRecordList _tmp = new RLLearnerCategoryCoursesRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMath.List");
							outParamList = (RLLearnerCategoryCoursesRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMath.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMath.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMath.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMath.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesMath.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetCoursesMath in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetCoursesMath in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetCoursesMath in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetCoursesVOC" of Action "Preparation"
			/// </summary>
			public static RLLearnerCategoryCoursesRecordList QueryGetCoursesVOC(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference, int qpinCategoryId, int qpinCategoryVOC) {
				// Query Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCountCmd.CreateParameter("@qpinCategoryVOC", DbType.Int32, qpinCategoryVOC);
				sqlCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCountCmd.CreateParameter("@qpinCategoryId", DbType.Int32, qpinCategoryId);
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				sqlCountCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT  [OFFERINGNAME],    " +
				 "        [OFFERINGCODE],  " +
				 "        MAX( [COMPLETEDTARGETS]),  " +
				 "        MAX( [TOTALTARGETS]),  " +
				 "        MAX( [COMPLETEDUNITS]),  " +
				 "        MAX( [TOTALUNITS]),  " +
				 "        0   " +
				 "FROM (  " +
				 "    SELECT   " +
				 "         {Target}.[OFFERINGNAME],    " +
				 "         {Target}.[OFFERINGCODE],   " +
				 "        SUM(CASE WHEN ISNULL( {Target}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "                 THEN 0   " +
				 "                 ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDTARGETS],  " +
				 "        COUNT(*) AS [TOTALTARGETS],  " +
				 "        0 [COMPLETEDUNITS],  " +
				 "        0 [TOTALUNITS]  " +
				 "    FROM  {Target}   " +
				 "    WHERE   ISNULL( {Target}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Target}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Target}.[OFFERINGNAME] ,  {Target}.[OFFERINGCODE]  " +
				 "  " +
				 "UNION  " +
				 "   " +
				 "    SELECT   " +
				 "         {Tracking}.[OFFERINGNAME],   " +
				 "         {Tracking}.[OFFERINGCODE],   " +
				 "        0 [COMPLETEDTARGETS],  " +
				 "        0 [TOTALTARGETS],  " +
				 "         SUM(CASE WHEN ISNULL( {Tracking}.[COMPLETIONDATE],{d '1900-01-01'}) = {d '1900-01-01'}  " +
				 "             THEN 0   " +
				 "             ELSE 1  " +
				 "            END  " +
				 "        ) AS [COMPLETEDUNITS],  " +
				 "        COUNT(*) AS [TOTALUNITS]  " +
				 "  " +
				 "    FROM  {Tracking}  " +
				 "    WHERE   ISNULL( {Tracking}.[OFFERINGCATEGORY],@qpinCategoryVOC) = @qpinCategoryId   " +
				 "    AND  {Tracking}.[STUDENTREFERENCE] = @qpstStudentReference  " +
				 "    group by  {Tracking}.[OFFERINGNAME] ,  {Tracking}.[OFFERINGCODE]  " +
				 ") c group by c.[OFFERINGNAME] , c.[OFFERINGCODE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				AppUtils.Instance.CheckForSelectStatement(sql);
				string sqlCount = "DECLARE @CountCursor CURSOR; SET @CountCursor = CURSOR STATIC READ_ONLY FOR ";
				sqlCount += sql;
				sqlCount += "; OPEN @CountCursor; SELECT @@CURSOR_ROWS; CLOSE @CountCursor; DEALLOCATE @CountCursor; ";
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLLearnerCategoryCoursesRecordList outParamList = new RLLearnerCategoryCoursesRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLLearnerCategoryCoursesRecordList _tmp = new RLLearnerCategoryCoursesRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesVOC.List");
							outParamList = (RLLearnerCategoryCoursesRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesVOC.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesVOC.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesVOC.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesVOC.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsTabs.Preparation.GetCoursesVOC.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetCoursesVOC in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetCoursesVOC in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetCoursesVOC in Preparation in LearnerDetailsTabs in LearnerView in CaseConferencing (SELECT  [OfferingName],            [OfferingCode],          MAX( [CompletedTargets]),          MAX( [TotalTargets]),          MAX( [CompletedUnits]),          MAX( [TotalUnits]),          0   FROM (      SELECT           {Target}.[OfferingName],            {Target}.[OfferingCode],           SUM(CASE WHEN ISNULL({Target}.[CompletionDate],{d '1900-01-01'}) = {d '1900-01-01'}                   THEN 0                    ELSE 1              END          ) AS [CompletedTargets],          COUNT(*) AS [TotalTargets],          0 [CompletedUnits],          0 [TotalUnits]      FROM {Target}       WHERE   ISNULL({Target}.[OfferingCategory],@CategoryVOC) = @CategoryId       AND {Target}.[StudentReference] = @StudentReference      group by {Target}.[OfferingName] , {Target}.[OfferingCode]    UNION         SELECT           {Tracking}.[OfferingName],           {Tracking}.[OfferingCode],           0 [CompletedTargets],          0 [TotalTargets],           SUM(CASE WHEN ISNULL({Tracking}.[CompletionDate ...): " + aqExcep.Message);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "LearnerDetailsTabs"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnerDetailsTabs", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnerDetailsTabs", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("inParamSessionID", inParamSessionID, 0);
			ViewStateAttributes.SetInViewState("inParamCourseCode", inParamCourseCode, "");
			ViewStateAttributes.SetInViewState("inParamFromLearnerList", inParamFromLearnerList, false);
			ViewStateAttributes.SetInViewState("inParamActiveTabId", inParamActiveTabId, 0);
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssOfferingName", varLcDummyREcord.ssSTLearnerCategoryCourses.ssOfferingName, "");
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssOfferingCode", varLcDummyREcord.ssSTLearnerCategoryCourses.ssOfferingCode, "");
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssCompletedUnits", varLcDummyREcord.ssSTLearnerCategoryCourses.ssCompletedUnits, 0);
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssTotalUnits", varLcDummyREcord.ssSTLearnerCategoryCourses.ssTotalUnits, 0);
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssCompletedTargets", varLcDummyREcord.ssSTLearnerCategoryCourses.ssCompletedTargets, 0);
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssTotalTargets", varLcDummyREcord.ssSTLearnerCategoryCourses.ssTotalTargets, 0);
			ViewStateAttributes.SetInViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssVisible", varLcDummyREcord.ssSTLearnerCategoryCourses.ssVisible, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				inParamSessionID = (int) ViewStateAttributes.GetFromViewState("inParamSessionID", 0);
				inParamCourseCode = (string) ViewStateAttributes.GetFromViewState("inParamCourseCode", "");
				inParamFromLearnerList = (bool) ViewStateAttributes.GetFromViewState("inParamFromLearnerList", false);
				inParamActiveTabId = (int) ViewStateAttributes.GetFromViewState("inParamActiveTabId", 0);
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssOfferingName = (string) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssOfferingName", "");
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssOfferingCode = (string) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssOfferingCode", "");
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssCompletedUnits = (int) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssCompletedUnits", 0);
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssTotalUnits = (int) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssTotalUnits", 0);
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssCompletedTargets = (int) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssCompletedTargets", 0);
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssTotalTargets = (int) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssTotalTargets", 0);
				varLcDummyREcord.ssSTLearnerCategoryCourses.ssVisible = (bool) ViewStateAttributes.GetFromViewState("varLcDummyREcord_ssSTLearnerCategoryCourses_ssVisible", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
