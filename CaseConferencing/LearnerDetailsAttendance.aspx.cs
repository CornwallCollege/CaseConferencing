/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearnerView {

	public class ScrnLearnerDetailsAttendance: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnLearnerDetailsAttendance(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamSessionID. Description:
		/// </summary>
		public int inParamSessionID = 0;
		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Screen Input Parameter inParamFromLearnerList. Description:
		/// </summary>
		public bool inParamFromLearnerList = false;
		/// <summary>
		/// Variable wt_WebBlockInstance14
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout wt_WebBlockInstance14;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wtActiveEnrolments;
		protected OutSystems.HubEdition.WebWidgets.Container wtCompletedEnrolments;
		protected OutSystems.HubEdition.WebWidgets.Container wtWithdrawnEnrolments;
		protected OutSystems.HubEdition.WebWidgets.Container wtTransferredEnrolments;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowStaffView.WBlkStudentAttendanceSummaryBlock.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("+2xnMZWZ_UqOlbAPIQSvPQ", "LearnerDetailsAttendance");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "+2xnMZWZ_UqOlbAPIQSvPQ", "LearnerDetailsAttendance");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "+2xnMZWZ_UqOlbAPIQSvPQ", "LearnerDetailsAttendance");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "+2xnMZWZ_UqOlbAPIQSvPQ", "LearnerDetailsAttendance");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "+2xnMZWZ_UqOlbAPIQSvPQ", "LearnerDetailsAttendance");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnLearnerDetailsAttendance() {
		}


		RLStudent_GroupRecordList queryResGetStudentGroupTransferredCount_outParamList = new RLStudent_GroupRecordList();
		int queryResGetStudentGroupTransferredCount_outParamCount = 0;
		RLStudent_GroupRecordList queryResGetStudentGroupActiveCount_outParamList = new RLStudent_GroupRecordList();
		int queryResGetStudentGroupActiveCount_outParamCount = 0;
		RLStudent_GroupRecordList queryResGetStudentGroupCompletedCount_outParamList = new RLStudent_GroupRecordList();
		int queryResGetStudentGroupCompletedCount_outParamCount = 0;
		RLStudent_GroupRecordList queryResGetStudentGroupWithdrawnCount_outParamList = new RLStudent_GroupRecordList();
		int queryResGetStudentGroupWithdrawnCount_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query QueryGetStudentGroupActiveCount
			int QueryGetStudentGroupActiveCount_maxRecords = 0;
			queryResGetStudentGroupActiveCount_outParamList = FuncssPreparation.QueryGetStudentGroupActiveCount(heContext, QueryGetStudentGroupActiveCount_maxRecords, IterationMultiplicity.Never, out queryResGetStudentGroupActiveCount_outParamCount, inParamStudentReference
			);
			// Query QueryGetStudentGroupWithdrawnCount
			int QueryGetStudentGroupWithdrawnCount_maxRecords = 0;
			queryResGetStudentGroupWithdrawnCount_outParamList = FuncssPreparation.QueryGetStudentGroupWithdrawnCount(heContext, QueryGetStudentGroupWithdrawnCount_maxRecords, IterationMultiplicity.Never, out queryResGetStudentGroupWithdrawnCount_outParamCount, inParamStudentReference
			);
			// Query QueryGetStudentGroupCompletedCount
			int QueryGetStudentGroupCompletedCount_maxRecords = 0;
			queryResGetStudentGroupCompletedCount_outParamList = FuncssPreparation.QueryGetStudentGroupCompletedCount(heContext, QueryGetStudentGroupCompletedCount_maxRecords, IterationMultiplicity.Never, out queryResGetStudentGroupCompletedCount_outParamCount, inParamStudentReference
			);
			// Query QueryGetStudentGroupTransferredCount
			int QueryGetStudentGroupTransferredCount_maxRecords = 0;
			queryResGetStudentGroupTransferredCount_outParamList = FuncssPreparation.QueryGetStudentGroupTransferredCount(heContext, QueryGetStudentGroupTransferredCount_maxRecords, IterationMultiplicity.Never, out queryResGetStudentGroupTransferredCount_outParamCount, inParamStudentReference
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "LearnerDetailsAttendance.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "LearnerDetailsAttendance.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamStudentReference!= "")) {
				parameters.Add(new Pair<string, string>("StudentReference", HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			}
			if ((inParamSessionID!=0)) {
				parameters.Add(new Pair<string, string>("SessionID", HttpUtility.UrlEncode(Convert.ToString(inParamSessionID), Request.ContentEncoding)));
			}
			if ((inParamCourseCode!= "")) {
				parameters.Add(new Pair<string, string>("CourseCode", HttpUtility.UrlEncode(inParamCourseCode, Request.ContentEncoding)));
			}
			if ((inParamFromLearnerList!=false)) {
				parameters.Add(new Pair<string, string>("FromLearnerList", HttpUtility.UrlEncode(Convert.ToString(inParamFromLearnerList), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsAttendance", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsAttendance", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance14 = (ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout) FindControl("wt_WebBlockInstance14");
			wt_Container4 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container4");
			wtActiveEnrolments = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtActiveEnrolments");
			wtCompletedEnrolments = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtCompletedEnrolments");
			wtWithdrawnEnrolments = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtWithdrawnEnrolments");
			wtTransferredEnrolments = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTransferredEnrolments");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_Container4") {
				return wt_WebBlockInstance14.wtRAG.FindControl("wt_Container4");
			}
			if (id == "wtActiveEnrolments") {
				return wt_WebBlockInstance14.wtRAG.FindControl("wtActiveEnrolments");
			}
			if (id == "wt_WebBlockInstance9") {
				return wt_WebBlockInstance14.wtRAG.FindControl("wt_WebBlockInstance9");
			}
			if (id == "wtCompletedEnrolments") {
				return wt_WebBlockInstance14.wtRAG.FindControl("wtCompletedEnrolments");
			}
			if (id == "wt_WebBlockInstance2") {
				return wt_WebBlockInstance14.wtRAG.FindControl("wt_WebBlockInstance2");
			}
			if (id == "wtWithdrawnEnrolments") {
				return wt_WebBlockInstance14.wtRAG.FindControl("wtWithdrawnEnrolments");
			}
			if (id == "wt_WebBlockInstance10") {
				return wt_WebBlockInstance14.wtRAG.FindControl("wt_WebBlockInstance10");
			}
			if (id == "wtTransferredEnrolments") {
				return wt_WebBlockInstance14.wtRAG.FindControl("wtTransferredEnrolments");
			}
			if (id == "wt_WebBlockInstance13") {
				return wt_WebBlockInstance14.wtRAG.FindControl("wt_WebBlockInstance13");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailsAttendance"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamStudentReference = (string) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamSessionID = (int) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamCourseCode = (string) paramValue;
							}
						}
						if (screenParameters.Count > 3) {
							object paramValue = screenParameters[3];
							if (paramValue != null) {
								inParamFromLearnerList = (bool) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailsAttendance"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["StudentReference"] != null) {
						inParamStudentReference = Request.QueryString["StudentReference"];
					}
					if (Request.QueryString["SessionID"] != null) {
						inParamSessionID = Convert.ToInt32(Request.QueryString["SessionID"]);
					}
					if (Request.QueryString["CourseCode"] != null) {
						inParamCourseCode = Request.QueryString["CourseCode"];
					}
					if (Request.QueryString["FromLearnerList"] != null) {
						inParamFromLearnerList = (Request.QueryString["FromLearnerList"]).ToLowerInvariant() == "true";
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["StudentReference"] != null) {
						inParamStudentReference = Request.Form["StudentReference"];
					}
					if (Request.Form["SessionID"] != null) {
						inParamSessionID = Convert.ToInt32(Request.Form["SessionID"]);
					}
					if (Request.Form["CourseCode"] != null) {
						inParamCourseCode = Request.Form["CourseCode"];
					}
					if (Request.Form["FromLearnerList"] != null) {
						inParamFromLearnerList = (Request.Form["FromLearnerList"]).ToLowerInvariant() == "true";
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "LearnerDetailsAttendance"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnerDetailsAttendance", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, false);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearnerView.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			throw new NotRegisteredException("Registered role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("+2xnMZWZ_UqOlbAPIQSvPQ"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// wt_WebBlockInstance14 Functions
		/// </summary>
		public void webBlck_WebBlockInstance14_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout widget = (ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout) sender;
			widget.inParamStudentReference = inParamStudentReference;
			widget.inParamCategoryId = BuiltInFunction.NullIdentifier();
			widget.inParamOfferingCode = "";
			widget.inParamShowUnit = false;
			widget.inParamShowTarget = false;
			widget.inParamActiveLearnerDetailMenu = ENLearnerDetailMenuEntity.GetRecordByKey(ObjectKey.Parse("XBgstjuBBEGeNGmwxODbwQ")).ssMenu;
			widget.inParamSessionId = inParamSessionID;
			widget.inParamCourseCode = inParamCourseCode;
			widget.inParamFromLearnerList = inParamFromLearnerList;
			widget.inParamActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("avXIv1WG4UWcoRPTcOjaOw")).ssId;
		}
		/// <summary>
		/// wt_Container4 Functions
		/// </summary>
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container4_setInlineAttributes(sender, e);
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "style";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container4_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			return true;
		}

		/// <summary>
		/// wtActiveEnrolments Functions
		/// </summary>
		public void cntActiveEnrolments_onDataBinding(object sender, System.EventArgs e) {
			cntActiveEnrolments_setInlineAttributes(sender, e);
		}
		public string cntActiveEnrolments_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntActiveEnrolments_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtActiveEnrolments)
		/// </summary>
		/// <returns>The Visible State of wtActiveEnrolments</returns>
		public bool cntActiveEnrolments_isVisible() {
			return (!queryResGetStudentGroupActiveCount_outParamList.Empty);
		}

		/// <summary>
		/// wt_WebBlockInstance9 Functions
		/// </summary>
		public void webBlck_WebBlockInstance9_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowStaffView.WBlkStudentAttendanceSummaryBlock widget = (ssCaseConferencing.Flows.FlowStaffView.WBlkStudentAttendanceSummaryBlock) sender;
			widget.inParamStudentReference = inParamStudentReference;
			widget.inParamVisible = true;
			widget.inParamEnrolmentStatus = "Active";
		}
		/// <summary>
		/// wtCompletedEnrolments Functions
		/// </summary>
		public void cntCompletedEnrolments_onDataBinding(object sender, System.EventArgs e) {
			cntCompletedEnrolments_setInlineAttributes(sender, e);
		}
		public string cntCompletedEnrolments_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-top:20px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntCompletedEnrolments_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCompletedEnrolments)
		/// </summary>
		/// <returns>The Visible State of wtCompletedEnrolments</returns>
		public bool cntCompletedEnrolments_isVisible() {
			return (!queryResGetStudentGroupCompletedCount_outParamList.Empty);
		}

		/// <summary>
		/// wt_WebBlockInstance2 Functions
		/// </summary>
		public void webBlck_WebBlockInstance2_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowStaffView.WBlkStudentAttendanceSummaryBlock widget = (ssCaseConferencing.Flows.FlowStaffView.WBlkStudentAttendanceSummaryBlock) sender;
			widget.inParamStudentReference = inParamStudentReference;
			widget.inParamVisible = false;
			widget.inParamEnrolmentStatus = "Completed";
		}
		/// <summary>
		/// wtWithdrawnEnrolments Functions
		/// </summary>
		public void cntWithdrawnEnrolments_onDataBinding(object sender, System.EventArgs e) {
			cntWithdrawnEnrolments_setInlineAttributes(sender, e);
		}
		public string cntWithdrawnEnrolments_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-top:20px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntWithdrawnEnrolments_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtWithdrawnEnrolments)
		/// </summary>
		/// <returns>The Visible State of wtWithdrawnEnrolments</returns>
		public bool cntWithdrawnEnrolments_isVisible() {
			return (!queryResGetStudentGroupWithdrawnCount_outParamList.Empty);
		}

		/// <summary>
		/// wt_WebBlockInstance10 Functions
		/// </summary>
		public void webBlck_WebBlockInstance10_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowStaffView.WBlkStudentAttendanceSummaryBlock widget = (ssCaseConferencing.Flows.FlowStaffView.WBlkStudentAttendanceSummaryBlock) sender;
			widget.inParamStudentReference = inParamStudentReference;
			widget.inParamVisible = false;
			widget.inParamEnrolmentStatus = "Withdrawn";
		}
		/// <summary>
		/// wtTransferredEnrolments Functions
		/// </summary>
		public void cntTransferredEnrolments_onDataBinding(object sender, System.EventArgs e) {
			cntTransferredEnrolments_setInlineAttributes(sender, e);
		}
		public string cntTransferredEnrolments_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-top:20px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntTransferredEnrolments_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtTransferredEnrolments)
		/// </summary>
		/// <returns>The Visible State of wtTransferredEnrolments</returns>
		public bool cntTransferredEnrolments_isVisible() {
			return (!queryResGetStudentGroupTransferredCount_outParamList.Empty);
		}

		/// <summary>
		/// wt_WebBlockInstance13 Functions
		/// </summary>
		public void webBlck_WebBlockInstance13_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowStaffView.WBlkStudentAttendanceSummaryBlock widget = (ssCaseConferencing.Flows.FlowStaffView.WBlkStudentAttendanceSummaryBlock) sender;
			widget.inParamStudentReference = inParamStudentReference;
			widget.inParamVisible = false;
			widget.inParamEnrolmentStatus = "Transferred";
		}


		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetStudentGroupTransferredCount" of Action "Preparation"
			/// </summary>
			public static RLStudent_GroupRecordList QueryGetStudentGroupTransferredCount(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT  {Student_Group}.[ID], {Student_Group}.[STUDENTREFERENCE], {Student_Group}.[GROUPID], {Student_Group}.[ENROLMENTSTATUS], {Student_Group}.[STARTDATE], {Student_Group}.[ENDDATE], {Student_Group}.[ACADEMICYEAR], {Student_Group}.[ENROLMENTPLANNEDLEARNINGHOUR], {Student_Group}.[TMG]  " +
				 "FROM  {StudentAttendance}   " +
				 "INNER JOIN  {Group} ON  {Group}.[GROUPNAME] =  {StudentAttendance}.[OFFERINGCODE]  " +
				 "INNER JOIN  {Student_Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[STUDENTREFERENCE] =  {StudentAttendance}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentAttendance}.[STUDENTREFERENCE] = @qpstStudentReference   " +
				 "AND  {Student_Group}.[ENROLMENTSTATUS]='Transferred'";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStudent_GroupRecordList outParamList = new RLStudent_GroupRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudent_GroupRecordList _tmp = new RLStudent_GroupRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupTransferredCount.List");
							outParamList = (RLStudent_GroupRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupTransferredCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupTransferredCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudentGroupTransferredCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Transferred'): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudentGroupTransferredCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Transferred'): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudentGroupTransferredCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Transferred'): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetStudentGroupActiveCount" of Action "Preparation"
			/// </summary>
			public static RLStudent_GroupRecordList QueryGetStudentGroupActiveCount(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT DISTINCT  {Student_Group}.[ID], {Student_Group}.[STUDENTREFERENCE], {Student_Group}.[GROUPID], {Student_Group}.[ENROLMENTSTATUS], {Student_Group}.[STARTDATE], {Student_Group}.[ENDDATE], {Student_Group}.[ACADEMICYEAR], {Student_Group}.[ENROLMENTPLANNEDLEARNINGHOUR], {Student_Group}.[TMG]  " +
				 "FROM  {StudentAttendance}   " +
				 "INNER JOIN  {Group} ON  {Group}.[GROUPNAME] =  {StudentAttendance}.[OFFERINGCODE]  " +
				 "INNER JOIN  {Student_Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[STUDENTREFERENCE] =  {StudentAttendance}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentAttendance}.[STUDENTREFERENCE] = @qpstStudentReference   " +
				 "AND  {Student_Group}.[ENROLMENTSTATUS]='Active'";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStudent_GroupRecordList outParamList = new RLStudent_GroupRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudent_GroupRecordList _tmp = new RLStudent_GroupRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupActiveCount.List");
							outParamList = (RLStudent_GroupRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupActiveCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupActiveCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudentGroupActiveCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT DISTINCT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Active'): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudentGroupActiveCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT DISTINCT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Active'): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudentGroupActiveCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT DISTINCT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Active'): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetStudentGroupCompletedCount" of Action "Preparation"
			/// </summary>
			public static RLStudent_GroupRecordList QueryGetStudentGroupCompletedCount(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT  {Student_Group}.[ID], {Student_Group}.[STUDENTREFERENCE], {Student_Group}.[GROUPID], {Student_Group}.[ENROLMENTSTATUS], {Student_Group}.[STARTDATE], {Student_Group}.[ENDDATE], {Student_Group}.[ACADEMICYEAR], {Student_Group}.[ENROLMENTPLANNEDLEARNINGHOUR], {Student_Group}.[TMG]  " +
				 "FROM  {StudentAttendance}   " +
				 "INNER JOIN  {Group} ON  {Group}.[GROUPNAME] =  {StudentAttendance}.[OFFERINGCODE]  " +
				 "INNER JOIN  {Student_Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[STUDENTREFERENCE] =  {StudentAttendance}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentAttendance}.[STUDENTREFERENCE] = @qpstStudentReference   " +
				 "AND  {Student_Group}.[ENROLMENTSTATUS]='Completed'";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStudent_GroupRecordList outParamList = new RLStudent_GroupRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudent_GroupRecordList _tmp = new RLStudent_GroupRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupCompletedCount.List");
							outParamList = (RLStudent_GroupRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupCompletedCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupCompletedCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudentGroupCompletedCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Completed'): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudentGroupCompletedCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Completed'): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudentGroupCompletedCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Completed'): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetStudentGroupWithdrawnCount" of Action "Preparation"
			/// </summary>
			public static RLStudent_GroupRecordList QueryGetStudentGroupWithdrawnCount(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentReference) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstStudentReference", DbType.String, qpstStudentReference);
				string advSql = "SELECT  {Student_Group}.[ID], {Student_Group}.[STUDENTREFERENCE], {Student_Group}.[GROUPID], {Student_Group}.[ENROLMENTSTATUS], {Student_Group}.[STARTDATE], {Student_Group}.[ENDDATE], {Student_Group}.[ACADEMICYEAR], {Student_Group}.[ENROLMENTPLANNEDLEARNINGHOUR], {Student_Group}.[TMG]  " +
				 "FROM  {StudentAttendance}   " +
				 "INNER JOIN  {Group} ON  {Group}.[GROUPNAME] =  {StudentAttendance}.[OFFERINGCODE]  " +
				 "INNER JOIN  {Student_Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[STUDENTREFERENCE] =  {StudentAttendance}.[STUDENTREFERENCE]  " +
				 "WHERE  {StudentAttendance}.[STUDENTREFERENCE] = @qpstStudentReference   " +
				 "AND  {Student_Group}.[ENROLMENTSTATUS]='Withdrawn'";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStudent_GroupRecordList outParamList = new RLStudent_GroupRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudent_GroupRecordList _tmp = new RLStudent_GroupRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupWithdrawnCount.List");
							outParamList = (RLStudent_GroupRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupWithdrawnCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsAttendance.Preparation.GetStudentGroupWithdrawnCount.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudentGroupWithdrawnCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Withdrawn'): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudentGroupWithdrawnCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Withdrawn'): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudentGroupWithdrawnCount in Preparation in LearnerDetailsAttendance in LearnerView in CaseConferencing (SELECT {Student_Group}.*  FROM {StudentAttendance}   INNER JOIN {Group} ON {Group}.[GroupName] = {StudentAttendance}.[OfferingCode]  INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[StudentReference] = {StudentAttendance}.[StudentReference]  WHERE {StudentAttendance}.[StudentReference] = @StudentReference   AND {Student_Group}.[EnrolmentStatus]='Withdrawn'): " + aqExcep.Message);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "LearnerDetailsAttendance"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnerDetailsAttendance", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnerDetailsAttendance", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetStudentGroupTransferredCount_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetStudentGroupTransferredCount_outParamList = queryResGetStudentGroupTransferredCount_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentGroupTransferredCount_outParamList = queryResGetStudentGroupTransferredCount_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupTransferredCount_outParamList_empty", queryResGetStudentGroupTransferredCount_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupTransferredCount_outParamList_length", queryResGetStudentGroupTransferredCount_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupTransferredCount_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentGroupTransferredCount_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupTransferredCount_outParamList_eof", tmpeofqueryResGetStudentGroupTransferredCount_outParamList, false);

			#endregion


			#region store queryResGetStudentGroupActiveCount_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetStudentGroupActiveCount_outParamList = queryResGetStudentGroupActiveCount_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentGroupActiveCount_outParamList = queryResGetStudentGroupActiveCount_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupActiveCount_outParamList_empty", queryResGetStudentGroupActiveCount_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupActiveCount_outParamList_length", queryResGetStudentGroupActiveCount_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupActiveCount_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentGroupActiveCount_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupActiveCount_outParamList_eof", tmpeofqueryResGetStudentGroupActiveCount_outParamList, false);

			#endregion


			#region store queryResGetStudentGroupCompletedCount_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetStudentGroupCompletedCount_outParamList = queryResGetStudentGroupCompletedCount_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentGroupCompletedCount_outParamList = queryResGetStudentGroupCompletedCount_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupCompletedCount_outParamList_empty", queryResGetStudentGroupCompletedCount_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupCompletedCount_outParamList_length", queryResGetStudentGroupCompletedCount_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupCompletedCount_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentGroupCompletedCount_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupCompletedCount_outParamList_eof", tmpeofqueryResGetStudentGroupCompletedCount_outParamList, false);

			#endregion


			#region store queryResGetStudentGroupWithdrawnCount_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetStudentGroupWithdrawnCount_outParamList = queryResGetStudentGroupWithdrawnCount_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentGroupWithdrawnCount_outParamList = queryResGetStudentGroupWithdrawnCount_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupWithdrawnCount_outParamList_empty", queryResGetStudentGroupWithdrawnCount_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupWithdrawnCount_outParamList_length", queryResGetStudentGroupWithdrawnCount_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupWithdrawnCount_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentGroupWithdrawnCount_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentGroupWithdrawnCount_outParamList_eof", tmpeofqueryResGetStudentGroupWithdrawnCount_outParamList, false);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("inParamSessionID", inParamSessionID, 0);
			ViewStateAttributes.SetInViewState("inParamCourseCode", inParamCourseCode, "");
			ViewStateAttributes.SetInViewState("inParamFromLearnerList", inParamFromLearnerList, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetStudentGroupTransferredCount_outParamList runtime properties state.

				queryResGetStudentGroupTransferredCount_outParamList = new RLStudent_GroupRecordList();
				bool tmpstorequeryResGetStudentGroupTransferredCount_outParamList_empty;
				tmpstorequeryResGetStudentGroupTransferredCount_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupTransferredCount_outParamList_empty", false);
				int tmpstorequeryResGetStudentGroupTransferredCount_outParamList_length;
				tmpstorequeryResGetStudentGroupTransferredCount_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupTransferredCount_outParamList_length", 0);
				while (tmpstorequeryResGetStudentGroupTransferredCount_outParamList_length-- > 0) {
					queryResGetStudentGroupTransferredCount_outParamList.Append(new RCStudent_GroupRecord(null));
				}

				queryResGetStudentGroupTransferredCount_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetStudentGroupTransferredCount_outParamList;
				tmpcurrentrownumberqueryResGetStudentGroupTransferredCount_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupTransferredCount_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentGroupTransferredCount_outParamList;
				tmpeofqueryResGetStudentGroupTransferredCount_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupTransferredCount_outParamList_eof", false);
				queryResGetStudentGroupTransferredCount_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentGroupTransferredCount_outParamList, tmpeofqueryResGetStudentGroupTransferredCount_outParamList);
				queryResGetStudentGroupTransferredCount_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetStudentGroupTransferredCount_outParamList_empty);

				#endregion


				#region fetch queryResGetStudentGroupActiveCount_outParamList runtime properties state.

				queryResGetStudentGroupActiveCount_outParamList = new RLStudent_GroupRecordList();
				bool tmpstorequeryResGetStudentGroupActiveCount_outParamList_empty;
				tmpstorequeryResGetStudentGroupActiveCount_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupActiveCount_outParamList_empty", false);
				int tmpstorequeryResGetStudentGroupActiveCount_outParamList_length;
				tmpstorequeryResGetStudentGroupActiveCount_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupActiveCount_outParamList_length", 0);
				while (tmpstorequeryResGetStudentGroupActiveCount_outParamList_length-- > 0) {
					queryResGetStudentGroupActiveCount_outParamList.Append(new RCStudent_GroupRecord(null));
				}

				queryResGetStudentGroupActiveCount_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetStudentGroupActiveCount_outParamList;
				tmpcurrentrownumberqueryResGetStudentGroupActiveCount_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupActiveCount_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentGroupActiveCount_outParamList;
				tmpeofqueryResGetStudentGroupActiveCount_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupActiveCount_outParamList_eof", false);
				queryResGetStudentGroupActiveCount_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentGroupActiveCount_outParamList, tmpeofqueryResGetStudentGroupActiveCount_outParamList);
				queryResGetStudentGroupActiveCount_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetStudentGroupActiveCount_outParamList_empty);

				#endregion


				#region fetch queryResGetStudentGroupCompletedCount_outParamList runtime properties state.

				queryResGetStudentGroupCompletedCount_outParamList = new RLStudent_GroupRecordList();
				bool tmpstorequeryResGetStudentGroupCompletedCount_outParamList_empty;
				tmpstorequeryResGetStudentGroupCompletedCount_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupCompletedCount_outParamList_empty", false);
				int tmpstorequeryResGetStudentGroupCompletedCount_outParamList_length;
				tmpstorequeryResGetStudentGroupCompletedCount_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupCompletedCount_outParamList_length", 0);
				while (tmpstorequeryResGetStudentGroupCompletedCount_outParamList_length-- > 0) {
					queryResGetStudentGroupCompletedCount_outParamList.Append(new RCStudent_GroupRecord(null));
				}

				queryResGetStudentGroupCompletedCount_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetStudentGroupCompletedCount_outParamList;
				tmpcurrentrownumberqueryResGetStudentGroupCompletedCount_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupCompletedCount_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentGroupCompletedCount_outParamList;
				tmpeofqueryResGetStudentGroupCompletedCount_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupCompletedCount_outParamList_eof", false);
				queryResGetStudentGroupCompletedCount_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentGroupCompletedCount_outParamList, tmpeofqueryResGetStudentGroupCompletedCount_outParamList);
				queryResGetStudentGroupCompletedCount_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetStudentGroupCompletedCount_outParamList_empty);

				#endregion


				#region fetch queryResGetStudentGroupWithdrawnCount_outParamList runtime properties state.

				queryResGetStudentGroupWithdrawnCount_outParamList = new RLStudent_GroupRecordList();
				bool tmpstorequeryResGetStudentGroupWithdrawnCount_outParamList_empty;
				tmpstorequeryResGetStudentGroupWithdrawnCount_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupWithdrawnCount_outParamList_empty", false);
				int tmpstorequeryResGetStudentGroupWithdrawnCount_outParamList_length;
				tmpstorequeryResGetStudentGroupWithdrawnCount_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupWithdrawnCount_outParamList_length", 0);
				while (tmpstorequeryResGetStudentGroupWithdrawnCount_outParamList_length-- > 0) {
					queryResGetStudentGroupWithdrawnCount_outParamList.Append(new RCStudent_GroupRecord(null));
				}

				queryResGetStudentGroupWithdrawnCount_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetStudentGroupWithdrawnCount_outParamList;
				tmpcurrentrownumberqueryResGetStudentGroupWithdrawnCount_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupWithdrawnCount_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentGroupWithdrawnCount_outParamList;
				tmpeofqueryResGetStudentGroupWithdrawnCount_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentGroupWithdrawnCount_outParamList_eof", false);
				queryResGetStudentGroupWithdrawnCount_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentGroupWithdrawnCount_outParamList, tmpeofqueryResGetStudentGroupWithdrawnCount_outParamList);
				queryResGetStudentGroupWithdrawnCount_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetStudentGroupWithdrawnCount_outParamList_empty);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				inParamSessionID = (int) ViewStateAttributes.GetFromViewState("inParamSessionID", 0);
				inParamCourseCode = (string) ViewStateAttributes.GetFromViewState("inParamCourseCode", "");
				inParamFromLearnerList = (bool) ViewStateAttributes.GetFromViewState("inParamFromLearnerList", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
