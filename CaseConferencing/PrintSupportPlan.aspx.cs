/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearner_InitialAssessment {

	public class ScrnPrintSupportPlan: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnPrintSupportPlan(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamRiskAssessmentID. Description:
		/// </summary>
		public int inParamRiskAssessmentID = 0;
		protected OutSystems.HubEdition.WebWidgets.Container wtMainWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wtReportTitle;
		protected OutSystems.HubEdition.WebWidgets.Container wtSection_StudentDetails;
		protected OutSystems.HubEdition.WebWidgets.Container wtSection_ReasonForSupportPlan;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		protected OutSystems.HubEdition.WebWidgets.Container wtSection_RiskAssessmentCompletedBy;
		protected OutSystems.HubEdition.WebWidgets.Container wtSection_SourceOfEvidence;
		protected OutSystems.HubEdition.WebWidgets.Container wtSection_HasCapacity;
		protected OutSystems.HubEdition.WebWidgets.Container wtSection_Risks;
		private RLRiskAssessementRisksRecordList _ssList_WhatAreTheRisksList = new RLRiskAssessementRisksRecordList();
		public RLRiskAssessementRisksRecordList ssList_WhatAreTheRisksList {
			get {
				return _ssList_WhatAreTheRisksList; 
			}
			set {
				_ssList_WhatAreTheRisksList = value;
				wtList_WhatAreTheRisks.DataSource = value;
				ssList_WhatAreTheRisksListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtList_WhatAreTheRisks;
		public ArrayList wtList_WhatAreTheRisks_storage = new ArrayList();
		protected bool ssList_WhatAreTheRisksList_notUsedYet = true;
		protected bool ssList_WhatAreTheRisksListDoDataBind;
		protected bool ssList_WhatAreTheRisksListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtSection_ManagementOfSupport;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container85;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container122;
		/// <summary>
		/// Variable (wt_Link3) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link3;
		private RLRiskAssessmentManagementOfSupportRecordList _ssList_ManagementOfSupportList = new RLRiskAssessmentManagementOfSupportRecordList();
		public RLRiskAssessmentManagementOfSupportRecordList ssList_ManagementOfSupportList {
			get {
				return _ssList_ManagementOfSupportList; 
			}
			set {
				_ssList_ManagementOfSupportList = value;
				wtList_ManagementOfSupport.DataSource = value;
				ssList_ManagementOfSupportListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtList_ManagementOfSupport;
		public ArrayList wtList_ManagementOfSupport_storage = new ArrayList();
		protected bool ssList_ManagementOfSupportList_notUsedYet = true;
		protected bool ssList_ManagementOfSupportListDoDataBind;
		protected bool ssList_ManagementOfSupportListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtSection_ExternalContacts;
		private RLRiskAssessmentExternalContactsRecordList _ssList_ExternalContactsList = new RLRiskAssessmentExternalContactsRecordList();
		public RLRiskAssessmentExternalContactsRecordList ssList_ExternalContactsList {
			get {
				return _ssList_ExternalContactsList; 
			}
			set {
				_ssList_ExternalContactsList = value;
				wtList_ExternalContacts.DataSource = value;
				ssList_ExternalContactsListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtList_ExternalContacts;
		public ArrayList wtList_ExternalContacts_storage = new ArrayList();
		protected bool ssList_ExternalContactsList_notUsedYet = true;
		protected bool ssList_ExternalContactsListDoDataBind;
		protected bool ssList_ExternalContactsListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtSection_KeepInformed;
		private RLUserRiskAssessmentKeepInformedRecordList _ssList_KeepInformedList = new RLUserRiskAssessmentKeepInformedRecordList();
		public RLUserRiskAssessmentKeepInformedRecordList ssList_KeepInformedList {
			get {
				return _ssList_KeepInformedList; 
			}
			set {
				_ssList_KeepInformedList = value;
				wtList_KeepInformed.DataSource = value;
				ssList_KeepInformedListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtList_KeepInformed;
		public ArrayList wtList_KeepInformed_storage = new ArrayList();
		protected bool ssList_KeepInformedList_notUsedYet = true;
		protected bool ssList_KeepInformedListDoDataBind;
		protected bool ssList_KeepInformedListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wtSection_Signatures;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("Ogzx49YtXEaH5j4AFp45rg", "PrintSupportPlan");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "Ogzx49YtXEaH5j4AFp45rg", "PrintSupportPlan");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "Ogzx49YtXEaH5j4AFp45rg", "PrintSupportPlan");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "Ogzx49YtXEaH5j4AFp45rg", "PrintSupportPlan");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "Ogzx49YtXEaH5j4AFp45rg", "PrintSupportPlan");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnPrintSupportPlan() {
		}


		RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList = new RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
		int queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamCount = 0;
		RLRiskAssessmentExternalContactsRecordList queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = new RLRiskAssessmentExternalContactsRecordList();
		int queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamCount = 0;
		RLUserRiskAssessmentKeepInformedRecordList queryResGetRiskAssessmentKeepInformedsWithOrWithoutUsers_outParamList = new RLUserRiskAssessmentKeepInformedRecordList();
		int queryResGetRiskAssessmentKeepInformedsWithOrWithoutUsers_outParamCount = 0;
		RLRiskAssessmentManagementOfSupportRecordList queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = new RLRiskAssessmentManagementOfSupportRecordList();
		int queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamCount = 0;
		RLRiskAssessementRisksRecordList queryResGetRiskAssessementRisksByRiskAssessment_outParamList = new RLRiskAssessementRisksRecordList();
		int queryResGetRiskAssessementRisksByRiskAssessment_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc
			int datasetGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_maxRecords = 0;
			queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList = FuncssPreparation.datasetGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc(heContext, datasetGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_maxRecords, IterationMultiplicity.Never, out queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamCount, inParamRiskAssessmentID
			);
			// Query datasetGetRiskAssessementRisksByRiskAssessment
			int datasetGetRiskAssessementRisksByRiskAssessment_maxRecords = Math.Max(wtList_WhatAreTheRisks.StartIndex + wtList_WhatAreTheRisks.LineCount + 1, 0);
			queryResGetRiskAssessementRisksByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessementRisksByRiskAssessment(heContext, datasetGetRiskAssessementRisksByRiskAssessment_maxRecords, IterationMultiplicity.Single, out queryResGetRiskAssessementRisksByRiskAssessment_outParamCount, inParamRiskAssessmentID
			);
			// Query datasetGetRiskAssessmentExternalContactsByRiskAssessment
			int datasetGetRiskAssessmentExternalContactsByRiskAssessment_maxRecords = Math.Max(wtList_ExternalContacts.StartIndex + wtList_ExternalContacts.LineCount + 1, 0);
			queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessmentExternalContactsByRiskAssessment(heContext, datasetGetRiskAssessmentExternalContactsByRiskAssessment_maxRecords, IterationMultiplicity.Single, out queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamCount, inParamRiskAssessmentID
			);
			// Query datasetGetRiskAssessmentKeepInformedsWithOrWithoutUsers
			int datasetGetRiskAssessmentKeepInformedsWithOrWithoutUsers_maxRecords = Math.Max(wtList_KeepInformed.StartIndex + wtList_KeepInformed.LineCount + 1, 0);
			queryResGetRiskAssessmentKeepInformedsWithOrWithoutUsers_outParamList = FuncssPreparation.datasetGetRiskAssessmentKeepInformedsWithOrWithoutUsers(heContext, datasetGetRiskAssessmentKeepInformedsWithOrWithoutUsers_maxRecords, IterationMultiplicity.Single, out queryResGetRiskAssessmentKeepInformedsWithOrWithoutUsers_outParamCount, inParamRiskAssessmentID
			);
			// Query datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm
			int datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm_maxRecords = Math.Max(wtList_ManagementOfSupport.StartIndex + wtList_ManagementOfSupport.LineCount + 1, 0);
			queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList = FuncssPreparation.datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm(heContext, datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm_maxRecords, IterationMultiplicity.Single, out queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamCount, inParamRiskAssessmentID
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "PrintSupportPlan.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "PrintSupportPlan.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamRiskAssessmentID!=0)) {
				parameters.Add(new Pair<string, string>("RiskAssessmentID", HttpUtility.UrlEncode(Convert.ToString(inParamRiskAssessmentID), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "PrintSupportPlan", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "PrintSupportPlan", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wtList_WhatAreTheRisks.StartIndexExpression = () => 0;
			wtList_WhatAreTheRisks.LineCountExpression = () => 50;
			wtList_WhatAreTheRisks.EmptyMessageExpression = () => "No risks specified.";
			wtList_ManagementOfSupport.StartIndexExpression = () => 0;
			wtList_ManagementOfSupport.LineCountExpression = () => 50;
			wtList_ManagementOfSupport.EmptyMessageExpression = () => "No items to show...";
			wtList_ExternalContacts.StartIndexExpression = () => 0;
			wtList_ExternalContacts.LineCountExpression = () => 50;
			wtList_ExternalContacts.EmptyMessageExpression = () => "No items to show...";
			wtList_KeepInformed.StartIndexExpression = () => 0;
			wtList_KeepInformed.LineCountExpression = () => 50;
			wtList_KeepInformed.EmptyMessageExpression = () => "No items to show...";
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_PrintSupportPlan"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamRiskAssessmentID = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_PrintSupportPlan"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["RiskAssessmentID"] != null) {
						inParamRiskAssessmentID = Convert.ToInt32(Request.QueryString["RiskAssessmentID"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["RiskAssessmentID"] != null) {
						inParamRiskAssessmentID = Convert.ToInt32(Request.Form["RiskAssessmentID"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssList_WhatAreTheRisksListDoDataBind = true;
				ssList_ManagementOfSupportListDoDataBind = true;
				ssList_ExternalContactsListDoDataBind = true;
				ssList_KeepInformedListDoDataBind = true;
				Title = "PrintSupportPlan"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "PrintSupportPlan", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, false);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearner_InitialAssessment.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			return;
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("Ogzx49YtXEaH5j4AFp45rg"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// wtMainWrapper Functions
		/// </summary>
		public void cntMainWrapper_onDataBinding(object sender, System.EventArgs e) {
			cntMainWrapper_setInlineAttributes(sender, e);
		}
		public string cntMainWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntMainWrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtMainWrapper)
		/// </summary>
		/// <returns>The Visible State of wtMainWrapper</returns>
		public bool cntMainWrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wtReportTitle Functions
		/// </summary>
		public void cntReportTitle_onDataBinding(object sender, System.EventArgs e) {
			cntReportTitle_setInlineAttributes(sender, e);
		}
		public string cntReportTitle_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntReportTitle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtReportTitle)
		/// </summary>
		/// <returns>The Visible State of wtReportTitle</returns>
		public bool cntReportTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// wtSection_StudentDetails Functions
		/// </summary>
		public void cntSection_StudentDetails_onDataBinding(object sender, System.EventArgs e) {
			cntSection_StudentDetails_setInlineAttributes(sender, e);
		}
		public string cntSection_StudentDetails_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSection_StudentDetails_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSection_StudentDetails)
		/// </summary>
		/// <returns>The Visible State of wtSection_StudentDetails</returns>
		public bool cntSection_StudentDetails_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression22 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = euRkIV0klUGSfqEBwRjB6w) Expression: Trim + " " +
		///  GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List.Current.Student.Surname
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression22() {
			return ((BuiltInFunction.Trim(queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENStudent.ssForenames) + " ") +queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENStudent.ssSurname);
		}
		/// <summary>
		/// wt_InlineExpression18 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = U8dAHBK0q0aNks0LDXf96g) Expression:
		///  GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List.Current.RiskAssessment.StudentReference
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression18() {
			return queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssStudentReference;
		}
		/// <summary>
		/// wt_InlineExpression39 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = IcdnSK2WckCrKq1u+VDKmg) Expression: FormatFullDate
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression39() {
			return BuiltInFunction.FormatFullDate(queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENStudent.ssDateOfBirth, " ");
		}
		/// <summary>
		/// wt_InlineExpression33 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = TI4FN45AE06taBBuL6Pcag) Expression: Trim
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression33() {
			return BuiltInFunction.Trim(queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENStudent.ssPersonalTutor);
		}
		/// <summary>
		/// wtSection_ReasonForSupportPlan Functions
		/// </summary>
		public void cntSection_ReasonForSupportPlan_onDataBinding(object sender, System.EventArgs e) {
			cntSection_ReasonForSupportPlan_setInlineAttributes(sender, e);
		}
		public string cntSection_ReasonForSupportPlan_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSection_ReasonForSupportPlan_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSection_ReasonForSupportPlan)
		/// </summary>
		/// <returns>The Visible State of wtSection_ReasonForSupportPlan</returns>
		public bool cntSection_ReasonForSupportPlan_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container12 Functions
		/// </summary>
		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container12_setInlineAttributes(sender, e);
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container12_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression100 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = voa3uvGZfEuZR2HPdvbr7A) Expression:
		///  GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List.Current.RiskAssessmentSSPReason.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression100() {
			return queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessmentSSPReason.ssLabel;
		}
		/// <summary>
		/// wt_InlineExpression54 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = gtArZ5seYk+dyDNnNfZESA) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression54() {
			return (((queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessmentSSPReason.ssId==ENRiskAssessmentSSPReasonEntity.GetRecordByKey(ObjectKey.Parse("gjJCnOQKTU6D+Eck7UO4kw")).ssId)) ?(((" (" +queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther) + ")")):(""));
		}
		/// <summary>
		/// wtSection_RiskAssessmentCompletedBy Functions
		/// </summary>
		public void cntSection_RiskAssessmentCompletedBy_onDataBinding(object sender, System.EventArgs e) {
			cntSection_RiskAssessmentCompletedBy_setInlineAttributes(sender, e);
		}
		public string cntSection_RiskAssessmentCompletedBy_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSection_RiskAssessmentCompletedBy_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSection_RiskAssessmentCompletedBy)
		/// </summary>
		/// <returns>The Visible State of wtSection_RiskAssessmentCompletedBy</returns>
		public bool cntSection_RiskAssessmentCompletedBy_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression19 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = c9pIHH4JhEehNS1T+NTo1w) Expression:
		///  GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List.Current.User.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression19() {
			return queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENUser.ssName;
		}
		/// <summary>
		/// wtSection_SourceOfEvidence Functions
		/// </summary>
		public void cntSection_SourceOfEvidence_onDataBinding(object sender, System.EventArgs e) {
			cntSection_SourceOfEvidence_setInlineAttributes(sender, e);
		}
		public string cntSection_SourceOfEvidence_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSection_SourceOfEvidence_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSection_SourceOfEvidence)
		/// </summary>
		/// <returns>The Visible State of wtSection_SourceOfEvidence</returns>
		public bool cntSection_SourceOfEvidence_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression123 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Qtcl2P30KUWAHO6zYlc5HQ) Expression:
		///  GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List.Current.RiskAssessmentSourceOfEvidence.Labe
		/// l
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression123() {
			return queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessmentSourceOfEvidence.ssLabel;
		}
		/// <summary>
		/// wt_InlineExpression24 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = C05MI8klVUanRY2ZIypjLg) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression24() {
			return (((queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessmentSourceOfEvidence.ssId==ENRiskAssessmentSourceOfEvidenceEntity.GetRecordByKey(ObjectKey.Parse("q+l1Yex+2EWLD7nBpdOgmg")).ssId)) ?(((" (" +queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentSOEOther) + ")")):(""));
		}
		/// <summary>
		/// wtSection_HasCapacity Functions
		/// </summary>
		public void cntSection_HasCapacity_onDataBinding(object sender, System.EventArgs e) {
			cntSection_HasCapacity_setInlineAttributes(sender, e);
		}
		public string cntSection_HasCapacity_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSection_HasCapacity_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSection_HasCapacity)
		/// </summary>
		/// <returns>The Visible State of wtSection_HasCapacity</returns>
		public bool cntSection_HasCapacity_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression20 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = J_kRHvrOkkG7JDfbOTwpqQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression20() {
			return ((queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacity) ?("Yes"):("No"));
		}
		/// <summary>
		/// wt_InlineExpression86 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = bIC4o_IqlECxZ6Gq4OTYWQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression86() {
			return (((!queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacity)) ?("Evidence if no : "):(""));
		}
		/// <summary>
		/// wt_InlineExpression61 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = HcI8c0xGhk+c7w_CaiNsZw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression61() {
			return (((!queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacity)) ?(queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssHasCapacityEvidence):(""));
		}
		/// <summary>
		/// wtSection_Risks Functions
		/// </summary>
		public void cntSection_Risks_onDataBinding(object sender, System.EventArgs e) {
			cntSection_Risks_setInlineAttributes(sender, e);
		}
		public string cntSection_Risks_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSection_Risks_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSection_Risks)
		/// </summary>
		/// <returns>The Visible State of wtSection_Risks</returns>
		public bool cntSection_Risks_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression130 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = avqY5Ibp_USEwi5cMSR48g) Expression:
		///  GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List.Current.RiskAssessmentWhoIsAtRisk.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression130() {
			return queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessmentWhoIsAtRisk.ssLabel;
		}
		/// <summary>
		/// wt_InlineExpression117 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 9ZI7zbnWDUKBKvZVmiTgdw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression117() {
			return (((queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk==ENRiskAssessmentWhoIsAtRiskEntity.GetRecordByKey(ObjectKey.Parse("TaL4wRWJU0Om2lz1zmslbg")).ssId)) ?(((" (" +queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssRiskAssessmentWATOther) + ")")):(""));
		}
		/// <summary>
		/// wtList_WhatAreTheRisks Functions
		/// </summary>
		public void recListList_WhatAreTheRisks_onDataBinding(object sender, System.EventArgs e) {
			// widget wtList_WhatAreTheRisks
			ssList_WhatAreTheRisksList = queryResGetRiskAssessementRisksByRiskAssessment_outParamList;
			ssList_WhatAreTheRisksListDoDataBind = false;
			ssList_WhatAreTheRisksListDataBound = true;
		}
		public void recListList_WhatAreTheRisks_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssList_WhatAreTheRisksList.Length > 0) {
					ssList_WhatAreTheRisksList.CurrentRec = ssList_WhatAreTheRisksList[ssList_WhatAreTheRisksList.CurrentRowNumber];
				}
				if (ssList_WhatAreTheRisksList.Length > e.SelectedIndex) {
					ssList_WhatAreTheRisksList.CurrentRec = ssList_WhatAreTheRisksList[e.SelectedIndex];
					ssList_WhatAreTheRisksList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListList_WhatAreTheRisks_Store(object dataItem, int index) {
			return "";
		}
		public void recListList_WhatAreTheRisks_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListList_WhatAreTheRisks_Clear(object sender, EventArgs e) {
			wtList_WhatAreTheRisks_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListList_WhatAreTheRisks_Rebuild(int startIndex, int lineCount) {
			if (ssList_WhatAreTheRisksList.Length != -1) {
				wtList_WhatAreTheRisks_storage.Clear();
				for (int i=startIndex; i<ssList_WhatAreTheRisksList.Data.Count && i<startIndex+lineCount; i++) {
					recListList_WhatAreTheRisks_Store(ssList_WhatAreTheRisksList.Data[i], wtList_WhatAreTheRisks_storage.Count);
				}
			}
		}
		public void recListList_WhatAreTheRisks_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtList_WhatAreTheRisks widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRiskAssessementRisksRecordList getWtList_WhatAreTheRisksList() {
			if (ssList_WhatAreTheRisksListDoDataBind) {
				recListList_WhatAreTheRisks_onDataBinding(this, null);
			}

			return ssList_WhatAreTheRisksList;
		}
		/// <summary>
		/// wt_InlineExpression75 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 6+OnlJOw_0OfJe8PVTnoaw) Expression:
		///  List_WhatAreTheRisks.List.CurrentRowNumber + 1 + ") "
		/// + List_WhatAreTheRisks.List.Current.RiskAssessementRisks.Risk
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression75() {
			return ((Convert.ToString((getWtList_WhatAreTheRisksList().CurrentRowNumber+1)) + ") ") +getWtList_WhatAreTheRisksList().CurrentRec.ssENRiskAssessementRisks.ssRisk);
		}
		/// <summary>
		/// wt_InlineExpression32 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = z1GvNoUuzUOgkwcqtz1WTA) Expression:
		///  GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List.Current.RiskAssessment.History
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression32() {
			return queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssHistory;
		}
		/// <summary>
		/// wt_InlineExpression70 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = tVxqgqWCQkWnME98mA5RYw) Expression:
		///  GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List.Current.RiskAssessment.Monitor
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression70() {
			return queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssMonitor;
		}
		/// <summary>
		/// wtSection_ManagementOfSupport Functions
		/// </summary>
		public void cntSection_ManagementOfSupport_onDataBinding(object sender, System.EventArgs e) {
			cntSection_ManagementOfSupport_setInlineAttributes(sender, e);
		}
		public string cntSection_ManagementOfSupport_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "page-break-after:always;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntSection_ManagementOfSupport_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSection_ManagementOfSupport)
		/// </summary>
		/// <returns>The Visible State of wtSection_ManagementOfSupport</returns>
		public bool cntSection_ManagementOfSupport_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container85 Functions
		/// </summary>
		public void cnt_Container85_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container85_setInlineAttributes(sender, e);
		}
		public string cnt_Container85_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container85_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container85)
		/// </summary>
		/// <returns>The Visible State of wt_Container85</returns>
		public bool cnt_Container85_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression16 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = ReAmF05sC0CzadXWs5Ge5A) Expression:
		///  GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List.Current.RiskAssessment.WhatHappensRiskIncre
		/// ases
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression16() {
			return queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssWhatHappensRiskIncreases;
		}
		/// <summary>
		/// wt_Container122 Functions
		/// </summary>
		public void cnt_Container122_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container122_setInlineAttributes(sender, e);
		}
		public string cnt_Container122_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container122_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container122)
		/// </summary>
		/// <returns>The Visible State of wt_Container122</returns>
		public bool cnt_Container122_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Link3 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link3)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link3)</returns>
		public string lnk_Link3_NavigateUrl() {
			String varLcinParamURL = "";
			varLcinParamURL = "mailto:mike.carnall@cornwall.ac.uk";
			string sURL = varLcinParamURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link3)
		/// </summary>
		/// <returns>title of the Link (wt_Link3)</returns>
		public string
		lnk_Link3_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link3)
		/// </summary>
		/// <returns>The Visible State of wt_Link3</returns>
		public bool lnk_Link3_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link3)
		/// </summary>
		/// <returns>The Enabled State of wt_Link3</returns>
		public bool lnk_Link3_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtList_ManagementOfSupport Functions
		/// </summary>
		public void recListList_ManagementOfSupport_onDataBinding(object sender, System.EventArgs e) {
			// widget wtList_ManagementOfSupport
			ssList_ManagementOfSupportList = queryResGetRiskAssessmentManagementOfSupportsByRiskAssessm_outParamList;
			ssList_ManagementOfSupportListDoDataBind = false;
			ssList_ManagementOfSupportListDataBound = true;
		}
		public void recListList_ManagementOfSupport_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssList_ManagementOfSupportList.Length > 0) {
					ssList_ManagementOfSupportList.CurrentRec = ssList_ManagementOfSupportList[ssList_ManagementOfSupportList.CurrentRowNumber];
				}
				if (ssList_ManagementOfSupportList.Length > e.SelectedIndex) {
					ssList_ManagementOfSupportList.CurrentRec = ssList_ManagementOfSupportList[e.SelectedIndex];
					ssList_ManagementOfSupportList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListList_ManagementOfSupport_Store(object dataItem, int index) {
			return "";
		}
		public void recListList_ManagementOfSupport_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListList_ManagementOfSupport_Clear(object sender, EventArgs e) {
			wtList_ManagementOfSupport_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListList_ManagementOfSupport_Rebuild(int startIndex, int lineCount) {
			if (ssList_ManagementOfSupportList.Length != -1) {
				wtList_ManagementOfSupport_storage.Clear();
				for (int i=startIndex; i<ssList_ManagementOfSupportList.Data.Count && i<startIndex+lineCount; i++) {
					recListList_ManagementOfSupport_Store(ssList_ManagementOfSupportList.Data[i], wtList_ManagementOfSupport_storage.Count);
				}
			}
		}
		public void recListList_ManagementOfSupport_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtList_ManagementOfSupport widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRiskAssessmentManagementOfSupportRecordList getWtList_ManagementOfSupportList() {
			if (ssList_ManagementOfSupportListDoDataBind) {
				recListList_ManagementOfSupport_onDataBinding(this, null);
			}

			return ssList_ManagementOfSupportList;
		}
		/// <summary>
		/// wt_InlineExpression143 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = hJ93+FGPbUyGAgFaK3tE0Q) Expression:
		///  List_ManagementOfSupport.List.CurrentRowNumber + 1 + ") "
		/// + List_ManagementOfSupport.List.Current.RiskAssessmentManagementOfSupport.ManagementOfSupport
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression143() {
			return ((Convert.ToString((getWtList_ManagementOfSupportList().CurrentRowNumber+1)) + ") ") +getWtList_ManagementOfSupportList().CurrentRec.ssENRiskAssessmentManagementOfSupport.ssManagementOfSupport);
		}
		/// <summary>
		/// wtSection_ExternalContacts Functions
		/// </summary>
		public void cntSection_ExternalContacts_onDataBinding(object sender, System.EventArgs e) {
			cntSection_ExternalContacts_setInlineAttributes(sender, e);
		}
		public string cntSection_ExternalContacts_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSection_ExternalContacts_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSection_ExternalContacts)
		/// </summary>
		/// <returns>The Visible State of wtSection_ExternalContacts</returns>
		public bool cntSection_ExternalContacts_isVisible() {
			return true;
		}

		/// <summary>
		/// wtList_ExternalContacts Functions
		/// </summary>
		public void recListList_ExternalContacts_onDataBinding(object sender, System.EventArgs e) {
			// widget wtList_ExternalContacts
			ssList_ExternalContactsList = queryResGetRiskAssessmentExternalContactsByRiskAssessment_outParamList;
			ssList_ExternalContactsListDoDataBind = false;
			ssList_ExternalContactsListDataBound = true;
		}
		public void recListList_ExternalContacts_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssList_ExternalContactsList.Length > 0) {
					ssList_ExternalContactsList.CurrentRec = ssList_ExternalContactsList[ssList_ExternalContactsList.CurrentRowNumber];
				}
				if (ssList_ExternalContactsList.Length > e.SelectedIndex) {
					ssList_ExternalContactsList.CurrentRec = ssList_ExternalContactsList[e.SelectedIndex];
					ssList_ExternalContactsList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListList_ExternalContacts_Store(object dataItem, int index) {
			return "";
		}
		public void recListList_ExternalContacts_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListList_ExternalContacts_Clear(object sender, EventArgs e) {
			wtList_ExternalContacts_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListList_ExternalContacts_Rebuild(int startIndex, int lineCount) {
			if (ssList_ExternalContactsList.Length != -1) {
				wtList_ExternalContacts_storage.Clear();
				for (int i=startIndex; i<ssList_ExternalContactsList.Data.Count && i<startIndex+lineCount; i++) {
					recListList_ExternalContacts_Store(ssList_ExternalContactsList.Data[i], wtList_ExternalContacts_storage.Count);
				}
			}
		}
		public void recListList_ExternalContacts_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtList_ExternalContacts widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRiskAssessmentExternalContactsRecordList getWtList_ExternalContactsList() {
			if (ssList_ExternalContactsListDoDataBind) {
				recListList_ExternalContacts_onDataBinding(this, null);
			}

			return ssList_ExternalContactsList;
		}
		/// <summary>
		/// wt_InlineExpression108 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 1N52w0SCi0OVM0jswlBGSw) Expression:
		///  List_ExternalContacts.List.CurrentRowNumber + 1 + ") "
		/// + List_ExternalContacts.List.Current.RiskAssessmentExternalContacts.ExternalContact
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression108() {
			return ((Convert.ToString((getWtList_ExternalContactsList().CurrentRowNumber+1)) + ") ") +getWtList_ExternalContactsList().CurrentRec.ssENRiskAssessmentExternalContacts.ssExternalContact);
		}
		/// <summary>
		/// wtSection_KeepInformed Functions
		/// </summary>
		public void cntSection_KeepInformed_onDataBinding(object sender, System.EventArgs e) {
			cntSection_KeepInformed_setInlineAttributes(sender, e);
		}
		public string cntSection_KeepInformed_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSection_KeepInformed_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSection_KeepInformed)
		/// </summary>
		/// <returns>The Visible State of wtSection_KeepInformed</returns>
		public bool cntSection_KeepInformed_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression57 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = +xYKaf4WIk2YT6NRbkjpCQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression57() {
			return (((queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate!=BuiltInFunction.NullDate())) ?(BuiltInFunction.FormatFullDate(queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssAutumnReviewDate, " ")):("Not set."));
		}
		/// <summary>
		/// wt_InlineExpression112 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = SOWuxifZXEKZPc8K8DKNzQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression112() {
			return (((queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate!=BuiltInFunction.NullDate())) ?(BuiltInFunction.FormatFullDate(queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssSpringReviewDate, " ")):("Not set."));
		}
		/// <summary>
		/// wt_InlineExpression68 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 4Jm5gEBxDka7FuwmLCdSLQ) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression68() {
			return (((queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate!=BuiltInFunction.NullDate())) ?(BuiltInFunction.FormatFullDate(queryResGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc_outParamList.CurrentRec.ssENRiskAssessment.ssSummerReviewDate, " ")):("Not set."));
		}
		/// <summary>
		/// wtList_KeepInformed Functions
		/// </summary>
		public void recListList_KeepInformed_onDataBinding(object sender, System.EventArgs e) {
			// widget wtList_KeepInformed
			ssList_KeepInformedList = queryResGetRiskAssessmentKeepInformedsWithOrWithoutUsers_outParamList;
			ssList_KeepInformedListDoDataBind = false;
			ssList_KeepInformedListDataBound = true;
		}
		public void recListList_KeepInformed_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssList_KeepInformedList.Length > 0) {
					ssList_KeepInformedList.CurrentRec = ssList_KeepInformedList[ssList_KeepInformedList.CurrentRowNumber];
				}
				if (ssList_KeepInformedList.Length > e.SelectedIndex) {
					ssList_KeepInformedList.CurrentRec = ssList_KeepInformedList[e.SelectedIndex];
					ssList_KeepInformedList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListList_KeepInformed_Store(object dataItem, int index) {
			return "";
		}
		public void recListList_KeepInformed_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListList_KeepInformed_Clear(object sender, EventArgs e) {
			wtList_KeepInformed_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListList_KeepInformed_Rebuild(int startIndex, int lineCount) {
			if (ssList_KeepInformedList.Length != -1) {
				wtList_KeepInformed_storage.Clear();
				for (int i=startIndex; i<ssList_KeepInformedList.Data.Count && i<startIndex+lineCount; i++) {
					recListList_KeepInformed_Store(ssList_KeepInformedList.Data[i], wtList_KeepInformed_storage.Count);
				}
			}
		}
		public void recListList_KeepInformed_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtList_KeepInformed widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLUserRiskAssessmentKeepInformedRecordList getWtList_KeepInformedList() {
			if (ssList_KeepInformedListDoDataBind) {
				recListList_KeepInformed_onDataBinding(this, null);
			}

			return ssList_KeepInformedList;
		}
		/// <summary>
		/// wt_InlineExpression43 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = waokSmx4Vk+Gnm6PC7MC4Q) Expression:
		///  List_KeepInformed.List.CurrentRowNumber + 1 + ") " + List_KeepInformed.List.Current.User.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression43() {
			return ((Convert.ToString((getWtList_KeepInformedList().CurrentRowNumber+1)) + ") ") +getWtList_KeepInformedList().CurrentRec.ssENUser.ssName);
		}
		/// <summary>
		/// wtSection_Signatures Functions
		/// </summary>
		public void cntSection_Signatures_onDataBinding(object sender, System.EventArgs e) {
			cntSection_Signatures_setInlineAttributes(sender, e);
		}
		public string cntSection_Signatures_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSection_Signatures_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSection_Signatures)
		/// </summary>
		/// <returns>The Visible State of wtSection_Signatures</returns>
		public bool cntSection_Signatures_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_TableCell134 Functions
		/// </summary>
		public void wt_TableCell134_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell134_setInlineAttributes(sender, e);
		}
		public string wt_TableCell134_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: bottom";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell52 Functions
		/// </summary>
		public void wt_TableCell52_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell52_setInlineAttributes(sender, e);
		}
		public string wt_TableCell52_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: bottom";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell89 Functions
		/// </summary>
		public void wt_TableCell89_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell89_setInlineAttributes(sender, e);
		}
		public string wt_TableCell89_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: bottom";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_TableCell115 Functions
		/// </summary>
		public void wt_TableCell115_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell115_setInlineAttributes(sender, e);
		}
		public string wt_TableCell115_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: bottom";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}


		public static class FuncssPreparation {

			private static void datasetGetRiskAssessmentsWithOrWithoutRiskAssessmentSourcReadDB(ref RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRiskAssessment.Read(r, ref index);
				rec.ssENRiskAssessmentSourceOfEvidence.Read(r, ref index);
				rec.ssENRiskAssessmentSSPReason.Read(r, ref index);
				rec.ssENRiskAssessmentWhoIsAtRisk.Read(r, ref index);
				rec.ssENStudent.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc" of Action "Preparation"
			/// </summary>
			public static RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList datasetGetRiskAssessmentsWithOrWithoutRiskAssessmentSourc(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, ENRiskAssessment.[STUDENTREFERENCE] o2, NULL o3, NULL o4, ENRiskAssessment.[RISKASSESSMENTSSPREASONOTHER] o5, NULL o6, NULL o7, ENRiskAssessment.[RISKASSESSMENTSOEOTHER] o8, ENRiskAssessment.[HASCAPACITY] o9, ENRiskAssessment.[HASCAPACITYEVIDENCE] o10, ENRiskAssessment.[RISKASSESSMENTWHOISATRISK] o11, ENRiskAssessment.[RISKASSESSMENTWATOTHER] o12, NULL o13, ENRiskAssessment.[HISTORY] o14, ENRiskAssessment.[MONITOR] o15, ENRiskAssessment.[WHATHAPPENSRISKINCREASES] o16, ENRiskAssessment.[AUTUMNREVIEWDATE] o17, ENRiskAssessment.[SPRINGREVIEWDATE] o18, ENRiskAssessment.[SUMMERREVIEWDATE] o19, NULL o20, NULL o21, NULL o22, ENRiskAssessmentSourceOfEvidence.[ID] o23, ENRiskAssessmentSourceOfEvidence.[LABEL] o24, NULL o25, NULL o26, ENRiskAssessmentSSPReason.[ID] o27, ENRiskAssessmentSSPReason.[LABEL] o28, NULL o29, NULL o30, NULL o31, ENRiskAssessmentWhoIsAtRisk.[LABEL] o32, NULL o33, NULL o34, NULL o35, ENStudent.[FORENAMES] o36, ENStudent.[SURNAME] o37, ENStudent.[DATEOFBIRTH] o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, ENStudent.[PERSONALTUTOR] o55, NULL o56, NULL o57, NULL o58, NULL o59, NULL o60, NULL o61, NULL o62, ENUser.[NAME] o63, NULL o64, NULL o65, NULL o66, NULL o67, NULL o68, NULL o69, NULL o70, NULL o71");
				fromBuilder.Append(" FROM ((((({RiskAssessment} ENRiskAssessment Left JOIN {RiskAssessmentSourceOfEvidence} ENRiskAssessmentSourceOfEvidence ON (ENRiskAssessment.[RISKASSESSMENTSOURCEOFEVIDEN] = ENRiskAssessmentSourceOfEvidence.[ID]))  Left JOIN {RiskAssessmentSSPReason} ENRiskAssessmentSSPReason ON (ENRiskAssessment.[RISKASSESSMENTSSPREASON] = ENRiskAssessmentSSPReason.[ID]))  Left JOIN {RiskAssessmentWhoIsAtRisk} ENRiskAssessmentWhoIsAtRisk ON (ENRiskAssessment.[RISKASSESSMENTWHOISATRISK] = ENRiskAssessmentWhoIsAtRisk.[ID]))  Left JOIN {Student} ENStudent ON (ENRiskAssessment.[STUDENTREFERENCE] = ENStudent.[STUDENTREFERENCE]))  Left JOIN {User} ENUser ON (ENRiskAssessment.[RISKASSESSMENTCOMPLETEDBY] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessment.[ID] = @qpinP) AND (ENRiskAssessment.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessment.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENRiskAssessment.[LEADSTAFFMEMBER] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList outParamList = new RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetRiskAssessmentsWithOrWithoutRiskAssessmentSourcReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[6];
				opt[0] = new BitArray(new bool[] {
					true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, false, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					true, false, true, true
				}
				);
				opt[4] = new BitArray(new bool[] {
					false, false, true, true
				}
				);
				opt[5] = new BitArray(new bool[] {
					true, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList _tmp = new RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
					_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentsWithOrWithoutRiskAssessmentSourcReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List");
						outParamList = (RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList _tmp = new RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList();
						_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentsWithOrWithoutRiskAssessmentSourcReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List");
							outParamList = (RLStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentsWithOrWithoutRiskAssessmentSourc.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetRiskAssessmentExternalContactsByRiskAssessment" of Action "Preparation"
			/// </summary>
			public static RLRiskAssessmentExternalContactsRecordList datasetGetRiskAssessmentExternalContactsByRiskAssessment(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {List_ExternalContacts}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENRiskAssessmentExternalContacts.[EXTERNALCONTACT] o3");
				fromBuilder.Append(" FROM {RiskAssessmentExternalContacts} ENRiskAssessmentExternalContacts");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentExternalContacts.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentExternalContacts.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentExternalContacts.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentExternalContactsRecordList outParamList = new RLRiskAssessmentExternalContactsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentExternalContactsRecordList _tmp = new RLRiskAssessmentExternalContactsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentExternalContactsByRiskAssessment.List");
						outParamList = (RLRiskAssessmentExternalContactsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentExternalContactsByRiskAssessment.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentExternalContactsRecordList _tmp = new RLRiskAssessmentExternalContactsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentExternalContactsByRiskAssessment.List");
							outParamList = (RLRiskAssessmentExternalContactsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentExternalContactsByRiskAssessment.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetRiskAssessmentKeepInformedsWithOrWithoutUsersReadDB(ref RCUserRiskAssessmentKeepInformedRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRiskAssessmentKeepInformed.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetRiskAssessmentKeepInformedsWithOrWithoutUsers" of Action "Preparation"
			/// </summary>
			public static RLUserRiskAssessmentKeepInformedRecordList datasetGetRiskAssessmentKeepInformedsWithOrWithoutUsers(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {List_KeepInformed}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, ENUser.[NAME] o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13");
				fromBuilder.Append(" FROM ({RiskAssessmentKeepInformed} ENRiskAssessmentKeepInformed Left JOIN {User} ENUser ON (ENRiskAssessmentKeepInformed.[USER] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentKeepInformed.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserRiskAssessmentKeepInformedRecordList outParamList = new RLUserRiskAssessmentKeepInformedRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsWithOrWithoutUsersReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserRiskAssessmentKeepInformedRecordList _tmp = new RLUserRiskAssessmentKeepInformedRecordList();
					_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsWithOrWithoutUsersReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentKeepInformedsWithOrWithoutUsers.List");
						outParamList = (RLUserRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentKeepInformedsWithOrWithoutUsers.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserRiskAssessmentKeepInformedRecordList _tmp = new RLUserRiskAssessmentKeepInformedRecordList();
						_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsWithOrWithoutUsersReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentKeepInformedsWithOrWithoutUsers.List");
							outParamList = (RLUserRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentKeepInformedsWithOrWithoutUsers.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetRiskAssessmentManagementOfSupportsByRiskAssessm" of Action "Preparation"
			/// </summary>
			public static RLRiskAssessmentManagementOfSupportRecordList datasetGetRiskAssessmentManagementOfSupportsByRiskAssessm(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {List_ManagementOfSupport}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENRiskAssessmentManagementOfSupport.[MANAGEMENTOFSUPPORT] o3");
				fromBuilder.Append(" FROM {RiskAssessmentManagementOfSupport} ENRiskAssessmentManagementOfSupport");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentManagementOfSupport.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentManagementOfSupport.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentManagementOfSupport.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentManagementOfSupportRecordList outParamList = new RLRiskAssessmentManagementOfSupportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentManagementOfSupportRecordList _tmp = new RLRiskAssessmentManagementOfSupportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
						outParamList = (RLRiskAssessmentManagementOfSupportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentManagementOfSupportRecordList _tmp = new RLRiskAssessmentManagementOfSupportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
							outParamList = (RLRiskAssessmentManagementOfSupportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessmentManagementOfSupportsByRiskAssessm.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetRiskAssessementRisksByRiskAssessment" of Action "Preparation"
			/// </summary>
			public static RLRiskAssessementRisksRecordList datasetGetRiskAssessementRisksByRiskAssessment(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {List_WhatAreTheRisks}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENRiskAssessementRisks.[RISK] o3");
				fromBuilder.Append(" FROM {RiskAssessementRisks} ENRiskAssessementRisks");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessementRisks.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessementRisks.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessementRisks.[RISKASSESSMENT] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENRiskAssessementRisks.[RISK] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessementRisksRecordList outParamList = new RLRiskAssessementRisksRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessementRisksRecordList _tmp = new RLRiskAssessementRisksRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessementRisksByRiskAssessment.List");
						outParamList = (RLRiskAssessementRisksRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessementRisksByRiskAssessment.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessementRisksRecordList _tmp = new RLRiskAssessementRisksRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessementRisksByRiskAssessment.List");
							outParamList = (RLRiskAssessementRisksRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_InitialAssessment.PrintSupportPlan.Preparation.GetRiskAssessementRisksByRiskAssessment.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "PrintSupportPlan"; ssList_WhatAreTheRisksListDoDataBind = true;
				ssList_ManagementOfSupportListDoDataBind = true;
				ssList_ExternalContactsListDoDataBind = true;
				ssList_KeepInformedListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "PrintSupportPlan", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "PrintSupportPlan", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			if (IsAjaxRequest) {
				recListList_WhatAreTheRisks_Rebuild((ssList_WhatAreTheRisksListDataBound ? wtList_WhatAreTheRisks.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtList_WhatAreTheRisks.LineCount);
			}
			if (IsAjaxRequest) {
				recListList_ManagementOfSupport_Rebuild((ssList_ManagementOfSupportListDataBound ? wtList_ManagementOfSupport.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtList_ManagementOfSupport.LineCount);
			}
			if (IsAjaxRequest) {
				recListList_ExternalContacts_Rebuild((ssList_ExternalContactsListDataBound ? wtList_ExternalContacts.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtList_ExternalContacts.LineCount);
			}
			if (IsAjaxRequest) {
				recListList_KeepInformed_Rebuild((ssList_KeepInformedListDataBound ? wtList_KeepInformed.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtList_KeepInformed.LineCount);
			}
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				recListList_WhatAreTheRisks_Restore();
				recListList_ManagementOfSupport_Restore();
				recListList_ExternalContacts_Restore();
				recListList_KeepInformed_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
