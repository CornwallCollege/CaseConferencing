/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearner_ILP {

	public class ScrnPopup_CareerAim: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnPopup_CareerAim(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamStudentId. Description:
		/// </summary>
		public string inParamStudentId = "";
		/// <summary>
		/// Screen Input Parameter inParamCareeAimId. Description:
		/// </summary>
		public int inParamCareeAimId = 0;
		/// <summary>
		/// Variable wt_WebBlockInstance18
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout wt_WebBlockInstance18;
		/// <summary>
		/// Variable "True" if the Widget wt_If8
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If8T;

		/// <summary>
		/// Variable "True" if the Widget wt_If8
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If8F;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCStudentCareerAimRecord ssStudentCareerAimEditRecord = new RCStudentCareerAimRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtStudentCareerAimEdit_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtStudentCareerAim_Destination") &&
			ValidationUtils.IsValid(this, "wtStudentCareerAim_Date") &&
			ValidationUtils.IsValid(this, "wtStudentCareerAim_Notes");
			return res;
		}

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtStudentCareerAim_DestinationValidatorRequired;
		protected SelectRtWidget Rt_wtStudentCareerAim_Destination = new SelectRtWidget();
		RLDestinationsRecordList Rt_wtStudentCareerAim_Destination_reclist = null;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtStudentCareerAim_DateValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtStudentCareerAim_DateValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtStudentCareerAim_NotesValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtStudentCareerAim_NotesValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container31;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container21;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("8JIHzUqjEU+1PzR9Gtgwbw", "Popup_CareerAim");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "8JIHzUqjEU+1PzR9Gtgwbw", "Popup_CareerAim");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "8JIHzUqjEU+1PzR9Gtgwbw", "Popup_CareerAim");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "8JIHzUqjEU+1PzR9Gtgwbw", "Popup_CareerAim");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "8JIHzUqjEU+1PzR9Gtgwbw", "Popup_CareerAim");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnPopup_CareerAim() {
			htTabIndexGroups["wt_Text15"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wtStudentCareerAim_Destination"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_Text19"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wtStudentCareerAim_Date"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance22"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_Text5"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wtStudentCareerAim_Notes"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_Container7"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_Container31"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_Container26"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["Hunspell_wt_WebBlockInstance24"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_Container21"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_WebBlockInstance23"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_Container28"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance9"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_Text12"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_Container3"] = "wtStudentCareerAimEdit-1";
			htTabIndexGroups["wt_Text38"] = "wtStudentCareerAimEdit-1";
		}


		RLStudentCareerAimRecordList queryResGetStudentCareerAimById_outParamList = new RLStudentCareerAimRecordList();
		int queryResGetStudentCareerAimById_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetStudentCareerAimById
			int datasetGetStudentCareerAimById_maxRecords = 0;
			queryResGetStudentCareerAimById_outParamList = FuncssPreparation.datasetGetStudentCareerAimById(heContext, datasetGetStudentCareerAimById_maxRecords, IterationMultiplicity.Never, out queryResGetStudentCareerAimById_outParamCount, inParamCareeAimId
			);
			if ((inParamCareeAimId==BuiltInFunction.NullIdentifier())) {
				queryResGetStudentCareerAimById_outParamList.CurrentRec.ssENStudentCareerAim.ssDate = Convert.ToDateTime(BuiltInFunction.CurrDateTime().ToString("yyyy-M-d")); // GetStudentCareerAimById.List.Current.StudentCareerAim.Date = CurrDateTime

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamStudentId!= "")) {
				parameters.Add(new Pair<string, string>("StudentId", HttpUtility.UrlEncode(inParamStudentId, Request.ContentEncoding)));
			}
			if ((inParamCareeAimId!=0)) {
				parameters.Add(new Pair<string, string>("CareeAimId", HttpUtility.UrlEncode(Convert.ToString(inParamCareeAimId), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_CareerAim", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_CareerAim", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance18 = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) FindControl("wt_WebBlockInstance18");
			wt_Container7 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container7");
			wt_Container31 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container31");
			wt_Container26 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container26");
			wt_Container21 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container21");
			wt_Container28 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container28");
			wt_Container3 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container3");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_If8") {
				return wt_WebBlockInstance18.wtTitle.FindControl("wt_If8");
			}
			if (id == "wt_If8T") {
				return wt_WebBlockInstance18.wtTitle.FindControl("wt_If8T");
			}
			if (id == "wt_Text2") {
				return wt_WebBlockInstance18.wtTitle.FindControl("wt_Text2");
			}
			if (id == "wt_If8F") {
				return wt_WebBlockInstance18.wtTitle.FindControl("wt_If8F");
			}
			if (id == "wt_Text34") {
				return wt_WebBlockInstance18.wtTitle.FindControl("wt_Text34");
			}
			if (id == "wtStudentCareerAimEdit") {
				return wt_WebBlockInstance18.wtContent.FindControl("wtStudentCareerAimEdit");
			}
			if (id == "wt_EditRecordRow29") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordRow29");
			}
			if (id == "wt_EditRecordCell1") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordCell1");
			}
			if (id == "wt_Text15") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Text15");
			}
			if (id == "wt_EditRecordCell37") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordCell37");
			}
			if (id == "wtStudentCareerAim_Destination") {
				return wt_WebBlockInstance18.wtContent.FindControl("wtStudentCareerAim_Destination");
			}
			if (id == "wt_EditRecordRow32") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordRow32");
			}
			if (id == "wt_EditRecordCell4") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordCell4");
			}
			if (id == "wt_Text19") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Text19");
			}
			if (id == "wt_EditRecordCell35") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordCell35");
			}
			if (id == "wtStudentCareerAim_Date") {
				return wt_WebBlockInstance18.wtContent.FindControl("wtStudentCareerAim_Date");
			}
			if (id == "RichWidgets_wt_WebBlockInstance22") {
				return wt_WebBlockInstance18.wtContent.FindControl("RichWidgets_wt_WebBlockInstance22");
			}
			if (id == "wt_EditRecordRow39") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordRow39");
			}
			if (id == "wt_EditRecordCell6") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordCell6");
			}
			if (id == "wt_Text5") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Text5");
			}
			if (id == "wt_EditRecordCell30") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordCell30");
			}
			if (id == "wtStudentCareerAim_Notes") {
				return wt_WebBlockInstance18.wtContent.FindControl("wtStudentCareerAim_Notes");
			}
			if (id == "wt_EditRecordRow33") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordRow33");
			}
			if (id == "wt_EditRecordCell17") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordCell17");
			}
			if (id == "wt_EditRecordCell16") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_EditRecordCell16");
			}
			if (id == "wt_Container7") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Container7");
			}
			if (id == "wt_Container31") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Container31");
			}
			if (id == "wt_Container26") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Container26");
			}
			if (id == "Hunspell_wt_WebBlockInstance24") {
				return wt_WebBlockInstance18.wtContent.FindControl("Hunspell_wt_WebBlockInstance24");
			}
			if (id == "wt_Container21") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Container21");
			}
			if (id == "wt_WebBlockInstance23") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_WebBlockInstance23");
			}
			if (id == "wt_Container28") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Container28");
			}
			if (id == "RichWidgets_wt_WebBlockInstance9") {
				return wt_WebBlockInstance18.wtContent.FindControl("RichWidgets_wt_WebBlockInstance9");
			}
			if (id == "wt_Text12") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Text12");
			}
			if (id == "wt_Container3") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Container3");
			}
			if (id == "wt_Text38") {
				return wt_WebBlockInstance18.wtContent.FindControl("wt_Text38");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_CareerAim"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamStudentId = (string) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamCareeAimId = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_CareerAim"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["StudentId"] != null) {
						inParamStudentId = Request.QueryString["StudentId"];
					}
					if (Request.QueryString["CareeAimId"] != null) {
						inParamCareeAimId = Convert.ToInt32(Request.QueryString["CareeAimId"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["StudentId"] != null) {
						inParamStudentId = Request.Form["StudentId"];
					}
					if (Request.Form["CareeAimId"] != null) {
						inParamCareeAimId = Convert.ToInt32(Request.Form["CareeAimId"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtStudentCareerAimEdit_onDataBindingDataSource(this.FindControl("wtStudentCareerAimEdit"), null);
				}
				Title = "Popup CareerAim"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_CareerAim", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearner_ILP.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotPLA("PLA role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("8JIHzUqjEU+1PzR9Gtgwbw"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandClose</code> that represents the Service Studio screen action
		///  <code>Close</code> <p> Description: </p>
		/// </summary>
		private bool CommandClose(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSave: VarsBag {
			public int resStudentLog_Create_outParamStudentLogId = 0;

			public int resCreateOrUpdateStudentCareerAim_outParamId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				if ((inParamCareeAimId==BuiltInFunction.NullIdentifier())) {
					ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssStudent = inParamStudentId; // StudentCareerAimEdit.Record.StudentCareerAim.Student = StudentId
					ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // StudentCareerAimEdit.Record.StudentCareerAim.CreatedBy = UserID
					ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssCreatedOn = BuiltInFunction.CurrDateTime(); // StudentCareerAimEdit.Record.StudentCareerAim.CreatedOn = CurrDateTime

				}
				// CreateOrUpdateStudentCareerAim
				ExtendedActions.CreateOrUpdateStudentCareerAim(heContext, ssStudentCareerAimEditRecord.ChangedAttributes, ssStudentCareerAimEditRecord, out localVars.resCreateOrUpdateStudentCareerAim_outParamId);
				// StudentLog_Create
				Actions.ActionStudentLog_Create(heContext, inParamStudentId, ((int) Global.App.OsContext.Session["UserID"]), ((("Career Aim (" +Functions.ssGetDestinations(heContext, ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDestination).ssENDestinations.ssLabel) + ") ") + (((inParamCareeAimId==BuiltInFunction.NullIdentifier())) ?(" created"):(" edited"))), ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("gxi1bMfI4U6rNxxKU4jDpA")).ssLogType, ((("Career Aim (" +Functions.ssGetDestinations(heContext, ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDestination).ssENDestinations.ssLabel) + ") ") + (((inParamCareeAimId==BuiltInFunction.NullIdentifier())) ?(" created"):(" edited"))), BuiltInFunction.NullTextIdentifier(), false, 0, "Career Aim", "", 0, 0, "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
				// Popup_Editor_Notify
				Actions.ActionPopup_Editor_Notify(heContext, "OK");
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Feedback_Message
				Actions.ActionFeedback_Message(heContext, "CareerAim Created with success.", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_WebBlockInstance18 Functions
		/// </summary>
		public void webBlck_WebBlockInstance18_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) sender;
			widget.inParamWidth = 550;
		}
		/// <summary>
		/// wt_If8 Functions
		/// </summary>
		bool if_wt_If8_hasRun=false;
		bool if_wt_If8_evalResult;
		public bool if_wt_If8() {
			if (if_wt_If8_hasRun) {
				if_wt_If8_hasRun = false;
				return if_wt_If8_evalResult;
			}
			if_wt_If8_hasRun = true;
			if_wt_If8_evalResult = (inParamCareeAimId==BuiltInFunction.NullIdentifier());
			return if_wt_If8_evalResult;
		}

		/// <summary>
		/// wtStudentCareerAimEdit Functions
		/// </summary>
		public void wtStudentCareerAimEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack) {
				ssStudentCareerAimEditRecord = queryResGetStudentCareerAimById_outParamList.CurrentRec;
			}
		}
		/// <summary>
		/// wtStudentCareerAim_Destination Functions
		/// </summary>
		public void selStudentCareerAim_Destination_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtStudentCareerAim_Destination_reclist == null) {
				using(Transaction wtStudentCareerAim_Destination_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtStudentCareerAim_Destination_sql = "SELECT [ID], [LABEL], NULL, NULL FROM " + ENDestinationsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtStudentCareerAim_Destination_sqlCmd = wtStudentCareerAim_Destination_trans.CreateCommand(wtStudentCareerAim_Destination_sql);
					Rt_wtStudentCareerAim_Destination_sqlCmd.CreateParameter("@Selection", ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDestination);
					Rt_wtStudentCareerAim_Destination_sqlCmd.TransformParametersSyntax();
					Rt_wtStudentCareerAim_Destination_reclist = new RLDestinationsRecordList();
					Rt_wtStudentCareerAim_Destination_reclist.Transaction = wtStudentCareerAim_Destination_trans;
					Rt_wtStudentCareerAim_Destination_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(4, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtStudentCareerAim_Destination_sqlCmd, Rt_wtStudentCareerAim_Destination_reclist, "WebSelectWidget load operation");
					Rt_wtStudentCareerAim_Destination_reclist = (RLDestinationsRecordList) Rt_wtStudentCareerAim_Destination_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtStudentCareerAim_Destination.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtStudentCareerAim_Destination_reclist.StartIteration();
			try {
				while (!Rt_wtStudentCareerAim_Destination_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtStudentCareerAim_Destination_reclist.CurrentRec.ssENDestinations.ssLabel, Rt_wtStudentCareerAim_Destination_reclist.CurrentRec.ssENDestinations.ssId));
					if (ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDestination == Convert.ToString(Rt_wtStudentCareerAim_Destination_reclist.CurrentRec.ssENDestinations.ssId)) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtStudentCareerAim_Destination_reclist.Advance();
				}
			} finally {
				Rt_wtStudentCareerAim_Destination_reclist.EndIteration();
			}
		}
		public void selStudentCareerAim_Destination_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtStudentCareerAim_Destination.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDestination = "";
			}
			else {
				Rt_wtStudentCareerAim_Destination.SpecialListVal = "";
				try {
					ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDestination = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtStudentCareerAim_Destination)
		/// </summary>
		/// <returns>The Visible State of wtStudentCareerAim_Destination</returns>
		public bool selStudentCareerAim_Destination_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtStudentCareerAim_Destination)
		/// </summary>
		/// <returns>The Enabled State of wtStudentCareerAim_Destination</returns>
		public bool selStudentCareerAim_Destination_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selStudentCareerAim_Destination)
		/// </summary>
		/// <returns>The Mandatory Value of selStudentCareerAim_Destination</returns>
		public bool selStudentCareerAim_Destination_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtStudentCareerAim_Date Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtStudentCareerAim_Date_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDate)) {
				return ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtStudentCareerAim_Date");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDate)) {
						return "";
					}
					return ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtStudentCareerAim_Date_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDate(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtStudentCareerAim_Date)
		/// </summary>
		/// <returns>The Visible State of wtStudentCareerAim_Date</returns>
		public bool inputwtStudentCareerAim_Date_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtStudentCareerAim_Date)
		/// </summary>
		/// <returns>The Enabled State of wtStudentCareerAim_Date</returns>
		public bool inputwtStudentCareerAim_Date_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtStudentCareerAim_Date)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtStudentCareerAim_Date</returns>
		public bool inputwtStudentCareerAim_Date_isMandatory() {
			return false;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance22 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance22_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
			widget.inParamInputWidgetId = this.FindControl("wtStudentCareerAim_Date").ClientID;
			widget.inParamMinYear = -1;
			widget.inParamMaxYear = -1;
			widget.inParamAlign = "Bl";
			widget.inParamSingleClick = true;
			widget.inParamShowWeekNumbers = false;
			widget.inParamUpdateOnCloseOnly = false;
			widget.inParamShowOthers = false;
			widget.inParamFirstDay = 0;
			widget.inParamShowTime = false;
			widget.inParamShow24HourFormat = true;
			widget.inParamReuseCalendarObject = false;
			widget.inParamInitialDate = new DateTime(1900, 1, 1, 0, 0, 0);
			widget.inParamDateFormat = "";
			widget.inParamSpecialDays = "";
			widget.inParamOnUpdate = "";
			widget.inParamFlatStyle = false;
			widget.inParamButtonWidgetId = "";
			widget.inParamYearStep = 2;
		}
		/// <summary>
		/// wtStudentCareerAim_Notes Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtStudentCareerAim_Notes_input_value() {
			if (("" !=ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssNotes)) {
				return ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssNotes;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtStudentCareerAim_Notes");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssNotes;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtStudentCareerAim_Notes_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssNotes = ""; 
				} else {
					ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssNotes = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssNotes = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtStudentCareerAim_Notes)
		/// </summary>
		/// <returns>The Visible State of wtStudentCareerAim_Notes</returns>
		public bool inputwtStudentCareerAim_Notes_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtStudentCareerAim_Notes)
		/// </summary>
		/// <returns>The Enabled State of wtStudentCareerAim_Notes</returns>
		public bool inputwtStudentCareerAim_Notes_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtStudentCareerAim_Notes)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtStudentCareerAim_Notes</returns>
		public bool inputwtStudentCareerAim_Notes_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container7 Functions
		/// </summary>
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container7_setInlineAttributes(sender, e);
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container7_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container31 Functions
		/// </summary>
		public void cnt_Container31_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container31_setInlineAttributes(sender, e);
		}
		public string cnt_Container31_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container31_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container31)
		/// </summary>
		/// <returns>The Visible State of wt_Container31</returns>
		public bool cnt_Container31_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container26 Functions
		/// </summary>
		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container26_setInlineAttributes(sender, e);
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container26_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			return true;
		}

		/// <summary>
		/// Hunspell_wt_WebBlockInstance24 Functions
		/// </summary>
		public void Hunspell_webBlck_WebBlockInstance24_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
			widget.inParamTextInputId = this.FindControl("wtStudentCareerAim_Notes").ClientID;
			widget.inParamExtraStyle = "";
			widget.inParamInPopupWindow = true;
		}
		/// <summary>
		/// wt_Container21 Functions
		/// </summary>
		public void cnt_Container21_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container21_setInlineAttributes(sender, e);
		}
		public string cnt_Container21_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container21_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container21)
		/// </summary>
		/// <returns>The Visible State of wt_Container21</returns>
		public bool cnt_Container21_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance23 Functions
		/// </summary>
		public void webBlck_WebBlockInstance23_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon widget = (ssCaseConferencing.Flows.FlowAutoComplete_Bank.WBlkAutoComplete_Icon) sender;
			widget.inParamTextInputId = this.FindControl("wtStudentCareerAim_Notes").ClientID;
			widget.inParamAutoCompleteType = ENAutoCompleteBankTypeEntity.GetRecordByKey(ObjectKey.Parse("2qgCsNc2BkiyX5cjObqkfw")).ssId;
		}
		/// <summary>
		/// wt_Container28 Functions
		/// </summary>
		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container28_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container28_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container28
		/// </summary>
		public void cnt_Container28_AjaxClick(object sender, System.EventArgs e) {
			if (CommandSave(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance9 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance9_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container3 Functions
		/// </summary>
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container3_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container3
		/// </summary>
		public void cnt_Container3_AjaxClick(object sender, System.EventArgs e) {
			if (CommandClose(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			return true;
		}



		public static class FuncCommandClose {
		}
		public static class FuncCommandSave {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetStudentCareerAimById" of Action "Preparation"
			/// </summary>
			public static RLStudentCareerAimRecordList datasetGetStudentCareerAimById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENStudentCareerAim.[ID] o1, ENStudentCareerAim.[STUDENT] o2, ENStudentCareerAim.[DESTINATION] o3, ENStudentCareerAim.[DATE] o4, ENStudentCareerAim.[NOTES] o5, ENStudentCareerAim.[CREATEDBY] o6, ENStudentCareerAim.[CREATEDON] o7, NULL o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM {StudentCareerAim} ENStudentCareerAim");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENStudentCareerAim.[ID] = @qpinP) AND (ENStudentCareerAim.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENStudentCareerAim.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentCareerAimRecordList outParamList = new RLStudentCareerAimRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentCareerAimRecordList _tmp = new RLStudentCareerAimRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.Popup_CareerAim.Preparation.GetStudentCareerAimById.List");
						outParamList = (RLStudentCareerAimRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.Popup_CareerAim.Preparation.GetStudentCareerAimById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentCareerAimRecordList _tmp = new RLStudentCareerAimRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ILP.Popup_CareerAim.Preparation.GetStudentCareerAimById.List");
							outParamList = (RLStudentCareerAimRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ILP.Popup_CareerAim.Preparation.GetStudentCareerAimById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Popup CareerAim"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_CareerAim", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_CareerAim", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamStudentId", inParamStudentId, "");
			ViewStateAttributes.SetInViewState("inParamCareeAimId", inParamCareeAimId, 0);
			ViewStateAttributes.SetInViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssId", ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssId, 0);
			ViewStateAttributes.SetInViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssStudent", ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssStudent, "");
			ViewStateAttributes.SetInViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssDestination", ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDestination, "");
			ViewStateAttributes.SetInViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssDate", ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssNotes", ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssNotes, "");
			ViewStateAttributes.SetInViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssCreatedBy", ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssCreatedBy, 0);
			ViewStateAttributes.SetInViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssCreatedOn", ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssCreatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssStudentCareerAimEditRecord.ssENStudentCareerAim.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, true, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssStudentCareerAimEditRecord.ssENStudentCareerAim.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, false, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtStudentCareerAim_Destination_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtStudentCareerAim_Destination")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtStudentCareerAim_Date_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtStudentCareerAim_Date")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtStudentCareerAim_Notes_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtStudentCareerAim_Notes")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamStudentId = (string) ViewStateAttributes.GetFromViewState("inParamStudentId", "");
				inParamCareeAimId = (int) ViewStateAttributes.GetFromViewState("inParamCareeAimId", 0);
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssId = (int) ViewStateAttributes.GetFromViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssId", 0);
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssStudent = (string) ViewStateAttributes.GetFromViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssStudent", "");
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDestination = (string) ViewStateAttributes.GetFromViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssDestination", "");
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssDate = (DateTime) ViewStateAttributes.GetFromViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssNotes = (string) ViewStateAttributes.GetFromViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssNotes", "");
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssCreatedBy = (int) ViewStateAttributes.GetFromViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssCreatedBy", 0);
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ssCreatedOn = (DateTime) ViewStateAttributes.GetFromViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ssCreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_ChangedAttributes", null));
				ssStudentCareerAimEditRecord.ssENStudentCareerAim.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtStudentCareerAimEdit_record_ssENStudentCareerAim_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wtStudentCareerAim_Destination")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtStudentCareerAim_Destination_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtStudentCareerAim_Date")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtStudentCareerAim_Date_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtStudentCareerAim_Notes")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtStudentCareerAim_Notes_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wtStudentCareerAim_Destination", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtStudentCareerAim_Date", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate);
			ValidationUtils.ValidateInput(this, "wtStudentCareerAim_Notes", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
