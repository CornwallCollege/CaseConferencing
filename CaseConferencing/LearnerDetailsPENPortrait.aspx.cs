/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearnerView {

	public class ScrnLearnerDetailsPENPortrait: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnLearnerDetailsPENPortrait(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamSessionID. Description:
		/// </summary>
		public int inParamSessionID = 0;
		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Screen Input Parameter inParamFromLearnerList. Description:
		/// </summary>
		public bool inParamFromLearnerList = false;
		/// <summary>
		/// Variable <code>varLcPENPortrait</code> that represents the Service Studio local variable
		///  <code>PENPortrait</code> <p>Description: </p>
		/// </summary>
		string varLcPENPortrait = "";

		/// <summary>
		/// Variable wt_WebBlockInstance15
		/// </summary>
		protected ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout wt_WebBlockInstance15;
		protected OutSystems.HubEdition.WebWidgets.Container wtPENPortraitWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		/// <summary>
		/// Variable (wtpopup_penportraitlink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtpopup_penportraitlink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wtPENPortraitContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wtlastUpdatedContainer;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("FTJPnXE1QEyxOLVYnwopUQ", "LearnerDetailsPENPortrait");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "FTJPnXE1QEyxOLVYnwopUQ", "LearnerDetailsPENPortrait");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "FTJPnXE1QEyxOLVYnwopUQ", "LearnerDetailsPENPortrait");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "FTJPnXE1QEyxOLVYnwopUQ", "LearnerDetailsPENPortrait");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "FTJPnXE1QEyxOLVYnwopUQ", "LearnerDetailsPENPortrait");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnLearnerDetailsPENPortrait() {
		}


		RLUserStudentPENPortraitRecordList queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = new RLUserStudentPENPortraitRecordList();
		int queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetStudentPENPortraitsWithOrWithoutUsers
			int datasetGetStudentPENPortraitsWithOrWithoutUsers_maxRecords = 0;
			queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = FuncssPreparation.datasetGetStudentPENPortraitsWithOrWithoutUsers(heContext, datasetGetStudentPENPortraitsWithOrWithoutUsers_maxRecords, IterationMultiplicity.Never, out queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamCount, inParamStudentReference
			);
			varLcPENPortrait = queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssPENPortrait; // PENPortrait = GetStudentPENPortraitsWithOrWithoutUsers.List.Current.StudentPENPortrait.PENPortrait
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "LearnerDetailsPENPortrait.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "LearnerDetailsPENPortrait.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamStudentReference!= "")) {
				parameters.Add(new Pair<string, string>("StudentReference", HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			}
			if ((inParamSessionID!=0)) {
				parameters.Add(new Pair<string, string>("SessionID", HttpUtility.UrlEncode(Convert.ToString(inParamSessionID), Request.ContentEncoding)));
			}
			if ((inParamCourseCode!= "")) {
				parameters.Add(new Pair<string, string>("CourseCode", HttpUtility.UrlEncode(inParamCourseCode, Request.ContentEncoding)));
			}
			if ((inParamFromLearnerList!=false)) {
				parameters.Add(new Pair<string, string>("FromLearnerList", HttpUtility.UrlEncode(Convert.ToString(inParamFromLearnerList), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsPENPortrait", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsPENPortrait", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance15 = (ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout) FindControl("wt_WebBlockInstance15");
			wtPENPortraitWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtPENPortraitWrapper");
			wt_Container18 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container18");
			wt_Container2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container2");
			wt_Container12 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container12");
			wt_Container5 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container5");
			wtpopup_penportraitlink = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wtpopup_penportraitlink");
			wt_Container11 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container11");
			wtPENPortraitContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtPENPortraitContainer");
			wtlastUpdatedContainer = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtlastUpdatedContainer");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wtPENPortraitWrapper") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wtPENPortraitWrapper");
			}
			if (id == "wt_Container18") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wt_Container18");
			}
			if (id == "wt_Container2") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wt_Container2");
			}
			if (id == "wt_Text4") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wt_Text4");
			}
			if (id == "wt_Container12") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wt_Container12");
			}
			if (id == "wt_Container5") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wt_Container5");
			}
			if (id == "wtpopup_penportraitlink") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wtpopup_penportraitlink");
			}
			if (id == "wt_InlineExpression14") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wt_InlineExpression14");
			}
			if (id == "RichWidgets_wt_WebBlockInstance20") {
				return wt_WebBlockInstance15.wtRAG.FindControl("RichWidgets_wt_WebBlockInstance20");
			}
			if (id == "wt_Container11") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wt_Container11");
			}
			if (id == "wt_InlineExpression8") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wt_InlineExpression8");
			}
			if (id == "wtPENPortraitContainer") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wtPENPortraitContainer");
			}
			if (id == "wtlastUpdatedContainer") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wtlastUpdatedContainer");
			}
			if (id == "wt_InlineExpression6") {
				return wt_WebBlockInstance15.wtRAG.FindControl("wt_InlineExpression6");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailsPENPortrait"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamStudentReference = (string) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamSessionID = (int) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamCourseCode = (string) paramValue;
							}
						}
						if (screenParameters.Count > 3) {
							object paramValue = screenParameters[3];
							if (paramValue != null) {
								inParamFromLearnerList = (bool) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_LearnerDetailsPENPortrait"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["StudentReference"] != null) {
						inParamStudentReference = Request.QueryString["StudentReference"];
					}
					if (Request.QueryString["SessionID"] != null) {
						inParamSessionID = Convert.ToInt32(Request.QueryString["SessionID"]);
					}
					if (Request.QueryString["CourseCode"] != null) {
						inParamCourseCode = Request.QueryString["CourseCode"];
					}
					if (Request.QueryString["FromLearnerList"] != null) {
						inParamFromLearnerList = (Request.QueryString["FromLearnerList"]).ToLowerInvariant() == "true";
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["StudentReference"] != null) {
						inParamStudentReference = Request.Form["StudentReference"];
					}
					if (Request.Form["SessionID"] != null) {
						inParamSessionID = Convert.ToInt32(Request.Form["SessionID"]);
					}
					if (Request.Form["CourseCode"] != null) {
						inParamCourseCode = Request.Form["CourseCode"];
					}
					if (Request.Form["FromLearnerList"] != null) {
						inParamFromLearnerList = (Request.Form["FromLearnerList"]).ToLowerInvariant() == "true";
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "LearnerDetailsPENPortrait"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnerDetailsPENPortrait", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearnerView.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotSLA("SLA role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("FTJPnXE1QEyxOLVYnwopUQ"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetStudentPENPortraitsWithOrWithoutUsers
				{
					int datasetGetStudentPENPortraitsWithOrWithoutUsers_maxRecords = 0;
					queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = FuncssPreparation.datasetGetStudentPENPortraitsWithOrWithoutUsers(heContext, datasetGetStudentPENPortraitsWithOrWithoutUsers_maxRecords, IterationMultiplicity.Never, out queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamCount, inParamStudentReference
					);
				}
				// Refresh Widget (wtPENPortraitWrapper)
				((OSPageViewState) Page).AjaxRefresh(wtPENPortraitWrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_WebBlockInstance15 Functions
		/// </summary>
		public void webBlck_WebBlockInstance15_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout widget = (ssCaseConferencing.Flows.FlowLearnerView.WBlkLearnerDetailsLayout) sender;
			widget.inParamStudentReference = inParamStudentReference;
			widget.inParamCategoryId = BuiltInFunction.NullIdentifier();
			widget.inParamOfferingCode = "";
			widget.inParamShowUnit = false;
			widget.inParamShowTarget = false;
			widget.inParamActiveLearnerDetailMenu = ENLearnerDetailMenuEntity.GetRecordByKey(ObjectKey.Parse("YYbozKebT0yxtusKlcCl8g")).ssMenu;
			widget.inParamSessionId = inParamSessionID;
			widget.inParamCourseCode = inParamCourseCode;
			widget.inParamFromLearnerList = inParamFromLearnerList;
			widget.inParamActiveTab = ENTabsEntity.GetRecordByKey(ObjectKey.Parse("avXIv1WG4UWcoRPTcOjaOw")).ssId;
		}
		/// <summary>
		/// wtPENPortraitWrapper Functions
		/// </summary>
		public void cntPENPortraitWrapper_onDataBinding(object sender, System.EventArgs e) {
			cntPENPortraitWrapper_setInlineAttributes(sender, e);
		}
		public string cntPENPortraitWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntPENPortraitWrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPENPortraitWrapper)
		/// </summary>
		/// <returns>The Visible State of wtPENPortraitWrapper</returns>
		public bool cntPENPortraitWrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container18 Functions
		/// </summary>
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container18_setInlineAttributes(sender, e);
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container18_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container2 Functions
		/// </summary>
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container2_setInlineAttributes(sender, e);
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container12 Functions
		/// </summary>
		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container12_setInlineAttributes(sender, e);
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container12_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container5 Functions
		/// </summary>
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container5_setInlineAttributes(sender, e);
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container5_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			return true;
		}

		/// <summary>
		/// wtpopup_penportraitlink Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtpopup_penportraitlink)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtpopup_penportraitlink)</returns>
		public string lnkpopup_penportraitlink_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("PENPortraitID", System.Web.HttpUtility.UrlEncode(Convert.ToString(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_PENPortrait", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtpopup_penportraitlink)
		/// </summary>
		/// <returns>title of the Link (wtpopup_penportraitlink)</returns>
		public string
		lnkpopup_penportraitlink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtpopup_penportraitlink)
		/// </summary>
		/// <returns>The Visible State of wtpopup_penportraitlink</returns>
		public bool lnkpopup_penportraitlink_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtpopup_penportraitlink)
		/// </summary>
		/// <returns>The Enabled State of wtpopup_penportraitlink</returns>
		public bool lnkpopup_penportraitlink_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression14 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Yy6SuiKgckCrn+7WnnQb6g) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression14() {
			return (((queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssId!=BuiltInFunction.NullIdentifier())) ?("Edit"):("New"));
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance20 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance20_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
			widget.inParamLinkOrButtonWidgetId = wtpopup_penportraitlink.ClientID;
			widget.inParamTitle = " ";
			widget.inParamWidthPx = -1;
			widget.inParamHeightPx = -1;
			widget.inParamAutoResize = true;
			widget.inParamRecenterOnResize = false;
			widget.inParamHideCloseButton = false;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance20
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance20_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandOnNotify(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container11 Functions
		/// </summary>
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container11_setInlineAttributes(sender, e);
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding:10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container11_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			return (((queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssId!=BuiltInFunction.NullIdentifier())) ?(true):(false));
		}

		/// <summary>
		/// wt_InlineExpression8 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = _uIWXBtviEy8ssLWhtcdcQ) Expression:
		///  GetStudentPENPortraitsWithOrWithoutUsers.List.Current.StudentPENPortrait.PENPortrait
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression8() {
			return queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssPENPortrait;
		}
		/// <summary>
		/// wtPENPortraitContainer Functions
		/// </summary>
		public void cntPENPortraitContainer_onDataBinding(object sender, System.EventArgs e) {
			cntPENPortraitContainer_setInlineAttributes(sender, e);
		}
		public string cntPENPortraitContainer_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntPENPortraitContainer_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtPENPortraitContainer)
		/// </summary>
		/// <returns>The Visible State of wtPENPortraitContainer</returns>
		public bool cntPENPortraitContainer_isVisible() {
			return true;
		}

		/// <summary>
		/// wtlastUpdatedContainer Functions
		/// </summary>
		public void cntlastUpdatedContainer_onDataBinding(object sender, System.EventArgs e) {
			cntlastUpdatedContainer_setInlineAttributes(sender, e);
		}
		public string cntlastUpdatedContainer_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntlastUpdatedContainer_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtlastUpdatedContainer)
		/// </summary>
		/// <returns>The Visible State of wtlastUpdatedContainer</returns>
		public bool cntlastUpdatedContainer_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression6 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = mRmiTNI1jUuuEP0E10Wgug) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression6() {
			return (((queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssLastUpdatedBy!=BuiltInFunction.NullIdentifier())) ?(((("Last updated by " +queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENUser.ssName) + " on ") +BuiltInFunction.FormatFullDate(Convert.ToDateTime(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssLastUpdatedAt.ToString("yyyy-M-d")), " "))):(""));
		}


		public static class FuncCommandOnNotify {
		}
		public static class FuncssPreparation {

			private static void datasetGetStudentPENPortraitsWithOrWithoutUsersReadDB(ref RCUserStudentPENPortraitRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENStudentPENPortrait.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudentPENPortraitsWithOrWithoutUsers" of Action "Preparation"
			/// </summary>
			public static RLUserStudentPENPortraitRecordList datasetGetStudentPENPortraitsWithOrWithoutUsers(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Refresh Query 47PJnWpoB02ZnAWQ3JNiYg Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENStudentPENPortrait.[ID] o1, NULL o2, ENStudentPENPortrait.[PENPORTRAIT] o3, ENStudentPENPortrait.[LASTUPDATEDBY] o4, ENStudentPENPortrait.[LASTUPDATEDAT] o5, NULL o6, ENUser.[NAME] o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15");
				fromBuilder.Append(" FROM ({StudentPENPortrait} ENStudentPENPortrait Left JOIN {User} ENUser ON (ENStudentPENPortrait.[LASTUPDATEDBY] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENStudentPENPortrait.[STUDENTREFERENCE] = @qpstP) AND (ENStudentPENPortrait.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENStudentPENPortrait.[STUDENTREFERENCE] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserStudentPENPortraitRecordList outParamList = new RLUserStudentPENPortraitRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetStudentPENPortraitsWithOrWithoutUsersReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserStudentPENPortraitRecordList _tmp = new RLUserStudentPENPortraitRecordList();
					_tmp.AlternateReadDBMethod = datasetGetStudentPENPortraitsWithOrWithoutUsersReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.LearnerDetailsPENPortrait.Preparation.GetStudentPENPortraitsWithOrWithoutUsers.List");
						outParamList = (RLUserStudentPENPortraitRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsPENPortrait.Preparation.GetStudentPENPortraitsWithOrWithoutUsers.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserStudentPENPortraitRecordList _tmp = new RLUserStudentPENPortraitRecordList();
						_tmp.AlternateReadDBMethod = datasetGetStudentPENPortraitsWithOrWithoutUsersReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query LearnerView.LearnerDetailsPENPortrait.Preparation.GetStudentPENPortraitsWithOrWithoutUsers.List");
							outParamList = (RLUserStudentPENPortraitRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query LearnerView.LearnerDetailsPENPortrait.Preparation.GetStudentPENPortraitsWithOrWithoutUsers.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "LearnerDetailsPENPortrait"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnerDetailsPENPortrait", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "LearnerDetailsPENPortrait", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.

			int tmpcurrentrownumberqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Eof;
			ArrayList storequeryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = new ArrayList();

			// Write the needed fields of queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList to the storequeryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList
			if (!queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Empty) {
				try {
					queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.StartIteration();

					while (!queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = new ArrayList();
						tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Add(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENUser.ssName == "" ?(object) null: queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENUser.ssName);
						tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Add(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssId == 0?(object) null: queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssId);
						tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Add(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssPENPortrait == "" ?(object) null: queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssPENPortrait);
						tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Add(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssLastUpdatedBy == 0?(object) null: queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssLastUpdatedBy);
						tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Add(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssLastUpdatedAt == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ssLastUpdatedAt);
						tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.ChangedAttributes, new BitArray(new bool[] {
							true, false, true, true, true
						}
						))));
						tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRec.ssENStudentPENPortrait.OptimizedAttributes, new BitArray(new bool[] {
							false, true, false, false, false
						}
						))));
						storequeryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Add(tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList);
						queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Advance();
					}
				} finally {
					queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList", storequeryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList, null);

			#endregion


			#region store queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList_eof", tmpeofqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList, false);
			queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList, tmpeofqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("inParamSessionID", inParamSessionID, 0);
			ViewStateAttributes.SetInViewState("inParamCourseCode", inParamCourseCode, "");
			ViewStateAttributes.SetInViewState("inParamFromLearnerList", inParamFromLearnerList, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.

				// Read the needed fields of queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList from storequeryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList
				queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = new RLUserStudentPENPortraitRecordList();
				ArrayList storequeryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList;
				storequeryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList", null);
				if (storequeryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList in storequeryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList) {
						if (tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList != null) {
							// Aux current record variable
							RCUserStudentPENPortraitRecord tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = new RCUserStudentPENPortraitRecord(null);
							tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.ssENUser.ssName = (string) (tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[0] == null ? "": tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.ssENStudentPENPortrait.ssId = (int) (tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[3] == null ? 0: tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.ssENStudentPENPortrait.ssPENPortrait = (string) (tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[4] == null ? "": tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.ssENStudentPENPortrait.ssLastUpdatedBy = (int) (tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[5] == null ? 0: tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.ssENStudentPENPortrait.ssLastUpdatedAt = (DateTime) (tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[6] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.ssENStudentPENPortrait.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.ssENStudentPENPortrait.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList[8]);

							queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.Append(tmpAuxCurrentRecordqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList);
						}
					}
				}
				queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList;
				tmpcurrentrownumberqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList;
				tmpeofqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList_eof", false);
				queryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList, tmpeofqueryResGetStudentPENPortraitsWithOrWithoutUsers_outParamList);

				#endregion

				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				inParamSessionID = (int) ViewStateAttributes.GetFromViewState("inParamSessionID", 0);
				inParamCourseCode = (string) ViewStateAttributes.GetFromViewState("inParamCourseCode", "");
				inParamFromLearnerList = (bool) ViewStateAttributes.GetFromViewState("inParamFromLearnerList", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
