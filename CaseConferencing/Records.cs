/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Web.Services.Protocols;
using System.Web.Services;
using System.Xml.Serialization;

namespace ssCaseConferencing {

	/// <summary>
	/// Structure <code>RCProgressReportProgressReportTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCProgressReportProgressReportTypeRecord: ISerializable, ITypedRecord<RCProgressReportProgressReportTypeRecord> {
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");
		private static readonly GlobalObjectKey IdProgressReportType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*1yKNLZ5hrgyypvQSHqrb9g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;

		[System.Xml.Serialization.XmlElement("ProgressReportType")]
		public ENProgressReportTypeEntityRecord ssENProgressReportType;


		public BitArray OptimizedAttributes;

		public RCProgressReportProgressReportTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportType = new ENProgressReportTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(23, false);
			all[1] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENProgressReportType.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENProgressReport.OptimizedAttributes = value[0];
					ssENProgressReportType.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENProgressReport.OptimizedAttributes;
				all[1] = ssENProgressReportType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENProgressReport.Read(r, ref index);
			ssENProgressReportType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCProgressReportProgressReportTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCProgressReportProgressReportTypeRecord a, RCProgressReportProgressReportTypeRecord b) {
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			if (a.ssENProgressReportType != b.ssENProgressReportType) return false;
			return true;
		}

		public static bool operator != (RCProgressReportProgressReportTypeRecord a, RCProgressReportProgressReportTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCProgressReportProgressReportTypeRecord)) return false;
			return (this == (RCProgressReportProgressReportTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				^ ssENProgressReportType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCProgressReportProgressReportTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportType = new ENProgressReportTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENProgressReportType = (ENProgressReportTypeEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENProgressReport.RecursiveReset();
			ssENProgressReportType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENProgressReport.InternalRecursiveSave();
			ssENProgressReportType.InternalRecursiveSave();
		}


		public RCProgressReportProgressReportTypeRecord Duplicate() {
			RCProgressReportProgressReportTypeRecord t;
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.ssENProgressReportType = (ENProgressReportTypeEntityRecord) this.ssENProgressReportType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
				ssENProgressReportType.ToXml(this, recordElem, "ProgressReportType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			} else if (head == "progressreporttype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportType")) variable.Value = ssENProgressReportType; else variable.Optimized = true;
				variable.SetFieldName("progressreporttype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdProgressReport) {
				return ssENProgressReport;
			} else if (key == IdProgressReportType) {
				return ssENProgressReportType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
			ssENProgressReportType.FillFromOther((IRecord) other.AttributeGet(IdProgressReportType));
		}
	} // RCProgressReportProgressReportTypeRecord
	/// <summary>
	/// Structure <code>RCStaffGroupStudent_GroupRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffGroupStudent_GroupRecord: ISerializable, ITypedRecord<RCStaffGroupStudent_GroupRecord> {
		private static readonly GlobalObjectKey IdStaff = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*g7SxeiYo0dIB7YXPz8Xkpg");
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Staff")]
		public ENStaffEntityRecord ssENStaff;

		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;


		public BitArray OptimizedAttributes;

		public RCStaffGroupStudent_GroupRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(15, false);
			all[1] = new BitArray(9, false);
			all[2] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStaff.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENStaff.OptimizedAttributes = value[0];
					ssENGroup.OptimizedAttributes = value[1];
					ssENStudent_Group.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENStaff.OptimizedAttributes;
				all[1] = ssENGroup.OptimizedAttributes;
				all[2] = ssENStudent_Group.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStaff.Read(r, ref index);
			ssENGroup.Read(r, ref index);
			ssENStudent_Group.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffGroupStudent_GroupRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffGroupStudent_GroupRecord a, RCStaffGroupStudent_GroupRecord b) {
			if (a.ssENStaff != b.ssENStaff) return false;
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			return true;
		}

		public static bool operator != (RCStaffGroupStudent_GroupRecord a, RCStaffGroupStudent_GroupRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffGroupStudent_GroupRecord)) return false;
			return (this == (RCStaffGroupStudent_GroupRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStaff.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffGroupStudent_GroupRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStaff = (ENStaffEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENStaff.RecursiveReset();
			ssENGroup.RecursiveReset();
			ssENStudent_Group.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStaff.InternalRecursiveSave();
			ssENGroup.InternalRecursiveSave();
			ssENStudent_Group.InternalRecursiveSave();
		}


		public RCStaffGroupStudent_GroupRecord Duplicate() {
			RCStaffGroupStudent_GroupRecord t;
			t.ssENStaff = (ENStaffEntityRecord) this.ssENStaff.Duplicate();
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStaff.ToXml(this, recordElem, "Staff", detailLevel - 1);
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staff") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Staff")) variable.Value = ssENStaff; else variable.Optimized = true;
				variable.SetFieldName("staff");
			} else if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaff) {
				return ssENStaff;
			} else if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStaff.FillFromOther((IRecord) other.AttributeGet(IdStaff));
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
		}
	} // RCStaffGroupStudent_GroupRecord
	/// <summary>
	/// Structure <code>RCClusterUserCCSessionRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCClusterUserCCSessionRecord: ISerializable, ITypedRecord<RCClusterUserCCSessionRecord> {
		private static readonly GlobalObjectKey IdCluster = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*mAONl_1ENuXUhe0ejJwxsA");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdCCSession = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*YtIMR1wPQu4yPKHpr39GBQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Cluster")]
		public ENClusterEntityRecord ssENCluster;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("CCSession")]
		public ENCCSessionEntityRecord ssENCCSession;


		public BitArray OptimizedAttributes;

		public RCClusterUserCCSessionRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCluster = new ENClusterEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENCCSession = new ENCCSessionEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(7, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCluster.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENCCSession.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENCluster.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENCCSession.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENCluster.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENCCSession.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCluster.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENCCSession.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCClusterUserCCSessionRecord r) {
			this = r;
		}


		public static bool operator == (RCClusterUserCCSessionRecord a, RCClusterUserCCSessionRecord b) {
			if (a.ssENCluster != b.ssENCluster) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENCCSession != b.ssENCCSession) return false;
			return true;
		}

		public static bool operator != (RCClusterUserCCSessionRecord a, RCClusterUserCCSessionRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCClusterUserCCSessionRecord)) return false;
			return (this == (RCClusterUserCCSessionRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCluster.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENCCSession.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCClusterUserCCSessionRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCluster = new ENClusterEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENCCSession = new ENCCSessionEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCluster = (ENClusterEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENCCSession = (ENCCSessionEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENCluster.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENCCSession.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCluster.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENCCSession.InternalRecursiveSave();
		}


		public RCClusterUserCCSessionRecord Duplicate() {
			RCClusterUserCCSessionRecord t;
			t.ssENCluster = (ENClusterEntityRecord) this.ssENCluster.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENCCSession = (ENCCSessionEntityRecord) this.ssENCCSession.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCluster.ToXml(this, recordElem, "Cluster", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENCCSession.ToXml(this, recordElem, "CCSession", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "cluster") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Cluster")) variable.Value = ssENCluster; else variable.Optimized = true;
				variable.SetFieldName("cluster");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "ccsession") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CCSession")) variable.Value = ssENCCSession; else variable.Optimized = true;
				variable.SetFieldName("ccsession");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCluster) {
				return ssENCluster;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdCCSession) {
				return ssENCCSession;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCluster.FillFromOther((IRecord) other.AttributeGet(IdCluster));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENCCSession.FillFromOther((IRecord) other.AttributeGet(IdCCSession));
		}
	} // RCClusterUserCCSessionRecord
	/// <summary>
	/// Structure <code>RCUserStudentExemptionRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserStudentExemptionRecord: ISerializable, ITypedRecord<RCUserStudentExemptionRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentExemption = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*UGj3QseZ7x9cfZ4dR+p_TA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentExemption")]
		public ENStudentExemptionEntityRecord ssENStudentExemption;


		public BitArray OptimizedAttributes;

		public RCUserStudentExemptionRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentExemption = new ENStudentExemptionEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentExemption.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENStudentExemption.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENStudentExemption.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENStudentExemption.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserStudentExemptionRecord r) {
			this = r;
		}


		public static bool operator == (RCUserStudentExemptionRecord a, RCUserStudentExemptionRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentExemption != b.ssENStudentExemption) return false;
			return true;
		}

		public static bool operator != (RCUserStudentExemptionRecord a, RCUserStudentExemptionRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserStudentExemptionRecord)) return false;
			return (this == (RCUserStudentExemptionRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentExemption.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserStudentExemptionRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentExemption = new ENStudentExemptionEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentExemption = (ENStudentExemptionEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENStudentExemption.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENStudentExemption.InternalRecursiveSave();
		}


		public RCUserStudentExemptionRecord Duplicate() {
			RCUserStudentExemptionRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentExemption = (ENStudentExemptionEntityRecord) this.ssENStudentExemption.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentExemption.ToXml(this, recordElem, "StudentExemption", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentexemption") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentExemption")) variable.Value = ssENStudentExemption; else variable.Optimized = true;
				variable.SetFieldName("studentexemption");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentExemption) {
				return ssENStudentExemption;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentExemption.FillFromOther((IRecord) other.AttributeGet(IdStudentExemption));
		}
	} // RCUserStudentExemptionRecord
	/// <summary>
	/// Structure
	///  <code>RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord: ISerializable, ITypedRecord<RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdRAGStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*24GX8LQ_aRQhomR6Kb4nDw");
		private static readonly GlobalObjectKey IdCauseOfConcernReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QkO97mOJxBzLFMqz+6jENA");
		private static readonly GlobalObjectKey IdCauseOfConcernLearnerNotes = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*laYcc3VY189OEbevNXNHhw");
		private static readonly GlobalObjectKey IdCauseOfConcern = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*GX7tbyCb6lMzB7EuQfksTQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("RAGStatus")]
		public ENRAGStatusEntityRecord ssENRAGStatus;

		[System.Xml.Serialization.XmlElement("CauseOfConcernReason")]
		public ENCauseOfConcernReasonEntityRecord ssENCauseOfConcernReason;

		[System.Xml.Serialization.XmlElement("CauseOfConcernLearnerNotes")]
		public ENCauseOfConcernLearnerNotesEntityRecord ssENCauseOfConcernLearnerNotes;

		[System.Xml.Serialization.XmlElement("CauseOfConcern")]
		public ENCauseOfConcernEntityRecord ssENCauseOfConcern;


		public BitArray OptimizedAttributes;

		public RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENCauseOfConcernReason = new ENCauseOfConcernReasonEntityRecord(null);
			ssENCauseOfConcernLearnerNotes = new ENCauseOfConcernLearnerNotesEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(5, false);
			all[2] = new BitArray(3, false);
			all[3] = new BitArray(7, false);
			all[4] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENRAGStatus.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENCauseOfConcernReason.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENCauseOfConcernLearnerNotes.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENCauseOfConcern.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENRAGStatus.OptimizedAttributes = value[1];
					ssENCauseOfConcernReason.OptimizedAttributes = value[2];
					ssENCauseOfConcernLearnerNotes.OptimizedAttributes = value[3];
					ssENCauseOfConcern.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENRAGStatus.OptimizedAttributes;
				all[2] = ssENCauseOfConcernReason.OptimizedAttributes;
				all[3] = ssENCauseOfConcernLearnerNotes.OptimizedAttributes;
				all[4] = ssENCauseOfConcern.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENRAGStatus.Read(r, ref index);
			ssENCauseOfConcernReason.Read(r, ref index);
			ssENCauseOfConcernLearnerNotes.Read(r, ref index);
			ssENCauseOfConcern.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord r) {
			this = r;
		}


		public static bool operator == (RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord a, RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENRAGStatus != b.ssENRAGStatus) return false;
			if (a.ssENCauseOfConcernReason != b.ssENCauseOfConcernReason) return false;
			if (a.ssENCauseOfConcernLearnerNotes != b.ssENCauseOfConcernLearnerNotes) return false;
			if (a.ssENCauseOfConcern != b.ssENCauseOfConcern) return false;
			return true;
		}

		public static bool operator != (RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord a, RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord)) return false;
			return (this == (RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENRAGStatus.GetHashCode()
				^ ssENCauseOfConcernReason.GetHashCode()
				^ ssENCauseOfConcernLearnerNotes.GetHashCode()
				^ ssENCauseOfConcern.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENCauseOfConcernReason = new ENCauseOfConcernReasonEntityRecord(null);
			ssENCauseOfConcernLearnerNotes = new ENCauseOfConcernLearnerNotesEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENRAGStatus = (ENRAGStatusEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENCauseOfConcernReason = (ENCauseOfConcernReasonEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENCauseOfConcernLearnerNotes = (ENCauseOfConcernLearnerNotesEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENRAGStatus.RecursiveReset();
			ssENCauseOfConcernReason.RecursiveReset();
			ssENCauseOfConcernLearnerNotes.RecursiveReset();
			ssENCauseOfConcern.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENRAGStatus.InternalRecursiveSave();
			ssENCauseOfConcernReason.InternalRecursiveSave();
			ssENCauseOfConcernLearnerNotes.InternalRecursiveSave();
			ssENCauseOfConcern.InternalRecursiveSave();
		}


		public RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord Duplicate() {
			RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENRAGStatus = (ENRAGStatusEntityRecord) this.ssENRAGStatus.Duplicate();
			t.ssENCauseOfConcernReason = (ENCauseOfConcernReasonEntityRecord) this.ssENCauseOfConcernReason.Duplicate();
			t.ssENCauseOfConcernLearnerNotes = (ENCauseOfConcernLearnerNotesEntityRecord) this.ssENCauseOfConcernLearnerNotes.Duplicate();
			t.ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) this.ssENCauseOfConcern.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENRAGStatus.ToXml(this, recordElem, "RAGStatus", detailLevel - 1);
				ssENCauseOfConcernReason.ToXml(this, recordElem, "CauseOfConcernReason", detailLevel - 1);
				ssENCauseOfConcernLearnerNotes.ToXml(this, recordElem, "CauseOfConcernLearnerNotes", detailLevel - 1);
				ssENCauseOfConcern.ToXml(this, recordElem, "CauseOfConcern", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "ragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatus")) variable.Value = ssENRAGStatus; else variable.Optimized = true;
				variable.SetFieldName("ragstatus");
			} else if (head == "causeofconcernreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernReason")) variable.Value = ssENCauseOfConcernReason; else variable.Optimized = true;
				variable.SetFieldName("causeofconcernreason");
			} else if (head == "causeofconcernlearnernotes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernLearnerNotes")) variable.Value = ssENCauseOfConcernLearnerNotes; else variable.Optimized = true;
				variable.SetFieldName("causeofconcernlearnernotes");
			} else if (head == "causeofconcern") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcern")) variable.Value = ssENCauseOfConcern; else variable.Optimized = true;
				variable.SetFieldName("causeofconcern");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdRAGStatus) {
				return ssENRAGStatus;
			} else if (key == IdCauseOfConcernReason) {
				return ssENCauseOfConcernReason;
			} else if (key == IdCauseOfConcernLearnerNotes) {
				return ssENCauseOfConcernLearnerNotes;
			} else if (key == IdCauseOfConcern) {
				return ssENCauseOfConcern;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENRAGStatus.FillFromOther((IRecord) other.AttributeGet(IdRAGStatus));
			ssENCauseOfConcernReason.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcernReason));
			ssENCauseOfConcernLearnerNotes.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcernLearnerNotes));
			ssENCauseOfConcern.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcern));
		}
	} // RCUserRAGStatusCauseOfConcernReasonCauseOfConcernLearnerNotesCauseOfConcernRecord
	/// <summary>
	/// Structure
	///  <code>RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRe
	/// cord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord: ISerializable, ITypedRecord<RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdUser_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5F23_wlsRH5bBFQUXYstpQ");
		private static readonly GlobalObjectKey IdUser_3 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*3m4CTKdXK9VzFK1uagUePg");
		private static readonly GlobalObjectKey IdUser_4 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*T2A2_gBynJsk2mi1M1hsyQ");
		private static readonly GlobalObjectKey IdUser_5 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Uy0SyW43yWi5fQAUlrRqtg");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");
		private static readonly GlobalObjectKey IdProgressReportSection = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QQJwCkGhCxsjtT_ejR61nw");
		private static readonly GlobalObjectKey IdProgressReportSections = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5rigJ8jxOBPww+p4Cyr8Og");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("User_2")]
		public ENUserEntityRecord ssENUser_2;

		[System.Xml.Serialization.XmlElement("User_3")]
		public ENUserEntityRecord ssENUser_3;

		[System.Xml.Serialization.XmlElement("User_4")]
		public ENUserEntityRecord ssENUser_4;

		[System.Xml.Serialization.XmlElement("User_5")]
		public ENUserEntityRecord ssENUser_5;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;

		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;

		[System.Xml.Serialization.XmlElement("ProgressReportSection")]
		public ENProgressReportSectionEntityRecord ssENProgressReportSection;

		[System.Xml.Serialization.XmlElement("ProgressReportSections")]
		public ENProgressReportSectionsEntityRecord ssENProgressReportSections;


		public BitArray OptimizedAttributes;

		public RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENUser_3 = new ENUserEntityRecord(null);
			ssENUser_4 = new ENUserEntityRecord(null);
			ssENUser_5 = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[10];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(11, false);
			all[3] = new BitArray(11, false);
			all[4] = new BitArray(11, false);
			all[5] = new BitArray(11, false);
			all[6] = null;
			all[7] = new BitArray(23, false);
			all[8] = new BitArray(49, false);
			all[9] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENUser_2.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENUser_3.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENUser_4.OptimizedAttributes = GetDefaultOptimizedValues()[4];
					ssENUser_5.OptimizedAttributes = GetDefaultOptimizedValues()[5];
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[7];
					ssENProgressReportSection.OptimizedAttributes = GetDefaultOptimizedValues()[8];
					ssENProgressReportSections.OptimizedAttributes = GetDefaultOptimizedValues()[9];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENUser_2.OptimizedAttributes = value[2];
					ssENUser_3.OptimizedAttributes = value[3];
					ssENUser_4.OptimizedAttributes = value[4];
					ssENUser_5.OptimizedAttributes = value[5];
					ssSTBoolean.OptimizedAttributes = value[6];
					ssENProgressReport.OptimizedAttributes = value[7];
					ssENProgressReportSection.OptimizedAttributes = value[8];
					ssENProgressReportSections.OptimizedAttributes = value[9];
				}
			}
			get {
				BitArray[] all = new BitArray[10];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENUser_2.OptimizedAttributes;
				all[3] = ssENUser_3.OptimizedAttributes;
				all[4] = ssENUser_4.OptimizedAttributes;
				all[5] = ssENUser_5.OptimizedAttributes;
				all[6] = null;
				all[7] = ssENProgressReport.OptimizedAttributes;
				all[8] = ssENProgressReportSection.OptimizedAttributes;
				all[9] = ssENProgressReportSections.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENUser_2.Read(r, ref index);
			ssENUser_3.Read(r, ref index);
			ssENUser_4.Read(r, ref index);
			ssENUser_5.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
			ssENProgressReport.Read(r, ref index);
			ssENProgressReportSection.Read(r, ref index);
			ssENProgressReportSections.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord a, RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENUser_2 != b.ssENUser_2) return false;
			if (a.ssENUser_3 != b.ssENUser_3) return false;
			if (a.ssENUser_4 != b.ssENUser_4) return false;
			if (a.ssENUser_5 != b.ssENUser_5) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			if (a.ssENProgressReportSection != b.ssENProgressReportSection) return false;
			if (a.ssENProgressReportSections != b.ssENProgressReportSections) return false;
			return true;
		}

		public static bool operator != (RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord a, RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord)) return false;
			return (this == (RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENUser_2.GetHashCode()
				^ ssENUser_3.GetHashCode()
				^ ssENUser_4.GetHashCode()
				^ ssENUser_5.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				^ ssENProgressReportSection.GetHashCode()
				^ ssENProgressReportSections.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENUser_3 = new ENUserEntityRecord(null);
			ssENUser_4 = new ENUserEntityRecord(null);
			ssENUser_5 = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENUser_2 = (ENUserEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENUser_3 = (ENUserEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENUser_4 = (ENUserEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssENUser_5 = (ENUserEntityRecord) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssENProgressReportSection = (ENProgressReportSectionEntityRecord) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) info.GetValue(fields[9] .Name, fields[9] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENUser_2.RecursiveReset();
			ssENUser_3.RecursiveReset();
			ssENUser_4.RecursiveReset();
			ssENUser_5.RecursiveReset();
			ssSTBoolean.RecursiveReset();
			ssENProgressReport.RecursiveReset();
			ssENProgressReportSection.RecursiveReset();
			ssENProgressReportSections.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENUser_2.InternalRecursiveSave();
			ssENUser_3.InternalRecursiveSave();
			ssENUser_4.InternalRecursiveSave();
			ssENUser_5.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
			ssENProgressReport.InternalRecursiveSave();
			ssENProgressReportSection.InternalRecursiveSave();
			ssENProgressReportSections.InternalRecursiveSave();
		}


		public RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord Duplicate() {
			RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENUser_2 = (ENUserEntityRecord) this.ssENUser_2.Duplicate();
			t.ssENUser_3 = (ENUserEntityRecord) this.ssENUser_3.Duplicate();
			t.ssENUser_4 = (ENUserEntityRecord) this.ssENUser_4.Duplicate();
			t.ssENUser_5 = (ENUserEntityRecord) this.ssENUser_5.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.ssENProgressReportSection = (ENProgressReportSectionEntityRecord) this.ssENProgressReportSection.Duplicate();
			t.ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) this.ssENProgressReportSections.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENUser_2.ToXml(this, recordElem, "User_2", detailLevel - 1);
				ssENUser_3.ToXml(this, recordElem, "User_3", detailLevel - 1);
				ssENUser_4.ToXml(this, recordElem, "User_4", detailLevel - 1);
				ssENUser_5.ToXml(this, recordElem, "User_5", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
				ssENProgressReportSection.ToXml(this, recordElem, "ProgressReportSection", detailLevel - 1);
				ssENProgressReportSections.ToXml(this, recordElem, "ProgressReportSections", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "user_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_2")) variable.Value = ssENUser_2; else variable.Optimized = true;
				variable.SetFieldName("user_2");
			} else if (head == "user_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_3")) variable.Value = ssENUser_3; else variable.Optimized = true;
				variable.SetFieldName("user_3");
			} else if (head == "user_4") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_4")) variable.Value = ssENUser_4; else variable.Optimized = true;
				variable.SetFieldName("user_4");
			} else if (head == "user_5") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_5")) variable.Value = ssENUser_5; else variable.Optimized = true;
				variable.SetFieldName("user_5");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			} else if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			} else if (head == "progressreportsection") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSection")) variable.Value = ssENProgressReportSection; else variable.Optimized = true;
				variable.SetFieldName("progressreportsection");
			} else if (head == "progressreportsections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSections")) variable.Value = ssENProgressReportSections; else variable.Optimized = true;
				variable.SetFieldName("progressreportsections");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdUser_2) {
				return ssENUser_2;
			} else if (key == IdUser_3) {
				return ssENUser_3;
			} else if (key == IdUser_4) {
				return ssENUser_4;
			} else if (key == IdUser_5) {
				return ssENUser_5;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else if (key == IdProgressReport) {
				return ssENProgressReport;
			} else if (key == IdProgressReportSection) {
				return ssENProgressReportSection;
			} else if (key == IdProgressReportSections) {
				return ssENProgressReportSections;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENUser_2.FillFromOther((IRecord) other.AttributeGet(IdUser_2));
			ssENUser_3.FillFromOther((IRecord) other.AttributeGet(IdUser_3));
			ssENUser_4.FillFromOther((IRecord) other.AttributeGet(IdUser_4));
			ssENUser_5.FillFromOther((IRecord) other.AttributeGet(IdUser_5));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
			ssENProgressReportSection.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSection));
			ssENProgressReportSections.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSections));
		}
	} // RCGroupUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord
	/// <summary>
	/// Structure <code>RCRiskAssessmentRiskAssessmentKeepInformedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRiskAssessmentRiskAssessmentKeepInformedRecord: ISerializable, ITypedRecord<RCRiskAssessmentRiskAssessmentKeepInformedRecord> {
		private static readonly GlobalObjectKey IdRiskAssessment = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NV6tF5Chu6exdZbe80vBxw");
		private static readonly GlobalObjectKey IdRiskAssessmentKeepInformed = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*4ftShLPK7Bjub7or9ZopWA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RiskAssessment")]
		public ENRiskAssessmentEntityRecord ssENRiskAssessment;

		[System.Xml.Serialization.XmlElement("RiskAssessmentKeepInformed")]
		public ENRiskAssessmentKeepInformedEntityRecord ssENRiskAssessmentKeepInformed;


		public BitArray OptimizedAttributes;

		public RCRiskAssessmentRiskAssessmentKeepInformedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
			ssENRiskAssessmentKeepInformed = new ENRiskAssessmentKeepInformedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(22, false);
			all[1] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRiskAssessment.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENRiskAssessmentKeepInformed.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENRiskAssessment.OptimizedAttributes = value[0];
					ssENRiskAssessmentKeepInformed.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENRiskAssessment.OptimizedAttributes;
				all[1] = ssENRiskAssessmentKeepInformed.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRiskAssessment.Read(r, ref index);
			ssENRiskAssessmentKeepInformed.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRiskAssessmentRiskAssessmentKeepInformedRecord r) {
			this = r;
		}


		public static bool operator == (RCRiskAssessmentRiskAssessmentKeepInformedRecord a, RCRiskAssessmentRiskAssessmentKeepInformedRecord b) {
			if (a.ssENRiskAssessment != b.ssENRiskAssessment) return false;
			if (a.ssENRiskAssessmentKeepInformed != b.ssENRiskAssessmentKeepInformed) return false;
			return true;
		}

		public static bool operator != (RCRiskAssessmentRiskAssessmentKeepInformedRecord a, RCRiskAssessmentRiskAssessmentKeepInformedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRiskAssessmentRiskAssessmentKeepInformedRecord)) return false;
			return (this == (RCRiskAssessmentRiskAssessmentKeepInformedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRiskAssessment.GetHashCode()
				^ ssENRiskAssessmentKeepInformed.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRiskAssessmentRiskAssessmentKeepInformedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
			ssENRiskAssessmentKeepInformed = new ENRiskAssessmentKeepInformedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRiskAssessment = (ENRiskAssessmentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENRiskAssessmentKeepInformed = (ENRiskAssessmentKeepInformedEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENRiskAssessment.RecursiveReset();
			ssENRiskAssessmentKeepInformed.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRiskAssessment.InternalRecursiveSave();
			ssENRiskAssessmentKeepInformed.InternalRecursiveSave();
		}


		public RCRiskAssessmentRiskAssessmentKeepInformedRecord Duplicate() {
			RCRiskAssessmentRiskAssessmentKeepInformedRecord t;
			t.ssENRiskAssessment = (ENRiskAssessmentEntityRecord) this.ssENRiskAssessment.Duplicate();
			t.ssENRiskAssessmentKeepInformed = (ENRiskAssessmentKeepInformedEntityRecord) this.ssENRiskAssessmentKeepInformed.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRiskAssessment.ToXml(this, recordElem, "RiskAssessment", detailLevel - 1);
				ssENRiskAssessmentKeepInformed.ToXml(this, recordElem, "RiskAssessmentKeepInformed", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "riskassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessment")) variable.Value = ssENRiskAssessment; else variable.Optimized = true;
				variable.SetFieldName("riskassessment");
			} else if (head == "riskassessmentkeepinformed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentKeepInformed")) variable.Value = ssENRiskAssessmentKeepInformed; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentkeepinformed");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRiskAssessment) {
				return ssENRiskAssessment;
			} else if (key == IdRiskAssessmentKeepInformed) {
				return ssENRiskAssessmentKeepInformed;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRiskAssessment.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessment));
			ssENRiskAssessmentKeepInformed.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentKeepInformed));
		}
	} // RCRiskAssessmentRiskAssessmentKeepInformedRecord
	/// <summary>
	/// Structure <code>RCRoleBooleanRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRoleBooleanRecord: ISerializable, ITypedRecord<RCRoleBooleanRecord> {
		private static readonly GlobalObjectKey IdRole = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*hAhjEym2paOekp4c3qQusQ");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Role")]
		public ENRoleEntityRecord ssENRole;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;


		public BitArray OptimizedAttributes;

		public RCRoleBooleanRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRole = new ENRoleEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(7, false);
			all[1] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRole.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENRole.OptimizedAttributes = value[0];
					ssSTBoolean.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENRole.OptimizedAttributes;
				all[1] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRole.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRoleBooleanRecord r) {
			this = r;
		}


		public static bool operator == (RCRoleBooleanRecord a, RCRoleBooleanRecord b) {
			if (a.ssENRole != b.ssENRole) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			return true;
		}

		public static bool operator != (RCRoleBooleanRecord a, RCRoleBooleanRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRoleBooleanRecord)) return false;
			return (this == (RCRoleBooleanRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRole.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRoleBooleanRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRole = new ENRoleEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRole = (ENRoleEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENRole.RecursiveReset();
			ssSTBoolean.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRole.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
		}


		public RCRoleBooleanRecord Duplicate() {
			RCRoleBooleanRecord t;
			t.ssENRole = (ENRoleEntityRecord) this.ssENRole.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRole.ToXml(this, recordElem, "Role", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "role") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Role")) variable.Value = ssENRole; else variable.Optimized = true;
				variable.SetFieldName("role");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRole) {
				return ssENRole;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRole.FillFromOther((IRecord) other.AttributeGet(IdRole));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
		}
	} // RCRoleBooleanRecord
	/// <summary>
	/// Structure <code>RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord: ISerializable, ITypedRecord<RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");
		private static readonly GlobalObjectKey IdDisciplinary = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*uPt8Pj187p4cYWjLev+HKw");
		private static readonly GlobalObjectKey IdDisciplinaryType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*AJljuw7hDz7g8TETpAkOSQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;

		[System.Xml.Serialization.XmlElement("Disciplinary")]
		public ENDisciplinaryEntityRecord ssENDisciplinary;

		[System.Xml.Serialization.XmlElement("DisciplinaryType")]
		public ENDisciplinaryTypeEntityRecord ssENDisciplinaryType;


		public BitArray OptimizedAttributes;

		public RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENDisciplinary = new ENDisciplinaryEntityRecord(null);
			ssENDisciplinaryType = new ENDisciplinaryTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = null;
			all[3] = new BitArray(6, false);
			all[4] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENDisciplinary.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENDisciplinaryType.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssSTBoolean.OptimizedAttributes = value[2];
					ssENDisciplinary.OptimizedAttributes = value[3];
					ssENDisciplinaryType.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = null;
				all[3] = ssENDisciplinary.OptimizedAttributes;
				all[4] = ssENDisciplinaryType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
			ssENDisciplinary.Read(r, ref index);
			ssENDisciplinaryType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord a, RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			if (a.ssENDisciplinary != b.ssENDisciplinary) return false;
			if (a.ssENDisciplinaryType != b.ssENDisciplinaryType) return false;
			return true;
		}

		public static bool operator != (RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord a, RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord)) return false;
			return (this == (RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				^ ssENDisciplinary.GetHashCode()
				^ ssENDisciplinaryType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENDisciplinary = new ENDisciplinaryEntityRecord(null);
			ssENDisciplinaryType = new ENDisciplinaryTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENDisciplinary = (ENDisciplinaryEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENDisciplinaryType = (ENDisciplinaryTypeEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssSTBoolean.RecursiveReset();
			ssENDisciplinary.RecursiveReset();
			ssENDisciplinaryType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
			ssENDisciplinary.InternalRecursiveSave();
			ssENDisciplinaryType.InternalRecursiveSave();
		}


		public RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord Duplicate() {
			RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.ssENDisciplinary = (ENDisciplinaryEntityRecord) this.ssENDisciplinary.Duplicate();
			t.ssENDisciplinaryType = (ENDisciplinaryTypeEntityRecord) this.ssENDisciplinaryType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
				ssENDisciplinary.ToXml(this, recordElem, "Disciplinary", detailLevel - 1);
				ssENDisciplinaryType.ToXml(this, recordElem, "DisciplinaryType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			} else if (head == "disciplinary") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Disciplinary")) variable.Value = ssENDisciplinary; else variable.Optimized = true;
				variable.SetFieldName("disciplinary");
			} else if (head == "disciplinarytype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DisciplinaryType")) variable.Value = ssENDisciplinaryType; else variable.Optimized = true;
				variable.SetFieldName("disciplinarytype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else if (key == IdDisciplinary) {
				return ssENDisciplinary;
			} else if (key == IdDisciplinaryType) {
				return ssENDisciplinaryType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
			ssENDisciplinary.FillFromOther((IRecord) other.AttributeGet(IdDisciplinary));
			ssENDisciplinaryType.FillFromOther((IRecord) other.AttributeGet(IdDisciplinaryType));
		}
	} // RCStudentUserBooleanDisciplinaryDisciplinaryTypeRecord
	/// <summary>
	/// Structure <code>RCCauseOfConcernReasonCauseOfConcernRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCauseOfConcernReasonCauseOfConcernRecord: ISerializable, ITypedRecord<RCCauseOfConcernReasonCauseOfConcernRecord> {
		private static readonly GlobalObjectKey IdCauseOfConcernReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QkO97mOJxBzLFMqz+6jENA");
		private static readonly GlobalObjectKey IdCauseOfConcern = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*GX7tbyCb6lMzB7EuQfksTQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CauseOfConcernReason")]
		public ENCauseOfConcernReasonEntityRecord ssENCauseOfConcernReason;

		[System.Xml.Serialization.XmlElement("CauseOfConcern")]
		public ENCauseOfConcernEntityRecord ssENCauseOfConcern;


		public BitArray OptimizedAttributes;

		public RCCauseOfConcernReasonCauseOfConcernRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCauseOfConcernReason = new ENCauseOfConcernReasonEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(3, false);
			all[1] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCauseOfConcernReason.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENCauseOfConcern.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENCauseOfConcernReason.OptimizedAttributes = value[0];
					ssENCauseOfConcern.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENCauseOfConcernReason.OptimizedAttributes;
				all[1] = ssENCauseOfConcern.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCauseOfConcernReason.Read(r, ref index);
			ssENCauseOfConcern.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCauseOfConcernReasonCauseOfConcernRecord r) {
			this = r;
		}


		public static bool operator == (RCCauseOfConcernReasonCauseOfConcernRecord a, RCCauseOfConcernReasonCauseOfConcernRecord b) {
			if (a.ssENCauseOfConcernReason != b.ssENCauseOfConcernReason) return false;
			if (a.ssENCauseOfConcern != b.ssENCauseOfConcern) return false;
			return true;
		}

		public static bool operator != (RCCauseOfConcernReasonCauseOfConcernRecord a, RCCauseOfConcernReasonCauseOfConcernRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCauseOfConcernReasonCauseOfConcernRecord)) return false;
			return (this == (RCCauseOfConcernReasonCauseOfConcernRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCauseOfConcernReason.GetHashCode()
				^ ssENCauseOfConcern.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCauseOfConcernReasonCauseOfConcernRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCauseOfConcernReason = new ENCauseOfConcernReasonEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCauseOfConcernReason = (ENCauseOfConcernReasonEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENCauseOfConcernReason.RecursiveReset();
			ssENCauseOfConcern.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCauseOfConcernReason.InternalRecursiveSave();
			ssENCauseOfConcern.InternalRecursiveSave();
		}


		public RCCauseOfConcernReasonCauseOfConcernRecord Duplicate() {
			RCCauseOfConcernReasonCauseOfConcernRecord t;
			t.ssENCauseOfConcernReason = (ENCauseOfConcernReasonEntityRecord) this.ssENCauseOfConcernReason.Duplicate();
			t.ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) this.ssENCauseOfConcern.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCauseOfConcernReason.ToXml(this, recordElem, "CauseOfConcernReason", detailLevel - 1);
				ssENCauseOfConcern.ToXml(this, recordElem, "CauseOfConcern", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "causeofconcernreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernReason")) variable.Value = ssENCauseOfConcernReason; else variable.Optimized = true;
				variable.SetFieldName("causeofconcernreason");
			} else if (head == "causeofconcern") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcern")) variable.Value = ssENCauseOfConcern; else variable.Optimized = true;
				variable.SetFieldName("causeofconcern");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCauseOfConcernReason) {
				return ssENCauseOfConcernReason;
			} else if (key == IdCauseOfConcern) {
				return ssENCauseOfConcern;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCauseOfConcernReason.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcernReason));
			ssENCauseOfConcern.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcern));
		}
	} // RCCauseOfConcernReasonCauseOfConcernRecord
	/// <summary>
	/// Structure <code>RCUserStudentPastoralSupportRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserStudentPastoralSupportRecord: ISerializable, ITypedRecord<RCUserStudentPastoralSupportRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentPastoralSupport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*vpNAHq_yZC6uOTQZQAP58g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentPastoralSupport")]
		public ENStudentPastoralSupportEntityRecord ssENStudentPastoralSupport;


		public BitArray OptimizedAttributes;

		public RCUserStudentPastoralSupportRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentPastoralSupport = new ENStudentPastoralSupportEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentPastoralSupport.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENStudentPastoralSupport.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENStudentPastoralSupport.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENStudentPastoralSupport.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserStudentPastoralSupportRecord r) {
			this = r;
		}


		public static bool operator == (RCUserStudentPastoralSupportRecord a, RCUserStudentPastoralSupportRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentPastoralSupport != b.ssENStudentPastoralSupport) return false;
			return true;
		}

		public static bool operator != (RCUserStudentPastoralSupportRecord a, RCUserStudentPastoralSupportRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserStudentPastoralSupportRecord)) return false;
			return (this == (RCUserStudentPastoralSupportRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentPastoralSupport.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserStudentPastoralSupportRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentPastoralSupport = new ENStudentPastoralSupportEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentPastoralSupport = (ENStudentPastoralSupportEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENStudentPastoralSupport.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENStudentPastoralSupport.InternalRecursiveSave();
		}


		public RCUserStudentPastoralSupportRecord Duplicate() {
			RCUserStudentPastoralSupportRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentPastoralSupport = (ENStudentPastoralSupportEntityRecord) this.ssENStudentPastoralSupport.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentPastoralSupport.ToXml(this, recordElem, "StudentPastoralSupport", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentpastoralsupport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentPastoralSupport")) variable.Value = ssENStudentPastoralSupport; else variable.Optimized = true;
				variable.SetFieldName("studentpastoralsupport");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentPastoralSupport) {
				return ssENStudentPastoralSupport;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentPastoralSupport.FillFromOther((IRecord) other.AttributeGet(IdStudentPastoralSupport));
		}
	} // RCUserStudentPastoralSupportRecord
	/// <summary>
	/// Structure <code>RCStudentUserStudentLogRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserStudentLogRecord: ISerializable, ITypedRecord<RCStudentUserStudentLogRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentLog = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*a207hFuVwR8WZj05PrSs2A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentLog")]
		public ENStudentLogEntityRecord ssENStudentLog;


		public BitArray OptimizedAttributes;

		public RCStudentUserStudentLogRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(44, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudentLog.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENStudentLog.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENStudentLog.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENStudentLog.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserStudentLogRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserStudentLogRecord a, RCStudentUserStudentLogRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentLog != b.ssENStudentLog) return false;
			return true;
		}

		public static bool operator != (RCStudentUserStudentLogRecord a, RCStudentUserStudentLogRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserStudentLogRecord)) return false;
			return (this == (RCStudentUserStudentLogRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentLog.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserStudentLogRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudentLog = (ENStudentLogEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENStudentLog.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENStudentLog.InternalRecursiveSave();
		}


		public RCStudentUserStudentLogRecord Duplicate() {
			RCStudentUserStudentLogRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentLog = (ENStudentLogEntityRecord) this.ssENStudentLog.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentLog.ToXml(this, recordElem, "StudentLog", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentlog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLog")) variable.Value = ssENStudentLog; else variable.Optimized = true;
				variable.SetFieldName("studentlog");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentLog) {
				return ssENStudentLog;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentLog.FillFromOther((IRecord) other.AttributeGet(IdStudentLog));
		}
	} // RCStudentUserStudentLogRecord
	/// <summary>
	/// Structure
	///  <code>RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRi
	/// skAssessmentRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord: ISerializable, ITypedRecord<RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdRiskAssessmentSourceOfEvidence = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*J76fIpOP_Gwf3cLu+hjeCA");
		private static readonly GlobalObjectKey IdRiskAssessmentWhoIsAtRisk = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*nclxrMCqa9Ei9Jk7QrS2Rg");
		private static readonly GlobalObjectKey IdRiskAssessmentSSPReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*4l2tdtPDjzGTJ8nqfa847w");
		private static readonly GlobalObjectKey IdRiskAssessment = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NV6tF5Chu6exdZbe80vBxw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("RiskAssessmentSourceOfEvidence")]
		public ENRiskAssessmentSourceOfEvidenceEntityRecord ssENRiskAssessmentSourceOfEvidence;

		[System.Xml.Serialization.XmlElement("RiskAssessmentWhoIsAtRisk")]
		public ENRiskAssessmentWhoIsAtRiskEntityRecord ssENRiskAssessmentWhoIsAtRisk;

		[System.Xml.Serialization.XmlElement("RiskAssessmentSSPReason")]
		public ENRiskAssessmentSSPReasonEntityRecord ssENRiskAssessmentSSPReason;

		[System.Xml.Serialization.XmlElement("RiskAssessment")]
		public ENRiskAssessmentEntityRecord ssENRiskAssessment;


		public BitArray OptimizedAttributes;

		public RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENRiskAssessmentSourceOfEvidence = new ENRiskAssessmentSourceOfEvidenceEntityRecord(null);
			ssENRiskAssessmentWhoIsAtRisk = new ENRiskAssessmentWhoIsAtRiskEntityRecord(null);
			ssENRiskAssessmentSSPReason = new ENRiskAssessmentSSPReasonEntityRecord(null);
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[6];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(4, false);
			all[3] = new BitArray(4, false);
			all[4] = new BitArray(4, false);
			all[5] = new BitArray(22, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENRiskAssessmentSourceOfEvidence.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENRiskAssessmentWhoIsAtRisk.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENRiskAssessmentSSPReason.OptimizedAttributes = GetDefaultOptimizedValues()[4];
					ssENRiskAssessment.OptimizedAttributes = GetDefaultOptimizedValues()[5];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENRiskAssessmentSourceOfEvidence.OptimizedAttributes = value[2];
					ssENRiskAssessmentWhoIsAtRisk.OptimizedAttributes = value[3];
					ssENRiskAssessmentSSPReason.OptimizedAttributes = value[4];
					ssENRiskAssessment.OptimizedAttributes = value[5];
				}
			}
			get {
				BitArray[] all = new BitArray[6];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENRiskAssessmentSourceOfEvidence.OptimizedAttributes;
				all[3] = ssENRiskAssessmentWhoIsAtRisk.OptimizedAttributes;
				all[4] = ssENRiskAssessmentSSPReason.OptimizedAttributes;
				all[5] = ssENRiskAssessment.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENRiskAssessmentSourceOfEvidence.Read(r, ref index);
			ssENRiskAssessmentWhoIsAtRisk.Read(r, ref index);
			ssENRiskAssessmentSSPReason.Read(r, ref index);
			ssENRiskAssessment.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord a, RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENRiskAssessmentSourceOfEvidence != b.ssENRiskAssessmentSourceOfEvidence) return false;
			if (a.ssENRiskAssessmentWhoIsAtRisk != b.ssENRiskAssessmentWhoIsAtRisk) return false;
			if (a.ssENRiskAssessmentSSPReason != b.ssENRiskAssessmentSSPReason) return false;
			if (a.ssENRiskAssessment != b.ssENRiskAssessment) return false;
			return true;
		}

		public static bool operator != (RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord a, RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord)) return false;
			return (this == (RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENRiskAssessmentSourceOfEvidence.GetHashCode()
				^ ssENRiskAssessmentWhoIsAtRisk.GetHashCode()
				^ ssENRiskAssessmentSSPReason.GetHashCode()
				^ ssENRiskAssessment.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENRiskAssessmentSourceOfEvidence = new ENRiskAssessmentSourceOfEvidenceEntityRecord(null);
			ssENRiskAssessmentWhoIsAtRisk = new ENRiskAssessmentWhoIsAtRiskEntityRecord(null);
			ssENRiskAssessmentSSPReason = new ENRiskAssessmentSSPReasonEntityRecord(null);
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENRiskAssessmentSourceOfEvidence = (ENRiskAssessmentSourceOfEvidenceEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENRiskAssessmentWhoIsAtRisk = (ENRiskAssessmentWhoIsAtRiskEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENRiskAssessmentSSPReason = (ENRiskAssessmentSSPReasonEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssENRiskAssessment = (ENRiskAssessmentEntityRecord) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENRiskAssessmentSourceOfEvidence.RecursiveReset();
			ssENRiskAssessmentWhoIsAtRisk.RecursiveReset();
			ssENRiskAssessmentSSPReason.RecursiveReset();
			ssENRiskAssessment.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENRiskAssessmentSourceOfEvidence.InternalRecursiveSave();
			ssENRiskAssessmentWhoIsAtRisk.InternalRecursiveSave();
			ssENRiskAssessmentSSPReason.InternalRecursiveSave();
			ssENRiskAssessment.InternalRecursiveSave();
		}


		public RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord Duplicate() {
			RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENRiskAssessmentSourceOfEvidence = (ENRiskAssessmentSourceOfEvidenceEntityRecord) this.ssENRiskAssessmentSourceOfEvidence.Duplicate();
			t.ssENRiskAssessmentWhoIsAtRisk = (ENRiskAssessmentWhoIsAtRiskEntityRecord) this.ssENRiskAssessmentWhoIsAtRisk.Duplicate();
			t.ssENRiskAssessmentSSPReason = (ENRiskAssessmentSSPReasonEntityRecord) this.ssENRiskAssessmentSSPReason.Duplicate();
			t.ssENRiskAssessment = (ENRiskAssessmentEntityRecord) this.ssENRiskAssessment.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENRiskAssessmentSourceOfEvidence.ToXml(this, recordElem, "RiskAssessmentSourceOfEvidence", detailLevel - 1);
				ssENRiskAssessmentWhoIsAtRisk.ToXml(this, recordElem, "RiskAssessmentWhoIsAtRisk", detailLevel - 1);
				ssENRiskAssessmentSSPReason.ToXml(this, recordElem, "RiskAssessmentSSPReason", detailLevel - 1);
				ssENRiskAssessment.ToXml(this, recordElem, "RiskAssessment", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "riskassessmentsourceofevidence") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentSourceOfEvidence")) variable.Value = ssENRiskAssessmentSourceOfEvidence; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentsourceofevidence");
			} else if (head == "riskassessmentwhoisatrisk") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentWhoIsAtRisk")) variable.Value = ssENRiskAssessmentWhoIsAtRisk; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentwhoisatrisk");
			} else if (head == "riskassessmentsspreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentSSPReason")) variable.Value = ssENRiskAssessmentSSPReason; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentsspreason");
			} else if (head == "riskassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessment")) variable.Value = ssENRiskAssessment; else variable.Optimized = true;
				variable.SetFieldName("riskassessment");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdRiskAssessmentSourceOfEvidence) {
				return ssENRiskAssessmentSourceOfEvidence;
			} else if (key == IdRiskAssessmentWhoIsAtRisk) {
				return ssENRiskAssessmentWhoIsAtRisk;
			} else if (key == IdRiskAssessmentSSPReason) {
				return ssENRiskAssessmentSSPReason;
			} else if (key == IdRiskAssessment) {
				return ssENRiskAssessment;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENRiskAssessmentSourceOfEvidence.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentSourceOfEvidence));
			ssENRiskAssessmentWhoIsAtRisk.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentWhoIsAtRisk));
			ssENRiskAssessmentSSPReason.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentSSPReason));
			ssENRiskAssessment.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessment));
		}
	} // RCStudentUserRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord
	/// <summary>
	/// Structure
	///  <code>RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAs
	/// sessmentRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord: ISerializable, ITypedRecord<RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdRiskAssessmentSourceOfEvidence = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*J76fIpOP_Gwf3cLu+hjeCA");
		private static readonly GlobalObjectKey IdRiskAssessmentWhoIsAtRisk = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*nclxrMCqa9Ei9Jk7QrS2Rg");
		private static readonly GlobalObjectKey IdRiskAssessmentSSPReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*4l2tdtPDjzGTJ8nqfa847w");
		private static readonly GlobalObjectKey IdRiskAssessment = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NV6tF5Chu6exdZbe80vBxw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("RiskAssessmentSourceOfEvidence")]
		public ENRiskAssessmentSourceOfEvidenceEntityRecord ssENRiskAssessmentSourceOfEvidence;

		[System.Xml.Serialization.XmlElement("RiskAssessmentWhoIsAtRisk")]
		public ENRiskAssessmentWhoIsAtRiskEntityRecord ssENRiskAssessmentWhoIsAtRisk;

		[System.Xml.Serialization.XmlElement("RiskAssessmentSSPReason")]
		public ENRiskAssessmentSSPReasonEntityRecord ssENRiskAssessmentSSPReason;

		[System.Xml.Serialization.XmlElement("RiskAssessment")]
		public ENRiskAssessmentEntityRecord ssENRiskAssessment;


		public BitArray OptimizedAttributes;

		public RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENRiskAssessmentSourceOfEvidence = new ENRiskAssessmentSourceOfEvidenceEntityRecord(null);
			ssENRiskAssessmentWhoIsAtRisk = new ENRiskAssessmentWhoIsAtRiskEntityRecord(null);
			ssENRiskAssessmentSSPReason = new ENRiskAssessmentSSPReasonEntityRecord(null);
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(4, false);
			all[2] = new BitArray(4, false);
			all[3] = new BitArray(4, false);
			all[4] = new BitArray(22, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENRiskAssessmentSourceOfEvidence.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENRiskAssessmentWhoIsAtRisk.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENRiskAssessmentSSPReason.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENRiskAssessment.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENRiskAssessmentSourceOfEvidence.OptimizedAttributes = value[1];
					ssENRiskAssessmentWhoIsAtRisk.OptimizedAttributes = value[2];
					ssENRiskAssessmentSSPReason.OptimizedAttributes = value[3];
					ssENRiskAssessment.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENRiskAssessmentSourceOfEvidence.OptimizedAttributes;
				all[2] = ssENRiskAssessmentWhoIsAtRisk.OptimizedAttributes;
				all[3] = ssENRiskAssessmentSSPReason.OptimizedAttributes;
				all[4] = ssENRiskAssessment.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENRiskAssessmentSourceOfEvidence.Read(r, ref index);
			ssENRiskAssessmentWhoIsAtRisk.Read(r, ref index);
			ssENRiskAssessmentSSPReason.Read(r, ref index);
			ssENRiskAssessment.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord a, RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENRiskAssessmentSourceOfEvidence != b.ssENRiskAssessmentSourceOfEvidence) return false;
			if (a.ssENRiskAssessmentWhoIsAtRisk != b.ssENRiskAssessmentWhoIsAtRisk) return false;
			if (a.ssENRiskAssessmentSSPReason != b.ssENRiskAssessmentSSPReason) return false;
			if (a.ssENRiskAssessment != b.ssENRiskAssessment) return false;
			return true;
		}

		public static bool operator != (RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord a, RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord)) return false;
			return (this == (RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENRiskAssessmentSourceOfEvidence.GetHashCode()
				^ ssENRiskAssessmentWhoIsAtRisk.GetHashCode()
				^ ssENRiskAssessmentSSPReason.GetHashCode()
				^ ssENRiskAssessment.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENRiskAssessmentSourceOfEvidence = new ENRiskAssessmentSourceOfEvidenceEntityRecord(null);
			ssENRiskAssessmentWhoIsAtRisk = new ENRiskAssessmentWhoIsAtRiskEntityRecord(null);
			ssENRiskAssessmentSSPReason = new ENRiskAssessmentSSPReasonEntityRecord(null);
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENRiskAssessmentSourceOfEvidence = (ENRiskAssessmentSourceOfEvidenceEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENRiskAssessmentWhoIsAtRisk = (ENRiskAssessmentWhoIsAtRiskEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENRiskAssessmentSSPReason = (ENRiskAssessmentSSPReasonEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENRiskAssessment = (ENRiskAssessmentEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENRiskAssessmentSourceOfEvidence.RecursiveReset();
			ssENRiskAssessmentWhoIsAtRisk.RecursiveReset();
			ssENRiskAssessmentSSPReason.RecursiveReset();
			ssENRiskAssessment.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENRiskAssessmentSourceOfEvidence.InternalRecursiveSave();
			ssENRiskAssessmentWhoIsAtRisk.InternalRecursiveSave();
			ssENRiskAssessmentSSPReason.InternalRecursiveSave();
			ssENRiskAssessment.InternalRecursiveSave();
		}


		public RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord Duplicate() {
			RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENRiskAssessmentSourceOfEvidence = (ENRiskAssessmentSourceOfEvidenceEntityRecord) this.ssENRiskAssessmentSourceOfEvidence.Duplicate();
			t.ssENRiskAssessmentWhoIsAtRisk = (ENRiskAssessmentWhoIsAtRiskEntityRecord) this.ssENRiskAssessmentWhoIsAtRisk.Duplicate();
			t.ssENRiskAssessmentSSPReason = (ENRiskAssessmentSSPReasonEntityRecord) this.ssENRiskAssessmentSSPReason.Duplicate();
			t.ssENRiskAssessment = (ENRiskAssessmentEntityRecord) this.ssENRiskAssessment.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENRiskAssessmentSourceOfEvidence.ToXml(this, recordElem, "RiskAssessmentSourceOfEvidence", detailLevel - 1);
				ssENRiskAssessmentWhoIsAtRisk.ToXml(this, recordElem, "RiskAssessmentWhoIsAtRisk", detailLevel - 1);
				ssENRiskAssessmentSSPReason.ToXml(this, recordElem, "RiskAssessmentSSPReason", detailLevel - 1);
				ssENRiskAssessment.ToXml(this, recordElem, "RiskAssessment", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "riskassessmentsourceofevidence") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentSourceOfEvidence")) variable.Value = ssENRiskAssessmentSourceOfEvidence; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentsourceofevidence");
			} else if (head == "riskassessmentwhoisatrisk") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentWhoIsAtRisk")) variable.Value = ssENRiskAssessmentWhoIsAtRisk; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentwhoisatrisk");
			} else if (head == "riskassessmentsspreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentSSPReason")) variable.Value = ssENRiskAssessmentSSPReason; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentsspreason");
			} else if (head == "riskassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessment")) variable.Value = ssENRiskAssessment; else variable.Optimized = true;
				variable.SetFieldName("riskassessment");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdRiskAssessmentSourceOfEvidence) {
				return ssENRiskAssessmentSourceOfEvidence;
			} else if (key == IdRiskAssessmentWhoIsAtRisk) {
				return ssENRiskAssessmentWhoIsAtRisk;
			} else if (key == IdRiskAssessmentSSPReason) {
				return ssENRiskAssessmentSSPReason;
			} else if (key == IdRiskAssessment) {
				return ssENRiskAssessment;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENRiskAssessmentSourceOfEvidence.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentSourceOfEvidence));
			ssENRiskAssessmentWhoIsAtRisk.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentWhoIsAtRisk));
			ssENRiskAssessmentSSPReason.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentSSPReason));
			ssENRiskAssessment.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessment));
		}
	} // RCStudentRiskAssessmentSourceOfEvidenceRiskAssessmentWhoIsAtRiskRiskAssessmentSSPReasonRiskAssessmentRecord
	/// <summary>
	/// Structure <code>RCSupportTypeSupportRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSupportTypeSupportRecord: ISerializable, ITypedRecord<RCSupportTypeSupportRecord> {
		private static readonly GlobalObjectKey IdSupportType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*oxFASUG0u4MEK0rh82YttA");
		private static readonly GlobalObjectKey IdSupport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6glmvIsloKyTYuAFVZiRXA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SupportType")]
		public ENSupportTypeEntityRecord ssENSupportType;

		[System.Xml.Serialization.XmlElement("Support")]
		public ENSupportEntityRecord ssENSupport;


		public BitArray OptimizedAttributes;

		public RCSupportTypeSupportRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSupportType = new ENSupportTypeEntityRecord(null);
			ssENSupport = new ENSupportEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(7, false);
			all[1] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSupportType.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENSupport.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENSupportType.OptimizedAttributes = value[0];
					ssENSupport.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENSupportType.OptimizedAttributes;
				all[1] = ssENSupport.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSupportType.Read(r, ref index);
			ssENSupport.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSupportTypeSupportRecord r) {
			this = r;
		}


		public static bool operator == (RCSupportTypeSupportRecord a, RCSupportTypeSupportRecord b) {
			if (a.ssENSupportType != b.ssENSupportType) return false;
			if (a.ssENSupport != b.ssENSupport) return false;
			return true;
		}

		public static bool operator != (RCSupportTypeSupportRecord a, RCSupportTypeSupportRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSupportTypeSupportRecord)) return false;
			return (this == (RCSupportTypeSupportRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSupportType.GetHashCode()
				^ ssENSupport.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSupportTypeSupportRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSupportType = new ENSupportTypeEntityRecord(null);
			ssENSupport = new ENSupportEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSupportType = (ENSupportTypeEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENSupport = (ENSupportEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENSupportType.RecursiveReset();
			ssENSupport.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSupportType.InternalRecursiveSave();
			ssENSupport.InternalRecursiveSave();
		}


		public RCSupportTypeSupportRecord Duplicate() {
			RCSupportTypeSupportRecord t;
			t.ssENSupportType = (ENSupportTypeEntityRecord) this.ssENSupportType.Duplicate();
			t.ssENSupport = (ENSupportEntityRecord) this.ssENSupport.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSupportType.ToXml(this, recordElem, "SupportType", detailLevel - 1);
				ssENSupport.ToXml(this, recordElem, "Support", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "supporttype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportType")) variable.Value = ssENSupportType; else variable.Optimized = true;
				variable.SetFieldName("supporttype");
			} else if (head == "support") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Support")) variable.Value = ssENSupport; else variable.Optimized = true;
				variable.SetFieldName("support");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSupportType) {
				return ssENSupportType;
			} else if (key == IdSupport) {
				return ssENSupport;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSupportType.FillFromOther((IRecord) other.AttributeGet(IdSupportType));
			ssENSupport.FillFromOther((IRecord) other.AttributeGet(IdSupport));
		}
	} // RCSupportTypeSupportRecord
	/// <summary>
	/// Structure <code>RCLearningSupportLearningSupportTypesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCLearningSupportLearningSupportTypesRecord: ISerializable, ITypedRecord<RCLearningSupportLearningSupportTypesRecord> {
		private static readonly GlobalObjectKey IdLearningSupport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*MDt1Q66SLOweJSaDpIleRw");
		private static readonly GlobalObjectKey IdLearningSupportTypes = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*3388G36NES8a3qmkQLJj4Q");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("LearningSupport")]
		public ENLearningSupportEntityRecord ssENLearningSupport;

		[System.Xml.Serialization.XmlElement("LearningSupportTypes")]
		public ENLearningSupportTypesEntityRecord ssENLearningSupportTypes;


		public BitArray OptimizedAttributes;

		public RCLearningSupportLearningSupportTypesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENLearningSupport = new ENLearningSupportEntityRecord(null);
			ssENLearningSupportTypes = new ENLearningSupportTypesEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENLearningSupport.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENLearningSupportTypes.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENLearningSupport.OptimizedAttributes = value[0];
					ssENLearningSupportTypes.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENLearningSupport.OptimizedAttributes;
				all[1] = ssENLearningSupportTypes.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENLearningSupport.Read(r, ref index);
			ssENLearningSupportTypes.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCLearningSupportLearningSupportTypesRecord r) {
			this = r;
		}


		public static bool operator == (RCLearningSupportLearningSupportTypesRecord a, RCLearningSupportLearningSupportTypesRecord b) {
			if (a.ssENLearningSupport != b.ssENLearningSupport) return false;
			if (a.ssENLearningSupportTypes != b.ssENLearningSupportTypes) return false;
			return true;
		}

		public static bool operator != (RCLearningSupportLearningSupportTypesRecord a, RCLearningSupportLearningSupportTypesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCLearningSupportLearningSupportTypesRecord)) return false;
			return (this == (RCLearningSupportLearningSupportTypesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENLearningSupport.GetHashCode()
				^ ssENLearningSupportTypes.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCLearningSupportLearningSupportTypesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENLearningSupport = new ENLearningSupportEntityRecord(null);
			ssENLearningSupportTypes = new ENLearningSupportTypesEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENLearningSupport = (ENLearningSupportEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENLearningSupportTypes = (ENLearningSupportTypesEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENLearningSupport.RecursiveReset();
			ssENLearningSupportTypes.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENLearningSupport.InternalRecursiveSave();
			ssENLearningSupportTypes.InternalRecursiveSave();
		}


		public RCLearningSupportLearningSupportTypesRecord Duplicate() {
			RCLearningSupportLearningSupportTypesRecord t;
			t.ssENLearningSupport = (ENLearningSupportEntityRecord) this.ssENLearningSupport.Duplicate();
			t.ssENLearningSupportTypes = (ENLearningSupportTypesEntityRecord) this.ssENLearningSupportTypes.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENLearningSupport.ToXml(this, recordElem, "LearningSupport", detailLevel - 1);
				ssENLearningSupportTypes.ToXml(this, recordElem, "LearningSupportTypes", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "learningsupport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningSupport")) variable.Value = ssENLearningSupport; else variable.Optimized = true;
				variable.SetFieldName("learningsupport");
			} else if (head == "learningsupporttypes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningSupportTypes")) variable.Value = ssENLearningSupportTypes; else variable.Optimized = true;
				variable.SetFieldName("learningsupporttypes");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLearningSupport) {
				return ssENLearningSupport;
			} else if (key == IdLearningSupportTypes) {
				return ssENLearningSupportTypes;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENLearningSupport.FillFromOther((IRecord) other.AttributeGet(IdLearningSupport));
			ssENLearningSupportTypes.FillFromOther((IRecord) other.AttributeGet(IdLearningSupportTypes));
		}
	} // RCLearningSupportLearningSupportTypesRecord
	/// <summary>
	/// Structure
	///  <code>RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardin
	/// gReferralMadeToSafeguardingOuRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord: ISerializable, ITypedRecord<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord> {
		private static readonly GlobalObjectKey IdStaff = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*g7SxeiYo0dIB7YXPz8Xkpg");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdRAGStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*24GX8LQ_aRQhomR6Kb4nDw");
		private static readonly GlobalObjectKey IdSafeguardingIssue = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SAAZcYT_EnM1GejsKShLag");
		private static readonly GlobalObjectKey IdSafeguardingDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y7QCc2tgUOGI0FORcMW2Zg");
		private static readonly GlobalObjectKey IdSafeguardingIssueType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*XqQ7dChktoD2+fflQpDEeA");
		private static readonly GlobalObjectKey IdSafeguardingReferralMadeTo = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*jZiMzPz_5dL34JkoNBXZmQ");
		private static readonly GlobalObjectKey IdSafeguardingOutcome = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Xvp98xSRmKOHSMeOb1XR4w");
		private static readonly GlobalObjectKey IdSafeguardingNatureOfConcern = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*zrIOMPQXRGR07dRJoSsM4A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Staff")]
		public ENStaffEntityRecord ssENStaff;

		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("RAGStatus")]
		public ENRAGStatusEntityRecord ssENRAGStatus;

		[System.Xml.Serialization.XmlElement("SafeguardingIssue")]
		public ENSafeguardingIssueEntityRecord ssENSafeguardingIssue;

		[System.Xml.Serialization.XmlElement("SafeguardingDocuments")]
		public ENSafeguardingDocumentsEntityRecord ssENSafeguardingDocuments;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueType")]
		public ENSafeguardingIssueTypeEntityRecord ssENSafeguardingIssueType;

		[System.Xml.Serialization.XmlElement("SafeguardingReferralMadeTo")]
		public ENSafeguardingReferralMadeToEntityRecord ssENSafeguardingReferralMadeTo;

		[System.Xml.Serialization.XmlElement("SafeguardingOutcome")]
		public ENSafeguardingOutcomeEntityRecord ssENSafeguardingOutcome;

		[System.Xml.Serialization.XmlElement("SafeguardingNatureOfConcern")]
		public ENSafeguardingNatureOfConcernEntityRecord ssENSafeguardingNatureOfConcern;


		public BitArray OptimizedAttributes;

		public RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			ssENSafeguardingDocuments = new ENSafeguardingDocumentsEntityRecord(null);
			ssENSafeguardingIssueType = new ENSafeguardingIssueTypeEntityRecord(null);
			ssENSafeguardingReferralMadeTo = new ENSafeguardingReferralMadeToEntityRecord(null);
			ssENSafeguardingOutcome = new ENSafeguardingOutcomeEntityRecord(null);
			ssENSafeguardingNatureOfConcern = new ENSafeguardingNatureOfConcernEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[9];
			all[0] = new BitArray(15, false);
			all[1] = new BitArray(27, false);
			all[2] = new BitArray(5, false);
			all[3] = new BitArray(18, false);
			all[4] = new BitArray(4, false);
			all[5] = new BitArray(4, false);
			all[6] = new BitArray(4, false);
			all[7] = new BitArray(4, false);
			all[8] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStaff.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENRAGStatus.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENSafeguardingIssue.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENSafeguardingDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[4];
					ssENSafeguardingIssueType.OptimizedAttributes = GetDefaultOptimizedValues()[5];
					ssENSafeguardingReferralMadeTo.OptimizedAttributes = GetDefaultOptimizedValues()[6];
					ssENSafeguardingOutcome.OptimizedAttributes = GetDefaultOptimizedValues()[7];
					ssENSafeguardingNatureOfConcern.OptimizedAttributes = GetDefaultOptimizedValues()[8];
				} else {
					ssENStaff.OptimizedAttributes = value[0];
					ssENStudent.OptimizedAttributes = value[1];
					ssENRAGStatus.OptimizedAttributes = value[2];
					ssENSafeguardingIssue.OptimizedAttributes = value[3];
					ssENSafeguardingDocuments.OptimizedAttributes = value[4];
					ssENSafeguardingIssueType.OptimizedAttributes = value[5];
					ssENSafeguardingReferralMadeTo.OptimizedAttributes = value[6];
					ssENSafeguardingOutcome.OptimizedAttributes = value[7];
					ssENSafeguardingNatureOfConcern.OptimizedAttributes = value[8];
				}
			}
			get {
				BitArray[] all = new BitArray[9];
				all[0] = ssENStaff.OptimizedAttributes;
				all[1] = ssENStudent.OptimizedAttributes;
				all[2] = ssENRAGStatus.OptimizedAttributes;
				all[3] = ssENSafeguardingIssue.OptimizedAttributes;
				all[4] = ssENSafeguardingDocuments.OptimizedAttributes;
				all[5] = ssENSafeguardingIssueType.OptimizedAttributes;
				all[6] = ssENSafeguardingReferralMadeTo.OptimizedAttributes;
				all[7] = ssENSafeguardingOutcome.OptimizedAttributes;
				all[8] = ssENSafeguardingNatureOfConcern.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStaff.Read(r, ref index);
			ssENStudent.Read(r, ref index);
			ssENRAGStatus.Read(r, ref index);
			ssENSafeguardingIssue.Read(r, ref index);
			ssENSafeguardingDocuments.Read(r, ref index);
			ssENSafeguardingIssueType.Read(r, ref index);
			ssENSafeguardingReferralMadeTo.Read(r, ref index);
			ssENSafeguardingOutcome.Read(r, ref index);
			ssENSafeguardingNatureOfConcern.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord a, RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord b) {
			if (a.ssENStaff != b.ssENStaff) return false;
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENRAGStatus != b.ssENRAGStatus) return false;
			if (a.ssENSafeguardingIssue != b.ssENSafeguardingIssue) return false;
			if (a.ssENSafeguardingDocuments != b.ssENSafeguardingDocuments) return false;
			if (a.ssENSafeguardingIssueType != b.ssENSafeguardingIssueType) return false;
			if (a.ssENSafeguardingReferralMadeTo != b.ssENSafeguardingReferralMadeTo) return false;
			if (a.ssENSafeguardingOutcome != b.ssENSafeguardingOutcome) return false;
			if (a.ssENSafeguardingNatureOfConcern != b.ssENSafeguardingNatureOfConcern) return false;
			return true;
		}

		public static bool operator != (RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord a, RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord)) return false;
			return (this == (RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStaff.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENRAGStatus.GetHashCode()
				^ ssENSafeguardingIssue.GetHashCode()
				^ ssENSafeguardingDocuments.GetHashCode()
				^ ssENSafeguardingIssueType.GetHashCode()
				^ ssENSafeguardingReferralMadeTo.GetHashCode()
				^ ssENSafeguardingOutcome.GetHashCode()
				^ ssENSafeguardingNatureOfConcern.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			ssENSafeguardingDocuments = new ENSafeguardingDocumentsEntityRecord(null);
			ssENSafeguardingIssueType = new ENSafeguardingIssueTypeEntityRecord(null);
			ssENSafeguardingReferralMadeTo = new ENSafeguardingReferralMadeToEntityRecord(null);
			ssENSafeguardingOutcome = new ENSafeguardingOutcomeEntityRecord(null);
			ssENSafeguardingNatureOfConcern = new ENSafeguardingNatureOfConcernEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStaff = (ENStaffEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENRAGStatus = (ENRAGStatusEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENSafeguardingDocuments = (ENSafeguardingDocumentsEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssENSafeguardingIssueType = (ENSafeguardingIssueTypeEntityRecord) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssENSafeguardingReferralMadeTo = (ENSafeguardingReferralMadeToEntityRecord) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssENSafeguardingOutcome = (ENSafeguardingOutcomeEntityRecord) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssENSafeguardingNatureOfConcern = (ENSafeguardingNatureOfConcernEntityRecord) info.GetValue(fields[8] .Name, fields[8] .FieldType);
		}

		public void RecursiveReset() {
			ssENStaff.RecursiveReset();
			ssENStudent.RecursiveReset();
			ssENRAGStatus.RecursiveReset();
			ssENSafeguardingIssue.RecursiveReset();
			ssENSafeguardingDocuments.RecursiveReset();
			ssENSafeguardingIssueType.RecursiveReset();
			ssENSafeguardingReferralMadeTo.RecursiveReset();
			ssENSafeguardingOutcome.RecursiveReset();
			ssENSafeguardingNatureOfConcern.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStaff.InternalRecursiveSave();
			ssENStudent.InternalRecursiveSave();
			ssENRAGStatus.InternalRecursiveSave();
			ssENSafeguardingIssue.InternalRecursiveSave();
			ssENSafeguardingDocuments.InternalRecursiveSave();
			ssENSafeguardingIssueType.InternalRecursiveSave();
			ssENSafeguardingReferralMadeTo.InternalRecursiveSave();
			ssENSafeguardingOutcome.InternalRecursiveSave();
			ssENSafeguardingNatureOfConcern.InternalRecursiveSave();
		}


		public RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord Duplicate() {
			RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord t;
			t.ssENStaff = (ENStaffEntityRecord) this.ssENStaff.Duplicate();
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENRAGStatus = (ENRAGStatusEntityRecord) this.ssENRAGStatus.Duplicate();
			t.ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) this.ssENSafeguardingIssue.Duplicate();
			t.ssENSafeguardingDocuments = (ENSafeguardingDocumentsEntityRecord) this.ssENSafeguardingDocuments.Duplicate();
			t.ssENSafeguardingIssueType = (ENSafeguardingIssueTypeEntityRecord) this.ssENSafeguardingIssueType.Duplicate();
			t.ssENSafeguardingReferralMadeTo = (ENSafeguardingReferralMadeToEntityRecord) this.ssENSafeguardingReferralMadeTo.Duplicate();
			t.ssENSafeguardingOutcome = (ENSafeguardingOutcomeEntityRecord) this.ssENSafeguardingOutcome.Duplicate();
			t.ssENSafeguardingNatureOfConcern = (ENSafeguardingNatureOfConcernEntityRecord) this.ssENSafeguardingNatureOfConcern.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStaff.ToXml(this, recordElem, "Staff", detailLevel - 1);
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENRAGStatus.ToXml(this, recordElem, "RAGStatus", detailLevel - 1);
				ssENSafeguardingIssue.ToXml(this, recordElem, "SafeguardingIssue", detailLevel - 1);
				ssENSafeguardingDocuments.ToXml(this, recordElem, "SafeguardingDocuments", detailLevel - 1);
				ssENSafeguardingIssueType.ToXml(this, recordElem, "SafeguardingIssueType", detailLevel - 1);
				ssENSafeguardingReferralMadeTo.ToXml(this, recordElem, "SafeguardingReferralMadeTo", detailLevel - 1);
				ssENSafeguardingOutcome.ToXml(this, recordElem, "SafeguardingOutcome", detailLevel - 1);
				ssENSafeguardingNatureOfConcern.ToXml(this, recordElem, "SafeguardingNatureOfConcern", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staff") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Staff")) variable.Value = ssENStaff; else variable.Optimized = true;
				variable.SetFieldName("staff");
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "ragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatus")) variable.Value = ssENRAGStatus; else variable.Optimized = true;
				variable.SetFieldName("ragstatus");
			} else if (head == "safeguardingissue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssue")) variable.Value = ssENSafeguardingIssue; else variable.Optimized = true;
				variable.SetFieldName("safeguardingissue");
			} else if (head == "safeguardingdocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingDocuments")) variable.Value = ssENSafeguardingDocuments; else variable.Optimized = true;
				variable.SetFieldName("safeguardingdocuments");
			} else if (head == "safeguardingissuetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssueType")) variable.Value = ssENSafeguardingIssueType; else variable.Optimized = true;
				variable.SetFieldName("safeguardingissuetype");
			} else if (head == "safeguardingreferralmadeto") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingReferralMadeTo")) variable.Value = ssENSafeguardingReferralMadeTo; else variable.Optimized = true;
				variable.SetFieldName("safeguardingreferralmadeto");
			} else if (head == "safeguardingoutcome") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingOutcome")) variable.Value = ssENSafeguardingOutcome; else variable.Optimized = true;
				variable.SetFieldName("safeguardingoutcome");
			} else if (head == "safeguardingnatureofconcern") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingNatureOfConcern")) variable.Value = ssENSafeguardingNatureOfConcern; else variable.Optimized = true;
				variable.SetFieldName("safeguardingnatureofconcern");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaff) {
				return ssENStaff;
			} else if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdRAGStatus) {
				return ssENRAGStatus;
			} else if (key == IdSafeguardingIssue) {
				return ssENSafeguardingIssue;
			} else if (key == IdSafeguardingDocuments) {
				return ssENSafeguardingDocuments;
			} else if (key == IdSafeguardingIssueType) {
				return ssENSafeguardingIssueType;
			} else if (key == IdSafeguardingReferralMadeTo) {
				return ssENSafeguardingReferralMadeTo;
			} else if (key == IdSafeguardingOutcome) {
				return ssENSafeguardingOutcome;
			} else if (key == IdSafeguardingNatureOfConcern) {
				return ssENSafeguardingNatureOfConcern;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStaff.FillFromOther((IRecord) other.AttributeGet(IdStaff));
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENRAGStatus.FillFromOther((IRecord) other.AttributeGet(IdRAGStatus));
			ssENSafeguardingIssue.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingIssue));
			ssENSafeguardingDocuments.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingDocuments));
			ssENSafeguardingIssueType.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingIssueType));
			ssENSafeguardingReferralMadeTo.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingReferralMadeTo));
			ssENSafeguardingOutcome.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingOutcome));
			ssENSafeguardingNatureOfConcern.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingNatureOfConcern));
		}
	} // RCStaffStudentRAGStatusSafeguardingIssueSafeguardingDocumentsSafeguardingIssueTypeSafeguardingReferralMadeToSafeguardingOuRecord
	/// <summary>
	/// Structure <code>RCStudentStudentLogRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentStudentLogRecord: ISerializable, ITypedRecord<RCStudentStudentLogRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdStudentLog = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*a207hFuVwR8WZj05PrSs2A");

		public static void EnsureInitialized() {}

		static RCStudentStudentLogRecord() {
			ssCaseConferencing.RCStudentStudentLogRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("StudentLog")]
		public ENStudentLogEntityRecord ssENStudentLog;


		public BitArray OptimizedAttributes;

		public RCStudentStudentLogRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(44, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentLog.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENStudentLog.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENStudentLog.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENStudentLog.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentStudentLogRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentStudentLogRecord a, RCStudentStudentLogRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENStudentLog != b.ssENStudentLog) return false;
			return true;
		}

		public static bool operator != (RCStudentStudentLogRecord a, RCStudentStudentLogRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentStudentLogRecord)) return false;
			return (this == (RCStudentStudentLogRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENStudentLog.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentStudentLogRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentLog = (ENStudentLogEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENStudentLog.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENStudentLog.InternalRecursiveSave();
		}


		public RCStudentStudentLogRecord Duplicate() {
			RCStudentStudentLogRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENStudentLog = (ENStudentLogEntityRecord) this.ssENStudentLog.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENStudentLog.ToXml(this, recordElem, "StudentLog", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "studentlog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLog")) variable.Value = ssENStudentLog; else variable.Optimized = true;
				variable.SetFieldName("studentlog");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdStudentLog) {
				return ssENStudentLog;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENStudentLog.FillFromOther((IRecord) other.AttributeGet(IdStudentLog));
		}
	} // RCStudentStudentLogRecord
	/// <summary>
	/// Structure <code>RCClusterCCSessionRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCClusterCCSessionRecord: ISerializable, ITypedRecord<RCClusterCCSessionRecord> {
		private static readonly GlobalObjectKey IdCluster = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*mAONl_1ENuXUhe0ejJwxsA");
		private static readonly GlobalObjectKey IdCCSession = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*YtIMR1wPQu4yPKHpr39GBQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Cluster")]
		public ENClusterEntityRecord ssENCluster;

		[System.Xml.Serialization.XmlElement("CCSession")]
		public ENCCSessionEntityRecord ssENCCSession;


		public BitArray OptimizedAttributes;

		public RCClusterCCSessionRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCluster = new ENClusterEntityRecord(null);
			ssENCCSession = new ENCCSessionEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(7, false);
			all[1] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCluster.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENCCSession.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENCluster.OptimizedAttributes = value[0];
					ssENCCSession.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENCluster.OptimizedAttributes;
				all[1] = ssENCCSession.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCluster.Read(r, ref index);
			ssENCCSession.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCClusterCCSessionRecord r) {
			this = r;
		}


		public static bool operator == (RCClusterCCSessionRecord a, RCClusterCCSessionRecord b) {
			if (a.ssENCluster != b.ssENCluster) return false;
			if (a.ssENCCSession != b.ssENCCSession) return false;
			return true;
		}

		public static bool operator != (RCClusterCCSessionRecord a, RCClusterCCSessionRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCClusterCCSessionRecord)) return false;
			return (this == (RCClusterCCSessionRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCluster.GetHashCode()
				^ ssENCCSession.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCClusterCCSessionRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCluster = new ENClusterEntityRecord(null);
			ssENCCSession = new ENCCSessionEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCluster = (ENClusterEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENCCSession = (ENCCSessionEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENCluster.RecursiveReset();
			ssENCCSession.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCluster.InternalRecursiveSave();
			ssENCCSession.InternalRecursiveSave();
		}


		public RCClusterCCSessionRecord Duplicate() {
			RCClusterCCSessionRecord t;
			t.ssENCluster = (ENClusterEntityRecord) this.ssENCluster.Duplicate();
			t.ssENCCSession = (ENCCSessionEntityRecord) this.ssENCCSession.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCluster.ToXml(this, recordElem, "Cluster", detailLevel - 1);
				ssENCCSession.ToXml(this, recordElem, "CCSession", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "cluster") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Cluster")) variable.Value = ssENCluster; else variable.Optimized = true;
				variable.SetFieldName("cluster");
			} else if (head == "ccsession") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CCSession")) variable.Value = ssENCCSession; else variable.Optimized = true;
				variable.SetFieldName("ccsession");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCluster) {
				return ssENCluster;
			} else if (key == IdCCSession) {
				return ssENCCSession;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCluster.FillFromOther((IRecord) other.AttributeGet(IdCluster));
			ssENCCSession.FillFromOther((IRecord) other.AttributeGet(IdCCSession));
		}
	} // RCClusterCCSessionRecord
	/// <summary>
	/// Structure <code>RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord: ISerializable, ITypedRecord<RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord> {
		private static readonly GlobalObjectKey IdSafeguardingAgency = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*oHjOWqHMDfajgxBVKlTNVg");
		private static readonly GlobalObjectKey IdSafeguardingAgenciesInvolved = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*8vHf06uSxc9l2ChXFGZkkA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SafeguardingAgency")]
		public ENSafeguardingAgencyEntityRecord ssENSafeguardingAgency;

		[System.Xml.Serialization.XmlElement("SafeguardingAgenciesInvolved")]
		public ENSafeguardingAgenciesInvolvedEntityRecord ssENSafeguardingAgenciesInvolved;


		public BitArray OptimizedAttributes;

		public RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSafeguardingAgency = new ENSafeguardingAgencyEntityRecord(null);
			ssENSafeguardingAgenciesInvolved = new ENSafeguardingAgenciesInvolvedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(4, false);
			all[1] = new BitArray(6, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSafeguardingAgency.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENSafeguardingAgenciesInvolved.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENSafeguardingAgency.OptimizedAttributes = value[0];
					ssENSafeguardingAgenciesInvolved.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENSafeguardingAgency.OptimizedAttributes;
				all[1] = ssENSafeguardingAgenciesInvolved.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSafeguardingAgency.Read(r, ref index);
			ssENSafeguardingAgenciesInvolved.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord r) {
			this = r;
		}


		public static bool operator == (RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord a, RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord b) {
			if (a.ssENSafeguardingAgency != b.ssENSafeguardingAgency) return false;
			if (a.ssENSafeguardingAgenciesInvolved != b.ssENSafeguardingAgenciesInvolved) return false;
			return true;
		}

		public static bool operator != (RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord a, RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord)) return false;
			return (this == (RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSafeguardingAgency.GetHashCode()
				^ ssENSafeguardingAgenciesInvolved.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSafeguardingAgency = new ENSafeguardingAgencyEntityRecord(null);
			ssENSafeguardingAgenciesInvolved = new ENSafeguardingAgenciesInvolvedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSafeguardingAgency = (ENSafeguardingAgencyEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENSafeguardingAgenciesInvolved = (ENSafeguardingAgenciesInvolvedEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENSafeguardingAgency.RecursiveReset();
			ssENSafeguardingAgenciesInvolved.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSafeguardingAgency.InternalRecursiveSave();
			ssENSafeguardingAgenciesInvolved.InternalRecursiveSave();
		}


		public RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord Duplicate() {
			RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord t;
			t.ssENSafeguardingAgency = (ENSafeguardingAgencyEntityRecord) this.ssENSafeguardingAgency.Duplicate();
			t.ssENSafeguardingAgenciesInvolved = (ENSafeguardingAgenciesInvolvedEntityRecord) this.ssENSafeguardingAgenciesInvolved.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSafeguardingAgency.ToXml(this, recordElem, "SafeguardingAgency", detailLevel - 1);
				ssENSafeguardingAgenciesInvolved.ToXml(this, recordElem, "SafeguardingAgenciesInvolved", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "safeguardingagency") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingAgency")) variable.Value = ssENSafeguardingAgency; else variable.Optimized = true;
				variable.SetFieldName("safeguardingagency");
			} else if (head == "safeguardingagenciesinvolved") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingAgenciesInvolved")) variable.Value = ssENSafeguardingAgenciesInvolved; else variable.Optimized = true;
				variable.SetFieldName("safeguardingagenciesinvolved");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSafeguardingAgency) {
				return ssENSafeguardingAgency;
			} else if (key == IdSafeguardingAgenciesInvolved) {
				return ssENSafeguardingAgenciesInvolved;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSafeguardingAgency.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingAgency));
			ssENSafeguardingAgenciesInvolved.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingAgenciesInvolved));
		}
	} // RCSafeguardingAgencySafeguardingAgenciesInvolvedRecord
	/// <summary>
	/// Structure <code>RCUserStudentLogStudentLogTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserStudentLogStudentLogTypeRecord: ISerializable, ITypedRecord<RCUserStudentLogStudentLogTypeRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentLog = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*a207hFuVwR8WZj05PrSs2A");
		private static readonly GlobalObjectKey IdStudentLogType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*O+r9xki4DgSh6sLDbQOVWg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentLog")]
		public ENStudentLogEntityRecord ssENStudentLog;

		[System.Xml.Serialization.XmlElement("StudentLogType")]
		public ENStudentLogTypeEntityRecord ssENStudentLogType;


		public BitArray OptimizedAttributes;

		public RCUserStudentLogStudentLogTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			ssENStudentLogType = new ENStudentLogTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(44, false);
			all[2] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentLog.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudentLogType.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENStudentLog.OptimizedAttributes = value[1];
					ssENStudentLogType.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENStudentLog.OptimizedAttributes;
				all[2] = ssENStudentLogType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENStudentLog.Read(r, ref index);
			ssENStudentLogType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserStudentLogStudentLogTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCUserStudentLogStudentLogTypeRecord a, RCUserStudentLogStudentLogTypeRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentLog != b.ssENStudentLog) return false;
			if (a.ssENStudentLogType != b.ssENStudentLogType) return false;
			return true;
		}

		public static bool operator != (RCUserStudentLogStudentLogTypeRecord a, RCUserStudentLogStudentLogTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserStudentLogStudentLogTypeRecord)) return false;
			return (this == (RCUserStudentLogStudentLogTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentLog.GetHashCode()
				^ ssENStudentLogType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserStudentLogStudentLogTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			ssENStudentLogType = new ENStudentLogTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentLog = (ENStudentLogEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudentLogType = (ENStudentLogTypeEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENStudentLog.RecursiveReset();
			ssENStudentLogType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENStudentLog.InternalRecursiveSave();
			ssENStudentLogType.InternalRecursiveSave();
		}


		public RCUserStudentLogStudentLogTypeRecord Duplicate() {
			RCUserStudentLogStudentLogTypeRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentLog = (ENStudentLogEntityRecord) this.ssENStudentLog.Duplicate();
			t.ssENStudentLogType = (ENStudentLogTypeEntityRecord) this.ssENStudentLogType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentLog.ToXml(this, recordElem, "StudentLog", detailLevel - 1);
				ssENStudentLogType.ToXml(this, recordElem, "StudentLogType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentlog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLog")) variable.Value = ssENStudentLog; else variable.Optimized = true;
				variable.SetFieldName("studentlog");
			} else if (head == "studentlogtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLogType")) variable.Value = ssENStudentLogType; else variable.Optimized = true;
				variable.SetFieldName("studentlogtype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentLog) {
				return ssENStudentLog;
			} else if (key == IdStudentLogType) {
				return ssENStudentLogType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentLog.FillFromOther((IRecord) other.AttributeGet(IdStudentLog));
			ssENStudentLogType.FillFromOther((IRecord) other.AttributeGet(IdStudentLogType));
		}
	} // RCUserStudentLogStudentLogTypeRecord
	/// <summary>
	/// Structure <code>RCDocumentsUpdatesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCDocumentsUpdatesRecord: ISerializable, ITypedRecord<RCDocumentsUpdatesRecord> {
		private static readonly GlobalObjectKey IdDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*V+rMCyDoxxgjgWOZC2i4yw");
		private static readonly GlobalObjectKey IdUpdates = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*gcqFqeutlV4qQhQ8q0U72A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Documents")]
		public ENDocumentsEntityRecord ssENDocuments;

		[System.Xml.Serialization.XmlElement("Updates")]
		public ENUpdatesEntityRecord ssENUpdates;


		public BitArray OptimizedAttributes;

		public RCDocumentsUpdatesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENDocuments = new ENDocumentsEntityRecord(null);
			ssENUpdates = new ENUpdatesEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(7, false);
			all[1] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUpdates.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENDocuments.OptimizedAttributes = value[0];
					ssENUpdates.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENDocuments.OptimizedAttributes;
				all[1] = ssENUpdates.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENDocuments.Read(r, ref index);
			ssENUpdates.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCDocumentsUpdatesRecord r) {
			this = r;
		}


		public static bool operator == (RCDocumentsUpdatesRecord a, RCDocumentsUpdatesRecord b) {
			if (a.ssENDocuments != b.ssENDocuments) return false;
			if (a.ssENUpdates != b.ssENUpdates) return false;
			return true;
		}

		public static bool operator != (RCDocumentsUpdatesRecord a, RCDocumentsUpdatesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCDocumentsUpdatesRecord)) return false;
			return (this == (RCDocumentsUpdatesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENDocuments.GetHashCode()
				^ ssENUpdates.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCDocumentsUpdatesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENDocuments = new ENDocumentsEntityRecord(null);
			ssENUpdates = new ENUpdatesEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENDocuments = (ENDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUpdates = (ENUpdatesEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENDocuments.RecursiveReset();
			ssENUpdates.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENDocuments.InternalRecursiveSave();
			ssENUpdates.InternalRecursiveSave();
		}


		public RCDocumentsUpdatesRecord Duplicate() {
			RCDocumentsUpdatesRecord t;
			t.ssENDocuments = (ENDocumentsEntityRecord) this.ssENDocuments.Duplicate();
			t.ssENUpdates = (ENUpdatesEntityRecord) this.ssENUpdates.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENDocuments.ToXml(this, recordElem, "Documents", detailLevel - 1);
				ssENUpdates.ToXml(this, recordElem, "Updates", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "documents") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Documents")) variable.Value = ssENDocuments; else variable.Optimized = true;
				variable.SetFieldName("documents");
			} else if (head == "updates") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Updates")) variable.Value = ssENUpdates; else variable.Optimized = true;
				variable.SetFieldName("updates");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDocuments) {
				return ssENDocuments;
			} else if (key == IdUpdates) {
				return ssENUpdates;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENDocuments.FillFromOther((IRecord) other.AttributeGet(IdDocuments));
			ssENUpdates.FillFromOther((IRecord) other.AttributeGet(IdUpdates));
		}
	} // RCDocumentsUpdatesRecord
	/// <summary>
	/// Structure <code>RCGroupStringStringStringBooleanRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupStringStringStringBooleanRecord: ISerializable, ITypedRecord<RCGroupStringStringStringBooleanRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdString = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5ltnC1EjdYReiJ9edGCgRA");
		private static readonly GlobalObjectKey IdString_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*PUNfB+DKv5tYvp534Va69w");
		private static readonly GlobalObjectKey IdString_3 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Vm9f8T2iqz1fcq478ZmJyw");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("String")]
		public STStringStructure ssSTString;

		[System.Xml.Serialization.XmlElement("String_2")]
		public STStringStructure ssSTString_2;

		[System.Xml.Serialization.XmlElement("String_3")]
		public STStringStructure ssSTString_3;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;


		public BitArray OptimizedAttributes;

		public RCGroupStringStringStringBooleanRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssSTString = new STStringStructure(null);
			ssSTString_2 = new STStringStructure(null);
			ssSTString_3 = new STStringStructure(null);
			ssSTBoolean = new STBooleanStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(9, false);
			all[1] = null;
			all[2] = null;
			all[3] = null;
			all[4] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssSTString.OptimizedAttributes = value[1];
					ssSTString_2.OptimizedAttributes = value[2];
					ssSTString_3.OptimizedAttributes = value[3];
					ssSTBoolean.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = null;
				all[2] = null;
				all[3] = null;
				all[4] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssSTString.Read(r, ref index);
			ssSTString_2.Read(r, ref index);
			ssSTString_3.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupStringStringStringBooleanRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupStringStringStringBooleanRecord a, RCGroupStringStringStringBooleanRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssSTString != b.ssSTString) return false;
			if (a.ssSTString_2 != b.ssSTString_2) return false;
			if (a.ssSTString_3 != b.ssSTString_3) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			return true;
		}

		public static bool operator != (RCGroupStringStringStringBooleanRecord a, RCGroupStringStringStringBooleanRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupStringStringStringBooleanRecord)) return false;
			return (this == (RCGroupStringStringStringBooleanRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssSTString.GetHashCode()
				^ ssSTString_2.GetHashCode()
				^ ssSTString_3.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupStringStringStringBooleanRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssSTString = new STStringStructure(null);
			ssSTString_2 = new STStringStructure(null);
			ssSTString_3 = new STStringStructure(null);
			ssSTBoolean = new STBooleanStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTString = (STStringStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTString_2 = (STStringStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssSTString_3 = (STStringStructure) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssSTString.RecursiveReset();
			ssSTString_2.RecursiveReset();
			ssSTString_3.RecursiveReset();
			ssSTBoolean.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssSTString.InternalRecursiveSave();
			ssSTString_2.InternalRecursiveSave();
			ssSTString_3.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
		}


		public RCGroupStringStringStringBooleanRecord Duplicate() {
			RCGroupStringStringStringBooleanRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssSTString = (STStringStructure) this.ssSTString.Duplicate();
			t.ssSTString_2 = (STStringStructure) this.ssSTString_2.Duplicate();
			t.ssSTString_3 = (STStringStructure) this.ssSTString_3.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssSTString.ToXml(this, recordElem, "String", detailLevel - 1);
				ssSTString_2.ToXml(this, recordElem, "String_2", detailLevel - 1);
				ssSTString_3.ToXml(this, recordElem, "String_3", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "string") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String")) variable.Value = ssSTString; else variable.Optimized = true;
				variable.SetFieldName("string");
			} else if (head == "string_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String_2")) variable.Value = ssSTString_2; else variable.Optimized = true;
				variable.SetFieldName("string_2");
			} else if (head == "string_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String_3")) variable.Value = ssSTString_3; else variable.Optimized = true;
				variable.SetFieldName("string_3");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdString) {
				return ssSTString;
			} else if (key == IdString_2) {
				return ssSTString_2;
			} else if (key == IdString_3) {
				return ssSTString_3;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssSTString.FillFromOther((IRecord) other.AttributeGet(IdString));
			ssSTString_2.FillFromOther((IRecord) other.AttributeGet(IdString_2));
			ssSTString_3.FillFromOther((IRecord) other.AttributeGet(IdString_3));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
		}
	} // RCGroupStringStringStringBooleanRecord
	/// <summary>
	/// Structure <code>RCStudentUserProgressReportRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserProgressReportRecord: ISerializable, ITypedRecord<RCStudentUserProgressReportRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;


		public BitArray OptimizedAttributes;

		public RCStudentUserProgressReportRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(23, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENProgressReport.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENProgressReport.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENProgressReport.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserProgressReportRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserProgressReportRecord a, RCStudentUserProgressReportRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			return true;
		}

		public static bool operator != (RCStudentUserProgressReportRecord a, RCStudentUserProgressReportRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserProgressReportRecord)) return false;
			return (this == (RCStudentUserProgressReportRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserProgressReportRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENProgressReport.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENProgressReport.InternalRecursiveSave();
		}


		public RCStudentUserProgressReportRecord Duplicate() {
			RCStudentUserProgressReportRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdProgressReport) {
				return ssENProgressReport;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
		}
	} // RCStudentUserProgressReportRecord
	/// <summary>
	/// Structure <code>RCDocument_ListCommunicationRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCDocument_ListCommunicationRecord: ISerializable, ITypedRecord<RCDocument_ListCommunicationRecord> {
		private static readonly GlobalObjectKey IdDocument_List = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*klvNHvX1JiTYeoi6Gv8Nhg");
		private static readonly GlobalObjectKey IdCommunication = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Mje+JTHR9VpPmgPWMth_iA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Document_List")]
		public STDocument_ListStructure ssSTDocument_List;

		[System.Xml.Serialization.XmlElement("Communication")]
		public ENCommunicationEntityRecord ssENCommunication;


		public BitArray OptimizedAttributes;

		public RCDocument_ListCommunicationRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTDocument_List = new STDocument_ListStructure(null);
			ssENCommunication = new ENCommunicationEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = null;
			all[1] = new BitArray(13, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCommunication.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssSTDocument_List.OptimizedAttributes = value[0];
					ssENCommunication.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = null;
				all[1] = ssENCommunication.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTDocument_List.Read(r, ref index);
			ssENCommunication.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCDocument_ListCommunicationRecord r) {
			this = r;
		}


		public static bool operator == (RCDocument_ListCommunicationRecord a, RCDocument_ListCommunicationRecord b) {
			if (a.ssSTDocument_List != b.ssSTDocument_List) return false;
			if (a.ssENCommunication != b.ssENCommunication) return false;
			return true;
		}

		public static bool operator != (RCDocument_ListCommunicationRecord a, RCDocument_ListCommunicationRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCDocument_ListCommunicationRecord)) return false;
			return (this == (RCDocument_ListCommunicationRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTDocument_List.GetHashCode()
				^ ssENCommunication.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCDocument_ListCommunicationRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTDocument_List = new STDocument_ListStructure(null);
			ssENCommunication = new ENCommunicationEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTDocument_List = (STDocument_ListStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENCommunication = (ENCommunicationEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssSTDocument_List.RecursiveReset();
			ssENCommunication.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTDocument_List.InternalRecursiveSave();
			ssENCommunication.InternalRecursiveSave();
		}


		public RCDocument_ListCommunicationRecord Duplicate() {
			RCDocument_ListCommunicationRecord t;
			t.ssSTDocument_List = (STDocument_ListStructure) this.ssSTDocument_List.Duplicate();
			t.ssENCommunication = (ENCommunicationEntityRecord) this.ssENCommunication.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTDocument_List.ToXml(this, recordElem, "Document_List", detailLevel - 1);
				ssENCommunication.ToXml(this, recordElem, "Communication", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "document_list") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Document_List")) variable.Value = ssSTDocument_List; else variable.Optimized = true;
				variable.SetFieldName("document_list");
			} else if (head == "communication") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Communication")) variable.Value = ssENCommunication; else variable.Optimized = true;
				variable.SetFieldName("communication");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDocument_List) {
				return ssSTDocument_List;
			} else if (key == IdCommunication) {
				return ssENCommunication;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTDocument_List.FillFromOther((IRecord) other.AttributeGet(IdDocument_List));
			ssENCommunication.FillFromOther((IRecord) other.AttributeGet(IdCommunication));
		}
	} // RCDocument_ListCommunicationRecord
	/// <summary>
	/// Structure <code>RCIntIntIntIntRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCIntIntIntIntRecord: ISerializable, ITypedRecord<RCIntIntIntIntRecord> {
		private static readonly GlobalObjectKey IdInt = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ez7zMhrpK4l3myGw247q5g");
		private static readonly GlobalObjectKey IdInt_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*K1jmOtpNk47iXYFc_pripw");
		private static readonly GlobalObjectKey IdInt_3 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6tHdqeZriU78VDaqTLJz2Q");
		private static readonly GlobalObjectKey IdInt_4 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*i_sFn2TVjY4VIcLIcixWKQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Int")]
		public STIntStructure ssSTInt;

		[System.Xml.Serialization.XmlElement("Int_2")]
		public STIntStructure ssSTInt_2;

		[System.Xml.Serialization.XmlElement("Int_3")]
		public STIntStructure ssSTInt_3;

		[System.Xml.Serialization.XmlElement("Int_4")]
		public STIntStructure ssSTInt_4;


		public BitArray OptimizedAttributes;

		public RCIntIntIntIntRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTInt = new STIntStructure(null);
			ssSTInt_2 = new STIntStructure(null);
			ssSTInt_3 = new STIntStructure(null);
			ssSTInt_4 = new STIntStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = null;
			all[1] = null;
			all[2] = null;
			all[3] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTInt.OptimizedAttributes = value[0];
					ssSTInt_2.OptimizedAttributes = value[1];
					ssSTInt_3.OptimizedAttributes = value[2];
					ssSTInt_4.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = null;
				all[1] = null;
				all[2] = null;
				all[3] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTInt.Read(r, ref index);
			ssSTInt_2.Read(r, ref index);
			ssSTInt_3.Read(r, ref index);
			ssSTInt_4.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCIntIntIntIntRecord r) {
			this = r;
		}


		public static bool operator == (RCIntIntIntIntRecord a, RCIntIntIntIntRecord b) {
			if (a.ssSTInt != b.ssSTInt) return false;
			if (a.ssSTInt_2 != b.ssSTInt_2) return false;
			if (a.ssSTInt_3 != b.ssSTInt_3) return false;
			if (a.ssSTInt_4 != b.ssSTInt_4) return false;
			return true;
		}

		public static bool operator != (RCIntIntIntIntRecord a, RCIntIntIntIntRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCIntIntIntIntRecord)) return false;
			return (this == (RCIntIntIntIntRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTInt.GetHashCode()
				^ ssSTInt_2.GetHashCode()
				^ ssSTInt_3.GetHashCode()
				^ ssSTInt_4.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCIntIntIntIntRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTInt = new STIntStructure(null);
			ssSTInt_2 = new STIntStructure(null);
			ssSTInt_3 = new STIntStructure(null);
			ssSTInt_4 = new STIntStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTInt = (STIntStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTInt_2 = (STIntStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTInt_3 = (STIntStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssSTInt_4 = (STIntStructure) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssSTInt.RecursiveReset();
			ssSTInt_2.RecursiveReset();
			ssSTInt_3.RecursiveReset();
			ssSTInt_4.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTInt.InternalRecursiveSave();
			ssSTInt_2.InternalRecursiveSave();
			ssSTInt_3.InternalRecursiveSave();
			ssSTInt_4.InternalRecursiveSave();
		}


		public RCIntIntIntIntRecord Duplicate() {
			RCIntIntIntIntRecord t;
			t.ssSTInt = (STIntStructure) this.ssSTInt.Duplicate();
			t.ssSTInt_2 = (STIntStructure) this.ssSTInt_2.Duplicate();
			t.ssSTInt_3 = (STIntStructure) this.ssSTInt_3.Duplicate();
			t.ssSTInt_4 = (STIntStructure) this.ssSTInt_4.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTInt.ToXml(this, recordElem, "Int", detailLevel - 1);
				ssSTInt_2.ToXml(this, recordElem, "Int_2", detailLevel - 1);
				ssSTInt_3.ToXml(this, recordElem, "Int_3", detailLevel - 1);
				ssSTInt_4.ToXml(this, recordElem, "Int_4", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "int") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Int")) variable.Value = ssSTInt; else variable.Optimized = true;
				variable.SetFieldName("int");
			} else if (head == "int_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Int_2")) variable.Value = ssSTInt_2; else variable.Optimized = true;
				variable.SetFieldName("int_2");
			} else if (head == "int_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Int_3")) variable.Value = ssSTInt_3; else variable.Optimized = true;
				variable.SetFieldName("int_3");
			} else if (head == "int_4") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Int_4")) variable.Value = ssSTInt_4; else variable.Optimized = true;
				variable.SetFieldName("int_4");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdInt) {
				return ssSTInt;
			} else if (key == IdInt_2) {
				return ssSTInt_2;
			} else if (key == IdInt_3) {
				return ssSTInt_3;
			} else if (key == IdInt_4) {
				return ssSTInt_4;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTInt.FillFromOther((IRecord) other.AttributeGet(IdInt));
			ssSTInt_2.FillFromOther((IRecord) other.AttributeGet(IdInt_2));
			ssSTInt_3.FillFromOther((IRecord) other.AttributeGet(IdInt_3));
			ssSTInt_4.FillFromOther((IRecord) other.AttributeGet(IdInt_4));
		}
	} // RCIntIntIntIntRecord
	/// <summary>
	/// Structure <code>RCCommunicationDocumentsDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCommunicationDocumentsDocumentsRecord: ISerializable, ITypedRecord<RCCommunicationDocumentsDocumentsRecord> {
		private static readonly GlobalObjectKey IdCommunicationDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*+9HemxKzrnb57b60xwFtHg");
		private static readonly GlobalObjectKey IdDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*V+rMCyDoxxgjgWOZC2i4yw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CommunicationDocuments")]
		public ENCommunicationDocumentsEntityRecord ssENCommunicationDocuments;

		[System.Xml.Serialization.XmlElement("Documents")]
		public ENDocumentsEntityRecord ssENDocuments;


		public BitArray OptimizedAttributes;

		public RCCommunicationDocumentsDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCommunicationDocuments = new ENCommunicationDocumentsEntityRecord(null);
			ssENDocuments = new ENDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(3, false);
			all[1] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCommunicationDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENCommunicationDocuments.OptimizedAttributes = value[0];
					ssENDocuments.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENCommunicationDocuments.OptimizedAttributes;
				all[1] = ssENDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCommunicationDocuments.Read(r, ref index);
			ssENDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCommunicationDocumentsDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCCommunicationDocumentsDocumentsRecord a, RCCommunicationDocumentsDocumentsRecord b) {
			if (a.ssENCommunicationDocuments != b.ssENCommunicationDocuments) return false;
			if (a.ssENDocuments != b.ssENDocuments) return false;
			return true;
		}

		public static bool operator != (RCCommunicationDocumentsDocumentsRecord a, RCCommunicationDocumentsDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCommunicationDocumentsDocumentsRecord)) return false;
			return (this == (RCCommunicationDocumentsDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCommunicationDocuments.GetHashCode()
				^ ssENDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCommunicationDocumentsDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCommunicationDocuments = new ENCommunicationDocumentsEntityRecord(null);
			ssENDocuments = new ENDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCommunicationDocuments = (ENCommunicationDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENDocuments = (ENDocumentsEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENCommunicationDocuments.RecursiveReset();
			ssENDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCommunicationDocuments.InternalRecursiveSave();
			ssENDocuments.InternalRecursiveSave();
		}


		public RCCommunicationDocumentsDocumentsRecord Duplicate() {
			RCCommunicationDocumentsDocumentsRecord t;
			t.ssENCommunicationDocuments = (ENCommunicationDocumentsEntityRecord) this.ssENCommunicationDocuments.Duplicate();
			t.ssENDocuments = (ENDocumentsEntityRecord) this.ssENDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCommunicationDocuments.ToXml(this, recordElem, "CommunicationDocuments", detailLevel - 1);
				ssENDocuments.ToXml(this, recordElem, "Documents", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "communicationdocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CommunicationDocuments")) variable.Value = ssENCommunicationDocuments; else variable.Optimized = true;
				variable.SetFieldName("communicationdocuments");
			} else if (head == "documents") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Documents")) variable.Value = ssENDocuments; else variable.Optimized = true;
				variable.SetFieldName("documents");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCommunicationDocuments) {
				return ssENCommunicationDocuments;
			} else if (key == IdDocuments) {
				return ssENDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCommunicationDocuments.FillFromOther((IRecord) other.AttributeGet(IdCommunicationDocuments));
			ssENDocuments.FillFromOther((IRecord) other.AttributeGet(IdDocuments));
		}
	} // RCCommunicationDocumentsDocumentsRecord
	/// <summary>
	/// Structure <code>RCRAGStatusCauseOfConcernRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRAGStatusCauseOfConcernRecord: ISerializable, ITypedRecord<RCRAGStatusCauseOfConcernRecord> {
		private static readonly GlobalObjectKey IdRAGStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*24GX8LQ_aRQhomR6Kb4nDw");
		private static readonly GlobalObjectKey IdCauseOfConcern = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*GX7tbyCb6lMzB7EuQfksTQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RAGStatus")]
		public ENRAGStatusEntityRecord ssENRAGStatus;

		[System.Xml.Serialization.XmlElement("CauseOfConcern")]
		public ENCauseOfConcernEntityRecord ssENCauseOfConcern;


		public BitArray OptimizedAttributes;

		public RCRAGStatusCauseOfConcernRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(5, false);
			all[1] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRAGStatus.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENCauseOfConcern.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENRAGStatus.OptimizedAttributes = value[0];
					ssENCauseOfConcern.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENRAGStatus.OptimizedAttributes;
				all[1] = ssENCauseOfConcern.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRAGStatus.Read(r, ref index);
			ssENCauseOfConcern.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRAGStatusCauseOfConcernRecord r) {
			this = r;
		}


		public static bool operator == (RCRAGStatusCauseOfConcernRecord a, RCRAGStatusCauseOfConcernRecord b) {
			if (a.ssENRAGStatus != b.ssENRAGStatus) return false;
			if (a.ssENCauseOfConcern != b.ssENCauseOfConcern) return false;
			return true;
		}

		public static bool operator != (RCRAGStatusCauseOfConcernRecord a, RCRAGStatusCauseOfConcernRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRAGStatusCauseOfConcernRecord)) return false;
			return (this == (RCRAGStatusCauseOfConcernRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRAGStatus.GetHashCode()
				^ ssENCauseOfConcern.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRAGStatusCauseOfConcernRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRAGStatus = (ENRAGStatusEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENRAGStatus.RecursiveReset();
			ssENCauseOfConcern.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRAGStatus.InternalRecursiveSave();
			ssENCauseOfConcern.InternalRecursiveSave();
		}


		public RCRAGStatusCauseOfConcernRecord Duplicate() {
			RCRAGStatusCauseOfConcernRecord t;
			t.ssENRAGStatus = (ENRAGStatusEntityRecord) this.ssENRAGStatus.Duplicate();
			t.ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) this.ssENCauseOfConcern.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRAGStatus.ToXml(this, recordElem, "RAGStatus", detailLevel - 1);
				ssENCauseOfConcern.ToXml(this, recordElem, "CauseOfConcern", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "ragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatus")) variable.Value = ssENRAGStatus; else variable.Optimized = true;
				variable.SetFieldName("ragstatus");
			} else if (head == "causeofconcern") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcern")) variable.Value = ssENCauseOfConcern; else variable.Optimized = true;
				variable.SetFieldName("causeofconcern");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRAGStatus) {
				return ssENRAGStatus;
			} else if (key == IdCauseOfConcern) {
				return ssENCauseOfConcern;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRAGStatus.FillFromOther((IRecord) other.AttributeGet(IdRAGStatus));
			ssENCauseOfConcern.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcern));
		}
	} // RCRAGStatusCauseOfConcernRecord
	/// <summary>
	/// Structure <code>RCStudentSIASInitialAssessmentRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentSIASInitialAssessmentRecord: ISerializable, ITypedRecord<RCStudentSIASInitialAssessmentRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdSIASInitialAssessment = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*R_fEHsAI8m6NSgQP5o9tTQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("SIASInitialAssessment")]
		public ENSIASInitialAssessmentEntityRecord ssENSIASInitialAssessment;


		public BitArray OptimizedAttributes;

		public RCStudentSIASInitialAssessmentRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENSIASInitialAssessment = new ENSIASInitialAssessmentEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(25, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENSIASInitialAssessment.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENSIASInitialAssessment.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENSIASInitialAssessment.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENSIASInitialAssessment.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentSIASInitialAssessmentRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentSIASInitialAssessmentRecord a, RCStudentSIASInitialAssessmentRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENSIASInitialAssessment != b.ssENSIASInitialAssessment) return false;
			return true;
		}

		public static bool operator != (RCStudentSIASInitialAssessmentRecord a, RCStudentSIASInitialAssessmentRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentSIASInitialAssessmentRecord)) return false;
			return (this == (RCStudentSIASInitialAssessmentRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENSIASInitialAssessment.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentSIASInitialAssessmentRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENSIASInitialAssessment = new ENSIASInitialAssessmentEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENSIASInitialAssessment = (ENSIASInitialAssessmentEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENSIASInitialAssessment.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENSIASInitialAssessment.InternalRecursiveSave();
		}


		public RCStudentSIASInitialAssessmentRecord Duplicate() {
			RCStudentSIASInitialAssessmentRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENSIASInitialAssessment = (ENSIASInitialAssessmentEntityRecord) this.ssENSIASInitialAssessment.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENSIASInitialAssessment.ToXml(this, recordElem, "SIASInitialAssessment", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "siasinitialassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASInitialAssessment")) variable.Value = ssENSIASInitialAssessment; else variable.Optimized = true;
				variable.SetFieldName("siasinitialassessment");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdSIASInitialAssessment) {
				return ssENSIASInitialAssessment;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENSIASInitialAssessment.FillFromOther((IRecord) other.AttributeGet(IdSIASInitialAssessment));
		}
	} // RCStudentSIASInitialAssessmentRecord
	/// <summary>
	/// Structure <code>RCStudentSIASSupportNeedsSupportNeedsIdRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentSIASSupportNeedsSupportNeedsIdRecord: ISerializable, ITypedRecord<RCStudentSIASSupportNeedsSupportNeedsIdRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdSIASSupportNeeds = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*IubH8VSDEY7nvvODnlcdPw");
		private static readonly GlobalObjectKey IdSupportNeedsId = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*U5VjMqyr8aJ+lEx7MBdqDw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("SIASSupportNeeds")]
		public ENSIASSupportNeedsEntityRecord ssENSIASSupportNeeds;

		[System.Xml.Serialization.XmlElement("SupportNeedsId")]
		public STSupportNeedsIdStructure ssSTSupportNeedsId;


		public BitArray OptimizedAttributes;

		public RCStudentSIASSupportNeedsSupportNeedsIdRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENSIASSupportNeeds = new ENSIASSupportNeedsEntityRecord(null);
			ssSTSupportNeedsId = new STSupportNeedsIdStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(5, false);
			all[2] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENSIASSupportNeeds.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENSIASSupportNeeds.OptimizedAttributes = value[1];
					ssSTSupportNeedsId.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENSIASSupportNeeds.OptimizedAttributes;
				all[2] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENSIASSupportNeeds.Read(r, ref index);
			ssSTSupportNeedsId.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentSIASSupportNeedsSupportNeedsIdRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentSIASSupportNeedsSupportNeedsIdRecord a, RCStudentSIASSupportNeedsSupportNeedsIdRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENSIASSupportNeeds != b.ssENSIASSupportNeeds) return false;
			if (a.ssSTSupportNeedsId != b.ssSTSupportNeedsId) return false;
			return true;
		}

		public static bool operator != (RCStudentSIASSupportNeedsSupportNeedsIdRecord a, RCStudentSIASSupportNeedsSupportNeedsIdRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentSIASSupportNeedsSupportNeedsIdRecord)) return false;
			return (this == (RCStudentSIASSupportNeedsSupportNeedsIdRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENSIASSupportNeeds.GetHashCode()
				^ ssSTSupportNeedsId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentSIASSupportNeedsSupportNeedsIdRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENSIASSupportNeeds = new ENSIASSupportNeedsEntityRecord(null);
			ssSTSupportNeedsId = new STSupportNeedsIdStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENSIASSupportNeeds = (ENSIASSupportNeedsEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTSupportNeedsId = (STSupportNeedsIdStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENSIASSupportNeeds.RecursiveReset();
			ssSTSupportNeedsId.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENSIASSupportNeeds.InternalRecursiveSave();
			ssSTSupportNeedsId.InternalRecursiveSave();
		}


		public RCStudentSIASSupportNeedsSupportNeedsIdRecord Duplicate() {
			RCStudentSIASSupportNeedsSupportNeedsIdRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENSIASSupportNeeds = (ENSIASSupportNeedsEntityRecord) this.ssENSIASSupportNeeds.Duplicate();
			t.ssSTSupportNeedsId = (STSupportNeedsIdStructure) this.ssSTSupportNeedsId.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENSIASSupportNeeds.ToXml(this, recordElem, "SIASSupportNeeds", detailLevel - 1);
				ssSTSupportNeedsId.ToXml(this, recordElem, "SupportNeedsId", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "siassupportneeds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupportNeeds")) variable.Value = ssENSIASSupportNeeds; else variable.Optimized = true;
				variable.SetFieldName("siassupportneeds");
			} else if (head == "supportneedsid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportNeedsId")) variable.Value = ssSTSupportNeedsId; else variable.Optimized = true;
				variable.SetFieldName("supportneedsid");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdSIASSupportNeeds) {
				return ssENSIASSupportNeeds;
			} else if (key == IdSupportNeedsId) {
				return ssSTSupportNeedsId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENSIASSupportNeeds.FillFromOther((IRecord) other.AttributeGet(IdSIASSupportNeeds));
			ssSTSupportNeedsId.FillFromOther((IRecord) other.AttributeGet(IdSupportNeedsId));
		}
	} // RCStudentSIASSupportNeedsSupportNeedsIdRecord
	/// <summary>
	/// Structure <code>RCGroupStudentAnnualValuesStudent_GroupStudentRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupStudentAnnualValuesStudent_GroupStudentRecord: ISerializable, ITypedRecord<RCGroupStudentAnnualValuesStudent_GroupStudentRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdStudentAnnualValues = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*e2Fpw3VJitQ7rENi2DWdDg");
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("StudentAnnualValues")]
		public ENStudentAnnualValuesEntityRecord ssENStudentAnnualValues;

		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;

		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;


		public BitArray OptimizedAttributes;

		public RCGroupStudentAnnualValuesStudent_GroupStudentRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudentAnnualValues = new ENStudentAnnualValuesEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(7, false);
			all[2] = new BitArray(9, false);
			all[3] = new BitArray(27, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentAnnualValues.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENStudentAnnualValues.OptimizedAttributes = value[1];
					ssENStudent_Group.OptimizedAttributes = value[2];
					ssENStudent.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENStudentAnnualValues.OptimizedAttributes;
				all[2] = ssENStudent_Group.OptimizedAttributes;
				all[3] = ssENStudent.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENStudentAnnualValues.Read(r, ref index);
			ssENStudent_Group.Read(r, ref index);
			ssENStudent.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupStudentAnnualValuesStudent_GroupStudentRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupStudentAnnualValuesStudent_GroupStudentRecord a, RCGroupStudentAnnualValuesStudent_GroupStudentRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENStudentAnnualValues != b.ssENStudentAnnualValues) return false;
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			if (a.ssENStudent != b.ssENStudent) return false;
			return true;
		}

		public static bool operator != (RCGroupStudentAnnualValuesStudent_GroupStudentRecord a, RCGroupStudentAnnualValuesStudent_GroupStudentRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupStudentAnnualValuesStudent_GroupStudentRecord)) return false;
			return (this == (RCGroupStudentAnnualValuesStudent_GroupStudentRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENStudentAnnualValues.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				^ ssENStudent.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupStudentAnnualValuesStudent_GroupStudentRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudentAnnualValues = new ENStudentAnnualValuesEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentAnnualValues = (ENStudentAnnualValuesEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENStudentAnnualValues.RecursiveReset();
			ssENStudent_Group.RecursiveReset();
			ssENStudent.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENStudentAnnualValues.InternalRecursiveSave();
			ssENStudent_Group.InternalRecursiveSave();
			ssENStudent.InternalRecursiveSave();
		}


		public RCGroupStudentAnnualValuesStudent_GroupStudentRecord Duplicate() {
			RCGroupStudentAnnualValuesStudent_GroupStudentRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENStudentAnnualValues = (ENStudentAnnualValuesEntityRecord) this.ssENStudentAnnualValues.Duplicate();
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENStudentAnnualValues.ToXml(this, recordElem, "StudentAnnualValues", detailLevel - 1);
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "studentannualvalues") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentAnnualValues")) variable.Value = ssENStudentAnnualValues; else variable.Optimized = true;
				variable.SetFieldName("studentannualvalues");
			} else if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdStudentAnnualValues) {
				return ssENStudentAnnualValues;
			} else if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else if (key == IdStudent) {
				return ssENStudent;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENStudentAnnualValues.FillFromOther((IRecord) other.AttributeGet(IdStudentAnnualValues));
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
		}
	} // RCGroupStudentAnnualValuesStudent_GroupStudentRecord
	/// <summary>
	/// Structure <code>RCGroupStudent_GroupRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupStudent_GroupRecord: ISerializable, ITypedRecord<RCGroupStudent_GroupRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;


		public BitArray OptimizedAttributes;

		public RCGroupStudent_GroupRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENStudent_Group.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENStudent_Group.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENStudent_Group.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupStudent_GroupRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupStudent_GroupRecord a, RCGroupStudent_GroupRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			return true;
		}

		public static bool operator != (RCGroupStudent_GroupRecord a, RCGroupStudent_GroupRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupStudent_GroupRecord)) return false;
			return (this == (RCGroupStudent_GroupRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupStudent_GroupRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENStudent_Group.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENStudent_Group.InternalRecursiveSave();
		}


		public RCGroupStudent_GroupRecord Duplicate() {
			RCGroupStudent_GroupRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
		}
	} // RCGroupStudent_GroupRecord
	/// <summary>
	/// Structure <code>RCSIASSupportNeedsSIASSupportNeedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSIASSupportNeedsSIASSupportNeedRecord: ISerializable, ITypedRecord<RCSIASSupportNeedsSIASSupportNeedRecord> {
		private static readonly GlobalObjectKey IdSIASSupportNeeds = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*IubH8VSDEY7nvvODnlcdPw");
		private static readonly GlobalObjectKey IdSIASSupportNeed = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*iY0Tw4p2s8UCECZJZVoqyA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SIASSupportNeeds")]
		public ENSIASSupportNeedsEntityRecord ssENSIASSupportNeeds;

		[System.Xml.Serialization.XmlElement("SIASSupportNeed")]
		public ENSIASSupportNeedEntityRecord ssENSIASSupportNeed;


		public BitArray OptimizedAttributes;

		public RCSIASSupportNeedsSIASSupportNeedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSIASSupportNeeds = new ENSIASSupportNeedsEntityRecord(null);
			ssENSIASSupportNeed = new ENSIASSupportNeedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(5, false);
			all[1] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSIASSupportNeeds.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENSIASSupportNeed.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENSIASSupportNeeds.OptimizedAttributes = value[0];
					ssENSIASSupportNeed.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENSIASSupportNeeds.OptimizedAttributes;
				all[1] = ssENSIASSupportNeed.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSIASSupportNeeds.Read(r, ref index);
			ssENSIASSupportNeed.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSIASSupportNeedsSIASSupportNeedRecord r) {
			this = r;
		}


		public static bool operator == (RCSIASSupportNeedsSIASSupportNeedRecord a, RCSIASSupportNeedsSIASSupportNeedRecord b) {
			if (a.ssENSIASSupportNeeds != b.ssENSIASSupportNeeds) return false;
			if (a.ssENSIASSupportNeed != b.ssENSIASSupportNeed) return false;
			return true;
		}

		public static bool operator != (RCSIASSupportNeedsSIASSupportNeedRecord a, RCSIASSupportNeedsSIASSupportNeedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSIASSupportNeedsSIASSupportNeedRecord)) return false;
			return (this == (RCSIASSupportNeedsSIASSupportNeedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSIASSupportNeeds.GetHashCode()
				^ ssENSIASSupportNeed.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSIASSupportNeedsSIASSupportNeedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSIASSupportNeeds = new ENSIASSupportNeedsEntityRecord(null);
			ssENSIASSupportNeed = new ENSIASSupportNeedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSIASSupportNeeds = (ENSIASSupportNeedsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENSIASSupportNeed = (ENSIASSupportNeedEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENSIASSupportNeeds.RecursiveReset();
			ssENSIASSupportNeed.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSIASSupportNeeds.InternalRecursiveSave();
			ssENSIASSupportNeed.InternalRecursiveSave();
		}


		public RCSIASSupportNeedsSIASSupportNeedRecord Duplicate() {
			RCSIASSupportNeedsSIASSupportNeedRecord t;
			t.ssENSIASSupportNeeds = (ENSIASSupportNeedsEntityRecord) this.ssENSIASSupportNeeds.Duplicate();
			t.ssENSIASSupportNeed = (ENSIASSupportNeedEntityRecord) this.ssENSIASSupportNeed.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSIASSupportNeeds.ToXml(this, recordElem, "SIASSupportNeeds", detailLevel - 1);
				ssENSIASSupportNeed.ToXml(this, recordElem, "SIASSupportNeed", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "siassupportneeds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupportNeeds")) variable.Value = ssENSIASSupportNeeds; else variable.Optimized = true;
				variable.SetFieldName("siassupportneeds");
			} else if (head == "siassupportneed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupportNeed")) variable.Value = ssENSIASSupportNeed; else variable.Optimized = true;
				variable.SetFieldName("siassupportneed");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSIASSupportNeeds) {
				return ssENSIASSupportNeeds;
			} else if (key == IdSIASSupportNeed) {
				return ssENSIASSupportNeed;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSIASSupportNeeds.FillFromOther((IRecord) other.AttributeGet(IdSIASSupportNeeds));
			ssENSIASSupportNeed.FillFromOther((IRecord) other.AttributeGet(IdSIASSupportNeed));
		}
	} // RCSIASSupportNeedsSIASSupportNeedRecord
	/// <summary>
	/// Structure <code>RCDocumentsLearningSupportDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCDocumentsLearningSupportDocumentsRecord: ISerializable, ITypedRecord<RCDocumentsLearningSupportDocumentsRecord> {
		private static readonly GlobalObjectKey IdDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*V+rMCyDoxxgjgWOZC2i4yw");
		private static readonly GlobalObjectKey IdLearningSupportDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*g_yrp1IaRD8fubhekIv30w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Documents")]
		public ENDocumentsEntityRecord ssENDocuments;

		[System.Xml.Serialization.XmlElement("LearningSupportDocuments")]
		public ENLearningSupportDocumentsEntityRecord ssENLearningSupportDocuments;


		public BitArray OptimizedAttributes;

		public RCDocumentsLearningSupportDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENDocuments = new ENDocumentsEntityRecord(null);
			ssENLearningSupportDocuments = new ENLearningSupportDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(7, false);
			all[1] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENLearningSupportDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENDocuments.OptimizedAttributes = value[0];
					ssENLearningSupportDocuments.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENDocuments.OptimizedAttributes;
				all[1] = ssENLearningSupportDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENDocuments.Read(r, ref index);
			ssENLearningSupportDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCDocumentsLearningSupportDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCDocumentsLearningSupportDocumentsRecord a, RCDocumentsLearningSupportDocumentsRecord b) {
			if (a.ssENDocuments != b.ssENDocuments) return false;
			if (a.ssENLearningSupportDocuments != b.ssENLearningSupportDocuments) return false;
			return true;
		}

		public static bool operator != (RCDocumentsLearningSupportDocumentsRecord a, RCDocumentsLearningSupportDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCDocumentsLearningSupportDocumentsRecord)) return false;
			return (this == (RCDocumentsLearningSupportDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENDocuments.GetHashCode()
				^ ssENLearningSupportDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCDocumentsLearningSupportDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENDocuments = new ENDocumentsEntityRecord(null);
			ssENLearningSupportDocuments = new ENLearningSupportDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENDocuments = (ENDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENLearningSupportDocuments = (ENLearningSupportDocumentsEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENDocuments.RecursiveReset();
			ssENLearningSupportDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENDocuments.InternalRecursiveSave();
			ssENLearningSupportDocuments.InternalRecursiveSave();
		}


		public RCDocumentsLearningSupportDocumentsRecord Duplicate() {
			RCDocumentsLearningSupportDocumentsRecord t;
			t.ssENDocuments = (ENDocumentsEntityRecord) this.ssENDocuments.Duplicate();
			t.ssENLearningSupportDocuments = (ENLearningSupportDocumentsEntityRecord) this.ssENLearningSupportDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENDocuments.ToXml(this, recordElem, "Documents", detailLevel - 1);
				ssENLearningSupportDocuments.ToXml(this, recordElem, "LearningSupportDocuments", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "documents") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Documents")) variable.Value = ssENDocuments; else variable.Optimized = true;
				variable.SetFieldName("documents");
			} else if (head == "learningsupportdocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningSupportDocuments")) variable.Value = ssENLearningSupportDocuments; else variable.Optimized = true;
				variable.SetFieldName("learningsupportdocuments");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDocuments) {
				return ssENDocuments;
			} else if (key == IdLearningSupportDocuments) {
				return ssENLearningSupportDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENDocuments.FillFromOther((IRecord) other.AttributeGet(IdDocuments));
			ssENLearningSupportDocuments.FillFromOther((IRecord) other.AttributeGet(IdLearningSupportDocuments));
		}
	} // RCDocumentsLearningSupportDocumentsRecord
	/// <summary>
	/// Structure <code>RCUserNoteNoteTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserNoteNoteTypeRecord: ISerializable, ITypedRecord<RCUserNoteNoteTypeRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdNote = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ew2SfY4g0RdBNomxnNliJg");
		private static readonly GlobalObjectKey IdNoteType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*FD1wpIBM0C2kFA3bUGGXoQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Note")]
		public ENNoteEntityRecord ssENNote;

		[System.Xml.Serialization.XmlElement("NoteType")]
		public ENNoteTypeEntityRecord ssENNoteType;


		public BitArray OptimizedAttributes;

		public RCUserNoteNoteTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENNote = new ENNoteEntityRecord(null);
			ssENNoteType = new ENNoteTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(8, false);
			all[2] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENNote.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENNoteType.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENNote.OptimizedAttributes = value[1];
					ssENNoteType.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENNote.OptimizedAttributes;
				all[2] = ssENNoteType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENNote.Read(r, ref index);
			ssENNoteType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserNoteNoteTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCUserNoteNoteTypeRecord a, RCUserNoteNoteTypeRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENNote != b.ssENNote) return false;
			if (a.ssENNoteType != b.ssENNoteType) return false;
			return true;
		}

		public static bool operator != (RCUserNoteNoteTypeRecord a, RCUserNoteNoteTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserNoteNoteTypeRecord)) return false;
			return (this == (RCUserNoteNoteTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENNote.GetHashCode()
				^ ssENNoteType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserNoteNoteTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENNote = new ENNoteEntityRecord(null);
			ssENNoteType = new ENNoteTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENNote = (ENNoteEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENNoteType = (ENNoteTypeEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENNote.RecursiveReset();
			ssENNoteType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENNote.InternalRecursiveSave();
			ssENNoteType.InternalRecursiveSave();
		}


		public RCUserNoteNoteTypeRecord Duplicate() {
			RCUserNoteNoteTypeRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENNote = (ENNoteEntityRecord) this.ssENNote.Duplicate();
			t.ssENNoteType = (ENNoteTypeEntityRecord) this.ssENNoteType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENNote.ToXml(this, recordElem, "Note", detailLevel - 1);
				ssENNoteType.ToXml(this, recordElem, "NoteType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "note") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Note")) variable.Value = ssENNote; else variable.Optimized = true;
				variable.SetFieldName("note");
			} else if (head == "notetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NoteType")) variable.Value = ssENNoteType; else variable.Optimized = true;
				variable.SetFieldName("notetype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdNote) {
				return ssENNote;
			} else if (key == IdNoteType) {
				return ssENNoteType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENNote.FillFromOther((IRecord) other.AttributeGet(IdNote));
			ssENNoteType.FillFromOther((IRecord) other.AttributeGet(IdNoteType));
		}
	} // RCUserNoteNoteTypeRecord
	/// <summary>
	/// Structure <code>RCStaffView_SearchStaffView_FilterRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffView_SearchStaffView_FilterRecord: ISerializable, ITypedRecord<RCStaffView_SearchStaffView_FilterRecord> {
		private static readonly GlobalObjectKey IdStaffView_Search = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*clWnQKpI23_1BL0Gm8E90A");
		private static readonly GlobalObjectKey IdStaffView_Filter = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*k3GVanUrTn8wiCUbUEozqw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StaffView_Search")]
		public STStaffView_SearchStructure ssSTStaffView_Search;

		[System.Xml.Serialization.XmlElement("StaffView_Filter")]
		public STStaffView_FilterStructure ssSTStaffView_Filter;


		public BitArray OptimizedAttributes;

		public RCStaffView_SearchStaffView_FilterRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTStaffView_Search = new STStaffView_SearchStructure(null);
			ssSTStaffView_Filter = new STStaffView_FilterStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = null;
			all[1] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTStaffView_Search.OptimizedAttributes = value[0];
					ssSTStaffView_Filter.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = null;
				all[1] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTStaffView_Search.Read(r, ref index);
			ssSTStaffView_Filter.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffView_SearchStaffView_FilterRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffView_SearchStaffView_FilterRecord a, RCStaffView_SearchStaffView_FilterRecord b) {
			if (a.ssSTStaffView_Search != b.ssSTStaffView_Search) return false;
			if (a.ssSTStaffView_Filter != b.ssSTStaffView_Filter) return false;
			return true;
		}

		public static bool operator != (RCStaffView_SearchStaffView_FilterRecord a, RCStaffView_SearchStaffView_FilterRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffView_SearchStaffView_FilterRecord)) return false;
			return (this == (RCStaffView_SearchStaffView_FilterRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTStaffView_Search.GetHashCode()
				^ ssSTStaffView_Filter.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffView_SearchStaffView_FilterRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTStaffView_Search = new STStaffView_SearchStructure(null);
			ssSTStaffView_Filter = new STStaffView_FilterStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTStaffView_Search = (STStaffView_SearchStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTStaffView_Filter = (STStaffView_FilterStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssSTStaffView_Search.RecursiveReset();
			ssSTStaffView_Filter.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTStaffView_Search.InternalRecursiveSave();
			ssSTStaffView_Filter.InternalRecursiveSave();
		}


		public RCStaffView_SearchStaffView_FilterRecord Duplicate() {
			RCStaffView_SearchStaffView_FilterRecord t;
			t.ssSTStaffView_Search = (STStaffView_SearchStructure) this.ssSTStaffView_Search.Duplicate();
			t.ssSTStaffView_Filter = (STStaffView_FilterStructure) this.ssSTStaffView_Filter.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTStaffView_Search.ToXml(this, recordElem, "StaffView_Search", detailLevel - 1);
				ssSTStaffView_Filter.ToXml(this, recordElem, "StaffView_Filter", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staffview_search") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffView_Search")) variable.Value = ssSTStaffView_Search; else variable.Optimized = true;
				variable.SetFieldName("staffview_search");
			} else if (head == "staffview_filter") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffView_Filter")) variable.Value = ssSTStaffView_Filter; else variable.Optimized = true;
				variable.SetFieldName("staffview_filter");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaffView_Search) {
				return ssSTStaffView_Search;
			} else if (key == IdStaffView_Filter) {
				return ssSTStaffView_Filter;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTStaffView_Search.FillFromOther((IRecord) other.AttributeGet(IdStaffView_Search));
			ssSTStaffView_Filter.FillFromOther((IRecord) other.AttributeGet(IdStaffView_Filter));
		}
	} // RCStaffView_SearchStaffView_FilterRecord
	/// <summary>
	/// Structure <code>RCStudentStudentProcessNotesStudentMLWProcessRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentStudentProcessNotesStudentMLWProcessRecord: ISerializable, ITypedRecord<RCStudentStudentProcessNotesStudentMLWProcessRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdStudentProcessNotes = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ALmJWMdOII9+l6HjQdq+MQ");
		private static readonly GlobalObjectKey IdStudentMLWProcess = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*3+eVxhsd5S23zvvuOTXhCw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("StudentProcessNotes")]
		public ENStudentProcessNotesEntityRecord ssENStudentProcessNotes;

		[System.Xml.Serialization.XmlElement("StudentMLWProcess")]
		public ENStudentMLWProcessEntityRecord ssENStudentMLWProcess;


		public BitArray OptimizedAttributes;

		public RCStudentStudentProcessNotesStudentMLWProcessRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENStudentProcessNotes = new ENStudentProcessNotesEntityRecord(null);
			ssENStudentMLWProcess = new ENStudentMLWProcessEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(5, false);
			all[2] = new BitArray(15, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentProcessNotes.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudentMLWProcess.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENStudentProcessNotes.OptimizedAttributes = value[1];
					ssENStudentMLWProcess.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENStudentProcessNotes.OptimizedAttributes;
				all[2] = ssENStudentMLWProcess.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENStudentProcessNotes.Read(r, ref index);
			ssENStudentMLWProcess.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentStudentProcessNotesStudentMLWProcessRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentStudentProcessNotesStudentMLWProcessRecord a, RCStudentStudentProcessNotesStudentMLWProcessRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENStudentProcessNotes != b.ssENStudentProcessNotes) return false;
			if (a.ssENStudentMLWProcess != b.ssENStudentMLWProcess) return false;
			return true;
		}

		public static bool operator != (RCStudentStudentProcessNotesStudentMLWProcessRecord a, RCStudentStudentProcessNotesStudentMLWProcessRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentStudentProcessNotesStudentMLWProcessRecord)) return false;
			return (this == (RCStudentStudentProcessNotesStudentMLWProcessRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENStudentProcessNotes.GetHashCode()
				^ ssENStudentMLWProcess.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentStudentProcessNotesStudentMLWProcessRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENStudentProcessNotes = new ENStudentProcessNotesEntityRecord(null);
			ssENStudentMLWProcess = new ENStudentMLWProcessEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentProcessNotes = (ENStudentProcessNotesEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudentMLWProcess = (ENStudentMLWProcessEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENStudentProcessNotes.RecursiveReset();
			ssENStudentMLWProcess.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENStudentProcessNotes.InternalRecursiveSave();
			ssENStudentMLWProcess.InternalRecursiveSave();
		}


		public RCStudentStudentProcessNotesStudentMLWProcessRecord Duplicate() {
			RCStudentStudentProcessNotesStudentMLWProcessRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENStudentProcessNotes = (ENStudentProcessNotesEntityRecord) this.ssENStudentProcessNotes.Duplicate();
			t.ssENStudentMLWProcess = (ENStudentMLWProcessEntityRecord) this.ssENStudentMLWProcess.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENStudentProcessNotes.ToXml(this, recordElem, "StudentProcessNotes", detailLevel - 1);
				ssENStudentMLWProcess.ToXml(this, recordElem, "StudentMLWProcess", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "studentprocessnotes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentProcessNotes")) variable.Value = ssENStudentProcessNotes; else variable.Optimized = true;
				variable.SetFieldName("studentprocessnotes");
			} else if (head == "studentmlwprocess") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentMLWProcess")) variable.Value = ssENStudentMLWProcess; else variable.Optimized = true;
				variable.SetFieldName("studentmlwprocess");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdStudentProcessNotes) {
				return ssENStudentProcessNotes;
			} else if (key == IdStudentMLWProcess) {
				return ssENStudentMLWProcess;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENStudentProcessNotes.FillFromOther((IRecord) other.AttributeGet(IdStudentProcessNotes));
			ssENStudentMLWProcess.FillFromOther((IRecord) other.AttributeGet(IdStudentMLWProcess));
		}
	} // RCStudentStudentProcessNotesStudentMLWProcessRecord
	/// <summary>
	/// Structure <code>RCGroupCategoryStudent_GroupIALevelsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupCategoryStudent_GroupIALevelsRecord: ISerializable, ITypedRecord<RCGroupCategoryStudent_GroupIALevelsRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdCategory = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QOorPFvJI1gzBEfDKCy9mw");
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");
		private static readonly GlobalObjectKey IdIALevels = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*1PMebb74vqaxT60qY0pzBg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("Category")]
		public ENCategoryEntityRecord ssENCategory;

		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;

		[System.Xml.Serialization.XmlElement("IALevels")]
		public ENIALevelsEntityRecord ssENIALevels;


		public BitArray OptimizedAttributes;

		public RCGroupCategoryStudent_GroupIALevelsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENCategory = new ENCategoryEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENIALevels = new ENIALevelsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(5, false);
			all[2] = new BitArray(9, false);
			all[3] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENCategory.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENIALevels.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENCategory.OptimizedAttributes = value[1];
					ssENStudent_Group.OptimizedAttributes = value[2];
					ssENIALevels.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENCategory.OptimizedAttributes;
				all[2] = ssENStudent_Group.OptimizedAttributes;
				all[3] = ssENIALevels.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENCategory.Read(r, ref index);
			ssENStudent_Group.Read(r, ref index);
			ssENIALevels.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupCategoryStudent_GroupIALevelsRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupCategoryStudent_GroupIALevelsRecord a, RCGroupCategoryStudent_GroupIALevelsRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENCategory != b.ssENCategory) return false;
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			if (a.ssENIALevels != b.ssENIALevels) return false;
			return true;
		}

		public static bool operator != (RCGroupCategoryStudent_GroupIALevelsRecord a, RCGroupCategoryStudent_GroupIALevelsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupCategoryStudent_GroupIALevelsRecord)) return false;
			return (this == (RCGroupCategoryStudent_GroupIALevelsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENCategory.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				^ ssENIALevels.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupCategoryStudent_GroupIALevelsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENCategory = new ENCategoryEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENIALevels = new ENIALevelsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENCategory = (ENCategoryEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENIALevels = (ENIALevelsEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENCategory.RecursiveReset();
			ssENStudent_Group.RecursiveReset();
			ssENIALevels.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENCategory.InternalRecursiveSave();
			ssENStudent_Group.InternalRecursiveSave();
			ssENIALevels.InternalRecursiveSave();
		}


		public RCGroupCategoryStudent_GroupIALevelsRecord Duplicate() {
			RCGroupCategoryStudent_GroupIALevelsRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENCategory = (ENCategoryEntityRecord) this.ssENCategory.Duplicate();
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.ssENIALevels = (ENIALevelsEntityRecord) this.ssENIALevels.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENCategory.ToXml(this, recordElem, "Category", detailLevel - 1);
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
				ssENIALevels.ToXml(this, recordElem, "IALevels", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "category") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Category")) variable.Value = ssENCategory; else variable.Optimized = true;
				variable.SetFieldName("category");
			} else if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			} else if (head == "ialevels") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IALevels")) variable.Value = ssENIALevels; else variable.Optimized = true;
				variable.SetFieldName("ialevels");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdCategory) {
				return ssENCategory;
			} else if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else if (key == IdIALevels) {
				return ssENIALevels;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENCategory.FillFromOther((IRecord) other.AttributeGet(IdCategory));
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
			ssENIALevels.FillFromOther((IRecord) other.AttributeGet(IdIALevels));
		}
	} // RCGroupCategoryStudent_GroupIALevelsRecord
	/// <summary>
	/// Structure <code>RCUserRiskAssessmentKeepInformedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserRiskAssessmentKeepInformedRecord: ISerializable, ITypedRecord<RCUserRiskAssessmentKeepInformedRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdRiskAssessmentKeepInformed = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*4ftShLPK7Bjub7or9ZopWA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("RiskAssessmentKeepInformed")]
		public ENRiskAssessmentKeepInformedEntityRecord ssENRiskAssessmentKeepInformed;


		public BitArray OptimizedAttributes;

		public RCUserRiskAssessmentKeepInformedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENRiskAssessmentKeepInformed = new ENRiskAssessmentKeepInformedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENRiskAssessmentKeepInformed.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENRiskAssessmentKeepInformed.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENRiskAssessmentKeepInformed.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENRiskAssessmentKeepInformed.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserRiskAssessmentKeepInformedRecord r) {
			this = r;
		}


		public static bool operator == (RCUserRiskAssessmentKeepInformedRecord a, RCUserRiskAssessmentKeepInformedRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENRiskAssessmentKeepInformed != b.ssENRiskAssessmentKeepInformed) return false;
			return true;
		}

		public static bool operator != (RCUserRiskAssessmentKeepInformedRecord a, RCUserRiskAssessmentKeepInformedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserRiskAssessmentKeepInformedRecord)) return false;
			return (this == (RCUserRiskAssessmentKeepInformedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENRiskAssessmentKeepInformed.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserRiskAssessmentKeepInformedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENRiskAssessmentKeepInformed = new ENRiskAssessmentKeepInformedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENRiskAssessmentKeepInformed = (ENRiskAssessmentKeepInformedEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENRiskAssessmentKeepInformed.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENRiskAssessmentKeepInformed.InternalRecursiveSave();
		}


		public RCUserRiskAssessmentKeepInformedRecord Duplicate() {
			RCUserRiskAssessmentKeepInformedRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENRiskAssessmentKeepInformed = (ENRiskAssessmentKeepInformedEntityRecord) this.ssENRiskAssessmentKeepInformed.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENRiskAssessmentKeepInformed.ToXml(this, recordElem, "RiskAssessmentKeepInformed", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "riskassessmentkeepinformed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentKeepInformed")) variable.Value = ssENRiskAssessmentKeepInformed; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentkeepinformed");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdRiskAssessmentKeepInformed) {
				return ssENRiskAssessmentKeepInformed;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENRiskAssessmentKeepInformed.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentKeepInformed));
		}
	} // RCUserRiskAssessmentKeepInformedRecord
	/// <summary>
	/// Structure <code>RCGroupCategoryProgressReportSectionProgressReportSectionsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupCategoryProgressReportSectionProgressReportSectionsRecord: ISerializable, ITypedRecord<RCGroupCategoryProgressReportSectionProgressReportSectionsRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdCategory = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QOorPFvJI1gzBEfDKCy9mw");
		private static readonly GlobalObjectKey IdProgressReportSection = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QQJwCkGhCxsjtT_ejR61nw");
		private static readonly GlobalObjectKey IdProgressReportSections = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5rigJ8jxOBPww+p4Cyr8Og");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("Category")]
		public ENCategoryEntityRecord ssENCategory;

		[System.Xml.Serialization.XmlElement("ProgressReportSection")]
		public ENProgressReportSectionEntityRecord ssENProgressReportSection;

		[System.Xml.Serialization.XmlElement("ProgressReportSections")]
		public ENProgressReportSectionsEntityRecord ssENProgressReportSections;


		public BitArray OptimizedAttributes;

		public RCGroupCategoryProgressReportSectionProgressReportSectionsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENCategory = new ENCategoryEntityRecord(null);
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(5, false);
			all[2] = new BitArray(49, false);
			all[3] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENCategory.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENProgressReportSection.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENProgressReportSections.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENCategory.OptimizedAttributes = value[1];
					ssENProgressReportSection.OptimizedAttributes = value[2];
					ssENProgressReportSections.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENCategory.OptimizedAttributes;
				all[2] = ssENProgressReportSection.OptimizedAttributes;
				all[3] = ssENProgressReportSections.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENCategory.Read(r, ref index);
			ssENProgressReportSection.Read(r, ref index);
			ssENProgressReportSections.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupCategoryProgressReportSectionProgressReportSectionsRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupCategoryProgressReportSectionProgressReportSectionsRecord a, RCGroupCategoryProgressReportSectionProgressReportSectionsRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENCategory != b.ssENCategory) return false;
			if (a.ssENProgressReportSection != b.ssENProgressReportSection) return false;
			if (a.ssENProgressReportSections != b.ssENProgressReportSections) return false;
			return true;
		}

		public static bool operator != (RCGroupCategoryProgressReportSectionProgressReportSectionsRecord a, RCGroupCategoryProgressReportSectionProgressReportSectionsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupCategoryProgressReportSectionProgressReportSectionsRecord)) return false;
			return (this == (RCGroupCategoryProgressReportSectionProgressReportSectionsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENCategory.GetHashCode()
				^ ssENProgressReportSection.GetHashCode()
				^ ssENProgressReportSections.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupCategoryProgressReportSectionProgressReportSectionsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENCategory = new ENCategoryEntityRecord(null);
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENCategory = (ENCategoryEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENProgressReportSection = (ENProgressReportSectionEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENCategory.RecursiveReset();
			ssENProgressReportSection.RecursiveReset();
			ssENProgressReportSections.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENCategory.InternalRecursiveSave();
			ssENProgressReportSection.InternalRecursiveSave();
			ssENProgressReportSections.InternalRecursiveSave();
		}


		public RCGroupCategoryProgressReportSectionProgressReportSectionsRecord Duplicate() {
			RCGroupCategoryProgressReportSectionProgressReportSectionsRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENCategory = (ENCategoryEntityRecord) this.ssENCategory.Duplicate();
			t.ssENProgressReportSection = (ENProgressReportSectionEntityRecord) this.ssENProgressReportSection.Duplicate();
			t.ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) this.ssENProgressReportSections.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENCategory.ToXml(this, recordElem, "Category", detailLevel - 1);
				ssENProgressReportSection.ToXml(this, recordElem, "ProgressReportSection", detailLevel - 1);
				ssENProgressReportSections.ToXml(this, recordElem, "ProgressReportSections", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "category") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Category")) variable.Value = ssENCategory; else variable.Optimized = true;
				variable.SetFieldName("category");
			} else if (head == "progressreportsection") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSection")) variable.Value = ssENProgressReportSection; else variable.Optimized = true;
				variable.SetFieldName("progressreportsection");
			} else if (head == "progressreportsections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSections")) variable.Value = ssENProgressReportSections; else variable.Optimized = true;
				variable.SetFieldName("progressreportsections");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdCategory) {
				return ssENCategory;
			} else if (key == IdProgressReportSection) {
				return ssENProgressReportSection;
			} else if (key == IdProgressReportSections) {
				return ssENProgressReportSections;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENCategory.FillFromOther((IRecord) other.AttributeGet(IdCategory));
			ssENProgressReportSection.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSection));
			ssENProgressReportSections.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSections));
		}
	} // RCGroupCategoryProgressReportSectionProgressReportSectionsRecord
	/// <summary>
	/// Structure <code>RCProgressReportSectionProgressReportSectionsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCProgressReportSectionProgressReportSectionsRecord: ISerializable, ITypedRecord<RCProgressReportSectionProgressReportSectionsRecord> {
		private static readonly GlobalObjectKey IdProgressReportSection = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QQJwCkGhCxsjtT_ejR61nw");
		private static readonly GlobalObjectKey IdProgressReportSections = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5rigJ8jxOBPww+p4Cyr8Og");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ProgressReportSection")]
		public ENProgressReportSectionEntityRecord ssENProgressReportSection;

		[System.Xml.Serialization.XmlElement("ProgressReportSections")]
		public ENProgressReportSectionsEntityRecord ssENProgressReportSections;


		public BitArray OptimizedAttributes;

		public RCProgressReportSectionProgressReportSectionsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(49, false);
			all[1] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENProgressReportSection.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENProgressReportSections.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENProgressReportSection.OptimizedAttributes = value[0];
					ssENProgressReportSections.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENProgressReportSection.OptimizedAttributes;
				all[1] = ssENProgressReportSections.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENProgressReportSection.Read(r, ref index);
			ssENProgressReportSections.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCProgressReportSectionProgressReportSectionsRecord r) {
			this = r;
		}


		public static bool operator == (RCProgressReportSectionProgressReportSectionsRecord a, RCProgressReportSectionProgressReportSectionsRecord b) {
			if (a.ssENProgressReportSection != b.ssENProgressReportSection) return false;
			if (a.ssENProgressReportSections != b.ssENProgressReportSections) return false;
			return true;
		}

		public static bool operator != (RCProgressReportSectionProgressReportSectionsRecord a, RCProgressReportSectionProgressReportSectionsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCProgressReportSectionProgressReportSectionsRecord)) return false;
			return (this == (RCProgressReportSectionProgressReportSectionsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENProgressReportSection.GetHashCode()
				^ ssENProgressReportSections.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCProgressReportSectionProgressReportSectionsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENProgressReportSection = (ENProgressReportSectionEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENProgressReportSection.RecursiveReset();
			ssENProgressReportSections.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENProgressReportSection.InternalRecursiveSave();
			ssENProgressReportSections.InternalRecursiveSave();
		}


		public RCProgressReportSectionProgressReportSectionsRecord Duplicate() {
			RCProgressReportSectionProgressReportSectionsRecord t;
			t.ssENProgressReportSection = (ENProgressReportSectionEntityRecord) this.ssENProgressReportSection.Duplicate();
			t.ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) this.ssENProgressReportSections.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENProgressReportSection.ToXml(this, recordElem, "ProgressReportSection", detailLevel - 1);
				ssENProgressReportSections.ToXml(this, recordElem, "ProgressReportSections", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "progressreportsection") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSection")) variable.Value = ssENProgressReportSection; else variable.Optimized = true;
				variable.SetFieldName("progressreportsection");
			} else if (head == "progressreportsections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSections")) variable.Value = ssENProgressReportSections; else variable.Optimized = true;
				variable.SetFieldName("progressreportsections");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdProgressReportSection) {
				return ssENProgressReportSection;
			} else if (key == IdProgressReportSections) {
				return ssENProgressReportSections;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENProgressReportSection.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSection));
			ssENProgressReportSections.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSections));
		}
	} // RCProgressReportSectionProgressReportSectionsRecord
	/// <summary>
	/// Structure <code>RCStudentUserStudentLogStudentLogTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserStudentLogStudentLogTypeRecord: ISerializable, ITypedRecord<RCStudentUserStudentLogStudentLogTypeRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentLog = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*a207hFuVwR8WZj05PrSs2A");
		private static readonly GlobalObjectKey IdStudentLogType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*O+r9xki4DgSh6sLDbQOVWg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentLog")]
		public ENStudentLogEntityRecord ssENStudentLog;

		[System.Xml.Serialization.XmlElement("StudentLogType")]
		public ENStudentLogTypeEntityRecord ssENStudentLogType;


		public BitArray OptimizedAttributes;

		public RCStudentUserStudentLogStudentLogTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			ssENStudentLogType = new ENStudentLogTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(44, false);
			all[3] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudentLog.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENStudentLogType.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENStudentLog.OptimizedAttributes = value[2];
					ssENStudentLogType.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENStudentLog.OptimizedAttributes;
				all[3] = ssENStudentLogType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENStudentLog.Read(r, ref index);
			ssENStudentLogType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserStudentLogStudentLogTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserStudentLogStudentLogTypeRecord a, RCStudentUserStudentLogStudentLogTypeRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentLog != b.ssENStudentLog) return false;
			if (a.ssENStudentLogType != b.ssENStudentLogType) return false;
			return true;
		}

		public static bool operator != (RCStudentUserStudentLogStudentLogTypeRecord a, RCStudentUserStudentLogStudentLogTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserStudentLogStudentLogTypeRecord)) return false;
			return (this == (RCStudentUserStudentLogStudentLogTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentLog.GetHashCode()
				^ ssENStudentLogType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserStudentLogStudentLogTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			ssENStudentLogType = new ENStudentLogTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudentLog = (ENStudentLogEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENStudentLogType = (ENStudentLogTypeEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENStudentLog.RecursiveReset();
			ssENStudentLogType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENStudentLog.InternalRecursiveSave();
			ssENStudentLogType.InternalRecursiveSave();
		}


		public RCStudentUserStudentLogStudentLogTypeRecord Duplicate() {
			RCStudentUserStudentLogStudentLogTypeRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentLog = (ENStudentLogEntityRecord) this.ssENStudentLog.Duplicate();
			t.ssENStudentLogType = (ENStudentLogTypeEntityRecord) this.ssENStudentLogType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentLog.ToXml(this, recordElem, "StudentLog", detailLevel - 1);
				ssENStudentLogType.ToXml(this, recordElem, "StudentLogType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentlog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLog")) variable.Value = ssENStudentLog; else variable.Optimized = true;
				variable.SetFieldName("studentlog");
			} else if (head == "studentlogtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLogType")) variable.Value = ssENStudentLogType; else variable.Optimized = true;
				variable.SetFieldName("studentlogtype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentLog) {
				return ssENStudentLog;
			} else if (key == IdStudentLogType) {
				return ssENStudentLogType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentLog.FillFromOther((IRecord) other.AttributeGet(IdStudentLog));
			ssENStudentLogType.FillFromOther((IRecord) other.AttributeGet(IdStudentLogType));
		}
	} // RCStudentUserStudentLogStudentLogTypeRecord
	/// <summary>
	/// Structure <code>RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord: ISerializable, ITypedRecord<RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");
		private static readonly GlobalObjectKey IdRiskAssessment = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NV6tF5Chu6exdZbe80vBxw");
		private static readonly GlobalObjectKey IdRiskAssessmentKeepInformed = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*4ftShLPK7Bjub7or9ZopWA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;

		[System.Xml.Serialization.XmlElement("RiskAssessment")]
		public ENRiskAssessmentEntityRecord ssENRiskAssessment;

		[System.Xml.Serialization.XmlElement("RiskAssessmentKeepInformed")]
		public ENRiskAssessmentKeepInformedEntityRecord ssENRiskAssessmentKeepInformed;


		public BitArray OptimizedAttributes;

		public RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
			ssENRiskAssessmentKeepInformed = new ENRiskAssessmentKeepInformedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(11, false);
			all[1] = null;
			all[2] = new BitArray(22, false);
			all[3] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENRiskAssessment.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENRiskAssessmentKeepInformed.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssSTBoolean.OptimizedAttributes = value[1];
					ssENRiskAssessment.OptimizedAttributes = value[2];
					ssENRiskAssessmentKeepInformed.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = null;
				all[2] = ssENRiskAssessment.OptimizedAttributes;
				all[3] = ssENRiskAssessmentKeepInformed.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
			ssENRiskAssessment.Read(r, ref index);
			ssENRiskAssessmentKeepInformed.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord r) {
			this = r;
		}


		public static bool operator == (RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord a, RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			if (a.ssENRiskAssessment != b.ssENRiskAssessment) return false;
			if (a.ssENRiskAssessmentKeepInformed != b.ssENRiskAssessmentKeepInformed) return false;
			return true;
		}

		public static bool operator != (RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord a, RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord)) return false;
			return (this == (RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				^ ssENRiskAssessment.GetHashCode()
				^ ssENRiskAssessmentKeepInformed.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
			ssENRiskAssessmentKeepInformed = new ENRiskAssessmentKeepInformedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENRiskAssessment = (ENRiskAssessmentEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENRiskAssessmentKeepInformed = (ENRiskAssessmentKeepInformedEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssSTBoolean.RecursiveReset();
			ssENRiskAssessment.RecursiveReset();
			ssENRiskAssessmentKeepInformed.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
			ssENRiskAssessment.InternalRecursiveSave();
			ssENRiskAssessmentKeepInformed.InternalRecursiveSave();
		}


		public RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord Duplicate() {
			RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.ssENRiskAssessment = (ENRiskAssessmentEntityRecord) this.ssENRiskAssessment.Duplicate();
			t.ssENRiskAssessmentKeepInformed = (ENRiskAssessmentKeepInformedEntityRecord) this.ssENRiskAssessmentKeepInformed.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
				ssENRiskAssessment.ToXml(this, recordElem, "RiskAssessment", detailLevel - 1);
				ssENRiskAssessmentKeepInformed.ToXml(this, recordElem, "RiskAssessmentKeepInformed", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			} else if (head == "riskassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessment")) variable.Value = ssENRiskAssessment; else variable.Optimized = true;
				variable.SetFieldName("riskassessment");
			} else if (head == "riskassessmentkeepinformed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentKeepInformed")) variable.Value = ssENRiskAssessmentKeepInformed; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentkeepinformed");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else if (key == IdRiskAssessment) {
				return ssENRiskAssessment;
			} else if (key == IdRiskAssessmentKeepInformed) {
				return ssENRiskAssessmentKeepInformed;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
			ssENRiskAssessment.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessment));
			ssENRiskAssessmentKeepInformed.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentKeepInformed));
		}
	} // RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord
	/// <summary>
	/// Structure <code>RCIntIntRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCIntIntRecord: ISerializable, ITypedRecord<RCIntIntRecord> {
		private static readonly GlobalObjectKey IdInt = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ez7zMhrpK4l3myGw247q5g");
		private static readonly GlobalObjectKey IdInt_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*K1jmOtpNk47iXYFc_pripw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Int")]
		public STIntStructure ssSTInt;

		[System.Xml.Serialization.XmlElement("Int_2")]
		public STIntStructure ssSTInt_2;


		public BitArray OptimizedAttributes;

		public RCIntIntRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTInt = new STIntStructure(null);
			ssSTInt_2 = new STIntStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = null;
			all[1] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTInt.OptimizedAttributes = value[0];
					ssSTInt_2.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = null;
				all[1] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTInt.Read(r, ref index);
			ssSTInt_2.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCIntIntRecord r) {
			this = r;
		}


		public static bool operator == (RCIntIntRecord a, RCIntIntRecord b) {
			if (a.ssSTInt != b.ssSTInt) return false;
			if (a.ssSTInt_2 != b.ssSTInt_2) return false;
			return true;
		}

		public static bool operator != (RCIntIntRecord a, RCIntIntRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCIntIntRecord)) return false;
			return (this == (RCIntIntRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTInt.GetHashCode()
				^ ssSTInt_2.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCIntIntRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTInt = new STIntStructure(null);
			ssSTInt_2 = new STIntStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTInt = (STIntStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTInt_2 = (STIntStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssSTInt.RecursiveReset();
			ssSTInt_2.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTInt.InternalRecursiveSave();
			ssSTInt_2.InternalRecursiveSave();
		}


		public RCIntIntRecord Duplicate() {
			RCIntIntRecord t;
			t.ssSTInt = (STIntStructure) this.ssSTInt.Duplicate();
			t.ssSTInt_2 = (STIntStructure) this.ssSTInt_2.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTInt.ToXml(this, recordElem, "Int", detailLevel - 1);
				ssSTInt_2.ToXml(this, recordElem, "Int_2", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "int") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Int")) variable.Value = ssSTInt; else variable.Optimized = true;
				variable.SetFieldName("int");
			} else if (head == "int_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Int_2")) variable.Value = ssSTInt_2; else variable.Optimized = true;
				variable.SetFieldName("int_2");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdInt) {
				return ssSTInt;
			} else if (key == IdInt_2) {
				return ssSTInt_2;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTInt.FillFromOther((IRecord) other.AttributeGet(IdInt));
			ssSTInt_2.FillFromOther((IRecord) other.AttributeGet(IdInt_2));
		}
	} // RCIntIntRecord
	/// <summary>
	/// Structure <code>RCSIASSupportNeedsDocumentsDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSIASSupportNeedsDocumentsDocumentsRecord: ISerializable, ITypedRecord<RCSIASSupportNeedsDocumentsDocumentsRecord> {
		private static readonly GlobalObjectKey IdSIASSupportNeedsDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*q_zRMOxmWAOH3CXG+xcHKw");
		private static readonly GlobalObjectKey IdDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*V+rMCyDoxxgjgWOZC2i4yw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SIASSupportNeedsDocuments")]
		public ENSIASSupportNeedsDocumentsEntityRecord ssENSIASSupportNeedsDocuments;

		[System.Xml.Serialization.XmlElement("Documents")]
		public ENDocumentsEntityRecord ssENDocuments;


		public BitArray OptimizedAttributes;

		public RCSIASSupportNeedsDocumentsDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSIASSupportNeedsDocuments = new ENSIASSupportNeedsDocumentsEntityRecord(null);
			ssENDocuments = new ENDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(5, false);
			all[1] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSIASSupportNeedsDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENSIASSupportNeedsDocuments.OptimizedAttributes = value[0];
					ssENDocuments.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENSIASSupportNeedsDocuments.OptimizedAttributes;
				all[1] = ssENDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSIASSupportNeedsDocuments.Read(r, ref index);
			ssENDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSIASSupportNeedsDocumentsDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCSIASSupportNeedsDocumentsDocumentsRecord a, RCSIASSupportNeedsDocumentsDocumentsRecord b) {
			if (a.ssENSIASSupportNeedsDocuments != b.ssENSIASSupportNeedsDocuments) return false;
			if (a.ssENDocuments != b.ssENDocuments) return false;
			return true;
		}

		public static bool operator != (RCSIASSupportNeedsDocumentsDocumentsRecord a, RCSIASSupportNeedsDocumentsDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSIASSupportNeedsDocumentsDocumentsRecord)) return false;
			return (this == (RCSIASSupportNeedsDocumentsDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSIASSupportNeedsDocuments.GetHashCode()
				^ ssENDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSIASSupportNeedsDocumentsDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSIASSupportNeedsDocuments = new ENSIASSupportNeedsDocumentsEntityRecord(null);
			ssENDocuments = new ENDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSIASSupportNeedsDocuments = (ENSIASSupportNeedsDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENDocuments = (ENDocumentsEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENSIASSupportNeedsDocuments.RecursiveReset();
			ssENDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSIASSupportNeedsDocuments.InternalRecursiveSave();
			ssENDocuments.InternalRecursiveSave();
		}


		public RCSIASSupportNeedsDocumentsDocumentsRecord Duplicate() {
			RCSIASSupportNeedsDocumentsDocumentsRecord t;
			t.ssENSIASSupportNeedsDocuments = (ENSIASSupportNeedsDocumentsEntityRecord) this.ssENSIASSupportNeedsDocuments.Duplicate();
			t.ssENDocuments = (ENDocumentsEntityRecord) this.ssENDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSIASSupportNeedsDocuments.ToXml(this, recordElem, "SIASSupportNeedsDocuments", detailLevel - 1);
				ssENDocuments.ToXml(this, recordElem, "Documents", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "siassupportneedsdocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupportNeedsDocuments")) variable.Value = ssENSIASSupportNeedsDocuments; else variable.Optimized = true;
				variable.SetFieldName("siassupportneedsdocuments");
			} else if (head == "documents") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Documents")) variable.Value = ssENDocuments; else variable.Optimized = true;
				variable.SetFieldName("documents");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSIASSupportNeedsDocuments) {
				return ssENSIASSupportNeedsDocuments;
			} else if (key == IdDocuments) {
				return ssENDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSIASSupportNeedsDocuments.FillFromOther((IRecord) other.AttributeGet(IdSIASSupportNeedsDocuments));
			ssENDocuments.FillFromOther((IRecord) other.AttributeGet(IdDocuments));
		}
	} // RCSIASSupportNeedsDocumentsDocumentsRecord
	/// <summary>
	/// Structure <code>RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord: ISerializable, ITypedRecord<RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord> {
		private static readonly GlobalObjectKey IdSIASSupportNeeds = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*IubH8VSDEY7nvvODnlcdPw");
		private static readonly GlobalObjectKey IdSIASSupportNeed = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*iY0Tw4p2s8UCECZJZVoqyA");
		private static readonly GlobalObjectKey IdSupportNeeds = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*JZ+gPiMA6spjpG52pRO4+A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SIASSupportNeeds")]
		public ENSIASSupportNeedsEntityRecord ssENSIASSupportNeeds;

		[System.Xml.Serialization.XmlElement("SIASSupportNeed")]
		public ENSIASSupportNeedEntityRecord ssENSIASSupportNeed;

		[System.Xml.Serialization.XmlElement("SupportNeeds")]
		public ENSupportNeedsEntityRecord ssENSupportNeeds;


		public BitArray OptimizedAttributes;

		public RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSIASSupportNeeds = new ENSIASSupportNeedsEntityRecord(null);
			ssENSIASSupportNeed = new ENSIASSupportNeedEntityRecord(null);
			ssENSupportNeeds = new ENSupportNeedsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(5, false);
			all[1] = new BitArray(5, false);
			all[2] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSIASSupportNeeds.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENSIASSupportNeed.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENSupportNeeds.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENSIASSupportNeeds.OptimizedAttributes = value[0];
					ssENSIASSupportNeed.OptimizedAttributes = value[1];
					ssENSupportNeeds.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENSIASSupportNeeds.OptimizedAttributes;
				all[1] = ssENSIASSupportNeed.OptimizedAttributes;
				all[2] = ssENSupportNeeds.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSIASSupportNeeds.Read(r, ref index);
			ssENSIASSupportNeed.Read(r, ref index);
			ssENSupportNeeds.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord r) {
			this = r;
		}


		public static bool operator == (RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord a, RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord b) {
			if (a.ssENSIASSupportNeeds != b.ssENSIASSupportNeeds) return false;
			if (a.ssENSIASSupportNeed != b.ssENSIASSupportNeed) return false;
			if (a.ssENSupportNeeds != b.ssENSupportNeeds) return false;
			return true;
		}

		public static bool operator != (RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord a, RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord)) return false;
			return (this == (RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSIASSupportNeeds.GetHashCode()
				^ ssENSIASSupportNeed.GetHashCode()
				^ ssENSupportNeeds.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSIASSupportNeeds = new ENSIASSupportNeedsEntityRecord(null);
			ssENSIASSupportNeed = new ENSIASSupportNeedEntityRecord(null);
			ssENSupportNeeds = new ENSupportNeedsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSIASSupportNeeds = (ENSIASSupportNeedsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENSIASSupportNeed = (ENSIASSupportNeedEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENSupportNeeds = (ENSupportNeedsEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENSIASSupportNeeds.RecursiveReset();
			ssENSIASSupportNeed.RecursiveReset();
			ssENSupportNeeds.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSIASSupportNeeds.InternalRecursiveSave();
			ssENSIASSupportNeed.InternalRecursiveSave();
			ssENSupportNeeds.InternalRecursiveSave();
		}


		public RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord Duplicate() {
			RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord t;
			t.ssENSIASSupportNeeds = (ENSIASSupportNeedsEntityRecord) this.ssENSIASSupportNeeds.Duplicate();
			t.ssENSIASSupportNeed = (ENSIASSupportNeedEntityRecord) this.ssENSIASSupportNeed.Duplicate();
			t.ssENSupportNeeds = (ENSupportNeedsEntityRecord) this.ssENSupportNeeds.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSIASSupportNeeds.ToXml(this, recordElem, "SIASSupportNeeds", detailLevel - 1);
				ssENSIASSupportNeed.ToXml(this, recordElem, "SIASSupportNeed", detailLevel - 1);
				ssENSupportNeeds.ToXml(this, recordElem, "SupportNeeds", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "siassupportneeds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupportNeeds")) variable.Value = ssENSIASSupportNeeds; else variable.Optimized = true;
				variable.SetFieldName("siassupportneeds");
			} else if (head == "siassupportneed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupportNeed")) variable.Value = ssENSIASSupportNeed; else variable.Optimized = true;
				variable.SetFieldName("siassupportneed");
			} else if (head == "supportneeds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportNeeds")) variable.Value = ssENSupportNeeds; else variable.Optimized = true;
				variable.SetFieldName("supportneeds");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSIASSupportNeeds) {
				return ssENSIASSupportNeeds;
			} else if (key == IdSIASSupportNeed) {
				return ssENSIASSupportNeed;
			} else if (key == IdSupportNeeds) {
				return ssENSupportNeeds;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSIASSupportNeeds.FillFromOther((IRecord) other.AttributeGet(IdSIASSupportNeeds));
			ssENSIASSupportNeed.FillFromOther((IRecord) other.AttributeGet(IdSIASSupportNeed));
			ssENSupportNeeds.FillFromOther((IRecord) other.AttributeGet(IdSupportNeeds));
		}
	} // RCSIASSupportNeedsSIASSupportNeedSupportNeedsRecord
	/// <summary>
	/// Structure <code>RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord: ISerializable, ITypedRecord<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord> {
		private static readonly GlobalObjectKey IdStaff = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*g7SxeiYo0dIB7YXPz8Xkpg");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdRAGStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*24GX8LQ_aRQhomR6Kb4nDw");
		private static readonly GlobalObjectKey IdSafeguardingIssue = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SAAZcYT_EnM1GejsKShLag");
		private static readonly GlobalObjectKey IdSafeguardingOutcome = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Xvp98xSRmKOHSMeOb1XR4w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Staff")]
		public ENStaffEntityRecord ssENStaff;

		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("RAGStatus")]
		public ENRAGStatusEntityRecord ssENRAGStatus;

		[System.Xml.Serialization.XmlElement("SafeguardingIssue")]
		public ENSafeguardingIssueEntityRecord ssENSafeguardingIssue;

		[System.Xml.Serialization.XmlElement("SafeguardingOutcome")]
		public ENSafeguardingOutcomeEntityRecord ssENSafeguardingOutcome;


		public BitArray OptimizedAttributes;

		public RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			ssENSafeguardingOutcome = new ENSafeguardingOutcomeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(15, false);
			all[1] = new BitArray(27, false);
			all[2] = new BitArray(5, false);
			all[3] = new BitArray(18, false);
			all[4] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStaff.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENRAGStatus.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENSafeguardingIssue.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENSafeguardingOutcome.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENStaff.OptimizedAttributes = value[0];
					ssENStudent.OptimizedAttributes = value[1];
					ssENRAGStatus.OptimizedAttributes = value[2];
					ssENSafeguardingIssue.OptimizedAttributes = value[3];
					ssENSafeguardingOutcome.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENStaff.OptimizedAttributes;
				all[1] = ssENStudent.OptimizedAttributes;
				all[2] = ssENRAGStatus.OptimizedAttributes;
				all[3] = ssENSafeguardingIssue.OptimizedAttributes;
				all[4] = ssENSafeguardingOutcome.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStaff.Read(r, ref index);
			ssENStudent.Read(r, ref index);
			ssENRAGStatus.Read(r, ref index);
			ssENSafeguardingIssue.Read(r, ref index);
			ssENSafeguardingOutcome.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord a, RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord b) {
			if (a.ssENStaff != b.ssENStaff) return false;
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENRAGStatus != b.ssENRAGStatus) return false;
			if (a.ssENSafeguardingIssue != b.ssENSafeguardingIssue) return false;
			if (a.ssENSafeguardingOutcome != b.ssENSafeguardingOutcome) return false;
			return true;
		}

		public static bool operator != (RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord a, RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord)) return false;
			return (this == (RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStaff.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENRAGStatus.GetHashCode()
				^ ssENSafeguardingIssue.GetHashCode()
				^ ssENSafeguardingOutcome.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			ssENSafeguardingOutcome = new ENSafeguardingOutcomeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStaff = (ENStaffEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENRAGStatus = (ENRAGStatusEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENSafeguardingOutcome = (ENSafeguardingOutcomeEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENStaff.RecursiveReset();
			ssENStudent.RecursiveReset();
			ssENRAGStatus.RecursiveReset();
			ssENSafeguardingIssue.RecursiveReset();
			ssENSafeguardingOutcome.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStaff.InternalRecursiveSave();
			ssENStudent.InternalRecursiveSave();
			ssENRAGStatus.InternalRecursiveSave();
			ssENSafeguardingIssue.InternalRecursiveSave();
			ssENSafeguardingOutcome.InternalRecursiveSave();
		}


		public RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord Duplicate() {
			RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord t;
			t.ssENStaff = (ENStaffEntityRecord) this.ssENStaff.Duplicate();
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENRAGStatus = (ENRAGStatusEntityRecord) this.ssENRAGStatus.Duplicate();
			t.ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) this.ssENSafeguardingIssue.Duplicate();
			t.ssENSafeguardingOutcome = (ENSafeguardingOutcomeEntityRecord) this.ssENSafeguardingOutcome.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStaff.ToXml(this, recordElem, "Staff", detailLevel - 1);
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENRAGStatus.ToXml(this, recordElem, "RAGStatus", detailLevel - 1);
				ssENSafeguardingIssue.ToXml(this, recordElem, "SafeguardingIssue", detailLevel - 1);
				ssENSafeguardingOutcome.ToXml(this, recordElem, "SafeguardingOutcome", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staff") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Staff")) variable.Value = ssENStaff; else variable.Optimized = true;
				variable.SetFieldName("staff");
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "ragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatus")) variable.Value = ssENRAGStatus; else variable.Optimized = true;
				variable.SetFieldName("ragstatus");
			} else if (head == "safeguardingissue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssue")) variable.Value = ssENSafeguardingIssue; else variable.Optimized = true;
				variable.SetFieldName("safeguardingissue");
			} else if (head == "safeguardingoutcome") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingOutcome")) variable.Value = ssENSafeguardingOutcome; else variable.Optimized = true;
				variable.SetFieldName("safeguardingoutcome");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaff) {
				return ssENStaff;
			} else if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdRAGStatus) {
				return ssENRAGStatus;
			} else if (key == IdSafeguardingIssue) {
				return ssENSafeguardingIssue;
			} else if (key == IdSafeguardingOutcome) {
				return ssENSafeguardingOutcome;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStaff.FillFromOther((IRecord) other.AttributeGet(IdStaff));
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENRAGStatus.FillFromOther((IRecord) other.AttributeGet(IdRAGStatus));
			ssENSafeguardingIssue.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingIssue));
			ssENSafeguardingOutcome.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingOutcome));
		}
	} // RCStaffStudentRAGStatusSafeguardingIssueSafeguardingOutcomeRecord
	/// <summary>
	/// Structure <code>RCUserAcademicYearsProgressReportProgressReportTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserAcademicYearsProgressReportProgressReportTypeRecord: ISerializable, ITypedRecord<RCUserAcademicYearsProgressReportProgressReportTypeRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdAcademicYears = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*s+Za7XpfGnL7R7G1Bxulmg");
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");
		private static readonly GlobalObjectKey IdProgressReportType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*1yKNLZ5hrgyypvQSHqrb9g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("AcademicYears")]
		public ENAcademicYearsEntityRecord ssENAcademicYears;

		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;

		[System.Xml.Serialization.XmlElement("ProgressReportType")]
		public ENProgressReportTypeEntityRecord ssENProgressReportType;


		public BitArray OptimizedAttributes;

		public RCUserAcademicYearsProgressReportProgressReportTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENAcademicYears = new ENAcademicYearsEntityRecord(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportType = new ENProgressReportTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(10, false);
			all[2] = new BitArray(23, false);
			all[3] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENAcademicYears.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENProgressReportType.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENAcademicYears.OptimizedAttributes = value[1];
					ssENProgressReport.OptimizedAttributes = value[2];
					ssENProgressReportType.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENAcademicYears.OptimizedAttributes;
				all[2] = ssENProgressReport.OptimizedAttributes;
				all[3] = ssENProgressReportType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENAcademicYears.Read(r, ref index);
			ssENProgressReport.Read(r, ref index);
			ssENProgressReportType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserAcademicYearsProgressReportProgressReportTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCUserAcademicYearsProgressReportProgressReportTypeRecord a, RCUserAcademicYearsProgressReportProgressReportTypeRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENAcademicYears != b.ssENAcademicYears) return false;
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			if (a.ssENProgressReportType != b.ssENProgressReportType) return false;
			return true;
		}

		public static bool operator != (RCUserAcademicYearsProgressReportProgressReportTypeRecord a, RCUserAcademicYearsProgressReportProgressReportTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserAcademicYearsProgressReportProgressReportTypeRecord)) return false;
			return (this == (RCUserAcademicYearsProgressReportProgressReportTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENAcademicYears.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				^ ssENProgressReportType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserAcademicYearsProgressReportProgressReportTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENAcademicYears = new ENAcademicYearsEntityRecord(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportType = new ENProgressReportTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENAcademicYears = (ENAcademicYearsEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENProgressReportType = (ENProgressReportTypeEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENAcademicYears.RecursiveReset();
			ssENProgressReport.RecursiveReset();
			ssENProgressReportType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENAcademicYears.InternalRecursiveSave();
			ssENProgressReport.InternalRecursiveSave();
			ssENProgressReportType.InternalRecursiveSave();
		}


		public RCUserAcademicYearsProgressReportProgressReportTypeRecord Duplicate() {
			RCUserAcademicYearsProgressReportProgressReportTypeRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENAcademicYears = (ENAcademicYearsEntityRecord) this.ssENAcademicYears.Duplicate();
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.ssENProgressReportType = (ENProgressReportTypeEntityRecord) this.ssENProgressReportType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENAcademicYears.ToXml(this, recordElem, "AcademicYears", detailLevel - 1);
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
				ssENProgressReportType.ToXml(this, recordElem, "ProgressReportType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "academicyears") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYears")) variable.Value = ssENAcademicYears; else variable.Optimized = true;
				variable.SetFieldName("academicyears");
			} else if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			} else if (head == "progressreporttype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportType")) variable.Value = ssENProgressReportType; else variable.Optimized = true;
				variable.SetFieldName("progressreporttype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdAcademicYears) {
				return ssENAcademicYears;
			} else if (key == IdProgressReport) {
				return ssENProgressReport;
			} else if (key == IdProgressReportType) {
				return ssENProgressReportType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENAcademicYears.FillFromOther((IRecord) other.AttributeGet(IdAcademicYears));
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
			ssENProgressReportType.FillFromOther((IRecord) other.AttributeGet(IdProgressReportType));
		}
	} // RCUserAcademicYearsProgressReportProgressReportTypeRecord
	/// <summary>
	/// Structure <code>RCStudentUserNoteRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserNoteRecord: ISerializable, ITypedRecord<RCStudentUserNoteRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdNote = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ew2SfY4g0RdBNomxnNliJg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Note")]
		public ENNoteEntityRecord ssENNote;


		public BitArray OptimizedAttributes;

		public RCStudentUserNoteRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENNote = new ENNoteEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENNote.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENNote.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENNote.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENNote.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserNoteRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserNoteRecord a, RCStudentUserNoteRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENNote != b.ssENNote) return false;
			return true;
		}

		public static bool operator != (RCStudentUserNoteRecord a, RCStudentUserNoteRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserNoteRecord)) return false;
			return (this == (RCStudentUserNoteRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENNote.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserNoteRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENNote = new ENNoteEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENNote = (ENNoteEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENNote.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENNote.InternalRecursiveSave();
		}


		public RCStudentUserNoteRecord Duplicate() {
			RCStudentUserNoteRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENNote = (ENNoteEntityRecord) this.ssENNote.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENNote.ToXml(this, recordElem, "Note", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "note") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Note")) variable.Value = ssENNote; else variable.Optimized = true;
				variable.SetFieldName("note");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdNote) {
				return ssENNote;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENNote.FillFromOther((IRecord) other.AttributeGet(IdNote));
		}
	} // RCStudentUserNoteRecord
	/// <summary>
	/// Structure <code>RCProgressReportProgressReportSectionProgressReportSectionsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCProgressReportProgressReportSectionProgressReportSectionsRecord: ISerializable, ITypedRecord<RCProgressReportProgressReportSectionProgressReportSectionsRecord> {
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");
		private static readonly GlobalObjectKey IdProgressReportSection = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QQJwCkGhCxsjtT_ejR61nw");
		private static readonly GlobalObjectKey IdProgressReportSections = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5rigJ8jxOBPww+p4Cyr8Og");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;

		[System.Xml.Serialization.XmlElement("ProgressReportSection")]
		public ENProgressReportSectionEntityRecord ssENProgressReportSection;

		[System.Xml.Serialization.XmlElement("ProgressReportSections")]
		public ENProgressReportSectionsEntityRecord ssENProgressReportSections;


		public BitArray OptimizedAttributes;

		public RCProgressReportProgressReportSectionProgressReportSectionsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(23, false);
			all[1] = new BitArray(49, false);
			all[2] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENProgressReportSection.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENProgressReportSections.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENProgressReport.OptimizedAttributes = value[0];
					ssENProgressReportSection.OptimizedAttributes = value[1];
					ssENProgressReportSections.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENProgressReport.OptimizedAttributes;
				all[1] = ssENProgressReportSection.OptimizedAttributes;
				all[2] = ssENProgressReportSections.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENProgressReport.Read(r, ref index);
			ssENProgressReportSection.Read(r, ref index);
			ssENProgressReportSections.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCProgressReportProgressReportSectionProgressReportSectionsRecord r) {
			this = r;
		}


		public static bool operator == (RCProgressReportProgressReportSectionProgressReportSectionsRecord a, RCProgressReportProgressReportSectionProgressReportSectionsRecord b) {
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			if (a.ssENProgressReportSection != b.ssENProgressReportSection) return false;
			if (a.ssENProgressReportSections != b.ssENProgressReportSections) return false;
			return true;
		}

		public static bool operator != (RCProgressReportProgressReportSectionProgressReportSectionsRecord a, RCProgressReportProgressReportSectionProgressReportSectionsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCProgressReportProgressReportSectionProgressReportSectionsRecord)) return false;
			return (this == (RCProgressReportProgressReportSectionProgressReportSectionsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				^ ssENProgressReportSection.GetHashCode()
				^ ssENProgressReportSections.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCProgressReportProgressReportSectionProgressReportSectionsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENProgressReportSection = (ENProgressReportSectionEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENProgressReport.RecursiveReset();
			ssENProgressReportSection.RecursiveReset();
			ssENProgressReportSections.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENProgressReport.InternalRecursiveSave();
			ssENProgressReportSection.InternalRecursiveSave();
			ssENProgressReportSections.InternalRecursiveSave();
		}


		public RCProgressReportProgressReportSectionProgressReportSectionsRecord Duplicate() {
			RCProgressReportProgressReportSectionProgressReportSectionsRecord t;
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.ssENProgressReportSection = (ENProgressReportSectionEntityRecord) this.ssENProgressReportSection.Duplicate();
			t.ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) this.ssENProgressReportSections.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
				ssENProgressReportSection.ToXml(this, recordElem, "ProgressReportSection", detailLevel - 1);
				ssENProgressReportSections.ToXml(this, recordElem, "ProgressReportSections", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			} else if (head == "progressreportsection") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSection")) variable.Value = ssENProgressReportSection; else variable.Optimized = true;
				variable.SetFieldName("progressreportsection");
			} else if (head == "progressreportsections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSections")) variable.Value = ssENProgressReportSections; else variable.Optimized = true;
				variable.SetFieldName("progressreportsections");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdProgressReport) {
				return ssENProgressReport;
			} else if (key == IdProgressReportSection) {
				return ssENProgressReportSection;
			} else if (key == IdProgressReportSections) {
				return ssENProgressReportSections;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
			ssENProgressReportSection.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSection));
			ssENProgressReportSections.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSections));
		}
	} // RCProgressReportProgressReportSectionProgressReportSectionsRecord
	/// <summary>
	/// Structure <code>RCAutoComplete_BankAutoCompleteBankTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAutoComplete_BankAutoCompleteBankTypeRecord: ISerializable, ITypedRecord<RCAutoComplete_BankAutoCompleteBankTypeRecord> {
		private static readonly GlobalObjectKey IdAutoComplete_Bank = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*+c0V1X9OFLPiikvKc4Oj_w");
		private static readonly GlobalObjectKey IdAutoCompleteBankType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*X5Ly31siUl9GiumTxihBZQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AutoComplete_Bank")]
		public ENAutoComplete_BankEntityRecord ssENAutoComplete_Bank;

		[System.Xml.Serialization.XmlElement("AutoCompleteBankType")]
		public ENAutoCompleteBankTypeEntityRecord ssENAutoCompleteBankType;


		public BitArray OptimizedAttributes;

		public RCAutoComplete_BankAutoCompleteBankTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENAutoComplete_Bank = new ENAutoComplete_BankEntityRecord(null);
			ssENAutoCompleteBankType = new ENAutoCompleteBankTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(7, false);
			all[1] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENAutoComplete_Bank.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENAutoCompleteBankType.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENAutoComplete_Bank.OptimizedAttributes = value[0];
					ssENAutoCompleteBankType.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENAutoComplete_Bank.OptimizedAttributes;
				all[1] = ssENAutoCompleteBankType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENAutoComplete_Bank.Read(r, ref index);
			ssENAutoCompleteBankType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAutoComplete_BankAutoCompleteBankTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCAutoComplete_BankAutoCompleteBankTypeRecord a, RCAutoComplete_BankAutoCompleteBankTypeRecord b) {
			if (a.ssENAutoComplete_Bank != b.ssENAutoComplete_Bank) return false;
			if (a.ssENAutoCompleteBankType != b.ssENAutoCompleteBankType) return false;
			return true;
		}

		public static bool operator != (RCAutoComplete_BankAutoCompleteBankTypeRecord a, RCAutoComplete_BankAutoCompleteBankTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAutoComplete_BankAutoCompleteBankTypeRecord)) return false;
			return (this == (RCAutoComplete_BankAutoCompleteBankTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENAutoComplete_Bank.GetHashCode()
				^ ssENAutoCompleteBankType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAutoComplete_BankAutoCompleteBankTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENAutoComplete_Bank = new ENAutoComplete_BankEntityRecord(null);
			ssENAutoCompleteBankType = new ENAutoCompleteBankTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENAutoComplete_Bank = (ENAutoComplete_BankEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENAutoCompleteBankType = (ENAutoCompleteBankTypeEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENAutoComplete_Bank.RecursiveReset();
			ssENAutoCompleteBankType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENAutoComplete_Bank.InternalRecursiveSave();
			ssENAutoCompleteBankType.InternalRecursiveSave();
		}


		public RCAutoComplete_BankAutoCompleteBankTypeRecord Duplicate() {
			RCAutoComplete_BankAutoCompleteBankTypeRecord t;
			t.ssENAutoComplete_Bank = (ENAutoComplete_BankEntityRecord) this.ssENAutoComplete_Bank.Duplicate();
			t.ssENAutoCompleteBankType = (ENAutoCompleteBankTypeEntityRecord) this.ssENAutoCompleteBankType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENAutoComplete_Bank.ToXml(this, recordElem, "AutoComplete_Bank", detailLevel - 1);
				ssENAutoCompleteBankType.ToXml(this, recordElem, "AutoCompleteBankType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "autocomplete_bank") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AutoComplete_Bank")) variable.Value = ssENAutoComplete_Bank; else variable.Optimized = true;
				variable.SetFieldName("autocomplete_bank");
			} else if (head == "autocompletebanktype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AutoCompleteBankType")) variable.Value = ssENAutoCompleteBankType; else variable.Optimized = true;
				variable.SetFieldName("autocompletebanktype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAutoComplete_Bank) {
				return ssENAutoComplete_Bank;
			} else if (key == IdAutoCompleteBankType) {
				return ssENAutoCompleteBankType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENAutoComplete_Bank.FillFromOther((IRecord) other.AttributeGet(IdAutoComplete_Bank));
			ssENAutoCompleteBankType.FillFromOther((IRecord) other.AttributeGet(IdAutoCompleteBankType));
		}
	} // RCAutoComplete_BankAutoCompleteBankTypeRecord
	/// <summary>
	/// Structure <code>RCStudentUserDisciplinaryDisciplinaryTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserDisciplinaryDisciplinaryTypeRecord: ISerializable, ITypedRecord<RCStudentUserDisciplinaryDisciplinaryTypeRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdDisciplinary = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*uPt8Pj187p4cYWjLev+HKw");
		private static readonly GlobalObjectKey IdDisciplinaryType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*AJljuw7hDz7g8TETpAkOSQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Disciplinary")]
		public ENDisciplinaryEntityRecord ssENDisciplinary;

		[System.Xml.Serialization.XmlElement("DisciplinaryType")]
		public ENDisciplinaryTypeEntityRecord ssENDisciplinaryType;


		public BitArray OptimizedAttributes;

		public RCStudentUserDisciplinaryDisciplinaryTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENDisciplinary = new ENDisciplinaryEntityRecord(null);
			ssENDisciplinaryType = new ENDisciplinaryTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(6, false);
			all[3] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENDisciplinary.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENDisciplinaryType.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENDisciplinary.OptimizedAttributes = value[2];
					ssENDisciplinaryType.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENDisciplinary.OptimizedAttributes;
				all[3] = ssENDisciplinaryType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENDisciplinary.Read(r, ref index);
			ssENDisciplinaryType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserDisciplinaryDisciplinaryTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserDisciplinaryDisciplinaryTypeRecord a, RCStudentUserDisciplinaryDisciplinaryTypeRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENDisciplinary != b.ssENDisciplinary) return false;
			if (a.ssENDisciplinaryType != b.ssENDisciplinaryType) return false;
			return true;
		}

		public static bool operator != (RCStudentUserDisciplinaryDisciplinaryTypeRecord a, RCStudentUserDisciplinaryDisciplinaryTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserDisciplinaryDisciplinaryTypeRecord)) return false;
			return (this == (RCStudentUserDisciplinaryDisciplinaryTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENDisciplinary.GetHashCode()
				^ ssENDisciplinaryType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserDisciplinaryDisciplinaryTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENDisciplinary = new ENDisciplinaryEntityRecord(null);
			ssENDisciplinaryType = new ENDisciplinaryTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENDisciplinary = (ENDisciplinaryEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENDisciplinaryType = (ENDisciplinaryTypeEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENDisciplinary.RecursiveReset();
			ssENDisciplinaryType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENDisciplinary.InternalRecursiveSave();
			ssENDisciplinaryType.InternalRecursiveSave();
		}


		public RCStudentUserDisciplinaryDisciplinaryTypeRecord Duplicate() {
			RCStudentUserDisciplinaryDisciplinaryTypeRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENDisciplinary = (ENDisciplinaryEntityRecord) this.ssENDisciplinary.Duplicate();
			t.ssENDisciplinaryType = (ENDisciplinaryTypeEntityRecord) this.ssENDisciplinaryType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENDisciplinary.ToXml(this, recordElem, "Disciplinary", detailLevel - 1);
				ssENDisciplinaryType.ToXml(this, recordElem, "DisciplinaryType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "disciplinary") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Disciplinary")) variable.Value = ssENDisciplinary; else variable.Optimized = true;
				variable.SetFieldName("disciplinary");
			} else if (head == "disciplinarytype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DisciplinaryType")) variable.Value = ssENDisciplinaryType; else variable.Optimized = true;
				variable.SetFieldName("disciplinarytype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdDisciplinary) {
				return ssENDisciplinary;
			} else if (key == IdDisciplinaryType) {
				return ssENDisciplinaryType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENDisciplinary.FillFromOther((IRecord) other.AttributeGet(IdDisciplinary));
			ssENDisciplinaryType.FillFromOther((IRecord) other.AttributeGet(IdDisciplinaryType));
		}
	} // RCStudentUserDisciplinaryDisciplinaryTypeRecord
	/// <summary>
	/// Structure <code>RCGroupStudent_GroupStudentRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupStudent_GroupStudentRecord: ISerializable, ITypedRecord<RCGroupStudent_GroupStudentRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;

		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;


		public BitArray OptimizedAttributes;

		public RCGroupStudent_GroupStudentRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(9, false);
			all[2] = new BitArray(27, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENStudent_Group.OptimizedAttributes = value[1];
					ssENStudent.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENStudent_Group.OptimizedAttributes;
				all[2] = ssENStudent.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENStudent_Group.Read(r, ref index);
			ssENStudent.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupStudent_GroupStudentRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupStudent_GroupStudentRecord a, RCGroupStudent_GroupStudentRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			if (a.ssENStudent != b.ssENStudent) return false;
			return true;
		}

		public static bool operator != (RCGroupStudent_GroupStudentRecord a, RCGroupStudent_GroupStudentRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupStudent_GroupStudentRecord)) return false;
			return (this == (RCGroupStudent_GroupStudentRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				^ ssENStudent.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupStudent_GroupStudentRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENStudent_Group.RecursiveReset();
			ssENStudent.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENStudent_Group.InternalRecursiveSave();
			ssENStudent.InternalRecursiveSave();
		}


		public RCGroupStudent_GroupStudentRecord Duplicate() {
			RCGroupStudent_GroupStudentRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else if (key == IdStudent) {
				return ssENStudent;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
		}
	} // RCGroupStudent_GroupStudentRecord
	/// <summary>
	/// Structure <code>RCDocumentsDisciplinaryDisciplinaryDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCDocumentsDisciplinaryDisciplinaryDocumentsRecord: ISerializable, ITypedRecord<RCDocumentsDisciplinaryDisciplinaryDocumentsRecord> {
		private static readonly GlobalObjectKey IdDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*V+rMCyDoxxgjgWOZC2i4yw");
		private static readonly GlobalObjectKey IdDisciplinary = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*uPt8Pj187p4cYWjLev+HKw");
		private static readonly GlobalObjectKey IdDisciplinaryDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*JiPCi9uH0iiAiZkAFfMnTw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Documents")]
		public ENDocumentsEntityRecord ssENDocuments;

		[System.Xml.Serialization.XmlElement("Disciplinary")]
		public ENDisciplinaryEntityRecord ssENDisciplinary;

		[System.Xml.Serialization.XmlElement("DisciplinaryDocuments")]
		public ENDisciplinaryDocumentsEntityRecord ssENDisciplinaryDocuments;


		public BitArray OptimizedAttributes;

		public RCDocumentsDisciplinaryDisciplinaryDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENDocuments = new ENDocumentsEntityRecord(null);
			ssENDisciplinary = new ENDisciplinaryEntityRecord(null);
			ssENDisciplinaryDocuments = new ENDisciplinaryDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(7, false);
			all[1] = new BitArray(6, false);
			all[2] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENDisciplinary.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENDisciplinaryDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENDocuments.OptimizedAttributes = value[0];
					ssENDisciplinary.OptimizedAttributes = value[1];
					ssENDisciplinaryDocuments.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENDocuments.OptimizedAttributes;
				all[1] = ssENDisciplinary.OptimizedAttributes;
				all[2] = ssENDisciplinaryDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENDocuments.Read(r, ref index);
			ssENDisciplinary.Read(r, ref index);
			ssENDisciplinaryDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCDocumentsDisciplinaryDisciplinaryDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCDocumentsDisciplinaryDisciplinaryDocumentsRecord a, RCDocumentsDisciplinaryDisciplinaryDocumentsRecord b) {
			if (a.ssENDocuments != b.ssENDocuments) return false;
			if (a.ssENDisciplinary != b.ssENDisciplinary) return false;
			if (a.ssENDisciplinaryDocuments != b.ssENDisciplinaryDocuments) return false;
			return true;
		}

		public static bool operator != (RCDocumentsDisciplinaryDisciplinaryDocumentsRecord a, RCDocumentsDisciplinaryDisciplinaryDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCDocumentsDisciplinaryDisciplinaryDocumentsRecord)) return false;
			return (this == (RCDocumentsDisciplinaryDisciplinaryDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENDocuments.GetHashCode()
				^ ssENDisciplinary.GetHashCode()
				^ ssENDisciplinaryDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCDocumentsDisciplinaryDisciplinaryDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENDocuments = new ENDocumentsEntityRecord(null);
			ssENDisciplinary = new ENDisciplinaryEntityRecord(null);
			ssENDisciplinaryDocuments = new ENDisciplinaryDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENDocuments = (ENDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENDisciplinary = (ENDisciplinaryEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENDisciplinaryDocuments = (ENDisciplinaryDocumentsEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENDocuments.RecursiveReset();
			ssENDisciplinary.RecursiveReset();
			ssENDisciplinaryDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENDocuments.InternalRecursiveSave();
			ssENDisciplinary.InternalRecursiveSave();
			ssENDisciplinaryDocuments.InternalRecursiveSave();
		}


		public RCDocumentsDisciplinaryDisciplinaryDocumentsRecord Duplicate() {
			RCDocumentsDisciplinaryDisciplinaryDocumentsRecord t;
			t.ssENDocuments = (ENDocumentsEntityRecord) this.ssENDocuments.Duplicate();
			t.ssENDisciplinary = (ENDisciplinaryEntityRecord) this.ssENDisciplinary.Duplicate();
			t.ssENDisciplinaryDocuments = (ENDisciplinaryDocumentsEntityRecord) this.ssENDisciplinaryDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENDocuments.ToXml(this, recordElem, "Documents", detailLevel - 1);
				ssENDisciplinary.ToXml(this, recordElem, "Disciplinary", detailLevel - 1);
				ssENDisciplinaryDocuments.ToXml(this, recordElem, "DisciplinaryDocuments", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "documents") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Documents")) variable.Value = ssENDocuments; else variable.Optimized = true;
				variable.SetFieldName("documents");
			} else if (head == "disciplinary") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Disciplinary")) variable.Value = ssENDisciplinary; else variable.Optimized = true;
				variable.SetFieldName("disciplinary");
			} else if (head == "disciplinarydocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DisciplinaryDocuments")) variable.Value = ssENDisciplinaryDocuments; else variable.Optimized = true;
				variable.SetFieldName("disciplinarydocuments");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDocuments) {
				return ssENDocuments;
			} else if (key == IdDisciplinary) {
				return ssENDisciplinary;
			} else if (key == IdDisciplinaryDocuments) {
				return ssENDisciplinaryDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENDocuments.FillFromOther((IRecord) other.AttributeGet(IdDocuments));
			ssENDisciplinary.FillFromOther((IRecord) other.AttributeGet(IdDisciplinary));
			ssENDisciplinaryDocuments.FillFromOther((IRecord) other.AttributeGet(IdDisciplinaryDocuments));
		}
	} // RCDocumentsDisciplinaryDisciplinaryDocumentsRecord
	/// <summary>
	/// Structure <code>RCTargetTargetStatusRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTargetTargetStatusRecord: ISerializable, ITypedRecord<RCTargetTargetStatusRecord> {
		private static readonly GlobalObjectKey IdTarget = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*t3qfNkN0E4nmQK_NGFBTGw");
		private static readonly GlobalObjectKey IdTargetStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NM7jinYNANDuvBkwxohD0Q");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Target")]
		public ENTargetEntityRecord ssENTarget;

		[System.Xml.Serialization.XmlElement("TargetStatus")]
		public ENTargetStatusEntityRecord ssENTargetStatus;


		public BitArray OptimizedAttributes;

		public RCTargetTargetStatusRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENTarget = new ENTargetEntityRecord(null);
			ssENTargetStatus = new ENTargetStatusEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(17, false);
			all[1] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENTarget.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENTargetStatus.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENTarget.OptimizedAttributes = value[0];
					ssENTargetStatus.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENTarget.OptimizedAttributes;
				all[1] = ssENTargetStatus.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENTarget.Read(r, ref index);
			ssENTargetStatus.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTargetTargetStatusRecord r) {
			this = r;
		}


		public static bool operator == (RCTargetTargetStatusRecord a, RCTargetTargetStatusRecord b) {
			if (a.ssENTarget != b.ssENTarget) return false;
			if (a.ssENTargetStatus != b.ssENTargetStatus) return false;
			return true;
		}

		public static bool operator != (RCTargetTargetStatusRecord a, RCTargetTargetStatusRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTargetTargetStatusRecord)) return false;
			return (this == (RCTargetTargetStatusRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENTarget.GetHashCode()
				^ ssENTargetStatus.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTargetTargetStatusRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENTarget = new ENTargetEntityRecord(null);
			ssENTargetStatus = new ENTargetStatusEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENTarget = (ENTargetEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENTargetStatus = (ENTargetStatusEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENTarget.RecursiveReset();
			ssENTargetStatus.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENTarget.InternalRecursiveSave();
			ssENTargetStatus.InternalRecursiveSave();
		}


		public RCTargetTargetStatusRecord Duplicate() {
			RCTargetTargetStatusRecord t;
			t.ssENTarget = (ENTargetEntityRecord) this.ssENTarget.Duplicate();
			t.ssENTargetStatus = (ENTargetStatusEntityRecord) this.ssENTargetStatus.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENTarget.ToXml(this, recordElem, "Target", detailLevel - 1);
				ssENTargetStatus.ToXml(this, recordElem, "TargetStatus", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "target") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Target")) variable.Value = ssENTarget; else variable.Optimized = true;
				variable.SetFieldName("target");
			} else if (head == "targetstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetStatus")) variable.Value = ssENTargetStatus; else variable.Optimized = true;
				variable.SetFieldName("targetstatus");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTarget) {
				return ssENTarget;
			} else if (key == IdTargetStatus) {
				return ssENTargetStatus;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENTarget.FillFromOther((IRecord) other.AttributeGet(IdTarget));
			ssENTargetStatus.FillFromOther((IRecord) other.AttributeGet(IdTargetStatus));
		}
	} // RCTargetTargetStatusRecord
	/// <summary>
	/// Structure <code>RCStudent_GroupUserStaffCourseFavouriteRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudent_GroupUserStaffCourseFavouriteRecord: ISerializable, ITypedRecord<RCStudent_GroupUserStaffCourseFavouriteRecord> {
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStaffCourseFavourite = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*n7iwQiLcEqnR7YBOLpeK1A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StaffCourseFavourite")]
		public ENStaffCourseFavouriteEntityRecord ssENStaffCourseFavourite;


		public BitArray OptimizedAttributes;

		public RCStudent_GroupUserStaffCourseFavouriteRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENStaffCourseFavourite = new ENStaffCourseFavouriteEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStaffCourseFavourite.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENStudent_Group.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENStaffCourseFavourite.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENStudent_Group.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENStaffCourseFavourite.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent_Group.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENStaffCourseFavourite.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudent_GroupUserStaffCourseFavouriteRecord r) {
			this = r;
		}


		public static bool operator == (RCStudent_GroupUserStaffCourseFavouriteRecord a, RCStudent_GroupUserStaffCourseFavouriteRecord b) {
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStaffCourseFavourite != b.ssENStaffCourseFavourite) return false;
			return true;
		}

		public static bool operator != (RCStudent_GroupUserStaffCourseFavouriteRecord a, RCStudent_GroupUserStaffCourseFavouriteRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudent_GroupUserStaffCourseFavouriteRecord)) return false;
			return (this == (RCStudent_GroupUserStaffCourseFavouriteRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStaffCourseFavourite.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudent_GroupUserStaffCourseFavouriteRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENStaffCourseFavourite = new ENStaffCourseFavouriteEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStaffCourseFavourite = (ENStaffCourseFavouriteEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent_Group.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENStaffCourseFavourite.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent_Group.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENStaffCourseFavourite.InternalRecursiveSave();
		}


		public RCStudent_GroupUserStaffCourseFavouriteRecord Duplicate() {
			RCStudent_GroupUserStaffCourseFavouriteRecord t;
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStaffCourseFavourite = (ENStaffCourseFavouriteEntityRecord) this.ssENStaffCourseFavourite.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStaffCourseFavourite.ToXml(this, recordElem, "StaffCourseFavourite", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "staffcoursefavourite") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffCourseFavourite")) variable.Value = ssENStaffCourseFavourite; else variable.Optimized = true;
				variable.SetFieldName("staffcoursefavourite");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStaffCourseFavourite) {
				return ssENStaffCourseFavourite;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStaffCourseFavourite.FillFromOther((IRecord) other.AttributeGet(IdStaffCourseFavourite));
		}
	} // RCStudent_GroupUserStaffCourseFavouriteRecord
	/// <summary>
	/// Structure <code>RCStudentStringStringStringStudentCategoryRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentStringStringStringStudentCategoryRAGRecord: ISerializable, ITypedRecord<RCStudentStringStringStringStudentCategoryRAGRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdString = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5ltnC1EjdYReiJ9edGCgRA");
		private static readonly GlobalObjectKey IdString_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*PUNfB+DKv5tYvp534Va69w");
		private static readonly GlobalObjectKey IdString_3 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Vm9f8T2iqz1fcq478ZmJyw");
		private static readonly GlobalObjectKey IdStudentCategoryRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ST8QIZ08_7yz1mT7xO_vSw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("String")]
		public STStringStructure ssSTString;

		[System.Xml.Serialization.XmlElement("String_2")]
		public STStringStructure ssSTString_2;

		[System.Xml.Serialization.XmlElement("String_3")]
		public STStringStructure ssSTString_3;

		[System.Xml.Serialization.XmlElement("StudentCategoryRAG")]
		public ENStudentCategoryRAGEntityRecord ssENStudentCategoryRAG;


		public BitArray OptimizedAttributes;

		public RCStudentStringStringStringStudentCategoryRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssSTString = new STStringStructure(null);
			ssSTString_2 = new STStringStructure(null);
			ssSTString_3 = new STStringStructure(null);
			ssENStudentCategoryRAG = new ENStudentCategoryRAGEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(27, false);
			all[1] = null;
			all[2] = null;
			all[3] = null;
			all[4] = new BitArray(12, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentCategoryRAG.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssSTString.OptimizedAttributes = value[1];
					ssSTString_2.OptimizedAttributes = value[2];
					ssSTString_3.OptimizedAttributes = value[3];
					ssENStudentCategoryRAG.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = null;
				all[2] = null;
				all[3] = null;
				all[4] = ssENStudentCategoryRAG.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssSTString.Read(r, ref index);
			ssSTString_2.Read(r, ref index);
			ssSTString_3.Read(r, ref index);
			ssENStudentCategoryRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentStringStringStringStudentCategoryRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentStringStringStringStudentCategoryRAGRecord a, RCStudentStringStringStringStudentCategoryRAGRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssSTString != b.ssSTString) return false;
			if (a.ssSTString_2 != b.ssSTString_2) return false;
			if (a.ssSTString_3 != b.ssSTString_3) return false;
			if (a.ssENStudentCategoryRAG != b.ssENStudentCategoryRAG) return false;
			return true;
		}

		public static bool operator != (RCStudentStringStringStringStudentCategoryRAGRecord a, RCStudentStringStringStringStudentCategoryRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentStringStringStringStudentCategoryRAGRecord)) return false;
			return (this == (RCStudentStringStringStringStudentCategoryRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssSTString.GetHashCode()
				^ ssSTString_2.GetHashCode()
				^ ssSTString_3.GetHashCode()
				^ ssENStudentCategoryRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentStringStringStringStudentCategoryRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssSTString = new STStringStructure(null);
			ssSTString_2 = new STStringStructure(null);
			ssSTString_3 = new STStringStructure(null);
			ssENStudentCategoryRAG = new ENStudentCategoryRAGEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTString = (STStringStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTString_2 = (STStringStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssSTString_3 = (STStringStructure) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENStudentCategoryRAG = (ENStudentCategoryRAGEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssSTString.RecursiveReset();
			ssSTString_2.RecursiveReset();
			ssSTString_3.RecursiveReset();
			ssENStudentCategoryRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssSTString.InternalRecursiveSave();
			ssSTString_2.InternalRecursiveSave();
			ssSTString_3.InternalRecursiveSave();
			ssENStudentCategoryRAG.InternalRecursiveSave();
		}


		public RCStudentStringStringStringStudentCategoryRAGRecord Duplicate() {
			RCStudentStringStringStringStudentCategoryRAGRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssSTString = (STStringStructure) this.ssSTString.Duplicate();
			t.ssSTString_2 = (STStringStructure) this.ssSTString_2.Duplicate();
			t.ssSTString_3 = (STStringStructure) this.ssSTString_3.Duplicate();
			t.ssENStudentCategoryRAG = (ENStudentCategoryRAGEntityRecord) this.ssENStudentCategoryRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssSTString.ToXml(this, recordElem, "String", detailLevel - 1);
				ssSTString_2.ToXml(this, recordElem, "String_2", detailLevel - 1);
				ssSTString_3.ToXml(this, recordElem, "String_3", detailLevel - 1);
				ssENStudentCategoryRAG.ToXml(this, recordElem, "StudentCategoryRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "string") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String")) variable.Value = ssSTString; else variable.Optimized = true;
				variable.SetFieldName("string");
			} else if (head == "string_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String_2")) variable.Value = ssSTString_2; else variable.Optimized = true;
				variable.SetFieldName("string_2");
			} else if (head == "string_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String_3")) variable.Value = ssSTString_3; else variable.Optimized = true;
				variable.SetFieldName("string_3");
			} else if (head == "studentcategoryrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCategoryRAG")) variable.Value = ssENStudentCategoryRAG; else variable.Optimized = true;
				variable.SetFieldName("studentcategoryrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdString) {
				return ssSTString;
			} else if (key == IdString_2) {
				return ssSTString_2;
			} else if (key == IdString_3) {
				return ssSTString_3;
			} else if (key == IdStudentCategoryRAG) {
				return ssENStudentCategoryRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssSTString.FillFromOther((IRecord) other.AttributeGet(IdString));
			ssSTString_2.FillFromOther((IRecord) other.AttributeGet(IdString_2));
			ssSTString_3.FillFromOther((IRecord) other.AttributeGet(IdString_3));
			ssENStudentCategoryRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentCategoryRAG));
		}
	} // RCStudentStringStringStringStudentCategoryRAGRecord
	/// <summary>
	/// Structure <code>RCGroupStudent_GroupStudentStudentRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupStudent_GroupStudentStudentRAGRecord: ISerializable, ITypedRecord<RCGroupStudent_GroupStudentStudentRAGRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*APBh_wXtPfFnwTyOabB9Vg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;

		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public ENStudentRAGEntityRecord ssENStudentRAG;


		public BitArray OptimizedAttributes;

		public RCGroupStudent_GroupStudentStudentRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(9, false);
			all[2] = new BitArray(27, false);
			all[3] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENStudentRAG.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENStudent_Group.OptimizedAttributes = value[1];
					ssENStudent.OptimizedAttributes = value[2];
					ssENStudentRAG.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENStudent_Group.OptimizedAttributes;
				all[2] = ssENStudent.OptimizedAttributes;
				all[3] = ssENStudentRAG.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENStudent_Group.Read(r, ref index);
			ssENStudent.Read(r, ref index);
			ssENStudentRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupStudent_GroupStudentStudentRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupStudent_GroupStudentStudentRAGRecord a, RCGroupStudent_GroupStudentStudentRAGRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENStudentRAG != b.ssENStudentRAG) return false;
			return true;
		}

		public static bool operator != (RCGroupStudent_GroupStudentStudentRAGRecord a, RCGroupStudent_GroupStudentStudentRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupStudent_GroupStudentStudentRAGRecord)) return false;
			return (this == (RCGroupStudent_GroupStudentStudentRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENStudentRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupStudent_GroupStudentStudentRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENStudentRAG = (ENStudentRAGEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENStudent_Group.RecursiveReset();
			ssENStudent.RecursiveReset();
			ssENStudentRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENStudent_Group.InternalRecursiveSave();
			ssENStudent.InternalRecursiveSave();
			ssENStudentRAG.InternalRecursiveSave();
		}


		public RCGroupStudent_GroupStudentStudentRAGRecord Duplicate() {
			RCGroupStudent_GroupStudentStudentRAGRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENStudentRAG = (ENStudentRAGEntityRecord) this.ssENStudentRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENStudentRAG.ToXml(this, recordElem, "StudentRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssENStudentRAG; else variable.Optimized = true;
				variable.SetFieldName("studentrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdStudentRAG) {
				return ssENStudentRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENStudentRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentRAG));
		}
	} // RCGroupStudent_GroupStudentStudentRAGRecord
	/// <summary>
	/// Structure <code>RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord: ISerializable, ITypedRecord<RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentPENPortrait = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*h1TXKO+_BNDVxRwTv3P9UQ");
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*APBh_wXtPfFnwTyOabB9Vg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;

		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentPENPortrait")]
		public ENStudentPENPortraitEntityRecord ssENStudentPENPortrait;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public ENStudentRAGEntityRecord ssENStudentRAG;


		public BitArray OptimizedAttributes;

		public RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentPENPortrait = new ENStudentPENPortraitEntityRecord(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[6];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(9, false);
			all[2] = new BitArray(27, false);
			all[3] = new BitArray(11, false);
			all[4] = new BitArray(5, false);
			all[5] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENStudentPENPortrait.OptimizedAttributes = GetDefaultOptimizedValues()[4];
					ssENStudentRAG.OptimizedAttributes = GetDefaultOptimizedValues()[5];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENStudent_Group.OptimizedAttributes = value[1];
					ssENStudent.OptimizedAttributes = value[2];
					ssENUser.OptimizedAttributes = value[3];
					ssENStudentPENPortrait.OptimizedAttributes = value[4];
					ssENStudentRAG.OptimizedAttributes = value[5];
				}
			}
			get {
				BitArray[] all = new BitArray[6];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENStudent_Group.OptimizedAttributes;
				all[2] = ssENStudent.OptimizedAttributes;
				all[3] = ssENUser.OptimizedAttributes;
				all[4] = ssENStudentPENPortrait.OptimizedAttributes;
				all[5] = ssENStudentRAG.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENStudent_Group.Read(r, ref index);
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENStudentPENPortrait.Read(r, ref index);
			ssENStudentRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord a, RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentPENPortrait != b.ssENStudentPENPortrait) return false;
			if (a.ssENStudentRAG != b.ssENStudentRAG) return false;
			return true;
		}

		public static bool operator != (RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord a, RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord)) return false;
			return (this == (RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentPENPortrait.GetHashCode()
				^ ssENStudentRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentPENPortrait = new ENStudentPENPortraitEntityRecord(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENStudentPENPortrait = (ENStudentPENPortraitEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssENStudentRAG = (ENStudentRAGEntityRecord) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENStudent_Group.RecursiveReset();
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENStudentPENPortrait.RecursiveReset();
			ssENStudentRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENStudent_Group.InternalRecursiveSave();
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENStudentPENPortrait.InternalRecursiveSave();
			ssENStudentRAG.InternalRecursiveSave();
		}


		public RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord Duplicate() {
			RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentPENPortrait = (ENStudentPENPortraitEntityRecord) this.ssENStudentPENPortrait.Duplicate();
			t.ssENStudentRAG = (ENStudentRAGEntityRecord) this.ssENStudentRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentPENPortrait.ToXml(this, recordElem, "StudentPENPortrait", detailLevel - 1);
				ssENStudentRAG.ToXml(this, recordElem, "StudentRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentpenportrait") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentPENPortrait")) variable.Value = ssENStudentPENPortrait; else variable.Optimized = true;
				variable.SetFieldName("studentpenportrait");
			} else if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssENStudentRAG; else variable.Optimized = true;
				variable.SetFieldName("studentrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentPENPortrait) {
				return ssENStudentPENPortrait;
			} else if (key == IdStudentRAG) {
				return ssENStudentRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentPENPortrait.FillFromOther((IRecord) other.AttributeGet(IdStudentPENPortrait));
			ssENStudentRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentRAG));
		}
	} // RCGroupStudent_GroupStudentUserStudentPENPortraitStudentRAGRecord
	/// <summary>
	/// Structure <code>RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord: ISerializable, ITypedRecord<RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdSelectAction = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*z8X7z66tTmSEgc8sS62VzA");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*APBh_wXtPfFnwTyOabB9Vg");
		private static readonly GlobalObjectKey IdStaffStudentFavourite = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*GJmXu+NTwwxhu3PRpD_28A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("SelectAction")]
		public STSelectActionStructure ssSTSelectAction;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public ENStudentRAGEntityRecord ssENStudentRAG;

		[System.Xml.Serialization.XmlElement("StaffStudentFavourite")]
		public ENStaffStudentFavouriteEntityRecord ssENStaffStudentFavourite;


		public BitArray OptimizedAttributes;

		public RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssSTSelectAction = new STSelectActionStructure(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
			ssENStaffStudentFavourite = new ENStaffStudentFavouriteEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(27, false);
			all[1] = null;
			all[2] = null;
			all[3] = new BitArray(5, false);
			all[4] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentRAG.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENStaffStudentFavourite.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssSTSelectAction.OptimizedAttributes = value[1];
					ssSTBoolean.OptimizedAttributes = value[2];
					ssENStudentRAG.OptimizedAttributes = value[3];
					ssENStaffStudentFavourite.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = null;
				all[2] = null;
				all[3] = ssENStudentRAG.OptimizedAttributes;
				all[4] = ssENStaffStudentFavourite.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssSTSelectAction.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
			ssENStudentRAG.Read(r, ref index);
			ssENStaffStudentFavourite.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord a, RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssSTSelectAction != b.ssSTSelectAction) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			if (a.ssENStudentRAG != b.ssENStudentRAG) return false;
			if (a.ssENStaffStudentFavourite != b.ssENStaffStudentFavourite) return false;
			return true;
		}

		public static bool operator != (RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord a, RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord)) return false;
			return (this == (RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssSTSelectAction.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				^ ssENStudentRAG.GetHashCode()
				^ ssENStaffStudentFavourite.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssSTSelectAction = new STSelectActionStructure(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
			ssENStaffStudentFavourite = new ENStaffStudentFavouriteEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTSelectAction = (STSelectActionStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENStudentRAG = (ENStudentRAGEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENStaffStudentFavourite = (ENStaffStudentFavouriteEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssSTSelectAction.RecursiveReset();
			ssSTBoolean.RecursiveReset();
			ssENStudentRAG.RecursiveReset();
			ssENStaffStudentFavourite.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssSTSelectAction.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
			ssENStudentRAG.InternalRecursiveSave();
			ssENStaffStudentFavourite.InternalRecursiveSave();
		}


		public RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord Duplicate() {
			RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssSTSelectAction = (STSelectActionStructure) this.ssSTSelectAction.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.ssENStudentRAG = (ENStudentRAGEntityRecord) this.ssENStudentRAG.Duplicate();
			t.ssENStaffStudentFavourite = (ENStaffStudentFavouriteEntityRecord) this.ssENStaffStudentFavourite.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssSTSelectAction.ToXml(this, recordElem, "SelectAction", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
				ssENStudentRAG.ToXml(this, recordElem, "StudentRAG", detailLevel - 1);
				ssENStaffStudentFavourite.ToXml(this, recordElem, "StaffStudentFavourite", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "selectaction") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SelectAction")) variable.Value = ssSTSelectAction; else variable.Optimized = true;
				variable.SetFieldName("selectaction");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			} else if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssENStudentRAG; else variable.Optimized = true;
				variable.SetFieldName("studentrag");
			} else if (head == "staffstudentfavourite") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffStudentFavourite")) variable.Value = ssENStaffStudentFavourite; else variable.Optimized = true;
				variable.SetFieldName("staffstudentfavourite");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdSelectAction) {
				return ssSTSelectAction;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else if (key == IdStudentRAG) {
				return ssENStudentRAG;
			} else if (key == IdStaffStudentFavourite) {
				return ssENStaffStudentFavourite;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssSTSelectAction.FillFromOther((IRecord) other.AttributeGet(IdSelectAction));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
			ssENStudentRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentRAG));
			ssENStaffStudentFavourite.FillFromOther((IRecord) other.AttributeGet(IdStaffStudentFavourite));
		}
	} // RCStudentSelectActionBooleanStudentRAGStaffStudentFavouriteRecord
	/// <summary>
	/// Structure <code>RCUserTutorialRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserTutorialRecord: ISerializable, ITypedRecord<RCUserTutorialRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdTutorial = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*jjL5qchnHXDZNDKMczAP7w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Tutorial")]
		public ENTutorialEntityRecord ssENTutorial;


		public BitArray OptimizedAttributes;

		public RCUserTutorialRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENTutorial = new ENTutorialEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENTutorial.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENTutorial.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENTutorial.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENTutorial.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserTutorialRecord r) {
			this = r;
		}


		public static bool operator == (RCUserTutorialRecord a, RCUserTutorialRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENTutorial != b.ssENTutorial) return false;
			return true;
		}

		public static bool operator != (RCUserTutorialRecord a, RCUserTutorialRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserTutorialRecord)) return false;
			return (this == (RCUserTutorialRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENTutorial.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserTutorialRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENTutorial = new ENTutorialEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENTutorial = (ENTutorialEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENTutorial.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENTutorial.InternalRecursiveSave();
		}


		public RCUserTutorialRecord Duplicate() {
			RCUserTutorialRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENTutorial = (ENTutorialEntityRecord) this.ssENTutorial.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENTutorial.ToXml(this, recordElem, "Tutorial", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "tutorial") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Tutorial")) variable.Value = ssENTutorial; else variable.Optimized = true;
				variable.SetFieldName("tutorial");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdTutorial) {
				return ssENTutorial;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENTutorial.FillFromOther((IRecord) other.AttributeGet(IdTutorial));
		}
	} // RCUserTutorialRecord
	/// <summary>
	/// Structure <code>RCSafeguardingIssueSafeguardingIssueTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSafeguardingIssueSafeguardingIssueTypeRecord: ISerializable, ITypedRecord<RCSafeguardingIssueSafeguardingIssueTypeRecord> {
		private static readonly GlobalObjectKey IdSafeguardingIssue = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SAAZcYT_EnM1GejsKShLag");
		private static readonly GlobalObjectKey IdSafeguardingIssueType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*XqQ7dChktoD2+fflQpDEeA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SafeguardingIssue")]
		public ENSafeguardingIssueEntityRecord ssENSafeguardingIssue;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueType")]
		public ENSafeguardingIssueTypeEntityRecord ssENSafeguardingIssueType;


		public BitArray OptimizedAttributes;

		public RCSafeguardingIssueSafeguardingIssueTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			ssENSafeguardingIssueType = new ENSafeguardingIssueTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(18, false);
			all[1] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSafeguardingIssue.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENSafeguardingIssueType.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENSafeguardingIssue.OptimizedAttributes = value[0];
					ssENSafeguardingIssueType.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENSafeguardingIssue.OptimizedAttributes;
				all[1] = ssENSafeguardingIssueType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSafeguardingIssue.Read(r, ref index);
			ssENSafeguardingIssueType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSafeguardingIssueSafeguardingIssueTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCSafeguardingIssueSafeguardingIssueTypeRecord a, RCSafeguardingIssueSafeguardingIssueTypeRecord b) {
			if (a.ssENSafeguardingIssue != b.ssENSafeguardingIssue) return false;
			if (a.ssENSafeguardingIssueType != b.ssENSafeguardingIssueType) return false;
			return true;
		}

		public static bool operator != (RCSafeguardingIssueSafeguardingIssueTypeRecord a, RCSafeguardingIssueSafeguardingIssueTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSafeguardingIssueSafeguardingIssueTypeRecord)) return false;
			return (this == (RCSafeguardingIssueSafeguardingIssueTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSafeguardingIssue.GetHashCode()
				^ ssENSafeguardingIssueType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSafeguardingIssueSafeguardingIssueTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			ssENSafeguardingIssueType = new ENSafeguardingIssueTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENSafeguardingIssueType = (ENSafeguardingIssueTypeEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENSafeguardingIssue.RecursiveReset();
			ssENSafeguardingIssueType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSafeguardingIssue.InternalRecursiveSave();
			ssENSafeguardingIssueType.InternalRecursiveSave();
		}


		public RCSafeguardingIssueSafeguardingIssueTypeRecord Duplicate() {
			RCSafeguardingIssueSafeguardingIssueTypeRecord t;
			t.ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) this.ssENSafeguardingIssue.Duplicate();
			t.ssENSafeguardingIssueType = (ENSafeguardingIssueTypeEntityRecord) this.ssENSafeguardingIssueType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSafeguardingIssue.ToXml(this, recordElem, "SafeguardingIssue", detailLevel - 1);
				ssENSafeguardingIssueType.ToXml(this, recordElem, "SafeguardingIssueType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "safeguardingissue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssue")) variable.Value = ssENSafeguardingIssue; else variable.Optimized = true;
				variable.SetFieldName("safeguardingissue");
			} else if (head == "safeguardingissuetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssueType")) variable.Value = ssENSafeguardingIssueType; else variable.Optimized = true;
				variable.SetFieldName("safeguardingissuetype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSafeguardingIssue) {
				return ssENSafeguardingIssue;
			} else if (key == IdSafeguardingIssueType) {
				return ssENSafeguardingIssueType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSafeguardingIssue.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingIssue));
			ssENSafeguardingIssueType.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingIssueType));
		}
	} // RCSafeguardingIssueSafeguardingIssueTypeRecord
	/// <summary>
	/// Structure <code>RCTargetTypeTargetBooleanRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTargetTypeTargetBooleanRecord: ISerializable, ITypedRecord<RCTargetTypeTargetBooleanRecord> {
		private static readonly GlobalObjectKey IdTargetType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*T6JNzkEfecx998+9fAD+0g");
		private static readonly GlobalObjectKey IdTarget = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*t3qfNkN0E4nmQK_NGFBTGw");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("TargetType")]
		public ENTargetTypeEntityRecord ssENTargetType;

		[System.Xml.Serialization.XmlElement("Target")]
		public ENTargetEntityRecord ssENTarget;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;


		public BitArray OptimizedAttributes;

		public RCTargetTypeTargetBooleanRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENTargetType = new ENTargetTypeEntityRecord(null);
			ssENTarget = new ENTargetEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(4, false);
			all[1] = new BitArray(17, false);
			all[2] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENTargetType.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENTarget.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENTargetType.OptimizedAttributes = value[0];
					ssENTarget.OptimizedAttributes = value[1];
					ssSTBoolean.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENTargetType.OptimizedAttributes;
				all[1] = ssENTarget.OptimizedAttributes;
				all[2] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENTargetType.Read(r, ref index);
			ssENTarget.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTargetTypeTargetBooleanRecord r) {
			this = r;
		}


		public static bool operator == (RCTargetTypeTargetBooleanRecord a, RCTargetTypeTargetBooleanRecord b) {
			if (a.ssENTargetType != b.ssENTargetType) return false;
			if (a.ssENTarget != b.ssENTarget) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			return true;
		}

		public static bool operator != (RCTargetTypeTargetBooleanRecord a, RCTargetTypeTargetBooleanRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTargetTypeTargetBooleanRecord)) return false;
			return (this == (RCTargetTypeTargetBooleanRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENTargetType.GetHashCode()
				^ ssENTarget.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTargetTypeTargetBooleanRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENTargetType = new ENTargetTypeEntityRecord(null);
			ssENTarget = new ENTargetEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENTargetType = (ENTargetTypeEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENTarget = (ENTargetEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENTargetType.RecursiveReset();
			ssENTarget.RecursiveReset();
			ssSTBoolean.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENTargetType.InternalRecursiveSave();
			ssENTarget.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
		}


		public RCTargetTypeTargetBooleanRecord Duplicate() {
			RCTargetTypeTargetBooleanRecord t;
			t.ssENTargetType = (ENTargetTypeEntityRecord) this.ssENTargetType.Duplicate();
			t.ssENTarget = (ENTargetEntityRecord) this.ssENTarget.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENTargetType.ToXml(this, recordElem, "TargetType", detailLevel - 1);
				ssENTarget.ToXml(this, recordElem, "Target", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "targettype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetType")) variable.Value = ssENTargetType; else variable.Optimized = true;
				variable.SetFieldName("targettype");
			} else if (head == "target") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Target")) variable.Value = ssENTarget; else variable.Optimized = true;
				variable.SetFieldName("target");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTargetType) {
				return ssENTargetType;
			} else if (key == IdTarget) {
				return ssENTarget;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENTargetType.FillFromOther((IRecord) other.AttributeGet(IdTargetType));
			ssENTarget.FillFromOther((IRecord) other.AttributeGet(IdTarget));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
		}
	} // RCTargetTypeTargetBooleanRecord
	/// <summary>
	/// Structure <code>RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord: ISerializable, ITypedRecord<RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord> {
		private static readonly GlobalObjectKey IdSafeguardingDocumentsBinary = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*RmsLIgvKUSgdHczuolLLXQ");
		private static readonly GlobalObjectKey IdSafeguardingDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y7QCc2tgUOGI0FORcMW2Zg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SafeguardingDocumentsBinary")]
		public ENSafeguardingDocumentsBinaryEntityRecord ssENSafeguardingDocumentsBinary;

		[System.Xml.Serialization.XmlElement("SafeguardingDocuments")]
		public ENSafeguardingDocumentsEntityRecord ssENSafeguardingDocuments;


		public BitArray OptimizedAttributes;

		public RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSafeguardingDocumentsBinary = new ENSafeguardingDocumentsBinaryEntityRecord(null);
			ssENSafeguardingDocuments = new ENSafeguardingDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(3, false);
			all[1] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSafeguardingDocumentsBinary.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENSafeguardingDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENSafeguardingDocumentsBinary.OptimizedAttributes = value[0];
					ssENSafeguardingDocuments.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENSafeguardingDocumentsBinary.OptimizedAttributes;
				all[1] = ssENSafeguardingDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSafeguardingDocumentsBinary.Read(r, ref index);
			ssENSafeguardingDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord a, RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord b) {
			if (a.ssENSafeguardingDocumentsBinary != b.ssENSafeguardingDocumentsBinary) return false;
			if (a.ssENSafeguardingDocuments != b.ssENSafeguardingDocuments) return false;
			return true;
		}

		public static bool operator != (RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord a, RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord)) return false;
			return (this == (RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSafeguardingDocumentsBinary.GetHashCode()
				^ ssENSafeguardingDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSafeguardingDocumentsBinary = new ENSafeguardingDocumentsBinaryEntityRecord(null);
			ssENSafeguardingDocuments = new ENSafeguardingDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSafeguardingDocumentsBinary = (ENSafeguardingDocumentsBinaryEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENSafeguardingDocuments = (ENSafeguardingDocumentsEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENSafeguardingDocumentsBinary.RecursiveReset();
			ssENSafeguardingDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSafeguardingDocumentsBinary.InternalRecursiveSave();
			ssENSafeguardingDocuments.InternalRecursiveSave();
		}


		public RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord Duplicate() {
			RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord t;
			t.ssENSafeguardingDocumentsBinary = (ENSafeguardingDocumentsBinaryEntityRecord) this.ssENSafeguardingDocumentsBinary.Duplicate();
			t.ssENSafeguardingDocuments = (ENSafeguardingDocumentsEntityRecord) this.ssENSafeguardingDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSafeguardingDocumentsBinary.ToXml(this, recordElem, "SafeguardingDocumentsBinary", detailLevel - 1);
				ssENSafeguardingDocuments.ToXml(this, recordElem, "SafeguardingDocuments", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "safeguardingdocumentsbinary") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingDocumentsBinary")) variable.Value = ssENSafeguardingDocumentsBinary; else variable.Optimized = true;
				variable.SetFieldName("safeguardingdocumentsbinary");
			} else if (head == "safeguardingdocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingDocuments")) variable.Value = ssENSafeguardingDocuments; else variable.Optimized = true;
				variable.SetFieldName("safeguardingdocuments");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSafeguardingDocumentsBinary) {
				return ssENSafeguardingDocumentsBinary;
			} else if (key == IdSafeguardingDocuments) {
				return ssENSafeguardingDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSafeguardingDocumentsBinary.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingDocumentsBinary));
			ssENSafeguardingDocuments.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingDocuments));
		}
	} // RCSafeguardingDocumentsBinarySafeguardingDocumentsRecord
	/// <summary>
	/// Structure <code>RCCurriculumLeadStringStringStringBooleanRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCurriculumLeadStringStringStringBooleanRecord: ISerializable, ITypedRecord<RCCurriculumLeadStringStringStringBooleanRecord> {
		private static readonly GlobalObjectKey IdCurriculumLead = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6tjyPJSHDfWm1VQV9UR5NA");
		private static readonly GlobalObjectKey IdString = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5ltnC1EjdYReiJ9edGCgRA");
		private static readonly GlobalObjectKey IdString_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*PUNfB+DKv5tYvp534Va69w");
		private static readonly GlobalObjectKey IdString_3 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Vm9f8T2iqz1fcq478ZmJyw");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CurriculumLead")]
		public ENCurriculumLeadEntityRecord ssENCurriculumLead;

		[System.Xml.Serialization.XmlElement("String")]
		public STStringStructure ssSTString;

		[System.Xml.Serialization.XmlElement("String_2")]
		public STStringStructure ssSTString_2;

		[System.Xml.Serialization.XmlElement("String_3")]
		public STStringStructure ssSTString_3;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;


		public BitArray OptimizedAttributes;

		public RCCurriculumLeadStringStringStringBooleanRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCurriculumLead = new ENCurriculumLeadEntityRecord(null);
			ssSTString = new STStringStructure(null);
			ssSTString_2 = new STStringStructure(null);
			ssSTString_3 = new STStringStructure(null);
			ssSTBoolean = new STBooleanStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(5, false);
			all[1] = null;
			all[2] = null;
			all[3] = null;
			all[4] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCurriculumLead.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENCurriculumLead.OptimizedAttributes = value[0];
					ssSTString.OptimizedAttributes = value[1];
					ssSTString_2.OptimizedAttributes = value[2];
					ssSTString_3.OptimizedAttributes = value[3];
					ssSTBoolean.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENCurriculumLead.OptimizedAttributes;
				all[1] = null;
				all[2] = null;
				all[3] = null;
				all[4] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCurriculumLead.Read(r, ref index);
			ssSTString.Read(r, ref index);
			ssSTString_2.Read(r, ref index);
			ssSTString_3.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCurriculumLeadStringStringStringBooleanRecord r) {
			this = r;
		}


		public static bool operator == (RCCurriculumLeadStringStringStringBooleanRecord a, RCCurriculumLeadStringStringStringBooleanRecord b) {
			if (a.ssENCurriculumLead != b.ssENCurriculumLead) return false;
			if (a.ssSTString != b.ssSTString) return false;
			if (a.ssSTString_2 != b.ssSTString_2) return false;
			if (a.ssSTString_3 != b.ssSTString_3) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			return true;
		}

		public static bool operator != (RCCurriculumLeadStringStringStringBooleanRecord a, RCCurriculumLeadStringStringStringBooleanRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCurriculumLeadStringStringStringBooleanRecord)) return false;
			return (this == (RCCurriculumLeadStringStringStringBooleanRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCurriculumLead.GetHashCode()
				^ ssSTString.GetHashCode()
				^ ssSTString_2.GetHashCode()
				^ ssSTString_3.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCurriculumLeadStringStringStringBooleanRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCurriculumLead = new ENCurriculumLeadEntityRecord(null);
			ssSTString = new STStringStructure(null);
			ssSTString_2 = new STStringStructure(null);
			ssSTString_3 = new STStringStructure(null);
			ssSTBoolean = new STBooleanStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCurriculumLead = (ENCurriculumLeadEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTString = (STStringStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTString_2 = (STStringStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssSTString_3 = (STStringStructure) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENCurriculumLead.RecursiveReset();
			ssSTString.RecursiveReset();
			ssSTString_2.RecursiveReset();
			ssSTString_3.RecursiveReset();
			ssSTBoolean.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCurriculumLead.InternalRecursiveSave();
			ssSTString.InternalRecursiveSave();
			ssSTString_2.InternalRecursiveSave();
			ssSTString_3.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
		}


		public RCCurriculumLeadStringStringStringBooleanRecord Duplicate() {
			RCCurriculumLeadStringStringStringBooleanRecord t;
			t.ssENCurriculumLead = (ENCurriculumLeadEntityRecord) this.ssENCurriculumLead.Duplicate();
			t.ssSTString = (STStringStructure) this.ssSTString.Duplicate();
			t.ssSTString_2 = (STStringStructure) this.ssSTString_2.Duplicate();
			t.ssSTString_3 = (STStringStructure) this.ssSTString_3.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCurriculumLead.ToXml(this, recordElem, "CurriculumLead", detailLevel - 1);
				ssSTString.ToXml(this, recordElem, "String", detailLevel - 1);
				ssSTString_2.ToXml(this, recordElem, "String_2", detailLevel - 1);
				ssSTString_3.ToXml(this, recordElem, "String_3", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "curriculumlead") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurriculumLead")) variable.Value = ssENCurriculumLead; else variable.Optimized = true;
				variable.SetFieldName("curriculumlead");
			} else if (head == "string") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String")) variable.Value = ssSTString; else variable.Optimized = true;
				variable.SetFieldName("string");
			} else if (head == "string_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String_2")) variable.Value = ssSTString_2; else variable.Optimized = true;
				variable.SetFieldName("string_2");
			} else if (head == "string_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String_3")) variable.Value = ssSTString_3; else variable.Optimized = true;
				variable.SetFieldName("string_3");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCurriculumLead) {
				return ssENCurriculumLead;
			} else if (key == IdString) {
				return ssSTString;
			} else if (key == IdString_2) {
				return ssSTString_2;
			} else if (key == IdString_3) {
				return ssSTString_3;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCurriculumLead.FillFromOther((IRecord) other.AttributeGet(IdCurriculumLead));
			ssSTString.FillFromOther((IRecord) other.AttributeGet(IdString));
			ssSTString_2.FillFromOther((IRecord) other.AttributeGet(IdString_2));
			ssSTString_3.FillFromOther((IRecord) other.AttributeGet(IdString_3));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
		}
	} // RCCurriculumLeadStringStringStringBooleanRecord
	/// <summary>
	/// Structure <code>RCStudentStudentMLWProcessMLWStagesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentStudentMLWProcessMLWStagesRecord: ISerializable, ITypedRecord<RCStudentStudentMLWProcessMLWStagesRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdStudentMLWProcess = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*3+eVxhsd5S23zvvuOTXhCw");
		private static readonly GlobalObjectKey IdMLWStages = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*C8s83aVO1M6A5QcMoEeldg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("StudentMLWProcess")]
		public ENStudentMLWProcessEntityRecord ssENStudentMLWProcess;

		[System.Xml.Serialization.XmlElement("MLWStages")]
		public ENMLWStagesEntityRecord ssENMLWStages;


		public BitArray OptimizedAttributes;

		public RCStudentStudentMLWProcessMLWStagesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENStudentMLWProcess = new ENStudentMLWProcessEntityRecord(null);
			ssENMLWStages = new ENMLWStagesEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(15, false);
			all[2] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentMLWProcess.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENMLWStages.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENStudentMLWProcess.OptimizedAttributes = value[1];
					ssENMLWStages.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENStudentMLWProcess.OptimizedAttributes;
				all[2] = ssENMLWStages.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENStudentMLWProcess.Read(r, ref index);
			ssENMLWStages.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentStudentMLWProcessMLWStagesRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentStudentMLWProcessMLWStagesRecord a, RCStudentStudentMLWProcessMLWStagesRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENStudentMLWProcess != b.ssENStudentMLWProcess) return false;
			if (a.ssENMLWStages != b.ssENMLWStages) return false;
			return true;
		}

		public static bool operator != (RCStudentStudentMLWProcessMLWStagesRecord a, RCStudentStudentMLWProcessMLWStagesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentStudentMLWProcessMLWStagesRecord)) return false;
			return (this == (RCStudentStudentMLWProcessMLWStagesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENStudentMLWProcess.GetHashCode()
				^ ssENMLWStages.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentStudentMLWProcessMLWStagesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENStudentMLWProcess = new ENStudentMLWProcessEntityRecord(null);
			ssENMLWStages = new ENMLWStagesEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentMLWProcess = (ENStudentMLWProcessEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENMLWStages = (ENMLWStagesEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENStudentMLWProcess.RecursiveReset();
			ssENMLWStages.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENStudentMLWProcess.InternalRecursiveSave();
			ssENMLWStages.InternalRecursiveSave();
		}


		public RCStudentStudentMLWProcessMLWStagesRecord Duplicate() {
			RCStudentStudentMLWProcessMLWStagesRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENStudentMLWProcess = (ENStudentMLWProcessEntityRecord) this.ssENStudentMLWProcess.Duplicate();
			t.ssENMLWStages = (ENMLWStagesEntityRecord) this.ssENMLWStages.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENStudentMLWProcess.ToXml(this, recordElem, "StudentMLWProcess", detailLevel - 1);
				ssENMLWStages.ToXml(this, recordElem, "MLWStages", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "studentmlwprocess") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentMLWProcess")) variable.Value = ssENStudentMLWProcess; else variable.Optimized = true;
				variable.SetFieldName("studentmlwprocess");
			} else if (head == "mlwstages") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWStages")) variable.Value = ssENMLWStages; else variable.Optimized = true;
				variable.SetFieldName("mlwstages");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdStudentMLWProcess) {
				return ssENStudentMLWProcess;
			} else if (key == IdMLWStages) {
				return ssENMLWStages;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENStudentMLWProcess.FillFromOther((IRecord) other.AttributeGet(IdStudentMLWProcess));
			ssENMLWStages.FillFromOther((IRecord) other.AttributeGet(IdMLWStages));
		}
	} // RCStudentStudentMLWProcessMLWStagesRecord
	/// <summary>
	/// Structure <code>RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord: ISerializable, ITypedRecord<RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");
		private static readonly GlobalObjectKey IdCauseOfConcernReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QkO97mOJxBzLFMqz+6jENA");
		private static readonly GlobalObjectKey IdCauseOfConcern = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*GX7tbyCb6lMzB7EuQfksTQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;

		[System.Xml.Serialization.XmlElement("CauseOfConcernReason")]
		public ENCauseOfConcernReasonEntityRecord ssENCauseOfConcernReason;

		[System.Xml.Serialization.XmlElement("CauseOfConcern")]
		public ENCauseOfConcernEntityRecord ssENCauseOfConcern;


		public BitArray OptimizedAttributes;

		public RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENCauseOfConcernReason = new ENCauseOfConcernReasonEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = null;
			all[3] = new BitArray(3, false);
			all[4] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENCauseOfConcernReason.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENCauseOfConcern.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssSTBoolean.OptimizedAttributes = value[2];
					ssENCauseOfConcernReason.OptimizedAttributes = value[3];
					ssENCauseOfConcern.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = null;
				all[3] = ssENCauseOfConcernReason.OptimizedAttributes;
				all[4] = ssENCauseOfConcern.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
			ssENCauseOfConcernReason.Read(r, ref index);
			ssENCauseOfConcern.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord a, RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			if (a.ssENCauseOfConcernReason != b.ssENCauseOfConcernReason) return false;
			if (a.ssENCauseOfConcern != b.ssENCauseOfConcern) return false;
			return true;
		}

		public static bool operator != (RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord a, RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord)) return false;
			return (this == (RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				^ ssENCauseOfConcernReason.GetHashCode()
				^ ssENCauseOfConcern.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENCauseOfConcernReason = new ENCauseOfConcernReasonEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENCauseOfConcernReason = (ENCauseOfConcernReasonEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssSTBoolean.RecursiveReset();
			ssENCauseOfConcernReason.RecursiveReset();
			ssENCauseOfConcern.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
			ssENCauseOfConcernReason.InternalRecursiveSave();
			ssENCauseOfConcern.InternalRecursiveSave();
		}


		public RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord Duplicate() {
			RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.ssENCauseOfConcernReason = (ENCauseOfConcernReasonEntityRecord) this.ssENCauseOfConcernReason.Duplicate();
			t.ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) this.ssENCauseOfConcern.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
				ssENCauseOfConcernReason.ToXml(this, recordElem, "CauseOfConcernReason", detailLevel - 1);
				ssENCauseOfConcern.ToXml(this, recordElem, "CauseOfConcern", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			} else if (head == "causeofconcernreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernReason")) variable.Value = ssENCauseOfConcernReason; else variable.Optimized = true;
				variable.SetFieldName("causeofconcernreason");
			} else if (head == "causeofconcern") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcern")) variable.Value = ssENCauseOfConcern; else variable.Optimized = true;
				variable.SetFieldName("causeofconcern");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else if (key == IdCauseOfConcernReason) {
				return ssENCauseOfConcernReason;
			} else if (key == IdCauseOfConcern) {
				return ssENCauseOfConcern;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
			ssENCauseOfConcernReason.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcernReason));
			ssENCauseOfConcern.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcern));
		}
	} // RCStudentUserBooleanCauseOfConcernReasonCauseOfConcernRecord
	/// <summary>
	/// Structure <code>RCStudentUserRAGStatusStudentRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserRAGStatusStudentRAGRecord: ISerializable, ITypedRecord<RCStudentUserRAGStatusStudentRAGRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdRAGStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*24GX8LQ_aRQhomR6Kb4nDw");
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*APBh_wXtPfFnwTyOabB9Vg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("RAGStatus")]
		public ENRAGStatusEntityRecord ssENRAGStatus;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public ENStudentRAGEntityRecord ssENStudentRAG;


		public BitArray OptimizedAttributes;

		public RCStudentUserRAGStatusStudentRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(5, false);
			all[3] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENRAGStatus.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENStudentRAG.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENRAGStatus.OptimizedAttributes = value[2];
					ssENStudentRAG.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENRAGStatus.OptimizedAttributes;
				all[3] = ssENStudentRAG.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENRAGStatus.Read(r, ref index);
			ssENStudentRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserRAGStatusStudentRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserRAGStatusStudentRAGRecord a, RCStudentUserRAGStatusStudentRAGRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENRAGStatus != b.ssENRAGStatus) return false;
			if (a.ssENStudentRAG != b.ssENStudentRAG) return false;
			return true;
		}

		public static bool operator != (RCStudentUserRAGStatusStudentRAGRecord a, RCStudentUserRAGStatusStudentRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserRAGStatusStudentRAGRecord)) return false;
			return (this == (RCStudentUserRAGStatusStudentRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENRAGStatus.GetHashCode()
				^ ssENStudentRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserRAGStatusStudentRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENRAGStatus = (ENRAGStatusEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENStudentRAG = (ENStudentRAGEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENRAGStatus.RecursiveReset();
			ssENStudentRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENRAGStatus.InternalRecursiveSave();
			ssENStudentRAG.InternalRecursiveSave();
		}


		public RCStudentUserRAGStatusStudentRAGRecord Duplicate() {
			RCStudentUserRAGStatusStudentRAGRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENRAGStatus = (ENRAGStatusEntityRecord) this.ssENRAGStatus.Duplicate();
			t.ssENStudentRAG = (ENStudentRAGEntityRecord) this.ssENStudentRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENRAGStatus.ToXml(this, recordElem, "RAGStatus", detailLevel - 1);
				ssENStudentRAG.ToXml(this, recordElem, "StudentRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "ragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatus")) variable.Value = ssENRAGStatus; else variable.Optimized = true;
				variable.SetFieldName("ragstatus");
			} else if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssENStudentRAG; else variable.Optimized = true;
				variable.SetFieldName("studentrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdRAGStatus) {
				return ssENRAGStatus;
			} else if (key == IdStudentRAG) {
				return ssENStudentRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENRAGStatus.FillFromOther((IRecord) other.AttributeGet(IdRAGStatus));
			ssENStudentRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentRAG));
		}
	} // RCStudentUserRAGStatusStudentRAGRecord
	/// <summary>
	/// Structure <code>RCUser_RoleUserRoleRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUser_RoleUserRoleRecord: ISerializable, ITypedRecord<RCUser_RoleUserRoleRecord> {
		private static readonly GlobalObjectKey IdUser_Role = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*YmR_2XimscgdGbPx517Uyw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdRole = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*hAhjEym2paOekp4c3qQusQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User_Role")]
		public ENUser_RoleEntityRecord ssENUser_Role;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Role")]
		public ENRoleEntityRecord ssENRole;


		public BitArray OptimizedAttributes;

		public RCUser_RoleUserRoleRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser_Role = new ENUser_RoleEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENRole = new ENRoleEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(4, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser_Role.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENRole.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENUser_Role.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENRole.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENUser_Role.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENRole.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser_Role.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENRole.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUser_RoleUserRoleRecord r) {
			this = r;
		}


		public static bool operator == (RCUser_RoleUserRoleRecord a, RCUser_RoleUserRoleRecord b) {
			if (a.ssENUser_Role != b.ssENUser_Role) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENRole != b.ssENRole) return false;
			return true;
		}

		public static bool operator != (RCUser_RoleUserRoleRecord a, RCUser_RoleUserRoleRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUser_RoleUserRoleRecord)) return false;
			return (this == (RCUser_RoleUserRoleRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser_Role.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENRole.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUser_RoleUserRoleRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser_Role = new ENUser_RoleEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENRole = new ENRoleEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser_Role = (ENUser_RoleEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENRole = (ENRoleEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser_Role.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENRole.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser_Role.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENRole.InternalRecursiveSave();
		}


		public RCUser_RoleUserRoleRecord Duplicate() {
			RCUser_RoleUserRoleRecord t;
			t.ssENUser_Role = (ENUser_RoleEntityRecord) this.ssENUser_Role.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENRole = (ENRoleEntityRecord) this.ssENRole.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser_Role.ToXml(this, recordElem, "User_Role", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENRole.ToXml(this, recordElem, "Role", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user_role") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_Role")) variable.Value = ssENUser_Role; else variable.Optimized = true;
				variable.SetFieldName("user_role");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "role") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Role")) variable.Value = ssENRole; else variable.Optimized = true;
				variable.SetFieldName("role");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser_Role) {
				return ssENUser_Role;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdRole) {
				return ssENRole;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser_Role.FillFromOther((IRecord) other.AttributeGet(IdUser_Role));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENRole.FillFromOther((IRecord) other.AttributeGet(IdRole));
		}
	} // RCUser_RoleUserRoleRecord
	/// <summary>
	/// Structure <code>RCBooleanAutoComplete_BankRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCBooleanAutoComplete_BankRecord: ISerializable, ITypedRecord<RCBooleanAutoComplete_BankRecord> {
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");
		private static readonly GlobalObjectKey IdAutoComplete_Bank = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*+c0V1X9OFLPiikvKc4Oj_w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;

		[System.Xml.Serialization.XmlElement("AutoComplete_Bank")]
		public ENAutoComplete_BankEntityRecord ssENAutoComplete_Bank;


		public BitArray OptimizedAttributes;

		public RCBooleanAutoComplete_BankRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTBoolean = new STBooleanStructure(null);
			ssENAutoComplete_Bank = new ENAutoComplete_BankEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = null;
			all[1] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENAutoComplete_Bank.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssSTBoolean.OptimizedAttributes = value[0];
					ssENAutoComplete_Bank.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = null;
				all[1] = ssENAutoComplete_Bank.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTBoolean.Read(r, ref index);
			ssENAutoComplete_Bank.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCBooleanAutoComplete_BankRecord r) {
			this = r;
		}


		public static bool operator == (RCBooleanAutoComplete_BankRecord a, RCBooleanAutoComplete_BankRecord b) {
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			if (a.ssENAutoComplete_Bank != b.ssENAutoComplete_Bank) return false;
			return true;
		}

		public static bool operator != (RCBooleanAutoComplete_BankRecord a, RCBooleanAutoComplete_BankRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCBooleanAutoComplete_BankRecord)) return false;
			return (this == (RCBooleanAutoComplete_BankRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				^ ssENAutoComplete_Bank.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCBooleanAutoComplete_BankRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTBoolean = new STBooleanStructure(null);
			ssENAutoComplete_Bank = new ENAutoComplete_BankEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENAutoComplete_Bank = (ENAutoComplete_BankEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssSTBoolean.RecursiveReset();
			ssENAutoComplete_Bank.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTBoolean.InternalRecursiveSave();
			ssENAutoComplete_Bank.InternalRecursiveSave();
		}


		public RCBooleanAutoComplete_BankRecord Duplicate() {
			RCBooleanAutoComplete_BankRecord t;
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.ssENAutoComplete_Bank = (ENAutoComplete_BankEntityRecord) this.ssENAutoComplete_Bank.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
				ssENAutoComplete_Bank.ToXml(this, recordElem, "AutoComplete_Bank", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			} else if (head == "autocomplete_bank") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AutoComplete_Bank")) variable.Value = ssENAutoComplete_Bank; else variable.Optimized = true;
				variable.SetFieldName("autocomplete_bank");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdBoolean) {
				return ssSTBoolean;
			} else if (key == IdAutoComplete_Bank) {
				return ssENAutoComplete_Bank;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
			ssENAutoComplete_Bank.FillFromOther((IRecord) other.AttributeGet(IdAutoComplete_Bank));
		}
	} // RCBooleanAutoComplete_BankRecord
	/// <summary>
	/// Structure <code>RCDisciplinaryDisciplinaryTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCDisciplinaryDisciplinaryTypeRecord: ISerializable, ITypedRecord<RCDisciplinaryDisciplinaryTypeRecord> {
		private static readonly GlobalObjectKey IdDisciplinary = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*uPt8Pj187p4cYWjLev+HKw");
		private static readonly GlobalObjectKey IdDisciplinaryType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*AJljuw7hDz7g8TETpAkOSQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Disciplinary")]
		public ENDisciplinaryEntityRecord ssENDisciplinary;

		[System.Xml.Serialization.XmlElement("DisciplinaryType")]
		public ENDisciplinaryTypeEntityRecord ssENDisciplinaryType;


		public BitArray OptimizedAttributes;

		public RCDisciplinaryDisciplinaryTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENDisciplinary = new ENDisciplinaryEntityRecord(null);
			ssENDisciplinaryType = new ENDisciplinaryTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(6, false);
			all[1] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENDisciplinary.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENDisciplinaryType.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENDisciplinary.OptimizedAttributes = value[0];
					ssENDisciplinaryType.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENDisciplinary.OptimizedAttributes;
				all[1] = ssENDisciplinaryType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENDisciplinary.Read(r, ref index);
			ssENDisciplinaryType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCDisciplinaryDisciplinaryTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCDisciplinaryDisciplinaryTypeRecord a, RCDisciplinaryDisciplinaryTypeRecord b) {
			if (a.ssENDisciplinary != b.ssENDisciplinary) return false;
			if (a.ssENDisciplinaryType != b.ssENDisciplinaryType) return false;
			return true;
		}

		public static bool operator != (RCDisciplinaryDisciplinaryTypeRecord a, RCDisciplinaryDisciplinaryTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCDisciplinaryDisciplinaryTypeRecord)) return false;
			return (this == (RCDisciplinaryDisciplinaryTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENDisciplinary.GetHashCode()
				^ ssENDisciplinaryType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCDisciplinaryDisciplinaryTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENDisciplinary = new ENDisciplinaryEntityRecord(null);
			ssENDisciplinaryType = new ENDisciplinaryTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENDisciplinary = (ENDisciplinaryEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENDisciplinaryType = (ENDisciplinaryTypeEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENDisciplinary.RecursiveReset();
			ssENDisciplinaryType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENDisciplinary.InternalRecursiveSave();
			ssENDisciplinaryType.InternalRecursiveSave();
		}


		public RCDisciplinaryDisciplinaryTypeRecord Duplicate() {
			RCDisciplinaryDisciplinaryTypeRecord t;
			t.ssENDisciplinary = (ENDisciplinaryEntityRecord) this.ssENDisciplinary.Duplicate();
			t.ssENDisciplinaryType = (ENDisciplinaryTypeEntityRecord) this.ssENDisciplinaryType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENDisciplinary.ToXml(this, recordElem, "Disciplinary", detailLevel - 1);
				ssENDisciplinaryType.ToXml(this, recordElem, "DisciplinaryType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "disciplinary") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Disciplinary")) variable.Value = ssENDisciplinary; else variable.Optimized = true;
				variable.SetFieldName("disciplinary");
			} else if (head == "disciplinarytype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DisciplinaryType")) variable.Value = ssENDisciplinaryType; else variable.Optimized = true;
				variable.SetFieldName("disciplinarytype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDisciplinary) {
				return ssENDisciplinary;
			} else if (key == IdDisciplinaryType) {
				return ssENDisciplinaryType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENDisciplinary.FillFromOther((IRecord) other.AttributeGet(IdDisciplinary));
			ssENDisciplinaryType.FillFromOther((IRecord) other.AttributeGet(IdDisciplinaryType));
		}
	} // RCDisciplinaryDisciplinaryTypeRecord
	/// <summary>
	/// Structure <code>RCTargetTypeTargetTargetStatusBooleanRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTargetTypeTargetTargetStatusBooleanRecord: ISerializable, ITypedRecord<RCTargetTypeTargetTargetStatusBooleanRecord> {
		private static readonly GlobalObjectKey IdTargetType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*T6JNzkEfecx998+9fAD+0g");
		private static readonly GlobalObjectKey IdTarget = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*t3qfNkN0E4nmQK_NGFBTGw");
		private static readonly GlobalObjectKey IdTargetStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NM7jinYNANDuvBkwxohD0Q");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("TargetType")]
		public ENTargetTypeEntityRecord ssENTargetType;

		[System.Xml.Serialization.XmlElement("Target")]
		public ENTargetEntityRecord ssENTarget;

		[System.Xml.Serialization.XmlElement("TargetStatus")]
		public ENTargetStatusEntityRecord ssENTargetStatus;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;


		public BitArray OptimizedAttributes;

		public RCTargetTypeTargetTargetStatusBooleanRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENTargetType = new ENTargetTypeEntityRecord(null);
			ssENTarget = new ENTargetEntityRecord(null);
			ssENTargetStatus = new ENTargetStatusEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(4, false);
			all[1] = new BitArray(17, false);
			all[2] = new BitArray(4, false);
			all[3] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENTargetType.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENTarget.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENTargetStatus.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENTargetType.OptimizedAttributes = value[0];
					ssENTarget.OptimizedAttributes = value[1];
					ssENTargetStatus.OptimizedAttributes = value[2];
					ssSTBoolean.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENTargetType.OptimizedAttributes;
				all[1] = ssENTarget.OptimizedAttributes;
				all[2] = ssENTargetStatus.OptimizedAttributes;
				all[3] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENTargetType.Read(r, ref index);
			ssENTarget.Read(r, ref index);
			ssENTargetStatus.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTargetTypeTargetTargetStatusBooleanRecord r) {
			this = r;
		}


		public static bool operator == (RCTargetTypeTargetTargetStatusBooleanRecord a, RCTargetTypeTargetTargetStatusBooleanRecord b) {
			if (a.ssENTargetType != b.ssENTargetType) return false;
			if (a.ssENTarget != b.ssENTarget) return false;
			if (a.ssENTargetStatus != b.ssENTargetStatus) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			return true;
		}

		public static bool operator != (RCTargetTypeTargetTargetStatusBooleanRecord a, RCTargetTypeTargetTargetStatusBooleanRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTargetTypeTargetTargetStatusBooleanRecord)) return false;
			return (this == (RCTargetTypeTargetTargetStatusBooleanRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENTargetType.GetHashCode()
				^ ssENTarget.GetHashCode()
				^ ssENTargetStatus.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTargetTypeTargetTargetStatusBooleanRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENTargetType = new ENTargetTypeEntityRecord(null);
			ssENTarget = new ENTargetEntityRecord(null);
			ssENTargetStatus = new ENTargetStatusEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENTargetType = (ENTargetTypeEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENTarget = (ENTargetEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENTargetStatus = (ENTargetStatusEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENTargetType.RecursiveReset();
			ssENTarget.RecursiveReset();
			ssENTargetStatus.RecursiveReset();
			ssSTBoolean.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENTargetType.InternalRecursiveSave();
			ssENTarget.InternalRecursiveSave();
			ssENTargetStatus.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
		}


		public RCTargetTypeTargetTargetStatusBooleanRecord Duplicate() {
			RCTargetTypeTargetTargetStatusBooleanRecord t;
			t.ssENTargetType = (ENTargetTypeEntityRecord) this.ssENTargetType.Duplicate();
			t.ssENTarget = (ENTargetEntityRecord) this.ssENTarget.Duplicate();
			t.ssENTargetStatus = (ENTargetStatusEntityRecord) this.ssENTargetStatus.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENTargetType.ToXml(this, recordElem, "TargetType", detailLevel - 1);
				ssENTarget.ToXml(this, recordElem, "Target", detailLevel - 1);
				ssENTargetStatus.ToXml(this, recordElem, "TargetStatus", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "targettype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetType")) variable.Value = ssENTargetType; else variable.Optimized = true;
				variable.SetFieldName("targettype");
			} else if (head == "target") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Target")) variable.Value = ssENTarget; else variable.Optimized = true;
				variable.SetFieldName("target");
			} else if (head == "targetstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetStatus")) variable.Value = ssENTargetStatus; else variable.Optimized = true;
				variable.SetFieldName("targetstatus");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTargetType) {
				return ssENTargetType;
			} else if (key == IdTarget) {
				return ssENTarget;
			} else if (key == IdTargetStatus) {
				return ssENTargetStatus;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENTargetType.FillFromOther((IRecord) other.AttributeGet(IdTargetType));
			ssENTarget.FillFromOther((IRecord) other.AttributeGet(IdTarget));
			ssENTargetStatus.FillFromOther((IRecord) other.AttributeGet(IdTargetStatus));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
		}
	} // RCTargetTypeTargetTargetStatusBooleanRecord
	/// <summary>
	/// Structure <code>RCStringStringRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStringStringRecord: ISerializable, ITypedRecord<RCStringStringRecord> {
		private static readonly GlobalObjectKey IdString = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5ltnC1EjdYReiJ9edGCgRA");
		private static readonly GlobalObjectKey IdString_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*PUNfB+DKv5tYvp534Va69w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("String")]
		public STStringStructure ssSTString;

		[System.Xml.Serialization.XmlElement("String_2")]
		public STStringStructure ssSTString_2;


		public BitArray OptimizedAttributes;

		public RCStringStringRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTString = new STStringStructure(null);
			ssSTString_2 = new STStringStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = null;
			all[1] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTString.OptimizedAttributes = value[0];
					ssSTString_2.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = null;
				all[1] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTString.Read(r, ref index);
			ssSTString_2.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStringStringRecord r) {
			this = r;
		}


		public static bool operator == (RCStringStringRecord a, RCStringStringRecord b) {
			if (a.ssSTString != b.ssSTString) return false;
			if (a.ssSTString_2 != b.ssSTString_2) return false;
			return true;
		}

		public static bool operator != (RCStringStringRecord a, RCStringStringRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStringStringRecord)) return false;
			return (this == (RCStringStringRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTString.GetHashCode()
				^ ssSTString_2.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStringStringRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTString = new STStringStructure(null);
			ssSTString_2 = new STStringStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTString = (STStringStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTString_2 = (STStringStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssSTString.RecursiveReset();
			ssSTString_2.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTString.InternalRecursiveSave();
			ssSTString_2.InternalRecursiveSave();
		}


		public RCStringStringRecord Duplicate() {
			RCStringStringRecord t;
			t.ssSTString = (STStringStructure) this.ssSTString.Duplicate();
			t.ssSTString_2 = (STStringStructure) this.ssSTString_2.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTString.ToXml(this, recordElem, "String", detailLevel - 1);
				ssSTString_2.ToXml(this, recordElem, "String_2", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "string") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String")) variable.Value = ssSTString; else variable.Optimized = true;
				variable.SetFieldName("string");
			} else if (head == "string_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String_2")) variable.Value = ssSTString_2; else variable.Optimized = true;
				variable.SetFieldName("string_2");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdString) {
				return ssSTString;
			} else if (key == IdString_2) {
				return ssSTString_2;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTString.FillFromOther((IRecord) other.AttributeGet(IdString));
			ssSTString_2.FillFromOther((IRecord) other.AttributeGet(IdString_2));
		}
	} // RCStringStringRecord
	/// <summary>
	/// Structure <code>RCAcademicYearsProgressReportLogoProgressReportTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAcademicYearsProgressReportLogoProgressReportTypeRecord: ISerializable, ITypedRecord<RCAcademicYearsProgressReportLogoProgressReportTypeRecord> {
		private static readonly GlobalObjectKey IdAcademicYears = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*s+Za7XpfGnL7R7G1Bxulmg");
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");
		private static readonly GlobalObjectKey IdLogo = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*r7dtvdH+Z3ahKJyZxTMAmA");
		private static readonly GlobalObjectKey IdProgressReportType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*1yKNLZ5hrgyypvQSHqrb9g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AcademicYears")]
		public ENAcademicYearsEntityRecord ssENAcademicYears;

		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;

		[System.Xml.Serialization.XmlElement("Logo")]
		public ENLogoEntityRecord ssENLogo;

		[System.Xml.Serialization.XmlElement("ProgressReportType")]
		public ENProgressReportTypeEntityRecord ssENProgressReportType;


		public BitArray OptimizedAttributes;

		public RCAcademicYearsProgressReportLogoProgressReportTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENAcademicYears = new ENAcademicYearsEntityRecord(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENLogo = new ENLogoEntityRecord(null);
			ssENProgressReportType = new ENProgressReportTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(10, false);
			all[1] = new BitArray(23, false);
			all[2] = new BitArray(6, false);
			all[3] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENAcademicYears.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENLogo.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENProgressReportType.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENAcademicYears.OptimizedAttributes = value[0];
					ssENProgressReport.OptimizedAttributes = value[1];
					ssENLogo.OptimizedAttributes = value[2];
					ssENProgressReportType.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENAcademicYears.OptimizedAttributes;
				all[1] = ssENProgressReport.OptimizedAttributes;
				all[2] = ssENLogo.OptimizedAttributes;
				all[3] = ssENProgressReportType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENAcademicYears.Read(r, ref index);
			ssENProgressReport.Read(r, ref index);
			ssENLogo.Read(r, ref index);
			ssENProgressReportType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAcademicYearsProgressReportLogoProgressReportTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCAcademicYearsProgressReportLogoProgressReportTypeRecord a, RCAcademicYearsProgressReportLogoProgressReportTypeRecord b) {
			if (a.ssENAcademicYears != b.ssENAcademicYears) return false;
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			if (a.ssENLogo != b.ssENLogo) return false;
			if (a.ssENProgressReportType != b.ssENProgressReportType) return false;
			return true;
		}

		public static bool operator != (RCAcademicYearsProgressReportLogoProgressReportTypeRecord a, RCAcademicYearsProgressReportLogoProgressReportTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAcademicYearsProgressReportLogoProgressReportTypeRecord)) return false;
			return (this == (RCAcademicYearsProgressReportLogoProgressReportTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENAcademicYears.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				^ ssENLogo.GetHashCode()
				^ ssENProgressReportType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAcademicYearsProgressReportLogoProgressReportTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENAcademicYears = new ENAcademicYearsEntityRecord(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENLogo = new ENLogoEntityRecord(null);
			ssENProgressReportType = new ENProgressReportTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENAcademicYears = (ENAcademicYearsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENLogo = (ENLogoEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENProgressReportType = (ENProgressReportTypeEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENAcademicYears.RecursiveReset();
			ssENProgressReport.RecursiveReset();
			ssENLogo.RecursiveReset();
			ssENProgressReportType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENAcademicYears.InternalRecursiveSave();
			ssENProgressReport.InternalRecursiveSave();
			ssENLogo.InternalRecursiveSave();
			ssENProgressReportType.InternalRecursiveSave();
		}


		public RCAcademicYearsProgressReportLogoProgressReportTypeRecord Duplicate() {
			RCAcademicYearsProgressReportLogoProgressReportTypeRecord t;
			t.ssENAcademicYears = (ENAcademicYearsEntityRecord) this.ssENAcademicYears.Duplicate();
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.ssENLogo = (ENLogoEntityRecord) this.ssENLogo.Duplicate();
			t.ssENProgressReportType = (ENProgressReportTypeEntityRecord) this.ssENProgressReportType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENAcademicYears.ToXml(this, recordElem, "AcademicYears", detailLevel - 1);
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
				ssENLogo.ToXml(this, recordElem, "Logo", detailLevel - 1);
				ssENProgressReportType.ToXml(this, recordElem, "ProgressReportType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "academicyears") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYears")) variable.Value = ssENAcademicYears; else variable.Optimized = true;
				variable.SetFieldName("academicyears");
			} else if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			} else if (head == "logo") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Logo")) variable.Value = ssENLogo; else variable.Optimized = true;
				variable.SetFieldName("logo");
			} else if (head == "progressreporttype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportType")) variable.Value = ssENProgressReportType; else variable.Optimized = true;
				variable.SetFieldName("progressreporttype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAcademicYears) {
				return ssENAcademicYears;
			} else if (key == IdProgressReport) {
				return ssENProgressReport;
			} else if (key == IdLogo) {
				return ssENLogo;
			} else if (key == IdProgressReportType) {
				return ssENProgressReportType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENAcademicYears.FillFromOther((IRecord) other.AttributeGet(IdAcademicYears));
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
			ssENLogo.FillFromOther((IRecord) other.AttributeGet(IdLogo));
			ssENProgressReportType.FillFromOther((IRecord) other.AttributeGet(IdProgressReportType));
		}
	} // RCAcademicYearsProgressReportLogoProgressReportTypeRecord
	/// <summary>
	/// Structure <code>RCUserUpdatesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserUpdatesRecord: ISerializable, ITypedRecord<RCUserUpdatesRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdUpdates = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*gcqFqeutlV4qQhQ8q0U72A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Updates")]
		public ENUpdatesEntityRecord ssENUpdates;


		public BitArray OptimizedAttributes;

		public RCUserUpdatesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENUpdates = new ENUpdatesEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUpdates.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENUpdates.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENUpdates.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENUpdates.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserUpdatesRecord r) {
			this = r;
		}


		public static bool operator == (RCUserUpdatesRecord a, RCUserUpdatesRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENUpdates != b.ssENUpdates) return false;
			return true;
		}

		public static bool operator != (RCUserUpdatesRecord a, RCUserUpdatesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserUpdatesRecord)) return false;
			return (this == (RCUserUpdatesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENUpdates.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserUpdatesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENUpdates = new ENUpdatesEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUpdates = (ENUpdatesEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENUpdates.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENUpdates.InternalRecursiveSave();
		}


		public RCUserUpdatesRecord Duplicate() {
			RCUserUpdatesRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENUpdates = (ENUpdatesEntityRecord) this.ssENUpdates.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENUpdates.ToXml(this, recordElem, "Updates", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "updates") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Updates")) variable.Value = ssENUpdates; else variable.Optimized = true;
				variable.SetFieldName("updates");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdUpdates) {
				return ssENUpdates;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENUpdates.FillFromOther((IRecord) other.AttributeGet(IdUpdates));
		}
	} // RCUserUpdatesRecord
	/// <summary>
	/// Structure <code>RCUserBooleanProgressReportRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserBooleanProgressReportRecord: ISerializable, ITypedRecord<RCUserBooleanProgressReportRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;

		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;


		public BitArray OptimizedAttributes;

		public RCUserBooleanProgressReportRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(11, false);
			all[1] = null;
			all[2] = new BitArray(23, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssSTBoolean.OptimizedAttributes = value[1];
					ssENProgressReport.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = null;
				all[2] = ssENProgressReport.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
			ssENProgressReport.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserBooleanProgressReportRecord r) {
			this = r;
		}


		public static bool operator == (RCUserBooleanProgressReportRecord a, RCUserBooleanProgressReportRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			return true;
		}

		public static bool operator != (RCUserBooleanProgressReportRecord a, RCUserBooleanProgressReportRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserBooleanProgressReportRecord)) return false;
			return (this == (RCUserBooleanProgressReportRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserBooleanProgressReportRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssSTBoolean.RecursiveReset();
			ssENProgressReport.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
			ssENProgressReport.InternalRecursiveSave();
		}


		public RCUserBooleanProgressReportRecord Duplicate() {
			RCUserBooleanProgressReportRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			} else if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else if (key == IdProgressReport) {
				return ssENProgressReport;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
		}
	} // RCUserBooleanProgressReportRecord
	/// <summary>
	/// Structure <code>RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord: ISerializable, ITypedRecord<RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdRAGStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*24GX8LQ_aRQhomR6Kb4nDw");
		private static readonly GlobalObjectKey IdCauseOfConcernReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QkO97mOJxBzLFMqz+6jENA");
		private static readonly GlobalObjectKey IdCauseOfConcern = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*GX7tbyCb6lMzB7EuQfksTQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("RAGStatus")]
		public ENRAGStatusEntityRecord ssENRAGStatus;

		[System.Xml.Serialization.XmlElement("CauseOfConcernReason")]
		public ENCauseOfConcernReasonEntityRecord ssENCauseOfConcernReason;

		[System.Xml.Serialization.XmlElement("CauseOfConcern")]
		public ENCauseOfConcernEntityRecord ssENCauseOfConcern;


		public BitArray OptimizedAttributes;

		public RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENCauseOfConcernReason = new ENCauseOfConcernReasonEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(5, false);
			all[3] = new BitArray(3, false);
			all[4] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENRAGStatus.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENCauseOfConcernReason.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENCauseOfConcern.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENRAGStatus.OptimizedAttributes = value[2];
					ssENCauseOfConcernReason.OptimizedAttributes = value[3];
					ssENCauseOfConcern.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENRAGStatus.OptimizedAttributes;
				all[3] = ssENCauseOfConcernReason.OptimizedAttributes;
				all[4] = ssENCauseOfConcern.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENRAGStatus.Read(r, ref index);
			ssENCauseOfConcernReason.Read(r, ref index);
			ssENCauseOfConcern.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord a, RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENRAGStatus != b.ssENRAGStatus) return false;
			if (a.ssENCauseOfConcernReason != b.ssENCauseOfConcernReason) return false;
			if (a.ssENCauseOfConcern != b.ssENCauseOfConcern) return false;
			return true;
		}

		public static bool operator != (RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord a, RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord)) return false;
			return (this == (RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENRAGStatus.GetHashCode()
				^ ssENCauseOfConcernReason.GetHashCode()
				^ ssENCauseOfConcern.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENCauseOfConcernReason = new ENCauseOfConcernReasonEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENRAGStatus = (ENRAGStatusEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENCauseOfConcernReason = (ENCauseOfConcernReasonEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENRAGStatus.RecursiveReset();
			ssENCauseOfConcernReason.RecursiveReset();
			ssENCauseOfConcern.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENRAGStatus.InternalRecursiveSave();
			ssENCauseOfConcernReason.InternalRecursiveSave();
			ssENCauseOfConcern.InternalRecursiveSave();
		}


		public RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord Duplicate() {
			RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENRAGStatus = (ENRAGStatusEntityRecord) this.ssENRAGStatus.Duplicate();
			t.ssENCauseOfConcernReason = (ENCauseOfConcernReasonEntityRecord) this.ssENCauseOfConcernReason.Duplicate();
			t.ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) this.ssENCauseOfConcern.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENRAGStatus.ToXml(this, recordElem, "RAGStatus", detailLevel - 1);
				ssENCauseOfConcernReason.ToXml(this, recordElem, "CauseOfConcernReason", detailLevel - 1);
				ssENCauseOfConcern.ToXml(this, recordElem, "CauseOfConcern", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "ragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatus")) variable.Value = ssENRAGStatus; else variable.Optimized = true;
				variable.SetFieldName("ragstatus");
			} else if (head == "causeofconcernreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernReason")) variable.Value = ssENCauseOfConcernReason; else variable.Optimized = true;
				variable.SetFieldName("causeofconcernreason");
			} else if (head == "causeofconcern") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcern")) variable.Value = ssENCauseOfConcern; else variable.Optimized = true;
				variable.SetFieldName("causeofconcern");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdRAGStatus) {
				return ssENRAGStatus;
			} else if (key == IdCauseOfConcernReason) {
				return ssENCauseOfConcernReason;
			} else if (key == IdCauseOfConcern) {
				return ssENCauseOfConcern;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENRAGStatus.FillFromOther((IRecord) other.AttributeGet(IdRAGStatus));
			ssENCauseOfConcernReason.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcernReason));
			ssENCauseOfConcern.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcern));
		}
	} // RCStudentUserRAGStatusCauseOfConcernReasonCauseOfConcernRecord
	/// <summary>
	/// Structure <code>RCUserUserAcademicYearsProgressReportProgressReportTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserUserAcademicYearsProgressReportProgressReportTypeRecord: ISerializable, ITypedRecord<RCUserUserAcademicYearsProgressReportProgressReportTypeRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdUser_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5F23_wlsRH5bBFQUXYstpQ");
		private static readonly GlobalObjectKey IdAcademicYears = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*s+Za7XpfGnL7R7G1Bxulmg");
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");
		private static readonly GlobalObjectKey IdProgressReportType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*1yKNLZ5hrgyypvQSHqrb9g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("User_2")]
		public ENUserEntityRecord ssENUser_2;

		[System.Xml.Serialization.XmlElement("AcademicYears")]
		public ENAcademicYearsEntityRecord ssENAcademicYears;

		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;

		[System.Xml.Serialization.XmlElement("ProgressReportType")]
		public ENProgressReportTypeEntityRecord ssENProgressReportType;


		public BitArray OptimizedAttributes;

		public RCUserUserAcademicYearsProgressReportProgressReportTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENAcademicYears = new ENAcademicYearsEntityRecord(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportType = new ENProgressReportTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(10, false);
			all[3] = new BitArray(23, false);
			all[4] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser_2.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENAcademicYears.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENProgressReportType.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENUser_2.OptimizedAttributes = value[1];
					ssENAcademicYears.OptimizedAttributes = value[2];
					ssENProgressReport.OptimizedAttributes = value[3];
					ssENProgressReportType.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENUser_2.OptimizedAttributes;
				all[2] = ssENAcademicYears.OptimizedAttributes;
				all[3] = ssENProgressReport.OptimizedAttributes;
				all[4] = ssENProgressReportType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENUser_2.Read(r, ref index);
			ssENAcademicYears.Read(r, ref index);
			ssENProgressReport.Read(r, ref index);
			ssENProgressReportType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserUserAcademicYearsProgressReportProgressReportTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCUserUserAcademicYearsProgressReportProgressReportTypeRecord a, RCUserUserAcademicYearsProgressReportProgressReportTypeRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENUser_2 != b.ssENUser_2) return false;
			if (a.ssENAcademicYears != b.ssENAcademicYears) return false;
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			if (a.ssENProgressReportType != b.ssENProgressReportType) return false;
			return true;
		}

		public static bool operator != (RCUserUserAcademicYearsProgressReportProgressReportTypeRecord a, RCUserUserAcademicYearsProgressReportProgressReportTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserUserAcademicYearsProgressReportProgressReportTypeRecord)) return false;
			return (this == (RCUserUserAcademicYearsProgressReportProgressReportTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENUser_2.GetHashCode()
				^ ssENAcademicYears.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				^ ssENProgressReportType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserUserAcademicYearsProgressReportProgressReportTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENAcademicYears = new ENAcademicYearsEntityRecord(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportType = new ENProgressReportTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser_2 = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENAcademicYears = (ENAcademicYearsEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENProgressReportType = (ENProgressReportTypeEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENUser_2.RecursiveReset();
			ssENAcademicYears.RecursiveReset();
			ssENProgressReport.RecursiveReset();
			ssENProgressReportType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENUser_2.InternalRecursiveSave();
			ssENAcademicYears.InternalRecursiveSave();
			ssENProgressReport.InternalRecursiveSave();
			ssENProgressReportType.InternalRecursiveSave();
		}


		public RCUserUserAcademicYearsProgressReportProgressReportTypeRecord Duplicate() {
			RCUserUserAcademicYearsProgressReportProgressReportTypeRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENUser_2 = (ENUserEntityRecord) this.ssENUser_2.Duplicate();
			t.ssENAcademicYears = (ENAcademicYearsEntityRecord) this.ssENAcademicYears.Duplicate();
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.ssENProgressReportType = (ENProgressReportTypeEntityRecord) this.ssENProgressReportType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENUser_2.ToXml(this, recordElem, "User_2", detailLevel - 1);
				ssENAcademicYears.ToXml(this, recordElem, "AcademicYears", detailLevel - 1);
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
				ssENProgressReportType.ToXml(this, recordElem, "ProgressReportType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "user_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_2")) variable.Value = ssENUser_2; else variable.Optimized = true;
				variable.SetFieldName("user_2");
			} else if (head == "academicyears") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYears")) variable.Value = ssENAcademicYears; else variable.Optimized = true;
				variable.SetFieldName("academicyears");
			} else if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			} else if (head == "progressreporttype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportType")) variable.Value = ssENProgressReportType; else variable.Optimized = true;
				variable.SetFieldName("progressreporttype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdUser_2) {
				return ssENUser_2;
			} else if (key == IdAcademicYears) {
				return ssENAcademicYears;
			} else if (key == IdProgressReport) {
				return ssENProgressReport;
			} else if (key == IdProgressReportType) {
				return ssENProgressReportType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENUser_2.FillFromOther((IRecord) other.AttributeGet(IdUser_2));
			ssENAcademicYears.FillFromOther((IRecord) other.AttributeGet(IdAcademicYears));
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
			ssENProgressReportType.FillFromOther((IRecord) other.AttributeGet(IdProgressReportType));
		}
	} // RCUserUserAcademicYearsProgressReportProgressReportTypeRecord
	/// <summary>
	/// Structure <code>RCUserStudentPENPortraitRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserStudentPENPortraitRecord: ISerializable, ITypedRecord<RCUserStudentPENPortraitRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentPENPortrait = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*h1TXKO+_BNDVxRwTv3P9UQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentPENPortrait")]
		public ENStudentPENPortraitEntityRecord ssENStudentPENPortrait;


		public BitArray OptimizedAttributes;

		public RCUserStudentPENPortraitRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentPENPortrait = new ENStudentPENPortraitEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentPENPortrait.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENStudentPENPortrait.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENStudentPENPortrait.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENStudentPENPortrait.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserStudentPENPortraitRecord r) {
			this = r;
		}


		public static bool operator == (RCUserStudentPENPortraitRecord a, RCUserStudentPENPortraitRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentPENPortrait != b.ssENStudentPENPortrait) return false;
			return true;
		}

		public static bool operator != (RCUserStudentPENPortraitRecord a, RCUserStudentPENPortraitRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserStudentPENPortraitRecord)) return false;
			return (this == (RCUserStudentPENPortraitRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentPENPortrait.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserStudentPENPortraitRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentPENPortrait = new ENStudentPENPortraitEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentPENPortrait = (ENStudentPENPortraitEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENStudentPENPortrait.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENStudentPENPortrait.InternalRecursiveSave();
		}


		public RCUserStudentPENPortraitRecord Duplicate() {
			RCUserStudentPENPortraitRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentPENPortrait = (ENStudentPENPortraitEntityRecord) this.ssENStudentPENPortrait.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentPENPortrait.ToXml(this, recordElem, "StudentPENPortrait", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentpenportrait") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentPENPortrait")) variable.Value = ssENStudentPENPortrait; else variable.Optimized = true;
				variable.SetFieldName("studentpenportrait");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentPENPortrait) {
				return ssENStudentPENPortrait;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentPENPortrait.FillFromOther((IRecord) other.AttributeGet(IdStudentPENPortrait));
		}
	} // RCUserStudentPENPortraitRecord
	/// <summary>
	/// Structure <code>RCGroupStudent_GroupStudentStudentAttendanceRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupStudent_GroupStudentStudentAttendanceRecord: ISerializable, ITypedRecord<RCGroupStudent_GroupStudentStudentAttendanceRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdStudentAttendance = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*szE2L2jlslZT_F0a3B5wyQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;

		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("StudentAttendance")]
		public ENStudentAttendanceEntityRecord ssENStudentAttendance;


		public BitArray OptimizedAttributes;

		public RCGroupStudent_GroupStudentStudentAttendanceRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENStudentAttendance = new ENStudentAttendanceEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(9, false);
			all[2] = new BitArray(27, false);
			all[3] = new BitArray(20, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENStudentAttendance.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENStudent_Group.OptimizedAttributes = value[1];
					ssENStudent.OptimizedAttributes = value[2];
					ssENStudentAttendance.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENStudent_Group.OptimizedAttributes;
				all[2] = ssENStudent.OptimizedAttributes;
				all[3] = ssENStudentAttendance.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENStudent_Group.Read(r, ref index);
			ssENStudent.Read(r, ref index);
			ssENStudentAttendance.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupStudent_GroupStudentStudentAttendanceRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupStudent_GroupStudentStudentAttendanceRecord a, RCGroupStudent_GroupStudentStudentAttendanceRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENStudentAttendance != b.ssENStudentAttendance) return false;
			return true;
		}

		public static bool operator != (RCGroupStudent_GroupStudentStudentAttendanceRecord a, RCGroupStudent_GroupStudentStudentAttendanceRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupStudent_GroupStudentStudentAttendanceRecord)) return false;
			return (this == (RCGroupStudent_GroupStudentStudentAttendanceRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENStudentAttendance.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupStudent_GroupStudentStudentAttendanceRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENStudentAttendance = new ENStudentAttendanceEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENStudentAttendance = (ENStudentAttendanceEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENStudent_Group.RecursiveReset();
			ssENStudent.RecursiveReset();
			ssENStudentAttendance.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENStudent_Group.InternalRecursiveSave();
			ssENStudent.InternalRecursiveSave();
			ssENStudentAttendance.InternalRecursiveSave();
		}


		public RCGroupStudent_GroupStudentStudentAttendanceRecord Duplicate() {
			RCGroupStudent_GroupStudentStudentAttendanceRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENStudentAttendance = (ENStudentAttendanceEntityRecord) this.ssENStudentAttendance.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENStudentAttendance.ToXml(this, recordElem, "StudentAttendance", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "studentattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentAttendance")) variable.Value = ssENStudentAttendance; else variable.Optimized = true;
				variable.SetFieldName("studentattendance");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdStudentAttendance) {
				return ssENStudentAttendance;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENStudentAttendance.FillFromOther((IRecord) other.AttributeGet(IdStudentAttendance));
		}
	} // RCGroupStudent_GroupStudentStudentAttendanceRecord
	/// <summary>
	/// Structure <code>RCStudentUserDestinationsStudentCareerAimRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserDestinationsStudentCareerAimRecord: ISerializable, ITypedRecord<RCStudentUserDestinationsStudentCareerAimRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdDestinations = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*AOdaW3OobTeRC_tV2ZM_qA");
		private static readonly GlobalObjectKey IdStudentCareerAim = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*7OHP_fnG2QCFHZNNdh6gXQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Destinations")]
		public ENDestinationsEntityRecord ssENDestinations;

		[System.Xml.Serialization.XmlElement("StudentCareerAim")]
		public ENStudentCareerAimEntityRecord ssENStudentCareerAim;


		public BitArray OptimizedAttributes;

		public RCStudentUserDestinationsStudentCareerAimRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENDestinations = new ENDestinationsEntityRecord(null);
			ssENStudentCareerAim = new ENStudentCareerAimEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(4, false);
			all[3] = new BitArray(10, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENDestinations.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENStudentCareerAim.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENDestinations.OptimizedAttributes = value[2];
					ssENStudentCareerAim.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENDestinations.OptimizedAttributes;
				all[3] = ssENStudentCareerAim.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENDestinations.Read(r, ref index);
			ssENStudentCareerAim.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserDestinationsStudentCareerAimRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserDestinationsStudentCareerAimRecord a, RCStudentUserDestinationsStudentCareerAimRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENDestinations != b.ssENDestinations) return false;
			if (a.ssENStudentCareerAim != b.ssENStudentCareerAim) return false;
			return true;
		}

		public static bool operator != (RCStudentUserDestinationsStudentCareerAimRecord a, RCStudentUserDestinationsStudentCareerAimRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserDestinationsStudentCareerAimRecord)) return false;
			return (this == (RCStudentUserDestinationsStudentCareerAimRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENDestinations.GetHashCode()
				^ ssENStudentCareerAim.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserDestinationsStudentCareerAimRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENDestinations = new ENDestinationsEntityRecord(null);
			ssENStudentCareerAim = new ENStudentCareerAimEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENDestinations = (ENDestinationsEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENStudentCareerAim = (ENStudentCareerAimEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENDestinations.RecursiveReset();
			ssENStudentCareerAim.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENDestinations.InternalRecursiveSave();
			ssENStudentCareerAim.InternalRecursiveSave();
		}


		public RCStudentUserDestinationsStudentCareerAimRecord Duplicate() {
			RCStudentUserDestinationsStudentCareerAimRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENDestinations = (ENDestinationsEntityRecord) this.ssENDestinations.Duplicate();
			t.ssENStudentCareerAim = (ENStudentCareerAimEntityRecord) this.ssENStudentCareerAim.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENDestinations.ToXml(this, recordElem, "Destinations", detailLevel - 1);
				ssENStudentCareerAim.ToXml(this, recordElem, "StudentCareerAim", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "destinations") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Destinations")) variable.Value = ssENDestinations; else variable.Optimized = true;
				variable.SetFieldName("destinations");
			} else if (head == "studentcareeraim") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCareerAim")) variable.Value = ssENStudentCareerAim; else variable.Optimized = true;
				variable.SetFieldName("studentcareeraim");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdDestinations) {
				return ssENDestinations;
			} else if (key == IdStudentCareerAim) {
				return ssENStudentCareerAim;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENDestinations.FillFromOther((IRecord) other.AttributeGet(IdDestinations));
			ssENStudentCareerAim.FillFromOther((IRecord) other.AttributeGet(IdStudentCareerAim));
		}
	} // RCStudentUserDestinationsStudentCareerAimRecord
	/// <summary>
	/// Structure <code>RCStudentDecimalStringStudentRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentDecimalStringStudentRAGRecord: ISerializable, ITypedRecord<RCStudentDecimalStringStudentRAGRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdOverallAttendancePercentage = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*RkClP4lCt0_yh2fEHWE85A");
		private static readonly GlobalObjectKey IdString = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5ltnC1EjdYReiJ9edGCgRA");
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*APBh_wXtPfFnwTyOabB9Vg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("OverallAttendancePercentage")]
		public STDecimalStructure ssSTOverallAttendancePercentage;

		[System.Xml.Serialization.XmlElement("String")]
		public STStringStructure ssSTString;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public ENStudentRAGEntityRecord ssENStudentRAG;


		public BitArray OptimizedAttributes;

		public RCStudentDecimalStringStudentRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssSTOverallAttendancePercentage = new STDecimalStructure(null);
			ssSTString = new STStringStructure(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(27, false);
			all[1] = null;
			all[2] = null;
			all[3] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentRAG.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssSTOverallAttendancePercentage.OptimizedAttributes = value[1];
					ssSTString.OptimizedAttributes = value[2];
					ssENStudentRAG.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = null;
				all[2] = null;
				all[3] = ssENStudentRAG.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssSTOverallAttendancePercentage.Read(r, ref index);
			ssSTString.Read(r, ref index);
			ssENStudentRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentDecimalStringStudentRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentDecimalStringStudentRAGRecord a, RCStudentDecimalStringStudentRAGRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssSTOverallAttendancePercentage != b.ssSTOverallAttendancePercentage) return false;
			if (a.ssSTString != b.ssSTString) return false;
			if (a.ssENStudentRAG != b.ssENStudentRAG) return false;
			return true;
		}

		public static bool operator != (RCStudentDecimalStringStudentRAGRecord a, RCStudentDecimalStringStudentRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentDecimalStringStudentRAGRecord)) return false;
			return (this == (RCStudentDecimalStringStudentRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssSTOverallAttendancePercentage.GetHashCode()
				^ ssSTString.GetHashCode()
				^ ssENStudentRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentDecimalStringStudentRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssSTOverallAttendancePercentage = new STDecimalStructure(null);
			ssSTString = new STStringStructure(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTOverallAttendancePercentage = (STDecimalStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTString = (STStringStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENStudentRAG = (ENStudentRAGEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssSTOverallAttendancePercentage.RecursiveReset();
			ssSTString.RecursiveReset();
			ssENStudentRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssSTOverallAttendancePercentage.InternalRecursiveSave();
			ssSTString.InternalRecursiveSave();
			ssENStudentRAG.InternalRecursiveSave();
		}


		public RCStudentDecimalStringStudentRAGRecord Duplicate() {
			RCStudentDecimalStringStudentRAGRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssSTOverallAttendancePercentage = (STDecimalStructure) this.ssSTOverallAttendancePercentage.Duplicate();
			t.ssSTString = (STStringStructure) this.ssSTString.Duplicate();
			t.ssENStudentRAG = (ENStudentRAGEntityRecord) this.ssENStudentRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssSTOverallAttendancePercentage.ToXml(this, recordElem, "OverallAttendancePercentage", detailLevel - 1);
				ssSTString.ToXml(this, recordElem, "String", detailLevel - 1);
				ssENStudentRAG.ToXml(this, recordElem, "StudentRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "overallattendancepercentage") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallAttendancePercentage")) variable.Value = ssSTOverallAttendancePercentage; else variable.Optimized = true;
				variable.SetFieldName("overallattendancepercentage");
			} else if (head == "string") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String")) variable.Value = ssSTString; else variable.Optimized = true;
				variable.SetFieldName("string");
			} else if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssENStudentRAG; else variable.Optimized = true;
				variable.SetFieldName("studentrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdOverallAttendancePercentage) {
				return ssSTOverallAttendancePercentage;
			} else if (key == IdString) {
				return ssSTString;
			} else if (key == IdStudentRAG) {
				return ssENStudentRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssSTOverallAttendancePercentage.FillFromOther((IRecord) other.AttributeGet(IdOverallAttendancePercentage));
			ssSTString.FillFromOther((IRecord) other.AttributeGet(IdString));
			ssENStudentRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentRAG));
		}
	} // RCStudentDecimalStringStudentRAGRecord
	/// <summary>
	/// Structure <code>RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord: ISerializable, ITypedRecord<RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentLog = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*a207hFuVwR8WZj05PrSs2A");
		private static readonly GlobalObjectKey IdStudentLogType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*O+r9xki4DgSh6sLDbQOVWg");
		private static readonly GlobalObjectKey IdCommunication = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Mje+JTHR9VpPmgPWMth_iA");
		private static readonly GlobalObjectKey IdCCSession = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*YtIMR1wPQu4yPKHpr39GBQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentLog")]
		public ENStudentLogEntityRecord ssENStudentLog;

		[System.Xml.Serialization.XmlElement("StudentLogType")]
		public ENStudentLogTypeEntityRecord ssENStudentLogType;

		[System.Xml.Serialization.XmlElement("Communication")]
		public ENCommunicationEntityRecord ssENCommunication;

		[System.Xml.Serialization.XmlElement("CCSession")]
		public ENCCSessionEntityRecord ssENCCSession;


		public BitArray OptimizedAttributes;

		public RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			ssENStudentLogType = new ENStudentLogTypeEntityRecord(null);
			ssENCommunication = new ENCommunicationEntityRecord(null);
			ssENCCSession = new ENCCSessionEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(44, false);
			all[2] = new BitArray(3, false);
			all[3] = new BitArray(13, false);
			all[4] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentLog.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENStudentLogType.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENCommunication.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENCCSession.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENStudentLog.OptimizedAttributes = value[1];
					ssENStudentLogType.OptimizedAttributes = value[2];
					ssENCommunication.OptimizedAttributes = value[3];
					ssENCCSession.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENStudentLog.OptimizedAttributes;
				all[2] = ssENStudentLogType.OptimizedAttributes;
				all[3] = ssENCommunication.OptimizedAttributes;
				all[4] = ssENCCSession.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENStudentLog.Read(r, ref index);
			ssENStudentLogType.Read(r, ref index);
			ssENCommunication.Read(r, ref index);
			ssENCCSession.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord r) {
			this = r;
		}


		public static bool operator == (RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord a, RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentLog != b.ssENStudentLog) return false;
			if (a.ssENStudentLogType != b.ssENStudentLogType) return false;
			if (a.ssENCommunication != b.ssENCommunication) return false;
			if (a.ssENCCSession != b.ssENCCSession) return false;
			return true;
		}

		public static bool operator != (RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord a, RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord)) return false;
			return (this == (RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentLog.GetHashCode()
				^ ssENStudentLogType.GetHashCode()
				^ ssENCommunication.GetHashCode()
				^ ssENCCSession.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			ssENStudentLogType = new ENStudentLogTypeEntityRecord(null);
			ssENCommunication = new ENCommunicationEntityRecord(null);
			ssENCCSession = new ENCCSessionEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentLog = (ENStudentLogEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENStudentLogType = (ENStudentLogTypeEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENCommunication = (ENCommunicationEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENCCSession = (ENCCSessionEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENStudentLog.RecursiveReset();
			ssENStudentLogType.RecursiveReset();
			ssENCommunication.RecursiveReset();
			ssENCCSession.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENStudentLog.InternalRecursiveSave();
			ssENStudentLogType.InternalRecursiveSave();
			ssENCommunication.InternalRecursiveSave();
			ssENCCSession.InternalRecursiveSave();
		}


		public RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord Duplicate() {
			RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentLog = (ENStudentLogEntityRecord) this.ssENStudentLog.Duplicate();
			t.ssENStudentLogType = (ENStudentLogTypeEntityRecord) this.ssENStudentLogType.Duplicate();
			t.ssENCommunication = (ENCommunicationEntityRecord) this.ssENCommunication.Duplicate();
			t.ssENCCSession = (ENCCSessionEntityRecord) this.ssENCCSession.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentLog.ToXml(this, recordElem, "StudentLog", detailLevel - 1);
				ssENStudentLogType.ToXml(this, recordElem, "StudentLogType", detailLevel - 1);
				ssENCommunication.ToXml(this, recordElem, "Communication", detailLevel - 1);
				ssENCCSession.ToXml(this, recordElem, "CCSession", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentlog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLog")) variable.Value = ssENStudentLog; else variable.Optimized = true;
				variable.SetFieldName("studentlog");
			} else if (head == "studentlogtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLogType")) variable.Value = ssENStudentLogType; else variable.Optimized = true;
				variable.SetFieldName("studentlogtype");
			} else if (head == "communication") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Communication")) variable.Value = ssENCommunication; else variable.Optimized = true;
				variable.SetFieldName("communication");
			} else if (head == "ccsession") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CCSession")) variable.Value = ssENCCSession; else variable.Optimized = true;
				variable.SetFieldName("ccsession");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentLog) {
				return ssENStudentLog;
			} else if (key == IdStudentLogType) {
				return ssENStudentLogType;
			} else if (key == IdCommunication) {
				return ssENCommunication;
			} else if (key == IdCCSession) {
				return ssENCCSession;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentLog.FillFromOther((IRecord) other.AttributeGet(IdStudentLog));
			ssENStudentLogType.FillFromOther((IRecord) other.AttributeGet(IdStudentLogType));
			ssENCommunication.FillFromOther((IRecord) other.AttributeGet(IdCommunication));
			ssENCCSession.FillFromOther((IRecord) other.AttributeGet(IdCCSession));
		}
	} // RCUserStudentLogStudentLogTypeCommunicationCCSessionRecord
	/// <summary>
	/// Structure <code>RCUserCauseOfConcernReasonCauseOfConcernRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserCauseOfConcernReasonCauseOfConcernRecord: ISerializable, ITypedRecord<RCUserCauseOfConcernReasonCauseOfConcernRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdCauseOfConcernReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QkO97mOJxBzLFMqz+6jENA");
		private static readonly GlobalObjectKey IdCauseOfConcern = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*GX7tbyCb6lMzB7EuQfksTQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("CauseOfConcernReason")]
		public ENCauseOfConcernReasonEntityRecord ssENCauseOfConcernReason;

		[System.Xml.Serialization.XmlElement("CauseOfConcern")]
		public ENCauseOfConcernEntityRecord ssENCauseOfConcern;


		public BitArray OptimizedAttributes;

		public RCUserCauseOfConcernReasonCauseOfConcernRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENCauseOfConcernReason = new ENCauseOfConcernReasonEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(3, false);
			all[2] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENCauseOfConcernReason.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENCauseOfConcern.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENCauseOfConcernReason.OptimizedAttributes = value[1];
					ssENCauseOfConcern.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENCauseOfConcernReason.OptimizedAttributes;
				all[2] = ssENCauseOfConcern.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENCauseOfConcernReason.Read(r, ref index);
			ssENCauseOfConcern.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserCauseOfConcernReasonCauseOfConcernRecord r) {
			this = r;
		}


		public static bool operator == (RCUserCauseOfConcernReasonCauseOfConcernRecord a, RCUserCauseOfConcernReasonCauseOfConcernRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENCauseOfConcernReason != b.ssENCauseOfConcernReason) return false;
			if (a.ssENCauseOfConcern != b.ssENCauseOfConcern) return false;
			return true;
		}

		public static bool operator != (RCUserCauseOfConcernReasonCauseOfConcernRecord a, RCUserCauseOfConcernReasonCauseOfConcernRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserCauseOfConcernReasonCauseOfConcernRecord)) return false;
			return (this == (RCUserCauseOfConcernReasonCauseOfConcernRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENCauseOfConcernReason.GetHashCode()
				^ ssENCauseOfConcern.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserCauseOfConcernReasonCauseOfConcernRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENCauseOfConcernReason = new ENCauseOfConcernReasonEntityRecord(null);
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENCauseOfConcernReason = (ENCauseOfConcernReasonEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENCauseOfConcernReason.RecursiveReset();
			ssENCauseOfConcern.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENCauseOfConcernReason.InternalRecursiveSave();
			ssENCauseOfConcern.InternalRecursiveSave();
		}


		public RCUserCauseOfConcernReasonCauseOfConcernRecord Duplicate() {
			RCUserCauseOfConcernReasonCauseOfConcernRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENCauseOfConcernReason = (ENCauseOfConcernReasonEntityRecord) this.ssENCauseOfConcernReason.Duplicate();
			t.ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) this.ssENCauseOfConcern.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENCauseOfConcernReason.ToXml(this, recordElem, "CauseOfConcernReason", detailLevel - 1);
				ssENCauseOfConcern.ToXml(this, recordElem, "CauseOfConcern", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "causeofconcernreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernReason")) variable.Value = ssENCauseOfConcernReason; else variable.Optimized = true;
				variable.SetFieldName("causeofconcernreason");
			} else if (head == "causeofconcern") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcern")) variable.Value = ssENCauseOfConcern; else variable.Optimized = true;
				variable.SetFieldName("causeofconcern");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdCauseOfConcernReason) {
				return ssENCauseOfConcernReason;
			} else if (key == IdCauseOfConcern) {
				return ssENCauseOfConcern;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENCauseOfConcernReason.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcernReason));
			ssENCauseOfConcern.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcern));
		}
	} // RCUserCauseOfConcernReasonCauseOfConcernRecord
	/// <summary>
	/// Structure <code>RCUserStudentLogRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserStudentLogRecord: ISerializable, ITypedRecord<RCUserStudentLogRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentLog = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*a207hFuVwR8WZj05PrSs2A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentLog")]
		public ENStudentLogEntityRecord ssENStudentLog;


		public BitArray OptimizedAttributes;

		public RCUserStudentLogRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(44, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentLog.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENStudentLog.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENStudentLog.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENStudentLog.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserStudentLogRecord r) {
			this = r;
		}


		public static bool operator == (RCUserStudentLogRecord a, RCUserStudentLogRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentLog != b.ssENStudentLog) return false;
			return true;
		}

		public static bool operator != (RCUserStudentLogRecord a, RCUserStudentLogRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserStudentLogRecord)) return false;
			return (this == (RCUserStudentLogRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentLog.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserStudentLogRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentLog = (ENStudentLogEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENStudentLog.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENStudentLog.InternalRecursiveSave();
		}


		public RCUserStudentLogRecord Duplicate() {
			RCUserStudentLogRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentLog = (ENStudentLogEntityRecord) this.ssENStudentLog.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentLog.ToXml(this, recordElem, "StudentLog", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentlog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLog")) variable.Value = ssENStudentLog; else variable.Optimized = true;
				variable.SetFieldName("studentlog");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentLog) {
				return ssENStudentLog;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentLog.FillFromOther((IRecord) other.AttributeGet(IdStudentLog));
		}
	} // RCUserStudentLogRecord
	/// <summary>
	/// Structure <code>RCUserStudentExtraCARecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserStudentExtraCARecord: ISerializable, ITypedRecord<RCUserStudentExtraCARecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentExtraCA = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*jKXKEMnrpXGHmE8tOEvS3w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentExtraCA")]
		public ENStudentExtraCAEntityRecord ssENStudentExtraCA;


		public BitArray OptimizedAttributes;

		public RCUserStudentExtraCARecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentExtraCA = new ENStudentExtraCAEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(6, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentExtraCA.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENStudentExtraCA.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENStudentExtraCA.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENStudentExtraCA.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserStudentExtraCARecord r) {
			this = r;
		}


		public static bool operator == (RCUserStudentExtraCARecord a, RCUserStudentExtraCARecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentExtraCA != b.ssENStudentExtraCA) return false;
			return true;
		}

		public static bool operator != (RCUserStudentExtraCARecord a, RCUserStudentExtraCARecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserStudentExtraCARecord)) return false;
			return (this == (RCUserStudentExtraCARecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentExtraCA.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserStudentExtraCARecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentExtraCA = new ENStudentExtraCAEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentExtraCA = (ENStudentExtraCAEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENStudentExtraCA.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENStudentExtraCA.InternalRecursiveSave();
		}


		public RCUserStudentExtraCARecord Duplicate() {
			RCUserStudentExtraCARecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentExtraCA = (ENStudentExtraCAEntityRecord) this.ssENStudentExtraCA.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentExtraCA.ToXml(this, recordElem, "StudentExtraCA", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentextraca") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentExtraCA")) variable.Value = ssENStudentExtraCA; else variable.Optimized = true;
				variable.SetFieldName("studentextraca");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentExtraCA) {
				return ssENStudentExtraCA;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentExtraCA.FillFromOther((IRecord) other.AttributeGet(IdStudentExtraCA));
		}
	} // RCUserStudentExtraCARecord
	/// <summary>
	/// Structure <code>RCRewardRewardReasonRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRewardRewardReasonRecord: ISerializable, ITypedRecord<RCRewardRewardReasonRecord> {
		private static readonly GlobalObjectKey IdReward = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*PQCIEsZWtzfWsOwKuqu68w");
		private static readonly GlobalObjectKey IdRewardReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*VnI1Nn2gsRO3cZ0+3CUAbQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Reward")]
		public ENRewardEntityRecord ssENReward;

		[System.Xml.Serialization.XmlElement("RewardReason")]
		public ENRewardReasonEntityRecord ssENRewardReason;


		public BitArray OptimizedAttributes;

		public RCRewardRewardReasonRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENReward = new ENRewardEntityRecord(null);
			ssENRewardReason = new ENRewardReasonEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(7, false);
			all[1] = new BitArray(2, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENReward.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENRewardReason.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENReward.OptimizedAttributes = value[0];
					ssENRewardReason.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENReward.OptimizedAttributes;
				all[1] = ssENRewardReason.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENReward.Read(r, ref index);
			ssENRewardReason.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRewardRewardReasonRecord r) {
			this = r;
		}


		public static bool operator == (RCRewardRewardReasonRecord a, RCRewardRewardReasonRecord b) {
			if (a.ssENReward != b.ssENReward) return false;
			if (a.ssENRewardReason != b.ssENRewardReason) return false;
			return true;
		}

		public static bool operator != (RCRewardRewardReasonRecord a, RCRewardRewardReasonRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRewardRewardReasonRecord)) return false;
			return (this == (RCRewardRewardReasonRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENReward.GetHashCode()
				^ ssENRewardReason.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRewardRewardReasonRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENReward = new ENRewardEntityRecord(null);
			ssENRewardReason = new ENRewardReasonEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENReward = (ENRewardEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENRewardReason = (ENRewardReasonEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENReward.RecursiveReset();
			ssENRewardReason.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENReward.InternalRecursiveSave();
			ssENRewardReason.InternalRecursiveSave();
		}


		public RCRewardRewardReasonRecord Duplicate() {
			RCRewardRewardReasonRecord t;
			t.ssENReward = (ENRewardEntityRecord) this.ssENReward.Duplicate();
			t.ssENRewardReason = (ENRewardReasonEntityRecord) this.ssENRewardReason.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENReward.ToXml(this, recordElem, "Reward", detailLevel - 1);
				ssENRewardReason.ToXml(this, recordElem, "RewardReason", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "reward") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Reward")) variable.Value = ssENReward; else variable.Optimized = true;
				variable.SetFieldName("reward");
			} else if (head == "rewardreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RewardReason")) variable.Value = ssENRewardReason; else variable.Optimized = true;
				variable.SetFieldName("rewardreason");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdReward) {
				return ssENReward;
			} else if (key == IdRewardReason) {
				return ssENRewardReason;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENReward.FillFromOther((IRecord) other.AttributeGet(IdReward));
			ssENRewardReason.FillFromOther((IRecord) other.AttributeGet(IdRewardReason));
		}
	} // RCRewardRewardReasonRecord
	/// <summary>
	/// Structure
	///  <code>RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord: ISerializable, ITypedRecord<RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*JCU_l8wQjPsCdWy288Jusw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdUser_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5F23_wlsRH5bBFQUXYstpQ");
		private static readonly GlobalObjectKey IdRiskAssessmentSSPReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*4l2tdtPDjzGTJ8nqfa847w");
		private static readonly GlobalObjectKey IdRiskAssessment = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NV6tF5Chu6exdZbe80vBxw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("User_2")]
		public ENUserEntityRecord ssENUser_2;

		[System.Xml.Serialization.XmlElement("RiskAssessmentSSPReason")]
		public ENRiskAssessmentSSPReasonEntityRecord ssENRiskAssessmentSSPReason;

		[System.Xml.Serialization.XmlElement("RiskAssessment")]
		public ENRiskAssessmentEntityRecord ssENRiskAssessment;


		public BitArray OptimizedAttributes;

		public RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssStudentReference = "";
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENRiskAssessmentSSPReason = new ENRiskAssessmentSSPReasonEntityRecord(null);
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(11, false);
			all[3] = new BitArray(4, false);
			all[4] = new BitArray(22, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENUser_2.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENRiskAssessmentSSPReason.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENRiskAssessment.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENUser_2.OptimizedAttributes = value[2];
					ssENRiskAssessmentSSPReason.OptimizedAttributes = value[3];
					ssENRiskAssessment.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENUser_2.OptimizedAttributes;
				all[3] = ssENRiskAssessmentSSPReason.OptimizedAttributes;
				all[4] = ssENRiskAssessment.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssStudentReference = r.ReadTextEntityReference(index++, "StudentStudentReferenceUserUser_2RiskAssessmentSSPReasonRiskAssessmentRecord.StudentReference", "");
			ssENUser.Read(r, ref index);
			ssENUser_2.Read(r, ref index);
			ssENRiskAssessmentSSPReason.Read(r, ref index);
			ssENRiskAssessment.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord a, RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENUser_2 != b.ssENUser_2) return false;
			if (a.ssENRiskAssessmentSSPReason != b.ssENRiskAssessmentSSPReason) return false;
			if (a.ssENRiskAssessment != b.ssENRiskAssessment) return false;
			return true;
		}

		public static bool operator != (RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord a, RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord)) return false;
			return (this == (RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENUser_2.GetHashCode()
				^ ssENRiskAssessmentSSPReason.GetHashCode()
				^ ssENRiskAssessment.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssStudentReference = "";
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENRiskAssessmentSSPReason = new ENRiskAssessmentSSPReasonEntityRecord(null);
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENUser_2 = (ENUserEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENRiskAssessmentSSPReason = (ENRiskAssessmentSSPReasonEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssENRiskAssessment = (ENRiskAssessmentEntityRecord) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENUser_2.RecursiveReset();
			ssENRiskAssessmentSSPReason.RecursiveReset();
			ssENRiskAssessment.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENUser_2.InternalRecursiveSave();
			ssENRiskAssessmentSSPReason.InternalRecursiveSave();
			ssENRiskAssessment.InternalRecursiveSave();
		}


		public RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord Duplicate() {
			RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssStudentReference = this.ssStudentReference;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENUser_2 = (ENUserEntityRecord) this.ssENUser_2.Duplicate();
			t.ssENRiskAssessmentSSPReason = (ENRiskAssessmentSSPReasonEntityRecord) this.ssENRiskAssessmentSSPReason.Duplicate();
			t.ssENRiskAssessment = (ENRiskAssessmentEntityRecord) this.ssENRiskAssessment.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, "StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENUser_2.ToXml(this, recordElem, "User_2", detailLevel - 1);
				ssENRiskAssessmentSSPReason.ToXml(this, recordElem, "RiskAssessmentSSPReason", detailLevel - 1);
				ssENRiskAssessment.ToXml(this, recordElem, "RiskAssessment", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "user_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_2")) variable.Value = ssENUser_2; else variable.Optimized = true;
				variable.SetFieldName("user_2");
			} else if (head == "riskassessmentsspreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentSSPReason")) variable.Value = ssENRiskAssessmentSSPReason; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentsspreason");
			} else if (head == "riskassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessment")) variable.Value = ssENRiskAssessment; else variable.Optimized = true;
				variable.SetFieldName("riskassessment");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdUser_2) {
				return ssENUser_2;
			} else if (key == IdRiskAssessmentSSPReason) {
				return ssENRiskAssessmentSSPReason;
			} else if (key == IdRiskAssessment) {
				return ssENRiskAssessment;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENUser_2.FillFromOther((IRecord) other.AttributeGet(IdUser_2));
			ssENRiskAssessmentSSPReason.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentSSPReason));
			ssENRiskAssessment.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessment));
		}
	} // RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord
	/// <summary>
	/// Structure
	///  <code>RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectio
	/// nsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord: ISerializable, ITypedRecord<RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdUser_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5F23_wlsRH5bBFQUXYstpQ");
		private static readonly GlobalObjectKey IdUser_3 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*3m4CTKdXK9VzFK1uagUePg");
		private static readonly GlobalObjectKey IdUser_4 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*T2A2_gBynJsk2mi1M1hsyQ");
		private static readonly GlobalObjectKey IdUser_5 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Uy0SyW43yWi5fQAUlrRqtg");
		private static readonly GlobalObjectKey IdUser_6 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*UdvieloQ7mGAK+n95vulfA");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");
		private static readonly GlobalObjectKey IdProgressReportSection = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QQJwCkGhCxsjtT_ejR61nw");
		private static readonly GlobalObjectKey IdProgressReportSections = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5rigJ8jxOBPww+p4Cyr8Og");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("User_2")]
		public ENUserEntityRecord ssENUser_2;

		[System.Xml.Serialization.XmlElement("User_3")]
		public ENUserEntityRecord ssENUser_3;

		[System.Xml.Serialization.XmlElement("User_4")]
		public ENUserEntityRecord ssENUser_4;

		[System.Xml.Serialization.XmlElement("User_5")]
		public ENUserEntityRecord ssENUser_5;

		[System.Xml.Serialization.XmlElement("User_6")]
		public ENUserEntityRecord ssENUser_6;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;

		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;

		[System.Xml.Serialization.XmlElement("ProgressReportSection")]
		public ENProgressReportSectionEntityRecord ssENProgressReportSection;

		[System.Xml.Serialization.XmlElement("ProgressReportSections")]
		public ENProgressReportSectionsEntityRecord ssENProgressReportSections;


		public BitArray OptimizedAttributes;

		public RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENUser_3 = new ENUserEntityRecord(null);
			ssENUser_4 = new ENUserEntityRecord(null);
			ssENUser_5 = new ENUserEntityRecord(null);
			ssENUser_6 = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[11];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(11, false);
			all[3] = new BitArray(11, false);
			all[4] = new BitArray(11, false);
			all[5] = new BitArray(11, false);
			all[6] = new BitArray(11, false);
			all[7] = null;
			all[8] = new BitArray(23, false);
			all[9] = new BitArray(49, false);
			all[10] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENUser_2.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENUser_3.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENUser_4.OptimizedAttributes = GetDefaultOptimizedValues()[4];
					ssENUser_5.OptimizedAttributes = GetDefaultOptimizedValues()[5];
					ssENUser_6.OptimizedAttributes = GetDefaultOptimizedValues()[6];
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[8];
					ssENProgressReportSection.OptimizedAttributes = GetDefaultOptimizedValues()[9];
					ssENProgressReportSections.OptimizedAttributes = GetDefaultOptimizedValues()[10];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENUser_2.OptimizedAttributes = value[2];
					ssENUser_3.OptimizedAttributes = value[3];
					ssENUser_4.OptimizedAttributes = value[4];
					ssENUser_5.OptimizedAttributes = value[5];
					ssENUser_6.OptimizedAttributes = value[6];
					ssSTBoolean.OptimizedAttributes = value[7];
					ssENProgressReport.OptimizedAttributes = value[8];
					ssENProgressReportSection.OptimizedAttributes = value[9];
					ssENProgressReportSections.OptimizedAttributes = value[10];
				}
			}
			get {
				BitArray[] all = new BitArray[11];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENUser_2.OptimizedAttributes;
				all[3] = ssENUser_3.OptimizedAttributes;
				all[4] = ssENUser_4.OptimizedAttributes;
				all[5] = ssENUser_5.OptimizedAttributes;
				all[6] = ssENUser_6.OptimizedAttributes;
				all[7] = null;
				all[8] = ssENProgressReport.OptimizedAttributes;
				all[9] = ssENProgressReportSection.OptimizedAttributes;
				all[10] = ssENProgressReportSections.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENUser_2.Read(r, ref index);
			ssENUser_3.Read(r, ref index);
			ssENUser_4.Read(r, ref index);
			ssENUser_5.Read(r, ref index);
			ssENUser_6.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
			ssENProgressReport.Read(r, ref index);
			ssENProgressReportSection.Read(r, ref index);
			ssENProgressReportSections.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord a, RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENUser_2 != b.ssENUser_2) return false;
			if (a.ssENUser_3 != b.ssENUser_3) return false;
			if (a.ssENUser_4 != b.ssENUser_4) return false;
			if (a.ssENUser_5 != b.ssENUser_5) return false;
			if (a.ssENUser_6 != b.ssENUser_6) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			if (a.ssENProgressReportSection != b.ssENProgressReportSection) return false;
			if (a.ssENProgressReportSections != b.ssENProgressReportSections) return false;
			return true;
		}

		public static bool operator != (RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord a, RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord)) return false;
			return (this == (RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENUser_2.GetHashCode()
				^ ssENUser_3.GetHashCode()
				^ ssENUser_4.GetHashCode()
				^ ssENUser_5.GetHashCode()
				^ ssENUser_6.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				^ ssENProgressReportSection.GetHashCode()
				^ ssENProgressReportSections.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENUser_3 = new ENUserEntityRecord(null);
			ssENUser_4 = new ENUserEntityRecord(null);
			ssENUser_5 = new ENUserEntityRecord(null);
			ssENUser_6 = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENUser_2 = (ENUserEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENUser_3 = (ENUserEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENUser_4 = (ENUserEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssENUser_5 = (ENUserEntityRecord) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssENUser_6 = (ENUserEntityRecord) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssENProgressReportSection = (ENProgressReportSectionEntityRecord) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) info.GetValue(fields[10] .Name, fields[10] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENUser_2.RecursiveReset();
			ssENUser_3.RecursiveReset();
			ssENUser_4.RecursiveReset();
			ssENUser_5.RecursiveReset();
			ssENUser_6.RecursiveReset();
			ssSTBoolean.RecursiveReset();
			ssENProgressReport.RecursiveReset();
			ssENProgressReportSection.RecursiveReset();
			ssENProgressReportSections.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENUser_2.InternalRecursiveSave();
			ssENUser_3.InternalRecursiveSave();
			ssENUser_4.InternalRecursiveSave();
			ssENUser_5.InternalRecursiveSave();
			ssENUser_6.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
			ssENProgressReport.InternalRecursiveSave();
			ssENProgressReportSection.InternalRecursiveSave();
			ssENProgressReportSections.InternalRecursiveSave();
		}


		public RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord Duplicate() {
			RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENUser_2 = (ENUserEntityRecord) this.ssENUser_2.Duplicate();
			t.ssENUser_3 = (ENUserEntityRecord) this.ssENUser_3.Duplicate();
			t.ssENUser_4 = (ENUserEntityRecord) this.ssENUser_4.Duplicate();
			t.ssENUser_5 = (ENUserEntityRecord) this.ssENUser_5.Duplicate();
			t.ssENUser_6 = (ENUserEntityRecord) this.ssENUser_6.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.ssENProgressReportSection = (ENProgressReportSectionEntityRecord) this.ssENProgressReportSection.Duplicate();
			t.ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) this.ssENProgressReportSections.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENUser_2.ToXml(this, recordElem, "User_2", detailLevel - 1);
				ssENUser_3.ToXml(this, recordElem, "User_3", detailLevel - 1);
				ssENUser_4.ToXml(this, recordElem, "User_4", detailLevel - 1);
				ssENUser_5.ToXml(this, recordElem, "User_5", detailLevel - 1);
				ssENUser_6.ToXml(this, recordElem, "User_6", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
				ssENProgressReportSection.ToXml(this, recordElem, "ProgressReportSection", detailLevel - 1);
				ssENProgressReportSections.ToXml(this, recordElem, "ProgressReportSections", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "user_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_2")) variable.Value = ssENUser_2; else variable.Optimized = true;
				variable.SetFieldName("user_2");
			} else if (head == "user_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_3")) variable.Value = ssENUser_3; else variable.Optimized = true;
				variable.SetFieldName("user_3");
			} else if (head == "user_4") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_4")) variable.Value = ssENUser_4; else variable.Optimized = true;
				variable.SetFieldName("user_4");
			} else if (head == "user_5") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_5")) variable.Value = ssENUser_5; else variable.Optimized = true;
				variable.SetFieldName("user_5");
			} else if (head == "user_6") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_6")) variable.Value = ssENUser_6; else variable.Optimized = true;
				variable.SetFieldName("user_6");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			} else if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			} else if (head == "progressreportsection") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSection")) variable.Value = ssENProgressReportSection; else variable.Optimized = true;
				variable.SetFieldName("progressreportsection");
			} else if (head == "progressreportsections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSections")) variable.Value = ssENProgressReportSections; else variable.Optimized = true;
				variable.SetFieldName("progressreportsections");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdUser_2) {
				return ssENUser_2;
			} else if (key == IdUser_3) {
				return ssENUser_3;
			} else if (key == IdUser_4) {
				return ssENUser_4;
			} else if (key == IdUser_5) {
				return ssENUser_5;
			} else if (key == IdUser_6) {
				return ssENUser_6;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else if (key == IdProgressReport) {
				return ssENProgressReport;
			} else if (key == IdProgressReportSection) {
				return ssENProgressReportSection;
			} else if (key == IdProgressReportSections) {
				return ssENProgressReportSections;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENUser_2.FillFromOther((IRecord) other.AttributeGet(IdUser_2));
			ssENUser_3.FillFromOther((IRecord) other.AttributeGet(IdUser_3));
			ssENUser_4.FillFromOther((IRecord) other.AttributeGet(IdUser_4));
			ssENUser_5.FillFromOther((IRecord) other.AttributeGet(IdUser_5));
			ssENUser_6.FillFromOther((IRecord) other.AttributeGet(IdUser_6));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
			ssENProgressReportSection.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSection));
			ssENProgressReportSections.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSections));
		}
	} // RCGroupUserUserUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord
	/// <summary>
	/// Structure
	///  <code>RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord: ISerializable, ITypedRecord<RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord> {
		private static readonly GlobalObjectKey IdStaff = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*g7SxeiYo0dIB7YXPz8Xkpg");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdRAGStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*24GX8LQ_aRQhomR6Kb4nDw");
		private static readonly GlobalObjectKey IdSafeguardingIssue = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SAAZcYT_EnM1GejsKShLag");
		private static readonly GlobalObjectKey IdSafeguardingIssueType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*XqQ7dChktoD2+fflQpDEeA");
		private static readonly GlobalObjectKey IdSafeguardingOutcome = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Xvp98xSRmKOHSMeOb1XR4w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Staff")]
		public ENStaffEntityRecord ssENStaff;

		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("RAGStatus")]
		public ENRAGStatusEntityRecord ssENRAGStatus;

		[System.Xml.Serialization.XmlElement("SafeguardingIssue")]
		public ENSafeguardingIssueEntityRecord ssENSafeguardingIssue;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueType")]
		public ENSafeguardingIssueTypeEntityRecord ssENSafeguardingIssueType;

		[System.Xml.Serialization.XmlElement("SafeguardingOutcome")]
		public ENSafeguardingOutcomeEntityRecord ssENSafeguardingOutcome;


		public BitArray OptimizedAttributes;

		public RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			ssENSafeguardingIssueType = new ENSafeguardingIssueTypeEntityRecord(null);
			ssENSafeguardingOutcome = new ENSafeguardingOutcomeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[6];
			all[0] = new BitArray(15, false);
			all[1] = new BitArray(27, false);
			all[2] = new BitArray(5, false);
			all[3] = new BitArray(18, false);
			all[4] = new BitArray(4, false);
			all[5] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStaff.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENRAGStatus.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENSafeguardingIssue.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENSafeguardingIssueType.OptimizedAttributes = GetDefaultOptimizedValues()[4];
					ssENSafeguardingOutcome.OptimizedAttributes = GetDefaultOptimizedValues()[5];
				} else {
					ssENStaff.OptimizedAttributes = value[0];
					ssENStudent.OptimizedAttributes = value[1];
					ssENRAGStatus.OptimizedAttributes = value[2];
					ssENSafeguardingIssue.OptimizedAttributes = value[3];
					ssENSafeguardingIssueType.OptimizedAttributes = value[4];
					ssENSafeguardingOutcome.OptimizedAttributes = value[5];
				}
			}
			get {
				BitArray[] all = new BitArray[6];
				all[0] = ssENStaff.OptimizedAttributes;
				all[1] = ssENStudent.OptimizedAttributes;
				all[2] = ssENRAGStatus.OptimizedAttributes;
				all[3] = ssENSafeguardingIssue.OptimizedAttributes;
				all[4] = ssENSafeguardingIssueType.OptimizedAttributes;
				all[5] = ssENSafeguardingOutcome.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStaff.Read(r, ref index);
			ssENStudent.Read(r, ref index);
			ssENRAGStatus.Read(r, ref index);
			ssENSafeguardingIssue.Read(r, ref index);
			ssENSafeguardingIssueType.Read(r, ref index);
			ssENSafeguardingOutcome.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord a, RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord b) {
			if (a.ssENStaff != b.ssENStaff) return false;
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENRAGStatus != b.ssENRAGStatus) return false;
			if (a.ssENSafeguardingIssue != b.ssENSafeguardingIssue) return false;
			if (a.ssENSafeguardingIssueType != b.ssENSafeguardingIssueType) return false;
			if (a.ssENSafeguardingOutcome != b.ssENSafeguardingOutcome) return false;
			return true;
		}

		public static bool operator != (RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord a, RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord)) return false;
			return (this == (RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStaff.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENRAGStatus.GetHashCode()
				^ ssENSafeguardingIssue.GetHashCode()
				^ ssENSafeguardingIssueType.GetHashCode()
				^ ssENSafeguardingOutcome.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			ssENSafeguardingIssueType = new ENSafeguardingIssueTypeEntityRecord(null);
			ssENSafeguardingOutcome = new ENSafeguardingOutcomeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStaff = (ENStaffEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENRAGStatus = (ENRAGStatusEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENSafeguardingIssueType = (ENSafeguardingIssueTypeEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssENSafeguardingOutcome = (ENSafeguardingOutcomeEntityRecord) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
			ssENStaff.RecursiveReset();
			ssENStudent.RecursiveReset();
			ssENRAGStatus.RecursiveReset();
			ssENSafeguardingIssue.RecursiveReset();
			ssENSafeguardingIssueType.RecursiveReset();
			ssENSafeguardingOutcome.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStaff.InternalRecursiveSave();
			ssENStudent.InternalRecursiveSave();
			ssENRAGStatus.InternalRecursiveSave();
			ssENSafeguardingIssue.InternalRecursiveSave();
			ssENSafeguardingIssueType.InternalRecursiveSave();
			ssENSafeguardingOutcome.InternalRecursiveSave();
		}


		public RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord Duplicate() {
			RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord t;
			t.ssENStaff = (ENStaffEntityRecord) this.ssENStaff.Duplicate();
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENRAGStatus = (ENRAGStatusEntityRecord) this.ssENRAGStatus.Duplicate();
			t.ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) this.ssENSafeguardingIssue.Duplicate();
			t.ssENSafeguardingIssueType = (ENSafeguardingIssueTypeEntityRecord) this.ssENSafeguardingIssueType.Duplicate();
			t.ssENSafeguardingOutcome = (ENSafeguardingOutcomeEntityRecord) this.ssENSafeguardingOutcome.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStaff.ToXml(this, recordElem, "Staff", detailLevel - 1);
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENRAGStatus.ToXml(this, recordElem, "RAGStatus", detailLevel - 1);
				ssENSafeguardingIssue.ToXml(this, recordElem, "SafeguardingIssue", detailLevel - 1);
				ssENSafeguardingIssueType.ToXml(this, recordElem, "SafeguardingIssueType", detailLevel - 1);
				ssENSafeguardingOutcome.ToXml(this, recordElem, "SafeguardingOutcome", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staff") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Staff")) variable.Value = ssENStaff; else variable.Optimized = true;
				variable.SetFieldName("staff");
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "ragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatus")) variable.Value = ssENRAGStatus; else variable.Optimized = true;
				variable.SetFieldName("ragstatus");
			} else if (head == "safeguardingissue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssue")) variable.Value = ssENSafeguardingIssue; else variable.Optimized = true;
				variable.SetFieldName("safeguardingissue");
			} else if (head == "safeguardingissuetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssueType")) variable.Value = ssENSafeguardingIssueType; else variable.Optimized = true;
				variable.SetFieldName("safeguardingissuetype");
			} else if (head == "safeguardingoutcome") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingOutcome")) variable.Value = ssENSafeguardingOutcome; else variable.Optimized = true;
				variable.SetFieldName("safeguardingoutcome");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaff) {
				return ssENStaff;
			} else if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdRAGStatus) {
				return ssENRAGStatus;
			} else if (key == IdSafeguardingIssue) {
				return ssENSafeguardingIssue;
			} else if (key == IdSafeguardingIssueType) {
				return ssENSafeguardingIssueType;
			} else if (key == IdSafeguardingOutcome) {
				return ssENSafeguardingOutcome;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStaff.FillFromOther((IRecord) other.AttributeGet(IdStaff));
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENRAGStatus.FillFromOther((IRecord) other.AttributeGet(IdRAGStatus));
			ssENSafeguardingIssue.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingIssue));
			ssENSafeguardingIssueType.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingIssueType));
			ssENSafeguardingOutcome.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingOutcome));
		}
	} // RCStaffStudentRAGStatusSafeguardingIssueSafeguardingIssueTypeSafeguardingOutcomeRecord
	/// <summary>
	/// Structure <code>RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord: ISerializable, ITypedRecord<RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord> {
		private static readonly GlobalObjectKey IdCategory = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QOorPFvJI1gzBEfDKCy9mw");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdUser_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5F23_wlsRH5bBFQUXYstpQ");
		private static readonly GlobalObjectKey IdRAGStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*24GX8LQ_aRQhomR6Kb4nDw");
		private static readonly GlobalObjectKey IdStudentCategoryRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ST8QIZ08_7yz1mT7xO_vSw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Category")]
		public ENCategoryEntityRecord ssENCategory;

		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("User_2")]
		public ENUserEntityRecord ssENUser_2;

		[System.Xml.Serialization.XmlElement("RAGStatus")]
		public ENRAGStatusEntityRecord ssENRAGStatus;

		[System.Xml.Serialization.XmlElement("StudentCategoryRAG")]
		public ENStudentCategoryRAGEntityRecord ssENStudentCategoryRAG;


		public BitArray OptimizedAttributes;

		public RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCategory = new ENCategoryEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENStudentCategoryRAG = new ENStudentCategoryRAGEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[6];
			all[0] = new BitArray(5, false);
			all[1] = new BitArray(27, false);
			all[2] = new BitArray(11, false);
			all[3] = new BitArray(11, false);
			all[4] = new BitArray(5, false);
			all[5] = new BitArray(12, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCategory.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENUser_2.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENRAGStatus.OptimizedAttributes = GetDefaultOptimizedValues()[4];
					ssENStudentCategoryRAG.OptimizedAttributes = GetDefaultOptimizedValues()[5];
				} else {
					ssENCategory.OptimizedAttributes = value[0];
					ssENStudent.OptimizedAttributes = value[1];
					ssENUser.OptimizedAttributes = value[2];
					ssENUser_2.OptimizedAttributes = value[3];
					ssENRAGStatus.OptimizedAttributes = value[4];
					ssENStudentCategoryRAG.OptimizedAttributes = value[5];
				}
			}
			get {
				BitArray[] all = new BitArray[6];
				all[0] = ssENCategory.OptimizedAttributes;
				all[1] = ssENStudent.OptimizedAttributes;
				all[2] = ssENUser.OptimizedAttributes;
				all[3] = ssENUser_2.OptimizedAttributes;
				all[4] = ssENRAGStatus.OptimizedAttributes;
				all[5] = ssENStudentCategoryRAG.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCategory.Read(r, ref index);
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENUser_2.Read(r, ref index);
			ssENRAGStatus.Read(r, ref index);
			ssENStudentCategoryRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord a, RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord b) {
			if (a.ssENCategory != b.ssENCategory) return false;
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENUser_2 != b.ssENUser_2) return false;
			if (a.ssENRAGStatus != b.ssENRAGStatus) return false;
			if (a.ssENStudentCategoryRAG != b.ssENStudentCategoryRAG) return false;
			return true;
		}

		public static bool operator != (RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord a, RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord)) return false;
			return (this == (RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCategory.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENUser_2.GetHashCode()
				^ ssENRAGStatus.GetHashCode()
				^ ssENStudentCategoryRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCategory = new ENCategoryEntityRecord(null);
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENStudentCategoryRAG = new ENStudentCategoryRAGEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCategory = (ENCategoryEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENUser_2 = (ENUserEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENRAGStatus = (ENRAGStatusEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssENStudentCategoryRAG = (ENStudentCategoryRAGEntityRecord) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
			ssENCategory.RecursiveReset();
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENUser_2.RecursiveReset();
			ssENRAGStatus.RecursiveReset();
			ssENStudentCategoryRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCategory.InternalRecursiveSave();
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENUser_2.InternalRecursiveSave();
			ssENRAGStatus.InternalRecursiveSave();
			ssENStudentCategoryRAG.InternalRecursiveSave();
		}


		public RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord Duplicate() {
			RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord t;
			t.ssENCategory = (ENCategoryEntityRecord) this.ssENCategory.Duplicate();
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENUser_2 = (ENUserEntityRecord) this.ssENUser_2.Duplicate();
			t.ssENRAGStatus = (ENRAGStatusEntityRecord) this.ssENRAGStatus.Duplicate();
			t.ssENStudentCategoryRAG = (ENStudentCategoryRAGEntityRecord) this.ssENStudentCategoryRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCategory.ToXml(this, recordElem, "Category", detailLevel - 1);
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENUser_2.ToXml(this, recordElem, "User_2", detailLevel - 1);
				ssENRAGStatus.ToXml(this, recordElem, "RAGStatus", detailLevel - 1);
				ssENStudentCategoryRAG.ToXml(this, recordElem, "StudentCategoryRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "category") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Category")) variable.Value = ssENCategory; else variable.Optimized = true;
				variable.SetFieldName("category");
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "user_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_2")) variable.Value = ssENUser_2; else variable.Optimized = true;
				variable.SetFieldName("user_2");
			} else if (head == "ragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatus")) variable.Value = ssENRAGStatus; else variable.Optimized = true;
				variable.SetFieldName("ragstatus");
			} else if (head == "studentcategoryrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCategoryRAG")) variable.Value = ssENStudentCategoryRAG; else variable.Optimized = true;
				variable.SetFieldName("studentcategoryrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCategory) {
				return ssENCategory;
			} else if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdUser_2) {
				return ssENUser_2;
			} else if (key == IdRAGStatus) {
				return ssENRAGStatus;
			} else if (key == IdStudentCategoryRAG) {
				return ssENStudentCategoryRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCategory.FillFromOther((IRecord) other.AttributeGet(IdCategory));
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENUser_2.FillFromOther((IRecord) other.AttributeGet(IdUser_2));
			ssENRAGStatus.FillFromOther((IRecord) other.AttributeGet(IdRAGStatus));
			ssENStudentCategoryRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentCategoryRAG));
		}
	} // RCCategoryStudentUserUserRAGStatusStudentCategoryRAGRecord
	/// <summary>
	/// Structure <code>RCStudent_GroupStudentRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudent_GroupStudentRAGRecord: ISerializable, ITypedRecord<RCStudent_GroupStudentRAGRecord> {
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*APBh_wXtPfFnwTyOabB9Vg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public ENStudentRAGEntityRecord ssENStudentRAG;


		public BitArray OptimizedAttributes;

		public RCStudent_GroupStudentRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentRAG.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENStudent_Group.OptimizedAttributes = value[0];
					ssENStudentRAG.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENStudent_Group.OptimizedAttributes;
				all[1] = ssENStudentRAG.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent_Group.Read(r, ref index);
			ssENStudentRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudent_GroupStudentRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCStudent_GroupStudentRAGRecord a, RCStudent_GroupStudentRAGRecord b) {
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			if (a.ssENStudentRAG != b.ssENStudentRAG) return false;
			return true;
		}

		public static bool operator != (RCStudent_GroupStudentRAGRecord a, RCStudent_GroupStudentRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudent_GroupStudentRAGRecord)) return false;
			return (this == (RCStudent_GroupStudentRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				^ ssENStudentRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudent_GroupStudentRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentRAG = (ENStudentRAGEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent_Group.RecursiveReset();
			ssENStudentRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent_Group.InternalRecursiveSave();
			ssENStudentRAG.InternalRecursiveSave();
		}


		public RCStudent_GroupStudentRAGRecord Duplicate() {
			RCStudent_GroupStudentRAGRecord t;
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.ssENStudentRAG = (ENStudentRAGEntityRecord) this.ssENStudentRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
				ssENStudentRAG.ToXml(this, recordElem, "StudentRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			} else if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssENStudentRAG; else variable.Optimized = true;
				variable.SetFieldName("studentrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else if (key == IdStudentRAG) {
				return ssENStudentRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
			ssENStudentRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentRAG));
		}
	} // RCStudent_GroupStudentRAGRecord
	/// <summary>
	/// Structure <code>RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord: ISerializable, ITypedRecord<RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdStudentLog = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*a207hFuVwR8WZj05PrSs2A");
		private static readonly GlobalObjectKey IdCommunicationType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NHxPRDj0R5jvewjOKHf6yg");
		private static readonly GlobalObjectKey IdStudentLogType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*O+r9xki4DgSh6sLDbQOVWg");
		private static readonly GlobalObjectKey IdCommunication = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Mje+JTHR9VpPmgPWMth_iA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("StudentLog")]
		public ENStudentLogEntityRecord ssENStudentLog;

		[System.Xml.Serialization.XmlElement("CommunicationType")]
		public ENCommunicationTypeEntityRecord ssENCommunicationType;

		[System.Xml.Serialization.XmlElement("StudentLogType")]
		public ENStudentLogTypeEntityRecord ssENStudentLogType;

		[System.Xml.Serialization.XmlElement("Communication")]
		public ENCommunicationEntityRecord ssENCommunication;


		public BitArray OptimizedAttributes;

		public RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			ssENCommunicationType = new ENCommunicationTypeEntityRecord(null);
			ssENStudentLogType = new ENStudentLogTypeEntityRecord(null);
			ssENCommunication = new ENCommunicationEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(11, false);
			all[1] = new BitArray(44, false);
			all[2] = new BitArray(4, false);
			all[3] = new BitArray(3, false);
			all[4] = new BitArray(13, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENStudentLog.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENCommunicationType.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENStudentLogType.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENCommunication.OptimizedAttributes = GetDefaultOptimizedValues()[4];
				} else {
					ssENUser.OptimizedAttributes = value[0];
					ssENStudentLog.OptimizedAttributes = value[1];
					ssENCommunicationType.OptimizedAttributes = value[2];
					ssENStudentLogType.OptimizedAttributes = value[3];
					ssENCommunication.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENUser.OptimizedAttributes;
				all[1] = ssENStudentLog.OptimizedAttributes;
				all[2] = ssENCommunicationType.OptimizedAttributes;
				all[3] = ssENStudentLogType.OptimizedAttributes;
				all[4] = ssENCommunication.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
			ssENStudentLog.Read(r, ref index);
			ssENCommunicationType.Read(r, ref index);
			ssENStudentLogType.Read(r, ref index);
			ssENCommunication.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord r) {
			this = r;
		}


		public static bool operator == (RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord a, RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENStudentLog != b.ssENStudentLog) return false;
			if (a.ssENCommunicationType != b.ssENCommunicationType) return false;
			if (a.ssENStudentLogType != b.ssENStudentLogType) return false;
			if (a.ssENCommunication != b.ssENCommunication) return false;
			return true;
		}

		public static bool operator != (RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord a, RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord)) return false;
			return (this == (RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENStudentLog.GetHashCode()
				^ ssENCommunicationType.GetHashCode()
				^ ssENStudentLogType.GetHashCode()
				^ ssENCommunication.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			ssENCommunicationType = new ENCommunicationTypeEntityRecord(null);
			ssENStudentLogType = new ENStudentLogTypeEntityRecord(null);
			ssENCommunication = new ENCommunicationEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENStudentLog = (ENStudentLogEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENCommunicationType = (ENCommunicationTypeEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENStudentLogType = (ENStudentLogTypeEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENCommunication = (ENCommunicationEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
			ssENStudentLog.RecursiveReset();
			ssENCommunicationType.RecursiveReset();
			ssENStudentLogType.RecursiveReset();
			ssENCommunication.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
			ssENStudentLog.InternalRecursiveSave();
			ssENCommunicationType.InternalRecursiveSave();
			ssENStudentLogType.InternalRecursiveSave();
			ssENCommunication.InternalRecursiveSave();
		}


		public RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord Duplicate() {
			RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENStudentLog = (ENStudentLogEntityRecord) this.ssENStudentLog.Duplicate();
			t.ssENCommunicationType = (ENCommunicationTypeEntityRecord) this.ssENCommunicationType.Duplicate();
			t.ssENStudentLogType = (ENStudentLogTypeEntityRecord) this.ssENStudentLogType.Duplicate();
			t.ssENCommunication = (ENCommunicationEntityRecord) this.ssENCommunication.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENStudentLog.ToXml(this, recordElem, "StudentLog", detailLevel - 1);
				ssENCommunicationType.ToXml(this, recordElem, "CommunicationType", detailLevel - 1);
				ssENStudentLogType.ToXml(this, recordElem, "StudentLogType", detailLevel - 1);
				ssENCommunication.ToXml(this, recordElem, "Communication", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "studentlog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLog")) variable.Value = ssENStudentLog; else variable.Optimized = true;
				variable.SetFieldName("studentlog");
			} else if (head == "communicationtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CommunicationType")) variable.Value = ssENCommunicationType; else variable.Optimized = true;
				variable.SetFieldName("communicationtype");
			} else if (head == "studentlogtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLogType")) variable.Value = ssENStudentLogType; else variable.Optimized = true;
				variable.SetFieldName("studentlogtype");
			} else if (head == "communication") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Communication")) variable.Value = ssENCommunication; else variable.Optimized = true;
				variable.SetFieldName("communication");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else if (key == IdStudentLog) {
				return ssENStudentLog;
			} else if (key == IdCommunicationType) {
				return ssENCommunicationType;
			} else if (key == IdStudentLogType) {
				return ssENStudentLogType;
			} else if (key == IdCommunication) {
				return ssENCommunication;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENStudentLog.FillFromOther((IRecord) other.AttributeGet(IdStudentLog));
			ssENCommunicationType.FillFromOther((IRecord) other.AttributeGet(IdCommunicationType));
			ssENStudentLogType.FillFromOther((IRecord) other.AttributeGet(IdStudentLogType));
			ssENCommunication.FillFromOther((IRecord) other.AttributeGet(IdCommunication));
		}
	} // RCUserStudentLogCommunicationTypeStudentLogTypeCommunicationRecord
	/// <summary>
	/// Structure <code>RCTeamCurriculumLeadRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTeamCurriculumLeadRecord: ISerializable, ITypedRecord<RCTeamCurriculumLeadRecord> {
		private static readonly GlobalObjectKey IdTeam = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*UrEYi1EXWo8hCJTLLdojJQ");
		private static readonly GlobalObjectKey IdCurriculumLead = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6tjyPJSHDfWm1VQV9UR5NA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Team")]
		public ENTeamEntityRecord ssENTeam;

		[System.Xml.Serialization.XmlElement("CurriculumLead")]
		public ENCurriculumLeadEntityRecord ssENCurriculumLead;


		public BitArray OptimizedAttributes;

		public RCTeamCurriculumLeadRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENTeam = new ENTeamEntityRecord(null);
			ssENCurriculumLead = new ENCurriculumLeadEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(5, false);
			all[1] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENTeam.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENCurriculumLead.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENTeam.OptimizedAttributes = value[0];
					ssENCurriculumLead.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENTeam.OptimizedAttributes;
				all[1] = ssENCurriculumLead.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENTeam.Read(r, ref index);
			ssENCurriculumLead.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTeamCurriculumLeadRecord r) {
			this = r;
		}


		public static bool operator == (RCTeamCurriculumLeadRecord a, RCTeamCurriculumLeadRecord b) {
			if (a.ssENTeam != b.ssENTeam) return false;
			if (a.ssENCurriculumLead != b.ssENCurriculumLead) return false;
			return true;
		}

		public static bool operator != (RCTeamCurriculumLeadRecord a, RCTeamCurriculumLeadRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTeamCurriculumLeadRecord)) return false;
			return (this == (RCTeamCurriculumLeadRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENTeam.GetHashCode()
				^ ssENCurriculumLead.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTeamCurriculumLeadRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENTeam = new ENTeamEntityRecord(null);
			ssENCurriculumLead = new ENCurriculumLeadEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENTeam = (ENTeamEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENCurriculumLead = (ENCurriculumLeadEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENTeam.RecursiveReset();
			ssENCurriculumLead.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENTeam.InternalRecursiveSave();
			ssENCurriculumLead.InternalRecursiveSave();
		}


		public RCTeamCurriculumLeadRecord Duplicate() {
			RCTeamCurriculumLeadRecord t;
			t.ssENTeam = (ENTeamEntityRecord) this.ssENTeam.Duplicate();
			t.ssENCurriculumLead = (ENCurriculumLeadEntityRecord) this.ssENCurriculumLead.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENTeam.ToXml(this, recordElem, "Team", detailLevel - 1);
				ssENCurriculumLead.ToXml(this, recordElem, "CurriculumLead", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "team") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Team")) variable.Value = ssENTeam; else variable.Optimized = true;
				variable.SetFieldName("team");
			} else if (head == "curriculumlead") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurriculumLead")) variable.Value = ssENCurriculumLead; else variable.Optimized = true;
				variable.SetFieldName("curriculumlead");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTeam) {
				return ssENTeam;
			} else if (key == IdCurriculumLead) {
				return ssENCurriculumLead;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENTeam.FillFromOther((IRecord) other.AttributeGet(IdTeam));
			ssENCurriculumLead.FillFromOther((IRecord) other.AttributeGet(IdCurriculumLead));
		}
	} // RCTeamCurriculumLeadRecord
	/// <summary>
	/// Structure <code>RCStudentBooleanTextRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentBooleanTextRecord: ISerializable, ITypedRecord<RCStudentBooleanTextRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");
		private static readonly GlobalObjectKey IdText = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*nrWEDYn_xIdxrrSd+p8sOQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;

		[System.Xml.Serialization.XmlElement("Text")]
		public STTextStructure ssSTText;


		public BitArray OptimizedAttributes;

		public RCStudentBooleanTextRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssSTText = new STTextStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(27, false);
			all[1] = null;
			all[2] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssSTBoolean.OptimizedAttributes = value[1];
					ssSTText.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = null;
				all[2] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
			ssSTText.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentBooleanTextRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentBooleanTextRecord a, RCStudentBooleanTextRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			if (a.ssSTText != b.ssSTText) return false;
			return true;
		}

		public static bool operator != (RCStudentBooleanTextRecord a, RCStudentBooleanTextRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentBooleanTextRecord)) return false;
			return (this == (RCStudentBooleanTextRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				^ ssSTText.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentBooleanTextRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssSTText = new STTextStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTText = (STTextStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssSTBoolean.RecursiveReset();
			ssSTText.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
			ssSTText.InternalRecursiveSave();
		}


		public RCStudentBooleanTextRecord Duplicate() {
			RCStudentBooleanTextRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.ssSTText = (STTextStructure) this.ssSTText.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
				ssSTText.ToXml(this, recordElem, "Text", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			} else if (head == "text") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Text")) variable.Value = ssSTText; else variable.Optimized = true;
				variable.SetFieldName("text");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else if (key == IdText) {
				return ssSTText;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
			ssSTText.FillFromOther((IRecord) other.AttributeGet(IdText));
		}
	} // RCStudentBooleanTextRecord
	/// <summary>
	/// Structure <code>RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord: ISerializable, ITypedRecord<RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord> {
		private static readonly GlobalObjectKey IdRAGStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*24GX8LQ_aRQhomR6Kb4nDw");
		private static readonly GlobalObjectKey IdSafeguardingIssue = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SAAZcYT_EnM1GejsKShLag");
		private static readonly GlobalObjectKey IdSafeguardingIssueType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*XqQ7dChktoD2+fflQpDEeA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RAGStatus")]
		public ENRAGStatusEntityRecord ssENRAGStatus;

		[System.Xml.Serialization.XmlElement("SafeguardingIssue")]
		public ENSafeguardingIssueEntityRecord ssENSafeguardingIssue;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueType")]
		public ENSafeguardingIssueTypeEntityRecord ssENSafeguardingIssueType;


		public BitArray OptimizedAttributes;

		public RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			ssENSafeguardingIssueType = new ENSafeguardingIssueTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[3];
			all[0] = new BitArray(5, false);
			all[1] = new BitArray(18, false);
			all[2] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRAGStatus.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENSafeguardingIssue.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENSafeguardingIssueType.OptimizedAttributes = GetDefaultOptimizedValues()[2];
				} else {
					ssENRAGStatus.OptimizedAttributes = value[0];
					ssENSafeguardingIssue.OptimizedAttributes = value[1];
					ssENSafeguardingIssueType.OptimizedAttributes = value[2];
				}
			}
			get {
				BitArray[] all = new BitArray[3];
				all[0] = ssENRAGStatus.OptimizedAttributes;
				all[1] = ssENSafeguardingIssue.OptimizedAttributes;
				all[2] = ssENSafeguardingIssueType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRAGStatus.Read(r, ref index);
			ssENSafeguardingIssue.Read(r, ref index);
			ssENSafeguardingIssueType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord a, RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord b) {
			if (a.ssENRAGStatus != b.ssENRAGStatus) return false;
			if (a.ssENSafeguardingIssue != b.ssENSafeguardingIssue) return false;
			if (a.ssENSafeguardingIssueType != b.ssENSafeguardingIssueType) return false;
			return true;
		}

		public static bool operator != (RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord a, RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord)) return false;
			return (this == (RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRAGStatus.GetHashCode()
				^ ssENSafeguardingIssue.GetHashCode()
				^ ssENSafeguardingIssueType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRAGStatus = new ENRAGStatusEntityRecord(null);
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			ssENSafeguardingIssueType = new ENSafeguardingIssueTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRAGStatus = (ENRAGStatusEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENSafeguardingIssueType = (ENSafeguardingIssueTypeEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
			ssENRAGStatus.RecursiveReset();
			ssENSafeguardingIssue.RecursiveReset();
			ssENSafeguardingIssueType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRAGStatus.InternalRecursiveSave();
			ssENSafeguardingIssue.InternalRecursiveSave();
			ssENSafeguardingIssueType.InternalRecursiveSave();
		}


		public RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord Duplicate() {
			RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord t;
			t.ssENRAGStatus = (ENRAGStatusEntityRecord) this.ssENRAGStatus.Duplicate();
			t.ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) this.ssENSafeguardingIssue.Duplicate();
			t.ssENSafeguardingIssueType = (ENSafeguardingIssueTypeEntityRecord) this.ssENSafeguardingIssueType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRAGStatus.ToXml(this, recordElem, "RAGStatus", detailLevel - 1);
				ssENSafeguardingIssue.ToXml(this, recordElem, "SafeguardingIssue", detailLevel - 1);
				ssENSafeguardingIssueType.ToXml(this, recordElem, "SafeguardingIssueType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "ragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatus")) variable.Value = ssENRAGStatus; else variable.Optimized = true;
				variable.SetFieldName("ragstatus");
			} else if (head == "safeguardingissue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssue")) variable.Value = ssENSafeguardingIssue; else variable.Optimized = true;
				variable.SetFieldName("safeguardingissue");
			} else if (head == "safeguardingissuetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssueType")) variable.Value = ssENSafeguardingIssueType; else variable.Optimized = true;
				variable.SetFieldName("safeguardingissuetype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRAGStatus) {
				return ssENRAGStatus;
			} else if (key == IdSafeguardingIssue) {
				return ssENSafeguardingIssue;
			} else if (key == IdSafeguardingIssueType) {
				return ssENSafeguardingIssueType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRAGStatus.FillFromOther((IRecord) other.AttributeGet(IdRAGStatus));
			ssENSafeguardingIssue.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingIssue));
			ssENSafeguardingIssueType.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingIssueType));
		}
	} // RCRAGStatusSafeguardingIssueSafeguardingIssueTypeRecord
	/// <summary>
	/// Structure <code>RCRoleEspaceRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRoleEspaceRecord: ISerializable, ITypedRecord<RCRoleEspaceRecord> {
		private static readonly GlobalObjectKey IdRole = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*hAhjEym2paOekp4c3qQusQ");
		private static readonly GlobalObjectKey IdEspace = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ceECpyp3iZvBfiVEq20dKQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Role")]
		public ENRoleEntityRecord ssENRole;

		[System.Xml.Serialization.XmlElement("Espace")]
		public ENEspaceEntityRecord ssENEspace;


		public BitArray OptimizedAttributes;

		public RCRoleEspaceRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRole = new ENRoleEntityRecord(null);
			ssENEspace = new ENEspaceEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(7, false);
			all[1] = new BitArray(18, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRole.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENEspace.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENRole.OptimizedAttributes = value[0];
					ssENEspace.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENRole.OptimizedAttributes;
				all[1] = ssENEspace.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRole.Read(r, ref index);
			ssENEspace.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRoleEspaceRecord r) {
			this = r;
		}


		public static bool operator == (RCRoleEspaceRecord a, RCRoleEspaceRecord b) {
			if (a.ssENRole != b.ssENRole) return false;
			if (a.ssENEspace != b.ssENEspace) return false;
			return true;
		}

		public static bool operator != (RCRoleEspaceRecord a, RCRoleEspaceRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRoleEspaceRecord)) return false;
			return (this == (RCRoleEspaceRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRole.GetHashCode()
				^ ssENEspace.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRoleEspaceRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRole = new ENRoleEntityRecord(null);
			ssENEspace = new ENEspaceEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRole = (ENRoleEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENEspace = (ENEspaceEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENRole.RecursiveReset();
			ssENEspace.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRole.InternalRecursiveSave();
			ssENEspace.InternalRecursiveSave();
		}


		public RCRoleEspaceRecord Duplicate() {
			RCRoleEspaceRecord t;
			t.ssENRole = (ENRoleEntityRecord) this.ssENRole.Duplicate();
			t.ssENEspace = (ENEspaceEntityRecord) this.ssENEspace.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRole.ToXml(this, recordElem, "Role", detailLevel - 1);
				ssENEspace.ToXml(this, recordElem, "Espace", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "role") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Role")) variable.Value = ssENRole; else variable.Optimized = true;
				variable.SetFieldName("role");
			} else if (head == "espace") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Espace")) variable.Value = ssENEspace; else variable.Optimized = true;
				variable.SetFieldName("espace");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRole) {
				return ssENRole;
			} else if (key == IdEspace) {
				return ssENEspace;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRole.FillFromOther((IRecord) other.AttributeGet(IdRole));
			ssENEspace.FillFromOther((IRecord) other.AttributeGet(IdEspace));
		}
	} // RCRoleEspaceRecord
	/// <summary>
	/// Structure <code>RCSIASSupportDocumentsDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSIASSupportDocumentsDocumentsRecord: ISerializable, ITypedRecord<RCSIASSupportDocumentsDocumentsRecord> {
		private static readonly GlobalObjectKey IdSIASSupportDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*AkQlb2jVtGFw9bb2TeaeMw");
		private static readonly GlobalObjectKey IdDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*V+rMCyDoxxgjgWOZC2i4yw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SIASSupportDocuments")]
		public ENSIASSupportDocumentsEntityRecord ssENSIASSupportDocuments;

		[System.Xml.Serialization.XmlElement("Documents")]
		public ENDocumentsEntityRecord ssENDocuments;


		public BitArray OptimizedAttributes;

		public RCSIASSupportDocumentsDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSIASSupportDocuments = new ENSIASSupportDocumentsEntityRecord(null);
			ssENDocuments = new ENDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(5, false);
			all[1] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSIASSupportDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENSIASSupportDocuments.OptimizedAttributes = value[0];
					ssENDocuments.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENSIASSupportDocuments.OptimizedAttributes;
				all[1] = ssENDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSIASSupportDocuments.Read(r, ref index);
			ssENDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSIASSupportDocumentsDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCSIASSupportDocumentsDocumentsRecord a, RCSIASSupportDocumentsDocumentsRecord b) {
			if (a.ssENSIASSupportDocuments != b.ssENSIASSupportDocuments) return false;
			if (a.ssENDocuments != b.ssENDocuments) return false;
			return true;
		}

		public static bool operator != (RCSIASSupportDocumentsDocumentsRecord a, RCSIASSupportDocumentsDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSIASSupportDocumentsDocumentsRecord)) return false;
			return (this == (RCSIASSupportDocumentsDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSIASSupportDocuments.GetHashCode()
				^ ssENDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSIASSupportDocumentsDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSIASSupportDocuments = new ENSIASSupportDocumentsEntityRecord(null);
			ssENDocuments = new ENDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSIASSupportDocuments = (ENSIASSupportDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENDocuments = (ENDocumentsEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENSIASSupportDocuments.RecursiveReset();
			ssENDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSIASSupportDocuments.InternalRecursiveSave();
			ssENDocuments.InternalRecursiveSave();
		}


		public RCSIASSupportDocumentsDocumentsRecord Duplicate() {
			RCSIASSupportDocumentsDocumentsRecord t;
			t.ssENSIASSupportDocuments = (ENSIASSupportDocumentsEntityRecord) this.ssENSIASSupportDocuments.Duplicate();
			t.ssENDocuments = (ENDocumentsEntityRecord) this.ssENDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSIASSupportDocuments.ToXml(this, recordElem, "SIASSupportDocuments", detailLevel - 1);
				ssENDocuments.ToXml(this, recordElem, "Documents", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "siassupportdocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupportDocuments")) variable.Value = ssENSIASSupportDocuments; else variable.Optimized = true;
				variable.SetFieldName("siassupportdocuments");
			} else if (head == "documents") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Documents")) variable.Value = ssENDocuments; else variable.Optimized = true;
				variable.SetFieldName("documents");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSIASSupportDocuments) {
				return ssENSIASSupportDocuments;
			} else if (key == IdDocuments) {
				return ssENDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSIASSupportDocuments.FillFromOther((IRecord) other.AttributeGet(IdSIASSupportDocuments));
			ssENDocuments.FillFromOther((IRecord) other.AttributeGet(IdDocuments));
		}
	} // RCSIASSupportDocumentsDocumentsRecord
	/// <summary>
	/// Structure <code>RCTeamStringStringStringBooleanRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTeamStringStringStringBooleanRecord: ISerializable, ITypedRecord<RCTeamStringStringStringBooleanRecord> {
		private static readonly GlobalObjectKey IdTeam = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*UrEYi1EXWo8hCJTLLdojJQ");
		private static readonly GlobalObjectKey IdString = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5ltnC1EjdYReiJ9edGCgRA");
		private static readonly GlobalObjectKey IdString_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*PUNfB+DKv5tYvp534Va69w");
		private static readonly GlobalObjectKey IdString_3 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Vm9f8T2iqz1fcq478ZmJyw");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Team")]
		public ENTeamEntityRecord ssENTeam;

		[System.Xml.Serialization.XmlElement("String")]
		public STStringStructure ssSTString;

		[System.Xml.Serialization.XmlElement("String_2")]
		public STStringStructure ssSTString_2;

		[System.Xml.Serialization.XmlElement("String_3")]
		public STStringStructure ssSTString_3;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;


		public BitArray OptimizedAttributes;

		public RCTeamStringStringStringBooleanRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENTeam = new ENTeamEntityRecord(null);
			ssSTString = new STStringStructure(null);
			ssSTString_2 = new STStringStructure(null);
			ssSTString_3 = new STStringStructure(null);
			ssSTBoolean = new STBooleanStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[5];
			all[0] = new BitArray(5, false);
			all[1] = null;
			all[2] = null;
			all[3] = null;
			all[4] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENTeam.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENTeam.OptimizedAttributes = value[0];
					ssSTString.OptimizedAttributes = value[1];
					ssSTString_2.OptimizedAttributes = value[2];
					ssSTString_3.OptimizedAttributes = value[3];
					ssSTBoolean.OptimizedAttributes = value[4];
				}
			}
			get {
				BitArray[] all = new BitArray[5];
				all[0] = ssENTeam.OptimizedAttributes;
				all[1] = null;
				all[2] = null;
				all[3] = null;
				all[4] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENTeam.Read(r, ref index);
			ssSTString.Read(r, ref index);
			ssSTString_2.Read(r, ref index);
			ssSTString_3.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTeamStringStringStringBooleanRecord r) {
			this = r;
		}


		public static bool operator == (RCTeamStringStringStringBooleanRecord a, RCTeamStringStringStringBooleanRecord b) {
			if (a.ssENTeam != b.ssENTeam) return false;
			if (a.ssSTString != b.ssSTString) return false;
			if (a.ssSTString_2 != b.ssSTString_2) return false;
			if (a.ssSTString_3 != b.ssSTString_3) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			return true;
		}

		public static bool operator != (RCTeamStringStringStringBooleanRecord a, RCTeamStringStringStringBooleanRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTeamStringStringStringBooleanRecord)) return false;
			return (this == (RCTeamStringStringStringBooleanRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENTeam.GetHashCode()
				^ ssSTString.GetHashCode()
				^ ssSTString_2.GetHashCode()
				^ ssSTString_3.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTeamStringStringStringBooleanRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENTeam = new ENTeamEntityRecord(null);
			ssSTString = new STStringStructure(null);
			ssSTString_2 = new STStringStructure(null);
			ssSTString_3 = new STStringStructure(null);
			ssSTBoolean = new STBooleanStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENTeam = (ENTeamEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssSTString = (STStringStructure) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSTString_2 = (STStringStructure) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssSTString_3 = (STStringStructure) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
			ssENTeam.RecursiveReset();
			ssSTString.RecursiveReset();
			ssSTString_2.RecursiveReset();
			ssSTString_3.RecursiveReset();
			ssSTBoolean.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENTeam.InternalRecursiveSave();
			ssSTString.InternalRecursiveSave();
			ssSTString_2.InternalRecursiveSave();
			ssSTString_3.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
		}


		public RCTeamStringStringStringBooleanRecord Duplicate() {
			RCTeamStringStringStringBooleanRecord t;
			t.ssENTeam = (ENTeamEntityRecord) this.ssENTeam.Duplicate();
			t.ssSTString = (STStringStructure) this.ssSTString.Duplicate();
			t.ssSTString_2 = (STStringStructure) this.ssSTString_2.Duplicate();
			t.ssSTString_3 = (STStringStructure) this.ssSTString_3.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENTeam.ToXml(this, recordElem, "Team", detailLevel - 1);
				ssSTString.ToXml(this, recordElem, "String", detailLevel - 1);
				ssSTString_2.ToXml(this, recordElem, "String_2", detailLevel - 1);
				ssSTString_3.ToXml(this, recordElem, "String_3", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "team") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Team")) variable.Value = ssENTeam; else variable.Optimized = true;
				variable.SetFieldName("team");
			} else if (head == "string") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String")) variable.Value = ssSTString; else variable.Optimized = true;
				variable.SetFieldName("string");
			} else if (head == "string_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String_2")) variable.Value = ssSTString_2; else variable.Optimized = true;
				variable.SetFieldName("string_2");
			} else if (head == "string_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String_3")) variable.Value = ssSTString_3; else variable.Optimized = true;
				variable.SetFieldName("string_3");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTeam) {
				return ssENTeam;
			} else if (key == IdString) {
				return ssSTString;
			} else if (key == IdString_2) {
				return ssSTString_2;
			} else if (key == IdString_3) {
				return ssSTString_3;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENTeam.FillFromOther((IRecord) other.AttributeGet(IdTeam));
			ssSTString.FillFromOther((IRecord) other.AttributeGet(IdString));
			ssSTString_2.FillFromOther((IRecord) other.AttributeGet(IdString_2));
			ssSTString_3.FillFromOther((IRecord) other.AttributeGet(IdString_3));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
		}
	} // RCTeamStringStringStringBooleanRecord
	/// <summary>
	/// Structure
	///  <code>RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord
	/// </code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord: ISerializable, ITypedRecord<RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdUser_2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5F23_wlsRH5bBFQUXYstpQ");
		private static readonly GlobalObjectKey IdUser_3 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*3m4CTKdXK9VzFK1uagUePg");
		private static readonly GlobalObjectKey IdUser_4 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*T2A2_gBynJsk2mi1M1hsyQ");
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");
		private static readonly GlobalObjectKey IdProgressReportSection = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QQJwCkGhCxsjtT_ejR61nw");
		private static readonly GlobalObjectKey IdProgressReportSections = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5rigJ8jxOBPww+p4Cyr8Og");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("User_2")]
		public ENUserEntityRecord ssENUser_2;

		[System.Xml.Serialization.XmlElement("User_3")]
		public ENUserEntityRecord ssENUser_3;

		[System.Xml.Serialization.XmlElement("User_4")]
		public ENUserEntityRecord ssENUser_4;

		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;

		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;

		[System.Xml.Serialization.XmlElement("ProgressReportSection")]
		public ENProgressReportSectionEntityRecord ssENProgressReportSection;

		[System.Xml.Serialization.XmlElement("ProgressReportSections")]
		public ENProgressReportSectionsEntityRecord ssENProgressReportSections;


		public BitArray OptimizedAttributes;

		public RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENUser_3 = new ENUserEntityRecord(null);
			ssENUser_4 = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[9];
			all[0] = new BitArray(9, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(11, false);
			all[3] = new BitArray(11, false);
			all[4] = new BitArray(11, false);
			all[5] = null;
			all[6] = new BitArray(23, false);
			all[7] = new BitArray(49, false);
			all[8] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENUser_2.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENUser_3.OptimizedAttributes = GetDefaultOptimizedValues()[3];
					ssENUser_4.OptimizedAttributes = GetDefaultOptimizedValues()[4];
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[6];
					ssENProgressReportSection.OptimizedAttributes = GetDefaultOptimizedValues()[7];
					ssENProgressReportSections.OptimizedAttributes = GetDefaultOptimizedValues()[8];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENUser_2.OptimizedAttributes = value[2];
					ssENUser_3.OptimizedAttributes = value[3];
					ssENUser_4.OptimizedAttributes = value[4];
					ssSTBoolean.OptimizedAttributes = value[5];
					ssENProgressReport.OptimizedAttributes = value[6];
					ssENProgressReportSection.OptimizedAttributes = value[7];
					ssENProgressReportSections.OptimizedAttributes = value[8];
				}
			}
			get {
				BitArray[] all = new BitArray[9];
				all[0] = ssENGroup.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENUser_2.OptimizedAttributes;
				all[3] = ssENUser_3.OptimizedAttributes;
				all[4] = ssENUser_4.OptimizedAttributes;
				all[5] = null;
				all[6] = ssENProgressReport.OptimizedAttributes;
				all[7] = ssENProgressReportSection.OptimizedAttributes;
				all[8] = ssENProgressReportSections.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENUser_2.Read(r, ref index);
			ssENUser_3.Read(r, ref index);
			ssENUser_4.Read(r, ref index);
			ssSTBoolean.Read(r, ref index);
			ssENProgressReport.Read(r, ref index);
			ssENProgressReportSection.Read(r, ref index);
			ssENProgressReportSections.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord a, RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENUser_2 != b.ssENUser_2) return false;
			if (a.ssENUser_3 != b.ssENUser_3) return false;
			if (a.ssENUser_4 != b.ssENUser_4) return false;
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			if (a.ssENProgressReportSection != b.ssENProgressReportSection) return false;
			if (a.ssENProgressReportSections != b.ssENProgressReportSections) return false;
			return true;
		}

		public static bool operator != (RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord a, RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord)) return false;
			return (this == (RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENUser_2.GetHashCode()
				^ ssENUser_3.GetHashCode()
				^ ssENUser_4.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				^ ssENProgressReportSection.GetHashCode()
				^ ssENProgressReportSections.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENUser_2 = new ENUserEntityRecord(null);
			ssENUser_3 = new ENUserEntityRecord(null);
			ssENUser_4 = new ENUserEntityRecord(null);
			ssSTBoolean = new STBooleanStructure(null);
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENUser_2 = (ENUserEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENUser_3 = (ENUserEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssENUser_4 = (ENUserEntityRecord) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssSTBoolean = (STBooleanStructure) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssENProgressReportSection = (ENProgressReportSectionEntityRecord) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) info.GetValue(fields[8] .Name, fields[8] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENUser_2.RecursiveReset();
			ssENUser_3.RecursiveReset();
			ssENUser_4.RecursiveReset();
			ssSTBoolean.RecursiveReset();
			ssENProgressReport.RecursiveReset();
			ssENProgressReportSection.RecursiveReset();
			ssENProgressReportSections.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENUser_2.InternalRecursiveSave();
			ssENUser_3.InternalRecursiveSave();
			ssENUser_4.InternalRecursiveSave();
			ssSTBoolean.InternalRecursiveSave();
			ssENProgressReport.InternalRecursiveSave();
			ssENProgressReportSection.InternalRecursiveSave();
			ssENProgressReportSections.InternalRecursiveSave();
		}


		public RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord Duplicate() {
			RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENUser_2 = (ENUserEntityRecord) this.ssENUser_2.Duplicate();
			t.ssENUser_3 = (ENUserEntityRecord) this.ssENUser_3.Duplicate();
			t.ssENUser_4 = (ENUserEntityRecord) this.ssENUser_4.Duplicate();
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.ssENProgressReportSection = (ENProgressReportSectionEntityRecord) this.ssENProgressReportSection.Duplicate();
			t.ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) this.ssENProgressReportSections.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENUser_2.ToXml(this, recordElem, "User_2", detailLevel - 1);
				ssENUser_3.ToXml(this, recordElem, "User_3", detailLevel - 1);
				ssENUser_4.ToXml(this, recordElem, "User_4", detailLevel - 1);
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
				ssENProgressReportSection.ToXml(this, recordElem, "ProgressReportSection", detailLevel - 1);
				ssENProgressReportSections.ToXml(this, recordElem, "ProgressReportSections", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "user_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_2")) variable.Value = ssENUser_2; else variable.Optimized = true;
				variable.SetFieldName("user_2");
			} else if (head == "user_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_3")) variable.Value = ssENUser_3; else variable.Optimized = true;
				variable.SetFieldName("user_3");
			} else if (head == "user_4") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_4")) variable.Value = ssENUser_4; else variable.Optimized = true;
				variable.SetFieldName("user_4");
			} else if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			} else if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			} else if (head == "progressreportsection") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSection")) variable.Value = ssENProgressReportSection; else variable.Optimized = true;
				variable.SetFieldName("progressreportsection");
			} else if (head == "progressreportsections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSections")) variable.Value = ssENProgressReportSections; else variable.Optimized = true;
				variable.SetFieldName("progressreportsections");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdUser_2) {
				return ssENUser_2;
			} else if (key == IdUser_3) {
				return ssENUser_3;
			} else if (key == IdUser_4) {
				return ssENUser_4;
			} else if (key == IdBoolean) {
				return ssSTBoolean;
			} else if (key == IdProgressReport) {
				return ssENProgressReport;
			} else if (key == IdProgressReportSection) {
				return ssENProgressReportSection;
			} else if (key == IdProgressReportSections) {
				return ssENProgressReportSections;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENUser_2.FillFromOther((IRecord) other.AttributeGet(IdUser_2));
			ssENUser_3.FillFromOther((IRecord) other.AttributeGet(IdUser_3));
			ssENUser_4.FillFromOther((IRecord) other.AttributeGet(IdUser_4));
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
			ssENProgressReportSection.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSection));
			ssENProgressReportSections.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSections));
		}
	} // RCGroupUserUserUserUserBooleanProgressReportProgressReportSectionProgressReportSectionsRecord
	/// <summary>
	/// Structure <code>RCStudentUserRewardRewardReasonRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentUserRewardRewardReasonRecord: ISerializable, ITypedRecord<RCStudentUserRewardRewardReasonRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");
		private static readonly GlobalObjectKey IdReward = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*PQCIEsZWtzfWsOwKuqu68w");
		private static readonly GlobalObjectKey IdRewardReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*VnI1Nn2gsRO3cZ0+3CUAbQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;

		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;

		[System.Xml.Serialization.XmlElement("Reward")]
		public ENRewardEntityRecord ssENReward;

		[System.Xml.Serialization.XmlElement("RewardReason")]
		public ENRewardReasonEntityRecord ssENRewardReason;


		public BitArray OptimizedAttributes;

		public RCStudentUserRewardRewardReasonRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENReward = new ENRewardEntityRecord(null);
			ssENRewardReason = new ENRewardReasonEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[4];
			all[0] = new BitArray(27, false);
			all[1] = new BitArray(11, false);
			all[2] = new BitArray(7, false);
			all[3] = new BitArray(2, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[1];
					ssENReward.OptimizedAttributes = GetDefaultOptimizedValues()[2];
					ssENRewardReason.OptimizedAttributes = GetDefaultOptimizedValues()[3];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
					ssENUser.OptimizedAttributes = value[1];
					ssENReward.OptimizedAttributes = value[2];
					ssENRewardReason.OptimizedAttributes = value[3];
				}
			}
			get {
				BitArray[] all = new BitArray[4];
				all[0] = ssENStudent.OptimizedAttributes;
				all[1] = ssENUser.OptimizedAttributes;
				all[2] = ssENReward.OptimizedAttributes;
				all[3] = ssENRewardReason.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
			ssENUser.Read(r, ref index);
			ssENReward.Read(r, ref index);
			ssENRewardReason.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentUserRewardRewardReasonRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentUserRewardRewardReasonRecord a, RCStudentUserRewardRewardReasonRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			if (a.ssENUser != b.ssENUser) return false;
			if (a.ssENReward != b.ssENReward) return false;
			if (a.ssENRewardReason != b.ssENRewardReason) return false;
			return true;
		}

		public static bool operator != (RCStudentUserRewardRewardReasonRecord a, RCStudentUserRewardRewardReasonRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentUserRewardRewardReasonRecord)) return false;
			return (this == (RCStudentUserRewardRewardReasonRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				^ ssENUser.GetHashCode()
				^ ssENReward.GetHashCode()
				^ ssENRewardReason.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentUserRewardRewardReasonRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			ssENUser = new ENUserEntityRecord(null);
			ssENReward = new ENRewardEntityRecord(null);
			ssENRewardReason = new ENRewardReasonEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENUser = (ENUserEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssENReward = (ENRewardEntityRecord) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssENRewardReason = (ENRewardReasonEntityRecord) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
			ssENUser.RecursiveReset();
			ssENReward.RecursiveReset();
			ssENRewardReason.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
			ssENUser.InternalRecursiveSave();
			ssENReward.InternalRecursiveSave();
			ssENRewardReason.InternalRecursiveSave();
		}


		public RCStudentUserRewardRewardReasonRecord Duplicate() {
			RCStudentUserRewardRewardReasonRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.ssENReward = (ENRewardEntityRecord) this.ssENReward.Duplicate();
			t.ssENRewardReason = (ENRewardReasonEntityRecord) this.ssENRewardReason.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
				ssENReward.ToXml(this, recordElem, "Reward", detailLevel - 1);
				ssENRewardReason.ToXml(this, recordElem, "RewardReason", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			} else if (head == "reward") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Reward")) variable.Value = ssENReward; else variable.Optimized = true;
				variable.SetFieldName("reward");
			} else if (head == "rewardreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RewardReason")) variable.Value = ssENRewardReason; else variable.Optimized = true;
				variable.SetFieldName("rewardreason");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else if (key == IdUser) {
				return ssENUser;
			} else if (key == IdReward) {
				return ssENReward;
			} else if (key == IdRewardReason) {
				return ssENRewardReason;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
			ssENReward.FillFromOther((IRecord) other.AttributeGet(IdReward));
			ssENRewardReason.FillFromOther((IRecord) other.AttributeGet(IdRewardReason));
		}
	} // RCStudentUserRewardRewardReasonRecord
	/// <summary>
	/// Structure <code>RCStaffSafeguardingPersonsInvolvedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffSafeguardingPersonsInvolvedRecord: ISerializable, ITypedRecord<RCStaffSafeguardingPersonsInvolvedRecord> {
		private static readonly GlobalObjectKey IdStaff = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*g7SxeiYo0dIB7YXPz8Xkpg");
		private static readonly GlobalObjectKey IdSafeguardingPersonsInvolved = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*xKhFENz1CnMKyTEcWw586A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Staff")]
		public ENStaffEntityRecord ssENStaff;

		[System.Xml.Serialization.XmlElement("SafeguardingPersonsInvolved")]
		public ENSafeguardingPersonsInvolvedEntityRecord ssENSafeguardingPersonsInvolved;


		public BitArray OptimizedAttributes;

		public RCStaffSafeguardingPersonsInvolvedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			ssENSafeguardingPersonsInvolved = new ENSafeguardingPersonsInvolvedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[2];
			all[0] = new BitArray(15, false);
			all[1] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStaff.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					ssENSafeguardingPersonsInvolved.OptimizedAttributes = GetDefaultOptimizedValues()[1];
				} else {
					ssENStaff.OptimizedAttributes = value[0];
					ssENSafeguardingPersonsInvolved.OptimizedAttributes = value[1];
				}
			}
			get {
				BitArray[] all = new BitArray[2];
				all[0] = ssENStaff.OptimizedAttributes;
				all[1] = ssENSafeguardingPersonsInvolved.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStaff.Read(r, ref index);
			ssENSafeguardingPersonsInvolved.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffSafeguardingPersonsInvolvedRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffSafeguardingPersonsInvolvedRecord a, RCStaffSafeguardingPersonsInvolvedRecord b) {
			if (a.ssENStaff != b.ssENStaff) return false;
			if (a.ssENSafeguardingPersonsInvolved != b.ssENSafeguardingPersonsInvolved) return false;
			return true;
		}

		public static bool operator != (RCStaffSafeguardingPersonsInvolvedRecord a, RCStaffSafeguardingPersonsInvolvedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffSafeguardingPersonsInvolvedRecord)) return false;
			return (this == (RCStaffSafeguardingPersonsInvolvedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStaff.GetHashCode()
				^ ssENSafeguardingPersonsInvolved.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffSafeguardingPersonsInvolvedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			ssENSafeguardingPersonsInvolved = new ENSafeguardingPersonsInvolvedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStaff = (ENStaffEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssENSafeguardingPersonsInvolved = (ENSafeguardingPersonsInvolvedEntityRecord) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
			ssENStaff.RecursiveReset();
			ssENSafeguardingPersonsInvolved.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStaff.InternalRecursiveSave();
			ssENSafeguardingPersonsInvolved.InternalRecursiveSave();
		}


		public RCStaffSafeguardingPersonsInvolvedRecord Duplicate() {
			RCStaffSafeguardingPersonsInvolvedRecord t;
			t.ssENStaff = (ENStaffEntityRecord) this.ssENStaff.Duplicate();
			t.ssENSafeguardingPersonsInvolved = (ENSafeguardingPersonsInvolvedEntityRecord) this.ssENSafeguardingPersonsInvolved.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStaff.ToXml(this, recordElem, "Staff", detailLevel - 1);
				ssENSafeguardingPersonsInvolved.ToXml(this, recordElem, "SafeguardingPersonsInvolved", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staff") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Staff")) variable.Value = ssENStaff; else variable.Optimized = true;
				variable.SetFieldName("staff");
			} else if (head == "safeguardingpersonsinvolved") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingPersonsInvolved")) variable.Value = ssENSafeguardingPersonsInvolved; else variable.Optimized = true;
				variable.SetFieldName("safeguardingpersonsinvolved");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaff) {
				return ssENStaff;
			} else if (key == IdSafeguardingPersonsInvolved) {
				return ssENSafeguardingPersonsInvolved;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStaff.FillFromOther((IRecord) other.AttributeGet(IdStaff));
			ssENSafeguardingPersonsInvolved.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingPersonsInvolved));
		}
	} // RCStaffSafeguardingPersonsInvolvedRecord
}
namespace ssCaseConferencing {
	[System.Xml.Serialization.SoapTypeAttribute("WORCCauseOfConcernReasonCauseOfConcernRecord", "http://www.outsystems.com")]
	public partial class WORCCauseOfConcernReasonCauseOfConcernRecord {
		public WORCCauseOfConcernReasonRecord ssENCauseOfConcernReason;
		public WORCCauseOfConcernRecord ssENCauseOfConcern;

		public WORCCauseOfConcernReasonCauseOfConcernRecord() {
			ssENCauseOfConcernReason = new WORCCauseOfConcernReasonRecord();
			ssENCauseOfConcern = new WORCCauseOfConcernRecord();
		}

		public WORCCauseOfConcernReasonCauseOfConcernRecord(RCCauseOfConcernReasonCauseOfConcernRecord r) {
			ssENCauseOfConcernReason = new WORCCauseOfConcernReasonRecord(r.ssENCauseOfConcernReason);
			ssENCauseOfConcern = new WORCCauseOfConcernRecord(r.ssENCauseOfConcern);
		}

	}
}

namespace ssCaseConferencing {
	partial class WORCCauseOfConcernReasonCauseOfConcernRecord {
		public static implicit operator WORCCauseOfConcernReasonCauseOfConcernRecord(RCCauseOfConcernReasonCauseOfConcernRecord r) {
			return new WORCCauseOfConcernReasonCauseOfConcernRecord(r);
		}

		public static implicit operator RCCauseOfConcernReasonCauseOfConcernRecord(WORCCauseOfConcernReasonCauseOfConcernRecord w) {
			RCCauseOfConcernReasonCauseOfConcernRecord r = new RCCauseOfConcernReasonCauseOfConcernRecord();
			if (w != null) {
				r.ssENCauseOfConcernReason = (RCCauseOfConcernReasonRecord) w.ssENCauseOfConcernReason;
				r.ssENCauseOfConcern = (RCCauseOfConcernRecord) w.ssENCauseOfConcern;
			}
			return r;
		}

	}
}

namespace ssCaseConferencing {
	[System.Xml.Serialization.SoapTypeAttribute("WORCRewardRewardReasonRecord", "http://www.outsystems.com")]
	public partial class WORCRewardRewardReasonRecord {
		public WORCRewardRecord ssENReward;
		public WORCRewardReasonRecord ssENRewardReason;

		public WORCRewardRewardReasonRecord() {
			ssENReward = new WORCRewardRecord();
			ssENRewardReason = new WORCRewardReasonRecord();
		}

		public WORCRewardRewardReasonRecord(RCRewardRewardReasonRecord r) {
			ssENReward = new WORCRewardRecord(r.ssENReward);
			ssENRewardReason = new WORCRewardReasonRecord(r.ssENRewardReason);
		}

	}
}

namespace ssCaseConferencing {
	partial class WORCRewardRewardReasonRecord {
		public static implicit operator WORCRewardRewardReasonRecord(RCRewardRewardReasonRecord r) {
			return new WORCRewardRewardReasonRecord(r);
		}

		public static implicit operator RCRewardRewardReasonRecord(WORCRewardRewardReasonRecord w) {
			RCRewardRewardReasonRecord r = new RCRewardRewardReasonRecord();
			if (w != null) {
				r.ssENReward = (RCRewardRecord) w.ssENReward;
				r.ssENRewardReason = (RCRewardReasonRecord) w.ssENRewardReason;
			}
			return r;
		}

	}
}

