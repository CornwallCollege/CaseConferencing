/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearner_ProgressReport {

	public class ScrnPopup_ProgressReport: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnPopup_ProgressReport(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamStudentId. Description:
		/// </summary>
		public string inParamStudentId = "";
		/// <summary>
		/// Screen Input Parameter inParamProgressReportId. Description:
		/// </summary>
		public int inParamProgressReportId = 0;
		/// <summary>
		/// Screen Input Parameter inParamProgressReportTypeId. Description:
		/// </summary>
		public int inParamProgressReportTypeId = 0;
		/// <summary>
		/// Screen Input Parameter inParamAcademicYearId. Description:
		/// </summary>
		public string inParamAcademicYearId = "";
		/// <summary>
		/// Variable wt_WebBlockInstance25
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout wt_WebBlockInstance25;
		/// <summary>
		/// Variable "True" if the Widget wt_If23
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If23T;

		/// <summary>
		/// Variable "True" if the Widget wt_If23
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If23F;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCStudentUserProgressReportRecord ssProgressReportEditRecord = new RCStudentUserProgressReportRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtProgressReportEdit_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtProgressReport_Date") &&
			ValidationUtils.IsValid(this, "wt_ComboBox7") &&
			ValidationUtils.IsValid(this, "wtProgressReport_Description");
			return res;
		}


		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtProgressReport_DateValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtProgressReport_DateValidatorType;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox7ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox7 = new SelectRtWidget();
		RLProgressReportTypeRecordList Rt_wt_ComboBox7_reclist = null;
		/// <summary>
		/// Variable "True" if the Widget wt_If37
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If37T;

		/// <summary>
		/// Variable "True" if the Widget wt_If37
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If37F;
		protected OutSystems.HubEdition.WebWidgets.Container wtDescriptionTitle;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtProgressReport_DescriptionValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtProgressReport_DescriptionValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container35;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("CKPXf8fGBkS4cdNgkD_Yjw", "Popup_ProgressReport");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "CKPXf8fGBkS4cdNgkD_Yjw", "Popup_ProgressReport");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "CKPXf8fGBkS4cdNgkD_Yjw", "Popup_ProgressReport");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "CKPXf8fGBkS4cdNgkD_Yjw", "Popup_ProgressReport");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "CKPXf8fGBkS4cdNgkD_Yjw", "Popup_ProgressReport");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnPopup_ProgressReport() {
			htTabIndexGroups["wt_Text53"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_InlineExpression20"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_Text31"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wtProgressReport_Date"] = "wtProgressReportEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance17"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_Text45"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_ComboBox7"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_Text10"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_WebBlockInstance43"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_Text49"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_If37"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_IfBranch11"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_InlineExpression41"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_IfBranch2"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wtDescriptionTitle"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_Text34"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wtProgressReport_Description"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_Container3"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_Container35"] = "wtProgressReportEdit-1";
			htTabIndexGroups["RichWidgets_wt_WebBlockInstance22"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_Text1"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_Container28"] = "wtProgressReportEdit-1";
			htTabIndexGroups["wt_Text48"] = "wtProgressReportEdit-1";
		}


		RLProgressReportTypeRecordList queryResGetProgressReportTypes_outParamList = new RLProgressReportTypeRecordList();
		int queryResGetProgressReportTypes_outParamCount = 0;
		RLStudentUserProgressReportRecordList queryResGetProgressReportById_outParamList = new RLStudentUserProgressReportRecordList();
		int queryResGetProgressReportById_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetProgressReportById
			int datasetGetProgressReportById_maxRecords = 0;
			queryResGetProgressReportById_outParamList = FuncssPreparation.datasetGetProgressReportById(heContext, datasetGetProgressReportById_maxRecords, IterationMultiplicity.Never, out queryResGetProgressReportById_outParamCount, inParamProgressReportId
			);
			// Query datasetGetProgressReportTypes
			int datasetGetProgressReportTypes_maxRecords = 0;
			queryResGetProgressReportTypes_outParamList = FuncssPreparation.datasetGetProgressReportTypes(heContext, datasetGetProgressReportTypes_maxRecords, IterationMultiplicity.Single, out queryResGetProgressReportTypes_outParamCount);
			if (queryResGetProgressReportById_outParamList.Empty) {
				queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssProgressReportType = inParamProgressReportTypeId; // GetProgressReportById.List.Current.ProgressReport.ProgressReportType = ProgressReportTypeId
				queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssDate = BuiltInFunction.CurrDate(); // GetProgressReportById.List.Current.ProgressReport.Date = CurrDate
				queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssAcademicYear = inParamAcademicYearId; // GetProgressReportById.List.Current.ProgressReport.AcademicYear = AcademicYearId

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamStudentId!= "")) {
				parameters.Add(new Pair<string, string>("StudentId", HttpUtility.UrlEncode(inParamStudentId, Request.ContentEncoding)));
			}
			if ((inParamProgressReportId!=0)) {
				parameters.Add(new Pair<string, string>("ProgressReportId", HttpUtility.UrlEncode(Convert.ToString(inParamProgressReportId), Request.ContentEncoding)));
			}
			if ((inParamProgressReportTypeId!=0)) {
				parameters.Add(new Pair<string, string>("ProgressReportTypeId", HttpUtility.UrlEncode(Convert.ToString(inParamProgressReportTypeId), Request.ContentEncoding)));
			}
			if ((inParamAcademicYearId!= "")) {
				parameters.Add(new Pair<string, string>("AcademicYearId", HttpUtility.UrlEncode(inParamAcademicYearId, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReport", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_ProgressReport", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance25 = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) FindControl("wt_WebBlockInstance25");
			wtDescriptionTitle = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtDescriptionTitle");
			wt_Container3 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container3");
			wt_Container35 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container35");
			wt_Container28 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container28");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_If23") {
				return wt_WebBlockInstance25.wtTitle.FindControl("wt_If23");
			}
			if (id == "wt_If23T") {
				return wt_WebBlockInstance25.wtTitle.FindControl("wt_If23T");
			}
			if (id == "wt_Text26") {
				return wt_WebBlockInstance25.wtTitle.FindControl("wt_Text26");
			}
			if (id == "wt_If23F") {
				return wt_WebBlockInstance25.wtTitle.FindControl("wt_If23F");
			}
			if (id == "wt_Text6") {
				return wt_WebBlockInstance25.wtTitle.FindControl("wt_Text6");
			}
			if (id == "wtProgressReportEdit") {
				return wt_WebBlockInstance25.wtContent.FindControl("wtProgressReportEdit");
			}
			if (id == "wt_EditRecordRow51") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordRow51");
			}
			if (id == "wt_EditRecordCell13") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell13");
			}
			if (id == "wt_Text53") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Text53");
			}
			if (id == "wt_EditRecordCell46") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell46");
			}
			if (id == "wt_InlineExpression20") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_InlineExpression20");
			}
			if (id == "wt_EditRecordRow24") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordRow24");
			}
			if (id == "wt_EditRecordCell15") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell15");
			}
			if (id == "wt_Text31") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Text31");
			}
			if (id == "wt_EditRecordCell44") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell44");
			}
			if (id == "wtProgressReport_Date") {
				return wt_WebBlockInstance25.wtContent.FindControl("wtProgressReport_Date");
			}
			if (id == "RichWidgets_wt_WebBlockInstance17") {
				return wt_WebBlockInstance25.wtContent.FindControl("RichWidgets_wt_WebBlockInstance17");
			}
			if (id == "wt_EditRecordRow18") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordRow18");
			}
			if (id == "wt_EditRecordCell50") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell50");
			}
			if (id == "wt_Text45") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Text45");
			}
			if (id == "wt_EditRecordCell12") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell12");
			}
			if (id == "wt_ComboBox7") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_ComboBox7");
			}
			if (id == "wt_EditRecordRow8") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordRow8");
			}
			if (id == "wt_EditRecordCell36") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell36");
			}
			if (id == "wt_Text10") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Text10");
			}
			if (id == "wt_EditRecordCell19") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell19");
			}
			if (id == "wt_WebBlockInstance43") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_WebBlockInstance43");
			}
			if (id == "wt_EditRecordRow52") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordRow52");
			}
			if (id == "wt_EditRecordCell16") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell16");
			}
			if (id == "wt_Text49") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Text49");
			}
			if (id == "wt_EditRecordCell33") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell33");
			}
			if (id == "wt_If37") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_If37");
			}
			if (id == "wt_If37T") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_If37T");
			}
			if (id == "wt_InlineExpression41") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_InlineExpression41");
			}
			if (id == "wt_If37F") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_If37F");
			}
			if (id == "wt_EditRecordRow5") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordRow5");
			}
			if (id == "wt_EditRecordCell4") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell4");
			}
			if (id == "wtDescriptionTitle") {
				return wt_WebBlockInstance25.wtContent.FindControl("wtDescriptionTitle");
			}
			if (id == "wt_Text34") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Text34");
			}
			if (id == "wt_EditRecordCell29") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell29");
			}
			if (id == "wtProgressReport_Description") {
				return wt_WebBlockInstance25.wtContent.FindControl("wtProgressReport_Description");
			}
			if (id == "wtProgressReport_DescriptionAjaxRfrsh") {
				return wt_WebBlockInstance25.wtContent.FindControl("wtProgressReport_DescriptionAjaxRfrsh");
			}
			if (id == "wt_EditRecordRow42") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordRow42");
			}
			if (id == "wt_EditRecordCell40") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell40");
			}
			if (id == "wt_EditRecordCell21") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_EditRecordCell21");
			}
			if (id == "wt_Container3") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Container3");
			}
			if (id == "wt_Container35") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Container35");
			}
			if (id == "RichWidgets_wt_WebBlockInstance22") {
				return wt_WebBlockInstance25.wtContent.FindControl("RichWidgets_wt_WebBlockInstance22");
			}
			if (id == "wt_Text1") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Text1");
			}
			if (id == "wt_Container28") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Container28");
			}
			if (id == "wt_Text48") {
				return wt_WebBlockInstance25.wtContent.FindControl("wt_Text48");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_ProgressReport"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamStudentId = (string) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamProgressReportId = (int) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamProgressReportTypeId = (int) paramValue;
							}
						}
						if (screenParameters.Count > 3) {
							object paramValue = screenParameters[3];
							if (paramValue != null) {
								inParamAcademicYearId = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Popup_ProgressReport"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["StudentId"] != null) {
						inParamStudentId = Request.QueryString["StudentId"];
					}
					if (Request.QueryString["ProgressReportId"] != null) {
						inParamProgressReportId = Convert.ToInt32(Request.QueryString["ProgressReportId"]);
					}
					if (Request.QueryString["ProgressReportTypeId"] != null) {
						inParamProgressReportTypeId = Convert.ToInt32(Request.QueryString["ProgressReportTypeId"]);
					}
					if (Request.QueryString["AcademicYearId"] != null) {
						inParamAcademicYearId = Request.QueryString["AcademicYearId"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["StudentId"] != null) {
						inParamStudentId = Request.Form["StudentId"];
					}
					if (Request.Form["ProgressReportId"] != null) {
						inParamProgressReportId = Convert.ToInt32(Request.Form["ProgressReportId"]);
					}
					if (Request.Form["ProgressReportTypeId"] != null) {
						inParamProgressReportTypeId = Convert.ToInt32(Request.Form["ProgressReportTypeId"]);
					}
					if (Request.Form["AcademicYearId"] != null) {
						inParamAcademicYearId = Request.Form["AcademicYearId"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtProgressReportEdit_onDataBindingDataSource(this.FindControl("wtProgressReportEdit"), null);
				}
				Title = "Popup ProgressReport"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_ProgressReport", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearner_ProgressReport.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			throw new NotRegisteredException("Registered role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("CKPXf8fGBkS4cdNgkD_Yjw"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvSave: VarsBag {
			public Actions.lcoProgressReport_Create resProgressReport_Create = new Actions.lcoProgressReport_Create();
			public RLProgressReportProgressReportTypeRecordList queryResGetProgressReportsByAcademicYear_outParamList = new RLProgressReportProgressReportTypeRecordList();
			public int queryResGetProgressReportsByAcademicYear_outParamCount = 0;

			public Actions.lcoGetCurrentAcademicYear2 resGetCurrentAcademicYear2 = new Actions.lcoGetCurrentAcademicYear2();
			public int resStudentLog_Create_outParamStudentLogId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSave localVars = new lcvSave();
			try {
				// GetCurrentAcademicYear2
				Actions.ActionGetCurrentAcademicYear2(heContext, out localVars.resGetCurrentAcademicYear2.outParamAcademicYear);
				ssProgressReportEditRecord.ssENProgressReport.ssAcademicYear = localVars.resGetCurrentAcademicYear2.outParamAcademicYear.ssENAcademicYears.ssId; // ProgressReportEdit.Record.ProgressReport.AcademicYear = GetCurrentAcademicYear2.AcademicYear.AcademicYears.Id
				// Query datasetGetProgressReportsByAcademicYear
				int datasetGetProgressReportsByAcademicYear_maxRecords = 0;
				localVars.queryResGetProgressReportsByAcademicYear_outParamList = FuncCommandSave.datasetGetProgressReportsByAcademicYear(heContext, datasetGetProgressReportsByAcademicYear_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetProgressReportsByAcademicYear_outParamCount, ssProgressReportEditRecord.ssENProgressReport.ssAcademicYear
				, ssProgressReportEditRecord.ssENProgressReport.ssProgressReportType
				, inParamStudentId
				);
				if ((localVars.queryResGetProgressReportsByAcademicYear_outParamList.Empty||(ssProgressReportEditRecord.ssENProgressReport.ssProgressReportType==ENProgressReportTypeEntity.GetRecordByKey(ObjectKey.Parse("EgqRTaISu0Ctm9pK31aVKQ")).ssId))) {
					// ProgressReport_Create
					Actions.ActionProgressReport_Create(heContext, ((RCProgressReportRecord) ssProgressReportEditRecord.ssENProgressReport), inParamStudentId, localVars.resGetCurrentAcademicYear2.outParamAcademicYear.ssENAcademicYears.ssFormatE, out localVars.resProgressReport_Create.outParamProgressReportNEwId);
					// StudentLog_Create
					Actions.ActionStudentLog_Create(heContext, inParamStudentId, ((int) Global.App.OsContext.Session["UserID"]), (("Progress Report " +ssProgressReportEditRecord.ssENProgressReport.ssDescription) + (((inParamProgressReportId==BuiltInFunction.NullIdentifier())) ?(" created"):(" edited"))), ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("znk6eguxg0SugJ3_VUPzMg")).ssLogType, (("Progress Report " +ssProgressReportEditRecord.ssENProgressReport.ssDescription) + (((inParamProgressReportId==BuiltInFunction.NullIdentifier())) ?(" created"):(" edited"))), BuiltInFunction.NullTextIdentifier(), false, 0, "Progress Report", "", 0, 0, "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
					// Popup_Editor_Notify
					Actions.ActionPopup_Editor_Notify(heContext, "OK");
					// Popup_Editor_Close
					Actions.ActionPopup_Editor_Close(heContext);
					// Feedback_Message
					Actions.ActionFeedback_Message(heContext, (("Progress Report " + (((inParamProgressReportId==BuiltInFunction.NullIdentifier())) ?("Created"):("Edited"))) + " with success."), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
					// Update Screen
					return true;

				} else {
					// Feedback_Message2
					Actions.ActionFeedback_Message(heContext, (((("A \'" +localVars.queryResGetProgressReportsByAcademicYear_outParamList.CurrentRec.ssENProgressReportType.ssLabel) + "\' progress report for ") +localVars.resGetCurrentAcademicYear2.outParamAcademicYear.ssENAcademicYears.ssFormatB) + " already exists for this learner."), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("0o80oKhv80mEG2V89eWP9w")).ssId);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandClose</code> that represents the Service Studio screen action
		///  <code>Close</code> <p> Description: </p>
		/// </summary>
		private bool CommandClose(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Refresh Widget (wtDescriptionTitle)
				((OSPageViewState) Page).AjaxRefresh(wtDescriptionTitle, "None", StoreViewState);
				// Refresh Widget (wtProgressReport_Description)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtProgressReport_DescriptionAjaxRfrsh"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_WebBlockInstance25 Functions
		/// </summary>
		public void webBlck_WebBlockInstance25_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) sender;
			widget.inParamWidth = 550;
		}
		/// <summary>
		/// wt_If23 Functions
		/// </summary>
		bool if_wt_If23_hasRun=false;
		bool if_wt_If23_evalResult;
		public bool if_wt_If23() {
			if (if_wt_If23_hasRun) {
				if_wt_If23_hasRun = false;
				return if_wt_If23_evalResult;
			}
			if_wt_If23_hasRun = true;
			if_wt_If23_evalResult = (inParamProgressReportId==BuiltInFunction.NullIdentifier());
			return if_wt_If23_evalResult;
		}

		/// <summary>
		/// wtProgressReportEdit Functions
		/// </summary>
		public void wtProgressReportEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack) {
				ssProgressReportEditRecord = queryResGetProgressReportById_outParamList.CurrentRec;
			}
		}
		/// <summary>
		/// wt_InlineExpression20 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = KJcIWa3W6kaduATD_VqFmg) Expression: GetFormatedName(StudentId)
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression20() {
			return Functions.ActionGetFormatedName(heContext, inParamStudentId);
		}
		/// <summary>
		/// wtProgressReport_Date Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtProgressReport_Date_input_value() {
			if (((new DateTime(1900, 1, 1, 0, 0, 0)) !=ssProgressReportEditRecord.ssENProgressReport.ssDate)) {
				return ssProgressReportEditRecord.ssENProgressReport.ssDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtProgressReport_Date");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate)) {

					if (((new DateTime(1900, 1, 1, 0, 0, 0)) ==ssProgressReportEditRecord.ssENProgressReport.ssDate)) {
						return "";
					}
					return ssProgressReportEditRecord.ssENProgressReport.ssDate.ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtProgressReport_Date_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssProgressReportEditRecord.ssENProgressReport.ssDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
				} else {
					ssProgressReportEditRecord.ssENProgressReport.ssDate = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDate(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssProgressReportEditRecord.ssENProgressReport.ssDate = (new DateTime(1900, 1, 1, 0, 0, 0)); 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtProgressReport_Date)
		/// </summary>
		/// <returns>The Visible State of wtProgressReport_Date</returns>
		public bool inputwtProgressReport_Date_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtProgressReport_Date)
		/// </summary>
		/// <returns>The Enabled State of wtProgressReport_Date</returns>
		public bool inputwtProgressReport_Date_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtProgressReport_Date)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtProgressReport_Date</returns>
		public bool inputwtProgressReport_Date_isMandatory() {
			return false;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance17 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance17_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkInput_Calendar) sender;
			widget.inParamInputWidgetId = this.FindControl("wtProgressReport_Date").ClientID;
			widget.inParamMinYear = -1;
			widget.inParamMaxYear = -1;
			widget.inParamAlign = "Bl";
			widget.inParamSingleClick = true;
			widget.inParamShowWeekNumbers = false;
			widget.inParamUpdateOnCloseOnly = false;
			widget.inParamShowOthers = false;
			widget.inParamFirstDay = 0;
			widget.inParamShowTime = false;
			widget.inParamShow24HourFormat = true;
			widget.inParamReuseCalendarObject = false;
			widget.inParamInitialDate = new DateTime(1900, 1, 1, 0, 0, 0);
			widget.inParamDateFormat = "";
			widget.inParamSpecialDays = "";
			widget.inParamOnUpdate = "";
			widget.inParamFlatStyle = false;
			widget.inParamButtonWidgetId = "";
			widget.inParamYearStep = 2;
		}
		/// <summary>
		/// wt_ComboBox7 Functions
		/// </summary>
		public void sel_ComboBox7_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			RLProgressReportTypeRecordList Rt_wt_ComboBox7_reclist = queryResGetProgressReportTypes_outParamList;
			Rt_wt_ComboBox7_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox7_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox7_reclist.CurrentRec.ssENProgressReportType.ssLabel, Convert.ToString(Rt_wt_ComboBox7_reclist.CurrentRec.ssENProgressReportType.ssId)));
					if (ssProgressReportEditRecord.ssENProgressReport.ssProgressReportType == Convert.ToInt32(Convert.ToString(Rt_wt_ComboBox7_reclist.CurrentRec.ssENProgressReportType.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox7_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox7_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox7
		/// </summary>
		public void sel_ComboBox7_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox7_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox7.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssProgressReportEditRecord.ssENProgressReport.ssProgressReportType = 0;
			}
			else {
				Rt_wt_ComboBox7.SpecialListVal = "";
				try {
					ssProgressReportEditRecord.ssENProgressReport.ssProgressReportType = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox7)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox7</returns>
		public bool sel_ComboBox7_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox7)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox7</returns>
		public bool sel_ComboBox7_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox7)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox7</returns>
		public bool sel_ComboBox7_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_EditRecordRow8 Functions
		/// </summary>
		public void wt_EditRecordRow8_onDataBinding(object sender, System.EventArgs e) {
			wt_EditRecordRow8_setInlineAttributes(sender, e);
		}
		public string wt_EditRecordRow8_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = (((ssProgressReportEditRecord.ssENProgressReport.ssId!=BuiltInFunction.NullIdentifier())) ?(""):("display:none"));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_WebBlockInstance43 Functions
		/// </summary>
		public void webBlck_WebBlockInstance43_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted widget = (ssCaseConferencing.Flows.FlowCommon.WBlkDateFormatted) sender;
			widget.inParamDate = Convert.ToDateTime(ssProgressReportEditRecord.ssENProgressReport.ssCreatedOn.ToString("yyyy-M-d"));
		}
		/// <summary>
		/// wt_EditRecordRow52 Functions
		/// </summary>
		public void wt_EditRecordRow52_onDataBinding(object sender, System.EventArgs e) {
			wt_EditRecordRow52_setInlineAttributes(sender, e);
		}
		public string wt_EditRecordRow52_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = (((ssProgressReportEditRecord.ssENProgressReport.ssId!=BuiltInFunction.NullIdentifier())) ?(""):("display:none"));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_If37 Functions
		/// </summary>
		bool if_wt_If37_hasRun=false;
		bool if_wt_If37_evalResult;
		public bool if_wt_If37() {
			if (if_wt_If37_hasRun) {
				if_wt_If37_hasRun = false;
				return if_wt_If37_evalResult;
			}
			if_wt_If37_hasRun = true;
			if_wt_If37_evalResult = (ssProgressReportEditRecord.ssENProgressReport.ssCreatedBy!=BuiltInFunction.NullIdentifier());
			return if_wt_If37_evalResult;
		}

		/// <summary>
		/// wt_InlineExpression41 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = c9zez3LAQkuLFiBtnjE5wg) Expression:
		///  GetUser(ProgressReportEdit.Record.ProgressReport.CreatedBy).User.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression41() {
			return Functions.ssGetUser(heContext, ssProgressReportEditRecord.ssENProgressReport.ssCreatedBy).ssENUser.ssName;
		}
		/// <summary>
		/// wtDescriptionTitle Functions
		/// </summary>
		public void cntDescriptionTitle_onDataBinding(object sender, System.EventArgs e) {
			cntDescriptionTitle_setInlineAttributes(sender, e);
		}
		public string cntDescriptionTitle_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntDescriptionTitle_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtDescriptionTitle)
		/// </summary>
		/// <returns>The Visible State of wtDescriptionTitle</returns>
		public bool cntDescriptionTitle_isVisible() {
			return (((ssProgressReportEditRecord.ssENProgressReport.ssProgressReportType==ENProgressReportTypeEntity.GetRecordByKey(ObjectKey.Parse("EgqRTaISu0Ctm9pK31aVKQ")).ssId)) ?(true):(false));
		}

		/// <summary>
		/// wtProgressReport_Description Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtProgressReport_Description_input_value() {
			if (("" !=ssProgressReportEditRecord.ssENProgressReport.ssDescription)) {
				return ssProgressReportEditRecord.ssENProgressReport.ssDescription;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtProgressReport_Description");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssProgressReportEditRecord.ssENProgressReport.ssDescription;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtProgressReport_Description_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssProgressReportEditRecord.ssENProgressReport.ssDescription = ""; 
				} else {
					ssProgressReportEditRecord.ssENProgressReport.ssDescription = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssProgressReportEditRecord.ssENProgressReport.ssDescription = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtProgressReport_Description)
		/// </summary>
		/// <returns>The Visible State of wtProgressReport_Description</returns>
		public bool inputwtProgressReport_Description_isVisible() {
			return (((ssProgressReportEditRecord.ssENProgressReport.ssProgressReportType==ENProgressReportTypeEntity.GetRecordByKey(ObjectKey.Parse("EgqRTaISu0Ctm9pK31aVKQ")).ssId)) ?(true):(false));
		}

		/// <summary>
		/// Gets the enabled state of component (wtProgressReport_Description)
		/// </summary>
		/// <returns>The Enabled State of wtProgressReport_Description</returns>
		public bool inputwtProgressReport_Description_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtProgressReport_Description)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtProgressReport_Description</returns>
		public bool inputwtProgressReport_Description_isMandatory() {
			return true;
		}

		/// <summary>
		/// wt_Container3 Functions
		/// </summary>
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container3_setInlineAttributes(sender, e);
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container35 Functions
		/// </summary>
		public void cnt_Container35_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container35_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container35_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container35_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container35
		/// </summary>
		public void cnt_Container35_AjaxClick(object sender, System.EventArgs e) {
			if (CommandSave(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container35)
		/// </summary>
		/// <returns>The Visible State of wt_Container35</returns>
		public bool cnt_Container35_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance22 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance22_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container28 Functions
		/// </summary>
		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container28_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container28_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container28
		/// </summary>
		public void cnt_Container28_AjaxClick(object sender, System.EventArgs e) {
			if (CommandClose(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			return true;
		}



		public static class FuncCommandSave {

			private static void datasetGetProgressReportsByAcademicYearReadDB(ref RCProgressReportProgressReportTypeRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENProgressReport.Read(r, ref index);
				rec.ssENProgressReportType.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetProgressReportsByAcademicYear" of Action "Save"
			/// </summary>
			public static RLProgressReportProgressReportTypeRecordList datasetGetProgressReportsByAcademicYear(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP, int qpinP1, string qpstP2) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, ENProgressReportType.[LABEL] o25, NULL o26, NULL o27");
				fromBuilder.Append(" FROM ({ProgressReport} ENProgressReport Left JOIN {ProgressReportType} ENProgressReportType ON (ENProgressReport.[PROGRESSREPORTTYPE] = ENProgressReportType.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENProgressReport.[ACADEMICYEAR] = @qpstP) AND (ENProgressReport.[ACADEMICYEAR] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENProgressReport.[ACADEMICYEAR] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENProgressReport.[PROGRESSREPORTTYPE] = @qpinP1) AND (ENProgressReport.[PROGRESSREPORTTYPE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENProgressReport.[PROGRESSREPORTTYPE] IS NULL)");
				}
				whereBuilder.Append(" AND (ENProgressReport.[STUDENT] = ((isnull(@qpstP2, ''))))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP2", DbType.String, qpstP2);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportProgressReportTypeRecordList outParamList = new RLProgressReportProgressReportTypeRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetProgressReportsByAcademicYearReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportProgressReportTypeRecordList _tmp = new RLProgressReportProgressReportTypeRecordList();
					_tmp.AlternateReadDBMethod = datasetGetProgressReportsByAcademicYearReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReport.Save.GetProgressReportsByAcademicYear.List");
						outParamList = (RLProgressReportProgressReportTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReport.Save.GetProgressReportsByAcademicYear.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportProgressReportTypeRecordList _tmp = new RLProgressReportProgressReportTypeRecordList();
						_tmp.AlternateReadDBMethod = datasetGetProgressReportsByAcademicYearReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReport.Save.GetProgressReportsByAcademicYear.List");
							outParamList = (RLProgressReportProgressReportTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReport.Save.GetProgressReportsByAcademicYear.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandClose {
		}
		public static class FuncCommandOnChange {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetProgressReportTypes" of Action "Preparation"
			/// </summary>
			public static RLProgressReportTypeRecordList datasetGetProgressReportTypes(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReportType.[ID] o1, ENProgressReportType.[LABEL] o2, NULL o3, NULL o4");
				fromBuilder.Append(" FROM {ProgressReportType} ENProgressReportType");
				whereBuilder.Append(" WHERE (ENProgressReportType.[IS_ACTIVE] = 1)");
				orderByBuilder.Append(" ORDER BY ENProgressReportType.[ORDER] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportTypeRecordList outParamList = new RLProgressReportTypeRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportTypeRecordList _tmp = new RLProgressReportTypeRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReport.Preparation.GetProgressReportTypes.List");
						outParamList = (RLProgressReportTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReport.Preparation.GetProgressReportTypes.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportTypeRecordList _tmp = new RLProgressReportTypeRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReport.Preparation.GetProgressReportTypes.List");
							outParamList = (RLProgressReportTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReport.Preparation.GetProgressReportTypes.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetProgressReportByIdReadDB(ref RCStudentUserProgressReportRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENProgressReport.Read(r, ref index);
				rec.ssENStudent.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetProgressReportById" of Action "Preparation"
			/// </summary>
			public static RLStudentUserProgressReportRecordList datasetGetProgressReportById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReport.[ID] o1, ENProgressReport.[STUDENT] o2, ENProgressReport.[DATE] o3, ENProgressReport.[DESCRIPTION] o4, ENProgressReport.[ISCOMPLETE] o5, ENProgressReport.[COMPLETEDATE] o6, ENProgressReport.[COMPLETEBY] o7, ENProgressReport.[CREATEDBY] o8, ENProgressReport.[CREATEDON] o9, ENProgressReport.[INTRODUCTION] o10, ENProgressReport.[SIGNOFF] o11, ENProgressReport.[INTRODUCTIONVISIBLE] o12, ENProgressReport.[SIGNOFFVISIBLE] o13, ENProgressReport.[INTRODUCTIONUPDATEDBY] o14, ENProgressReport.[INTRODUCTIONUPDATEDON] o15, ENProgressReport.[SIGNOFFUPDATEDBY] o16, ENProgressReport.[SIGNOFFUPDATEDON] o17, ENProgressReport.[INTRODUCTIONCOMPLETED] o18, ENProgressReport.[SIGNOFFCOMPLETED] o19, ENProgressReport.[PROGRESSREPORTTYPE] o20, NULL o21, ENProgressReport.[LOGOID] o22, ENProgressReport.[PRINTEDANDSENTDATE] o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, NULL o55, NULL o56, NULL o57, NULL o58, NULL o59, NULL o60");
				fromBuilder.Append(" FROM (({Student} ENStudent Inner JOIN {ProgressReport} ENProgressReport ON (ENProgressReport.[STUDENT] = ENStudent.[STUDENTREFERENCE]))  Left JOIN {User} ENUser ON (ENProgressReport.[COMPLETEBY] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReport.[ID] = @qpinP) AND (ENProgressReport.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReport.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentUserProgressReportRecordList outParamList = new RLStudentUserProgressReportRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetProgressReportByIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[3];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentUserProgressReportRecordList _tmp = new RLStudentUserProgressReportRecordList();
					_tmp.AlternateReadDBMethod = datasetGetProgressReportByIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReport.Preparation.GetProgressReportById.List");
						outParamList = (RLStudentUserProgressReportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReport.Preparation.GetProgressReportById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentUserProgressReportRecordList _tmp = new RLStudentUserProgressReportRecordList();
						_tmp.AlternateReadDBMethod = datasetGetProgressReportByIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Popup_ProgressReport.Preparation.GetProgressReportById.List");
							outParamList = (RLStudentUserProgressReportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Popup_ProgressReport.Preparation.GetProgressReportById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Popup ProgressReport"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_ProgressReport", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Popup_ProgressReport", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamStudentId", inParamStudentId, "");
			ViewStateAttributes.SetInViewState("inParamProgressReportId", inParamProgressReportId, 0);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssId", ssProgressReportEditRecord.ssENProgressReport.ssId, 0);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssStudent", ssProgressReportEditRecord.ssENProgressReport.ssStudent, "");
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssDate", ssProgressReportEditRecord.ssENProgressReport.ssDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssDescription", ssProgressReportEditRecord.ssENProgressReport.ssDescription, "");
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssIsComplete", ssProgressReportEditRecord.ssENProgressReport.ssIsComplete, false);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssCompleteDate", ssProgressReportEditRecord.ssENProgressReport.ssCompleteDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssCompleteBy", ssProgressReportEditRecord.ssENProgressReport.ssCompleteBy, 0);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssCreatedBy", ssProgressReportEditRecord.ssENProgressReport.ssCreatedBy, 0);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssCreatedOn", ssProgressReportEditRecord.ssENProgressReport.ssCreatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssIntroduction", ssProgressReportEditRecord.ssENProgressReport.ssIntroduction, "");
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssSignoff", ssProgressReportEditRecord.ssENProgressReport.ssSignoff, "");
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssIntroductionVisible", ssProgressReportEditRecord.ssENProgressReport.ssIntroductionVisible, false);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssSignOffVisible", ssProgressReportEditRecord.ssENProgressReport.ssSignOffVisible, false);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssIntroductionUpdatedBy", ssProgressReportEditRecord.ssENProgressReport.ssIntroductionUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssIntroductionUpdatedOn", ssProgressReportEditRecord.ssENProgressReport.ssIntroductionUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssSignOffUpdatedBy", ssProgressReportEditRecord.ssENProgressReport.ssSignOffUpdatedBy, 0);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssSignOffUpdatedOn", ssProgressReportEditRecord.ssENProgressReport.ssSignOffUpdatedOn, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssIntroductionCompleted", ssProgressReportEditRecord.ssENProgressReport.ssIntroductionCompleted, false);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssSignOffCompleted", ssProgressReportEditRecord.ssENProgressReport.ssSignOffCompleted, false);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssProgressReportType", ssProgressReportEditRecord.ssENProgressReport.ssProgressReportType, 0);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssLogoID", ssProgressReportEditRecord.ssENProgressReport.ssLogoID, "");
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ssPrintedAndSentDate", ssProgressReportEditRecord.ssENProgressReport.ssPrintedAndSentDate, new DateTime(1900, 1, 1, 0, 0, 0));
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssProgressReportEditRecord.ssENProgressReport.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtProgressReportEdit_record_ssENProgressReport_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssProgressReportEditRecord.ssENProgressReport.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtProgressReport_Date_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtProgressReport_Date")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_ComboBox7_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox7")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtProgressReport_Description_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtProgressReport_Description")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamStudentId = (string) ViewStateAttributes.GetFromViewState("inParamStudentId", "");
				inParamProgressReportId = (int) ViewStateAttributes.GetFromViewState("inParamProgressReportId", 0);
				ssProgressReportEditRecord.ssENProgressReport.ssId = (int) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssId", 0);
				ssProgressReportEditRecord.ssENProgressReport.ssStudent = (string) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssStudent", "");
				ssProgressReportEditRecord.ssENProgressReport.ssDate = (DateTime) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssProgressReportEditRecord.ssENProgressReport.ssDescription = (string) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssDescription", "");
				ssProgressReportEditRecord.ssENProgressReport.ssIsComplete = (bool) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssIsComplete", false);
				ssProgressReportEditRecord.ssENProgressReport.ssCompleteDate = (DateTime) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssCompleteDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssProgressReportEditRecord.ssENProgressReport.ssCompleteBy = (int) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssCompleteBy", 0);
				ssProgressReportEditRecord.ssENProgressReport.ssCreatedBy = (int) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssCreatedBy", 0);
				ssProgressReportEditRecord.ssENProgressReport.ssCreatedOn = (DateTime) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssCreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				ssProgressReportEditRecord.ssENProgressReport.ssIntroduction = (string) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssIntroduction", "");
				ssProgressReportEditRecord.ssENProgressReport.ssSignoff = (string) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssSignoff", "");
				ssProgressReportEditRecord.ssENProgressReport.ssIntroductionVisible = (bool) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssIntroductionVisible", false);
				ssProgressReportEditRecord.ssENProgressReport.ssSignOffVisible = (bool) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssSignOffVisible", false);
				ssProgressReportEditRecord.ssENProgressReport.ssIntroductionUpdatedBy = (int) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssIntroductionUpdatedBy", 0);
				ssProgressReportEditRecord.ssENProgressReport.ssIntroductionUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssIntroductionUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				ssProgressReportEditRecord.ssENProgressReport.ssSignOffUpdatedBy = (int) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssSignOffUpdatedBy", 0);
				ssProgressReportEditRecord.ssENProgressReport.ssSignOffUpdatedOn = (DateTime) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssSignOffUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
				ssProgressReportEditRecord.ssENProgressReport.ssIntroductionCompleted = (bool) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssIntroductionCompleted", false);
				ssProgressReportEditRecord.ssENProgressReport.ssSignOffCompleted = (bool) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssSignOffCompleted", false);
				ssProgressReportEditRecord.ssENProgressReport.ssProgressReportType = (int) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssProgressReportType", 0);
				ssProgressReportEditRecord.ssENProgressReport.ssLogoID = (string) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssLogoID", "");
				ssProgressReportEditRecord.ssENProgressReport.ssPrintedAndSentDate = (DateTime) ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ssPrintedAndSentDate", new DateTime(1900, 1, 1, 0, 0, 0));
				ssProgressReportEditRecord.ssENProgressReport.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_ChangedAttributes", null));
				ssProgressReportEditRecord.ssENProgressReport.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtProgressReportEdit_record_ssENProgressReport_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wtProgressReport_Date")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtProgressReport_Date_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox7")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox7_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtProgressReport_Description")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtProgressReport_Description_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtProgressReport_Date", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDateValidate, validate);
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox7", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtProgressReport_Description", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
