/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;

using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;

namespace ssCaseConferencing.WebServices {
	[WebService(Namespace= "http://CaseConferencing/Reports/", Description= "")]
	[WebServiceBinding(Name= "ReportsSoap")]
	public class Reports: System.Web.Services.WebService {
		public SoapUnknownHeader[] listHeaders;
		protected PerformanceCounter _requests=null;
		protected PerformanceCounter _requestsPerSec=null;

		public Reports() {
		}

		[WebMethod(Description= "")]
		[System.Web.Services.Protocols.SoapDocumentMethod(RequestNamespace= "http://www.outsystems.com", ResponseNamespace= "http://www.outsystems.com")]
		[System.Web.Services.Protocols.SoapHeader("listHeaders", Direction = SoapHeaderDirection.InOut)]
		public void GetRewards([System.Xml.Serialization.XmlElement("StudentId")] string inWSStudentId,[System.Xml.Serialization.XmlArray("Rewards")] out WORCRewardRewardReasonRecord[] outWSRewards) {
			HeContext context = Global.App.OsContext;
			Global.App.CheckIsApplicationEnabled();
			DateTime startExecution = DateTime.Now;
			string errorLogId = "";
			try {







				RLRewardRewardReasonRecordList tmpoutWSRewards;

				WSEnhancementsElementWithSoapHeaders.SetHeaders(context, null, true, false, listHeaders);
				Actions.WsReports.WebSrvcReportsGetRewards(context, (string) inWSStudentId, out tmpoutWSRewards);
				outWSRewards = tmpoutWSRewards;

				var enhancementsElementHeaders = WSEnhancementsElementWithSoapHeaders.GetHeaders(context, null, true, true);
				if (enhancementsElementHeaders != null && enhancementsElementHeaders.Length == listHeaders.Length) {
					for (int i = 0; i < enhancementsElementHeaders.Length; i++) {
						listHeaders[i] .DidUnderstand = enhancementsElementHeaders[i] .DidUnderstand;
					}
				}
				listHeaders = enhancementsElementHeaders;
			} catch (Exception ex) {
				DatabaseAccess.FreeupResources(false);
				errorLogId = ErrorLog.LogApplicationError(ex, context, "SOAP (Expose)");
				throw ex;
			} finally {

				if (errorLogId != "" || (!context.AppInfo.SelectiveLoggingEnabled || context.AppInfo.Properties.AllowLogging)) {
					TimeSpan duration = DateTime.Now.Subtract(startExecution);
					IntegrationLog.StaticWrite(DateTime.Now,
					(int) duration.TotalMilliseconds,
					Context.Request.UserHostAddress,
					null,
					 "Reports.GetRewards",
					 "SOAP (Expose)",
					(context.AppInfo != null ? context.AppInfo.eSpaceId: 0),
					(context.AppInfo != null && context.AppInfo.Tenant != null ? context.AppInfo.Tenant.Id: 0),
					errorLogId,
					Environment.MachineName,
					true);
				}
			}
		}
		[WebMethod(Description= "")]
		[System.Web.Services.Protocols.SoapDocumentMethod(RequestNamespace= "http://www.outsystems.com", ResponseNamespace= "http://www.outsystems.com")]
		[System.Web.Services.Protocols.SoapHeader("listHeaders", Direction = SoapHeaderDirection.InOut)]
		public void GetStudentNotes([System.Xml.Serialization.XmlElement("StudentId")] string inWSStudentId,[System.Xml.Serialization.XmlArray("StudentNotes")] out WORCNoteRecord[] outWSStudentNotes) {
			HeContext context = Global.App.OsContext;
			Global.App.CheckIsApplicationEnabled();
			DateTime startExecution = DateTime.Now;
			string errorLogId = "";
			try {







				RLNoteRecordList tmpoutWSStudentNotes;

				WSEnhancementsElementWithSoapHeaders.SetHeaders(context, null, true, false, listHeaders);
				Actions.WsReports.WebSrvcReportsGetStudentNotes(context, (string) inWSStudentId, out tmpoutWSStudentNotes);
				outWSStudentNotes = tmpoutWSStudentNotes;

				var enhancementsElementHeaders = WSEnhancementsElementWithSoapHeaders.GetHeaders(context, null, true, true);
				if (enhancementsElementHeaders != null && enhancementsElementHeaders.Length == listHeaders.Length) {
					for (int i = 0; i < enhancementsElementHeaders.Length; i++) {
						listHeaders[i] .DidUnderstand = enhancementsElementHeaders[i] .DidUnderstand;
					}
				}
				listHeaders = enhancementsElementHeaders;
			} catch (Exception ex) {
				DatabaseAccess.FreeupResources(false);
				errorLogId = ErrorLog.LogApplicationError(ex, context, "SOAP (Expose)");
				throw ex;
			} finally {

				if (errorLogId != "" || (!context.AppInfo.SelectiveLoggingEnabled || context.AppInfo.Properties.AllowLogging)) {
					TimeSpan duration = DateTime.Now.Subtract(startExecution);
					IntegrationLog.StaticWrite(DateTime.Now,
					(int) duration.TotalMilliseconds,
					Context.Request.UserHostAddress,
					null,
					 "Reports.GetStudentNotes",
					 "SOAP (Expose)",
					(context.AppInfo != null ? context.AppInfo.eSpaceId: 0),
					(context.AppInfo != null && context.AppInfo.Tenant != null ? context.AppInfo.Tenant.Id: 0),
					errorLogId,
					Environment.MachineName,
					true);
				}
			}
		}
		[WebMethod(Description= "")]
		[System.Web.Services.Protocols.SoapDocumentMethod(RequestNamespace= "http://www.outsystems.com", ResponseNamespace= "http://www.outsystems.com")]
		[System.Web.Services.Protocols.SoapHeader("listHeaders", Direction = SoapHeaderDirection.InOut)]
		public void GetStudentRAG([System.Xml.Serialization.XmlElement("StudentId")] string inWSStudentId,[System.Xml.Serialization.XmlElement("GetStudentRAGs")] out WORCStudentGlobalRAGRecord outWSGetStudentRAGs) {
			HeContext context = Global.App.OsContext;
			Global.App.CheckIsApplicationEnabled();
			DateTime startExecution = DateTime.Now;
			string errorLogId = "";
			try {







				RCStudentGlobalRAGRecord tmpoutWSGetStudentRAGs;

				WSEnhancementsElementWithSoapHeaders.SetHeaders(context, null, true, false, listHeaders);
				Actions.WsReports.WebSrvcReportsGetStudentRAG(context, (string) inWSStudentId, out tmpoutWSGetStudentRAGs);
				outWSGetStudentRAGs = tmpoutWSGetStudentRAGs;

				var enhancementsElementHeaders = WSEnhancementsElementWithSoapHeaders.GetHeaders(context, null, true, true);
				if (enhancementsElementHeaders != null && enhancementsElementHeaders.Length == listHeaders.Length) {
					for (int i = 0; i < enhancementsElementHeaders.Length; i++) {
						listHeaders[i] .DidUnderstand = enhancementsElementHeaders[i] .DidUnderstand;
					}
				}
				listHeaders = enhancementsElementHeaders;
			} catch (Exception ex) {
				DatabaseAccess.FreeupResources(false);
				errorLogId = ErrorLog.LogApplicationError(ex, context, "SOAP (Expose)");
				throw ex;
			} finally {

				if (errorLogId != "" || (!context.AppInfo.SelectiveLoggingEnabled || context.AppInfo.Properties.AllowLogging)) {
					TimeSpan duration = DateTime.Now.Subtract(startExecution);
					IntegrationLog.StaticWrite(DateTime.Now,
					(int) duration.TotalMilliseconds,
					Context.Request.UserHostAddress,
					null,
					 "Reports.GetStudentRAG",
					 "SOAP (Expose)",
					(context.AppInfo != null ? context.AppInfo.eSpaceId: 0),
					(context.AppInfo != null && context.AppInfo.Tenant != null ? context.AppInfo.Tenant.Id: 0),
					errorLogId,
					Environment.MachineName,
					true);
				}
			}
		}
		[WebMethod(Description= "Returns the latest RAG set for each learners enrolment")]
		[System.Web.Services.Protocols.SoapDocumentMethod(RequestNamespace= "http://www.outsystems.com", ResponseNamespace= "http://www.outsystems.com")]
		[System.Web.Services.Protocols.SoapHeader("listHeaders", Direction = SoapHeaderDirection.InOut)]
		public void GetAllStudentRAGs([System.Xml.Serialization.XmlElement("AcademicYear")] string inWSAcademicYear,[System.Xml.Serialization.XmlArray("AllStudentRAGs")] out WORCAllStudentsAllRAGsRecord[] outWSAllStudentRAGs) {
			HeContext context = Global.App.OsContext;
			Global.App.CheckIsApplicationEnabled();
			DateTime startExecution = DateTime.Now;
			string errorLogId = "";
			try {







				RLAllStudentsAllRAGsRecordList tmpoutWSAllStudentRAGs;

				WSEnhancementsElementWithSoapHeaders.SetHeaders(context, null, true, false, listHeaders);
				Actions.WsReports.WebSrvcReportsGetAllStudentRAGs(context, ((string) inWSAcademicYear ?? ""), out tmpoutWSAllStudentRAGs);
				outWSAllStudentRAGs = tmpoutWSAllStudentRAGs;

				var enhancementsElementHeaders = WSEnhancementsElementWithSoapHeaders.GetHeaders(context, null, true, true);
				if (enhancementsElementHeaders != null && enhancementsElementHeaders.Length == listHeaders.Length) {
					for (int i = 0; i < enhancementsElementHeaders.Length; i++) {
						listHeaders[i] .DidUnderstand = enhancementsElementHeaders[i] .DidUnderstand;
					}
				}
				listHeaders = enhancementsElementHeaders;
			} catch (Exception ex) {
				DatabaseAccess.FreeupResources(false);
				errorLogId = ErrorLog.LogApplicationError(ex, context, "SOAP (Expose)");
				throw ex;
			} finally {

				if (errorLogId != "" || (!context.AppInfo.SelectiveLoggingEnabled || context.AppInfo.Properties.AllowLogging)) {
					TimeSpan duration = DateTime.Now.Subtract(startExecution);
					IntegrationLog.StaticWrite(DateTime.Now,
					(int) duration.TotalMilliseconds,
					Context.Request.UserHostAddress,
					null,
					 "Reports.GetAllStudentRAGs",
					 "SOAP (Expose)",
					(context.AppInfo != null ? context.AppInfo.eSpaceId: 0),
					(context.AppInfo != null && context.AppInfo.Tenant != null ? context.AppInfo.Tenant.Id: 0),
					errorLogId,
					Environment.MachineName,
					true);
				}
			}
		}
		[WebMethod(Description= "")]
		[System.Web.Services.Protocols.SoapDocumentMethod(RequestNamespace= "http://www.outsystems.com", ResponseNamespace= "http://www.outsystems.com")]
		[System.Web.Services.Protocols.SoapHeader("listHeaders", Direction = SoapHeaderDirection.InOut)]
		public void GetAllOverallStudentRAGs([System.Xml.Serialization.XmlArray("AllStudentRAGs")] out WORCAllStudentsOverallRAGRecord[] outWSAllStudentRAGs) {
			HeContext context = Global.App.OsContext;
			Global.App.CheckIsApplicationEnabled();
			DateTime startExecution = DateTime.Now;
			string errorLogId = "";
			try {







				RLAllStudentsOverallRAGRecordList tmpoutWSAllStudentRAGs;

				WSEnhancementsElementWithSoapHeaders.SetHeaders(context, null, true, false, listHeaders);
				Actions.WsReports.WebSrvcReportsGetAllOverallStudentRAGs(context, out tmpoutWSAllStudentRAGs);
				outWSAllStudentRAGs = tmpoutWSAllStudentRAGs;

				var enhancementsElementHeaders = WSEnhancementsElementWithSoapHeaders.GetHeaders(context, null, true, true);
				if (enhancementsElementHeaders != null && enhancementsElementHeaders.Length == listHeaders.Length) {
					for (int i = 0; i < enhancementsElementHeaders.Length; i++) {
						listHeaders[i] .DidUnderstand = enhancementsElementHeaders[i] .DidUnderstand;
					}
				}
				listHeaders = enhancementsElementHeaders;
			} catch (Exception ex) {
				DatabaseAccess.FreeupResources(false);
				errorLogId = ErrorLog.LogApplicationError(ex, context, "SOAP (Expose)");
				throw ex;
			} finally {

				if (errorLogId != "" || (!context.AppInfo.SelectiveLoggingEnabled || context.AppInfo.Properties.AllowLogging)) {
					TimeSpan duration = DateTime.Now.Subtract(startExecution);
					IntegrationLog.StaticWrite(DateTime.Now,
					(int) duration.TotalMilliseconds,
					Context.Request.UserHostAddress,
					null,
					 "Reports.GetAllOverallStudentRAGs",
					 "SOAP (Expose)",
					(context.AppInfo != null ? context.AppInfo.eSpaceId: 0),
					(context.AppInfo != null && context.AppInfo.Tenant != null ? context.AppInfo.Tenant.Id: 0),
					errorLogId,
					Environment.MachineName,
					true);
				}
			}
		}
		[WebMethod(Description= "")]
		[System.Web.Services.Protocols.SoapDocumentMethod(RequestNamespace= "http://www.outsystems.com", ResponseNamespace= "http://www.outsystems.com")]
		[System.Web.Services.Protocols.SoapHeader("listHeaders", Direction = SoapHeaderDirection.InOut)]
		public void GetCauseForConcern([System.Xml.Serialization.XmlElement("StudentId")] string inWSStudentId,[System.Xml.Serialization.XmlArray("ActiveCauseForConcern")] out WORCCauseOfConcernReasonCauseOfConcernRecord[] outWSActiveCauseForConcern) {
			HeContext context = Global.App.OsContext;
			Global.App.CheckIsApplicationEnabled();
			DateTime startExecution = DateTime.Now;
			string errorLogId = "";
			try {







				RLCauseOfConcernReasonCauseOfConcernRecordList tmpoutWSActiveCauseForConcern;

				WSEnhancementsElementWithSoapHeaders.SetHeaders(context, null, true, false, listHeaders);
				Actions.WsReports.WebSrvcReportsGetCauseForConcern(context, (string) inWSStudentId, out tmpoutWSActiveCauseForConcern);
				outWSActiveCauseForConcern = tmpoutWSActiveCauseForConcern;

				var enhancementsElementHeaders = WSEnhancementsElementWithSoapHeaders.GetHeaders(context, null, true, true);
				if (enhancementsElementHeaders != null && enhancementsElementHeaders.Length == listHeaders.Length) {
					for (int i = 0; i < enhancementsElementHeaders.Length; i++) {
						listHeaders[i] .DidUnderstand = enhancementsElementHeaders[i] .DidUnderstand;
					}
				}
				listHeaders = enhancementsElementHeaders;
			} catch (Exception ex) {
				DatabaseAccess.FreeupResources(false);
				errorLogId = ErrorLog.LogApplicationError(ex, context, "SOAP (Expose)");
				throw ex;
			} finally {

				if (errorLogId != "" || (!context.AppInfo.SelectiveLoggingEnabled || context.AppInfo.Properties.AllowLogging)) {
					TimeSpan duration = DateTime.Now.Subtract(startExecution);
					IntegrationLog.StaticWrite(DateTime.Now,
					(int) duration.TotalMilliseconds,
					Context.Request.UserHostAddress,
					null,
					 "Reports.GetCauseForConcern",
					 "SOAP (Expose)",
					(context.AppInfo != null ? context.AppInfo.eSpaceId: 0),
					(context.AppInfo != null && context.AppInfo.Tenant != null ? context.AppInfo.Tenant.Id: 0),
					errorLogId,
					Environment.MachineName,
					true);
				}
			}
		}
	}
}
