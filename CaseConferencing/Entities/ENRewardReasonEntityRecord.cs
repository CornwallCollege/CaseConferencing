/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENRewardReasonEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENRewardReasonEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENRewardReasonEntity.eSpaceId;
	} // ENRewardReasonEntity

	/// <summary>
	/// Entity <code>ENRewardReasonEntityRecord</code> that represents the Service Studio entity
	///  <code>RewardReason</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("RewardReason", "tdHvOXG_mUGSfV_kh4wb1A", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_RewardReason", "")]
	[Serializable()]
	public partial struct ENRewardReasonEntityRecord: ISerializable, ITypedRecord<ENRewardReasonEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*UlnB6FTdOUisaqOx5+R43Q");
		private static readonly GlobalObjectKey IdReason = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*oOuXW4ekskeZPPVkJ6Jdhw");

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(2, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("REASON", 200, false, false, false)]
		[System.Xml.Serialization.XmlElement("Reason")]
		private string _ssReason;
		public string ssReason {
			get {
				return _ssReason;
			}
			set {
				if ((_ssReason!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssReason = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENRewardReasonEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(2, true);
			OptimizedAttributes = new BitArray(2, false);
			_ssId = 0;
			_ssReason = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "RewardReason.Id", 0);
			ssReason = r.ReadText(index++, "RewardReason.Reason", "");
			ChangedAttributes = new BitArray(2, false);
			OptimizedAttributes = new BitArray(2, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENRewardReasonEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENRewardReasonEntityRecord a, ENRewardReasonEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssReason != b.ssReason) return false;
			return true;
		}

		public static bool operator != (ENRewardReasonEntityRecord a, ENRewardReasonEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENRewardReasonEntityRecord)) return false;
			return (this == (ENRewardReasonEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssReason.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENRewardReasonEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(2, true);
			OptimizedAttributes = new BitArray(2, false);
			_ssId = 0;
			_ssReason = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssReason = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENRewardReasonEntityRecord Duplicate() {
			ENRewardReasonEntityRecord t;
			t._ssId = this._ssId;
			t._ssReason = this._ssReason;
			t.ChangedAttributes = new BitArray(2);
			t.OptimizedAttributes = new BitArray(2);
			for (int i = 0; i < 2; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Reason")) VarValue.AppendAttribute(recordElem, "Reason", ssReason, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Reason");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "reason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Reason")) variable.Value = ssReason; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdReason)) {
				return ChangedAttributes[1];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdReason)) {
				return OptimizedAttributes[1];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdReason) {
				return ssReason;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(2);
			OptimizedAttributes = new BitArray(2);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssReason = (string) other.AttributeGet(IdReason);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdReason);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdReason);
		}
	} // ENRewardReasonEntityRecord
	/// <summary>
	/// Static Entity <code>ENRewardReasonEntity</code> gets the values for this static entity records in
	///  runtime <code>RewardReason</code>
	/// </summary>
	partial class ENRewardReasonEntity {


		static ENRewardReasonEntity() {
			ENRewardReasonEntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENRewardReasonEntityRecord GetRecordById(int id) {
			return (ENRewardReasonEntityRecord) RsseSpaceCaseConferencingCore.ENRewardReasonEntity.GetRecordById(id);
		}

		public static ENRewardReasonEntityRecord GetRecordByName(string name) {
			return (ENRewardReasonEntityRecord) RsseSpaceCaseConferencingCore.ENRewardReasonEntity.GetRecordByName(name);
		}

		public static ENRewardReasonEntityRecord GetRecordByKey(ObjectKey key) {
			return (ENRewardReasonEntityRecord) RsseSpaceCaseConferencingCore.ENRewardReasonEntity.GetRecordByKey(key);
		}
	} // ENRewardReasonEntity;
	/// <summary>
	/// Structure <code>RCRewardReasonRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRewardReasonRecord: ISerializable, ITypedRecord<RCRewardReasonRecord> {
		private static readonly GlobalObjectKey IdRewardReason = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*VnI1Nn2gsRO3cZ0+3CUAbQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RewardReason")]
		public ENRewardReasonEntityRecord ssENRewardReason;


		public static implicit operator ENRewardReasonEntityRecord(RCRewardReasonRecord r) {
			return r.ssENRewardReason;
		}

		public static implicit operator RCRewardReasonRecord(ENRewardReasonEntityRecord r) {
			RCRewardReasonRecord res = new RCRewardReasonRecord(null);
			res.ssENRewardReason = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENRewardReason.ChangedAttributes = value;
			}
			get {
				return ssENRewardReason.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCRewardReasonRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRewardReason = new ENRewardReasonEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(2, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRewardReason.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENRewardReason.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENRewardReason.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRewardReason.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRewardReasonRecord r) {
			this = r;
		}


		public static bool operator == (RCRewardReasonRecord a, RCRewardReasonRecord b) {
			if (a.ssENRewardReason != b.ssENRewardReason) return false;
			return true;
		}

		public static bool operator != (RCRewardReasonRecord a, RCRewardReasonRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRewardReasonRecord)) return false;
			return (this == (RCRewardReasonRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRewardReason.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRewardReasonRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRewardReason = new ENRewardReasonEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRewardReason = (ENRewardReasonEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENRewardReason.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRewardReason.InternalRecursiveSave();
		}


		public RCRewardReasonRecord Duplicate() {
			RCRewardReasonRecord t;
			t.ssENRewardReason = (ENRewardReasonEntityRecord) this.ssENRewardReason.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRewardReason.ToXml(this, recordElem, "RewardReason", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "rewardreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RewardReason")) variable.Value = ssENRewardReason; else variable.Optimized = true;
				variable.SetFieldName("rewardreason");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENRewardReason.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENRewardReason.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRewardReason) {
				return ssENRewardReason;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRewardReason.FillFromOther((IRecord) other.AttributeGet(IdRewardReason));
		}
	} // RCRewardReasonRecord
	/// <summary>
	/// RecordList type <code>RLRewardReasonRecordList</code> that represents a record list of
	///  <code>RewardReason</code>
	/// </summary>
	[Serializable()]
	public partial class RLRewardReasonRecordList: GenericRecordList<RCRewardReasonRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRewardReasonRecord GetElementDefaultValue() {
			return new RCRewardReasonRecord("");
		}

		public T[] ToArray<T>(Func<RCRewardReasonRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRewardReasonRecordList recordlist, Func<RCRewardReasonRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRewardReasonRecordList ToList<T>(T[] array, Func <T, RCRewardReasonRecord> converter) {
			RLRewardReasonRecordList result = new RLRewardReasonRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRewardReasonRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRewardReasonRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRewardReasonRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRewardReasonRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(2, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRewardReasonRecord> NewList() {
			return new RLRewardReasonRecordList();
		}


	} // RLRewardReasonRecordList

	/// <summary>
	/// RecordList type <code>RLRewardReasonList</code> that represents a record list of <code>Text,
	///  Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLRewardReasonList: GenericRecordList<ENRewardReasonEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENRewardReasonEntityRecord GetElementDefaultValue() {
			return new ENRewardReasonEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENRewardReasonEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRewardReasonList recordlist, Func<ENRewardReasonEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRewardReasonList ToList<T>(T[] array, Func <T, ENRewardReasonEntityRecord> converter) {
			RLRewardReasonList result = new RLRewardReasonList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRewardReasonList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRewardReasonList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRewardReasonList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRewardReasonList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENRewardReasonEntityRecord> NewList() {
			return new RLRewardReasonList();
		}


	} // RLRewardReasonList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetRewardReason
		/// </summary>

		public static void GetRewardReason(HeContext heContext, int inParamId, out RCRewardReasonRecord outParamRecord) {
			outParamRecord = new RCRewardReasonRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRewardReasonEntity.eSpaceId;
				try {
					outParamRecord = ENRewardReasonEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [ID]" +
						 ", [REASON]" +
						 " FROM " + ENRewardReasonEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [ID] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRewardReason", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENRewardReasonEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("RewardReason")]
	public class WORCRewardReasonRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Reason")]
		public string varWSReason;

		public WORCRewardReasonRecord() {
			varWSId = (int) 0;
			varWSReason = (string) "";
		}

		public WORCRewardReasonRecord(ENRewardReasonEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSReason = BaseAppUtils.RemoveControlChars(r.ssReason);
		}

		public static RLRewardReasonList ToRecordList(WORCRewardReasonRecord[] array) {
			RLRewardReasonList rl = new RLRewardReasonList();
			if (array != null) {
				foreach(WORCRewardReasonRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRewardReasonRecord[] FromRecordList(RLRewardReasonList rl) {
			WORCRewardReasonRecord[] array = new WORCRewardReasonRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCRewardReasonRecord {
		public static implicit operator WORCRewardReasonRecord(RCRewardReasonRecord r) {
			return new WORCRewardReasonRecord(r.ssENRewardReason);
		}

		public static implicit operator RCRewardReasonRecord(WORCRewardReasonRecord w) {
			RCRewardReasonRecord r = new RCRewardReasonRecord("");
			if (w != null) {
				r.ssENRewardReason = w;
			}
			return r;
		}

	}

	partial struct ENRewardReasonEntityRecord {
		public static implicit operator WORCRewardReasonRecord(ENRewardReasonEntityRecord r) {
			return new WORCRewardReasonRecord(r);
		}

		public static implicit operator ENRewardReasonEntityRecord(WORCRewardReasonRecord w) {
			ENRewardReasonEntityRecord r = new ENRewardReasonEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssReason = ((string) w.varWSReason ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRewardReasonRecordList {
		public WORCRewardReasonRecord[] Array;


		public WORLRewardReasonRecordList(WORCRewardReasonRecord[] r) {
			if (r == null)
			Array = new WORCRewardReasonRecord[0];
			else
			Array = r;
		}
		public WORLRewardReasonRecordList() {
			Array = new WORCRewardReasonRecord[0];
		}

		public WORLRewardReasonRecordList(RLRewardReasonRecordList rl) {
			rl=(RLRewardReasonRecordList) rl.Duplicate();
			Array = new WORCRewardReasonRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRewardReasonRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRewardReasonRecordList {
		public static implicit operator RLRewardReasonRecordList(WORCRewardReasonRecord[] array) {
			RLRewardReasonRecordList rl = new RLRewardReasonRecordList();
			if (array != null) {
				foreach(WORCRewardReasonRecord val in array) {
					rl.Append((RCRewardReasonRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRewardReasonRecord[](RLRewardReasonRecordList rl) {
			WORCRewardReasonRecord[] array = new WORCRewardReasonRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRewardReasonRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRewardReasonRecordList {
		public static implicit operator RLRewardReasonRecordList(WORLRewardReasonRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRewardReasonRecordList(RLRewardReasonRecordList rl) {
			return new WORLRewardReasonRecordList(rl);
		}
		public static implicit operator WORCRewardReasonRecord[](WORLRewardReasonRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRewardReasonRecordList(WORCRewardReasonRecord[] array) {
			return new WORLRewardReasonRecordList(array);
		}
	}
}

