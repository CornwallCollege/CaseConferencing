/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENColorEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceThemeProvider.ENColorEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceThemeProvider.ENColorEntity.eSpaceId;
	} // ENColorEntity

	/// <summary>
	/// Entity <code>ENColorEntityRecord</code> that represents the Service Studio entity
	///  <code>Color</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Color", "PWogwDnQIECHUoGIwWaCRA", "VofHcHeK2kSPL0JlVdburg", 0, "OSUSR_o9a_Color", "")]
	[Serializable()]
	public partial struct ENColorEntityRecord: ISerializable, ITypedRecord<ENColorEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdBackground = GlobalObjectKey.Parse("VofHcHeK2kSPL0JlVdburg*HnrjblSxV0ugEA0PymwBWw");
		private static readonly GlobalObjectKey IdText = GlobalObjectKey.Parse("VofHcHeK2kSPL0JlVdburg*4qwl6zN8Jk+BWK2bymxTZw");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("VofHcHeK2kSPL0JlVdburg*9XJ++aEpukSwCPdQhJiiAQ");

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("BACKGROUND", 50, false, true, false)]
		[System.Xml.Serialization.XmlElement("Background")]
		private string _ssBackground;
		public string ssBackground {
			get {
				return _ssBackground;
			}
			set {
				if ((_ssBackground!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssBackground = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TEXT", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Text")]
		private string _ssText;
		public string ssText {
			get {
				return _ssText;
			}
			set {
				if ((_ssText!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssText = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssOrder = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENColorEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssBackground = "";
			_ssText = "";
			_ssOrder = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssBackground = r.ReadText(index++, "Color.Background", "");
			ssText = r.ReadText(index++, "Color.Text", "");
			ssOrder = r.ReadInteger(index++, "Color.Order", 0);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENColorEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENColorEntityRecord a, ENColorEntityRecord b) {
			if (a.ssBackground != b.ssBackground) return false;
			if (a.ssText != b.ssText) return false;
			if (a.ssOrder != b.ssOrder) return false;
			return true;
		}

		public static bool operator != (ENColorEntityRecord a, ENColorEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENColorEntityRecord)) return false;
			return (this == (ENColorEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssBackground.GetHashCode()
				^ ssText.GetHashCode()
				^ ssOrder.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENColorEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssBackground = "";
			_ssText = "";
			_ssOrder = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssBackground = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssText = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssOrder = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENColorEntityRecord Duplicate() {
			ENColorEntityRecord t;
			t._ssBackground = this._ssBackground;
			t._ssText = this._ssText;
			t._ssOrder = this._ssOrder;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Background")) VarValue.AppendAttribute(recordElem, "Background", ssBackground, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Background");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Text")) VarValue.AppendAttribute(recordElem, "Text", ssText, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Text");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "background") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Background")) variable.Value = ssBackground; else variable.Optimized = true;
			} else if (head == "text") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Text")) variable.Value = ssText; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdBackground)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdText)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdBackground)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdText)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdBackground) {
				return ssBackground;
			} else if (key == IdText) {
				return ssText;
			} else if (key == IdOrder) {
				return ssOrder;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssBackground = (string) other.AttributeGet(IdBackground);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdBackground);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdBackground);
			ssText = (string) other.AttributeGet(IdText);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdText);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdText);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOrder);
		}
	} // ENColorEntityRecord
	/// <summary>
	/// Static Entity <code>ENColorEntity</code> gets the values for this static entity records in runtime
	///  <code>Color</code>
	/// </summary>
	partial class ENColorEntity {


		static ENColorEntity() {
			ENColorEntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENColorEntityRecord GetRecordById(string id) {
			return (ENColorEntityRecord) RsseSpaceThemeProvider.ENColorEntity.GetRecordById(id);
		}

		public static ENColorEntityRecord GetRecordByName(string name) {
			return (ENColorEntityRecord) RsseSpaceThemeProvider.ENColorEntity.GetRecordByName(name);
		}

		public static ENColorEntityRecord GetRecordByKey(ObjectKey key) {
			return (ENColorEntityRecord) RsseSpaceThemeProvider.ENColorEntity.GetRecordByKey(key);
		}
	} // ENColorEntity;
	/// <summary>
	/// Structure <code>RCColorRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCColorRecord: ISerializable, ITypedRecord<RCColorRecord> {
		private static readonly GlobalObjectKey IdColor = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6MF_BU3u+6MHrHzgFVXO0Q");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Color")]
		public ENColorEntityRecord ssENColor;


		public static implicit operator ENColorEntityRecord(RCColorRecord r) {
			return r.ssENColor;
		}

		public static implicit operator RCColorRecord(ENColorEntityRecord r) {
			RCColorRecord res = new RCColorRecord(null);
			res.ssENColor = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENColor.ChangedAttributes = value;
			}
			get {
				return ssENColor.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCColorRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENColor = new ENColorEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENColor.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENColor.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENColor.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENColor.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCColorRecord r) {
			this = r;
		}


		public static bool operator == (RCColorRecord a, RCColorRecord b) {
			if (a.ssENColor != b.ssENColor) return false;
			return true;
		}

		public static bool operator != (RCColorRecord a, RCColorRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCColorRecord)) return false;
			return (this == (RCColorRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENColor.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCColorRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENColor = new ENColorEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENColor = (ENColorEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENColor.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENColor.InternalRecursiveSave();
		}


		public RCColorRecord Duplicate() {
			RCColorRecord t;
			t.ssENColor = (ENColorEntityRecord) this.ssENColor.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENColor.ToXml(this, recordElem, "Color", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "color") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Color")) variable.Value = ssENColor; else variable.Optimized = true;
				variable.SetFieldName("color");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENColor.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENColor.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdColor) {
				return ssENColor;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENColor.FillFromOther((IRecord) other.AttributeGet(IdColor));
		}
	} // RCColorRecord
	/// <summary>
	/// RecordList type <code>RLColorRecordList</code> that represents a record list of <code>Color</code>
	/// </summary>
	[Serializable()]
	public partial class RLColorRecordList: GenericRecordList<RCColorRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCColorRecord GetElementDefaultValue() {
			return new RCColorRecord("");
		}

		public T[] ToArray<T>(Func<RCColorRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLColorRecordList recordlist, Func<RCColorRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLColorRecordList ToList<T>(T[] array, Func <T, RCColorRecord> converter) {
			RLColorRecordList result = new RLColorRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLColorRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLColorRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLColorRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLColorRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCColorRecord> NewList() {
			return new RLColorRecordList();
		}


	} // RLColorRecordList

	/// <summary>
	/// RecordList type <code>RLColorList</code> that represents a record list of <code>Text, Text,
	///  Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLColorList: GenericRecordList<ENColorEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENColorEntityRecord GetElementDefaultValue() {
			return new ENColorEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENColorEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLColorList recordlist, Func<ENColorEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLColorList ToList<T>(T[] array, Func <T, ENColorEntityRecord> converter) {
			RLColorList result = new RLColorList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLColorList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLColorList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLColorList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLColorList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENColorEntityRecord> NewList() {
			return new RLColorList();
		}


	} // RLColorList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetColor
		/// </summary>

		public static void GetColor(HeContext heContext, string inParamId, out RCColorRecord outParamRecord) {
			outParamRecord = new RCColorRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENColorEntity.eSpaceId;
				try {
					outParamRecord = ENColorEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [BACKGROUND]" +
						 ", [TEXT]" +
						 ", [ORDER]" +
						 " FROM " + ENColorEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [BACKGROUND] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetColor", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENColorEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Color")]
	public class WORCColorRecord {
		[System.Xml.Serialization.XmlElement("Background")]
		public string varWSBackground;

		[System.Xml.Serialization.XmlElement("Text")]
		public string varWSText;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		public WORCColorRecord() {
			varWSBackground = (string) "";
			varWSText = (string) "";
			varWSOrder = (int) 0;
		}

		public WORCColorRecord(ENColorEntityRecord r) {
			varWSBackground = BaseAppUtils.RemoveControlChars(r.ssBackground);
			varWSText = BaseAppUtils.RemoveControlChars(r.ssText);
			varWSOrder = (int) r.ssOrder;
		}

		public static RLColorList ToRecordList(WORCColorRecord[] array) {
			RLColorList rl = new RLColorList();
			if (array != null) {
				foreach(WORCColorRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCColorRecord[] FromRecordList(RLColorList rl) {
			WORCColorRecord[] array = new WORCColorRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCColorRecord {
		public static implicit operator WORCColorRecord(RCColorRecord r) {
			return new WORCColorRecord(r.ssENColor);
		}

		public static implicit operator RCColorRecord(WORCColorRecord w) {
			RCColorRecord r = new RCColorRecord("");
			if (w != null) {
				r.ssENColor = w;
			}
			return r;
		}

	}

	partial struct ENColorEntityRecord {
		public static implicit operator WORCColorRecord(ENColorEntityRecord r) {
			return new WORCColorRecord(r);
		}

		public static implicit operator ENColorEntityRecord(WORCColorRecord w) {
			ENColorEntityRecord r = new ENColorEntityRecord("");
			if (w != null) {
				r.ssBackground = ((string) w.varWSBackground ?? "");
				r.ssText = ((string) w.varWSText ?? "");
				r.ssOrder = (int) w.varWSOrder;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLColorRecordList {
		public WORCColorRecord[] Array;


		public WORLColorRecordList(WORCColorRecord[] r) {
			if (r == null)
			Array = new WORCColorRecord[0];
			else
			Array = r;
		}
		public WORLColorRecordList() {
			Array = new WORCColorRecord[0];
		}

		public WORLColorRecordList(RLColorRecordList rl) {
			rl=(RLColorRecordList) rl.Duplicate();
			Array = new WORCColorRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCColorRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLColorRecordList {
		public static implicit operator RLColorRecordList(WORCColorRecord[] array) {
			RLColorRecordList rl = new RLColorRecordList();
			if (array != null) {
				foreach(WORCColorRecord val in array) {
					rl.Append((RCColorRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCColorRecord[](RLColorRecordList rl) {
			WORCColorRecord[] array = new WORCColorRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCColorRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLColorRecordList {
		public static implicit operator RLColorRecordList(WORLColorRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLColorRecordList(RLColorRecordList rl) {
			return new WORLColorRecordList(rl);
		}
		public static implicit operator WORCColorRecord[](WORLColorRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLColorRecordList(WORCColorRecord[] array) {
			return new WORLColorRecordList(array);
		}
	}
}

