/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSIASSupportDocumentsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENSIASSupportDocumentsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENSIASSupportDocumentsEntity.eSpaceId;
	} // ENSIASSupportDocumentsEntity

	/// <summary>
	/// Entity <code>ENSIASSupportDocumentsEntityRecord</code> that represents the Service Studio entity
	///  <code>SIASSupportDocuments</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("SIASSupportDocuments", "isYNgYxrCEmaj3PISb23gQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_SIASSupportDocuments", "")]
	[Serializable()]
	public partial struct ENSIASSupportDocumentsEntityRecord: ISerializable, ITypedRecord<ENSIASSupportDocumentsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*XdaXKqNFMkmoAEzYrOAyCA");
		private static readonly GlobalObjectKey IdSIASSupportId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*EKKUUEPpREafhTaBVA8MWQ");
		private static readonly GlobalObjectKey IdDocumentId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*P_GS_8yoeUCuiucqXvZEsQ");
		private static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*84pbZFdWOU6fht1YSzoilw");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ODP3r_+Kl0SCkQwP19VsZA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(5, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SIASSUPPORTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SIASSupportId")]
		private int _ssSIASSupportId;
		public int ssSIASSupportId {
			get {
				return _ssSIASSupportId;
			}
			set {
				if ((_ssSIASSupportId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssSIASSupportId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("DocumentId")]
		private int _ssDocumentId;
		public int ssDocumentId {
			get {
				return _ssDocumentId;
			}
			set {
				if ((_ssDocumentId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDocumentId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedOn")]
		private DateTime _ssCreatedOn;
		public DateTime ssCreatedOn {
			get {
				return _ssCreatedOn;
			}
			set {
				if ((_ssCreatedOn!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssCreatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCreatedBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSIASSupportDocumentsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssSIASSupportId = 0;
			_ssDocumentId = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "SIASSupportDocuments.Id", 0);
			ssSIASSupportId = r.ReadEntityReference(index++, "SIASSupportDocuments.SIASSupportId", 0);
			ssDocumentId = r.ReadEntityReference(index++, "SIASSupportDocuments.DocumentId", 0);
			ssCreatedOn = r.ReadDateTime(index++, "SIASSupportDocuments.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "SIASSupportDocuments.CreatedBy", 0);
			ChangedAttributes = new BitArray(5, false);
			OptimizedAttributes = new BitArray(5, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSIASSupportDocumentsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSIASSupportDocumentsEntityRecord a, ENSIASSupportDocumentsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssSIASSupportId != b.ssSIASSupportId) return false;
			if (a.ssDocumentId != b.ssDocumentId) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			return true;
		}

		public static bool operator != (ENSIASSupportDocumentsEntityRecord a, ENSIASSupportDocumentsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSIASSupportDocumentsEntityRecord)) return false;
			return (this == (ENSIASSupportDocumentsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssSIASSupportId.GetHashCode()
				^ ssDocumentId.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSIASSupportDocumentsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssSIASSupportId = 0;
			_ssDocumentId = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssSIASSupportId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDocumentId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssCreatedOn = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSIASSupportDocumentsEntityRecord Duplicate() {
			ENSIASSupportDocumentsEntityRecord t;
			t._ssId = this._ssId;
			t._ssSIASSupportId = this._ssSIASSupportId;
			t._ssDocumentId = this._ssDocumentId;
			t._ssCreatedOn = this._ssCreatedOn;
			t._ssCreatedBy = this._ssCreatedBy;
			t.ChangedAttributes = new BitArray(5);
			t.OptimizedAttributes = new BitArray(5);
			for (int i = 0; i < 5; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SIASSupportId")) VarValue.AppendAttribute(recordElem, "SIASSupportId", ssSIASSupportId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SIASSupportId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocumentId")) VarValue.AppendAttribute(recordElem, "DocumentId", ssDocumentId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "DocumentId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "siassupportid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupportId")) variable.Value = ssSIASSupportId; else variable.Optimized = true;
			} else if (head == "documentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocumentId")) variable.Value = ssDocumentId; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdSIASSupportId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDocumentId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdCreatedOn)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdSIASSupportId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDocumentId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdCreatedOn)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdSIASSupportId) {
				return ssSIASSupportId;
			} else if (key == IdDocumentId) {
				return ssDocumentId;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(5);
			OptimizedAttributes = new BitArray(5);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssSIASSupportId = (int) other.AttributeGet(IdSIASSupportId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdSIASSupportId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdSIASSupportId);
			ssDocumentId = (int) other.AttributeGet(IdDocumentId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDocumentId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDocumentId);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdCreatedOn);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdCreatedOn);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCreatedBy);
		}
	} // ENSIASSupportDocumentsEntityRecord
	/// <summary>
	/// Structure <code>RCSIASSupportDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSIASSupportDocumentsRecord: ISerializable, ITypedRecord<RCSIASSupportDocumentsRecord> {
		private static readonly GlobalObjectKey IdSIASSupportDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*AkQlb2jVtGFw9bb2TeaeMw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SIASSupportDocuments")]
		public ENSIASSupportDocumentsEntityRecord ssENSIASSupportDocuments;


		public static implicit operator ENSIASSupportDocumentsEntityRecord(RCSIASSupportDocumentsRecord r) {
			return r.ssENSIASSupportDocuments;
		}

		public static implicit operator RCSIASSupportDocumentsRecord(ENSIASSupportDocumentsEntityRecord r) {
			RCSIASSupportDocumentsRecord res = new RCSIASSupportDocumentsRecord(null);
			res.ssENSIASSupportDocuments = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSIASSupportDocuments.ChangedAttributes = value;
			}
			get {
				return ssENSIASSupportDocuments.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSIASSupportDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSIASSupportDocuments = new ENSIASSupportDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSIASSupportDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSIASSupportDocuments.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSIASSupportDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSIASSupportDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSIASSupportDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCSIASSupportDocumentsRecord a, RCSIASSupportDocumentsRecord b) {
			if (a.ssENSIASSupportDocuments != b.ssENSIASSupportDocuments) return false;
			return true;
		}

		public static bool operator != (RCSIASSupportDocumentsRecord a, RCSIASSupportDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSIASSupportDocumentsRecord)) return false;
			return (this == (RCSIASSupportDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSIASSupportDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSIASSupportDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSIASSupportDocuments = new ENSIASSupportDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSIASSupportDocuments = (ENSIASSupportDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSIASSupportDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSIASSupportDocuments.InternalRecursiveSave();
		}


		public RCSIASSupportDocumentsRecord Duplicate() {
			RCSIASSupportDocumentsRecord t;
			t.ssENSIASSupportDocuments = (ENSIASSupportDocumentsEntityRecord) this.ssENSIASSupportDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSIASSupportDocuments.ToXml(this, recordElem, "SIASSupportDocuments", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "siassupportdocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupportDocuments")) variable.Value = ssENSIASSupportDocuments; else variable.Optimized = true;
				variable.SetFieldName("siassupportdocuments");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSIASSupportDocuments.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSIASSupportDocuments.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSIASSupportDocuments) {
				return ssENSIASSupportDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSIASSupportDocuments.FillFromOther((IRecord) other.AttributeGet(IdSIASSupportDocuments));
		}
	} // RCSIASSupportDocumentsRecord
	/// <summary>
	/// RecordList type <code>RLSIASSupportDocumentsRecordList</code> that represents a record list of
	///  <code>SIASSupportDocuments</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASSupportDocumentsRecordList: GenericRecordList<RCSIASSupportDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSIASSupportDocumentsRecord GetElementDefaultValue() {
			return new RCSIASSupportDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCSIASSupportDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASSupportDocumentsRecordList recordlist, Func<RCSIASSupportDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASSupportDocumentsRecordList ToList<T>(T[] array, Func <T, RCSIASSupportDocumentsRecord> converter) {
			RLSIASSupportDocumentsRecordList result = new RLSIASSupportDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASSupportDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASSupportDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSIASSupportDocumentsRecord> NewList() {
			return new RLSIASSupportDocumentsRecordList();
		}


	} // RLSIASSupportDocumentsRecordList

	/// <summary>
	/// RecordList type <code>RLSIASSupportDocumentsList</code> that represents a record list of
	///  <code>SIASSupportIdentifier, UserIdentifier, DateTime, Integer, DocumentsIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASSupportDocumentsList: GenericRecordList<ENSIASSupportDocumentsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSIASSupportDocumentsEntityRecord GetElementDefaultValue() {
			return new ENSIASSupportDocumentsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSIASSupportDocumentsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASSupportDocumentsList recordlist, Func<ENSIASSupportDocumentsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASSupportDocumentsList ToList<T>(T[] array, Func <T, ENSIASSupportDocumentsEntityRecord> converter) {
			RLSIASSupportDocumentsList result = new RLSIASSupportDocumentsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASSupportDocumentsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportDocumentsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportDocumentsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASSupportDocumentsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSIASSupportDocumentsEntityRecord> NewList() {
			return new RLSIASSupportDocumentsList();
		}


	} // RLSIASSupportDocumentsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateSIASSupportDocuments
		/// </summary>

		public static void CreateSIASSupportDocuments(HeContext heContext, RCSIASSupportDocumentsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportDocumentsEntity.eSpaceId;
				ENSIASSupportDocumentsEntityRecord ssENSIASSupportDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENSIASSupportDocumentsEntity.LocalViewName(null, null) + " (" +
					 " [SIASSUPPORTID]" +
					 ", [DOCUMENTID]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 " ) VALUES (" +
					 " @ssSIASSupportId" +
					 ", @ssDocumentId" +
					 ", @ssCreatedOn" +
					 ", @ssCreatedBy" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENSIASSupportDocuments.ssSIASSupportId==0)) {
						insertSqlCmd.CreateParameter("@ssSIASSupportId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSIASSupportId", DbType.Int32, ssENSIASSupportDocuments.ssSIASSupportId);
					}
					if ((ssENSIASSupportDocuments.ssDocumentId==0)) {
						insertSqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENSIASSupportDocuments.ssDocumentId);
					}
					insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupportDocuments.ssCreatedOn);
					if ((ssENSIASSupportDocuments.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupportDocuments.ssCreatedBy);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateSIASSupportDocuments", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateSIASSupportDocuments
		/// </summary>

		public static void CreateOrUpdateSIASSupportDocuments(HeContext heContext, BitArray usedFields, RCSIASSupportDocumentsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportDocumentsEntity.eSpaceId;
				ENSIASSupportDocumentsEntityRecord ssENSIASSupportDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSIASSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIASSUPPORTID] = @ssSIASSupportId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSIASSupportDocumentsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSIASSupportDocuments.ssSIASSupportId==0)) {
							sqlCmd.CreateParameter("@ssSIASSupportId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSIASSupportId", DbType.Int32, ssENSIASSupportDocuments.ssSIASSupportId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSIASSupportDocuments.ssDocumentId==0)) {
							sqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENSIASSupportDocuments.ssDocumentId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupportDocuments.ssCreatedOn);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENSIASSupportDocuments.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupportDocuments.ssCreatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDON] = [CREATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSIASSupportDocumentsssId", DbType.Int32, ssENSIASSupportDocuments.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateSIASSupportDocuments (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENSIASSupportDocumentsEntity.LocalViewName(null, null) + " (" +
						 " [SIASSUPPORTID]" +
						 ", [DOCUMENTID]" +
						 ", [CREATEDON]" +
						 ", [CREATEDBY]" +
						 " ) VALUES (" +
						 " @ssSIASSupportId" +
						 ", @ssDocumentId" +
						 ", @ssCreatedOn" +
						 ", @ssCreatedBy" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENSIASSupportDocuments.ssSIASSupportId==0)) {
							insertSqlCmd.CreateParameter("@ssSIASSupportId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSIASSupportId", DbType.Int32, ssENSIASSupportDocuments.ssSIASSupportId);
						}
						if ((ssENSIASSupportDocuments.ssDocumentId==0)) {
							insertSqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENSIASSupportDocuments.ssDocumentId);
						}
						insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupportDocuments.ssCreatedOn);
						if ((ssENSIASSupportDocuments.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupportDocuments.ssCreatedBy);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateSIASSupportDocuments", true), typeof(int));
					} else {
						outParamId = ssENSIASSupportDocuments.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteSIASSupportDocuments
		/// </summary>

		public static void DeleteSIASSupportDocuments(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENSIASSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteSIASSupportDocuments", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSIASSupportDocuments
		/// </summary>

		public static void GetSIASSupportDocuments(HeContext heContext, int inParamId, out RCSIASSupportDocumentsRecord outParamRecord) {
			outParamRecord = new RCSIASSupportDocumentsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [SIASSUPPORTID]" +
					 ", [DOCUMENTID]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 " FROM " + ENSIASSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSIASSupportDocuments", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENSIASSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSIASSupportDocumentsForUpdate
		/// </summary>

		public static void GetSIASSupportDocumentsForUpdate(HeContext heContext, int inParamId, out RCSIASSupportDocumentsRecord outParamRecord) {
			outParamRecord = new RCSIASSupportDocumentsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [SIASSUPPORTID]" +
					 ", [DOCUMENTID]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 "FROM " + ENSIASSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSIASSupportDocumentsForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENSIASSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateSIASSupportDocuments
		/// </summary>

		public static void UpdateSIASSupportDocuments(HeContext heContext, BitArray usedFields, RCSIASSupportDocumentsRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportDocumentsEntity.eSpaceId;
				ENSIASSupportDocumentsEntityRecord ssENSIASSupportDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSIASSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIASSUPPORTID] = @ssSIASSupportId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSIASSupportDocumentsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSIASSupportDocuments.ssSIASSupportId==0)) {
							sqlCmd.CreateParameter("@ssSIASSupportId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSIASSupportId", DbType.Int32, ssENSIASSupportDocuments.ssSIASSupportId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSIASSupportDocuments.ssDocumentId==0)) {
							sqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENSIASSupportDocuments.ssDocumentId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupportDocuments.ssCreatedOn);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENSIASSupportDocuments.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupportDocuments.ssCreatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDON] = [CREATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSIASSupportDocumentsssId", DbType.Int32, ssENSIASSupportDocuments.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateSIASSupportDocuments", true) <= 0)
					throw new DataBaseException(ENSIASSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENSIASSupportDocuments.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("SIASSupportDocuments")]
	public class WORCSIASSupportDocumentsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("SIASSupportId")]
		public int varWSSIASSupportId;

		[System.Xml.Serialization.XmlElement("DocumentId")]
		public int varWSDocumentId;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime varWSCreatedOn;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		public WORCSIASSupportDocumentsRecord() {
			varWSId = (int) 0;
			varWSSIASSupportId = (int) 0;
			varWSDocumentId = (int) 0;
			varWSCreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
		}

		public WORCSIASSupportDocumentsRecord(ENSIASSupportDocumentsEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSSIASSupportId = (int) r.ssSIASSupportId;
			varWSDocumentId = (int) r.ssDocumentId;
			varWSCreatedOn = (DateTime) r.ssCreatedOn;
			varWSCreatedBy = (int) r.ssCreatedBy;
		}

		public static RLSIASSupportDocumentsList ToRecordList(WORCSIASSupportDocumentsRecord[] array) {
			RLSIASSupportDocumentsList rl = new RLSIASSupportDocumentsList();
			if (array != null) {
				foreach(WORCSIASSupportDocumentsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSIASSupportDocumentsRecord[] FromRecordList(RLSIASSupportDocumentsList rl) {
			WORCSIASSupportDocumentsRecord[] array = new WORCSIASSupportDocumentsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSIASSupportDocumentsRecord {
		public static implicit operator WORCSIASSupportDocumentsRecord(RCSIASSupportDocumentsRecord r) {
			return new WORCSIASSupportDocumentsRecord(r.ssENSIASSupportDocuments);
		}

		public static implicit operator RCSIASSupportDocumentsRecord(WORCSIASSupportDocumentsRecord w) {
			RCSIASSupportDocumentsRecord r = new RCSIASSupportDocumentsRecord("");
			if (w != null) {
				r.ssENSIASSupportDocuments = w;
			}
			return r;
		}

	}

	partial struct ENSIASSupportDocumentsEntityRecord {
		public static implicit operator WORCSIASSupportDocumentsRecord(ENSIASSupportDocumentsEntityRecord r) {
			return new WORCSIASSupportDocumentsRecord(r);
		}

		public static implicit operator ENSIASSupportDocumentsEntityRecord(WORCSIASSupportDocumentsRecord w) {
			ENSIASSupportDocumentsEntityRecord r = new ENSIASSupportDocumentsEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssSIASSupportId = (int) w.varWSSIASSupportId;
				r.ssDocumentId = (int) w.varWSDocumentId;
				r.ssCreatedOn = (DateTime) w.varWSCreatedOn;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSIASSupportDocumentsRecordList {
		public WORCSIASSupportDocumentsRecord[] Array;


		public WORLSIASSupportDocumentsRecordList(WORCSIASSupportDocumentsRecord[] r) {
			if (r == null)
			Array = new WORCSIASSupportDocumentsRecord[0];
			else
			Array = r;
		}
		public WORLSIASSupportDocumentsRecordList() {
			Array = new WORCSIASSupportDocumentsRecord[0];
		}

		public WORLSIASSupportDocumentsRecordList(RLSIASSupportDocumentsRecordList rl) {
			rl=(RLSIASSupportDocumentsRecordList) rl.Duplicate();
			Array = new WORCSIASSupportDocumentsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSIASSupportDocumentsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSIASSupportDocumentsRecordList {
		public static implicit operator RLSIASSupportDocumentsRecordList(WORCSIASSupportDocumentsRecord[] array) {
			RLSIASSupportDocumentsRecordList rl = new RLSIASSupportDocumentsRecordList();
			if (array != null) {
				foreach(WORCSIASSupportDocumentsRecord val in array) {
					rl.Append((RCSIASSupportDocumentsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSIASSupportDocumentsRecord[](RLSIASSupportDocumentsRecordList rl) {
			WORCSIASSupportDocumentsRecord[] array = new WORCSIASSupportDocumentsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSIASSupportDocumentsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSIASSupportDocumentsRecordList {
		public static implicit operator RLSIASSupportDocumentsRecordList(WORLSIASSupportDocumentsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSIASSupportDocumentsRecordList(RLSIASSupportDocumentsRecordList rl) {
			return new WORLSIASSupportDocumentsRecordList(rl);
		}
		public static implicit operator WORCSIASSupportDocumentsRecord[](WORLSIASSupportDocumentsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSIASSupportDocumentsRecordList(WORCSIASSupportDocumentsRecord[] array) {
			return new WORLSIASSupportDocumentsRecordList(array);
		}
	}
}

