/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStaffEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENStaffEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENStaffEntity.eSpaceId;
	} // ENStaffEntity

	/// <summary>
	/// Entity <code>ENStaffEntityRecord</code> that represents the Service Studio entity
	///  <code>Staff</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Staff", "BDRM3e2yTEOMe4NisgDbBw", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Staff", "")]
	[Serializable()]
	public partial struct ENStaffEntityRecord: ISerializable, ITypedRecord<ENStaffEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*NLHIs+DAek2iZ3bUc0v5VA");
		private static readonly GlobalObjectKey IdForenames = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*tXlXgGl7tUuP6F2s6jp3_w");
		private static readonly GlobalObjectKey IdSurname = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*aRaZBEXzukuLoPIt8uiDrQ");
		private static readonly GlobalObjectKey IdADName = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*jYKIO4dcKUeTTOY0l6pQxw");
		private static readonly GlobalObjectKey IdStaffNumber = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*dj3s+EVcSEiBxtcHhOf3bw");
		private static readonly GlobalObjectKey IdExtension = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*m3ls112IdEObsTGeVRFLjg");
		private static readonly GlobalObjectKey IdExtension2 = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*_Bp+u5Nu0ki9f2WamN7T2Q");
		private static readonly GlobalObjectKey IdDDI = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*Fo7j6Lh6PkK778iF+TdyUg");
		private static readonly GlobalObjectKey IdDDI2 = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*xxM_1BMfbkynrSaC2iPmDg");
		private static readonly GlobalObjectKey IdJobTitle = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*OKY82anyrEmcafx6cnivmg");
		private static readonly GlobalObjectKey IdDepartment = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*5UW0Mpe9gEy800V52Kej1g");
		private static readonly GlobalObjectKey IdOffice = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*wEQgr6EevE+7T7oHKuYDXA");
		private static readonly GlobalObjectKey IdSiteDescription = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*8ZiOJK4nikKOHtm_PmiTIQ");
		private static readonly GlobalObjectKey IdCostCode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*FHhvIisj+UCJQ9VGeALFPw");
		private static readonly GlobalObjectKey IdMIFAREID = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*t7VMQu6nnEqaPO5jh+0+Iw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(15, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("FORENAMES", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Forenames")]
		private string _ssForenames;
		public string ssForenames {
			get {
				return _ssForenames;
			}
			set {
				if ((_ssForenames!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssForenames = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SURNAME", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Surname")]
		private string _ssSurname;
		public string ssSurname {
			get {
				return _ssSurname;
			}
			set {
				if ((_ssSurname!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssSurname = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ADNAME", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("ADName")]
		private string _ssADName;
		public string ssADName {
			get {
				return _ssADName;
			}
			set {
				if ((_ssADName!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssADName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STAFFNUMBER", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("StaffNumber")]
		private string _ssStaffNumber;
		public string ssStaffNumber {
			get {
				return _ssStaffNumber;
			}
			set {
				if ((_ssStaffNumber!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssStaffNumber = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EXTENSION", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Extension")]
		private string _ssExtension;
		public string ssExtension {
			get {
				return _ssExtension;
			}
			set {
				if ((_ssExtension!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssExtension = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EXTENSION2", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Extension2")]
		private string _ssExtension2;
		public string ssExtension2 {
			get {
				return _ssExtension2;
			}
			set {
				if ((_ssExtension2!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssExtension2 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DDI", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("DDI")]
		private string _ssDDI;
		public string ssDDI {
			get {
				return _ssDDI;
			}
			set {
				if ((_ssDDI!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssDDI = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DDI2", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("DDI2")]
		private string _ssDDI2;
		public string ssDDI2 {
			get {
				return _ssDDI2;
			}
			set {
				if ((_ssDDI2!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssDDI2 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("JOBTITLE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("JobTitle")]
		private string _ssJobTitle;
		public string ssJobTitle {
			get {
				return _ssJobTitle;
			}
			set {
				if ((_ssJobTitle!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssJobTitle = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DEPARTMENT", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Department")]
		private string _ssDepartment;
		public string ssDepartment {
			get {
				return _ssDepartment;
			}
			set {
				if ((_ssDepartment!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssDepartment = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OFFICE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Office")]
		private string _ssOffice;
		public string ssOffice {
			get {
				return _ssOffice;
			}
			set {
				if ((_ssOffice!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssOffice = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SITEDESCRIPTION", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("SiteDescription")]
		private string _ssSiteDescription;
		public string ssSiteDescription {
			get {
				return _ssSiteDescription;
			}
			set {
				if ((_ssSiteDescription!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssSiteDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COSTCODE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CostCode")]
		private string _ssCostCode;
		public string ssCostCode {
			get {
				return _ssCostCode;
			}
			set {
				if ((_ssCostCode!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssCostCode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MIFAREID", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("MIFAREID")]
		private string _ssMIFAREID;
		public string ssMIFAREID {
			get {
				return _ssMIFAREID;
			}
			set {
				if ((_ssMIFAREID!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssMIFAREID = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStaffEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(15, true);
			OptimizedAttributes = new BitArray(15, false);
			_ssId = 0;
			_ssForenames = "";
			_ssSurname = "";
			_ssADName = "";
			_ssStaffNumber = "";
			_ssExtension = "";
			_ssExtension2 = "";
			_ssDDI = "";
			_ssDDI2 = "";
			_ssJobTitle = "";
			_ssDepartment = "";
			_ssOffice = "";
			_ssSiteDescription = "";
			_ssCostCode = "";
			_ssMIFAREID = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Staff.Id", 0);
			ssForenames = r.ReadText(index++, "Staff.Forenames", "");
			ssSurname = r.ReadText(index++, "Staff.Surname", "");
			ssADName = r.ReadText(index++, "Staff.ADName", "");
			ssStaffNumber = r.ReadText(index++, "Staff.StaffNumber", "");
			ssExtension = r.ReadText(index++, "Staff.Extension", "");
			ssExtension2 = r.ReadText(index++, "Staff.Extension2", "");
			ssDDI = r.ReadText(index++, "Staff.DDI", "");
			ssDDI2 = r.ReadText(index++, "Staff.DDI2", "");
			ssJobTitle = r.ReadText(index++, "Staff.JobTitle", "");
			ssDepartment = r.ReadText(index++, "Staff.Department", "");
			ssOffice = r.ReadText(index++, "Staff.Office", "");
			ssSiteDescription = r.ReadText(index++, "Staff.SiteDescription", "");
			ssCostCode = r.ReadText(index++, "Staff.CostCode", "");
			ssMIFAREID = r.ReadText(index++, "Staff.MIFAREID", "");
			ChangedAttributes = new BitArray(15, false);
			OptimizedAttributes = new BitArray(15, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStaffEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStaffEntityRecord a, ENStaffEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssForenames != b.ssForenames) return false;
			if (a.ssSurname != b.ssSurname) return false;
			if (a.ssADName != b.ssADName) return false;
			if (a.ssStaffNumber != b.ssStaffNumber) return false;
			if (a.ssExtension != b.ssExtension) return false;
			if (a.ssExtension2 != b.ssExtension2) return false;
			if (a.ssDDI != b.ssDDI) return false;
			if (a.ssDDI2 != b.ssDDI2) return false;
			if (a.ssJobTitle != b.ssJobTitle) return false;
			if (a.ssDepartment != b.ssDepartment) return false;
			if (a.ssOffice != b.ssOffice) return false;
			if (a.ssSiteDescription != b.ssSiteDescription) return false;
			if (a.ssCostCode != b.ssCostCode) return false;
			if (a.ssMIFAREID != b.ssMIFAREID) return false;
			return true;
		}

		public static bool operator != (ENStaffEntityRecord a, ENStaffEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStaffEntityRecord)) return false;
			return (this == (ENStaffEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssForenames.GetHashCode()
				^ ssSurname.GetHashCode()
				^ ssADName.GetHashCode()
				^ ssStaffNumber.GetHashCode()
				^ ssExtension.GetHashCode()
				^ ssExtension2.GetHashCode()
				^ ssDDI.GetHashCode()
				^ ssDDI2.GetHashCode()
				^ ssJobTitle.GetHashCode()
				^ ssDepartment.GetHashCode()
				^ ssOffice.GetHashCode()
				^ ssSiteDescription.GetHashCode()
				^ ssCostCode.GetHashCode()
				^ ssMIFAREID.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStaffEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(15, true);
			OptimizedAttributes = new BitArray(15, false);
			_ssId = 0;
			_ssForenames = "";
			_ssSurname = "";
			_ssADName = "";
			_ssStaffNumber = "";
			_ssExtension = "";
			_ssExtension2 = "";
			_ssDDI = "";
			_ssDDI2 = "";
			_ssJobTitle = "";
			_ssDepartment = "";
			_ssOffice = "";
			_ssSiteDescription = "";
			_ssCostCode = "";
			_ssMIFAREID = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssForenames = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssSurname = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssADName = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssStaffNumber = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssExtension = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssExtension2 = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssDDI = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssDDI2 = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssJobTitle = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssDepartment = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssOffice = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssSiteDescription = (string) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssCostCode = (string) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssMIFAREID = (string) info.GetValue(fields[14] .Name, fields[14] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStaffEntityRecord Duplicate() {
			ENStaffEntityRecord t;
			t._ssId = this._ssId;
			t._ssForenames = this._ssForenames;
			t._ssSurname = this._ssSurname;
			t._ssADName = this._ssADName;
			t._ssStaffNumber = this._ssStaffNumber;
			t._ssExtension = this._ssExtension;
			t._ssExtension2 = this._ssExtension2;
			t._ssDDI = this._ssDDI;
			t._ssDDI2 = this._ssDDI2;
			t._ssJobTitle = this._ssJobTitle;
			t._ssDepartment = this._ssDepartment;
			t._ssOffice = this._ssOffice;
			t._ssSiteDescription = this._ssSiteDescription;
			t._ssCostCode = this._ssCostCode;
			t._ssMIFAREID = this._ssMIFAREID;
			t.ChangedAttributes = new BitArray(15);
			t.OptimizedAttributes = new BitArray(15);
			for (int i = 0; i < 15; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Forenames")) VarValue.AppendAttribute(recordElem, "Forenames", ssForenames, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Forenames");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Surname")) VarValue.AppendAttribute(recordElem, "Surname", ssSurname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Surname");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ADName")) VarValue.AppendAttribute(recordElem, "ADName", ssADName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ADName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StaffNumber")) VarValue.AppendAttribute(recordElem, "StaffNumber", ssStaffNumber, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StaffNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Extension")) VarValue.AppendAttribute(recordElem, "Extension", ssExtension, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Extension");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Extension2")) VarValue.AppendAttribute(recordElem, "Extension2", ssExtension2, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Extension2");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DDI")) VarValue.AppendAttribute(recordElem, "DDI", ssDDI, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DDI");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DDI2")) VarValue.AppendAttribute(recordElem, "DDI2", ssDDI2, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DDI2");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".JobTitle")) VarValue.AppendAttribute(recordElem, "JobTitle", ssJobTitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "JobTitle");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Department")) VarValue.AppendAttribute(recordElem, "Department", ssDepartment, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Department");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Office")) VarValue.AppendAttribute(recordElem, "Office", ssOffice, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Office");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SiteDescription")) VarValue.AppendAttribute(recordElem, "SiteDescription", ssSiteDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SiteDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CostCode")) VarValue.AppendAttribute(recordElem, "CostCode", ssCostCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CostCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MIFAREID")) VarValue.AppendAttribute(recordElem, "MIFAREID", ssMIFAREID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MIFAREID");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "forenames") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Forenames")) variable.Value = ssForenames; else variable.Optimized = true;
			} else if (head == "surname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Surname")) variable.Value = ssSurname; else variable.Optimized = true;
			} else if (head == "adname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ADName")) variable.Value = ssADName; else variable.Optimized = true;
			} else if (head == "staffnumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffNumber")) variable.Value = ssStaffNumber; else variable.Optimized = true;
			} else if (head == "extension") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Extension")) variable.Value = ssExtension; else variable.Optimized = true;
			} else if (head == "extension2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Extension2")) variable.Value = ssExtension2; else variable.Optimized = true;
			} else if (head == "ddi") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DDI")) variable.Value = ssDDI; else variable.Optimized = true;
			} else if (head == "ddi2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DDI2")) variable.Value = ssDDI2; else variable.Optimized = true;
			} else if (head == "jobtitle") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".JobTitle")) variable.Value = ssJobTitle; else variable.Optimized = true;
			} else if (head == "department") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Department")) variable.Value = ssDepartment; else variable.Optimized = true;
			} else if (head == "office") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Office")) variable.Value = ssOffice; else variable.Optimized = true;
			} else if (head == "sitedescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SiteDescription")) variable.Value = ssSiteDescription; else variable.Optimized = true;
			} else if (head == "costcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CostCode")) variable.Value = ssCostCode; else variable.Optimized = true;
			} else if (head == "mifareid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MIFAREID")) variable.Value = ssMIFAREID; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdForenames)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdSurname)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdADName)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdStaffNumber)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdExtension)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdExtension2)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdDDI)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdDDI2)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdJobTitle)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdDepartment)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdOffice)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdSiteDescription)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdCostCode)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdMIFAREID)) {
				return ChangedAttributes[14];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdForenames)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdSurname)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdADName)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdStaffNumber)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdExtension)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdExtension2)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdDDI)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdDDI2)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdJobTitle)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdDepartment)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdOffice)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdSiteDescription)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdCostCode)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdMIFAREID)) {
				return OptimizedAttributes[14];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdForenames) {
				return ssForenames;
			} else if (key == IdSurname) {
				return ssSurname;
			} else if (key == IdADName) {
				return ssADName;
			} else if (key == IdStaffNumber) {
				return ssStaffNumber;
			} else if (key == IdExtension) {
				return ssExtension;
			} else if (key == IdExtension2) {
				return ssExtension2;
			} else if (key == IdDDI) {
				return ssDDI;
			} else if (key == IdDDI2) {
				return ssDDI2;
			} else if (key == IdJobTitle) {
				return ssJobTitle;
			} else if (key == IdDepartment) {
				return ssDepartment;
			} else if (key == IdOffice) {
				return ssOffice;
			} else if (key == IdSiteDescription) {
				return ssSiteDescription;
			} else if (key == IdCostCode) {
				return ssCostCode;
			} else if (key == IdMIFAREID) {
				return ssMIFAREID;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(15);
			OptimizedAttributes = new BitArray(15);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssForenames = (string) other.AttributeGet(IdForenames);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdForenames);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdForenames);
			ssSurname = (string) other.AttributeGet(IdSurname);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdSurname);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdSurname);
			ssADName = (string) other.AttributeGet(IdADName);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdADName);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdADName);
			ssStaffNumber = (string) other.AttributeGet(IdStaffNumber);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdStaffNumber);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdStaffNumber);
			ssExtension = (string) other.AttributeGet(IdExtension);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdExtension);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdExtension);
			ssExtension2 = (string) other.AttributeGet(IdExtension2);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdExtension2);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdExtension2);
			ssDDI = (string) other.AttributeGet(IdDDI);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdDDI);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdDDI);
			ssDDI2 = (string) other.AttributeGet(IdDDI2);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdDDI2);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdDDI2);
			ssJobTitle = (string) other.AttributeGet(IdJobTitle);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdJobTitle);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdJobTitle);
			ssDepartment = (string) other.AttributeGet(IdDepartment);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdDepartment);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdDepartment);
			ssOffice = (string) other.AttributeGet(IdOffice);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdOffice);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdOffice);
			ssSiteDescription = (string) other.AttributeGet(IdSiteDescription);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdSiteDescription);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdSiteDescription);
			ssCostCode = (string) other.AttributeGet(IdCostCode);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdCostCode);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdCostCode);
			ssMIFAREID = (string) other.AttributeGet(IdMIFAREID);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdMIFAREID);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdMIFAREID);
		}
	} // ENStaffEntityRecord
	/// <summary>
	/// Structure <code>RCStaffRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffRecord: ISerializable, ITypedRecord<RCStaffRecord> {
		private static readonly GlobalObjectKey IdStaff = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*g7SxeiYo0dIB7YXPz8Xkpg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Staff")]
		public ENStaffEntityRecord ssENStaff;


		public static implicit operator ENStaffEntityRecord(RCStaffRecord r) {
			return r.ssENStaff;
		}

		public static implicit operator RCStaffRecord(ENStaffEntityRecord r) {
			RCStaffRecord res = new RCStaffRecord(null);
			res.ssENStaff = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStaff.ChangedAttributes = value;
			}
			get {
				return ssENStaff.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStaffRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(15, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStaff.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStaff.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStaff.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStaff.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffRecord a, RCStaffRecord b) {
			if (a.ssENStaff != b.ssENStaff) return false;
			return true;
		}

		public static bool operator != (RCStaffRecord a, RCStaffRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffRecord)) return false;
			return (this == (RCStaffRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStaff.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStaff = new ENStaffEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStaff = (ENStaffEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStaff.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStaff.InternalRecursiveSave();
		}


		public RCStaffRecord Duplicate() {
			RCStaffRecord t;
			t.ssENStaff = (ENStaffEntityRecord) this.ssENStaff.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStaff.ToXml(this, recordElem, "Staff", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staff") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Staff")) variable.Value = ssENStaff; else variable.Optimized = true;
				variable.SetFieldName("staff");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStaff.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStaff.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaff) {
				return ssENStaff;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStaff.FillFromOther((IRecord) other.AttributeGet(IdStaff));
		}
	} // RCStaffRecord
	/// <summary>
	/// RecordList type <code>RLStaffRecordList</code> that represents a record list of <code>Staff</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffRecordList: GenericRecordList<RCStaffRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffRecord GetElementDefaultValue() {
			return new RCStaffRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffRecordList recordlist, Func<RCStaffRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffRecordList ToList<T>(T[] array, Func <T, RCStaffRecord> converter) {
			RLStaffRecordList result = new RLStaffRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(15, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffRecord> NewList() {
			return new RLStaffRecordList();
		}


	} // RLStaffRecordList

	/// <summary>
	/// RecordList type <code>RLStaffList</code> that represents a record list of <code>Text, Text, Text,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffList: GenericRecordList<ENStaffEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStaffEntityRecord GetElementDefaultValue() {
			return new ENStaffEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStaffEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffList recordlist, Func<ENStaffEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffList ToList<T>(T[] array, Func <T, ENStaffEntityRecord> converter) {
			RLStaffList result = new RLStaffList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStaffEntityRecord> NewList() {
			return new RLStaffList();
		}


	} // RLStaffList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStaff
		/// </summary>

		public static void CreateStaff(HeContext heContext, RCStaffRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffEntity.eSpaceId;
				ENStaffEntityRecord ssENStaff = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStaffEntity.LocalViewName(null, null) + " (" +
					 " [FORENAMES]" +
					 ", [SURNAME]" +
					 ", [ADNAME]" +
					 ", [STAFFNUMBER]" +
					 ", [EXTENSION]" +
					 ", [EXTENSION2]" +
					 ", [DDI]" +
					 ", [DDI2]" +
					 ", [JOBTITLE]" +
					 ", [DEPARTMENT]" +
					 ", [OFFICE]" +
					 ", [SITEDESCRIPTION]" +
					 ", [COSTCODE]" +
					 ", [MIFAREID]" +
					 " ) VALUES (" +
					 " @ssForenames" +
					 ", @ssSurname" +
					 ", @ssADName" +
					 ", @ssStaffNumber" +
					 ", @ssExtension" +
					 ", @ssExtension2" +
					 ", @ssDDI" +
					 ", @ssDDI2" +
					 ", @ssJobTitle" +
					 ", @ssDepartment" +
					 ", @ssOffice" +
					 ", @ssSiteDescription" +
					 ", @ssCostCode" +
					 ", @ssMIFAREID" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssForenames", DbType.String, ssENStaff.ssForenames);
					insertSqlCmd.CreateParameter("@ssSurname", DbType.String, ssENStaff.ssSurname);
					insertSqlCmd.CreateParameter("@ssADName", DbType.String, ssENStaff.ssADName);
					insertSqlCmd.CreateParameter("@ssStaffNumber", DbType.String, ssENStaff.ssStaffNumber);
					insertSqlCmd.CreateParameter("@ssExtension", DbType.String, ssENStaff.ssExtension);
					insertSqlCmd.CreateParameter("@ssExtension2", DbType.String, ssENStaff.ssExtension2);
					insertSqlCmd.CreateParameter("@ssDDI", DbType.String, ssENStaff.ssDDI);
					insertSqlCmd.CreateParameter("@ssDDI2", DbType.String, ssENStaff.ssDDI2);
					insertSqlCmd.CreateParameter("@ssJobTitle", DbType.String, ssENStaff.ssJobTitle);
					insertSqlCmd.CreateParameter("@ssDepartment", DbType.String, ssENStaff.ssDepartment);
					insertSqlCmd.CreateParameter("@ssOffice", DbType.String, ssENStaff.ssOffice);
					insertSqlCmd.CreateParameter("@ssSiteDescription", DbType.String, ssENStaff.ssSiteDescription);
					insertSqlCmd.CreateParameter("@ssCostCode", DbType.String, ssENStaff.ssCostCode);
					insertSqlCmd.CreateParameter("@ssMIFAREID", DbType.String, ssENStaff.ssMIFAREID);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStaff", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStaff
		/// </summary>

		public static void CreateOrUpdateStaff(HeContext heContext, BitArray usedFields, RCStaffRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffEntity.eSpaceId;
				ENStaffEntityRecord ssENStaff = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(15, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStaffEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[FORENAMES] = @ssForenames"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SURNAME] = @ssSurname"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADNAME] = @ssADName"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAFFNUMBER] = @ssStaffNumber"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXTENSION] = @ssExtension"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXTENSION2] = @ssExtension2"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DDI] = @ssDDI"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DDI2] = @ssDDI2"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[JOBTITLE] = @ssJobTitle"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DEPARTMENT] = @ssDepartment"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFICE] = @ssOffice"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SITEDESCRIPTION] = @ssSiteDescription"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COSTCODE] = @ssCostCode"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MIFAREID] = @ssMIFAREID"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStaffssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssForenames", DbType.String, ssENStaff.ssForenames);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssSurname", DbType.String, ssENStaff.ssSurname);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssADName", DbType.String, ssENStaff.ssADName);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssStaffNumber", DbType.String, ssENStaff.ssStaffNumber);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssExtension", DbType.String, ssENStaff.ssExtension);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssExtension2", DbType.String, ssENStaff.ssExtension2);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssDDI", DbType.String, ssENStaff.ssDDI);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssDDI2", DbType.String, ssENStaff.ssDDI2);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssJobTitle", DbType.String, ssENStaff.ssJobTitle);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssDepartment", DbType.String, ssENStaff.ssDepartment);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssOffice", DbType.String, ssENStaff.ssOffice);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssSiteDescription", DbType.String, ssENStaff.ssSiteDescription);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssCostCode", DbType.String, ssENStaff.ssCostCode);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssMIFAREID", DbType.String, ssENStaff.ssMIFAREID);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[FORENAMES] = [FORENAMES]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStaffssId", DbType.Int32, ssENStaff.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStaff (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStaffEntity.LocalViewName(null, null) + " (" +
						 " [FORENAMES]" +
						 ", [SURNAME]" +
						 ", [ADNAME]" +
						 ", [STAFFNUMBER]" +
						 ", [EXTENSION]" +
						 ", [EXTENSION2]" +
						 ", [DDI]" +
						 ", [DDI2]" +
						 ", [JOBTITLE]" +
						 ", [DEPARTMENT]" +
						 ", [OFFICE]" +
						 ", [SITEDESCRIPTION]" +
						 ", [COSTCODE]" +
						 ", [MIFAREID]" +
						 " ) VALUES (" +
						 " @ssForenames" +
						 ", @ssSurname" +
						 ", @ssADName" +
						 ", @ssStaffNumber" +
						 ", @ssExtension" +
						 ", @ssExtension2" +
						 ", @ssDDI" +
						 ", @ssDDI2" +
						 ", @ssJobTitle" +
						 ", @ssDepartment" +
						 ", @ssOffice" +
						 ", @ssSiteDescription" +
						 ", @ssCostCode" +
						 ", @ssMIFAREID" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssForenames", DbType.String, ssENStaff.ssForenames);
						insertSqlCmd.CreateParameter("@ssSurname", DbType.String, ssENStaff.ssSurname);
						insertSqlCmd.CreateParameter("@ssADName", DbType.String, ssENStaff.ssADName);
						insertSqlCmd.CreateParameter("@ssStaffNumber", DbType.String, ssENStaff.ssStaffNumber);
						insertSqlCmd.CreateParameter("@ssExtension", DbType.String, ssENStaff.ssExtension);
						insertSqlCmd.CreateParameter("@ssExtension2", DbType.String, ssENStaff.ssExtension2);
						insertSqlCmd.CreateParameter("@ssDDI", DbType.String, ssENStaff.ssDDI);
						insertSqlCmd.CreateParameter("@ssDDI2", DbType.String, ssENStaff.ssDDI2);
						insertSqlCmd.CreateParameter("@ssJobTitle", DbType.String, ssENStaff.ssJobTitle);
						insertSqlCmd.CreateParameter("@ssDepartment", DbType.String, ssENStaff.ssDepartment);
						insertSqlCmd.CreateParameter("@ssOffice", DbType.String, ssENStaff.ssOffice);
						insertSqlCmd.CreateParameter("@ssSiteDescription", DbType.String, ssENStaff.ssSiteDescription);
						insertSqlCmd.CreateParameter("@ssCostCode", DbType.String, ssENStaff.ssCostCode);
						insertSqlCmd.CreateParameter("@ssMIFAREID", DbType.String, ssENStaff.ssMIFAREID);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStaff", true), typeof(int));
					} else {
						outParamId = ssENStaff.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStaff
		/// </summary>

		public static void DeleteStaff(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStaffEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStaff", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStaff
		/// </summary>

		public static void GetStaff(HeContext heContext, int inParamId, out RCStaffRecord outParamRecord) {
			outParamRecord = new RCStaffRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [FORENAMES]" +
					 ", [SURNAME]" +
					 ", [ADNAME]" +
					 ", [STAFFNUMBER]" +
					 ", [EXTENSION]" +
					 ", [EXTENSION2]" +
					 ", [DDI]" +
					 ", [DDI2]" +
					 ", [JOBTITLE]" +
					 ", [DEPARTMENT]" +
					 ", [OFFICE]" +
					 ", [SITEDESCRIPTION]" +
					 ", [COSTCODE]" +
					 ", [MIFAREID]" +
					 " FROM " + ENStaffEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStaff", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(15, false)
							}
							;
						} else
						throw new DataBaseException(ENStaffEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStaffForUpdate
		/// </summary>

		public static void GetStaffForUpdate(HeContext heContext, int inParamId, out RCStaffRecord outParamRecord) {
			outParamRecord = new RCStaffRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [FORENAMES]" +
					 ", [SURNAME]" +
					 ", [ADNAME]" +
					 ", [STAFFNUMBER]" +
					 ", [EXTENSION]" +
					 ", [EXTENSION2]" +
					 ", [DDI]" +
					 ", [DDI2]" +
					 ", [JOBTITLE]" +
					 ", [DEPARTMENT]" +
					 ", [OFFICE]" +
					 ", [SITEDESCRIPTION]" +
					 ", [COSTCODE]" +
					 ", [MIFAREID]" +
					 "FROM " + ENStaffEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStaffForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(15, false)
							}
							;
						} else
						throw new DataBaseException(ENStaffEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStaff
		/// </summary>

		public static void UpdateStaff(HeContext heContext, BitArray usedFields, RCStaffRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffEntity.eSpaceId;
				ENStaffEntityRecord ssENStaff = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(15, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStaffEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[FORENAMES] = @ssForenames"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SURNAME] = @ssSurname"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADNAME] = @ssADName"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAFFNUMBER] = @ssStaffNumber"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXTENSION] = @ssExtension"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXTENSION2] = @ssExtension2"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DDI] = @ssDDI"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DDI2] = @ssDDI2"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[JOBTITLE] = @ssJobTitle"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DEPARTMENT] = @ssDepartment"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFICE] = @ssOffice"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SITEDESCRIPTION] = @ssSiteDescription"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COSTCODE] = @ssCostCode"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MIFAREID] = @ssMIFAREID"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStaffssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssForenames", DbType.String, ssENStaff.ssForenames);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssSurname", DbType.String, ssENStaff.ssSurname);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssADName", DbType.String, ssENStaff.ssADName);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssStaffNumber", DbType.String, ssENStaff.ssStaffNumber);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssExtension", DbType.String, ssENStaff.ssExtension);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssExtension2", DbType.String, ssENStaff.ssExtension2);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssDDI", DbType.String, ssENStaff.ssDDI);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssDDI2", DbType.String, ssENStaff.ssDDI2);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssJobTitle", DbType.String, ssENStaff.ssJobTitle);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssDepartment", DbType.String, ssENStaff.ssDepartment);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssOffice", DbType.String, ssENStaff.ssOffice);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssSiteDescription", DbType.String, ssENStaff.ssSiteDescription);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssCostCode", DbType.String, ssENStaff.ssCostCode);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssMIFAREID", DbType.String, ssENStaff.ssMIFAREID);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[FORENAMES] = [FORENAMES]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStaffssId", DbType.Int32, ssENStaff.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStaff", true) <= 0)
					throw new DataBaseException(ENStaffEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStaff.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Staff")]
	public class WORCStaffRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Forenames")]
		public string varWSForenames;

		[System.Xml.Serialization.XmlElement("Surname")]
		public string varWSSurname;

		[System.Xml.Serialization.XmlElement("ADName")]
		public string varWSADName;

		[System.Xml.Serialization.XmlElement("StaffNumber")]
		public string varWSStaffNumber;

		[System.Xml.Serialization.XmlElement("Extension")]
		public string varWSExtension;

		[System.Xml.Serialization.XmlElement("Extension2")]
		public string varWSExtension2;

		[System.Xml.Serialization.XmlElement("DDI")]
		public string varWSDDI;

		[System.Xml.Serialization.XmlElement("DDI2")]
		public string varWSDDI2;

		[System.Xml.Serialization.XmlElement("JobTitle")]
		public string varWSJobTitle;

		[System.Xml.Serialization.XmlElement("Department")]
		public string varWSDepartment;

		[System.Xml.Serialization.XmlElement("Office")]
		public string varWSOffice;

		[System.Xml.Serialization.XmlElement("SiteDescription")]
		public string varWSSiteDescription;

		[System.Xml.Serialization.XmlElement("CostCode")]
		public string varWSCostCode;

		[System.Xml.Serialization.XmlElement("MIFAREID")]
		public string varWSMIFAREID;

		public WORCStaffRecord() {
			varWSId = (int) 0;
			varWSForenames = (string) "";
			varWSSurname = (string) "";
			varWSADName = (string) "";
			varWSStaffNumber = (string) "";
			varWSExtension = (string) "";
			varWSExtension2 = (string) "";
			varWSDDI = (string) "";
			varWSDDI2 = (string) "";
			varWSJobTitle = (string) "";
			varWSDepartment = (string) "";
			varWSOffice = (string) "";
			varWSSiteDescription = (string) "";
			varWSCostCode = (string) "";
			varWSMIFAREID = (string) "";
		}

		public WORCStaffRecord(ENStaffEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSForenames = BaseAppUtils.RemoveControlChars(r.ssForenames);
			varWSSurname = BaseAppUtils.RemoveControlChars(r.ssSurname);
			varWSADName = BaseAppUtils.RemoveControlChars(r.ssADName);
			varWSStaffNumber = BaseAppUtils.RemoveControlChars(r.ssStaffNumber);
			varWSExtension = BaseAppUtils.RemoveControlChars(r.ssExtension);
			varWSExtension2 = BaseAppUtils.RemoveControlChars(r.ssExtension2);
			varWSDDI = BaseAppUtils.RemoveControlChars(r.ssDDI);
			varWSDDI2 = BaseAppUtils.RemoveControlChars(r.ssDDI2);
			varWSJobTitle = BaseAppUtils.RemoveControlChars(r.ssJobTitle);
			varWSDepartment = BaseAppUtils.RemoveControlChars(r.ssDepartment);
			varWSOffice = BaseAppUtils.RemoveControlChars(r.ssOffice);
			varWSSiteDescription = BaseAppUtils.RemoveControlChars(r.ssSiteDescription);
			varWSCostCode = BaseAppUtils.RemoveControlChars(r.ssCostCode);
			varWSMIFAREID = BaseAppUtils.RemoveControlChars(r.ssMIFAREID);
		}

		public static RLStaffList ToRecordList(WORCStaffRecord[] array) {
			RLStaffList rl = new RLStaffList();
			if (array != null) {
				foreach(WORCStaffRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStaffRecord[] FromRecordList(RLStaffList rl) {
			WORCStaffRecord[] array = new WORCStaffRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStaffRecord {
		public static implicit operator WORCStaffRecord(RCStaffRecord r) {
			return new WORCStaffRecord(r.ssENStaff);
		}

		public static implicit operator RCStaffRecord(WORCStaffRecord w) {
			RCStaffRecord r = new RCStaffRecord("");
			if (w != null) {
				r.ssENStaff = w;
			}
			return r;
		}

	}

	partial struct ENStaffEntityRecord {
		public static implicit operator WORCStaffRecord(ENStaffEntityRecord r) {
			return new WORCStaffRecord(r);
		}

		public static implicit operator ENStaffEntityRecord(WORCStaffRecord w) {
			ENStaffEntityRecord r = new ENStaffEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssForenames = ((string) w.varWSForenames ?? "");
				r.ssSurname = ((string) w.varWSSurname ?? "");
				r.ssADName = ((string) w.varWSADName ?? "");
				r.ssStaffNumber = ((string) w.varWSStaffNumber ?? "");
				r.ssExtension = ((string) w.varWSExtension ?? "");
				r.ssExtension2 = ((string) w.varWSExtension2 ?? "");
				r.ssDDI = ((string) w.varWSDDI ?? "");
				r.ssDDI2 = ((string) w.varWSDDI2 ?? "");
				r.ssJobTitle = ((string) w.varWSJobTitle ?? "");
				r.ssDepartment = ((string) w.varWSDepartment ?? "");
				r.ssOffice = ((string) w.varWSOffice ?? "");
				r.ssSiteDescription = ((string) w.varWSSiteDescription ?? "");
				r.ssCostCode = ((string) w.varWSCostCode ?? "");
				r.ssMIFAREID = ((string) w.varWSMIFAREID ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffRecordList {
		public WORCStaffRecord[] Array;


		public WORLStaffRecordList(WORCStaffRecord[] r) {
			if (r == null)
			Array = new WORCStaffRecord[0];
			else
			Array = r;
		}
		public WORLStaffRecordList() {
			Array = new WORCStaffRecord[0];
		}

		public WORLStaffRecordList(RLStaffRecordList rl) {
			rl=(RLStaffRecordList) rl.Duplicate();
			Array = new WORCStaffRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStaffRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffRecordList {
		public static implicit operator RLStaffRecordList(WORCStaffRecord[] array) {
			RLStaffRecordList rl = new RLStaffRecordList();
			if (array != null) {
				foreach(WORCStaffRecord val in array) {
					rl.Append((RCStaffRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffRecord[](RLStaffRecordList rl) {
			WORCStaffRecord[] array = new WORCStaffRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStaffRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffRecordList {
		public static implicit operator RLStaffRecordList(WORLStaffRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffRecordList(RLStaffRecordList rl) {
			return new WORLStaffRecordList(rl);
		}
		public static implicit operator WORCStaffRecord[](WORLStaffRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffRecordList(WORCStaffRecord[] array) {
			return new WORLStaffRecordList(array);
		}
	}
}

