/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENCauseOfConcernLearnerNotesEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENCauseOfConcernLearnerNotesEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENCauseOfConcernLearnerNotesEntity.eSpaceId;
	} // ENCauseOfConcernLearnerNotesEntity

	/// <summary>
	/// Entity <code>ENCauseOfConcernLearnerNotesEntityRecord</code> that represents the Service Studio
	///  entity <code>CauseOfConcernLearnerNotes</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("CauseOfConcernLearnerNotes", "uN_sS5TU40KSpU9sEFSeVw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_CauseOfConcernLearnerNotes", "")]
	[Serializable()]
	public partial struct ENCauseOfConcernLearnerNotesEntityRecord: ISerializable, ITypedRecord<ENCauseOfConcernLearnerNotesEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*5XSBFv7An0+vLPvT_9suNA");
		private static readonly GlobalObjectKey IdCaseOfConcernId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Q8H_uhPXIE+Zp2lutAl80A");
		private static readonly GlobalObjectKey IdUserId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*naKEp0BvKESl+HVEEptGRA");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*7JN8PiYVTkGhFd4M__c2Jg");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*KCtHOicS_E63ZDScsaGyJw");
		private static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Mc1ymOlgx0CLCMmVjyaIZg");
		private static readonly GlobalObjectKey Idis_Active = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xXu6pKUjl06+txPVV9BilQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CASEOFCONCERNID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CaseOfConcernId")]
		private int _ssCaseOfConcernId;
		public int ssCaseOfConcernId {
			get {
				return _ssCaseOfConcernId;
			}
			set {
				if ((_ssCaseOfConcernId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssCaseOfConcernId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USERID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("UserId")]
		private int _ssUserId;
		public int ssUserId {
			get {
				return _ssUserId;
			}
			set {
				if ((_ssUserId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssUserId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedOn")]
		private DateTime _ssCreatedOn;
		public DateTime ssCreatedOn {
			get {
				return _ssCreatedOn;
			}
			set {
				if ((_ssCreatedOn!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCreatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("is_Active")]
		private bool _ssis_Active;
		public bool ssis_Active {
			get {
				return _ssis_Active;
			}
			set {
				if ((_ssis_Active!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssis_Active = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENCauseOfConcernLearnerNotesEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssCaseOfConcernId = 0;
			_ssUserId = 0;
			_ssStudentReference = "";
			_ssDescription = "";
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssis_Active = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "CauseOfConcernLearnerNotes.Id", 0);
			ssCaseOfConcernId = r.ReadEntityReference(index++, "CauseOfConcernLearnerNotes.CaseOfConcernId", 0);
			ssUserId = r.ReadEntityReference(index++, "CauseOfConcernLearnerNotes.UserId", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "CauseOfConcernLearnerNotes.StudentReference", "");
			ssDescription = r.ReadText(index++, "CauseOfConcernLearnerNotes.Description", "");
			ssCreatedOn = r.ReadDateTime(index++, "CauseOfConcernLearnerNotes.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssis_Active = r.ReadBoolean(index++, "CauseOfConcernLearnerNotes.is_Active", false);
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENCauseOfConcernLearnerNotesEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENCauseOfConcernLearnerNotesEntityRecord a, ENCauseOfConcernLearnerNotesEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssCaseOfConcernId != b.ssCaseOfConcernId) return false;
			if (a.ssUserId != b.ssUserId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			if (a.ssis_Active != b.ssis_Active) return false;
			return true;
		}

		public static bool operator != (ENCauseOfConcernLearnerNotesEntityRecord a, ENCauseOfConcernLearnerNotesEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENCauseOfConcernLearnerNotesEntityRecord)) return false;
			return (this == (ENCauseOfConcernLearnerNotesEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssCaseOfConcernId.GetHashCode()
				^ ssUserId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				^ ssis_Active.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENCauseOfConcernLearnerNotesEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssCaseOfConcernId = 0;
			_ssUserId = 0;
			_ssStudentReference = "";
			_ssDescription = "";
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssis_Active = false;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssCaseOfConcernId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssUserId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCreatedOn = (DateTime) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssis_Active = (bool) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENCauseOfConcernLearnerNotesEntityRecord Duplicate() {
			ENCauseOfConcernLearnerNotesEntityRecord t;
			t._ssId = this._ssId;
			t._ssCaseOfConcernId = this._ssCaseOfConcernId;
			t._ssUserId = this._ssUserId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssDescription = this._ssDescription;
			t._ssCreatedOn = this._ssCreatedOn;
			t._ssis_Active = this._ssis_Active;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CaseOfConcernId")) VarValue.AppendAttribute(recordElem, "CaseOfConcernId", ssCaseOfConcernId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CaseOfConcernId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserId")) VarValue.AppendAttribute(recordElem, "UserId", ssUserId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "UserId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".is_Active")) VarValue.AppendAttribute(recordElem, "is_Active", ssis_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "is_Active");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "caseofconcernid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CaseOfConcernId")) variable.Value = ssCaseOfConcernId; else variable.Optimized = true;
			} else if (head == "userid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserId")) variable.Value = ssUserId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			} else if (head == "is_active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".is_Active")) variable.Value = ssis_Active; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdCaseOfConcernId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdUserId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCreatedOn)) {
				return ChangedAttributes[5];
			} else if (key.Equals(Idis_Active)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdCaseOfConcernId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdUserId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCreatedOn)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(Idis_Active)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdCaseOfConcernId) {
				return ssCaseOfConcernId;
			} else if (key == IdUserId) {
				return ssUserId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else if (key == Idis_Active) {
				return ssis_Active;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssCaseOfConcernId = (int) other.AttributeGet(IdCaseOfConcernId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdCaseOfConcernId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdCaseOfConcernId);
			ssUserId = (int) other.AttributeGet(IdUserId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdUserId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdUserId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdStudentReference);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdDescription);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCreatedOn);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCreatedOn);
			ssis_Active = (bool) other.AttributeGet(Idis_Active);
			ChangedAttributes[6] = other.ChangedAttributeGet(Idis_Active);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(Idis_Active);
		}
	} // ENCauseOfConcernLearnerNotesEntityRecord
	/// <summary>
	/// Structure <code>RCCauseOfConcernLearnerNotesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCauseOfConcernLearnerNotesRecord: ISerializable, ITypedRecord<RCCauseOfConcernLearnerNotesRecord> {
		private static readonly GlobalObjectKey IdCauseOfConcernLearnerNotes = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*laYcc3VY189OEbevNXNHhw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CauseOfConcernLearnerNotes")]
		public ENCauseOfConcernLearnerNotesEntityRecord ssENCauseOfConcernLearnerNotes;


		public static implicit operator ENCauseOfConcernLearnerNotesEntityRecord(RCCauseOfConcernLearnerNotesRecord r) {
			return r.ssENCauseOfConcernLearnerNotes;
		}

		public static implicit operator RCCauseOfConcernLearnerNotesRecord(ENCauseOfConcernLearnerNotesEntityRecord r) {
			RCCauseOfConcernLearnerNotesRecord res = new RCCauseOfConcernLearnerNotesRecord(null);
			res.ssENCauseOfConcernLearnerNotes = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENCauseOfConcernLearnerNotes.ChangedAttributes = value;
			}
			get {
				return ssENCauseOfConcernLearnerNotes.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCCauseOfConcernLearnerNotesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCauseOfConcernLearnerNotes = new ENCauseOfConcernLearnerNotesEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCauseOfConcernLearnerNotes.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENCauseOfConcernLearnerNotes.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENCauseOfConcernLearnerNotes.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCauseOfConcernLearnerNotes.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCauseOfConcernLearnerNotesRecord r) {
			this = r;
		}


		public static bool operator == (RCCauseOfConcernLearnerNotesRecord a, RCCauseOfConcernLearnerNotesRecord b) {
			if (a.ssENCauseOfConcernLearnerNotes != b.ssENCauseOfConcernLearnerNotes) return false;
			return true;
		}

		public static bool operator != (RCCauseOfConcernLearnerNotesRecord a, RCCauseOfConcernLearnerNotesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCauseOfConcernLearnerNotesRecord)) return false;
			return (this == (RCCauseOfConcernLearnerNotesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCauseOfConcernLearnerNotes.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCauseOfConcernLearnerNotesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCauseOfConcernLearnerNotes = new ENCauseOfConcernLearnerNotesEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCauseOfConcernLearnerNotes = (ENCauseOfConcernLearnerNotesEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENCauseOfConcernLearnerNotes.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCauseOfConcernLearnerNotes.InternalRecursiveSave();
		}


		public RCCauseOfConcernLearnerNotesRecord Duplicate() {
			RCCauseOfConcernLearnerNotesRecord t;
			t.ssENCauseOfConcernLearnerNotes = (ENCauseOfConcernLearnerNotesEntityRecord) this.ssENCauseOfConcernLearnerNotes.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCauseOfConcernLearnerNotes.ToXml(this, recordElem, "CauseOfConcernLearnerNotes", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "causeofconcernlearnernotes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernLearnerNotes")) variable.Value = ssENCauseOfConcernLearnerNotes; else variable.Optimized = true;
				variable.SetFieldName("causeofconcernlearnernotes");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENCauseOfConcernLearnerNotes.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENCauseOfConcernLearnerNotes.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCauseOfConcernLearnerNotes) {
				return ssENCauseOfConcernLearnerNotes;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCauseOfConcernLearnerNotes.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcernLearnerNotes));
		}
	} // RCCauseOfConcernLearnerNotesRecord
	/// <summary>
	/// RecordList type <code>RLCauseOfConcernLearnerNotesRecordList</code> that represents a record list
	///  of <code>CauseOfConcernLearnerNotes</code>
	/// </summary>
	[Serializable()]
	public partial class RLCauseOfConcernLearnerNotesRecordList: GenericRecordList<RCCauseOfConcernLearnerNotesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCauseOfConcernLearnerNotesRecord GetElementDefaultValue() {
			return new RCCauseOfConcernLearnerNotesRecord("");
		}

		public T[] ToArray<T>(Func<RCCauseOfConcernLearnerNotesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCauseOfConcernLearnerNotesRecordList recordlist, Func<RCCauseOfConcernLearnerNotesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCauseOfConcernLearnerNotesRecordList ToList<T>(T[] array, Func <T, RCCauseOfConcernLearnerNotesRecord> converter) {
			RLCauseOfConcernLearnerNotesRecordList result = new RLCauseOfConcernLearnerNotesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCauseOfConcernLearnerNotesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCauseOfConcernLearnerNotesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCauseOfConcernLearnerNotesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCauseOfConcernLearnerNotesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCauseOfConcernLearnerNotesRecord> NewList() {
			return new RLCauseOfConcernLearnerNotesRecordList();
		}


	} // RLCauseOfConcernLearnerNotesRecordList

	/// <summary>
	/// RecordList type <code>RLCauseOfConcernLearnerNotesList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, DateTime, Boolean, Integer
	/// , CauseOfConcernIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLCauseOfConcernLearnerNotesList: GenericRecordList<ENCauseOfConcernLearnerNotesEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENCauseOfConcernLearnerNotesEntityRecord GetElementDefaultValue() {
			return new ENCauseOfConcernLearnerNotesEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENCauseOfConcernLearnerNotesEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCauseOfConcernLearnerNotesList recordlist, Func<ENCauseOfConcernLearnerNotesEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCauseOfConcernLearnerNotesList ToList<T>(T[] array, Func <T, ENCauseOfConcernLearnerNotesEntityRecord> converter) {
			RLCauseOfConcernLearnerNotesList result = new RLCauseOfConcernLearnerNotesList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCauseOfConcernLearnerNotesList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCauseOfConcernLearnerNotesList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCauseOfConcernLearnerNotesList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCauseOfConcernLearnerNotesList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENCauseOfConcernLearnerNotesEntityRecord> NewList() {
			return new RLCauseOfConcernLearnerNotesList();
		}


	} // RLCauseOfConcernLearnerNotesList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateCauseOfConcernLearnerNotes
		/// </summary>

		public static void CreateCauseOfConcernLearnerNotes(HeContext heContext, RCCauseOfConcernLearnerNotesRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernLearnerNotesEntity.eSpaceId;
				ENCauseOfConcernLearnerNotesEntityRecord ssENCauseOfConcernLearnerNotes = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENCauseOfConcernLearnerNotesEntity.LocalViewName(null, null) + " (" +
					 " [CASEOFCONCERNID]" +
					 ", [USERID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [DESCRIPTION]" +
					 ", [CREATEDON]" +
					 ", [IS_ACTIVE]" +
					 " ) VALUES (" +
					 " @ssCaseOfConcernId" +
					 ", @ssUserId" +
					 ", @ssStudentReference" +
					 ", @ssDescription" +
					 ", @ssCreatedOn" +
					 ", @ssis_Active" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENCauseOfConcernLearnerNotes.ssCaseOfConcernId==0)) {
						insertSqlCmd.CreateParameter("@ssCaseOfConcernId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCaseOfConcernId", DbType.Int32, ssENCauseOfConcernLearnerNotes.ssCaseOfConcernId);
					}
					if ((ssENCauseOfConcernLearnerNotes.ssUserId==0)) {
						insertSqlCmd.CreateParameter("@ssUserId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENCauseOfConcernLearnerNotes.ssUserId);
					}
					if ((ssENCauseOfConcernLearnerNotes.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENCauseOfConcernLearnerNotes.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCauseOfConcernLearnerNotes.ssDescription);
					insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENCauseOfConcernLearnerNotes.ssCreatedOn);
					insertSqlCmd.CreateParameter("@ssis_Active", DbType.Boolean, ssENCauseOfConcernLearnerNotes.ssis_Active);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateCauseOfConcernLearnerNotes", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateCauseOfConcernLearnerNotes
		/// </summary>

		public static void CreateOrUpdateCauseOfConcernLearnerNotes(HeContext heContext, BitArray usedFields, RCCauseOfConcernLearnerNotesRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernLearnerNotesEntity.eSpaceId;
				ENCauseOfConcernLearnerNotesEntityRecord ssENCauseOfConcernLearnerNotes = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCauseOfConcernLearnerNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CASEOFCONCERNID] = @ssCaseOfConcernId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERID] = @ssUserId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_ACTIVE] = @ssis_Active"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCauseOfConcernLearnerNotesssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCauseOfConcernLearnerNotes.ssCaseOfConcernId==0)) {
							sqlCmd.CreateParameter("@ssCaseOfConcernId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCaseOfConcernId", DbType.Int32, ssENCauseOfConcernLearnerNotes.ssCaseOfConcernId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCauseOfConcernLearnerNotes.ssUserId==0)) {
							sqlCmd.CreateParameter("@ssUserId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENCauseOfConcernLearnerNotes.ssUserId);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENCauseOfConcernLearnerNotes.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENCauseOfConcernLearnerNotes.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCauseOfConcernLearnerNotes.ssDescription);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENCauseOfConcernLearnerNotes.ssCreatedOn);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssis_Active", DbType.Boolean, ssENCauseOfConcernLearnerNotes.ssis_Active);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[IS_ACTIVE] = [IS_ACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCauseOfConcernLearnerNotesssId", DbType.Int32, ssENCauseOfConcernLearnerNotes.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateCauseOfConcernLearnerNotes (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENCauseOfConcernLearnerNotesEntity.LocalViewName(null, null) + " (" +
						 " [CASEOFCONCERNID]" +
						 ", [USERID]" +
						 ", [STUDENTREFERENCE]" +
						 ", [DESCRIPTION]" +
						 ", [CREATEDON]" +
						 ", [IS_ACTIVE]" +
						 " ) VALUES (" +
						 " @ssCaseOfConcernId" +
						 ", @ssUserId" +
						 ", @ssStudentReference" +
						 ", @ssDescription" +
						 ", @ssCreatedOn" +
						 ", @ssis_Active" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENCauseOfConcernLearnerNotes.ssCaseOfConcernId==0)) {
							insertSqlCmd.CreateParameter("@ssCaseOfConcernId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCaseOfConcernId", DbType.Int32, ssENCauseOfConcernLearnerNotes.ssCaseOfConcernId);
						}
						if ((ssENCauseOfConcernLearnerNotes.ssUserId==0)) {
							insertSqlCmd.CreateParameter("@ssUserId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENCauseOfConcernLearnerNotes.ssUserId);
						}
						if ((ssENCauseOfConcernLearnerNotes.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENCauseOfConcernLearnerNotes.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCauseOfConcernLearnerNotes.ssDescription);
						insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENCauseOfConcernLearnerNotes.ssCreatedOn);
						insertSqlCmd.CreateParameter("@ssis_Active", DbType.Boolean, ssENCauseOfConcernLearnerNotes.ssis_Active);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateCauseOfConcernLearnerNotes", true), typeof(int));
					} else {
						outParamId = ssENCauseOfConcernLearnerNotes.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteCauseOfConcernLearnerNotes
		/// </summary>

		public static void DeleteCauseOfConcernLearnerNotes(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernLearnerNotesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENCauseOfConcernLearnerNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteCauseOfConcernLearnerNotes", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCauseOfConcernLearnerNotes
		/// </summary>

		public static void GetCauseOfConcernLearnerNotes(HeContext heContext, int inParamId, out RCCauseOfConcernLearnerNotesRecord outParamRecord) {
			outParamRecord = new RCCauseOfConcernLearnerNotesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernLearnerNotesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [CASEOFCONCERNID]" +
					 ", [USERID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [DESCRIPTION]" +
					 ", [CREATEDON]" +
					 ", [IS_ACTIVE]" +
					 " FROM " + ENCauseOfConcernLearnerNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCauseOfConcernLearnerNotes", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENCauseOfConcernLearnerNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCauseOfConcernLearnerNotesForUpdate
		/// </summary>

		public static void GetCauseOfConcernLearnerNotesForUpdate(HeContext heContext, int inParamId, out RCCauseOfConcernLearnerNotesRecord outParamRecord) {
			outParamRecord = new RCCauseOfConcernLearnerNotesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernLearnerNotesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [CASEOFCONCERNID]" +
					 ", [USERID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [DESCRIPTION]" +
					 ", [CREATEDON]" +
					 ", [IS_ACTIVE]" +
					 "FROM " + ENCauseOfConcernLearnerNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCauseOfConcernLearnerNotesForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENCauseOfConcernLearnerNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateCauseOfConcernLearnerNotes
		/// </summary>

		public static void UpdateCauseOfConcernLearnerNotes(HeContext heContext, BitArray usedFields, RCCauseOfConcernLearnerNotesRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernLearnerNotesEntity.eSpaceId;
				ENCauseOfConcernLearnerNotesEntityRecord ssENCauseOfConcernLearnerNotes = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCauseOfConcernLearnerNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CASEOFCONCERNID] = @ssCaseOfConcernId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERID] = @ssUserId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_ACTIVE] = @ssis_Active"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCauseOfConcernLearnerNotesssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCauseOfConcernLearnerNotes.ssCaseOfConcernId==0)) {
							sqlCmd.CreateParameter("@ssCaseOfConcernId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCaseOfConcernId", DbType.Int32, ssENCauseOfConcernLearnerNotes.ssCaseOfConcernId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCauseOfConcernLearnerNotes.ssUserId==0)) {
							sqlCmd.CreateParameter("@ssUserId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENCauseOfConcernLearnerNotes.ssUserId);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENCauseOfConcernLearnerNotes.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENCauseOfConcernLearnerNotes.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCauseOfConcernLearnerNotes.ssDescription);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENCauseOfConcernLearnerNotes.ssCreatedOn);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssis_Active", DbType.Boolean, ssENCauseOfConcernLearnerNotes.ssis_Active);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[IS_ACTIVE] = [IS_ACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCauseOfConcernLearnerNotesssId", DbType.Int32, ssENCauseOfConcernLearnerNotes.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateCauseOfConcernLearnerNotes", true) <= 0)
					throw new DataBaseException(ENCauseOfConcernLearnerNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENCauseOfConcernLearnerNotes.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("CauseOfConcernLearnerNotes")]
	public class WORCCauseOfConcernLearnerNotesRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("CaseOfConcernId")]
		public int varWSCaseOfConcernId;

		[System.Xml.Serialization.XmlElement("UserId")]
		public int varWSUserId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime varWSCreatedOn;

		[System.Xml.Serialization.XmlElement("is_Active")]
		public bool varWSis_Active;

		public WORCCauseOfConcernLearnerNotesRecord() {
			varWSId = (int) 0;
			varWSCaseOfConcernId = (int) 0;
			varWSUserId = (int) 0;
			varWSStudentReference = (string) "";
			varWSDescription = (string) "";
			varWSCreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSis_Active = (bool) false;
		}

		public WORCCauseOfConcernLearnerNotesRecord(ENCauseOfConcernLearnerNotesEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSCaseOfConcernId = (int) r.ssCaseOfConcernId;
			varWSUserId = (int) r.ssUserId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
			varWSCreatedOn = (DateTime) r.ssCreatedOn;
			varWSis_Active = (bool) r.ssis_Active;
		}

		public static RLCauseOfConcernLearnerNotesList ToRecordList(WORCCauseOfConcernLearnerNotesRecord[] array) {
			RLCauseOfConcernLearnerNotesList rl = new RLCauseOfConcernLearnerNotesList();
			if (array != null) {
				foreach(WORCCauseOfConcernLearnerNotesRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCauseOfConcernLearnerNotesRecord[] FromRecordList(RLCauseOfConcernLearnerNotesList rl) {
			WORCCauseOfConcernLearnerNotesRecord[] array = new WORCCauseOfConcernLearnerNotesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCauseOfConcernLearnerNotesRecord {
		public static implicit operator WORCCauseOfConcernLearnerNotesRecord(RCCauseOfConcernLearnerNotesRecord r) {
			return new WORCCauseOfConcernLearnerNotesRecord(r.ssENCauseOfConcernLearnerNotes);
		}

		public static implicit operator RCCauseOfConcernLearnerNotesRecord(WORCCauseOfConcernLearnerNotesRecord w) {
			RCCauseOfConcernLearnerNotesRecord r = new RCCauseOfConcernLearnerNotesRecord("");
			if (w != null) {
				r.ssENCauseOfConcernLearnerNotes = w;
			}
			return r;
		}

	}

	partial struct ENCauseOfConcernLearnerNotesEntityRecord {
		public static implicit operator WORCCauseOfConcernLearnerNotesRecord(ENCauseOfConcernLearnerNotesEntityRecord r) {
			return new WORCCauseOfConcernLearnerNotesRecord(r);
		}

		public static implicit operator ENCauseOfConcernLearnerNotesEntityRecord(WORCCauseOfConcernLearnerNotesRecord w) {
			ENCauseOfConcernLearnerNotesEntityRecord r = new ENCauseOfConcernLearnerNotesEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssCaseOfConcernId = (int) w.varWSCaseOfConcernId;
				r.ssUserId = (int) w.varWSUserId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssDescription = ((string) w.varWSDescription ?? "");
				r.ssCreatedOn = (DateTime) w.varWSCreatedOn;
				r.ssis_Active = (bool) w.varWSis_Active;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCauseOfConcernLearnerNotesRecordList {
		public WORCCauseOfConcernLearnerNotesRecord[] Array;


		public WORLCauseOfConcernLearnerNotesRecordList(WORCCauseOfConcernLearnerNotesRecord[] r) {
			if (r == null)
			Array = new WORCCauseOfConcernLearnerNotesRecord[0];
			else
			Array = r;
		}
		public WORLCauseOfConcernLearnerNotesRecordList() {
			Array = new WORCCauseOfConcernLearnerNotesRecord[0];
		}

		public WORLCauseOfConcernLearnerNotesRecordList(RLCauseOfConcernLearnerNotesRecordList rl) {
			rl=(RLCauseOfConcernLearnerNotesRecordList) rl.Duplicate();
			Array = new WORCCauseOfConcernLearnerNotesRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCauseOfConcernLearnerNotesRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCauseOfConcernLearnerNotesRecordList {
		public static implicit operator RLCauseOfConcernLearnerNotesRecordList(WORCCauseOfConcernLearnerNotesRecord[] array) {
			RLCauseOfConcernLearnerNotesRecordList rl = new RLCauseOfConcernLearnerNotesRecordList();
			if (array != null) {
				foreach(WORCCauseOfConcernLearnerNotesRecord val in array) {
					rl.Append((RCCauseOfConcernLearnerNotesRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCauseOfConcernLearnerNotesRecord[](RLCauseOfConcernLearnerNotesRecordList rl) {
			WORCCauseOfConcernLearnerNotesRecord[] array = new WORCCauseOfConcernLearnerNotesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCauseOfConcernLearnerNotesRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCauseOfConcernLearnerNotesRecordList {
		public static implicit operator RLCauseOfConcernLearnerNotesRecordList(WORLCauseOfConcernLearnerNotesRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCauseOfConcernLearnerNotesRecordList(RLCauseOfConcernLearnerNotesRecordList rl) {
			return new WORLCauseOfConcernLearnerNotesRecordList(rl);
		}
		public static implicit operator WORCCauseOfConcernLearnerNotesRecord[](WORLCauseOfConcernLearnerNotesRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCauseOfConcernLearnerNotesRecordList(WORCCauseOfConcernLearnerNotesRecord[] array) {
			return new WORLCauseOfConcernLearnerNotesRecordList(array);
		}
	}
}

