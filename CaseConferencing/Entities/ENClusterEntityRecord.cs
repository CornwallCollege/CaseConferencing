/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENClusterEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENClusterEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENClusterEntity.eSpaceId;
	} // ENClusterEntity

	/// <summary>
	/// Entity <code>ENClusterEntityRecord</code> that represents the Service Studio entity
	///  <code>Cluster</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Cluster", "rEdVL8vrX0G+XkjOeJFYkg", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Cluster", "")]
	[Serializable()]
	public partial struct ENClusterEntityRecord: ISerializable, ITypedRecord<ENClusterEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*YHWtExM_Okq86zG4ht9yCg");
		private static readonly GlobalObjectKey IdClusterCode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*YFnED6g71EGumAE+4WgPKg");
		private static readonly GlobalObjectKey IdClusterDescription = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*kE6rxz4LEk26NbFmfoDGXA");
		private static readonly GlobalObjectKey IdIconFileName = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*FEIgPRl_5kSdfFmgdzl_+Q");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*eoOW7VtUq06ja3l7iDq_qw");
		private static readonly GlobalObjectKey IdIsActive = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*tY1f6i0JbkanveaoLB5bJw");
		private static readonly GlobalObjectKey IdProSolutionSID = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*ok0hT9m6K0mmvvGGXFggKw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 50, false, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private string _ssId;
		public string ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CLUSTERCODE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("ClusterCode")]
		private string _ssClusterCode;
		public string ssClusterCode {
			get {
				return _ssClusterCode;
			}
			set {
				if ((_ssClusterCode!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssClusterCode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CLUSTERDESCRIPTION", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("ClusterDescription")]
		private string _ssClusterDescription;
		public string ssClusterDescription {
			get {
				return _ssClusterDescription;
			}
			set {
				if ((_ssClusterDescription!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssClusterDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ICONFILENAME", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("IconFileName")]
		private string _ssIconFileName;
		public string ssIconFileName {
			get {
				return _ssIconFileName;
			}
			set {
				if ((_ssIconFileName!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssIconFileName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssOrder = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IsActive")]
		private bool _ssIsActive;
		public bool ssIsActive {
			get {
				return _ssIsActive;
			}
			set {
				if ((_ssIsActive!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssIsActive = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PROSOLUTIONSID", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("ProSolutionSID")]
		private int _ssProSolutionSID;
		public int ssProSolutionSID {
			get {
				return _ssProSolutionSID;
			}
			set {
				if ((_ssProSolutionSID!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssProSolutionSID = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENClusterEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = "";
			_ssClusterCode = "";
			_ssClusterDescription = "";
			_ssIconFileName = "";
			_ssOrder = 0;
			_ssIsActive = false;
			_ssProSolutionSID = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadText(index++, "Cluster.Id", "");
			ssClusterCode = r.ReadText(index++, "Cluster.ClusterCode", "");
			ssClusterDescription = r.ReadText(index++, "Cluster.ClusterDescription", "");
			ssIconFileName = r.ReadText(index++, "Cluster.IconFileName", "");
			ssOrder = r.ReadInteger(index++, "Cluster.Order", 0);
			ssIsActive = r.ReadBoolean(index++, "Cluster.IsActive", false);
			ssProSolutionSID = r.ReadInteger(index++, "Cluster.ProSolutionSID", 0);
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENClusterEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENClusterEntityRecord a, ENClusterEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssClusterCode != b.ssClusterCode) return false;
			if (a.ssClusterDescription != b.ssClusterDescription) return false;
			if (a.ssIconFileName != b.ssIconFileName) return false;
			if (a.ssOrder != b.ssOrder) return false;
			if (a.ssIsActive != b.ssIsActive) return false;
			if (a.ssProSolutionSID != b.ssProSolutionSID) return false;
			return true;
		}

		public static bool operator != (ENClusterEntityRecord a, ENClusterEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENClusterEntityRecord)) return false;
			return (this == (ENClusterEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssClusterCode.GetHashCode()
				^ ssClusterDescription.GetHashCode()
				^ ssIconFileName.GetHashCode()
				^ ssOrder.GetHashCode()
				^ ssIsActive.GetHashCode()
				^ ssProSolutionSID.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENClusterEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = "";
			_ssClusterCode = "";
			_ssClusterDescription = "";
			_ssIconFileName = "";
			_ssOrder = 0;
			_ssIsActive = false;
			_ssProSolutionSID = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssClusterCode = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssClusterDescription = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssIconFileName = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssOrder = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssIsActive = (bool) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssProSolutionSID = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENClusterEntityRecord Duplicate() {
			ENClusterEntityRecord t;
			t._ssId = this._ssId;
			t._ssClusterCode = this._ssClusterCode;
			t._ssClusterDescription = this._ssClusterDescription;
			t._ssIconFileName = this._ssIconFileName;
			t._ssOrder = this._ssOrder;
			t._ssIsActive = this._ssIsActive;
			t._ssProSolutionSID = this._ssProSolutionSID;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ClusterCode")) VarValue.AppendAttribute(recordElem, "ClusterCode", ssClusterCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ClusterCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ClusterDescription")) VarValue.AppendAttribute(recordElem, "ClusterDescription", ssClusterDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ClusterDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IconFileName")) VarValue.AppendAttribute(recordElem, "IconFileName", ssIconFileName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "IconFileName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsActive")) VarValue.AppendAttribute(recordElem, "IsActive", ssIsActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsActive");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProSolutionSID")) VarValue.AppendAttribute(recordElem, "ProSolutionSID", ssProSolutionSID, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ProSolutionSID");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "clustercode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ClusterCode")) variable.Value = ssClusterCode; else variable.Optimized = true;
			} else if (head == "clusterdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ClusterDescription")) variable.Value = ssClusterDescription; else variable.Optimized = true;
			} else if (head == "iconfilename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IconFileName")) variable.Value = ssIconFileName; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			} else if (head == "isactive") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsActive")) variable.Value = ssIsActive; else variable.Optimized = true;
			} else if (head == "prosolutionsid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProSolutionSID")) variable.Value = ssProSolutionSID; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdClusterCode)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdClusterDescription)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdIconFileName)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdIsActive)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdProSolutionSID)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdClusterCode)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdClusterDescription)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdIconFileName)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdIsActive)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdProSolutionSID)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdClusterCode) {
				return ssClusterCode;
			} else if (key == IdClusterDescription) {
				return ssClusterDescription;
			} else if (key == IdIconFileName) {
				return ssIconFileName;
			} else if (key == IdOrder) {
				return ssOrder;
			} else if (key == IdIsActive) {
				return ssIsActive;
			} else if (key == IdProSolutionSID) {
				return ssProSolutionSID;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (string) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssClusterCode = (string) other.AttributeGet(IdClusterCode);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdClusterCode);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdClusterCode);
			ssClusterDescription = (string) other.AttributeGet(IdClusterDescription);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdClusterDescription);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdClusterDescription);
			ssIconFileName = (string) other.AttributeGet(IdIconFileName);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdIconFileName);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdIconFileName);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdOrder);
			ssIsActive = (bool) other.AttributeGet(IdIsActive);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdIsActive);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdIsActive);
			ssProSolutionSID = (int) other.AttributeGet(IdProSolutionSID);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdProSolutionSID);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdProSolutionSID);
		}
	} // ENClusterEntityRecord
	/// <summary>
	/// Structure <code>RCClusterRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCClusterRecord: ISerializable, ITypedRecord<RCClusterRecord> {
		private static readonly GlobalObjectKey IdCluster = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*mAONl_1ENuXUhe0ejJwxsA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Cluster")]
		public ENClusterEntityRecord ssENCluster;


		public static implicit operator ENClusterEntityRecord(RCClusterRecord r) {
			return r.ssENCluster;
		}

		public static implicit operator RCClusterRecord(ENClusterEntityRecord r) {
			RCClusterRecord res = new RCClusterRecord(null);
			res.ssENCluster = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENCluster.ChangedAttributes = value;
			}
			get {
				return ssENCluster.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCClusterRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCluster = new ENClusterEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCluster.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENCluster.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENCluster.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCluster.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCClusterRecord r) {
			this = r;
		}


		public static bool operator == (RCClusterRecord a, RCClusterRecord b) {
			if (a.ssENCluster != b.ssENCluster) return false;
			return true;
		}

		public static bool operator != (RCClusterRecord a, RCClusterRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCClusterRecord)) return false;
			return (this == (RCClusterRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCluster.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCClusterRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCluster = new ENClusterEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCluster = (ENClusterEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENCluster.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCluster.InternalRecursiveSave();
		}


		public RCClusterRecord Duplicate() {
			RCClusterRecord t;
			t.ssENCluster = (ENClusterEntityRecord) this.ssENCluster.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCluster.ToXml(this, recordElem, "Cluster", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "cluster") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Cluster")) variable.Value = ssENCluster; else variable.Optimized = true;
				variable.SetFieldName("cluster");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENCluster.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENCluster.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCluster) {
				return ssENCluster;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCluster.FillFromOther((IRecord) other.AttributeGet(IdCluster));
		}
	} // RCClusterRecord
	/// <summary>
	/// RecordList type <code>RLClusterRecordList</code> that represents a record list of
	///  <code>Cluster</code>
	/// </summary>
	[Serializable()]
	public partial class RLClusterRecordList: GenericRecordList<RCClusterRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCClusterRecord GetElementDefaultValue() {
			return new RCClusterRecord("");
		}

		public T[] ToArray<T>(Func<RCClusterRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLClusterRecordList recordlist, Func<RCClusterRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLClusterRecordList ToList<T>(T[] array, Func <T, RCClusterRecord> converter) {
			RLClusterRecordList result = new RLClusterRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLClusterRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClusterRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClusterRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLClusterRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCClusterRecord> NewList() {
			return new RLClusterRecordList();
		}


	} // RLClusterRecordList

	/// <summary>
	/// RecordList type <code>RLClusterList</code> that represents a record list of <code>Text, Text, Text,
	///  Text, Boolean, Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLClusterList: GenericRecordList<ENClusterEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENClusterEntityRecord GetElementDefaultValue() {
			return new ENClusterEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENClusterEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLClusterList recordlist, Func<ENClusterEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLClusterList ToList<T>(T[] array, Func <T, ENClusterEntityRecord> converter) {
			RLClusterList result = new RLClusterList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLClusterList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClusterList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClusterList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLClusterList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENClusterEntityRecord> NewList() {
			return new RLClusterList();
		}


	} // RLClusterList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateCluster
		/// </summary>

		public static void CreateCluster(HeContext heContext, RCClusterRecord inParamSource, out string outParamId) {
			outParamId = "";

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENClusterEntity.eSpaceId;
				ENClusterEntityRecord ssENCluster = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENClusterEntity.LocalViewName(null, null) + " (" +
					 " [ID]" +
					 ", [CLUSTERCODE]" +
					 ", [CLUSTERDESCRIPTION]" +
					 ", [ICONFILENAME]" +
					 ", [ORDER]" +
					 ", [ISACTIVE]" +
					 ", [PROSOLUTIONSID]" +
					 " ) VALUES (" +
					 " @ssId" +
					 ", @ssClusterCode" +
					 ", @ssClusterDescription" +
					 ", @ssIconFileName" +
					 ", @ssOrder" +
					 ", @ssIsActive" +
					 ", @ssProSolutionSID" +
					 " )";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssId", DbType.String, ssENCluster.ssId);
					insertSqlCmd.CreateParameter("@ssClusterCode", DbType.String, ssENCluster.ssClusterCode);
					insertSqlCmd.CreateParameter("@ssClusterDescription", DbType.String, ssENCluster.ssClusterDescription);
					insertSqlCmd.CreateParameter("@ssIconFileName", DbType.String, ssENCluster.ssIconFileName);
					insertSqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENCluster.ssOrder);
					insertSqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENCluster.ssIsActive);
					insertSqlCmd.CreateParameter("@ssProSolutionSID", DbType.Int32, ssENCluster.ssProSolutionSID);
					insertSqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateCluster", true);
					outParamId = ssENCluster.ssId;
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateCluster
		/// </summary>

		public static void CreateOrUpdateCluster(HeContext heContext, BitArray usedFields, RCClusterRecord inParamSource, out string outParamId) {
			outParamId = "";

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENClusterEntity.eSpaceId;
				ENClusterEntityRecord ssENCluster = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENClusterEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CLUSTERCODE] = @ssClusterCode"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CLUSTERDESCRIPTION] = @ssClusterDescription"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ICONFILENAME] = @ssIconFileName"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ORDER] = @ssOrder"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISACTIVE] = @ssIsActive"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROSOLUTIONSID] = @ssProSolutionSID"): parameters);
					string whereCondition = " WHERE [ID] = @ssENClusterssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssClusterCode", DbType.String, ssENCluster.ssClusterCode);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssClusterDescription", DbType.String, ssENCluster.ssClusterDescription);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssIconFileName", DbType.String, ssENCluster.ssIconFileName);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENCluster.ssOrder);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENCluster.ssIsActive);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssProSolutionSID", DbType.Int32, ssENCluster.ssProSolutionSID);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISACTIVE] = [ISACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENClusterssId", DbType.String, ssENCluster.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateCluster (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENClusterEntity.LocalViewName(null, null) + " (" +
						 " [ID]" +
						 ", [CLUSTERCODE]" +
						 ", [CLUSTERDESCRIPTION]" +
						 ", [ICONFILENAME]" +
						 ", [ORDER]" +
						 ", [ISACTIVE]" +
						 ", [PROSOLUTIONSID]" +
						 " ) VALUES (" +
						 " @ssId" +
						 ", @ssClusterCode" +
						 ", @ssClusterDescription" +
						 ", @ssIconFileName" +
						 ", @ssOrder" +
						 ", @ssIsActive" +
						 ", @ssProSolutionSID" +
						 " )";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssId", DbType.String, ssENCluster.ssId);
						insertSqlCmd.CreateParameter("@ssClusterCode", DbType.String, ssENCluster.ssClusterCode);
						insertSqlCmd.CreateParameter("@ssClusterDescription", DbType.String, ssENCluster.ssClusterDescription);
						insertSqlCmd.CreateParameter("@ssIconFileName", DbType.String, ssENCluster.ssIconFileName);
						insertSqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENCluster.ssOrder);
						insertSqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENCluster.ssIsActive);
						insertSqlCmd.CreateParameter("@ssProSolutionSID", DbType.Int32, ssENCluster.ssProSolutionSID);
						insertSqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateCluster", true);
						outParamId = ssENCluster.ssId;
					} else {
						outParamId = ssENCluster.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteCluster
		/// </summary>

		public static void DeleteCluster(HeContext heContext, string inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENClusterEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENClusterEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteCluster", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCluster
		/// </summary>

		public static void GetCluster(HeContext heContext, string inParamId, out RCClusterRecord outParamRecord) {
			outParamRecord = new RCClusterRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENClusterEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [CLUSTERCODE]" +
					 ", [CLUSTERDESCRIPTION]" +
					 ", [ICONFILENAME]" +
					 ", [ORDER]" +
					 ", [ISACTIVE]" +
					 ", [PROSOLUTIONSID]" +
					 " FROM " + ENClusterEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCluster", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENClusterEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetClusterForUpdate
		/// </summary>

		public static void GetClusterForUpdate(HeContext heContext, string inParamId, out RCClusterRecord outParamRecord) {
			outParamRecord = new RCClusterRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENClusterEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [CLUSTERCODE]" +
					 ", [CLUSTERDESCRIPTION]" +
					 ", [ICONFILENAME]" +
					 ", [ORDER]" +
					 ", [ISACTIVE]" +
					 ", [PROSOLUTIONSID]" +
					 "FROM " + ENClusterEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetClusterForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENClusterEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateCluster
		/// </summary>

		public static void UpdateCluster(HeContext heContext, BitArray usedFields, RCClusterRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENClusterEntity.eSpaceId;
				ENClusterEntityRecord ssENCluster = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENClusterEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CLUSTERCODE] = @ssClusterCode"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CLUSTERDESCRIPTION] = @ssClusterDescription"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ICONFILENAME] = @ssIconFileName"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ORDER] = @ssOrder"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISACTIVE] = @ssIsActive"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROSOLUTIONSID] = @ssProSolutionSID"): parameters);
					string whereCondition = " WHERE [ID] = @ssENClusterssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssClusterCode", DbType.String, ssENCluster.ssClusterCode);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssClusterDescription", DbType.String, ssENCluster.ssClusterDescription);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssIconFileName", DbType.String, ssENCluster.ssIconFileName);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENCluster.ssOrder);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENCluster.ssIsActive);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssProSolutionSID", DbType.Int32, ssENCluster.ssProSolutionSID);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISACTIVE] = [ISACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENClusterssId", DbType.String, ssENCluster.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateCluster", true) <= 0)
					throw new DataBaseException(ENClusterEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENCluster.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Cluster")]
	public class WORCClusterRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public string varWSId;

		[System.Xml.Serialization.XmlElement("ClusterCode")]
		public string varWSClusterCode;

		[System.Xml.Serialization.XmlElement("ClusterDescription")]
		public string varWSClusterDescription;

		[System.Xml.Serialization.XmlElement("IconFileName")]
		public string varWSIconFileName;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		[System.Xml.Serialization.XmlElement("IsActive")]
		public bool varWSIsActive;

		[System.Xml.Serialization.XmlElement("ProSolutionSID")]
		public int varWSProSolutionSID;

		public WORCClusterRecord() {
			varWSId = (string) "";
			varWSClusterCode = (string) "";
			varWSClusterDescription = (string) "";
			varWSIconFileName = (string) "";
			varWSOrder = (int) 0;
			varWSIsActive = (bool) false;
			varWSProSolutionSID = (int) 0;
		}

		public WORCClusterRecord(ENClusterEntityRecord r) {
			varWSId = BaseAppUtils.RemoveControlChars(r.ssId);
			varWSClusterCode = BaseAppUtils.RemoveControlChars(r.ssClusterCode);
			varWSClusterDescription = BaseAppUtils.RemoveControlChars(r.ssClusterDescription);
			varWSIconFileName = BaseAppUtils.RemoveControlChars(r.ssIconFileName);
			varWSOrder = (int) r.ssOrder;
			varWSIsActive = (bool) r.ssIsActive;
			varWSProSolutionSID = (int) r.ssProSolutionSID;
		}

		public static RLClusterList ToRecordList(WORCClusterRecord[] array) {
			RLClusterList rl = new RLClusterList();
			if (array != null) {
				foreach(WORCClusterRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCClusterRecord[] FromRecordList(RLClusterList rl) {
			WORCClusterRecord[] array = new WORCClusterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCClusterRecord {
		public static implicit operator WORCClusterRecord(RCClusterRecord r) {
			return new WORCClusterRecord(r.ssENCluster);
		}

		public static implicit operator RCClusterRecord(WORCClusterRecord w) {
			RCClusterRecord r = new RCClusterRecord("");
			if (w != null) {
				r.ssENCluster = w;
			}
			return r;
		}

	}

	partial struct ENClusterEntityRecord {
		public static implicit operator WORCClusterRecord(ENClusterEntityRecord r) {
			return new WORCClusterRecord(r);
		}

		public static implicit operator ENClusterEntityRecord(WORCClusterRecord w) {
			ENClusterEntityRecord r = new ENClusterEntityRecord("");
			if (w != null) {
				r.ssId = ((string) w.varWSId ?? "");
				r.ssClusterCode = ((string) w.varWSClusterCode ?? "");
				r.ssClusterDescription = ((string) w.varWSClusterDescription ?? "");
				r.ssIconFileName = ((string) w.varWSIconFileName ?? "");
				r.ssOrder = (int) w.varWSOrder;
				r.ssIsActive = (bool) w.varWSIsActive;
				r.ssProSolutionSID = (int) w.varWSProSolutionSID;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLClusterRecordList {
		public WORCClusterRecord[] Array;


		public WORLClusterRecordList(WORCClusterRecord[] r) {
			if (r == null)
			Array = new WORCClusterRecord[0];
			else
			Array = r;
		}
		public WORLClusterRecordList() {
			Array = new WORCClusterRecord[0];
		}

		public WORLClusterRecordList(RLClusterRecordList rl) {
			rl=(RLClusterRecordList) rl.Duplicate();
			Array = new WORCClusterRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCClusterRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLClusterRecordList {
		public static implicit operator RLClusterRecordList(WORCClusterRecord[] array) {
			RLClusterRecordList rl = new RLClusterRecordList();
			if (array != null) {
				foreach(WORCClusterRecord val in array) {
					rl.Append((RCClusterRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCClusterRecord[](RLClusterRecordList rl) {
			WORCClusterRecord[] array = new WORCClusterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCClusterRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLClusterRecordList {
		public static implicit operator RLClusterRecordList(WORLClusterRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLClusterRecordList(RLClusterRecordList rl) {
			return new WORLClusterRecordList(rl);
		}
		public static implicit operator WORCClusterRecord[](WORLClusterRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLClusterRecordList(WORCClusterRecord[] array) {
			return new WORLClusterRecordList(array);
		}
	}
}

