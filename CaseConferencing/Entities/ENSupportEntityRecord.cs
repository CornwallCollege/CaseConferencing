/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSupportEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENSupportEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENSupportEntity.eSpaceId;
	} // ENSupportEntity

	/// <summary>
	/// Entity <code>ENSupportEntityRecord</code> that represents the Service Studio entity
	///  <code>Support</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Support", "xk7sfTy+8kSq6rHdJTEGNA", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Support", "")]
	[Serializable()]
	public partial struct ENSupportEntityRecord: ISerializable, ITypedRecord<ENSupportEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*OR6WawmjTUuUVIPX+DPWRg");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*IFXtG_InNES7uGjipvvbLg");
		private static readonly GlobalObjectKey IdSupportTypeId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*hGfYMsOOKk2BRLKvJWI6bQ");
		private static readonly GlobalObjectKey IdSupportDetails = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*as2+R6fc+UGckb0Ci8Gp0A");
		private static readonly GlobalObjectKey IdAcademicYear = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*cX4WIvmq00Sr_TVfhH7FoA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(5, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SUPPORTTYPEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SupportTypeId")]
		private int _ssSupportTypeId;
		public int ssSupportTypeId {
			get {
				return _ssSupportTypeId;
			}
			set {
				if ((_ssSupportTypeId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssSupportTypeId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SUPPORTDETAILS", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("SupportDetails")]
		private string _ssSupportDetails;
		public string ssSupportDetails {
			get {
				return _ssSupportDetails;
			}
			set {
				if ((_ssSupportDetails!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssSupportDetails = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ACADEMICYEAR", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("AcademicYear")]
		private string _ssAcademicYear;
		public string ssAcademicYear {
			get {
				return _ssAcademicYear;
			}
			set {
				if ((_ssAcademicYear!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssAcademicYear = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSupportEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssSupportTypeId = 0;
			_ssSupportDetails = "";
			_ssAcademicYear = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Support.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "Support.StudentReference", "");
			ssSupportTypeId = r.ReadEntityReference(index++, "Support.SupportTypeId", 0);
			ssSupportDetails = r.ReadText(index++, "Support.SupportDetails", "");
			ssAcademicYear = r.ReadText(index++, "Support.AcademicYear", "");
			ChangedAttributes = new BitArray(5, false);
			OptimizedAttributes = new BitArray(5, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSupportEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSupportEntityRecord a, ENSupportEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssSupportTypeId != b.ssSupportTypeId) return false;
			if (a.ssSupportDetails != b.ssSupportDetails) return false;
			if (a.ssAcademicYear != b.ssAcademicYear) return false;
			return true;
		}

		public static bool operator != (ENSupportEntityRecord a, ENSupportEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSupportEntityRecord)) return false;
			return (this == (ENSupportEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssSupportTypeId.GetHashCode()
				^ ssSupportDetails.GetHashCode()
				^ ssAcademicYear.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSupportEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssSupportTypeId = 0;
			_ssSupportDetails = "";
			_ssAcademicYear = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssSupportTypeId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssSupportDetails = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssAcademicYear = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSupportEntityRecord Duplicate() {
			ENSupportEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssSupportTypeId = this._ssSupportTypeId;
			t._ssSupportDetails = this._ssSupportDetails;
			t._ssAcademicYear = this._ssAcademicYear;
			t.ChangedAttributes = new BitArray(5);
			t.OptimizedAttributes = new BitArray(5);
			for (int i = 0; i < 5; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportTypeId")) VarValue.AppendAttribute(recordElem, "SupportTypeId", ssSupportTypeId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SupportTypeId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportDetails")) VarValue.AppendAttribute(recordElem, "SupportDetails", ssSupportDetails, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SupportDetails");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AcademicYear")) VarValue.AppendAttribute(recordElem, "AcademicYear", ssAcademicYear, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AcademicYear");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "supporttypeid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportTypeId")) variable.Value = ssSupportTypeId; else variable.Optimized = true;
			} else if (head == "supportdetails") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportDetails")) variable.Value = ssSupportDetails; else variable.Optimized = true;
			} else if (head == "academicyear") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYear")) variable.Value = ssAcademicYear; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdSupportTypeId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdSupportDetails)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdAcademicYear)) {
				return ChangedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdSupportTypeId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdSupportDetails)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdAcademicYear)) {
				return OptimizedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdSupportTypeId) {
				return ssSupportTypeId;
			} else if (key == IdSupportDetails) {
				return ssSupportDetails;
			} else if (key == IdAcademicYear) {
				return ssAcademicYear;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(5);
			OptimizedAttributes = new BitArray(5);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssSupportTypeId = (int) other.AttributeGet(IdSupportTypeId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdSupportTypeId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdSupportTypeId);
			ssSupportDetails = (string) other.AttributeGet(IdSupportDetails);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdSupportDetails);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdSupportDetails);
			ssAcademicYear = (string) other.AttributeGet(IdAcademicYear);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdAcademicYear);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdAcademicYear);
		}
	} // ENSupportEntityRecord
	/// <summary>
	/// Structure <code>RCSupportRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSupportRecord: ISerializable, ITypedRecord<RCSupportRecord> {
		private static readonly GlobalObjectKey IdSupport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6glmvIsloKyTYuAFVZiRXA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Support")]
		public ENSupportEntityRecord ssENSupport;


		public static implicit operator ENSupportEntityRecord(RCSupportRecord r) {
			return r.ssENSupport;
		}

		public static implicit operator RCSupportRecord(ENSupportEntityRecord r) {
			RCSupportRecord res = new RCSupportRecord(null);
			res.ssENSupport = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSupport.ChangedAttributes = value;
			}
			get {
				return ssENSupport.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSupportRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSupport = new ENSupportEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSupport.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSupport.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSupport.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSupport.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSupportRecord r) {
			this = r;
		}


		public static bool operator == (RCSupportRecord a, RCSupportRecord b) {
			if (a.ssENSupport != b.ssENSupport) return false;
			return true;
		}

		public static bool operator != (RCSupportRecord a, RCSupportRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSupportRecord)) return false;
			return (this == (RCSupportRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSupport.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSupportRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSupport = new ENSupportEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSupport = (ENSupportEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSupport.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSupport.InternalRecursiveSave();
		}


		public RCSupportRecord Duplicate() {
			RCSupportRecord t;
			t.ssENSupport = (ENSupportEntityRecord) this.ssENSupport.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSupport.ToXml(this, recordElem, "Support", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "support") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Support")) variable.Value = ssENSupport; else variable.Optimized = true;
				variable.SetFieldName("support");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSupport.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSupport.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSupport) {
				return ssENSupport;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSupport.FillFromOther((IRecord) other.AttributeGet(IdSupport));
		}
	} // RCSupportRecord
	/// <summary>
	/// RecordList type <code>RLSupportRecordList</code> that represents a record list of
	///  <code>Support</code>
	/// </summary>
	[Serializable()]
	public partial class RLSupportRecordList: GenericRecordList<RCSupportRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSupportRecord GetElementDefaultValue() {
			return new RCSupportRecord("");
		}

		public T[] ToArray<T>(Func<RCSupportRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSupportRecordList recordlist, Func<RCSupportRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSupportRecordList ToList<T>(T[] array, Func <T, RCSupportRecord> converter) {
			RLSupportRecordList result = new RLSupportRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSupportRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSupportRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSupportRecord> NewList() {
			return new RLSupportRecordList();
		}


	} // RLSupportRecordList

	/// <summary>
	/// RecordList type <code>RLSupportList</code> that represents a record list of
	///  <code>StudentIdentifier, SupportTypeIdentifier, Text, Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLSupportList: GenericRecordList<ENSupportEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSupportEntityRecord GetElementDefaultValue() {
			return new ENSupportEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSupportEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSupportList recordlist, Func<ENSupportEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSupportList ToList<T>(T[] array, Func <T, ENSupportEntityRecord> converter) {
			RLSupportList result = new RLSupportList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSupportList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSupportList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSupportList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSupportEntityRecord> NewList() {
			return new RLSupportList();
		}


	} // RLSupportList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateSupport
		/// </summary>

		public static void CreateSupport(HeContext heContext, RCSupportRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSupportEntity.eSpaceId;
				ENSupportEntityRecord ssENSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENSupportEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [SUPPORTTYPEID]" +
					 ", [SUPPORTDETAILS]" +
					 ", [ACADEMICYEAR]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssSupportTypeId" +
					 ", @ssSupportDetails" +
					 ", @ssAcademicYear" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENSupport.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSupport.ssStudentReference);
					}
					if ((ssENSupport.ssSupportTypeId==0)) {
						insertSqlCmd.CreateParameter("@ssSupportTypeId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSupportTypeId", DbType.Int32, ssENSupport.ssSupportTypeId);
					}
					insertSqlCmd.CreateParameter("@ssSupportDetails", DbType.String, ssENSupport.ssSupportDetails);
					insertSqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENSupport.ssAcademicYear);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateSupport", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateSupport
		/// </summary>

		public static void CreateOrUpdateSupport(HeContext heContext, BitArray usedFields, RCSupportRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSupportEntity.eSpaceId;
				ENSupportEntityRecord ssENSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTTYPEID] = @ssSupportTypeId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTDETAILS] = @ssSupportDetails"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACADEMICYEAR] = @ssAcademicYear"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSupportssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSupport.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSupport.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSupport.ssSupportTypeId==0)) {
							sqlCmd.CreateParameter("@ssSupportTypeId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportTypeId", DbType.Int32, ssENSupport.ssSupportTypeId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssSupportDetails", DbType.String, ssENSupport.ssSupportDetails);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENSupport.ssAcademicYear);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ACADEMICYEAR] = [ACADEMICYEAR]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSupportssId", DbType.Int32, ssENSupport.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateSupport (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENSupportEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [SUPPORTTYPEID]" +
						 ", [SUPPORTDETAILS]" +
						 ", [ACADEMICYEAR]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssSupportTypeId" +
						 ", @ssSupportDetails" +
						 ", @ssAcademicYear" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENSupport.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSupport.ssStudentReference);
						}
						if ((ssENSupport.ssSupportTypeId==0)) {
							insertSqlCmd.CreateParameter("@ssSupportTypeId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSupportTypeId", DbType.Int32, ssENSupport.ssSupportTypeId);
						}
						insertSqlCmd.CreateParameter("@ssSupportDetails", DbType.String, ssENSupport.ssSupportDetails);
						insertSqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENSupport.ssAcademicYear);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateSupport", true), typeof(int));
					} else {
						outParamId = ssENSupport.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteSupport
		/// </summary>

		public static void DeleteSupport(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteSupport", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSupport
		/// </summary>

		public static void GetSupport(HeContext heContext, int inParamId, out RCSupportRecord outParamRecord) {
			outParamRecord = new RCSupportRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [SUPPORTTYPEID]" +
					 ", [SUPPORTDETAILS]" +
					 ", [ACADEMICYEAR]" +
					 " FROM " + ENSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSupport", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSupportForUpdate
		/// </summary>

		public static void GetSupportForUpdate(HeContext heContext, int inParamId, out RCSupportRecord outParamRecord) {
			outParamRecord = new RCSupportRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [SUPPORTTYPEID]" +
					 ", [SUPPORTDETAILS]" +
					 ", [ACADEMICYEAR]" +
					 "FROM " + ENSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSupportForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateSupport
		/// </summary>

		public static void UpdateSupport(HeContext heContext, BitArray usedFields, RCSupportRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSupportEntity.eSpaceId;
				ENSupportEntityRecord ssENSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTTYPEID] = @ssSupportTypeId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTDETAILS] = @ssSupportDetails"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACADEMICYEAR] = @ssAcademicYear"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSupportssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSupport.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSupport.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSupport.ssSupportTypeId==0)) {
							sqlCmd.CreateParameter("@ssSupportTypeId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportTypeId", DbType.Int32, ssENSupport.ssSupportTypeId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssSupportDetails", DbType.String, ssENSupport.ssSupportDetails);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENSupport.ssAcademicYear);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ACADEMICYEAR] = [ACADEMICYEAR]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSupportssId", DbType.Int32, ssENSupport.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateSupport", true) <= 0)
					throw new DataBaseException(ENSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENSupport.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Support")]
	public class WORCSupportRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("SupportTypeId")]
		public int varWSSupportTypeId;

		[System.Xml.Serialization.XmlElement("SupportDetails")]
		public string varWSSupportDetails;

		[System.Xml.Serialization.XmlElement("AcademicYear")]
		public string varWSAcademicYear;

		public WORCSupportRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSSupportTypeId = (int) 0;
			varWSSupportDetails = (string) "";
			varWSAcademicYear = (string) "";
		}

		public WORCSupportRecord(ENSupportEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSSupportTypeId = (int) r.ssSupportTypeId;
			varWSSupportDetails = BaseAppUtils.RemoveControlChars(r.ssSupportDetails);
			varWSAcademicYear = BaseAppUtils.RemoveControlChars(r.ssAcademicYear);
		}

		public static RLSupportList ToRecordList(WORCSupportRecord[] array) {
			RLSupportList rl = new RLSupportList();
			if (array != null) {
				foreach(WORCSupportRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSupportRecord[] FromRecordList(RLSupportList rl) {
			WORCSupportRecord[] array = new WORCSupportRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSupportRecord {
		public static implicit operator WORCSupportRecord(RCSupportRecord r) {
			return new WORCSupportRecord(r.ssENSupport);
		}

		public static implicit operator RCSupportRecord(WORCSupportRecord w) {
			RCSupportRecord r = new RCSupportRecord("");
			if (w != null) {
				r.ssENSupport = w;
			}
			return r;
		}

	}

	partial struct ENSupportEntityRecord {
		public static implicit operator WORCSupportRecord(ENSupportEntityRecord r) {
			return new WORCSupportRecord(r);
		}

		public static implicit operator ENSupportEntityRecord(WORCSupportRecord w) {
			ENSupportEntityRecord r = new ENSupportEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssSupportTypeId = (int) w.varWSSupportTypeId;
				r.ssSupportDetails = ((string) w.varWSSupportDetails ?? "");
				r.ssAcademicYear = ((string) w.varWSAcademicYear ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSupportRecordList {
		public WORCSupportRecord[] Array;


		public WORLSupportRecordList(WORCSupportRecord[] r) {
			if (r == null)
			Array = new WORCSupportRecord[0];
			else
			Array = r;
		}
		public WORLSupportRecordList() {
			Array = new WORCSupportRecord[0];
		}

		public WORLSupportRecordList(RLSupportRecordList rl) {
			rl=(RLSupportRecordList) rl.Duplicate();
			Array = new WORCSupportRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSupportRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSupportRecordList {
		public static implicit operator RLSupportRecordList(WORCSupportRecord[] array) {
			RLSupportRecordList rl = new RLSupportRecordList();
			if (array != null) {
				foreach(WORCSupportRecord val in array) {
					rl.Append((RCSupportRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSupportRecord[](RLSupportRecordList rl) {
			WORCSupportRecord[] array = new WORCSupportRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSupportRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSupportRecordList {
		public static implicit operator RLSupportRecordList(WORLSupportRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSupportRecordList(RLSupportRecordList rl) {
			return new WORLSupportRecordList(rl);
		}
		public static implicit operator WORCSupportRecord[](WORLSupportRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSupportRecordList(WORCSupportRecord[] array) {
			return new WORLSupportRecordList(array);
		}
	}
}

