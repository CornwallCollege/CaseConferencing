/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENRiskAssessmentEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENRiskAssessmentEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENRiskAssessmentEntity.eSpaceId;
	} // ENRiskAssessmentEntity

	/// <summary>
	/// Entity <code>ENRiskAssessmentEntityRecord</code> that represents the Service Studio entity
	///  <code>RiskAssessment</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("RiskAssessment", "isVO8m7xOUCi5qohHnFoBQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_RiskAssessment", "")]
	[Serializable()]
	public partial struct ENRiskAssessmentEntityRecord: ISerializable, ITypedRecord<ENRiskAssessmentEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*pl9+_xn7B0SQefZC3LSnTA");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*TkMK5vDUlkKOUhFXhHU2JQ");
		private static readonly GlobalObjectKey IdLeadStaffMember = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*o1Gw+IU1UUuS7rSZrUq_7Q");
		private static readonly GlobalObjectKey IdRiskAssessmentSSPReason = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*b83eZ37PeUW86HySobUo1g");
		private static readonly GlobalObjectKey IdRiskAssessmentSSPReasonOther = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*EmUGwAgir0q7C9UGzV9RMw");
		private static readonly GlobalObjectKey IdRiskAssessmentCompletedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*HLBvP6xkXkWP_zu4nW99cQ");
		private static readonly GlobalObjectKey IdRiskAssessmentSourceOfEviden = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*qJrGVrW+F0GnhuZWfsWlxw");
		private static readonly GlobalObjectKey IdRiskAssessmentSOEOther = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*iG4gnm2FZUuNPEYMyVA4YA");
		private static readonly GlobalObjectKey IdHasCapacity = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*i+HUQCP7qUqexoFzJvBpiw");
		private static readonly GlobalObjectKey IdHasCapacityEvidence = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*nYmm6mqUzEWBhhpebloRQQ");
		private static readonly GlobalObjectKey IdRiskAssessmentWhoIsAtRisk = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*JNuRisVs5U288K9x8v9hzw");
		private static readonly GlobalObjectKey IdRiskAssessmentWATOther = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*PVnbkYyMT06CzkwfEpRUKg");
		private static readonly GlobalObjectKey IdWhatAreTheRisks = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*OhaDI_zjpkehhL03awCvwQ");
		private static readonly GlobalObjectKey IdHistory = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*_wKfTg_v9kq97dhZN1QgJg");
		private static readonly GlobalObjectKey IdMonitor = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*apy3ZZ5ZekOLBsxn8s23Zg");
		private static readonly GlobalObjectKey IdWhatHappensRiskIncreases = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*eiSe7hMH5EKrPKQAbs87KQ");
		private static readonly GlobalObjectKey IdAutumnReviewDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*T_6sOBuFcE2vIn_ydwOXqA");
		private static readonly GlobalObjectKey IdSpringReviewDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*iLiuPPPL_0GgTlPeZPnitw");
		private static readonly GlobalObjectKey IdSummerReviewDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*gDMX5XDbrUmfa8uHf8oxrA");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*dr7caj9HikCKZzqdB8Qgjw");
		private static readonly GlobalObjectKey IdLastUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*+MasQtCwwkG01dyiexA4rQ");
		private static readonly GlobalObjectKey IdLastUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*_0LEaknHSEOx8A+8L0Tc+w");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(22, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEADSTAFFMEMBER", 100, false, false, false)]
		[System.Xml.Serialization.XmlElement("LeadStaffMember")]
		private string _ssLeadStaffMember;
		public string ssLeadStaffMember {
			get {
				return _ssLeadStaffMember;
			}
			set {
				if ((_ssLeadStaffMember!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssLeadStaffMember = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RISKASSESSMENTSSPREASON", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RiskAssessmentSSPReason")]
		private int _ssRiskAssessmentSSPReason;
		public int ssRiskAssessmentSSPReason {
			get {
				return _ssRiskAssessmentSSPReason;
			}
			set {
				if ((_ssRiskAssessmentSSPReason!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssRiskAssessmentSSPReason = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RISKASSESSMENTSSPREASONOTHER", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("RiskAssessmentSSPReasonOther")]
		private string _ssRiskAssessmentSSPReasonOther;
		public string ssRiskAssessmentSSPReasonOther {
			get {
				return _ssRiskAssessmentSSPReasonOther;
			}
			set {
				if ((_ssRiskAssessmentSSPReasonOther!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssRiskAssessmentSSPReasonOther = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RISKASSESSMENTCOMPLETEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RiskAssessmentCompletedBy")]
		private int _ssRiskAssessmentCompletedBy;
		public int ssRiskAssessmentCompletedBy {
			get {
				return _ssRiskAssessmentCompletedBy;
			}
			set {
				if ((_ssRiskAssessmentCompletedBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssRiskAssessmentCompletedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RISKASSESSMENTSOURCEOFEVIDEN", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RiskAssessmentSourceOfEviden")]
		private int _ssRiskAssessmentSourceOfEviden;
		public int ssRiskAssessmentSourceOfEviden {
			get {
				return _ssRiskAssessmentSourceOfEviden;
			}
			set {
				if ((_ssRiskAssessmentSourceOfEviden!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssRiskAssessmentSourceOfEviden = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RISKASSESSMENTSOEOTHER", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("RiskAssessmentSOEOther")]
		private string _ssRiskAssessmentSOEOther;
		public string ssRiskAssessmentSOEOther {
			get {
				return _ssRiskAssessmentSOEOther;
			}
			set {
				if ((_ssRiskAssessmentSOEOther!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssRiskAssessmentSOEOther = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("HASCAPACITY", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("HasCapacity")]
		private bool _ssHasCapacity;
		public bool ssHasCapacity {
			get {
				return _ssHasCapacity;
			}
			set {
				if ((_ssHasCapacity!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssHasCapacity = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("HASCAPACITYEVIDENCE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("HasCapacityEvidence")]
		private string _ssHasCapacityEvidence;
		public string ssHasCapacityEvidence {
			get {
				return _ssHasCapacityEvidence;
			}
			set {
				if ((_ssHasCapacityEvidence!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssHasCapacityEvidence = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RISKASSESSMENTWHOISATRISK", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RiskAssessmentWhoIsAtRisk")]
		private int _ssRiskAssessmentWhoIsAtRisk;
		public int ssRiskAssessmentWhoIsAtRisk {
			get {
				return _ssRiskAssessmentWhoIsAtRisk;
			}
			set {
				if ((_ssRiskAssessmentWhoIsAtRisk!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssRiskAssessmentWhoIsAtRisk = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RISKASSESSMENTWATOTHER", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("RiskAssessmentWATOther")]
		private string _ssRiskAssessmentWATOther;
		public string ssRiskAssessmentWATOther {
			get {
				return _ssRiskAssessmentWATOther;
			}
			set {
				if ((_ssRiskAssessmentWATOther!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssRiskAssessmentWATOther = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("WHATARETHERISKS", 2500, false, false, false)]
		[System.Xml.Serialization.XmlElement("WhatAreTheRisks")]
		private string _ssWhatAreTheRisks;
		public string ssWhatAreTheRisks {
			get {
				return _ssWhatAreTheRisks;
			}
			set {
				if ((_ssWhatAreTheRisks!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssWhatAreTheRisks = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("HISTORY", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("History")]
		private string _ssHistory;
		public string ssHistory {
			get {
				return _ssHistory;
			}
			set {
				if ((_ssHistory!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssHistory = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MONITOR", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Monitor")]
		private string _ssMonitor;
		public string ssMonitor {
			get {
				return _ssMonitor;
			}
			set {
				if ((_ssMonitor!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssMonitor = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("WHATHAPPENSRISKINCREASES", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("WhatHappensRiskIncreases")]
		private string _ssWhatHappensRiskIncreases;
		public string ssWhatHappensRiskIncreases {
			get {
				return _ssWhatHappensRiskIncreases;
			}
			set {
				if ((_ssWhatHappensRiskIncreases!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssWhatHappensRiskIncreases = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("AUTUMNREVIEWDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("AutumnReviewDate")]
		private DateTime _ssAutumnReviewDate;
		public DateTime ssAutumnReviewDate {
			get {
				return _ssAutumnReviewDate;
			}
			set {
				if ((_ssAutumnReviewDate!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssAutumnReviewDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SPRINGREVIEWDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("SpringReviewDate")]
		private DateTime _ssSpringReviewDate;
		public DateTime ssSpringReviewDate {
			get {
				return _ssSpringReviewDate;
			}
			set {
				if ((_ssSpringReviewDate!=value) || OptimizedAttributes[17]) {
					ChangedAttributes[17] = true;
					_ssSpringReviewDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SUMMERREVIEWDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("SummerReviewDate")]
		private DateTime _ssSummerReviewDate;
		public DateTime ssSummerReviewDate {
			get {
				return _ssSummerReviewDate;
			}
			set {
				if ((_ssSummerReviewDate!=value) || OptimizedAttributes[18]) {
					ChangedAttributes[18] = true;
					_ssSummerReviewDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[19]) {
					ChangedAttributes[19] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		private int _ssLastUpdatedBy;
		public int ssLastUpdatedBy {
			get {
				return _ssLastUpdatedBy;
			}
			set {
				if ((_ssLastUpdatedBy!=value) || OptimizedAttributes[20]) {
					ChangedAttributes[20] = true;
					_ssLastUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastUpdatedOn")]
		private DateTime _ssLastUpdatedOn;
		public DateTime ssLastUpdatedOn {
			get {
				return _ssLastUpdatedOn;
			}
			set {
				if ((_ssLastUpdatedOn!=value) || OptimizedAttributes[21]) {
					ChangedAttributes[21] = true;
					_ssLastUpdatedOn = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENRiskAssessmentEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(22, true);
			OptimizedAttributes = new BitArray(22, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssLeadStaffMember = "";
			_ssRiskAssessmentSSPReason = 0;
			_ssRiskAssessmentSSPReasonOther = "";
			_ssRiskAssessmentCompletedBy = 0;
			_ssRiskAssessmentSourceOfEviden = 0;
			_ssRiskAssessmentSOEOther = "";
			_ssHasCapacity = false;
			_ssHasCapacityEvidence = "";
			_ssRiskAssessmentWhoIsAtRisk = 0;
			_ssRiskAssessmentWATOther = "";
			_ssWhatAreTheRisks = "";
			_ssHistory = "";
			_ssMonitor = "";
			_ssWhatHappensRiskIncreases = "";
			_ssAutumnReviewDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssSpringReviewDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssSummerReviewDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssLastUpdatedBy = 0;
			_ssLastUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "RiskAssessment.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "RiskAssessment.StudentReference", "");
			ssLeadStaffMember = r.ReadText(index++, "RiskAssessment.LeadStaffMember", "");
			ssRiskAssessmentSSPReason = r.ReadEntityReference(index++, "RiskAssessment.RiskAssessmentSSPReason", 0);
			ssRiskAssessmentSSPReasonOther = r.ReadText(index++, "RiskAssessment.RiskAssessmentSSPReasonOther", "");
			ssRiskAssessmentCompletedBy = r.ReadEntityReference(index++, "RiskAssessment.RiskAssessmentCompletedBy", 0);
			ssRiskAssessmentSourceOfEviden = r.ReadEntityReference(index++, "RiskAssessment.RiskAssessmentSourceOfEviden", 0);
			ssRiskAssessmentSOEOther = r.ReadText(index++, "RiskAssessment.RiskAssessmentSOEOther", "");
			ssHasCapacity = r.ReadBoolean(index++, "RiskAssessment.HasCapacity", false);
			ssHasCapacityEvidence = r.ReadText(index++, "RiskAssessment.HasCapacityEvidence", "");
			ssRiskAssessmentWhoIsAtRisk = r.ReadEntityReference(index++, "RiskAssessment.RiskAssessmentWhoIsAtRisk", 0);
			ssRiskAssessmentWATOther = r.ReadText(index++, "RiskAssessment.RiskAssessmentWATOther", "");
			ssWhatAreTheRisks = r.ReadText(index++, "RiskAssessment.WhatAreTheRisks", "");
			ssHistory = r.ReadText(index++, "RiskAssessment.History", "");
			ssMonitor = r.ReadText(index++, "RiskAssessment.Monitor", "");
			ssWhatHappensRiskIncreases = r.ReadText(index++, "RiskAssessment.WhatHappensRiskIncreases", "");
			ssAutumnReviewDate = r.ReadDate(index++, "RiskAssessment.AutumnReviewDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssSpringReviewDate = r.ReadDate(index++, "RiskAssessment.SpringReviewDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssSummerReviewDate = r.ReadDate(index++, "RiskAssessment.SummerReviewDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "RiskAssessment.CreatedBy", 0);
			ssLastUpdatedBy = r.ReadEntityReference(index++, "RiskAssessment.LastUpdatedBy", 0);
			ssLastUpdatedOn = r.ReadDateTime(index++, "RiskAssessment.LastUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(22, false);
			OptimizedAttributes = new BitArray(22, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENRiskAssessmentEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENRiskAssessmentEntityRecord a, ENRiskAssessmentEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssLeadStaffMember != b.ssLeadStaffMember) return false;
			if (a.ssRiskAssessmentSSPReason != b.ssRiskAssessmentSSPReason) return false;
			if (a.ssRiskAssessmentSSPReasonOther != b.ssRiskAssessmentSSPReasonOther) return false;
			if (a.ssRiskAssessmentCompletedBy != b.ssRiskAssessmentCompletedBy) return false;
			if (a.ssRiskAssessmentSourceOfEviden != b.ssRiskAssessmentSourceOfEviden) return false;
			if (a.ssRiskAssessmentSOEOther != b.ssRiskAssessmentSOEOther) return false;
			if (a.ssHasCapacity != b.ssHasCapacity) return false;
			if (a.ssHasCapacityEvidence != b.ssHasCapacityEvidence) return false;
			if (a.ssRiskAssessmentWhoIsAtRisk != b.ssRiskAssessmentWhoIsAtRisk) return false;
			if (a.ssRiskAssessmentWATOther != b.ssRiskAssessmentWATOther) return false;
			if (a.ssWhatAreTheRisks != b.ssWhatAreTheRisks) return false;
			if (a.ssHistory != b.ssHistory) return false;
			if (a.ssMonitor != b.ssMonitor) return false;
			if (a.ssWhatHappensRiskIncreases != b.ssWhatHappensRiskIncreases) return false;
			if (a.ssAutumnReviewDate != b.ssAutumnReviewDate) return false;
			if (a.ssSpringReviewDate != b.ssSpringReviewDate) return false;
			if (a.ssSummerReviewDate != b.ssSummerReviewDate) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssLastUpdatedBy != b.ssLastUpdatedBy) return false;
			if (a.ssLastUpdatedOn != b.ssLastUpdatedOn) return false;
			return true;
		}

		public static bool operator != (ENRiskAssessmentEntityRecord a, ENRiskAssessmentEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENRiskAssessmentEntityRecord)) return false;
			return (this == (ENRiskAssessmentEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssLeadStaffMember.GetHashCode()
				^ ssRiskAssessmentSSPReason.GetHashCode()
				^ ssRiskAssessmentSSPReasonOther.GetHashCode()
				^ ssRiskAssessmentCompletedBy.GetHashCode()
				^ ssRiskAssessmentSourceOfEviden.GetHashCode()
				^ ssRiskAssessmentSOEOther.GetHashCode()
				^ ssHasCapacity.GetHashCode()
				^ ssHasCapacityEvidence.GetHashCode()
				^ ssRiskAssessmentWhoIsAtRisk.GetHashCode()
				^ ssRiskAssessmentWATOther.GetHashCode()
				^ ssWhatAreTheRisks.GetHashCode()
				^ ssHistory.GetHashCode()
				^ ssMonitor.GetHashCode()
				^ ssWhatHappensRiskIncreases.GetHashCode()
				^ ssAutumnReviewDate.GetHashCode()
				^ ssSpringReviewDate.GetHashCode()
				^ ssSummerReviewDate.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssLastUpdatedBy.GetHashCode()
				^ ssLastUpdatedOn.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENRiskAssessmentEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(22, true);
			OptimizedAttributes = new BitArray(22, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssLeadStaffMember = "";
			_ssRiskAssessmentSSPReason = 0;
			_ssRiskAssessmentSSPReasonOther = "";
			_ssRiskAssessmentCompletedBy = 0;
			_ssRiskAssessmentSourceOfEviden = 0;
			_ssRiskAssessmentSOEOther = "";
			_ssHasCapacity = false;
			_ssHasCapacityEvidence = "";
			_ssRiskAssessmentWhoIsAtRisk = 0;
			_ssRiskAssessmentWATOther = "";
			_ssWhatAreTheRisks = "";
			_ssHistory = "";
			_ssMonitor = "";
			_ssWhatHappensRiskIncreases = "";
			_ssAutumnReviewDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssSpringReviewDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssSummerReviewDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssLastUpdatedBy = 0;
			_ssLastUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssLeadStaffMember = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssRiskAssessmentSSPReason = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssRiskAssessmentSSPReasonOther = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssRiskAssessmentCompletedBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssRiskAssessmentSourceOfEviden = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssRiskAssessmentSOEOther = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssHasCapacity = (bool) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssHasCapacityEvidence = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssRiskAssessmentWhoIsAtRisk = (int) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssRiskAssessmentWATOther = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssWhatAreTheRisks = (string) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssHistory = (string) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssMonitor = (string) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssWhatHappensRiskIncreases = (string) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssAutumnReviewDate = (DateTime) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			_ssSpringReviewDate = (DateTime) info.GetValue(fields[17] .Name, fields[17] .FieldType);
			if (fields[18] .FieldType.IsSerializable)
			_ssSummerReviewDate = (DateTime) info.GetValue(fields[18] .Name, fields[18] .FieldType);
			if (fields[19] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[19] .Name, fields[19] .FieldType);
			if (fields[20] .FieldType.IsSerializable)
			_ssLastUpdatedBy = (int) info.GetValue(fields[20] .Name, fields[20] .FieldType);
			if (fields[21] .FieldType.IsSerializable)
			_ssLastUpdatedOn = (DateTime) info.GetValue(fields[21] .Name, fields[21] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENRiskAssessmentEntityRecord Duplicate() {
			ENRiskAssessmentEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssLeadStaffMember = this._ssLeadStaffMember;
			t._ssRiskAssessmentSSPReason = this._ssRiskAssessmentSSPReason;
			t._ssRiskAssessmentSSPReasonOther = this._ssRiskAssessmentSSPReasonOther;
			t._ssRiskAssessmentCompletedBy = this._ssRiskAssessmentCompletedBy;
			t._ssRiskAssessmentSourceOfEviden = this._ssRiskAssessmentSourceOfEviden;
			t._ssRiskAssessmentSOEOther = this._ssRiskAssessmentSOEOther;
			t._ssHasCapacity = this._ssHasCapacity;
			t._ssHasCapacityEvidence = this._ssHasCapacityEvidence;
			t._ssRiskAssessmentWhoIsAtRisk = this._ssRiskAssessmentWhoIsAtRisk;
			t._ssRiskAssessmentWATOther = this._ssRiskAssessmentWATOther;
			t._ssWhatAreTheRisks = this._ssWhatAreTheRisks;
			t._ssHistory = this._ssHistory;
			t._ssMonitor = this._ssMonitor;
			t._ssWhatHappensRiskIncreases = this._ssWhatHappensRiskIncreases;
			t._ssAutumnReviewDate = this._ssAutumnReviewDate;
			t._ssSpringReviewDate = this._ssSpringReviewDate;
			t._ssSummerReviewDate = this._ssSummerReviewDate;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssLastUpdatedBy = this._ssLastUpdatedBy;
			t._ssLastUpdatedOn = this._ssLastUpdatedOn;
			t.ChangedAttributes = new BitArray(22);
			t.OptimizedAttributes = new BitArray(22);
			for (int i = 0; i < 22; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LeadStaffMember")) VarValue.AppendAttribute(recordElem, "LeadStaffMember", ssLeadStaffMember, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LeadStaffMember");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RiskAssessmentSSPReason")) VarValue.AppendAttribute(recordElem, "RiskAssessmentSSPReason", ssRiskAssessmentSSPReason, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RiskAssessmentSSPReason");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RiskAssessmentSSPReasonOther")) VarValue.AppendAttribute(recordElem, "RiskAssessmentSSPReasonOther", ssRiskAssessmentSSPReasonOther, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "RiskAssessmentSSPReasonOther");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RiskAssessmentCompletedBy")) VarValue.AppendAttribute(recordElem, "RiskAssessmentCompletedBy", ssRiskAssessmentCompletedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RiskAssessmentCompletedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RiskAssessmentSourceOfEviden")) VarValue.AppendAttribute(recordElem, "RiskAssessmentSourceOfEviden", ssRiskAssessmentSourceOfEviden, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RiskAssessmentSourceOfEviden");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RiskAssessmentSOEOther")) VarValue.AppendAttribute(recordElem, "RiskAssessmentSOEOther", ssRiskAssessmentSOEOther, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "RiskAssessmentSOEOther");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HasCapacity")) VarValue.AppendAttribute(recordElem, "HasCapacity", ssHasCapacity, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "HasCapacity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HasCapacityEvidence")) VarValue.AppendAttribute(recordElem, "HasCapacityEvidence", ssHasCapacityEvidence, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "HasCapacityEvidence");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RiskAssessmentWhoIsAtRisk")) VarValue.AppendAttribute(recordElem, "RiskAssessmentWhoIsAtRisk", ssRiskAssessmentWhoIsAtRisk, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RiskAssessmentWhoIsAtRisk");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RiskAssessmentWATOther")) VarValue.AppendAttribute(recordElem, "RiskAssessmentWATOther", ssRiskAssessmentWATOther, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "RiskAssessmentWATOther");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".WhatAreTheRisks")) VarValue.AppendAttribute(recordElem, "WhatAreTheRisks", ssWhatAreTheRisks, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "WhatAreTheRisks");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".History")) VarValue.AppendAttribute(recordElem, "History", ssHistory, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "History");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Monitor")) VarValue.AppendAttribute(recordElem, "Monitor", ssMonitor, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Monitor");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".WhatHappensRiskIncreases")) VarValue.AppendAttribute(recordElem, "WhatHappensRiskIncreases", ssWhatHappensRiskIncreases, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "WhatHappensRiskIncreases");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AutumnReviewDate")) VarValue.AppendAttribute(recordElem, "AutumnReviewDate", ssAutumnReviewDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "AutumnReviewDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SpringReviewDate")) VarValue.AppendAttribute(recordElem, "SpringReviewDate", ssSpringReviewDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "SpringReviewDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SummerReviewDate")) VarValue.AppendAttribute(recordElem, "SummerReviewDate", ssSummerReviewDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "SummerReviewDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedBy")) VarValue.AppendAttribute(recordElem, "LastUpdatedBy", ssLastUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedOn")) VarValue.AppendAttribute(recordElem, "LastUpdatedOn", ssLastUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedOn");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "leadstaffmember") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LeadStaffMember")) variable.Value = ssLeadStaffMember; else variable.Optimized = true;
			} else if (head == "riskassessmentsspreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentSSPReason")) variable.Value = ssRiskAssessmentSSPReason; else variable.Optimized = true;
			} else if (head == "riskassessmentsspreasonother") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentSSPReasonOther")) variable.Value = ssRiskAssessmentSSPReasonOther; else variable.Optimized = true;
			} else if (head == "riskassessmentcompletedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentCompletedBy")) variable.Value = ssRiskAssessmentCompletedBy; else variable.Optimized = true;
			} else if (head == "riskassessmentsourceofeviden") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentSourceOfEviden")) variable.Value = ssRiskAssessmentSourceOfEviden; else variable.Optimized = true;
			} else if (head == "riskassessmentsoeother") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentSOEOther")) variable.Value = ssRiskAssessmentSOEOther; else variable.Optimized = true;
			} else if (head == "hascapacity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HasCapacity")) variable.Value = ssHasCapacity; else variable.Optimized = true;
			} else if (head == "hascapacityevidence") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HasCapacityEvidence")) variable.Value = ssHasCapacityEvidence; else variable.Optimized = true;
			} else if (head == "riskassessmentwhoisatrisk") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentWhoIsAtRisk")) variable.Value = ssRiskAssessmentWhoIsAtRisk; else variable.Optimized = true;
			} else if (head == "riskassessmentwatother") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentWATOther")) variable.Value = ssRiskAssessmentWATOther; else variable.Optimized = true;
			} else if (head == "whataretherisks") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".WhatAreTheRisks")) variable.Value = ssWhatAreTheRisks; else variable.Optimized = true;
			} else if (head == "history") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".History")) variable.Value = ssHistory; else variable.Optimized = true;
			} else if (head == "monitor") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Monitor")) variable.Value = ssMonitor; else variable.Optimized = true;
			} else if (head == "whathappensriskincreases") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".WhatHappensRiskIncreases")) variable.Value = ssWhatHappensRiskIncreases; else variable.Optimized = true;
			} else if (head == "autumnreviewdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AutumnReviewDate")) variable.Value = ssAutumnReviewDate; else variable.Optimized = true;
			} else if (head == "springreviewdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SpringReviewDate")) variable.Value = ssSpringReviewDate; else variable.Optimized = true;
			} else if (head == "summerreviewdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SummerReviewDate")) variable.Value = ssSummerReviewDate; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "lastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedBy")) variable.Value = ssLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "lastupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedOn")) variable.Value = ssLastUpdatedOn; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdLeadStaffMember)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdRiskAssessmentSSPReason)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdRiskAssessmentSSPReasonOther)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdRiskAssessmentCompletedBy)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdRiskAssessmentSourceOfEviden)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdRiskAssessmentSOEOther)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdHasCapacity)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdHasCapacityEvidence)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdRiskAssessmentWhoIsAtRisk)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdRiskAssessmentWATOther)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdWhatAreTheRisks)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdHistory)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdMonitor)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdWhatHappensRiskIncreases)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdAutumnReviewDate)) {
				return ChangedAttributes[16];
			} else if (key.Equals(IdSpringReviewDate)) {
				return ChangedAttributes[17];
			} else if (key.Equals(IdSummerReviewDate)) {
				return ChangedAttributes[18];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[19];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return ChangedAttributes[20];
			} else if (key.Equals(IdLastUpdatedOn)) {
				return ChangedAttributes[21];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdLeadStaffMember)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdRiskAssessmentSSPReason)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdRiskAssessmentSSPReasonOther)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdRiskAssessmentCompletedBy)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdRiskAssessmentSourceOfEviden)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdRiskAssessmentSOEOther)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdHasCapacity)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdHasCapacityEvidence)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdRiskAssessmentWhoIsAtRisk)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdRiskAssessmentWATOther)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdWhatAreTheRisks)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdHistory)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdMonitor)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdWhatHappensRiskIncreases)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdAutumnReviewDate)) {
				return OptimizedAttributes[16];
			} else if (key.Equals(IdSpringReviewDate)) {
				return OptimizedAttributes[17];
			} else if (key.Equals(IdSummerReviewDate)) {
				return OptimizedAttributes[18];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[19];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return OptimizedAttributes[20];
			} else if (key.Equals(IdLastUpdatedOn)) {
				return OptimizedAttributes[21];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdLeadStaffMember) {
				return ssLeadStaffMember;
			} else if (key == IdRiskAssessmentSSPReason) {
				return ssRiskAssessmentSSPReason;
			} else if (key == IdRiskAssessmentSSPReasonOther) {
				return ssRiskAssessmentSSPReasonOther;
			} else if (key == IdRiskAssessmentCompletedBy) {
				return ssRiskAssessmentCompletedBy;
			} else if (key == IdRiskAssessmentSourceOfEviden) {
				return ssRiskAssessmentSourceOfEviden;
			} else if (key == IdRiskAssessmentSOEOther) {
				return ssRiskAssessmentSOEOther;
			} else if (key == IdHasCapacity) {
				return ssHasCapacity;
			} else if (key == IdHasCapacityEvidence) {
				return ssHasCapacityEvidence;
			} else if (key == IdRiskAssessmentWhoIsAtRisk) {
				return ssRiskAssessmentWhoIsAtRisk;
			} else if (key == IdRiskAssessmentWATOther) {
				return ssRiskAssessmentWATOther;
			} else if (key == IdWhatAreTheRisks) {
				return ssWhatAreTheRisks;
			} else if (key == IdHistory) {
				return ssHistory;
			} else if (key == IdMonitor) {
				return ssMonitor;
			} else if (key == IdWhatHappensRiskIncreases) {
				return ssWhatHappensRiskIncreases;
			} else if (key == IdAutumnReviewDate) {
				return ssAutumnReviewDate;
			} else if (key == IdSpringReviewDate) {
				return ssSpringReviewDate;
			} else if (key == IdSummerReviewDate) {
				return ssSummerReviewDate;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdLastUpdatedBy) {
				return ssLastUpdatedBy;
			} else if (key == IdLastUpdatedOn) {
				return ssLastUpdatedOn;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(22);
			OptimizedAttributes = new BitArray(22);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssLeadStaffMember = (string) other.AttributeGet(IdLeadStaffMember);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdLeadStaffMember);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdLeadStaffMember);
			ssRiskAssessmentSSPReason = (int) other.AttributeGet(IdRiskAssessmentSSPReason);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdRiskAssessmentSSPReason);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdRiskAssessmentSSPReason);
			ssRiskAssessmentSSPReasonOther = (string) other.AttributeGet(IdRiskAssessmentSSPReasonOther);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdRiskAssessmentSSPReasonOther);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdRiskAssessmentSSPReasonOther);
			ssRiskAssessmentCompletedBy = (int) other.AttributeGet(IdRiskAssessmentCompletedBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdRiskAssessmentCompletedBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdRiskAssessmentCompletedBy);
			ssRiskAssessmentSourceOfEviden = (int) other.AttributeGet(IdRiskAssessmentSourceOfEviden);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdRiskAssessmentSourceOfEviden);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdRiskAssessmentSourceOfEviden);
			ssRiskAssessmentSOEOther = (string) other.AttributeGet(IdRiskAssessmentSOEOther);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdRiskAssessmentSOEOther);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdRiskAssessmentSOEOther);
			ssHasCapacity = (bool) other.AttributeGet(IdHasCapacity);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdHasCapacity);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdHasCapacity);
			ssHasCapacityEvidence = (string) other.AttributeGet(IdHasCapacityEvidence);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdHasCapacityEvidence);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdHasCapacityEvidence);
			ssRiskAssessmentWhoIsAtRisk = (int) other.AttributeGet(IdRiskAssessmentWhoIsAtRisk);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdRiskAssessmentWhoIsAtRisk);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdRiskAssessmentWhoIsAtRisk);
			ssRiskAssessmentWATOther = (string) other.AttributeGet(IdRiskAssessmentWATOther);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdRiskAssessmentWATOther);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdRiskAssessmentWATOther);
			ssWhatAreTheRisks = (string) other.AttributeGet(IdWhatAreTheRisks);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdWhatAreTheRisks);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdWhatAreTheRisks);
			ssHistory = (string) other.AttributeGet(IdHistory);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdHistory);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdHistory);
			ssMonitor = (string) other.AttributeGet(IdMonitor);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdMonitor);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdMonitor);
			ssWhatHappensRiskIncreases = (string) other.AttributeGet(IdWhatHappensRiskIncreases);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdWhatHappensRiskIncreases);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdWhatHappensRiskIncreases);
			ssAutumnReviewDate = (DateTime) other.AttributeGet(IdAutumnReviewDate);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdAutumnReviewDate);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdAutumnReviewDate);
			ssSpringReviewDate = (DateTime) other.AttributeGet(IdSpringReviewDate);
			ChangedAttributes[17] = other.ChangedAttributeGet(IdSpringReviewDate);
			OptimizedAttributes[17] = other.OptimizedAttributeGet(IdSpringReviewDate);
			ssSummerReviewDate = (DateTime) other.AttributeGet(IdSummerReviewDate);
			ChangedAttributes[18] = other.ChangedAttributeGet(IdSummerReviewDate);
			OptimizedAttributes[18] = other.OptimizedAttributeGet(IdSummerReviewDate);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[19] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[19] = other.OptimizedAttributeGet(IdCreatedBy);
			ssLastUpdatedBy = (int) other.AttributeGet(IdLastUpdatedBy);
			ChangedAttributes[20] = other.ChangedAttributeGet(IdLastUpdatedBy);
			OptimizedAttributes[20] = other.OptimizedAttributeGet(IdLastUpdatedBy);
			ssLastUpdatedOn = (DateTime) other.AttributeGet(IdLastUpdatedOn);
			ChangedAttributes[21] = other.ChangedAttributeGet(IdLastUpdatedOn);
			OptimizedAttributes[21] = other.OptimizedAttributeGet(IdLastUpdatedOn);
		}
	} // ENRiskAssessmentEntityRecord
	/// <summary>
	/// Structure <code>RCRiskAssessmentRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRiskAssessmentRecord: ISerializable, ITypedRecord<RCRiskAssessmentRecord> {
		private static readonly GlobalObjectKey IdRiskAssessment = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NV6tF5Chu6exdZbe80vBxw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RiskAssessment")]
		public ENRiskAssessmentEntityRecord ssENRiskAssessment;


		public static implicit operator ENRiskAssessmentEntityRecord(RCRiskAssessmentRecord r) {
			return r.ssENRiskAssessment;
		}

		public static implicit operator RCRiskAssessmentRecord(ENRiskAssessmentEntityRecord r) {
			RCRiskAssessmentRecord res = new RCRiskAssessmentRecord(null);
			res.ssENRiskAssessment = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENRiskAssessment.ChangedAttributes = value;
			}
			get {
				return ssENRiskAssessment.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCRiskAssessmentRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(22, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRiskAssessment.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENRiskAssessment.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENRiskAssessment.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRiskAssessment.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRiskAssessmentRecord r) {
			this = r;
		}


		public static bool operator == (RCRiskAssessmentRecord a, RCRiskAssessmentRecord b) {
			if (a.ssENRiskAssessment != b.ssENRiskAssessment) return false;
			return true;
		}

		public static bool operator != (RCRiskAssessmentRecord a, RCRiskAssessmentRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRiskAssessmentRecord)) return false;
			return (this == (RCRiskAssessmentRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRiskAssessment.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRiskAssessmentRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRiskAssessment = new ENRiskAssessmentEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRiskAssessment = (ENRiskAssessmentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENRiskAssessment.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRiskAssessment.InternalRecursiveSave();
		}


		public RCRiskAssessmentRecord Duplicate() {
			RCRiskAssessmentRecord t;
			t.ssENRiskAssessment = (ENRiskAssessmentEntityRecord) this.ssENRiskAssessment.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRiskAssessment.ToXml(this, recordElem, "RiskAssessment", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "riskassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessment")) variable.Value = ssENRiskAssessment; else variable.Optimized = true;
				variable.SetFieldName("riskassessment");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENRiskAssessment.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENRiskAssessment.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRiskAssessment) {
				return ssENRiskAssessment;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRiskAssessment.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessment));
		}
	} // RCRiskAssessmentRecord
	/// <summary>
	/// RecordList type <code>RLRiskAssessmentRecordList</code> that represents a record list of
	///  <code>RiskAssessment</code>
	/// </summary>
	[Serializable()]
	public partial class RLRiskAssessmentRecordList: GenericRecordList<RCRiskAssessmentRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRiskAssessmentRecord GetElementDefaultValue() {
			return new RCRiskAssessmentRecord("");
		}

		public T[] ToArray<T>(Func<RCRiskAssessmentRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRiskAssessmentRecordList recordlist, Func<RCRiskAssessmentRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRiskAssessmentRecordList ToList<T>(T[] array, Func <T, RCRiskAssessmentRecord> converter) {
			RLRiskAssessmentRecordList result = new RLRiskAssessmentRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRiskAssessmentRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRiskAssessmentRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(22, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRiskAssessmentRecord> NewList() {
			return new RLRiskAssessmentRecordList();
		}


	} // RLRiskAssessmentRecordList

	/// <summary>
	/// RecordList type <code>RLRiskAssessmentList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, UserIdentifier, UserIdentifier, Text, Text, Text, Text
	/// , Text, Text, Text, Text, Text, Date, Date, Date, DateTime, Boolean, Integer,
	///  RiskAssessmentSSPReasonIdentifier, RiskAssessmentSourceOfEvidenceIdentifier
	/// , RiskAssessmentWhoIsAtRiskIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLRiskAssessmentList: GenericRecordList<ENRiskAssessmentEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENRiskAssessmentEntityRecord GetElementDefaultValue() {
			return new ENRiskAssessmentEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENRiskAssessmentEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRiskAssessmentList recordlist, Func<ENRiskAssessmentEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRiskAssessmentList ToList<T>(T[] array, Func <T, ENRiskAssessmentEntityRecord> converter) {
			RLRiskAssessmentList result = new RLRiskAssessmentList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRiskAssessmentList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRiskAssessmentList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENRiskAssessmentEntityRecord> NewList() {
			return new RLRiskAssessmentList();
		}


	} // RLRiskAssessmentList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateRiskAssessment
		/// </summary>

		public static void CreateRiskAssessment(HeContext heContext, RCRiskAssessmentRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentEntity.eSpaceId;
				ENRiskAssessmentEntityRecord ssENRiskAssessment = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENRiskAssessmentEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [LEADSTAFFMEMBER]" +
					 ", [RISKASSESSMENTSSPREASON]" +
					 ", [RISKASSESSMENTSSPREASONOTHER]" +
					 ", [RISKASSESSMENTCOMPLETEDBY]" +
					 ", [RISKASSESSMENTSOURCEOFEVIDEN]" +
					 ", [RISKASSESSMENTSOEOTHER]" +
					 ", [HASCAPACITY]" +
					 ", [HASCAPACITYEVIDENCE]" +
					 ", [RISKASSESSMENTWHOISATRISK]" +
					 ", [RISKASSESSMENTWATOTHER]" +
					 ", [WHATARETHERISKS]" +
					 ", [HISTORY]" +
					 ", [MONITOR]" +
					 ", [WHATHAPPENSRISKINCREASES]" +
					 ", [AUTUMNREVIEWDATE]" +
					 ", [SPRINGREVIEWDATE]" +
					 ", [SUMMERREVIEWDATE]" +
					 ", [CREATEDBY]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDON]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssLeadStaffMember" +
					 ", @ssRiskAssessmentSSPReason" +
					 ", @ssRiskAssessmentSSPReasonOther" +
					 ", @ssRiskAssessmentCompletedBy" +
					 ", @ssRiskAssessmentSourceOfEviden" +
					 ", @ssRiskAssessmentSOEOther" +
					 ", @ssHasCapacity" +
					 ", @ssHasCapacityEvidence" +
					 ", @ssRiskAssessmentWhoIsAtRisk" +
					 ", @ssRiskAssessmentWATOther" +
					 ", @ssWhatAreTheRisks" +
					 ", @ssHistory" +
					 ", @ssMonitor" +
					 ", @ssWhatHappensRiskIncreases" +
					 ", @ssAutumnReviewDate" +
					 ", @ssSpringReviewDate" +
					 ", @ssSummerReviewDate" +
					 ", @ssCreatedBy" +
					 ", @ssLastUpdatedBy" +
					 ", @ssLastUpdatedOn" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENRiskAssessment.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENRiskAssessment.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssLeadStaffMember", DbType.String, ssENRiskAssessment.ssLeadStaffMember);
					if ((ssENRiskAssessment.ssRiskAssessmentSSPReason==0)) {
						insertSqlCmd.CreateParameter("@ssRiskAssessmentSSPReason", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRiskAssessmentSSPReason", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentSSPReason);
					}
					insertSqlCmd.CreateParameter("@ssRiskAssessmentSSPReasonOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentSSPReasonOther);
					if ((ssENRiskAssessment.ssRiskAssessmentCompletedBy==0)) {
						insertSqlCmd.CreateParameter("@ssRiskAssessmentCompletedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRiskAssessmentCompletedBy", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentCompletedBy);
					}
					if ((ssENRiskAssessment.ssRiskAssessmentSourceOfEviden==0)) {
						insertSqlCmd.CreateParameter("@ssRiskAssessmentSourceOfEviden", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRiskAssessmentSourceOfEviden", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentSourceOfEviden);
					}
					insertSqlCmd.CreateParameter("@ssRiskAssessmentSOEOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentSOEOther);
					insertSqlCmd.CreateParameter("@ssHasCapacity", DbType.Boolean, ssENRiskAssessment.ssHasCapacity);
					insertSqlCmd.CreateParameter("@ssHasCapacityEvidence", DbType.String, ssENRiskAssessment.ssHasCapacityEvidence);
					if ((ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk==0)) {
						insertSqlCmd.CreateParameter("@ssRiskAssessmentWhoIsAtRisk", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRiskAssessmentWhoIsAtRisk", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk);
					}
					insertSqlCmd.CreateParameter("@ssRiskAssessmentWATOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentWATOther);
					insertSqlCmd.CreateParameter("@ssWhatAreTheRisks", DbType.String, ssENRiskAssessment.ssWhatAreTheRisks);
					insertSqlCmd.CreateParameter("@ssHistory", DbType.String, ssENRiskAssessment.ssHistory);
					insertSqlCmd.CreateParameter("@ssMonitor", DbType.String, ssENRiskAssessment.ssMonitor);
					insertSqlCmd.CreateParameter("@ssWhatHappensRiskIncreases", DbType.String, ssENRiskAssessment.ssWhatHappensRiskIncreases);
					insertSqlCmd.CreateParameter("@ssAutumnReviewDate", DbType.DateTime, ssENRiskAssessment.ssAutumnReviewDate);
					insertSqlCmd.CreateParameter("@ssSpringReviewDate", DbType.DateTime, ssENRiskAssessment.ssSpringReviewDate);
					insertSqlCmd.CreateParameter("@ssSummerReviewDate", DbType.DateTime, ssENRiskAssessment.ssSummerReviewDate);
					if ((ssENRiskAssessment.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENRiskAssessment.ssCreatedBy);
					}
					if ((ssENRiskAssessment.ssLastUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENRiskAssessment.ssLastUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENRiskAssessment.ssLastUpdatedOn);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateRiskAssessment", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateRiskAssessment
		/// </summary>

		public static void CreateOrUpdateRiskAssessment(HeContext heContext, BitArray usedFields, RCRiskAssessmentRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentEntity.eSpaceId;
				ENRiskAssessmentEntityRecord ssENRiskAssessment = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(22, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRiskAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEADSTAFFMEMBER] = @ssLeadStaffMember"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTSSPREASON] = @ssRiskAssessmentSSPReason"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTSSPREASONOTHER] = @ssRiskAssessmentSSPReasonOther"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTCOMPLETEDBY] = @ssRiskAssessmentCompletedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTSOURCEOFEVIDEN] = @ssRiskAssessmentSourceOfEviden"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTSOEOTHER] = @ssRiskAssessmentSOEOther"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HASCAPACITY] = @ssHasCapacity"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HASCAPACITYEVIDENCE] = @ssHasCapacityEvidence"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTWHOISATRISK] = @ssRiskAssessmentWhoIsAtRisk"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTWATOTHER] = @ssRiskAssessmentWATOther"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WHATARETHERISKS] = @ssWhatAreTheRisks"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HISTORY] = @ssHistory"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MONITOR] = @ssMonitor"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WHATHAPPENSRISKINCREASES] = @ssWhatHappensRiskIncreases"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AUTUMNREVIEWDATE] = @ssAutumnReviewDate"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SPRINGREVIEWDATE] = @ssSpringReviewDate"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUMMERREVIEWDATE] = @ssSummerReviewDate"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDON] = @ssLastUpdatedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRiskAssessmentssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENRiskAssessment.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENRiskAssessment.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssLeadStaffMember", DbType.String, ssENRiskAssessment.ssLeadStaffMember);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENRiskAssessment.ssRiskAssessmentSSPReason==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessmentSSPReason", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessmentSSPReason", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentSSPReason);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssRiskAssessmentSSPReasonOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentSSPReasonOther);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENRiskAssessment.ssRiskAssessmentCompletedBy==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessmentCompletedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessmentCompletedBy", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentCompletedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENRiskAssessment.ssRiskAssessmentSourceOfEviden==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessmentSourceOfEviden", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessmentSourceOfEviden", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentSourceOfEviden);
						}
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssRiskAssessmentSOEOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentSOEOther);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssHasCapacity", DbType.Boolean, ssENRiskAssessment.ssHasCapacity);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssHasCapacityEvidence", DbType.String, ssENRiskAssessment.ssHasCapacityEvidence);
						counter++;
					}
					if (usedFields[10]) {
						if ((ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessmentWhoIsAtRisk", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessmentWhoIsAtRisk", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk);
						}
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssRiskAssessmentWATOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentWATOther);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssWhatAreTheRisks", DbType.String, ssENRiskAssessment.ssWhatAreTheRisks);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssHistory", DbType.String, ssENRiskAssessment.ssHistory);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssMonitor", DbType.String, ssENRiskAssessment.ssMonitor);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssWhatHappensRiskIncreases", DbType.String, ssENRiskAssessment.ssWhatHappensRiskIncreases);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssAutumnReviewDate", DbType.DateTime, ssENRiskAssessment.ssAutumnReviewDate);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssSpringReviewDate", DbType.DateTime, ssENRiskAssessment.ssSpringReviewDate);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssSummerReviewDate", DbType.DateTime, ssENRiskAssessment.ssSummerReviewDate);
						counter++;
					}
					if (usedFields[19]) {
						if ((ssENRiskAssessment.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENRiskAssessment.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[20]) {
						if ((ssENRiskAssessment.ssLastUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENRiskAssessment.ssLastUpdatedBy);
						}
						counter++;
					}
					if (usedFields[21]) {
						sqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENRiskAssessment.ssLastUpdatedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[HASCAPACITY] = [HASCAPACITY]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRiskAssessmentssId", DbType.Int32, ssENRiskAssessment.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateRiskAssessment (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENRiskAssessmentEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [LEADSTAFFMEMBER]" +
						 ", [RISKASSESSMENTSSPREASON]" +
						 ", [RISKASSESSMENTSSPREASONOTHER]" +
						 ", [RISKASSESSMENTCOMPLETEDBY]" +
						 ", [RISKASSESSMENTSOURCEOFEVIDEN]" +
						 ", [RISKASSESSMENTSOEOTHER]" +
						 ", [HASCAPACITY]" +
						 ", [HASCAPACITYEVIDENCE]" +
						 ", [RISKASSESSMENTWHOISATRISK]" +
						 ", [RISKASSESSMENTWATOTHER]" +
						 ", [WHATARETHERISKS]" +
						 ", [HISTORY]" +
						 ", [MONITOR]" +
						 ", [WHATHAPPENSRISKINCREASES]" +
						 ", [AUTUMNREVIEWDATE]" +
						 ", [SPRINGREVIEWDATE]" +
						 ", [SUMMERREVIEWDATE]" +
						 ", [CREATEDBY]" +
						 ", [LASTUPDATEDBY]" +
						 ", [LASTUPDATEDON]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssLeadStaffMember" +
						 ", @ssRiskAssessmentSSPReason" +
						 ", @ssRiskAssessmentSSPReasonOther" +
						 ", @ssRiskAssessmentCompletedBy" +
						 ", @ssRiskAssessmentSourceOfEviden" +
						 ", @ssRiskAssessmentSOEOther" +
						 ", @ssHasCapacity" +
						 ", @ssHasCapacityEvidence" +
						 ", @ssRiskAssessmentWhoIsAtRisk" +
						 ", @ssRiskAssessmentWATOther" +
						 ", @ssWhatAreTheRisks" +
						 ", @ssHistory" +
						 ", @ssMonitor" +
						 ", @ssWhatHappensRiskIncreases" +
						 ", @ssAutumnReviewDate" +
						 ", @ssSpringReviewDate" +
						 ", @ssSummerReviewDate" +
						 ", @ssCreatedBy" +
						 ", @ssLastUpdatedBy" +
						 ", @ssLastUpdatedOn" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENRiskAssessment.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENRiskAssessment.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssLeadStaffMember", DbType.String, ssENRiskAssessment.ssLeadStaffMember);
						if ((ssENRiskAssessment.ssRiskAssessmentSSPReason==0)) {
							insertSqlCmd.CreateParameter("@ssRiskAssessmentSSPReason", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRiskAssessmentSSPReason", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentSSPReason);
						}
						insertSqlCmd.CreateParameter("@ssRiskAssessmentSSPReasonOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentSSPReasonOther);
						if ((ssENRiskAssessment.ssRiskAssessmentCompletedBy==0)) {
							insertSqlCmd.CreateParameter("@ssRiskAssessmentCompletedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRiskAssessmentCompletedBy", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentCompletedBy);
						}
						if ((ssENRiskAssessment.ssRiskAssessmentSourceOfEviden==0)) {
							insertSqlCmd.CreateParameter("@ssRiskAssessmentSourceOfEviden", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRiskAssessmentSourceOfEviden", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentSourceOfEviden);
						}
						insertSqlCmd.CreateParameter("@ssRiskAssessmentSOEOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentSOEOther);
						insertSqlCmd.CreateParameter("@ssHasCapacity", DbType.Boolean, ssENRiskAssessment.ssHasCapacity);
						insertSqlCmd.CreateParameter("@ssHasCapacityEvidence", DbType.String, ssENRiskAssessment.ssHasCapacityEvidence);
						if ((ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk==0)) {
							insertSqlCmd.CreateParameter("@ssRiskAssessmentWhoIsAtRisk", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRiskAssessmentWhoIsAtRisk", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk);
						}
						insertSqlCmd.CreateParameter("@ssRiskAssessmentWATOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentWATOther);
						insertSqlCmd.CreateParameter("@ssWhatAreTheRisks", DbType.String, ssENRiskAssessment.ssWhatAreTheRisks);
						insertSqlCmd.CreateParameter("@ssHistory", DbType.String, ssENRiskAssessment.ssHistory);
						insertSqlCmd.CreateParameter("@ssMonitor", DbType.String, ssENRiskAssessment.ssMonitor);
						insertSqlCmd.CreateParameter("@ssWhatHappensRiskIncreases", DbType.String, ssENRiskAssessment.ssWhatHappensRiskIncreases);
						insertSqlCmd.CreateParameter("@ssAutumnReviewDate", DbType.DateTime, ssENRiskAssessment.ssAutumnReviewDate);
						insertSqlCmd.CreateParameter("@ssSpringReviewDate", DbType.DateTime, ssENRiskAssessment.ssSpringReviewDate);
						insertSqlCmd.CreateParameter("@ssSummerReviewDate", DbType.DateTime, ssENRiskAssessment.ssSummerReviewDate);
						if ((ssENRiskAssessment.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENRiskAssessment.ssCreatedBy);
						}
						if ((ssENRiskAssessment.ssLastUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENRiskAssessment.ssLastUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENRiskAssessment.ssLastUpdatedOn);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateRiskAssessment", true), typeof(int));
					} else {
						outParamId = ssENRiskAssessment.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteRiskAssessment
		/// </summary>

		public static void DeleteRiskAssessment(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENRiskAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteRiskAssessment", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRiskAssessment
		/// </summary>

		public static void GetRiskAssessment(HeContext heContext, int inParamId, out RCRiskAssessmentRecord outParamRecord) {
			outParamRecord = new RCRiskAssessmentRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [LEADSTAFFMEMBER]" +
					 ", [RISKASSESSMENTSSPREASON]" +
					 ", [RISKASSESSMENTSSPREASONOTHER]" +
					 ", [RISKASSESSMENTCOMPLETEDBY]" +
					 ", [RISKASSESSMENTSOURCEOFEVIDEN]" +
					 ", [RISKASSESSMENTSOEOTHER]" +
					 ", [HASCAPACITY]" +
					 ", [HASCAPACITYEVIDENCE]" +
					 ", [RISKASSESSMENTWHOISATRISK]" +
					 ", [RISKASSESSMENTWATOTHER]" +
					 ", [WHATARETHERISKS]" +
					 ", [HISTORY]" +
					 ", [MONITOR]" +
					 ", [WHATHAPPENSRISKINCREASES]" +
					 ", [AUTUMNREVIEWDATE]" +
					 ", [SPRINGREVIEWDATE]" +
					 ", [SUMMERREVIEWDATE]" +
					 ", [CREATEDBY]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDON]" +
					 " FROM " + ENRiskAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRiskAssessment", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(22, false)
							}
							;
						} else
						throw new DataBaseException(ENRiskAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRiskAssessmentForUpdate
		/// </summary>

		public static void GetRiskAssessmentForUpdate(HeContext heContext, int inParamId, out RCRiskAssessmentRecord outParamRecord) {
			outParamRecord = new RCRiskAssessmentRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [LEADSTAFFMEMBER]" +
					 ", [RISKASSESSMENTSSPREASON]" +
					 ", [RISKASSESSMENTSSPREASONOTHER]" +
					 ", [RISKASSESSMENTCOMPLETEDBY]" +
					 ", [RISKASSESSMENTSOURCEOFEVIDEN]" +
					 ", [RISKASSESSMENTSOEOTHER]" +
					 ", [HASCAPACITY]" +
					 ", [HASCAPACITYEVIDENCE]" +
					 ", [RISKASSESSMENTWHOISATRISK]" +
					 ", [RISKASSESSMENTWATOTHER]" +
					 ", [WHATARETHERISKS]" +
					 ", [HISTORY]" +
					 ", [MONITOR]" +
					 ", [WHATHAPPENSRISKINCREASES]" +
					 ", [AUTUMNREVIEWDATE]" +
					 ", [SPRINGREVIEWDATE]" +
					 ", [SUMMERREVIEWDATE]" +
					 ", [CREATEDBY]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDON]" +
					 "FROM " + ENRiskAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRiskAssessmentForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(22, false)
							}
							;
						} else
						throw new DataBaseException(ENRiskAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateRiskAssessment
		/// </summary>

		public static void UpdateRiskAssessment(HeContext heContext, BitArray usedFields, RCRiskAssessmentRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentEntity.eSpaceId;
				ENRiskAssessmentEntityRecord ssENRiskAssessment = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(22, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRiskAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEADSTAFFMEMBER] = @ssLeadStaffMember"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTSSPREASON] = @ssRiskAssessmentSSPReason"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTSSPREASONOTHER] = @ssRiskAssessmentSSPReasonOther"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTCOMPLETEDBY] = @ssRiskAssessmentCompletedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTSOURCEOFEVIDEN] = @ssRiskAssessmentSourceOfEviden"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTSOEOTHER] = @ssRiskAssessmentSOEOther"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HASCAPACITY] = @ssHasCapacity"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HASCAPACITYEVIDENCE] = @ssHasCapacityEvidence"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTWHOISATRISK] = @ssRiskAssessmentWhoIsAtRisk"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENTWATOTHER] = @ssRiskAssessmentWATOther"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WHATARETHERISKS] = @ssWhatAreTheRisks"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HISTORY] = @ssHistory"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MONITOR] = @ssMonitor"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WHATHAPPENSRISKINCREASES] = @ssWhatHappensRiskIncreases"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AUTUMNREVIEWDATE] = @ssAutumnReviewDate"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SPRINGREVIEWDATE] = @ssSpringReviewDate"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUMMERREVIEWDATE] = @ssSummerReviewDate"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDON] = @ssLastUpdatedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRiskAssessmentssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENRiskAssessment.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENRiskAssessment.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssLeadStaffMember", DbType.String, ssENRiskAssessment.ssLeadStaffMember);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENRiskAssessment.ssRiskAssessmentSSPReason==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessmentSSPReason", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessmentSSPReason", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentSSPReason);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssRiskAssessmentSSPReasonOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentSSPReasonOther);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENRiskAssessment.ssRiskAssessmentCompletedBy==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessmentCompletedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessmentCompletedBy", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentCompletedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENRiskAssessment.ssRiskAssessmentSourceOfEviden==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessmentSourceOfEviden", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessmentSourceOfEviden", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentSourceOfEviden);
						}
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssRiskAssessmentSOEOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentSOEOther);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssHasCapacity", DbType.Boolean, ssENRiskAssessment.ssHasCapacity);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssHasCapacityEvidence", DbType.String, ssENRiskAssessment.ssHasCapacityEvidence);
						counter++;
					}
					if (usedFields[10]) {
						if ((ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessmentWhoIsAtRisk", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessmentWhoIsAtRisk", DbType.Int32, ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk);
						}
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssRiskAssessmentWATOther", DbType.String, ssENRiskAssessment.ssRiskAssessmentWATOther);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssWhatAreTheRisks", DbType.String, ssENRiskAssessment.ssWhatAreTheRisks);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssHistory", DbType.String, ssENRiskAssessment.ssHistory);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssMonitor", DbType.String, ssENRiskAssessment.ssMonitor);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssWhatHappensRiskIncreases", DbType.String, ssENRiskAssessment.ssWhatHappensRiskIncreases);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssAutumnReviewDate", DbType.DateTime, ssENRiskAssessment.ssAutumnReviewDate);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssSpringReviewDate", DbType.DateTime, ssENRiskAssessment.ssSpringReviewDate);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssSummerReviewDate", DbType.DateTime, ssENRiskAssessment.ssSummerReviewDate);
						counter++;
					}
					if (usedFields[19]) {
						if ((ssENRiskAssessment.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENRiskAssessment.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[20]) {
						if ((ssENRiskAssessment.ssLastUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENRiskAssessment.ssLastUpdatedBy);
						}
						counter++;
					}
					if (usedFields[21]) {
						sqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENRiskAssessment.ssLastUpdatedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[HASCAPACITY] = [HASCAPACITY]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRiskAssessmentssId", DbType.Int32, ssENRiskAssessment.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateRiskAssessment", true) <= 0)
					throw new DataBaseException(ENRiskAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENRiskAssessment.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("RiskAssessment")]
	public class WORCRiskAssessmentRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("LeadStaffMember")]
		public string varWSLeadStaffMember;

		[System.Xml.Serialization.XmlElement("RiskAssessmentSSPReason")]
		public int varWSRiskAssessmentSSPReason;

		[System.Xml.Serialization.XmlElement("RiskAssessmentSSPReasonOther")]
		public string varWSRiskAssessmentSSPReasonOther;

		[System.Xml.Serialization.XmlElement("RiskAssessmentCompletedBy")]
		public int varWSRiskAssessmentCompletedBy;

		[System.Xml.Serialization.XmlElement("RiskAssessmentSourceOfEviden")]
		public int varWSRiskAssessmentSourceOfEviden;

		[System.Xml.Serialization.XmlElement("RiskAssessmentSOEOther")]
		public string varWSRiskAssessmentSOEOther;

		[System.Xml.Serialization.XmlElement("HasCapacity")]
		public bool varWSHasCapacity;

		[System.Xml.Serialization.XmlElement("HasCapacityEvidence")]
		public string varWSHasCapacityEvidence;

		[System.Xml.Serialization.XmlElement("RiskAssessmentWhoIsAtRisk")]
		public int varWSRiskAssessmentWhoIsAtRisk;

		[System.Xml.Serialization.XmlElement("RiskAssessmentWATOther")]
		public string varWSRiskAssessmentWATOther;

		[System.Xml.Serialization.XmlElement("WhatAreTheRisks")]
		public string varWSWhatAreTheRisks;

		[System.Xml.Serialization.XmlElement("History")]
		public string varWSHistory;

		[System.Xml.Serialization.XmlElement("Monitor")]
		public string varWSMonitor;

		[System.Xml.Serialization.XmlElement("WhatHappensRiskIncreases")]
		public string varWSWhatHappensRiskIncreases;

		[System.Xml.Serialization.XmlElement("AutumnReviewDate", DataType= "date")]
		public DateTime varWSAutumnReviewDate;

		[System.Xml.Serialization.XmlElement("SpringReviewDate", DataType= "date")]
		public DateTime varWSSpringReviewDate;

		[System.Xml.Serialization.XmlElement("SummerReviewDate", DataType= "date")]
		public DateTime varWSSummerReviewDate;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		public int varWSLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("LastUpdatedOn")]
		public DateTime varWSLastUpdatedOn;

		public WORCRiskAssessmentRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSLeadStaffMember = (string) "";
			varWSRiskAssessmentSSPReason = (int) 0;
			varWSRiskAssessmentSSPReasonOther = (string) "";
			varWSRiskAssessmentCompletedBy = (int) 0;
			varWSRiskAssessmentSourceOfEviden = (int) 0;
			varWSRiskAssessmentSOEOther = (string) "";
			varWSHasCapacity = (bool) false;
			varWSHasCapacityEvidence = (string) "";
			varWSRiskAssessmentWhoIsAtRisk = (int) 0;
			varWSRiskAssessmentWATOther = (string) "";
			varWSWhatAreTheRisks = (string) "";
			varWSHistory = (string) "";
			varWSMonitor = (string) "";
			varWSWhatHappensRiskIncreases = (string) "";
			varWSAutumnReviewDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSSpringReviewDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSSummerReviewDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
			varWSLastUpdatedBy = (int) 0;
			varWSLastUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCRiskAssessmentRecord(ENRiskAssessmentEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSLeadStaffMember = BaseAppUtils.RemoveControlChars(r.ssLeadStaffMember);
			varWSRiskAssessmentSSPReason = (int) r.ssRiskAssessmentSSPReason;
			varWSRiskAssessmentSSPReasonOther = BaseAppUtils.RemoveControlChars(r.ssRiskAssessmentSSPReasonOther);
			varWSRiskAssessmentCompletedBy = (int) r.ssRiskAssessmentCompletedBy;
			varWSRiskAssessmentSourceOfEviden = (int) r.ssRiskAssessmentSourceOfEviden;
			varWSRiskAssessmentSOEOther = BaseAppUtils.RemoveControlChars(r.ssRiskAssessmentSOEOther);
			varWSHasCapacity = (bool) r.ssHasCapacity;
			varWSHasCapacityEvidence = BaseAppUtils.RemoveControlChars(r.ssHasCapacityEvidence);
			varWSRiskAssessmentWhoIsAtRisk = (int) r.ssRiskAssessmentWhoIsAtRisk;
			varWSRiskAssessmentWATOther = BaseAppUtils.RemoveControlChars(r.ssRiskAssessmentWATOther);
			varWSWhatAreTheRisks = BaseAppUtils.RemoveControlChars(r.ssWhatAreTheRisks);
			varWSHistory = BaseAppUtils.RemoveControlChars(r.ssHistory);
			varWSMonitor = BaseAppUtils.RemoveControlChars(r.ssMonitor);
			varWSWhatHappensRiskIncreases = BaseAppUtils.RemoveControlChars(r.ssWhatHappensRiskIncreases);
			varWSAutumnReviewDate = (DateTime) r.ssAutumnReviewDate;
			varWSSpringReviewDate = (DateTime) r.ssSpringReviewDate;
			varWSSummerReviewDate = (DateTime) r.ssSummerReviewDate;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSLastUpdatedBy = (int) r.ssLastUpdatedBy;
			varWSLastUpdatedOn = (DateTime) r.ssLastUpdatedOn;
		}

		public static RLRiskAssessmentList ToRecordList(WORCRiskAssessmentRecord[] array) {
			RLRiskAssessmentList rl = new RLRiskAssessmentList();
			if (array != null) {
				foreach(WORCRiskAssessmentRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRiskAssessmentRecord[] FromRecordList(RLRiskAssessmentList rl) {
			WORCRiskAssessmentRecord[] array = new WORCRiskAssessmentRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCRiskAssessmentRecord {
		public static implicit operator WORCRiskAssessmentRecord(RCRiskAssessmentRecord r) {
			return new WORCRiskAssessmentRecord(r.ssENRiskAssessment);
		}

		public static implicit operator RCRiskAssessmentRecord(WORCRiskAssessmentRecord w) {
			RCRiskAssessmentRecord r = new RCRiskAssessmentRecord("");
			if (w != null) {
				r.ssENRiskAssessment = w;
			}
			return r;
		}

	}

	partial struct ENRiskAssessmentEntityRecord {
		public static implicit operator WORCRiskAssessmentRecord(ENRiskAssessmentEntityRecord r) {
			return new WORCRiskAssessmentRecord(r);
		}

		public static implicit operator ENRiskAssessmentEntityRecord(WORCRiskAssessmentRecord w) {
			ENRiskAssessmentEntityRecord r = new ENRiskAssessmentEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssLeadStaffMember = ((string) w.varWSLeadStaffMember ?? "");
				r.ssRiskAssessmentSSPReason = (int) w.varWSRiskAssessmentSSPReason;
				r.ssRiskAssessmentSSPReasonOther = ((string) w.varWSRiskAssessmentSSPReasonOther ?? "");
				r.ssRiskAssessmentCompletedBy = (int) w.varWSRiskAssessmentCompletedBy;
				r.ssRiskAssessmentSourceOfEviden = (int) w.varWSRiskAssessmentSourceOfEviden;
				r.ssRiskAssessmentSOEOther = ((string) w.varWSRiskAssessmentSOEOther ?? "");
				r.ssHasCapacity = (bool) w.varWSHasCapacity;
				r.ssHasCapacityEvidence = ((string) w.varWSHasCapacityEvidence ?? "");
				r.ssRiskAssessmentWhoIsAtRisk = (int) w.varWSRiskAssessmentWhoIsAtRisk;
				r.ssRiskAssessmentWATOther = ((string) w.varWSRiskAssessmentWATOther ?? "");
				r.ssWhatAreTheRisks = ((string) w.varWSWhatAreTheRisks ?? "");
				r.ssHistory = ((string) w.varWSHistory ?? "");
				r.ssMonitor = ((string) w.varWSMonitor ?? "");
				r.ssWhatHappensRiskIncreases = ((string) w.varWSWhatHappensRiskIncreases ?? "");
				r.ssAutumnReviewDate = (DateTime) w.varWSAutumnReviewDate;
				r.ssSpringReviewDate = (DateTime) w.varWSSpringReviewDate;
				r.ssSummerReviewDate = (DateTime) w.varWSSummerReviewDate;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssLastUpdatedBy = (int) w.varWSLastUpdatedBy;
				r.ssLastUpdatedOn = (DateTime) w.varWSLastUpdatedOn;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRiskAssessmentRecordList {
		public WORCRiskAssessmentRecord[] Array;


		public WORLRiskAssessmentRecordList(WORCRiskAssessmentRecord[] r) {
			if (r == null)
			Array = new WORCRiskAssessmentRecord[0];
			else
			Array = r;
		}
		public WORLRiskAssessmentRecordList() {
			Array = new WORCRiskAssessmentRecord[0];
		}

		public WORLRiskAssessmentRecordList(RLRiskAssessmentRecordList rl) {
			rl=(RLRiskAssessmentRecordList) rl.Duplicate();
			Array = new WORCRiskAssessmentRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRiskAssessmentRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRiskAssessmentRecordList {
		public static implicit operator RLRiskAssessmentRecordList(WORCRiskAssessmentRecord[] array) {
			RLRiskAssessmentRecordList rl = new RLRiskAssessmentRecordList();
			if (array != null) {
				foreach(WORCRiskAssessmentRecord val in array) {
					rl.Append((RCRiskAssessmentRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRiskAssessmentRecord[](RLRiskAssessmentRecordList rl) {
			WORCRiskAssessmentRecord[] array = new WORCRiskAssessmentRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRiskAssessmentRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRiskAssessmentRecordList {
		public static implicit operator RLRiskAssessmentRecordList(WORLRiskAssessmentRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRiskAssessmentRecordList(RLRiskAssessmentRecordList rl) {
			return new WORLRiskAssessmentRecordList(rl);
		}
		public static implicit operator WORCRiskAssessmentRecord[](WORLRiskAssessmentRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRiskAssessmentRecordList(WORCRiskAssessmentRecord[] array) {
			return new WORLRiskAssessmentRecordList(array);
		}
	}
}

