/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSIASSupportNeedEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENSIASSupportNeedEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENSIASSupportNeedEntity.eSpaceId;
	} // ENSIASSupportNeedEntity

	/// <summary>
	/// Entity <code>ENSIASSupportNeedEntityRecord</code> that represents the Service Studio entity
	///  <code>SIASSupportNeed</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("SIASSupportNeed", "78W2qLBl3kO9Gm_q6C6ogw", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_SIASSupportNeed", "")]
	[Serializable()]
	public partial struct ENSIASSupportNeedEntityRecord: ISerializable, ITypedRecord<ENSIASSupportNeedEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*FMDJGN5qCkmrZhBku56Hcg");
		private static readonly GlobalObjectKey IdSupportNeeds = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*7q0Ht7geDECEalSSvpjlDg");
		private static readonly GlobalObjectKey IdSupportNeedId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*IeCh0Px34UilMlg1HRNxSg");
		private static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*T3zxIOitKUCReyp6HbW7oQ");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*QiwXdMOL0UiJw1hqCCzRgw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(5, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SUPPORTNEEDS", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SupportNeeds")]
		private int _ssSupportNeeds;
		public int ssSupportNeeds {
			get {
				return _ssSupportNeeds;
			}
			set {
				if ((_ssSupportNeeds!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssSupportNeeds = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SUPPORTNEEDID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SupportNeedId")]
		private string _ssSupportNeedId;
		public string ssSupportNeedId {
			get {
				return _ssSupportNeedId;
			}
			set {
				if ((_ssSupportNeedId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssSupportNeedId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedOn")]
		private DateTime _ssCreatedOn;
		public DateTime ssCreatedOn {
			get {
				return _ssCreatedOn;
			}
			set {
				if ((_ssCreatedOn!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssCreatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCreatedBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSIASSupportNeedEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssSupportNeeds = 0;
			_ssSupportNeedId = "";
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "SIASSupportNeed.Id", 0);
			ssSupportNeeds = r.ReadEntityReference(index++, "SIASSupportNeed.SupportNeeds", 0);
			ssSupportNeedId = r.ReadTextEntityReference(index++, "SIASSupportNeed.SupportNeedId", "");
			ssCreatedOn = r.ReadDateTime(index++, "SIASSupportNeed.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "SIASSupportNeed.CreatedBy", 0);
			ChangedAttributes = new BitArray(5, false);
			OptimizedAttributes = new BitArray(5, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSIASSupportNeedEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSIASSupportNeedEntityRecord a, ENSIASSupportNeedEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssSupportNeeds != b.ssSupportNeeds) return false;
			if (a.ssSupportNeedId != b.ssSupportNeedId) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			return true;
		}

		public static bool operator != (ENSIASSupportNeedEntityRecord a, ENSIASSupportNeedEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSIASSupportNeedEntityRecord)) return false;
			return (this == (ENSIASSupportNeedEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssSupportNeeds.GetHashCode()
				^ ssSupportNeedId.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSIASSupportNeedEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssSupportNeeds = 0;
			_ssSupportNeedId = "";
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssSupportNeeds = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssSupportNeedId = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssCreatedOn = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSIASSupportNeedEntityRecord Duplicate() {
			ENSIASSupportNeedEntityRecord t;
			t._ssId = this._ssId;
			t._ssSupportNeeds = this._ssSupportNeeds;
			t._ssSupportNeedId = this._ssSupportNeedId;
			t._ssCreatedOn = this._ssCreatedOn;
			t._ssCreatedBy = this._ssCreatedBy;
			t.ChangedAttributes = new BitArray(5);
			t.OptimizedAttributes = new BitArray(5);
			for (int i = 0; i < 5; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportNeeds")) VarValue.AppendAttribute(recordElem, "SupportNeeds", ssSupportNeeds, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SupportNeeds");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportNeedId")) VarValue.AppendAttribute(recordElem, "SupportNeedId", ssSupportNeedId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SupportNeedId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "supportneeds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportNeeds")) variable.Value = ssSupportNeeds; else variable.Optimized = true;
			} else if (head == "supportneedid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportNeedId")) variable.Value = ssSupportNeedId; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdSupportNeeds)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdSupportNeedId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdCreatedOn)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdSupportNeeds)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdSupportNeedId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdCreatedOn)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdSupportNeeds) {
				return ssSupportNeeds;
			} else if (key == IdSupportNeedId) {
				return ssSupportNeedId;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(5);
			OptimizedAttributes = new BitArray(5);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssSupportNeeds = (int) other.AttributeGet(IdSupportNeeds);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdSupportNeeds);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdSupportNeeds);
			ssSupportNeedId = (string) other.AttributeGet(IdSupportNeedId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdSupportNeedId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdSupportNeedId);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdCreatedOn);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdCreatedOn);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCreatedBy);
		}
	} // ENSIASSupportNeedEntityRecord
	/// <summary>
	/// Structure <code>RCSIASSupportNeedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSIASSupportNeedRecord: ISerializable, ITypedRecord<RCSIASSupportNeedRecord> {
		private static readonly GlobalObjectKey IdSIASSupportNeed = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*iY0Tw4p2s8UCECZJZVoqyA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SIASSupportNeed")]
		public ENSIASSupportNeedEntityRecord ssENSIASSupportNeed;


		public static implicit operator ENSIASSupportNeedEntityRecord(RCSIASSupportNeedRecord r) {
			return r.ssENSIASSupportNeed;
		}

		public static implicit operator RCSIASSupportNeedRecord(ENSIASSupportNeedEntityRecord r) {
			RCSIASSupportNeedRecord res = new RCSIASSupportNeedRecord(null);
			res.ssENSIASSupportNeed = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSIASSupportNeed.ChangedAttributes = value;
			}
			get {
				return ssENSIASSupportNeed.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSIASSupportNeedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSIASSupportNeed = new ENSIASSupportNeedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSIASSupportNeed.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSIASSupportNeed.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSIASSupportNeed.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSIASSupportNeed.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSIASSupportNeedRecord r) {
			this = r;
		}


		public static bool operator == (RCSIASSupportNeedRecord a, RCSIASSupportNeedRecord b) {
			if (a.ssENSIASSupportNeed != b.ssENSIASSupportNeed) return false;
			return true;
		}

		public static bool operator != (RCSIASSupportNeedRecord a, RCSIASSupportNeedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSIASSupportNeedRecord)) return false;
			return (this == (RCSIASSupportNeedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSIASSupportNeed.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSIASSupportNeedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSIASSupportNeed = new ENSIASSupportNeedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSIASSupportNeed = (ENSIASSupportNeedEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSIASSupportNeed.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSIASSupportNeed.InternalRecursiveSave();
		}


		public RCSIASSupportNeedRecord Duplicate() {
			RCSIASSupportNeedRecord t;
			t.ssENSIASSupportNeed = (ENSIASSupportNeedEntityRecord) this.ssENSIASSupportNeed.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSIASSupportNeed.ToXml(this, recordElem, "SIASSupportNeed", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "siassupportneed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupportNeed")) variable.Value = ssENSIASSupportNeed; else variable.Optimized = true;
				variable.SetFieldName("siassupportneed");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSIASSupportNeed.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSIASSupportNeed.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSIASSupportNeed) {
				return ssENSIASSupportNeed;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSIASSupportNeed.FillFromOther((IRecord) other.AttributeGet(IdSIASSupportNeed));
		}
	} // RCSIASSupportNeedRecord
	/// <summary>
	/// RecordList type <code>RLSIASSupportNeedRecordList</code> that represents a record list of
	///  <code>SIASSupportNeed</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASSupportNeedRecordList: GenericRecordList<RCSIASSupportNeedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSIASSupportNeedRecord GetElementDefaultValue() {
			return new RCSIASSupportNeedRecord("");
		}

		public T[] ToArray<T>(Func<RCSIASSupportNeedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASSupportNeedRecordList recordlist, Func<RCSIASSupportNeedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASSupportNeedRecordList ToList<T>(T[] array, Func <T, RCSIASSupportNeedRecord> converter) {
			RLSIASSupportNeedRecordList result = new RLSIASSupportNeedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASSupportNeedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportNeedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportNeedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASSupportNeedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSIASSupportNeedRecord> NewList() {
			return new RLSIASSupportNeedRecordList();
		}


	} // RLSIASSupportNeedRecordList

	/// <summary>
	/// RecordList type <code>RLSIASSupportNeedList</code> that represents a record list of
	///  <code>SIASSupportNeedsIdentifier, SupportNeedsIdentifier, UserIdentifier, DateTime, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASSupportNeedList: GenericRecordList<ENSIASSupportNeedEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSIASSupportNeedEntityRecord GetElementDefaultValue() {
			return new ENSIASSupportNeedEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSIASSupportNeedEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASSupportNeedList recordlist, Func<ENSIASSupportNeedEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASSupportNeedList ToList<T>(T[] array, Func <T, ENSIASSupportNeedEntityRecord> converter) {
			RLSIASSupportNeedList result = new RLSIASSupportNeedList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASSupportNeedList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportNeedList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportNeedList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASSupportNeedList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSIASSupportNeedEntityRecord> NewList() {
			return new RLSIASSupportNeedList();
		}


	} // RLSIASSupportNeedList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateSIASSupportNeed
		/// </summary>

		public static void CreateSIASSupportNeed(HeContext heContext, RCSIASSupportNeedRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportNeedEntity.eSpaceId;
				ENSIASSupportNeedEntityRecord ssENSIASSupportNeed = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENSIASSupportNeedEntity.LocalViewName(null, null) + " (" +
					 " [SUPPORTNEEDS]" +
					 ", [SUPPORTNEEDID]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 " ) VALUES (" +
					 " @ssSupportNeeds" +
					 ", @ssSupportNeedId" +
					 ", @ssCreatedOn" +
					 ", @ssCreatedBy" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENSIASSupportNeed.ssSupportNeeds==0)) {
						insertSqlCmd.CreateParameter("@ssSupportNeeds", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSupportNeeds", DbType.Int32, ssENSIASSupportNeed.ssSupportNeeds);
					}
					if ((ssENSIASSupportNeed.ssSupportNeedId== "")) {
						insertSqlCmd.CreateParameter("@ssSupportNeedId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSupportNeedId", DbType.String, ssENSIASSupportNeed.ssSupportNeedId);
					}
					insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupportNeed.ssCreatedOn);
					if ((ssENSIASSupportNeed.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupportNeed.ssCreatedBy);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateSIASSupportNeed", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateSIASSupportNeed
		/// </summary>

		public static void CreateOrUpdateSIASSupportNeed(HeContext heContext, BitArray usedFields, RCSIASSupportNeedRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportNeedEntity.eSpaceId;
				ENSIASSupportNeedEntityRecord ssENSIASSupportNeed = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSIASSupportNeedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTNEEDS] = @ssSupportNeeds"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTNEEDID] = @ssSupportNeedId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSIASSupportNeedssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSIASSupportNeed.ssSupportNeeds==0)) {
							sqlCmd.CreateParameter("@ssSupportNeeds", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportNeeds", DbType.Int32, ssENSIASSupportNeed.ssSupportNeeds);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSIASSupportNeed.ssSupportNeedId== "")) {
							sqlCmd.CreateParameter("@ssSupportNeedId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportNeedId", DbType.String, ssENSIASSupportNeed.ssSupportNeedId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupportNeed.ssCreatedOn);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENSIASSupportNeed.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupportNeed.ssCreatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDON] = [CREATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSIASSupportNeedssId", DbType.Int32, ssENSIASSupportNeed.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateSIASSupportNeed (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENSIASSupportNeedEntity.LocalViewName(null, null) + " (" +
						 " [SUPPORTNEEDS]" +
						 ", [SUPPORTNEEDID]" +
						 ", [CREATEDON]" +
						 ", [CREATEDBY]" +
						 " ) VALUES (" +
						 " @ssSupportNeeds" +
						 ", @ssSupportNeedId" +
						 ", @ssCreatedOn" +
						 ", @ssCreatedBy" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENSIASSupportNeed.ssSupportNeeds==0)) {
							insertSqlCmd.CreateParameter("@ssSupportNeeds", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSupportNeeds", DbType.Int32, ssENSIASSupportNeed.ssSupportNeeds);
						}
						if ((ssENSIASSupportNeed.ssSupportNeedId== "")) {
							insertSqlCmd.CreateParameter("@ssSupportNeedId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSupportNeedId", DbType.String, ssENSIASSupportNeed.ssSupportNeedId);
						}
						insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupportNeed.ssCreatedOn);
						if ((ssENSIASSupportNeed.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupportNeed.ssCreatedBy);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateSIASSupportNeed", true), typeof(int));
					} else {
						outParamId = ssENSIASSupportNeed.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteSIASSupportNeed
		/// </summary>

		public static void DeleteSIASSupportNeed(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportNeedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENSIASSupportNeedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteSIASSupportNeed", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSIASSupportNeed
		/// </summary>

		public static void GetSIASSupportNeed(HeContext heContext, int inParamId, out RCSIASSupportNeedRecord outParamRecord) {
			outParamRecord = new RCSIASSupportNeedRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportNeedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [SUPPORTNEEDS]" +
					 ", [SUPPORTNEEDID]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 " FROM " + ENSIASSupportNeedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSIASSupportNeed", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENSIASSupportNeedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSIASSupportNeedForUpdate
		/// </summary>

		public static void GetSIASSupportNeedForUpdate(HeContext heContext, int inParamId, out RCSIASSupportNeedRecord outParamRecord) {
			outParamRecord = new RCSIASSupportNeedRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportNeedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [SUPPORTNEEDS]" +
					 ", [SUPPORTNEEDID]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 "FROM " + ENSIASSupportNeedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSIASSupportNeedForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENSIASSupportNeedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateSIASSupportNeed
		/// </summary>

		public static void UpdateSIASSupportNeed(HeContext heContext, BitArray usedFields, RCSIASSupportNeedRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportNeedEntity.eSpaceId;
				ENSIASSupportNeedEntityRecord ssENSIASSupportNeed = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSIASSupportNeedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTNEEDS] = @ssSupportNeeds"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTNEEDID] = @ssSupportNeedId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSIASSupportNeedssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSIASSupportNeed.ssSupportNeeds==0)) {
							sqlCmd.CreateParameter("@ssSupportNeeds", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportNeeds", DbType.Int32, ssENSIASSupportNeed.ssSupportNeeds);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSIASSupportNeed.ssSupportNeedId== "")) {
							sqlCmd.CreateParameter("@ssSupportNeedId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportNeedId", DbType.String, ssENSIASSupportNeed.ssSupportNeedId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupportNeed.ssCreatedOn);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENSIASSupportNeed.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupportNeed.ssCreatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDON] = [CREATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSIASSupportNeedssId", DbType.Int32, ssENSIASSupportNeed.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateSIASSupportNeed", true) <= 0)
					throw new DataBaseException(ENSIASSupportNeedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENSIASSupportNeed.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("SIASSupportNeed")]
	public class WORCSIASSupportNeedRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("SupportNeeds")]
		public int varWSSupportNeeds;

		[System.Xml.Serialization.XmlElement("SupportNeedId")]
		public string varWSSupportNeedId;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime varWSCreatedOn;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		public WORCSIASSupportNeedRecord() {
			varWSId = (int) 0;
			varWSSupportNeeds = (int) 0;
			varWSSupportNeedId = (string) "";
			varWSCreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
		}

		public WORCSIASSupportNeedRecord(ENSIASSupportNeedEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSSupportNeeds = (int) r.ssSupportNeeds;
			varWSSupportNeedId = BaseAppUtils.RemoveControlChars(r.ssSupportNeedId);
			varWSCreatedOn = (DateTime) r.ssCreatedOn;
			varWSCreatedBy = (int) r.ssCreatedBy;
		}

		public static RLSIASSupportNeedList ToRecordList(WORCSIASSupportNeedRecord[] array) {
			RLSIASSupportNeedList rl = new RLSIASSupportNeedList();
			if (array != null) {
				foreach(WORCSIASSupportNeedRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSIASSupportNeedRecord[] FromRecordList(RLSIASSupportNeedList rl) {
			WORCSIASSupportNeedRecord[] array = new WORCSIASSupportNeedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSIASSupportNeedRecord {
		public static implicit operator WORCSIASSupportNeedRecord(RCSIASSupportNeedRecord r) {
			return new WORCSIASSupportNeedRecord(r.ssENSIASSupportNeed);
		}

		public static implicit operator RCSIASSupportNeedRecord(WORCSIASSupportNeedRecord w) {
			RCSIASSupportNeedRecord r = new RCSIASSupportNeedRecord("");
			if (w != null) {
				r.ssENSIASSupportNeed = w;
			}
			return r;
		}

	}

	partial struct ENSIASSupportNeedEntityRecord {
		public static implicit operator WORCSIASSupportNeedRecord(ENSIASSupportNeedEntityRecord r) {
			return new WORCSIASSupportNeedRecord(r);
		}

		public static implicit operator ENSIASSupportNeedEntityRecord(WORCSIASSupportNeedRecord w) {
			ENSIASSupportNeedEntityRecord r = new ENSIASSupportNeedEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssSupportNeeds = (int) w.varWSSupportNeeds;
				r.ssSupportNeedId = (string) w.varWSSupportNeedId;
				r.ssCreatedOn = (DateTime) w.varWSCreatedOn;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSIASSupportNeedRecordList {
		public WORCSIASSupportNeedRecord[] Array;


		public WORLSIASSupportNeedRecordList(WORCSIASSupportNeedRecord[] r) {
			if (r == null)
			Array = new WORCSIASSupportNeedRecord[0];
			else
			Array = r;
		}
		public WORLSIASSupportNeedRecordList() {
			Array = new WORCSIASSupportNeedRecord[0];
		}

		public WORLSIASSupportNeedRecordList(RLSIASSupportNeedRecordList rl) {
			rl=(RLSIASSupportNeedRecordList) rl.Duplicate();
			Array = new WORCSIASSupportNeedRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSIASSupportNeedRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSIASSupportNeedRecordList {
		public static implicit operator RLSIASSupportNeedRecordList(WORCSIASSupportNeedRecord[] array) {
			RLSIASSupportNeedRecordList rl = new RLSIASSupportNeedRecordList();
			if (array != null) {
				foreach(WORCSIASSupportNeedRecord val in array) {
					rl.Append((RCSIASSupportNeedRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSIASSupportNeedRecord[](RLSIASSupportNeedRecordList rl) {
			WORCSIASSupportNeedRecord[] array = new WORCSIASSupportNeedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSIASSupportNeedRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSIASSupportNeedRecordList {
		public static implicit operator RLSIASSupportNeedRecordList(WORLSIASSupportNeedRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSIASSupportNeedRecordList(RLSIASSupportNeedRecordList rl) {
			return new WORLSIASSupportNeedRecordList(rl);
		}
		public static implicit operator WORCSIASSupportNeedRecord[](WORLSIASSupportNeedRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSIASSupportNeedRecordList(WORCSIASSupportNeedRecord[] array) {
			return new WORLSIASSupportNeedRecordList(array);
		}
	}
}

