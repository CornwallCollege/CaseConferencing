/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENProgressReportSectionEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENProgressReportSectionEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENProgressReportSectionEntity.eSpaceId;
	} // ENProgressReportSectionEntity

	/// <summary>
	/// Entity <code>ENProgressReportSectionEntityRecord</code> that represents the Service Studio entity
	///  <code>ProgressReportSection</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("ProgressReportSection", "e9QYHPfVYkWd0gi6k5te4A", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_ProgressReportSection", "")]
	[Serializable()]
	public partial struct ENProgressReportSectionEntityRecord: ISerializable, ITypedRecord<ENProgressReportSectionEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*4kR7HzAV3UqAZuHiWDOHmA");
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*bdYLpBTMxkW_1k8c9bJfrw");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ry0WMiLN20+5AqGeTOvLPw");
		private static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*rKQMUwE_PEyC4Mk6kOqdGw");
		private static readonly GlobalObjectKey IdCourseOutline = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*WzHCkJMc+UC1gfU8fNfHqA");
		private static readonly GlobalObjectKey IdCourseOutlineVisible = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*+yQQDE6UGkOJngyQ+pb4Rg");
		private static readonly GlobalObjectKey IdCourseOutlineUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*RTMBRDRYmEyefyPq7dcYDw");
		private static readonly GlobalObjectKey IdCourseOutlineUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*76M5gOKkTEmbUJFBaWv1bQ");
		private static readonly GlobalObjectKey IdCourseOutlineCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*c7gqG5DhPUq0hx2QDVBBzQ");
		private static readonly GlobalObjectKey IdKeyStrengths = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*qNybTUo+lk+DzVz4b4MMyA");
		private static readonly GlobalObjectKey IdKeyStrengthsVisible = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*G0ROU9u4uE2By3Oiyb8J9w");
		private static readonly GlobalObjectKey IdKeyStrengthsUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*cM4y2dv780+09oXXwpNilw");
		private static readonly GlobalObjectKey IdKeyStrengthsUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*vKOxvVacSkuU9Z0T1GiOEg");
		private static readonly GlobalObjectKey IdKeyStrengthsCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*jaE58RTbdk2qKMMYgZW53g");
		private static readonly GlobalObjectKey IdAreasForDevelopment = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Ct8ebUWxFEW5huQcQ7AzdQ");
		private static readonly GlobalObjectKey IdAreasForDevelopmentVisible = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*itqfP4Huo0WEIb8gd08htA");
		private static readonly GlobalObjectKey IdAreasForDevelopmentUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*NeeCzPVsoUOwP4X1874eRQ");
		private static readonly GlobalObjectKey IdAreasForDevelopmentUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*+LSYqrHjrE2eXHQDD1yTWw");
		private static readonly GlobalObjectKey IdAreasForDevelopmentCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Vd5nFbMgT0e1MgRDxZFrVQ");
		private static readonly GlobalObjectKey IdPredictedOutcome = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xPnI+oCPbku1tt_ZO461Qg");
		private static readonly GlobalObjectKey IdPredictedOutcomeVisible = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*oJbEg924_kWKEyJwKFcIpQ");
		private static readonly GlobalObjectKey IdPredictedOutcomeUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*4yiUQgUFhkieIZf4YeZMgQ");
		private static readonly GlobalObjectKey IdPredictedOutcomeUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*YUUDTBFkQUKXwQvwGU4lVg");
		private static readonly GlobalObjectKey IdPredictedOutcomeCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*66xlTA_z1ESfd65gnmbiXQ");
		private static readonly GlobalObjectKey IdAttendance = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*50KkJCXRi061eg1_eCM21g");
		private static readonly GlobalObjectKey IdAttendanceVisible = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*nIUu1Pwy6kabuyPI410bPg");
		private static readonly GlobalObjectKey IdAttendanceUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*UyU5gDoyu0WET82FS2pL2A");
		private static readonly GlobalObjectKey IdAttendanceUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*r4ZKAIsWp0qg5TA3SQw6NA");
		private static readonly GlobalObjectKey IdAttendanceCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ESLOfFl8NU+LpDSfgQom5w");
		private static readonly GlobalObjectKey IdCourseCoordinatorSummary = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*YtnJR0Sc5E+kSbPaKIiczg");
		private static readonly GlobalObjectKey IdCourseCoordinatorSummaryVisi = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*+vGiaTlXrEuVrFSDiAtoaw");
		private static readonly GlobalObjectKey IdCourseCoordinatorUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*MjjwboegnUqg+J0Rk3+BUg");
		private static readonly GlobalObjectKey IdCourseCoordinatorUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ec8gFtAj3kCOejC9J7Kifw");
		private static readonly GlobalObjectKey IdCourseCoordinatorCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*_3Eq4OG96UO42ZBH9imkWQ");
		private static readonly GlobalObjectKey IdStudyProgrammeOverview = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*57XKqxfboUmx7zqk3QGhnw");
		private static readonly GlobalObjectKey IdStudyProgrammeOverviewVisibl = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*t2Zx0ELd4EiILSYc_JpBAg");
		private static readonly GlobalObjectKey IdStudyProgrammeUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*BwyR1PKi90al5hvoPEaSmw");
		private static readonly GlobalObjectKey IdStudyProgrammeUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*9bImYT534EC8DOEteNWxEw");
		private static readonly GlobalObjectKey IdStudyProgrammeCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*C2xjG5tl90CIlKnFTQNugQ");
		private static readonly GlobalObjectKey IdEmployability = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*INIYtSnKcUybffsmeEM3iw");
		private static readonly GlobalObjectKey IdEmployabilityVisible = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*IoDhsXyQa0K1orVDkEsPOg");
		private static readonly GlobalObjectKey IdEmployabilityUpdatesdBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*tYQwM7P8fESDZppyUY9LoQ");
		private static readonly GlobalObjectKey IdEmployabilityUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*sCJE7u6ujUWkNsu64hr55A");
		private static readonly GlobalObjectKey IdEmployabilityCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*h1CLIP+owESlkz6dx8uXcg");
		private static readonly GlobalObjectKey IdWorkExperience = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*uJ6eIvzaiUyyIE3DBqB+UA");
		private static readonly GlobalObjectKey IdWorkExperienceVisible = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*oLz8AYOoDECLWFBYh_4M5w");
		private static readonly GlobalObjectKey IdWorkExperienceUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*SX0oREduRk66q0rccTBcEw");
		private static readonly GlobalObjectKey IdWorkExperienceUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*axftg1E00EWOi8tTvEqjRg");
		private static readonly GlobalObjectKey IdWorkExperienceCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*3gQm_Ms2xECksU+9NC0yNw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(49, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GROUP", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Group")]
		private int _ssGroup;
		public int ssGroup {
			get {
				return _ssGroup;
			}
			set {
				if ((_ssGroup!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssGroup = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedOn")]
		private DateTime _ssCreatedOn;
		public DateTime ssCreatedOn {
			get {
				return _ssCreatedOn;
			}
			set {
				if ((_ssCreatedOn!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssCreatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSEOUTLINE", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("CourseOutline")]
		private string _ssCourseOutline;
		public string ssCourseOutline {
			get {
				return _ssCourseOutline;
			}
			set {
				if ((_ssCourseOutline!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCourseOutline = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSEOUTLINEVISIBLE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CourseOutlineVisible")]
		private bool _ssCourseOutlineVisible;
		public bool ssCourseOutlineVisible {
			get {
				return _ssCourseOutlineVisible;
			}
			set {
				if ((_ssCourseOutlineVisible!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCourseOutlineVisible = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSEOUTLINEUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CourseOutlineUpdatedBy")]
		private int _ssCourseOutlineUpdatedBy;
		public int ssCourseOutlineUpdatedBy {
			get {
				return _ssCourseOutlineUpdatedBy;
			}
			set {
				if ((_ssCourseOutlineUpdatedBy!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssCourseOutlineUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSEOUTLINEUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CourseOutlineUpdatedOn")]
		private DateTime _ssCourseOutlineUpdatedOn;
		public DateTime ssCourseOutlineUpdatedOn {
			get {
				return _ssCourseOutlineUpdatedOn;
			}
			set {
				if ((_ssCourseOutlineUpdatedOn!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssCourseOutlineUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSEOUTLINECOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CourseOutlineCompleted")]
		private bool _ssCourseOutlineCompleted;
		public bool ssCourseOutlineCompleted {
			get {
				return _ssCourseOutlineCompleted;
			}
			set {
				if ((_ssCourseOutlineCompleted!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssCourseOutlineCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("KEYSTRENGTHS", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("KeyStrengths")]
		private string _ssKeyStrengths;
		public string ssKeyStrengths {
			get {
				return _ssKeyStrengths;
			}
			set {
				if ((_ssKeyStrengths!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssKeyStrengths = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("KEYSTRENGTHSVISIBLE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("KeyStrengthsVisible")]
		private bool _ssKeyStrengthsVisible;
		public bool ssKeyStrengthsVisible {
			get {
				return _ssKeyStrengthsVisible;
			}
			set {
				if ((_ssKeyStrengthsVisible!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssKeyStrengthsVisible = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("KEYSTRENGTHSUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("KeyStrengthsUpdatedBy")]
		private int _ssKeyStrengthsUpdatedBy;
		public int ssKeyStrengthsUpdatedBy {
			get {
				return _ssKeyStrengthsUpdatedBy;
			}
			set {
				if ((_ssKeyStrengthsUpdatedBy!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssKeyStrengthsUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("KEYSTRENGTHSUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("KeyStrengthsUpdatedOn")]
		private DateTime _ssKeyStrengthsUpdatedOn;
		public DateTime ssKeyStrengthsUpdatedOn {
			get {
				return _ssKeyStrengthsUpdatedOn;
			}
			set {
				if ((_ssKeyStrengthsUpdatedOn!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssKeyStrengthsUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("KEYSTRENGTHSCOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("KeyStrengthsCompleted")]
		private bool _ssKeyStrengthsCompleted;
		public bool ssKeyStrengthsCompleted {
			get {
				return _ssKeyStrengthsCompleted;
			}
			set {
				if ((_ssKeyStrengthsCompleted!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssKeyStrengthsCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("AREASFORDEVELOPMENT", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("AreasForDevelopment")]
		private string _ssAreasForDevelopment;
		public string ssAreasForDevelopment {
			get {
				return _ssAreasForDevelopment;
			}
			set {
				if ((_ssAreasForDevelopment!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssAreasForDevelopment = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("AREASFORDEVELOPMENTVISIBLE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("AreasForDevelopmentVisible")]
		private bool _ssAreasForDevelopmentVisible;
		public bool ssAreasForDevelopmentVisible {
			get {
				return _ssAreasForDevelopmentVisible;
			}
			set {
				if ((_ssAreasForDevelopmentVisible!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssAreasForDevelopmentVisible = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("AREASFORDEVELOPMENTUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("AreasForDevelopmentUpdatedBy")]
		private int _ssAreasForDevelopmentUpdatedBy;
		public int ssAreasForDevelopmentUpdatedBy {
			get {
				return _ssAreasForDevelopmentUpdatedBy;
			}
			set {
				if ((_ssAreasForDevelopmentUpdatedBy!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssAreasForDevelopmentUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("AREASFORDEVELOPMENTUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("AreasForDevelopmentUpdatedOn")]
		private DateTime _ssAreasForDevelopmentUpdatedOn;
		public DateTime ssAreasForDevelopmentUpdatedOn {
			get {
				return _ssAreasForDevelopmentUpdatedOn;
			}
			set {
				if ((_ssAreasForDevelopmentUpdatedOn!=value) || OptimizedAttributes[17]) {
					ChangedAttributes[17] = true;
					_ssAreasForDevelopmentUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("AREASFORDEVELOPMENTCOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("AreasForDevelopmentCompleted")]
		private bool _ssAreasForDevelopmentCompleted;
		public bool ssAreasForDevelopmentCompleted {
			get {
				return _ssAreasForDevelopmentCompleted;
			}
			set {
				if ((_ssAreasForDevelopmentCompleted!=value) || OptimizedAttributes[18]) {
					ChangedAttributes[18] = true;
					_ssAreasForDevelopmentCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PREDICTEDOUTCOME", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("PredictedOutcome")]
		private string _ssPredictedOutcome;
		public string ssPredictedOutcome {
			get {
				return _ssPredictedOutcome;
			}
			set {
				if ((_ssPredictedOutcome!=value) || OptimizedAttributes[19]) {
					ChangedAttributes[19] = true;
					_ssPredictedOutcome = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PREDICTEDOUTCOMEVISIBLE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("PredictedOutcomeVisible")]
		private bool _ssPredictedOutcomeVisible;
		public bool ssPredictedOutcomeVisible {
			get {
				return _ssPredictedOutcomeVisible;
			}
			set {
				if ((_ssPredictedOutcomeVisible!=value) || OptimizedAttributes[20]) {
					ChangedAttributes[20] = true;
					_ssPredictedOutcomeVisible = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PREDICTEDOUTCOMEUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("PredictedOutcomeUpdatedBy")]
		private int _ssPredictedOutcomeUpdatedBy;
		public int ssPredictedOutcomeUpdatedBy {
			get {
				return _ssPredictedOutcomeUpdatedBy;
			}
			set {
				if ((_ssPredictedOutcomeUpdatedBy!=value) || OptimizedAttributes[21]) {
					ChangedAttributes[21] = true;
					_ssPredictedOutcomeUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PREDICTEDOUTCOMEUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("PredictedOutcomeUpdatedOn")]
		private DateTime _ssPredictedOutcomeUpdatedOn;
		public DateTime ssPredictedOutcomeUpdatedOn {
			get {
				return _ssPredictedOutcomeUpdatedOn;
			}
			set {
				if ((_ssPredictedOutcomeUpdatedOn!=value) || OptimizedAttributes[22]) {
					ChangedAttributes[22] = true;
					_ssPredictedOutcomeUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PREDICTEDOUTCOMECOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("PredictedOutcomeCompleted")]
		private bool _ssPredictedOutcomeCompleted;
		public bool ssPredictedOutcomeCompleted {
			get {
				return _ssPredictedOutcomeCompleted;
			}
			set {
				if ((_ssPredictedOutcomeCompleted!=value) || OptimizedAttributes[23]) {
					ChangedAttributes[23] = true;
					_ssPredictedOutcomeCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ATTENDANCE", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Attendance")]
		private string _ssAttendance;
		public string ssAttendance {
			get {
				return _ssAttendance;
			}
			set {
				if ((_ssAttendance!=value) || OptimizedAttributes[24]) {
					ChangedAttributes[24] = true;
					_ssAttendance = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ATTENDANCEVISIBLE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("AttendanceVisible")]
		private bool _ssAttendanceVisible;
		public bool ssAttendanceVisible {
			get {
				return _ssAttendanceVisible;
			}
			set {
				if ((_ssAttendanceVisible!=value) || OptimizedAttributes[25]) {
					ChangedAttributes[25] = true;
					_ssAttendanceVisible = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ATTENDANCEUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("AttendanceUpdatedBy")]
		private int _ssAttendanceUpdatedBy;
		public int ssAttendanceUpdatedBy {
			get {
				return _ssAttendanceUpdatedBy;
			}
			set {
				if ((_ssAttendanceUpdatedBy!=value) || OptimizedAttributes[26]) {
					ChangedAttributes[26] = true;
					_ssAttendanceUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ATTENDANCEUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("AttendanceUpdatedOn")]
		private DateTime _ssAttendanceUpdatedOn;
		public DateTime ssAttendanceUpdatedOn {
			get {
				return _ssAttendanceUpdatedOn;
			}
			set {
				if ((_ssAttendanceUpdatedOn!=value) || OptimizedAttributes[27]) {
					ChangedAttributes[27] = true;
					_ssAttendanceUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ATTENDANCECOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("AttendanceCompleted")]
		private bool _ssAttendanceCompleted;
		public bool ssAttendanceCompleted {
			get {
				return _ssAttendanceCompleted;
			}
			set {
				if ((_ssAttendanceCompleted!=value) || OptimizedAttributes[28]) {
					ChangedAttributes[28] = true;
					_ssAttendanceCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSECOORDINATORSUMMARY", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("CourseCoordinatorSummary")]
		private string _ssCourseCoordinatorSummary;
		public string ssCourseCoordinatorSummary {
			get {
				return _ssCourseCoordinatorSummary;
			}
			set {
				if ((_ssCourseCoordinatorSummary!=value) || OptimizedAttributes[29]) {
					ChangedAttributes[29] = true;
					_ssCourseCoordinatorSummary = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSECOORDINATORSUMMARYVISI", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CourseCoordinatorSummaryVisi")]
		private bool _ssCourseCoordinatorSummaryVisi;
		public bool ssCourseCoordinatorSummaryVisi {
			get {
				return _ssCourseCoordinatorSummaryVisi;
			}
			set {
				if ((_ssCourseCoordinatorSummaryVisi!=value) || OptimizedAttributes[30]) {
					ChangedAttributes[30] = true;
					_ssCourseCoordinatorSummaryVisi = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSECOORDINATORUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CourseCoordinatorUpdatedBy")]
		private int _ssCourseCoordinatorUpdatedBy;
		public int ssCourseCoordinatorUpdatedBy {
			get {
				return _ssCourseCoordinatorUpdatedBy;
			}
			set {
				if ((_ssCourseCoordinatorUpdatedBy!=value) || OptimizedAttributes[31]) {
					ChangedAttributes[31] = true;
					_ssCourseCoordinatorUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSECOORDINATORUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CourseCoordinatorUpdatedOn")]
		private DateTime _ssCourseCoordinatorUpdatedOn;
		public DateTime ssCourseCoordinatorUpdatedOn {
			get {
				return _ssCourseCoordinatorUpdatedOn;
			}
			set {
				if ((_ssCourseCoordinatorUpdatedOn!=value) || OptimizedAttributes[32]) {
					ChangedAttributes[32] = true;
					_ssCourseCoordinatorUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSECOORDINATORCOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CourseCoordinatorCompleted")]
		private bool _ssCourseCoordinatorCompleted;
		public bool ssCourseCoordinatorCompleted {
			get {
				return _ssCourseCoordinatorCompleted;
			}
			set {
				if ((_ssCourseCoordinatorCompleted!=value) || OptimizedAttributes[33]) {
					ChangedAttributes[33] = true;
					_ssCourseCoordinatorCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDYPROGRAMMEOVERVIEW", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("StudyProgrammeOverview")]
		private string _ssStudyProgrammeOverview;
		public string ssStudyProgrammeOverview {
			get {
				return _ssStudyProgrammeOverview;
			}
			set {
				if ((_ssStudyProgrammeOverview!=value) || OptimizedAttributes[34]) {
					ChangedAttributes[34] = true;
					_ssStudyProgrammeOverview = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDYPROGRAMMEOVERVIEWVISIBL", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("StudyProgrammeOverviewVisibl")]
		private bool _ssStudyProgrammeOverviewVisibl;
		public bool ssStudyProgrammeOverviewVisibl {
			get {
				return _ssStudyProgrammeOverviewVisibl;
			}
			set {
				if ((_ssStudyProgrammeOverviewVisibl!=value) || OptimizedAttributes[35]) {
					ChangedAttributes[35] = true;
					_ssStudyProgrammeOverviewVisibl = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDYPROGRAMMEUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudyProgrammeUpdatedBy")]
		private int _ssStudyProgrammeUpdatedBy;
		public int ssStudyProgrammeUpdatedBy {
			get {
				return _ssStudyProgrammeUpdatedBy;
			}
			set {
				if ((_ssStudyProgrammeUpdatedBy!=value) || OptimizedAttributes[36]) {
					ChangedAttributes[36] = true;
					_ssStudyProgrammeUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDYPROGRAMMEUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("StudyProgrammeUpdatedOn")]
		private DateTime _ssStudyProgrammeUpdatedOn;
		public DateTime ssStudyProgrammeUpdatedOn {
			get {
				return _ssStudyProgrammeUpdatedOn;
			}
			set {
				if ((_ssStudyProgrammeUpdatedOn!=value) || OptimizedAttributes[37]) {
					ChangedAttributes[37] = true;
					_ssStudyProgrammeUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDYPROGRAMMECOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("StudyProgrammeCompleted")]
		private bool _ssStudyProgrammeCompleted;
		public bool ssStudyProgrammeCompleted {
			get {
				return _ssStudyProgrammeCompleted;
			}
			set {
				if ((_ssStudyProgrammeCompleted!=value) || OptimizedAttributes[38]) {
					ChangedAttributes[38] = true;
					_ssStudyProgrammeCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EMPLOYABILITY", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Employability")]
		private string _ssEmployability;
		public string ssEmployability {
			get {
				return _ssEmployability;
			}
			set {
				if ((_ssEmployability!=value) || OptimizedAttributes[39]) {
					ChangedAttributes[39] = true;
					_ssEmployability = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EMPLOYABILITYVISIBLE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("EmployabilityVisible")]
		private bool _ssEmployabilityVisible;
		public bool ssEmployabilityVisible {
			get {
				return _ssEmployabilityVisible;
			}
			set {
				if ((_ssEmployabilityVisible!=value) || OptimizedAttributes[40]) {
					ChangedAttributes[40] = true;
					_ssEmployabilityVisible = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EMPLOYABILITYUPDATESDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("EmployabilityUpdatesdBy")]
		private int _ssEmployabilityUpdatesdBy;
		public int ssEmployabilityUpdatesdBy {
			get {
				return _ssEmployabilityUpdatesdBy;
			}
			set {
				if ((_ssEmployabilityUpdatesdBy!=value) || OptimizedAttributes[41]) {
					ChangedAttributes[41] = true;
					_ssEmployabilityUpdatesdBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EMPLOYABILITYUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("EmployabilityUpdatedOn")]
		private DateTime _ssEmployabilityUpdatedOn;
		public DateTime ssEmployabilityUpdatedOn {
			get {
				return _ssEmployabilityUpdatedOn;
			}
			set {
				if ((_ssEmployabilityUpdatedOn!=value) || OptimizedAttributes[42]) {
					ChangedAttributes[42] = true;
					_ssEmployabilityUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EMPLOYABILITYCOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("EmployabilityCompleted")]
		private bool _ssEmployabilityCompleted;
		public bool ssEmployabilityCompleted {
			get {
				return _ssEmployabilityCompleted;
			}
			set {
				if ((_ssEmployabilityCompleted!=value) || OptimizedAttributes[43]) {
					ChangedAttributes[43] = true;
					_ssEmployabilityCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("WORKEXPERIENCE", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("WorkExperience")]
		private string _ssWorkExperience;
		public string ssWorkExperience {
			get {
				return _ssWorkExperience;
			}
			set {
				if ((_ssWorkExperience!=value) || OptimizedAttributes[44]) {
					ChangedAttributes[44] = true;
					_ssWorkExperience = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("WORKEXPERIENCEVISIBLE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("WorkExperienceVisible")]
		private bool _ssWorkExperienceVisible;
		public bool ssWorkExperienceVisible {
			get {
				return _ssWorkExperienceVisible;
			}
			set {
				if ((_ssWorkExperienceVisible!=value) || OptimizedAttributes[45]) {
					ChangedAttributes[45] = true;
					_ssWorkExperienceVisible = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("WORKEXPERIENCEUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("WorkExperienceUpdatedBy")]
		private int _ssWorkExperienceUpdatedBy;
		public int ssWorkExperienceUpdatedBy {
			get {
				return _ssWorkExperienceUpdatedBy;
			}
			set {
				if ((_ssWorkExperienceUpdatedBy!=value) || OptimizedAttributes[46]) {
					ChangedAttributes[46] = true;
					_ssWorkExperienceUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("WORKEXPERIENCEUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("WorkExperienceUpdatedOn")]
		private DateTime _ssWorkExperienceUpdatedOn;
		public DateTime ssWorkExperienceUpdatedOn {
			get {
				return _ssWorkExperienceUpdatedOn;
			}
			set {
				if ((_ssWorkExperienceUpdatedOn!=value) || OptimizedAttributes[47]) {
					ChangedAttributes[47] = true;
					_ssWorkExperienceUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("WORKEXPERIENCECOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("WorkExperienceCompleted")]
		private bool _ssWorkExperienceCompleted;
		public bool ssWorkExperienceCompleted {
			get {
				return _ssWorkExperienceCompleted;
			}
			set {
				if ((_ssWorkExperienceCompleted!=value) || OptimizedAttributes[48]) {
					ChangedAttributes[48] = true;
					_ssWorkExperienceCompleted = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENProgressReportSectionEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(49, true);
			OptimizedAttributes = new BitArray(49, false);
			_ssId = 0;
			_ssGroup = 0;
			_ssCreatedBy = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCourseOutline = "";
			_ssCourseOutlineVisible = false;
			_ssCourseOutlineUpdatedBy = 0;
			_ssCourseOutlineUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCourseOutlineCompleted = false;
			_ssKeyStrengths = "";
			_ssKeyStrengthsVisible = false;
			_ssKeyStrengthsUpdatedBy = 0;
			_ssKeyStrengthsUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssKeyStrengthsCompleted = false;
			_ssAreasForDevelopment = "";
			_ssAreasForDevelopmentVisible = false;
			_ssAreasForDevelopmentUpdatedBy = 0;
			_ssAreasForDevelopmentUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssAreasForDevelopmentCompleted = false;
			_ssPredictedOutcome = "";
			_ssPredictedOutcomeVisible = false;
			_ssPredictedOutcomeUpdatedBy = 0;
			_ssPredictedOutcomeUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssPredictedOutcomeCompleted = false;
			_ssAttendance = "";
			_ssAttendanceVisible = false;
			_ssAttendanceUpdatedBy = 0;
			_ssAttendanceUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssAttendanceCompleted = false;
			_ssCourseCoordinatorSummary = "";
			_ssCourseCoordinatorSummaryVisi = false;
			_ssCourseCoordinatorUpdatedBy = 0;
			_ssCourseCoordinatorUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCourseCoordinatorCompleted = false;
			_ssStudyProgrammeOverview = "";
			_ssStudyProgrammeOverviewVisibl = false;
			_ssStudyProgrammeUpdatedBy = 0;
			_ssStudyProgrammeUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStudyProgrammeCompleted = false;
			_ssEmployability = "";
			_ssEmployabilityVisible = false;
			_ssEmployabilityUpdatesdBy = 0;
			_ssEmployabilityUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssEmployabilityCompleted = false;
			_ssWorkExperience = "";
			_ssWorkExperienceVisible = false;
			_ssWorkExperienceUpdatedBy = 0;
			_ssWorkExperienceUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssWorkExperienceCompleted = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "ProgressReportSection.Id", 0);
			ssGroup = r.ReadEntityReference(index++, "ProgressReportSection.Group", 0);
			ssCreatedBy = r.ReadEntityReference(index++, "ProgressReportSection.CreatedBy", 0);
			ssCreatedOn = r.ReadDateTime(index++, "ProgressReportSection.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCourseOutline = r.ReadText(index++, "ProgressReportSection.CourseOutline", "");
			ssCourseOutlineVisible = r.ReadBoolean(index++, "ProgressReportSection.CourseOutlineVisible", false);
			ssCourseOutlineUpdatedBy = r.ReadEntityReference(index++, "ProgressReportSection.CourseOutlineUpdatedBy", 0);
			ssCourseOutlineUpdatedOn = r.ReadDateTime(index++, "ProgressReportSection.CourseOutlineUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCourseOutlineCompleted = r.ReadBoolean(index++, "ProgressReportSection.CourseOutlineCompleted", false);
			ssKeyStrengths = r.ReadText(index++, "ProgressReportSection.KeyStrengths", "");
			ssKeyStrengthsVisible = r.ReadBoolean(index++, "ProgressReportSection.KeyStrengthsVisible", false);
			ssKeyStrengthsUpdatedBy = r.ReadEntityReference(index++, "ProgressReportSection.KeyStrengthsUpdatedBy", 0);
			ssKeyStrengthsUpdatedOn = r.ReadDateTime(index++, "ProgressReportSection.KeyStrengthsUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssKeyStrengthsCompleted = r.ReadBoolean(index++, "ProgressReportSection.KeyStrengthsCompleted", false);
			ssAreasForDevelopment = r.ReadText(index++, "ProgressReportSection.AreasForDevelopment", "");
			ssAreasForDevelopmentVisible = r.ReadBoolean(index++, "ProgressReportSection.AreasForDevelopmentVisible", false);
			ssAreasForDevelopmentUpdatedBy = r.ReadEntityReference(index++, "ProgressReportSection.AreasForDevelopmentUpdatedBy", 0);
			ssAreasForDevelopmentUpdatedOn = r.ReadDateTime(index++, "ProgressReportSection.AreasForDevelopmentUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssAreasForDevelopmentCompleted = r.ReadBoolean(index++, "ProgressReportSection.AreasForDevelopmentCompleted", false);
			ssPredictedOutcome = r.ReadText(index++, "ProgressReportSection.PredictedOutcome", "");
			ssPredictedOutcomeVisible = r.ReadBoolean(index++, "ProgressReportSection.PredictedOutcomeVisible", false);
			ssPredictedOutcomeUpdatedBy = r.ReadEntityReference(index++, "ProgressReportSection.PredictedOutcomeUpdatedBy", 0);
			ssPredictedOutcomeUpdatedOn = r.ReadDateTime(index++, "ProgressReportSection.PredictedOutcomeUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssPredictedOutcomeCompleted = r.ReadBoolean(index++, "ProgressReportSection.PredictedOutcomeCompleted", false);
			ssAttendance = r.ReadText(index++, "ProgressReportSection.Attendance", "");
			ssAttendanceVisible = r.ReadBoolean(index++, "ProgressReportSection.AttendanceVisible", false);
			ssAttendanceUpdatedBy = r.ReadEntityReference(index++, "ProgressReportSection.AttendanceUpdatedBy", 0);
			ssAttendanceUpdatedOn = r.ReadDateTime(index++, "ProgressReportSection.AttendanceUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssAttendanceCompleted = r.ReadBoolean(index++, "ProgressReportSection.AttendanceCompleted", false);
			ssCourseCoordinatorSummary = r.ReadText(index++, "ProgressReportSection.CourseCoordinatorSummary", "");
			ssCourseCoordinatorSummaryVisi = r.ReadBoolean(index++, "ProgressReportSection.CourseCoordinatorSummaryVisi", false);
			ssCourseCoordinatorUpdatedBy = r.ReadEntityReference(index++, "ProgressReportSection.CourseCoordinatorUpdatedBy", 0);
			ssCourseCoordinatorUpdatedOn = r.ReadDateTime(index++, "ProgressReportSection.CourseCoordinatorUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCourseCoordinatorCompleted = r.ReadBoolean(index++, "ProgressReportSection.CourseCoordinatorCompleted", false);
			ssStudyProgrammeOverview = r.ReadText(index++, "ProgressReportSection.StudyProgrammeOverview", "");
			ssStudyProgrammeOverviewVisibl = r.ReadBoolean(index++, "ProgressReportSection.StudyProgrammeOverviewVisibl", false);
			ssStudyProgrammeUpdatedBy = r.ReadEntityReference(index++, "ProgressReportSection.StudyProgrammeUpdatedBy", 0);
			ssStudyProgrammeUpdatedOn = r.ReadDateTime(index++, "ProgressReportSection.StudyProgrammeUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudyProgrammeCompleted = r.ReadBoolean(index++, "ProgressReportSection.StudyProgrammeCompleted", false);
			ssEmployability = r.ReadText(index++, "ProgressReportSection.Employability", "");
			ssEmployabilityVisible = r.ReadBoolean(index++, "ProgressReportSection.EmployabilityVisible", false);
			ssEmployabilityUpdatesdBy = r.ReadEntityReference(index++, "ProgressReportSection.EmployabilityUpdatesdBy", 0);
			ssEmployabilityUpdatedOn = r.ReadDateTime(index++, "ProgressReportSection.EmployabilityUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssEmployabilityCompleted = r.ReadBoolean(index++, "ProgressReportSection.EmployabilityCompleted", false);
			ssWorkExperience = r.ReadText(index++, "ProgressReportSection.WorkExperience", "");
			ssWorkExperienceVisible = r.ReadBoolean(index++, "ProgressReportSection.WorkExperienceVisible", false);
			ssWorkExperienceUpdatedBy = r.ReadEntityReference(index++, "ProgressReportSection.WorkExperienceUpdatedBy", 0);
			ssWorkExperienceUpdatedOn = r.ReadDateTime(index++, "ProgressReportSection.WorkExperienceUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssWorkExperienceCompleted = r.ReadBoolean(index++, "ProgressReportSection.WorkExperienceCompleted", false);
			ChangedAttributes = new BitArray(49, false);
			OptimizedAttributes = new BitArray(49, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENProgressReportSectionEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENProgressReportSectionEntityRecord a, ENProgressReportSectionEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssGroup != b.ssGroup) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			if (a.ssCourseOutline != b.ssCourseOutline) return false;
			if (a.ssCourseOutlineVisible != b.ssCourseOutlineVisible) return false;
			if (a.ssCourseOutlineUpdatedBy != b.ssCourseOutlineUpdatedBy) return false;
			if (a.ssCourseOutlineUpdatedOn != b.ssCourseOutlineUpdatedOn) return false;
			if (a.ssCourseOutlineCompleted != b.ssCourseOutlineCompleted) return false;
			if (a.ssKeyStrengths != b.ssKeyStrengths) return false;
			if (a.ssKeyStrengthsVisible != b.ssKeyStrengthsVisible) return false;
			if (a.ssKeyStrengthsUpdatedBy != b.ssKeyStrengthsUpdatedBy) return false;
			if (a.ssKeyStrengthsUpdatedOn != b.ssKeyStrengthsUpdatedOn) return false;
			if (a.ssKeyStrengthsCompleted != b.ssKeyStrengthsCompleted) return false;
			if (a.ssAreasForDevelopment != b.ssAreasForDevelopment) return false;
			if (a.ssAreasForDevelopmentVisible != b.ssAreasForDevelopmentVisible) return false;
			if (a.ssAreasForDevelopmentUpdatedBy != b.ssAreasForDevelopmentUpdatedBy) return false;
			if (a.ssAreasForDevelopmentUpdatedOn != b.ssAreasForDevelopmentUpdatedOn) return false;
			if (a.ssAreasForDevelopmentCompleted != b.ssAreasForDevelopmentCompleted) return false;
			if (a.ssPredictedOutcome != b.ssPredictedOutcome) return false;
			if (a.ssPredictedOutcomeVisible != b.ssPredictedOutcomeVisible) return false;
			if (a.ssPredictedOutcomeUpdatedBy != b.ssPredictedOutcomeUpdatedBy) return false;
			if (a.ssPredictedOutcomeUpdatedOn != b.ssPredictedOutcomeUpdatedOn) return false;
			if (a.ssPredictedOutcomeCompleted != b.ssPredictedOutcomeCompleted) return false;
			if (a.ssAttendance != b.ssAttendance) return false;
			if (a.ssAttendanceVisible != b.ssAttendanceVisible) return false;
			if (a.ssAttendanceUpdatedBy != b.ssAttendanceUpdatedBy) return false;
			if (a.ssAttendanceUpdatedOn != b.ssAttendanceUpdatedOn) return false;
			if (a.ssAttendanceCompleted != b.ssAttendanceCompleted) return false;
			if (a.ssCourseCoordinatorSummary != b.ssCourseCoordinatorSummary) return false;
			if (a.ssCourseCoordinatorSummaryVisi != b.ssCourseCoordinatorSummaryVisi) return false;
			if (a.ssCourseCoordinatorUpdatedBy != b.ssCourseCoordinatorUpdatedBy) return false;
			if (a.ssCourseCoordinatorUpdatedOn != b.ssCourseCoordinatorUpdatedOn) return false;
			if (a.ssCourseCoordinatorCompleted != b.ssCourseCoordinatorCompleted) return false;
			if (a.ssStudyProgrammeOverview != b.ssStudyProgrammeOverview) return false;
			if (a.ssStudyProgrammeOverviewVisibl != b.ssStudyProgrammeOverviewVisibl) return false;
			if (a.ssStudyProgrammeUpdatedBy != b.ssStudyProgrammeUpdatedBy) return false;
			if (a.ssStudyProgrammeUpdatedOn != b.ssStudyProgrammeUpdatedOn) return false;
			if (a.ssStudyProgrammeCompleted != b.ssStudyProgrammeCompleted) return false;
			if (a.ssEmployability != b.ssEmployability) return false;
			if (a.ssEmployabilityVisible != b.ssEmployabilityVisible) return false;
			if (a.ssEmployabilityUpdatesdBy != b.ssEmployabilityUpdatesdBy) return false;
			if (a.ssEmployabilityUpdatedOn != b.ssEmployabilityUpdatedOn) return false;
			if (a.ssEmployabilityCompleted != b.ssEmployabilityCompleted) return false;
			if (a.ssWorkExperience != b.ssWorkExperience) return false;
			if (a.ssWorkExperienceVisible != b.ssWorkExperienceVisible) return false;
			if (a.ssWorkExperienceUpdatedBy != b.ssWorkExperienceUpdatedBy) return false;
			if (a.ssWorkExperienceUpdatedOn != b.ssWorkExperienceUpdatedOn) return false;
			if (a.ssWorkExperienceCompleted != b.ssWorkExperienceCompleted) return false;
			return true;
		}

		public static bool operator != (ENProgressReportSectionEntityRecord a, ENProgressReportSectionEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENProgressReportSectionEntityRecord)) return false;
			return (this == (ENProgressReportSectionEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssGroup.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				^ ssCourseOutline.GetHashCode()
				^ ssCourseOutlineVisible.GetHashCode()
				^ ssCourseOutlineUpdatedBy.GetHashCode()
				^ ssCourseOutlineUpdatedOn.GetHashCode()
				^ ssCourseOutlineCompleted.GetHashCode()
				^ ssKeyStrengths.GetHashCode()
				^ ssKeyStrengthsVisible.GetHashCode()
				^ ssKeyStrengthsUpdatedBy.GetHashCode()
				^ ssKeyStrengthsUpdatedOn.GetHashCode()
				^ ssKeyStrengthsCompleted.GetHashCode()
				^ ssAreasForDevelopment.GetHashCode()
				^ ssAreasForDevelopmentVisible.GetHashCode()
				^ ssAreasForDevelopmentUpdatedBy.GetHashCode()
				^ ssAreasForDevelopmentUpdatedOn.GetHashCode()
				^ ssAreasForDevelopmentCompleted.GetHashCode()
				^ ssPredictedOutcome.GetHashCode()
				^ ssPredictedOutcomeVisible.GetHashCode()
				^ ssPredictedOutcomeUpdatedBy.GetHashCode()
				^ ssPredictedOutcomeUpdatedOn.GetHashCode()
				^ ssPredictedOutcomeCompleted.GetHashCode()
				^ ssAttendance.GetHashCode()
				^ ssAttendanceVisible.GetHashCode()
				^ ssAttendanceUpdatedBy.GetHashCode()
				^ ssAttendanceUpdatedOn.GetHashCode()
				^ ssAttendanceCompleted.GetHashCode()
				^ ssCourseCoordinatorSummary.GetHashCode()
				^ ssCourseCoordinatorSummaryVisi.GetHashCode()
				^ ssCourseCoordinatorUpdatedBy.GetHashCode()
				^ ssCourseCoordinatorUpdatedOn.GetHashCode()
				^ ssCourseCoordinatorCompleted.GetHashCode()
				^ ssStudyProgrammeOverview.GetHashCode()
				^ ssStudyProgrammeOverviewVisibl.GetHashCode()
				^ ssStudyProgrammeUpdatedBy.GetHashCode()
				^ ssStudyProgrammeUpdatedOn.GetHashCode()
				^ ssStudyProgrammeCompleted.GetHashCode()
				^ ssEmployability.GetHashCode()
				^ ssEmployabilityVisible.GetHashCode()
				^ ssEmployabilityUpdatesdBy.GetHashCode()
				^ ssEmployabilityUpdatedOn.GetHashCode()
				^ ssEmployabilityCompleted.GetHashCode()
				^ ssWorkExperience.GetHashCode()
				^ ssWorkExperienceVisible.GetHashCode()
				^ ssWorkExperienceUpdatedBy.GetHashCode()
				^ ssWorkExperienceUpdatedOn.GetHashCode()
				^ ssWorkExperienceCompleted.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENProgressReportSectionEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(49, true);
			OptimizedAttributes = new BitArray(49, false);
			_ssId = 0;
			_ssGroup = 0;
			_ssCreatedBy = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCourseOutline = "";
			_ssCourseOutlineVisible = false;
			_ssCourseOutlineUpdatedBy = 0;
			_ssCourseOutlineUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCourseOutlineCompleted = false;
			_ssKeyStrengths = "";
			_ssKeyStrengthsVisible = false;
			_ssKeyStrengthsUpdatedBy = 0;
			_ssKeyStrengthsUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssKeyStrengthsCompleted = false;
			_ssAreasForDevelopment = "";
			_ssAreasForDevelopmentVisible = false;
			_ssAreasForDevelopmentUpdatedBy = 0;
			_ssAreasForDevelopmentUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssAreasForDevelopmentCompleted = false;
			_ssPredictedOutcome = "";
			_ssPredictedOutcomeVisible = false;
			_ssPredictedOutcomeUpdatedBy = 0;
			_ssPredictedOutcomeUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssPredictedOutcomeCompleted = false;
			_ssAttendance = "";
			_ssAttendanceVisible = false;
			_ssAttendanceUpdatedBy = 0;
			_ssAttendanceUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssAttendanceCompleted = false;
			_ssCourseCoordinatorSummary = "";
			_ssCourseCoordinatorSummaryVisi = false;
			_ssCourseCoordinatorUpdatedBy = 0;
			_ssCourseCoordinatorUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCourseCoordinatorCompleted = false;
			_ssStudyProgrammeOverview = "";
			_ssStudyProgrammeOverviewVisibl = false;
			_ssStudyProgrammeUpdatedBy = 0;
			_ssStudyProgrammeUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStudyProgrammeCompleted = false;
			_ssEmployability = "";
			_ssEmployabilityVisible = false;
			_ssEmployabilityUpdatesdBy = 0;
			_ssEmployabilityUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssEmployabilityCompleted = false;
			_ssWorkExperience = "";
			_ssWorkExperienceVisible = false;
			_ssWorkExperienceUpdatedBy = 0;
			_ssWorkExperienceUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssWorkExperienceCompleted = false;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssGroup = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssCreatedOn = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCourseOutline = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCourseOutlineVisible = (bool) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssCourseOutlineUpdatedBy = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssCourseOutlineUpdatedOn = (DateTime) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssCourseOutlineCompleted = (bool) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssKeyStrengths = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssKeyStrengthsVisible = (bool) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssKeyStrengthsUpdatedBy = (int) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssKeyStrengthsUpdatedOn = (DateTime) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssKeyStrengthsCompleted = (bool) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssAreasForDevelopment = (string) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssAreasForDevelopmentVisible = (bool) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssAreasForDevelopmentUpdatedBy = (int) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			_ssAreasForDevelopmentUpdatedOn = (DateTime) info.GetValue(fields[17] .Name, fields[17] .FieldType);
			if (fields[18] .FieldType.IsSerializable)
			_ssAreasForDevelopmentCompleted = (bool) info.GetValue(fields[18] .Name, fields[18] .FieldType);
			if (fields[19] .FieldType.IsSerializable)
			_ssPredictedOutcome = (string) info.GetValue(fields[19] .Name, fields[19] .FieldType);
			if (fields[20] .FieldType.IsSerializable)
			_ssPredictedOutcomeVisible = (bool) info.GetValue(fields[20] .Name, fields[20] .FieldType);
			if (fields[21] .FieldType.IsSerializable)
			_ssPredictedOutcomeUpdatedBy = (int) info.GetValue(fields[21] .Name, fields[21] .FieldType);
			if (fields[22] .FieldType.IsSerializable)
			_ssPredictedOutcomeUpdatedOn = (DateTime) info.GetValue(fields[22] .Name, fields[22] .FieldType);
			if (fields[23] .FieldType.IsSerializable)
			_ssPredictedOutcomeCompleted = (bool) info.GetValue(fields[23] .Name, fields[23] .FieldType);
			if (fields[24] .FieldType.IsSerializable)
			_ssAttendance = (string) info.GetValue(fields[24] .Name, fields[24] .FieldType);
			if (fields[25] .FieldType.IsSerializable)
			_ssAttendanceVisible = (bool) info.GetValue(fields[25] .Name, fields[25] .FieldType);
			if (fields[26] .FieldType.IsSerializable)
			_ssAttendanceUpdatedBy = (int) info.GetValue(fields[26] .Name, fields[26] .FieldType);
			if (fields[27] .FieldType.IsSerializable)
			_ssAttendanceUpdatedOn = (DateTime) info.GetValue(fields[27] .Name, fields[27] .FieldType);
			if (fields[28] .FieldType.IsSerializable)
			_ssAttendanceCompleted = (bool) info.GetValue(fields[28] .Name, fields[28] .FieldType);
			if (fields[29] .FieldType.IsSerializable)
			_ssCourseCoordinatorSummary = (string) info.GetValue(fields[29] .Name, fields[29] .FieldType);
			if (fields[30] .FieldType.IsSerializable)
			_ssCourseCoordinatorSummaryVisi = (bool) info.GetValue(fields[30] .Name, fields[30] .FieldType);
			if (fields[31] .FieldType.IsSerializable)
			_ssCourseCoordinatorUpdatedBy = (int) info.GetValue(fields[31] .Name, fields[31] .FieldType);
			if (fields[32] .FieldType.IsSerializable)
			_ssCourseCoordinatorUpdatedOn = (DateTime) info.GetValue(fields[32] .Name, fields[32] .FieldType);
			if (fields[33] .FieldType.IsSerializable)
			_ssCourseCoordinatorCompleted = (bool) info.GetValue(fields[33] .Name, fields[33] .FieldType);
			if (fields[34] .FieldType.IsSerializable)
			_ssStudyProgrammeOverview = (string) info.GetValue(fields[34] .Name, fields[34] .FieldType);
			if (fields[35] .FieldType.IsSerializable)
			_ssStudyProgrammeOverviewVisibl = (bool) info.GetValue(fields[35] .Name, fields[35] .FieldType);
			if (fields[36] .FieldType.IsSerializable)
			_ssStudyProgrammeUpdatedBy = (int) info.GetValue(fields[36] .Name, fields[36] .FieldType);
			if (fields[37] .FieldType.IsSerializable)
			_ssStudyProgrammeUpdatedOn = (DateTime) info.GetValue(fields[37] .Name, fields[37] .FieldType);
			if (fields[38] .FieldType.IsSerializable)
			_ssStudyProgrammeCompleted = (bool) info.GetValue(fields[38] .Name, fields[38] .FieldType);
			if (fields[39] .FieldType.IsSerializable)
			_ssEmployability = (string) info.GetValue(fields[39] .Name, fields[39] .FieldType);
			if (fields[40] .FieldType.IsSerializable)
			_ssEmployabilityVisible = (bool) info.GetValue(fields[40] .Name, fields[40] .FieldType);
			if (fields[41] .FieldType.IsSerializable)
			_ssEmployabilityUpdatesdBy = (int) info.GetValue(fields[41] .Name, fields[41] .FieldType);
			if (fields[42] .FieldType.IsSerializable)
			_ssEmployabilityUpdatedOn = (DateTime) info.GetValue(fields[42] .Name, fields[42] .FieldType);
			if (fields[43] .FieldType.IsSerializable)
			_ssEmployabilityCompleted = (bool) info.GetValue(fields[43] .Name, fields[43] .FieldType);
			if (fields[44] .FieldType.IsSerializable)
			_ssWorkExperience = (string) info.GetValue(fields[44] .Name, fields[44] .FieldType);
			if (fields[45] .FieldType.IsSerializable)
			_ssWorkExperienceVisible = (bool) info.GetValue(fields[45] .Name, fields[45] .FieldType);
			if (fields[46] .FieldType.IsSerializable)
			_ssWorkExperienceUpdatedBy = (int) info.GetValue(fields[46] .Name, fields[46] .FieldType);
			if (fields[47] .FieldType.IsSerializable)
			_ssWorkExperienceUpdatedOn = (DateTime) info.GetValue(fields[47] .Name, fields[47] .FieldType);
			if (fields[48] .FieldType.IsSerializable)
			_ssWorkExperienceCompleted = (bool) info.GetValue(fields[48] .Name, fields[48] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENProgressReportSectionEntityRecord Duplicate() {
			ENProgressReportSectionEntityRecord t;
			t._ssId = this._ssId;
			t._ssGroup = this._ssGroup;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssCreatedOn = this._ssCreatedOn;
			t._ssCourseOutline = this._ssCourseOutline;
			t._ssCourseOutlineVisible = this._ssCourseOutlineVisible;
			t._ssCourseOutlineUpdatedBy = this._ssCourseOutlineUpdatedBy;
			t._ssCourseOutlineUpdatedOn = this._ssCourseOutlineUpdatedOn;
			t._ssCourseOutlineCompleted = this._ssCourseOutlineCompleted;
			t._ssKeyStrengths = this._ssKeyStrengths;
			t._ssKeyStrengthsVisible = this._ssKeyStrengthsVisible;
			t._ssKeyStrengthsUpdatedBy = this._ssKeyStrengthsUpdatedBy;
			t._ssKeyStrengthsUpdatedOn = this._ssKeyStrengthsUpdatedOn;
			t._ssKeyStrengthsCompleted = this._ssKeyStrengthsCompleted;
			t._ssAreasForDevelopment = this._ssAreasForDevelopment;
			t._ssAreasForDevelopmentVisible = this._ssAreasForDevelopmentVisible;
			t._ssAreasForDevelopmentUpdatedBy = this._ssAreasForDevelopmentUpdatedBy;
			t._ssAreasForDevelopmentUpdatedOn = this._ssAreasForDevelopmentUpdatedOn;
			t._ssAreasForDevelopmentCompleted = this._ssAreasForDevelopmentCompleted;
			t._ssPredictedOutcome = this._ssPredictedOutcome;
			t._ssPredictedOutcomeVisible = this._ssPredictedOutcomeVisible;
			t._ssPredictedOutcomeUpdatedBy = this._ssPredictedOutcomeUpdatedBy;
			t._ssPredictedOutcomeUpdatedOn = this._ssPredictedOutcomeUpdatedOn;
			t._ssPredictedOutcomeCompleted = this._ssPredictedOutcomeCompleted;
			t._ssAttendance = this._ssAttendance;
			t._ssAttendanceVisible = this._ssAttendanceVisible;
			t._ssAttendanceUpdatedBy = this._ssAttendanceUpdatedBy;
			t._ssAttendanceUpdatedOn = this._ssAttendanceUpdatedOn;
			t._ssAttendanceCompleted = this._ssAttendanceCompleted;
			t._ssCourseCoordinatorSummary = this._ssCourseCoordinatorSummary;
			t._ssCourseCoordinatorSummaryVisi = this._ssCourseCoordinatorSummaryVisi;
			t._ssCourseCoordinatorUpdatedBy = this._ssCourseCoordinatorUpdatedBy;
			t._ssCourseCoordinatorUpdatedOn = this._ssCourseCoordinatorUpdatedOn;
			t._ssCourseCoordinatorCompleted = this._ssCourseCoordinatorCompleted;
			t._ssStudyProgrammeOverview = this._ssStudyProgrammeOverview;
			t._ssStudyProgrammeOverviewVisibl = this._ssStudyProgrammeOverviewVisibl;
			t._ssStudyProgrammeUpdatedBy = this._ssStudyProgrammeUpdatedBy;
			t._ssStudyProgrammeUpdatedOn = this._ssStudyProgrammeUpdatedOn;
			t._ssStudyProgrammeCompleted = this._ssStudyProgrammeCompleted;
			t._ssEmployability = this._ssEmployability;
			t._ssEmployabilityVisible = this._ssEmployabilityVisible;
			t._ssEmployabilityUpdatesdBy = this._ssEmployabilityUpdatesdBy;
			t._ssEmployabilityUpdatedOn = this._ssEmployabilityUpdatedOn;
			t._ssEmployabilityCompleted = this._ssEmployabilityCompleted;
			t._ssWorkExperience = this._ssWorkExperience;
			t._ssWorkExperienceVisible = this._ssWorkExperienceVisible;
			t._ssWorkExperienceUpdatedBy = this._ssWorkExperienceUpdatedBy;
			t._ssWorkExperienceUpdatedOn = this._ssWorkExperienceUpdatedOn;
			t._ssWorkExperienceCompleted = this._ssWorkExperienceCompleted;
			t.ChangedAttributes = new BitArray(49);
			t.OptimizedAttributes = new BitArray(49);
			for (int i = 0; i < 49; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Group")) VarValue.AppendAttribute(recordElem, "Group", ssGroup, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Group");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseOutline")) VarValue.AppendAttribute(recordElem, "CourseOutline", ssCourseOutline, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CourseOutline");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseOutlineVisible")) VarValue.AppendAttribute(recordElem, "CourseOutlineVisible", ssCourseOutlineVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "CourseOutlineVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseOutlineUpdatedBy")) VarValue.AppendAttribute(recordElem, "CourseOutlineUpdatedBy", ssCourseOutlineUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CourseOutlineUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseOutlineUpdatedOn")) VarValue.AppendAttribute(recordElem, "CourseOutlineUpdatedOn", ssCourseOutlineUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CourseOutlineUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseOutlineCompleted")) VarValue.AppendAttribute(recordElem, "CourseOutlineCompleted", ssCourseOutlineCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "CourseOutlineCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".KeyStrengths")) VarValue.AppendAttribute(recordElem, "KeyStrengths", ssKeyStrengths, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "KeyStrengths");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".KeyStrengthsVisible")) VarValue.AppendAttribute(recordElem, "KeyStrengthsVisible", ssKeyStrengthsVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "KeyStrengthsVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".KeyStrengthsUpdatedBy")) VarValue.AppendAttribute(recordElem, "KeyStrengthsUpdatedBy", ssKeyStrengthsUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "KeyStrengthsUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".KeyStrengthsUpdatedOn")) VarValue.AppendAttribute(recordElem, "KeyStrengthsUpdatedOn", ssKeyStrengthsUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "KeyStrengthsUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".KeyStrengthsCompleted")) VarValue.AppendAttribute(recordElem, "KeyStrengthsCompleted", ssKeyStrengthsCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "KeyStrengthsCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AreasForDevelopment")) VarValue.AppendAttribute(recordElem, "AreasForDevelopment", ssAreasForDevelopment, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AreasForDevelopment");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AreasForDevelopmentVisible")) VarValue.AppendAttribute(recordElem, "AreasForDevelopmentVisible", ssAreasForDevelopmentVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AreasForDevelopmentVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AreasForDevelopmentUpdatedBy")) VarValue.AppendAttribute(recordElem, "AreasForDevelopmentUpdatedBy", ssAreasForDevelopmentUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "AreasForDevelopmentUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AreasForDevelopmentUpdatedOn")) VarValue.AppendAttribute(recordElem, "AreasForDevelopmentUpdatedOn", ssAreasForDevelopmentUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "AreasForDevelopmentUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AreasForDevelopmentCompleted")) VarValue.AppendAttribute(recordElem, "AreasForDevelopmentCompleted", ssAreasForDevelopmentCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AreasForDevelopmentCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PredictedOutcome")) VarValue.AppendAttribute(recordElem, "PredictedOutcome", ssPredictedOutcome, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PredictedOutcome");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PredictedOutcomeVisible")) VarValue.AppendAttribute(recordElem, "PredictedOutcomeVisible", ssPredictedOutcomeVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "PredictedOutcomeVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PredictedOutcomeUpdatedBy")) VarValue.AppendAttribute(recordElem, "PredictedOutcomeUpdatedBy", ssPredictedOutcomeUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "PredictedOutcomeUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PredictedOutcomeUpdatedOn")) VarValue.AppendAttribute(recordElem, "PredictedOutcomeUpdatedOn", ssPredictedOutcomeUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "PredictedOutcomeUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PredictedOutcomeCompleted")) VarValue.AppendAttribute(recordElem, "PredictedOutcomeCompleted", ssPredictedOutcomeCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "PredictedOutcomeCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Attendance")) VarValue.AppendAttribute(recordElem, "Attendance", ssAttendance, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Attendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AttendanceVisible")) VarValue.AppendAttribute(recordElem, "AttendanceVisible", ssAttendanceVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AttendanceVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AttendanceUpdatedBy")) VarValue.AppendAttribute(recordElem, "AttendanceUpdatedBy", ssAttendanceUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "AttendanceUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AttendanceUpdatedOn")) VarValue.AppendAttribute(recordElem, "AttendanceUpdatedOn", ssAttendanceUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "AttendanceUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AttendanceCompleted")) VarValue.AppendAttribute(recordElem, "AttendanceCompleted", ssAttendanceCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AttendanceCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseCoordinatorSummary")) VarValue.AppendAttribute(recordElem, "CourseCoordinatorSummary", ssCourseCoordinatorSummary, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CourseCoordinatorSummary");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseCoordinatorSummaryVisi")) VarValue.AppendAttribute(recordElem, "CourseCoordinatorSummaryVisi", ssCourseCoordinatorSummaryVisi, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "CourseCoordinatorSummaryVisi");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseCoordinatorUpdatedBy")) VarValue.AppendAttribute(recordElem, "CourseCoordinatorUpdatedBy", ssCourseCoordinatorUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CourseCoordinatorUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseCoordinatorUpdatedOn")) VarValue.AppendAttribute(recordElem, "CourseCoordinatorUpdatedOn", ssCourseCoordinatorUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CourseCoordinatorUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseCoordinatorCompleted")) VarValue.AppendAttribute(recordElem, "CourseCoordinatorCompleted", ssCourseCoordinatorCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "CourseCoordinatorCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudyProgrammeOverview")) VarValue.AppendAttribute(recordElem, "StudyProgrammeOverview", ssStudyProgrammeOverview, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudyProgrammeOverview");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudyProgrammeOverviewVisibl")) VarValue.AppendAttribute(recordElem, "StudyProgrammeOverviewVisibl", ssStudyProgrammeOverviewVisibl, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "StudyProgrammeOverviewVisibl");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudyProgrammeUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudyProgrammeUpdatedBy", ssStudyProgrammeUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudyProgrammeUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudyProgrammeUpdatedOn")) VarValue.AppendAttribute(recordElem, "StudyProgrammeUpdatedOn", ssStudyProgrammeUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "StudyProgrammeUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudyProgrammeCompleted")) VarValue.AppendAttribute(recordElem, "StudyProgrammeCompleted", ssStudyProgrammeCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "StudyProgrammeCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Employability")) VarValue.AppendAttribute(recordElem, "Employability", ssEmployability, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Employability");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EmployabilityVisible")) VarValue.AppendAttribute(recordElem, "EmployabilityVisible", ssEmployabilityVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "EmployabilityVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EmployabilityUpdatesdBy")) VarValue.AppendAttribute(recordElem, "EmployabilityUpdatesdBy", ssEmployabilityUpdatesdBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EmployabilityUpdatesdBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EmployabilityUpdatedOn")) VarValue.AppendAttribute(recordElem, "EmployabilityUpdatedOn", ssEmployabilityUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "EmployabilityUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EmployabilityCompleted")) VarValue.AppendAttribute(recordElem, "EmployabilityCompleted", ssEmployabilityCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "EmployabilityCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".WorkExperience")) VarValue.AppendAttribute(recordElem, "WorkExperience", ssWorkExperience, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "WorkExperience");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".WorkExperienceVisible")) VarValue.AppendAttribute(recordElem, "WorkExperienceVisible", ssWorkExperienceVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "WorkExperienceVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".WorkExperienceUpdatedBy")) VarValue.AppendAttribute(recordElem, "WorkExperienceUpdatedBy", ssWorkExperienceUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "WorkExperienceUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".WorkExperienceUpdatedOn")) VarValue.AppendAttribute(recordElem, "WorkExperienceUpdatedOn", ssWorkExperienceUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "WorkExperienceUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".WorkExperienceCompleted")) VarValue.AppendAttribute(recordElem, "WorkExperienceCompleted", ssWorkExperienceCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "WorkExperienceCompleted");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssGroup; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			} else if (head == "courseoutline") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseOutline")) variable.Value = ssCourseOutline; else variable.Optimized = true;
			} else if (head == "courseoutlinevisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseOutlineVisible")) variable.Value = ssCourseOutlineVisible; else variable.Optimized = true;
			} else if (head == "courseoutlineupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseOutlineUpdatedBy")) variable.Value = ssCourseOutlineUpdatedBy; else variable.Optimized = true;
			} else if (head == "courseoutlineupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseOutlineUpdatedOn")) variable.Value = ssCourseOutlineUpdatedOn; else variable.Optimized = true;
			} else if (head == "courseoutlinecompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseOutlineCompleted")) variable.Value = ssCourseOutlineCompleted; else variable.Optimized = true;
			} else if (head == "keystrengths") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".KeyStrengths")) variable.Value = ssKeyStrengths; else variable.Optimized = true;
			} else if (head == "keystrengthsvisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".KeyStrengthsVisible")) variable.Value = ssKeyStrengthsVisible; else variable.Optimized = true;
			} else if (head == "keystrengthsupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".KeyStrengthsUpdatedBy")) variable.Value = ssKeyStrengthsUpdatedBy; else variable.Optimized = true;
			} else if (head == "keystrengthsupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".KeyStrengthsUpdatedOn")) variable.Value = ssKeyStrengthsUpdatedOn; else variable.Optimized = true;
			} else if (head == "keystrengthscompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".KeyStrengthsCompleted")) variable.Value = ssKeyStrengthsCompleted; else variable.Optimized = true;
			} else if (head == "areasfordevelopment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AreasForDevelopment")) variable.Value = ssAreasForDevelopment; else variable.Optimized = true;
			} else if (head == "areasfordevelopmentvisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AreasForDevelopmentVisible")) variable.Value = ssAreasForDevelopmentVisible; else variable.Optimized = true;
			} else if (head == "areasfordevelopmentupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AreasForDevelopmentUpdatedBy")) variable.Value = ssAreasForDevelopmentUpdatedBy; else variable.Optimized = true;
			} else if (head == "areasfordevelopmentupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AreasForDevelopmentUpdatedOn")) variable.Value = ssAreasForDevelopmentUpdatedOn; else variable.Optimized = true;
			} else if (head == "areasfordevelopmentcompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AreasForDevelopmentCompleted")) variable.Value = ssAreasForDevelopmentCompleted; else variable.Optimized = true;
			} else if (head == "predictedoutcome") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PredictedOutcome")) variable.Value = ssPredictedOutcome; else variable.Optimized = true;
			} else if (head == "predictedoutcomevisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PredictedOutcomeVisible")) variable.Value = ssPredictedOutcomeVisible; else variable.Optimized = true;
			} else if (head == "predictedoutcomeupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PredictedOutcomeUpdatedBy")) variable.Value = ssPredictedOutcomeUpdatedBy; else variable.Optimized = true;
			} else if (head == "predictedoutcomeupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PredictedOutcomeUpdatedOn")) variable.Value = ssPredictedOutcomeUpdatedOn; else variable.Optimized = true;
			} else if (head == "predictedoutcomecompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PredictedOutcomeCompleted")) variable.Value = ssPredictedOutcomeCompleted; else variable.Optimized = true;
			} else if (head == "attendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Attendance")) variable.Value = ssAttendance; else variable.Optimized = true;
			} else if (head == "attendancevisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendanceVisible")) variable.Value = ssAttendanceVisible; else variable.Optimized = true;
			} else if (head == "attendanceupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendanceUpdatedBy")) variable.Value = ssAttendanceUpdatedBy; else variable.Optimized = true;
			} else if (head == "attendanceupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendanceUpdatedOn")) variable.Value = ssAttendanceUpdatedOn; else variable.Optimized = true;
			} else if (head == "attendancecompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendanceCompleted")) variable.Value = ssAttendanceCompleted; else variable.Optimized = true;
			} else if (head == "coursecoordinatorsummary") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseCoordinatorSummary")) variable.Value = ssCourseCoordinatorSummary; else variable.Optimized = true;
			} else if (head == "coursecoordinatorsummaryvisi") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseCoordinatorSummaryVisi")) variable.Value = ssCourseCoordinatorSummaryVisi; else variable.Optimized = true;
			} else if (head == "coursecoordinatorupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseCoordinatorUpdatedBy")) variable.Value = ssCourseCoordinatorUpdatedBy; else variable.Optimized = true;
			} else if (head == "coursecoordinatorupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseCoordinatorUpdatedOn")) variable.Value = ssCourseCoordinatorUpdatedOn; else variable.Optimized = true;
			} else if (head == "coursecoordinatorcompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseCoordinatorCompleted")) variable.Value = ssCourseCoordinatorCompleted; else variable.Optimized = true;
			} else if (head == "studyprogrammeoverview") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudyProgrammeOverview")) variable.Value = ssStudyProgrammeOverview; else variable.Optimized = true;
			} else if (head == "studyprogrammeoverviewvisibl") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudyProgrammeOverviewVisibl")) variable.Value = ssStudyProgrammeOverviewVisibl; else variable.Optimized = true;
			} else if (head == "studyprogrammeupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudyProgrammeUpdatedBy")) variable.Value = ssStudyProgrammeUpdatedBy; else variable.Optimized = true;
			} else if (head == "studyprogrammeupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudyProgrammeUpdatedOn")) variable.Value = ssStudyProgrammeUpdatedOn; else variable.Optimized = true;
			} else if (head == "studyprogrammecompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudyProgrammeCompleted")) variable.Value = ssStudyProgrammeCompleted; else variable.Optimized = true;
			} else if (head == "employability") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Employability")) variable.Value = ssEmployability; else variable.Optimized = true;
			} else if (head == "employabilityvisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EmployabilityVisible")) variable.Value = ssEmployabilityVisible; else variable.Optimized = true;
			} else if (head == "employabilityupdatesdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EmployabilityUpdatesdBy")) variable.Value = ssEmployabilityUpdatesdBy; else variable.Optimized = true;
			} else if (head == "employabilityupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EmployabilityUpdatedOn")) variable.Value = ssEmployabilityUpdatedOn; else variable.Optimized = true;
			} else if (head == "employabilitycompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EmployabilityCompleted")) variable.Value = ssEmployabilityCompleted; else variable.Optimized = true;
			} else if (head == "workexperience") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".WorkExperience")) variable.Value = ssWorkExperience; else variable.Optimized = true;
			} else if (head == "workexperiencevisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".WorkExperienceVisible")) variable.Value = ssWorkExperienceVisible; else variable.Optimized = true;
			} else if (head == "workexperienceupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".WorkExperienceUpdatedBy")) variable.Value = ssWorkExperienceUpdatedBy; else variable.Optimized = true;
			} else if (head == "workexperienceupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".WorkExperienceUpdatedOn")) variable.Value = ssWorkExperienceUpdatedOn; else variable.Optimized = true;
			} else if (head == "workexperiencecompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".WorkExperienceCompleted")) variable.Value = ssWorkExperienceCompleted; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdGroup)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdCreatedOn)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCourseOutline)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCourseOutlineVisible)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdCourseOutlineUpdatedBy)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdCourseOutlineUpdatedOn)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdCourseOutlineCompleted)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdKeyStrengths)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdKeyStrengthsVisible)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdKeyStrengthsUpdatedBy)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdKeyStrengthsUpdatedOn)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdKeyStrengthsCompleted)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdAreasForDevelopment)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdAreasForDevelopmentVisible)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdAreasForDevelopmentUpdatedBy)) {
				return ChangedAttributes[16];
			} else if (key.Equals(IdAreasForDevelopmentUpdatedOn)) {
				return ChangedAttributes[17];
			} else if (key.Equals(IdAreasForDevelopmentCompleted)) {
				return ChangedAttributes[18];
			} else if (key.Equals(IdPredictedOutcome)) {
				return ChangedAttributes[19];
			} else if (key.Equals(IdPredictedOutcomeVisible)) {
				return ChangedAttributes[20];
			} else if (key.Equals(IdPredictedOutcomeUpdatedBy)) {
				return ChangedAttributes[21];
			} else if (key.Equals(IdPredictedOutcomeUpdatedOn)) {
				return ChangedAttributes[22];
			} else if (key.Equals(IdPredictedOutcomeCompleted)) {
				return ChangedAttributes[23];
			} else if (key.Equals(IdAttendance)) {
				return ChangedAttributes[24];
			} else if (key.Equals(IdAttendanceVisible)) {
				return ChangedAttributes[25];
			} else if (key.Equals(IdAttendanceUpdatedBy)) {
				return ChangedAttributes[26];
			} else if (key.Equals(IdAttendanceUpdatedOn)) {
				return ChangedAttributes[27];
			} else if (key.Equals(IdAttendanceCompleted)) {
				return ChangedAttributes[28];
			} else if (key.Equals(IdCourseCoordinatorSummary)) {
				return ChangedAttributes[29];
			} else if (key.Equals(IdCourseCoordinatorSummaryVisi)) {
				return ChangedAttributes[30];
			} else if (key.Equals(IdCourseCoordinatorUpdatedBy)) {
				return ChangedAttributes[31];
			} else if (key.Equals(IdCourseCoordinatorUpdatedOn)) {
				return ChangedAttributes[32];
			} else if (key.Equals(IdCourseCoordinatorCompleted)) {
				return ChangedAttributes[33];
			} else if (key.Equals(IdStudyProgrammeOverview)) {
				return ChangedAttributes[34];
			} else if (key.Equals(IdStudyProgrammeOverviewVisibl)) {
				return ChangedAttributes[35];
			} else if (key.Equals(IdStudyProgrammeUpdatedBy)) {
				return ChangedAttributes[36];
			} else if (key.Equals(IdStudyProgrammeUpdatedOn)) {
				return ChangedAttributes[37];
			} else if (key.Equals(IdStudyProgrammeCompleted)) {
				return ChangedAttributes[38];
			} else if (key.Equals(IdEmployability)) {
				return ChangedAttributes[39];
			} else if (key.Equals(IdEmployabilityVisible)) {
				return ChangedAttributes[40];
			} else if (key.Equals(IdEmployabilityUpdatesdBy)) {
				return ChangedAttributes[41];
			} else if (key.Equals(IdEmployabilityUpdatedOn)) {
				return ChangedAttributes[42];
			} else if (key.Equals(IdEmployabilityCompleted)) {
				return ChangedAttributes[43];
			} else if (key.Equals(IdWorkExperience)) {
				return ChangedAttributes[44];
			} else if (key.Equals(IdWorkExperienceVisible)) {
				return ChangedAttributes[45];
			} else if (key.Equals(IdWorkExperienceUpdatedBy)) {
				return ChangedAttributes[46];
			} else if (key.Equals(IdWorkExperienceUpdatedOn)) {
				return ChangedAttributes[47];
			} else if (key.Equals(IdWorkExperienceCompleted)) {
				return ChangedAttributes[48];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdGroup)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdCreatedOn)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCourseOutline)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCourseOutlineVisible)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdCourseOutlineUpdatedBy)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdCourseOutlineUpdatedOn)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdCourseOutlineCompleted)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdKeyStrengths)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdKeyStrengthsVisible)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdKeyStrengthsUpdatedBy)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdKeyStrengthsUpdatedOn)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdKeyStrengthsCompleted)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdAreasForDevelopment)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdAreasForDevelopmentVisible)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdAreasForDevelopmentUpdatedBy)) {
				return OptimizedAttributes[16];
			} else if (key.Equals(IdAreasForDevelopmentUpdatedOn)) {
				return OptimizedAttributes[17];
			} else if (key.Equals(IdAreasForDevelopmentCompleted)) {
				return OptimizedAttributes[18];
			} else if (key.Equals(IdPredictedOutcome)) {
				return OptimizedAttributes[19];
			} else if (key.Equals(IdPredictedOutcomeVisible)) {
				return OptimizedAttributes[20];
			} else if (key.Equals(IdPredictedOutcomeUpdatedBy)) {
				return OptimizedAttributes[21];
			} else if (key.Equals(IdPredictedOutcomeUpdatedOn)) {
				return OptimizedAttributes[22];
			} else if (key.Equals(IdPredictedOutcomeCompleted)) {
				return OptimizedAttributes[23];
			} else if (key.Equals(IdAttendance)) {
				return OptimizedAttributes[24];
			} else if (key.Equals(IdAttendanceVisible)) {
				return OptimizedAttributes[25];
			} else if (key.Equals(IdAttendanceUpdatedBy)) {
				return OptimizedAttributes[26];
			} else if (key.Equals(IdAttendanceUpdatedOn)) {
				return OptimizedAttributes[27];
			} else if (key.Equals(IdAttendanceCompleted)) {
				return OptimizedAttributes[28];
			} else if (key.Equals(IdCourseCoordinatorSummary)) {
				return OptimizedAttributes[29];
			} else if (key.Equals(IdCourseCoordinatorSummaryVisi)) {
				return OptimizedAttributes[30];
			} else if (key.Equals(IdCourseCoordinatorUpdatedBy)) {
				return OptimizedAttributes[31];
			} else if (key.Equals(IdCourseCoordinatorUpdatedOn)) {
				return OptimizedAttributes[32];
			} else if (key.Equals(IdCourseCoordinatorCompleted)) {
				return OptimizedAttributes[33];
			} else if (key.Equals(IdStudyProgrammeOverview)) {
				return OptimizedAttributes[34];
			} else if (key.Equals(IdStudyProgrammeOverviewVisibl)) {
				return OptimizedAttributes[35];
			} else if (key.Equals(IdStudyProgrammeUpdatedBy)) {
				return OptimizedAttributes[36];
			} else if (key.Equals(IdStudyProgrammeUpdatedOn)) {
				return OptimizedAttributes[37];
			} else if (key.Equals(IdStudyProgrammeCompleted)) {
				return OptimizedAttributes[38];
			} else if (key.Equals(IdEmployability)) {
				return OptimizedAttributes[39];
			} else if (key.Equals(IdEmployabilityVisible)) {
				return OptimizedAttributes[40];
			} else if (key.Equals(IdEmployabilityUpdatesdBy)) {
				return OptimizedAttributes[41];
			} else if (key.Equals(IdEmployabilityUpdatedOn)) {
				return OptimizedAttributes[42];
			} else if (key.Equals(IdEmployabilityCompleted)) {
				return OptimizedAttributes[43];
			} else if (key.Equals(IdWorkExperience)) {
				return OptimizedAttributes[44];
			} else if (key.Equals(IdWorkExperienceVisible)) {
				return OptimizedAttributes[45];
			} else if (key.Equals(IdWorkExperienceUpdatedBy)) {
				return OptimizedAttributes[46];
			} else if (key.Equals(IdWorkExperienceUpdatedOn)) {
				return OptimizedAttributes[47];
			} else if (key.Equals(IdWorkExperienceCompleted)) {
				return OptimizedAttributes[48];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdGroup) {
				return ssGroup;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else if (key == IdCourseOutline) {
				return ssCourseOutline;
			} else if (key == IdCourseOutlineVisible) {
				return ssCourseOutlineVisible;
			} else if (key == IdCourseOutlineUpdatedBy) {
				return ssCourseOutlineUpdatedBy;
			} else if (key == IdCourseOutlineUpdatedOn) {
				return ssCourseOutlineUpdatedOn;
			} else if (key == IdCourseOutlineCompleted) {
				return ssCourseOutlineCompleted;
			} else if (key == IdKeyStrengths) {
				return ssKeyStrengths;
			} else if (key == IdKeyStrengthsVisible) {
				return ssKeyStrengthsVisible;
			} else if (key == IdKeyStrengthsUpdatedBy) {
				return ssKeyStrengthsUpdatedBy;
			} else if (key == IdKeyStrengthsUpdatedOn) {
				return ssKeyStrengthsUpdatedOn;
			} else if (key == IdKeyStrengthsCompleted) {
				return ssKeyStrengthsCompleted;
			} else if (key == IdAreasForDevelopment) {
				return ssAreasForDevelopment;
			} else if (key == IdAreasForDevelopmentVisible) {
				return ssAreasForDevelopmentVisible;
			} else if (key == IdAreasForDevelopmentUpdatedBy) {
				return ssAreasForDevelopmentUpdatedBy;
			} else if (key == IdAreasForDevelopmentUpdatedOn) {
				return ssAreasForDevelopmentUpdatedOn;
			} else if (key == IdAreasForDevelopmentCompleted) {
				return ssAreasForDevelopmentCompleted;
			} else if (key == IdPredictedOutcome) {
				return ssPredictedOutcome;
			} else if (key == IdPredictedOutcomeVisible) {
				return ssPredictedOutcomeVisible;
			} else if (key == IdPredictedOutcomeUpdatedBy) {
				return ssPredictedOutcomeUpdatedBy;
			} else if (key == IdPredictedOutcomeUpdatedOn) {
				return ssPredictedOutcomeUpdatedOn;
			} else if (key == IdPredictedOutcomeCompleted) {
				return ssPredictedOutcomeCompleted;
			} else if (key == IdAttendance) {
				return ssAttendance;
			} else if (key == IdAttendanceVisible) {
				return ssAttendanceVisible;
			} else if (key == IdAttendanceUpdatedBy) {
				return ssAttendanceUpdatedBy;
			} else if (key == IdAttendanceUpdatedOn) {
				return ssAttendanceUpdatedOn;
			} else if (key == IdAttendanceCompleted) {
				return ssAttendanceCompleted;
			} else if (key == IdCourseCoordinatorSummary) {
				return ssCourseCoordinatorSummary;
			} else if (key == IdCourseCoordinatorSummaryVisi) {
				return ssCourseCoordinatorSummaryVisi;
			} else if (key == IdCourseCoordinatorUpdatedBy) {
				return ssCourseCoordinatorUpdatedBy;
			} else if (key == IdCourseCoordinatorUpdatedOn) {
				return ssCourseCoordinatorUpdatedOn;
			} else if (key == IdCourseCoordinatorCompleted) {
				return ssCourseCoordinatorCompleted;
			} else if (key == IdStudyProgrammeOverview) {
				return ssStudyProgrammeOverview;
			} else if (key == IdStudyProgrammeOverviewVisibl) {
				return ssStudyProgrammeOverviewVisibl;
			} else if (key == IdStudyProgrammeUpdatedBy) {
				return ssStudyProgrammeUpdatedBy;
			} else if (key == IdStudyProgrammeUpdatedOn) {
				return ssStudyProgrammeUpdatedOn;
			} else if (key == IdStudyProgrammeCompleted) {
				return ssStudyProgrammeCompleted;
			} else if (key == IdEmployability) {
				return ssEmployability;
			} else if (key == IdEmployabilityVisible) {
				return ssEmployabilityVisible;
			} else if (key == IdEmployabilityUpdatesdBy) {
				return ssEmployabilityUpdatesdBy;
			} else if (key == IdEmployabilityUpdatedOn) {
				return ssEmployabilityUpdatedOn;
			} else if (key == IdEmployabilityCompleted) {
				return ssEmployabilityCompleted;
			} else if (key == IdWorkExperience) {
				return ssWorkExperience;
			} else if (key == IdWorkExperienceVisible) {
				return ssWorkExperienceVisible;
			} else if (key == IdWorkExperienceUpdatedBy) {
				return ssWorkExperienceUpdatedBy;
			} else if (key == IdWorkExperienceUpdatedOn) {
				return ssWorkExperienceUpdatedOn;
			} else if (key == IdWorkExperienceCompleted) {
				return ssWorkExperienceCompleted;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(49);
			OptimizedAttributes = new BitArray(49);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssGroup = (int) other.AttributeGet(IdGroup);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdGroup);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdGroup);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdCreatedBy);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdCreatedOn);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdCreatedOn);
			ssCourseOutline = (string) other.AttributeGet(IdCourseOutline);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCourseOutline);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCourseOutline);
			ssCourseOutlineVisible = (bool) other.AttributeGet(IdCourseOutlineVisible);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCourseOutlineVisible);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCourseOutlineVisible);
			ssCourseOutlineUpdatedBy = (int) other.AttributeGet(IdCourseOutlineUpdatedBy);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdCourseOutlineUpdatedBy);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdCourseOutlineUpdatedBy);
			ssCourseOutlineUpdatedOn = (DateTime) other.AttributeGet(IdCourseOutlineUpdatedOn);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdCourseOutlineUpdatedOn);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdCourseOutlineUpdatedOn);
			ssCourseOutlineCompleted = (bool) other.AttributeGet(IdCourseOutlineCompleted);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdCourseOutlineCompleted);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdCourseOutlineCompleted);
			ssKeyStrengths = (string) other.AttributeGet(IdKeyStrengths);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdKeyStrengths);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdKeyStrengths);
			ssKeyStrengthsVisible = (bool) other.AttributeGet(IdKeyStrengthsVisible);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdKeyStrengthsVisible);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdKeyStrengthsVisible);
			ssKeyStrengthsUpdatedBy = (int) other.AttributeGet(IdKeyStrengthsUpdatedBy);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdKeyStrengthsUpdatedBy);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdKeyStrengthsUpdatedBy);
			ssKeyStrengthsUpdatedOn = (DateTime) other.AttributeGet(IdKeyStrengthsUpdatedOn);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdKeyStrengthsUpdatedOn);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdKeyStrengthsUpdatedOn);
			ssKeyStrengthsCompleted = (bool) other.AttributeGet(IdKeyStrengthsCompleted);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdKeyStrengthsCompleted);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdKeyStrengthsCompleted);
			ssAreasForDevelopment = (string) other.AttributeGet(IdAreasForDevelopment);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdAreasForDevelopment);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdAreasForDevelopment);
			ssAreasForDevelopmentVisible = (bool) other.AttributeGet(IdAreasForDevelopmentVisible);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdAreasForDevelopmentVisible);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdAreasForDevelopmentVisible);
			ssAreasForDevelopmentUpdatedBy = (int) other.AttributeGet(IdAreasForDevelopmentUpdatedBy);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdAreasForDevelopmentUpdatedBy);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdAreasForDevelopmentUpdatedBy);
			ssAreasForDevelopmentUpdatedOn = (DateTime) other.AttributeGet(IdAreasForDevelopmentUpdatedOn);
			ChangedAttributes[17] = other.ChangedAttributeGet(IdAreasForDevelopmentUpdatedOn);
			OptimizedAttributes[17] = other.OptimizedAttributeGet(IdAreasForDevelopmentUpdatedOn);
			ssAreasForDevelopmentCompleted = (bool) other.AttributeGet(IdAreasForDevelopmentCompleted);
			ChangedAttributes[18] = other.ChangedAttributeGet(IdAreasForDevelopmentCompleted);
			OptimizedAttributes[18] = other.OptimizedAttributeGet(IdAreasForDevelopmentCompleted);
			ssPredictedOutcome = (string) other.AttributeGet(IdPredictedOutcome);
			ChangedAttributes[19] = other.ChangedAttributeGet(IdPredictedOutcome);
			OptimizedAttributes[19] = other.OptimizedAttributeGet(IdPredictedOutcome);
			ssPredictedOutcomeVisible = (bool) other.AttributeGet(IdPredictedOutcomeVisible);
			ChangedAttributes[20] = other.ChangedAttributeGet(IdPredictedOutcomeVisible);
			OptimizedAttributes[20] = other.OptimizedAttributeGet(IdPredictedOutcomeVisible);
			ssPredictedOutcomeUpdatedBy = (int) other.AttributeGet(IdPredictedOutcomeUpdatedBy);
			ChangedAttributes[21] = other.ChangedAttributeGet(IdPredictedOutcomeUpdatedBy);
			OptimizedAttributes[21] = other.OptimizedAttributeGet(IdPredictedOutcomeUpdatedBy);
			ssPredictedOutcomeUpdatedOn = (DateTime) other.AttributeGet(IdPredictedOutcomeUpdatedOn);
			ChangedAttributes[22] = other.ChangedAttributeGet(IdPredictedOutcomeUpdatedOn);
			OptimizedAttributes[22] = other.OptimizedAttributeGet(IdPredictedOutcomeUpdatedOn);
			ssPredictedOutcomeCompleted = (bool) other.AttributeGet(IdPredictedOutcomeCompleted);
			ChangedAttributes[23] = other.ChangedAttributeGet(IdPredictedOutcomeCompleted);
			OptimizedAttributes[23] = other.OptimizedAttributeGet(IdPredictedOutcomeCompleted);
			ssAttendance = (string) other.AttributeGet(IdAttendance);
			ChangedAttributes[24] = other.ChangedAttributeGet(IdAttendance);
			OptimizedAttributes[24] = other.OptimizedAttributeGet(IdAttendance);
			ssAttendanceVisible = (bool) other.AttributeGet(IdAttendanceVisible);
			ChangedAttributes[25] = other.ChangedAttributeGet(IdAttendanceVisible);
			OptimizedAttributes[25] = other.OptimizedAttributeGet(IdAttendanceVisible);
			ssAttendanceUpdatedBy = (int) other.AttributeGet(IdAttendanceUpdatedBy);
			ChangedAttributes[26] = other.ChangedAttributeGet(IdAttendanceUpdatedBy);
			OptimizedAttributes[26] = other.OptimizedAttributeGet(IdAttendanceUpdatedBy);
			ssAttendanceUpdatedOn = (DateTime) other.AttributeGet(IdAttendanceUpdatedOn);
			ChangedAttributes[27] = other.ChangedAttributeGet(IdAttendanceUpdatedOn);
			OptimizedAttributes[27] = other.OptimizedAttributeGet(IdAttendanceUpdatedOn);
			ssAttendanceCompleted = (bool) other.AttributeGet(IdAttendanceCompleted);
			ChangedAttributes[28] = other.ChangedAttributeGet(IdAttendanceCompleted);
			OptimizedAttributes[28] = other.OptimizedAttributeGet(IdAttendanceCompleted);
			ssCourseCoordinatorSummary = (string) other.AttributeGet(IdCourseCoordinatorSummary);
			ChangedAttributes[29] = other.ChangedAttributeGet(IdCourseCoordinatorSummary);
			OptimizedAttributes[29] = other.OptimizedAttributeGet(IdCourseCoordinatorSummary);
			ssCourseCoordinatorSummaryVisi = (bool) other.AttributeGet(IdCourseCoordinatorSummaryVisi);
			ChangedAttributes[30] = other.ChangedAttributeGet(IdCourseCoordinatorSummaryVisi);
			OptimizedAttributes[30] = other.OptimizedAttributeGet(IdCourseCoordinatorSummaryVisi);
			ssCourseCoordinatorUpdatedBy = (int) other.AttributeGet(IdCourseCoordinatorUpdatedBy);
			ChangedAttributes[31] = other.ChangedAttributeGet(IdCourseCoordinatorUpdatedBy);
			OptimizedAttributes[31] = other.OptimizedAttributeGet(IdCourseCoordinatorUpdatedBy);
			ssCourseCoordinatorUpdatedOn = (DateTime) other.AttributeGet(IdCourseCoordinatorUpdatedOn);
			ChangedAttributes[32] = other.ChangedAttributeGet(IdCourseCoordinatorUpdatedOn);
			OptimizedAttributes[32] = other.OptimizedAttributeGet(IdCourseCoordinatorUpdatedOn);
			ssCourseCoordinatorCompleted = (bool) other.AttributeGet(IdCourseCoordinatorCompleted);
			ChangedAttributes[33] = other.ChangedAttributeGet(IdCourseCoordinatorCompleted);
			OptimizedAttributes[33] = other.OptimizedAttributeGet(IdCourseCoordinatorCompleted);
			ssStudyProgrammeOverview = (string) other.AttributeGet(IdStudyProgrammeOverview);
			ChangedAttributes[34] = other.ChangedAttributeGet(IdStudyProgrammeOverview);
			OptimizedAttributes[34] = other.OptimizedAttributeGet(IdStudyProgrammeOverview);
			ssStudyProgrammeOverviewVisibl = (bool) other.AttributeGet(IdStudyProgrammeOverviewVisibl);
			ChangedAttributes[35] = other.ChangedAttributeGet(IdStudyProgrammeOverviewVisibl);
			OptimizedAttributes[35] = other.OptimizedAttributeGet(IdStudyProgrammeOverviewVisibl);
			ssStudyProgrammeUpdatedBy = (int) other.AttributeGet(IdStudyProgrammeUpdatedBy);
			ChangedAttributes[36] = other.ChangedAttributeGet(IdStudyProgrammeUpdatedBy);
			OptimizedAttributes[36] = other.OptimizedAttributeGet(IdStudyProgrammeUpdatedBy);
			ssStudyProgrammeUpdatedOn = (DateTime) other.AttributeGet(IdStudyProgrammeUpdatedOn);
			ChangedAttributes[37] = other.ChangedAttributeGet(IdStudyProgrammeUpdatedOn);
			OptimizedAttributes[37] = other.OptimizedAttributeGet(IdStudyProgrammeUpdatedOn);
			ssStudyProgrammeCompleted = (bool) other.AttributeGet(IdStudyProgrammeCompleted);
			ChangedAttributes[38] = other.ChangedAttributeGet(IdStudyProgrammeCompleted);
			OptimizedAttributes[38] = other.OptimizedAttributeGet(IdStudyProgrammeCompleted);
			ssEmployability = (string) other.AttributeGet(IdEmployability);
			ChangedAttributes[39] = other.ChangedAttributeGet(IdEmployability);
			OptimizedAttributes[39] = other.OptimizedAttributeGet(IdEmployability);
			ssEmployabilityVisible = (bool) other.AttributeGet(IdEmployabilityVisible);
			ChangedAttributes[40] = other.ChangedAttributeGet(IdEmployabilityVisible);
			OptimizedAttributes[40] = other.OptimizedAttributeGet(IdEmployabilityVisible);
			ssEmployabilityUpdatesdBy = (int) other.AttributeGet(IdEmployabilityUpdatesdBy);
			ChangedAttributes[41] = other.ChangedAttributeGet(IdEmployabilityUpdatesdBy);
			OptimizedAttributes[41] = other.OptimizedAttributeGet(IdEmployabilityUpdatesdBy);
			ssEmployabilityUpdatedOn = (DateTime) other.AttributeGet(IdEmployabilityUpdatedOn);
			ChangedAttributes[42] = other.ChangedAttributeGet(IdEmployabilityUpdatedOn);
			OptimizedAttributes[42] = other.OptimizedAttributeGet(IdEmployabilityUpdatedOn);
			ssEmployabilityCompleted = (bool) other.AttributeGet(IdEmployabilityCompleted);
			ChangedAttributes[43] = other.ChangedAttributeGet(IdEmployabilityCompleted);
			OptimizedAttributes[43] = other.OptimizedAttributeGet(IdEmployabilityCompleted);
			ssWorkExperience = (string) other.AttributeGet(IdWorkExperience);
			ChangedAttributes[44] = other.ChangedAttributeGet(IdWorkExperience);
			OptimizedAttributes[44] = other.OptimizedAttributeGet(IdWorkExperience);
			ssWorkExperienceVisible = (bool) other.AttributeGet(IdWorkExperienceVisible);
			ChangedAttributes[45] = other.ChangedAttributeGet(IdWorkExperienceVisible);
			OptimizedAttributes[45] = other.OptimizedAttributeGet(IdWorkExperienceVisible);
			ssWorkExperienceUpdatedBy = (int) other.AttributeGet(IdWorkExperienceUpdatedBy);
			ChangedAttributes[46] = other.ChangedAttributeGet(IdWorkExperienceUpdatedBy);
			OptimizedAttributes[46] = other.OptimizedAttributeGet(IdWorkExperienceUpdatedBy);
			ssWorkExperienceUpdatedOn = (DateTime) other.AttributeGet(IdWorkExperienceUpdatedOn);
			ChangedAttributes[47] = other.ChangedAttributeGet(IdWorkExperienceUpdatedOn);
			OptimizedAttributes[47] = other.OptimizedAttributeGet(IdWorkExperienceUpdatedOn);
			ssWorkExperienceCompleted = (bool) other.AttributeGet(IdWorkExperienceCompleted);
			ChangedAttributes[48] = other.ChangedAttributeGet(IdWorkExperienceCompleted);
			OptimizedAttributes[48] = other.OptimizedAttributeGet(IdWorkExperienceCompleted);
		}
	} // ENProgressReportSectionEntityRecord
	/// <summary>
	/// Structure <code>RCProgressReportSectionRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCProgressReportSectionRecord: ISerializable, ITypedRecord<RCProgressReportSectionRecord> {
		private static readonly GlobalObjectKey IdProgressReportSection = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QQJwCkGhCxsjtT_ejR61nw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ProgressReportSection")]
		public ENProgressReportSectionEntityRecord ssENProgressReportSection;


		public static implicit operator ENProgressReportSectionEntityRecord(RCProgressReportSectionRecord r) {
			return r.ssENProgressReportSection;
		}

		public static implicit operator RCProgressReportSectionRecord(ENProgressReportSectionEntityRecord r) {
			RCProgressReportSectionRecord res = new RCProgressReportSectionRecord(null);
			res.ssENProgressReportSection = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENProgressReportSection.ChangedAttributes = value;
			}
			get {
				return ssENProgressReportSection.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCProgressReportSectionRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(49, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENProgressReportSection.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENProgressReportSection.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENProgressReportSection.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENProgressReportSection.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCProgressReportSectionRecord r) {
			this = r;
		}


		public static bool operator == (RCProgressReportSectionRecord a, RCProgressReportSectionRecord b) {
			if (a.ssENProgressReportSection != b.ssENProgressReportSection) return false;
			return true;
		}

		public static bool operator != (RCProgressReportSectionRecord a, RCProgressReportSectionRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCProgressReportSectionRecord)) return false;
			return (this == (RCProgressReportSectionRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENProgressReportSection.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCProgressReportSectionRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENProgressReportSection = new ENProgressReportSectionEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENProgressReportSection = (ENProgressReportSectionEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENProgressReportSection.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENProgressReportSection.InternalRecursiveSave();
		}


		public RCProgressReportSectionRecord Duplicate() {
			RCProgressReportSectionRecord t;
			t.ssENProgressReportSection = (ENProgressReportSectionEntityRecord) this.ssENProgressReportSection.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENProgressReportSection.ToXml(this, recordElem, "ProgressReportSection", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "progressreportsection") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSection")) variable.Value = ssENProgressReportSection; else variable.Optimized = true;
				variable.SetFieldName("progressreportsection");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENProgressReportSection.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENProgressReportSection.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdProgressReportSection) {
				return ssENProgressReportSection;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENProgressReportSection.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSection));
		}
	} // RCProgressReportSectionRecord
	/// <summary>
	/// RecordList type <code>RLProgressReportSectionRecordList</code> that represents a record list of
	///  <code>ProgressReportSection</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportSectionRecordList: GenericRecordList<RCProgressReportSectionRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCProgressReportSectionRecord GetElementDefaultValue() {
			return new RCProgressReportSectionRecord("");
		}

		public T[] ToArray<T>(Func<RCProgressReportSectionRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportSectionRecordList recordlist, Func<RCProgressReportSectionRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportSectionRecordList ToList<T>(T[] array, Func <T, RCProgressReportSectionRecord> converter) {
			RLProgressReportSectionRecordList result = new RLProgressReportSectionRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportSectionRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSectionRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSectionRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportSectionRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(49, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCProgressReportSectionRecord> NewList() {
			return new RLProgressReportSectionRecordList();
		}


	} // RLProgressReportSectionRecordList

	/// <summary>
	/// RecordList type <code>RLProgressReportSectionList</code> that represents a record list of
	///  <code>GroupIdentifier, UserIdentifier, UserIdentifier, UserIdentifier, UserIdentifier
	/// , UserIdentifier, UserIdentifier, UserIdentifier, UserIdentifier, UserIdentifier, UserIdentifier,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, DateTime, DateTime, DateTime, DateTime
	/// , DateTime, DateTime, DateTime, DateTime, DateTime, DateTime, Boolean, Boolean, Boolean, Boolean,
	///  Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean
	/// , Boolean, Boolean, Boolean, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportSectionList: GenericRecordList<ENProgressReportSectionEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENProgressReportSectionEntityRecord GetElementDefaultValue() {
			return new ENProgressReportSectionEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENProgressReportSectionEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportSectionList recordlist, Func<ENProgressReportSectionEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportSectionList ToList<T>(T[] array, Func <T, ENProgressReportSectionEntityRecord> converter) {
			RLProgressReportSectionList result = new RLProgressReportSectionList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportSectionList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSectionList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSectionList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportSectionList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENProgressReportSectionEntityRecord> NewList() {
			return new RLProgressReportSectionList();
		}


	} // RLProgressReportSectionList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateProgressReportSection
		/// </summary>

		public static void CreateProgressReportSection(HeContext heContext, RCProgressReportSectionRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionEntity.eSpaceId;
				ENProgressReportSectionEntityRecord ssENProgressReportSection = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENProgressReportSectionEntity.LocalViewName(null, null) + " (" +
					 " [GROUP]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 ", [COURSEOUTLINE]" +
					 ", [COURSEOUTLINEVISIBLE]" +
					 ", [COURSEOUTLINEUPDATEDBY]" +
					 ", [COURSEOUTLINEUPDATEDON]" +
					 ", [COURSEOUTLINECOMPLETED]" +
					 ", [KEYSTRENGTHS]" +
					 ", [KEYSTRENGTHSVISIBLE]" +
					 ", [KEYSTRENGTHSUPDATEDBY]" +
					 ", [KEYSTRENGTHSUPDATEDON]" +
					 ", [KEYSTRENGTHSCOMPLETED]" +
					 ", [AREASFORDEVELOPMENT]" +
					 ", [AREASFORDEVELOPMENTVISIBLE]" +
					 ", [AREASFORDEVELOPMENTUPDATEDBY]" +
					 ", [AREASFORDEVELOPMENTUPDATEDON]" +
					 ", [AREASFORDEVELOPMENTCOMPLETED]" +
					 ", [PREDICTEDOUTCOME]" +
					 ", [PREDICTEDOUTCOMEVISIBLE]" +
					 ", [PREDICTEDOUTCOMEUPDATEDBY]" +
					 ", [PREDICTEDOUTCOMEUPDATEDON]" +
					 ", [PREDICTEDOUTCOMECOMPLETED]" +
					 ", [ATTENDANCE]" +
					 ", [ATTENDANCEVISIBLE]" +
					 ", [ATTENDANCEUPDATEDBY]" +
					 ", [ATTENDANCEUPDATEDON]" +
					 ", [ATTENDANCECOMPLETED]" +
					 ", [COURSECOORDINATORSUMMARY]" +
					 ", [COURSECOORDINATORSUMMARYVISI]" +
					 ", [COURSECOORDINATORUPDATEDBY]" +
					 ", [COURSECOORDINATORUPDATEDON]" +
					 ", [COURSECOORDINATORCOMPLETED]" +
					 ", [STUDYPROGRAMMEOVERVIEW]" +
					 ", [STUDYPROGRAMMEOVERVIEWVISIBL]" +
					 ", [STUDYPROGRAMMEUPDATEDBY]" +
					 ", [STUDYPROGRAMMEUPDATEDON]" +
					 ", [STUDYPROGRAMMECOMPLETED]" +
					 ", [EMPLOYABILITY]" +
					 ", [EMPLOYABILITYVISIBLE]" +
					 ", [EMPLOYABILITYUPDATESDBY]" +
					 ", [EMPLOYABILITYUPDATEDON]" +
					 ", [EMPLOYABILITYCOMPLETED]" +
					 ", [WORKEXPERIENCE]" +
					 ", [WORKEXPERIENCEVISIBLE]" +
					 ", [WORKEXPERIENCEUPDATEDBY]" +
					 ", [WORKEXPERIENCEUPDATEDON]" +
					 ", [WORKEXPERIENCECOMPLETED]" +
					 " ) VALUES (" +
					 " @ssGroup" +
					 ", @ssCreatedBy" +
					 ", @ssCreatedOn" +
					 ", @ssCourseOutline" +
					 ", @ssCourseOutlineVisible" +
					 ", @ssCourseOutlineUpdatedBy" +
					 ", @ssCourseOutlineUpdatedOn" +
					 ", @ssCourseOutlineCompleted" +
					 ", @ssKeyStrengths" +
					 ", @ssKeyStrengthsVisible" +
					 ", @ssKeyStrengthsUpdatedBy" +
					 ", @ssKeyStrengthsUpdatedOn" +
					 ", @ssKeyStrengthsCompleted" +
					 ", @ssAreasForDevelopment" +
					 ", @ssAreasForDevelopmentVisible" +
					 ", @ssAreasForDevelopmentUpdatedBy" +
					 ", @ssAreasForDevelopmentUpdatedOn" +
					 ", @ssAreasForDevelopmentCompleted" +
					 ", @ssPredictedOutcome" +
					 ", @ssPredictedOutcomeVisible" +
					 ", @ssPredictedOutcomeUpdatedBy" +
					 ", @ssPredictedOutcomeUpdatedOn" +
					 ", @ssPredictedOutcomeCompleted" +
					 ", @ssAttendance" +
					 ", @ssAttendanceVisible" +
					 ", @ssAttendanceUpdatedBy" +
					 ", @ssAttendanceUpdatedOn" +
					 ", @ssAttendanceCompleted" +
					 ", @ssCourseCoordinatorSummary" +
					 ", @ssCourseCoordinatorSummaryVisi" +
					 ", @ssCourseCoordinatorUpdatedBy" +
					 ", @ssCourseCoordinatorUpdatedOn" +
					 ", @ssCourseCoordinatorCompleted" +
					 ", @ssStudyProgrammeOverview" +
					 ", @ssStudyProgrammeOverviewVisibl" +
					 ", @ssStudyProgrammeUpdatedBy" +
					 ", @ssStudyProgrammeUpdatedOn" +
					 ", @ssStudyProgrammeCompleted" +
					 ", @ssEmployability" +
					 ", @ssEmployabilityVisible" +
					 ", @ssEmployabilityUpdatesdBy" +
					 ", @ssEmployabilityUpdatedOn" +
					 ", @ssEmployabilityCompleted" +
					 ", @ssWorkExperience" +
					 ", @ssWorkExperienceVisible" +
					 ", @ssWorkExperienceUpdatedBy" +
					 ", @ssWorkExperienceUpdatedOn" +
					 ", @ssWorkExperienceCompleted" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENProgressReportSection.ssGroup==0)) {
						insertSqlCmd.CreateParameter("@ssGroup", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssGroup", DbType.Int32, ssENProgressReportSection.ssGroup);
					}
					if ((ssENProgressReportSection.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENProgressReportSection.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENProgressReportSection.ssCreatedOn);
					insertSqlCmd.CreateParameter("@ssCourseOutline", DbType.String, ssENProgressReportSection.ssCourseOutline);
					insertSqlCmd.CreateParameter("@ssCourseOutlineVisible", DbType.Boolean, ssENProgressReportSection.ssCourseOutlineVisible);
					if ((ssENProgressReportSection.ssCourseOutlineUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCourseOutlineUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCourseOutlineUpdatedBy", DbType.Int32, ssENProgressReportSection.ssCourseOutlineUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssCourseOutlineUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssCourseOutlineUpdatedOn);
					insertSqlCmd.CreateParameter("@ssCourseOutlineCompleted", DbType.Boolean, ssENProgressReportSection.ssCourseOutlineCompleted);
					insertSqlCmd.CreateParameter("@ssKeyStrengths", DbType.String, ssENProgressReportSection.ssKeyStrengths);
					insertSqlCmd.CreateParameter("@ssKeyStrengthsVisible", DbType.Boolean, ssENProgressReportSection.ssKeyStrengthsVisible);
					if ((ssENProgressReportSection.ssKeyStrengthsUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssKeyStrengthsUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssKeyStrengthsUpdatedBy", DbType.Int32, ssENProgressReportSection.ssKeyStrengthsUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssKeyStrengthsUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssKeyStrengthsUpdatedOn);
					insertSqlCmd.CreateParameter("@ssKeyStrengthsCompleted", DbType.Boolean, ssENProgressReportSection.ssKeyStrengthsCompleted);
					insertSqlCmd.CreateParameter("@ssAreasForDevelopment", DbType.String, ssENProgressReportSection.ssAreasForDevelopment);
					insertSqlCmd.CreateParameter("@ssAreasForDevelopmentVisible", DbType.Boolean, ssENProgressReportSection.ssAreasForDevelopmentVisible);
					if ((ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedBy", DbType.Int32, ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn);
					insertSqlCmd.CreateParameter("@ssAreasForDevelopmentCompleted", DbType.Boolean, ssENProgressReportSection.ssAreasForDevelopmentCompleted);
					insertSqlCmd.CreateParameter("@ssPredictedOutcome", DbType.String, ssENProgressReportSection.ssPredictedOutcome);
					insertSqlCmd.CreateParameter("@ssPredictedOutcomeVisible", DbType.Boolean, ssENProgressReportSection.ssPredictedOutcomeVisible);
					if ((ssENProgressReportSection.ssPredictedOutcomeUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedBy", DbType.Int32, ssENProgressReportSection.ssPredictedOutcomeUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssPredictedOutcomeUpdatedOn);
					insertSqlCmd.CreateParameter("@ssPredictedOutcomeCompleted", DbType.Boolean, ssENProgressReportSection.ssPredictedOutcomeCompleted);
					insertSqlCmd.CreateParameter("@ssAttendance", DbType.String, ssENProgressReportSection.ssAttendance);
					insertSqlCmd.CreateParameter("@ssAttendanceVisible", DbType.Boolean, ssENProgressReportSection.ssAttendanceVisible);
					if ((ssENProgressReportSection.ssAttendanceUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssAttendanceUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssAttendanceUpdatedBy", DbType.Int32, ssENProgressReportSection.ssAttendanceUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssAttendanceUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssAttendanceUpdatedOn);
					insertSqlCmd.CreateParameter("@ssAttendanceCompleted", DbType.Boolean, ssENProgressReportSection.ssAttendanceCompleted);
					insertSqlCmd.CreateParameter("@ssCourseCoordinatorSummary", DbType.String, ssENProgressReportSection.ssCourseCoordinatorSummary);
					insertSqlCmd.CreateParameter("@ssCourseCoordinatorSummaryVisi", DbType.Boolean, ssENProgressReportSection.ssCourseCoordinatorSummaryVisi);
					if ((ssENProgressReportSection.ssCourseCoordinatorUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedBy", DbType.Int32, ssENProgressReportSection.ssCourseCoordinatorUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssCourseCoordinatorUpdatedOn);
					insertSqlCmd.CreateParameter("@ssCourseCoordinatorCompleted", DbType.Boolean, ssENProgressReportSection.ssCourseCoordinatorCompleted);
					insertSqlCmd.CreateParameter("@ssStudyProgrammeOverview", DbType.String, ssENProgressReportSection.ssStudyProgrammeOverview);
					insertSqlCmd.CreateParameter("@ssStudyProgrammeOverviewVisibl", DbType.Boolean, ssENProgressReportSection.ssStudyProgrammeOverviewVisibl);
					if ((ssENProgressReportSection.ssStudyProgrammeUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssStudyProgrammeUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudyProgrammeUpdatedBy", DbType.Int32, ssENProgressReportSection.ssStudyProgrammeUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssStudyProgrammeUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssStudyProgrammeUpdatedOn);
					insertSqlCmd.CreateParameter("@ssStudyProgrammeCompleted", DbType.Boolean, ssENProgressReportSection.ssStudyProgrammeCompleted);
					insertSqlCmd.CreateParameter("@ssEmployability", DbType.String, ssENProgressReportSection.ssEmployability);
					insertSqlCmd.CreateParameter("@ssEmployabilityVisible", DbType.Boolean, ssENProgressReportSection.ssEmployabilityVisible);
					if ((ssENProgressReportSection.ssEmployabilityUpdatesdBy==0)) {
						insertSqlCmd.CreateParameter("@ssEmployabilityUpdatesdBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssEmployabilityUpdatesdBy", DbType.Int32, ssENProgressReportSection.ssEmployabilityUpdatesdBy);
					}
					insertSqlCmd.CreateParameter("@ssEmployabilityUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssEmployabilityUpdatedOn);
					insertSqlCmd.CreateParameter("@ssEmployabilityCompleted", DbType.Boolean, ssENProgressReportSection.ssEmployabilityCompleted);
					insertSqlCmd.CreateParameter("@ssWorkExperience", DbType.String, ssENProgressReportSection.ssWorkExperience);
					insertSqlCmd.CreateParameter("@ssWorkExperienceVisible", DbType.Boolean, ssENProgressReportSection.ssWorkExperienceVisible);
					if ((ssENProgressReportSection.ssWorkExperienceUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssWorkExperienceUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssWorkExperienceUpdatedBy", DbType.Int32, ssENProgressReportSection.ssWorkExperienceUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssWorkExperienceUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssWorkExperienceUpdatedOn);
					insertSqlCmd.CreateParameter("@ssWorkExperienceCompleted", DbType.Boolean, ssENProgressReportSection.ssWorkExperienceCompleted);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateProgressReportSection", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateProgressReportSection
		/// </summary>

		public static void CreateOrUpdateProgressReportSection(HeContext heContext, BitArray usedFields, RCProgressReportSectionRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionEntity.eSpaceId;
				ENProgressReportSectionEntityRecord ssENProgressReportSection = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(49, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENProgressReportSectionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUP] = @ssGroup"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEOUTLINE] = @ssCourseOutline"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEOUTLINEVISIBLE] = @ssCourseOutlineVisible"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEOUTLINEUPDATEDBY] = @ssCourseOutlineUpdatedBy"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEOUTLINEUPDATEDON] = @ssCourseOutlineUpdatedOn"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEOUTLINECOMPLETED] = @ssCourseOutlineCompleted"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[KEYSTRENGTHS] = @ssKeyStrengths"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[KEYSTRENGTHSVISIBLE] = @ssKeyStrengthsVisible"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[KEYSTRENGTHSUPDATEDBY] = @ssKeyStrengthsUpdatedBy"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[KEYSTRENGTHSUPDATEDON] = @ssKeyStrengthsUpdatedOn"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[KEYSTRENGTHSCOMPLETED] = @ssKeyStrengthsCompleted"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AREASFORDEVELOPMENT] = @ssAreasForDevelopment"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AREASFORDEVELOPMENTVISIBLE] = @ssAreasForDevelopmentVisible"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AREASFORDEVELOPMENTUPDATEDBY] = @ssAreasForDevelopmentUpdatedBy"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AREASFORDEVELOPMENTUPDATEDON] = @ssAreasForDevelopmentUpdatedOn"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AREASFORDEVELOPMENTCOMPLETED] = @ssAreasForDevelopmentCompleted"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREDICTEDOUTCOME] = @ssPredictedOutcome"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREDICTEDOUTCOMEVISIBLE] = @ssPredictedOutcomeVisible"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREDICTEDOUTCOMEUPDATEDBY] = @ssPredictedOutcomeUpdatedBy"): parameters);
					parameters = (usedFields[22] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREDICTEDOUTCOMEUPDATEDON] = @ssPredictedOutcomeUpdatedOn"): parameters);
					parameters = (usedFields[23] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREDICTEDOUTCOMECOMPLETED] = @ssPredictedOutcomeCompleted"): parameters);
					parameters = (usedFields[24] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ATTENDANCE] = @ssAttendance"): parameters);
					parameters = (usedFields[25] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ATTENDANCEVISIBLE] = @ssAttendanceVisible"): parameters);
					parameters = (usedFields[26] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ATTENDANCEUPDATEDBY] = @ssAttendanceUpdatedBy"): parameters);
					parameters = (usedFields[27] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ATTENDANCEUPDATEDON] = @ssAttendanceUpdatedOn"): parameters);
					parameters = (usedFields[28] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ATTENDANCECOMPLETED] = @ssAttendanceCompleted"): parameters);
					parameters = (usedFields[29] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSECOORDINATORSUMMARY] = @ssCourseCoordinatorSummary"): parameters);
					parameters = (usedFields[30] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSECOORDINATORSUMMARYVISI] = @ssCourseCoordinatorSummaryVisi"): parameters);
					parameters = (usedFields[31] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSECOORDINATORUPDATEDBY] = @ssCourseCoordinatorUpdatedBy"): parameters);
					parameters = (usedFields[32] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSECOORDINATORUPDATEDON] = @ssCourseCoordinatorUpdatedOn"): parameters);
					parameters = (usedFields[33] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSECOORDINATORCOMPLETED] = @ssCourseCoordinatorCompleted"): parameters);
					parameters = (usedFields[34] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDYPROGRAMMEOVERVIEW] = @ssStudyProgrammeOverview"): parameters);
					parameters = (usedFields[35] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDYPROGRAMMEOVERVIEWVISIBL] = @ssStudyProgrammeOverviewVisibl"): parameters);
					parameters = (usedFields[36] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDYPROGRAMMEUPDATEDBY] = @ssStudyProgrammeUpdatedBy"): parameters);
					parameters = (usedFields[37] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDYPROGRAMMEUPDATEDON] = @ssStudyProgrammeUpdatedOn"): parameters);
					parameters = (usedFields[38] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDYPROGRAMMECOMPLETED] = @ssStudyProgrammeCompleted"): parameters);
					parameters = (usedFields[39] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMPLOYABILITY] = @ssEmployability"): parameters);
					parameters = (usedFields[40] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMPLOYABILITYVISIBLE] = @ssEmployabilityVisible"): parameters);
					parameters = (usedFields[41] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMPLOYABILITYUPDATESDBY] = @ssEmployabilityUpdatesdBy"): parameters);
					parameters = (usedFields[42] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMPLOYABILITYUPDATEDON] = @ssEmployabilityUpdatedOn"): parameters);
					parameters = (usedFields[43] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMPLOYABILITYCOMPLETED] = @ssEmployabilityCompleted"): parameters);
					parameters = (usedFields[44] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WORKEXPERIENCE] = @ssWorkExperience"): parameters);
					parameters = (usedFields[45] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WORKEXPERIENCEVISIBLE] = @ssWorkExperienceVisible"): parameters);
					parameters = (usedFields[46] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WORKEXPERIENCEUPDATEDBY] = @ssWorkExperienceUpdatedBy"): parameters);
					parameters = (usedFields[47] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WORKEXPERIENCEUPDATEDON] = @ssWorkExperienceUpdatedOn"): parameters);
					parameters = (usedFields[48] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WORKEXPERIENCECOMPLETED] = @ssWorkExperienceCompleted"): parameters);
					string whereCondition = " WHERE [ID] = @ssENProgressReportSectionssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENProgressReportSection.ssGroup==0)) {
							sqlCmd.CreateParameter("@ssGroup", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssGroup", DbType.Int32, ssENProgressReportSection.ssGroup);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENProgressReportSection.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENProgressReportSection.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENProgressReportSection.ssCreatedOn);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssCourseOutline", DbType.String, ssENProgressReportSection.ssCourseOutline);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssCourseOutlineVisible", DbType.Boolean, ssENProgressReportSection.ssCourseOutlineVisible);
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENProgressReportSection.ssCourseOutlineUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssCourseOutlineUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCourseOutlineUpdatedBy", DbType.Int32, ssENProgressReportSection.ssCourseOutlineUpdatedBy);
						}
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssCourseOutlineUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssCourseOutlineUpdatedOn);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssCourseOutlineCompleted", DbType.Boolean, ssENProgressReportSection.ssCourseOutlineCompleted);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssKeyStrengths", DbType.String, ssENProgressReportSection.ssKeyStrengths);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssKeyStrengthsVisible", DbType.Boolean, ssENProgressReportSection.ssKeyStrengthsVisible);
						counter++;
					}
					if (usedFields[11]) {
						if ((ssENProgressReportSection.ssKeyStrengthsUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssKeyStrengthsUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssKeyStrengthsUpdatedBy", DbType.Int32, ssENProgressReportSection.ssKeyStrengthsUpdatedBy);
						}
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssKeyStrengthsUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssKeyStrengthsUpdatedOn);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssKeyStrengthsCompleted", DbType.Boolean, ssENProgressReportSection.ssKeyStrengthsCompleted);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssAreasForDevelopment", DbType.String, ssENProgressReportSection.ssAreasForDevelopment);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssAreasForDevelopmentVisible", DbType.Boolean, ssENProgressReportSection.ssAreasForDevelopmentVisible);
						counter++;
					}
					if (usedFields[16]) {
						if ((ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedBy", DbType.Int32, ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy);
						}
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssAreasForDevelopmentCompleted", DbType.Boolean, ssENProgressReportSection.ssAreasForDevelopmentCompleted);
						counter++;
					}
					if (usedFields[19]) {
						sqlCmd.CreateParameter("@ssPredictedOutcome", DbType.String, ssENProgressReportSection.ssPredictedOutcome);
						counter++;
					}
					if (usedFields[20]) {
						sqlCmd.CreateParameter("@ssPredictedOutcomeVisible", DbType.Boolean, ssENProgressReportSection.ssPredictedOutcomeVisible);
						counter++;
					}
					if (usedFields[21]) {
						if ((ssENProgressReportSection.ssPredictedOutcomeUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedBy", DbType.Int32, ssENProgressReportSection.ssPredictedOutcomeUpdatedBy);
						}
						counter++;
					}
					if (usedFields[22]) {
						sqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssPredictedOutcomeUpdatedOn);
						counter++;
					}
					if (usedFields[23]) {
						sqlCmd.CreateParameter("@ssPredictedOutcomeCompleted", DbType.Boolean, ssENProgressReportSection.ssPredictedOutcomeCompleted);
						counter++;
					}
					if (usedFields[24]) {
						sqlCmd.CreateParameter("@ssAttendance", DbType.String, ssENProgressReportSection.ssAttendance);
						counter++;
					}
					if (usedFields[25]) {
						sqlCmd.CreateParameter("@ssAttendanceVisible", DbType.Boolean, ssENProgressReportSection.ssAttendanceVisible);
						counter++;
					}
					if (usedFields[26]) {
						if ((ssENProgressReportSection.ssAttendanceUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssAttendanceUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssAttendanceUpdatedBy", DbType.Int32, ssENProgressReportSection.ssAttendanceUpdatedBy);
						}
						counter++;
					}
					if (usedFields[27]) {
						sqlCmd.CreateParameter("@ssAttendanceUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssAttendanceUpdatedOn);
						counter++;
					}
					if (usedFields[28]) {
						sqlCmd.CreateParameter("@ssAttendanceCompleted", DbType.Boolean, ssENProgressReportSection.ssAttendanceCompleted);
						counter++;
					}
					if (usedFields[29]) {
						sqlCmd.CreateParameter("@ssCourseCoordinatorSummary", DbType.String, ssENProgressReportSection.ssCourseCoordinatorSummary);
						counter++;
					}
					if (usedFields[30]) {
						sqlCmd.CreateParameter("@ssCourseCoordinatorSummaryVisi", DbType.Boolean, ssENProgressReportSection.ssCourseCoordinatorSummaryVisi);
						counter++;
					}
					if (usedFields[31]) {
						if ((ssENProgressReportSection.ssCourseCoordinatorUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedBy", DbType.Int32, ssENProgressReportSection.ssCourseCoordinatorUpdatedBy);
						}
						counter++;
					}
					if (usedFields[32]) {
						sqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssCourseCoordinatorUpdatedOn);
						counter++;
					}
					if (usedFields[33]) {
						sqlCmd.CreateParameter("@ssCourseCoordinatorCompleted", DbType.Boolean, ssENProgressReportSection.ssCourseCoordinatorCompleted);
						counter++;
					}
					if (usedFields[34]) {
						sqlCmd.CreateParameter("@ssStudyProgrammeOverview", DbType.String, ssENProgressReportSection.ssStudyProgrammeOverview);
						counter++;
					}
					if (usedFields[35]) {
						sqlCmd.CreateParameter("@ssStudyProgrammeOverviewVisibl", DbType.Boolean, ssENProgressReportSection.ssStudyProgrammeOverviewVisibl);
						counter++;
					}
					if (usedFields[36]) {
						if ((ssENProgressReportSection.ssStudyProgrammeUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssStudyProgrammeUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudyProgrammeUpdatedBy", DbType.Int32, ssENProgressReportSection.ssStudyProgrammeUpdatedBy);
						}
						counter++;
					}
					if (usedFields[37]) {
						sqlCmd.CreateParameter("@ssStudyProgrammeUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssStudyProgrammeUpdatedOn);
						counter++;
					}
					if (usedFields[38]) {
						sqlCmd.CreateParameter("@ssStudyProgrammeCompleted", DbType.Boolean, ssENProgressReportSection.ssStudyProgrammeCompleted);
						counter++;
					}
					if (usedFields[39]) {
						sqlCmd.CreateParameter("@ssEmployability", DbType.String, ssENProgressReportSection.ssEmployability);
						counter++;
					}
					if (usedFields[40]) {
						sqlCmd.CreateParameter("@ssEmployabilityVisible", DbType.Boolean, ssENProgressReportSection.ssEmployabilityVisible);
						counter++;
					}
					if (usedFields[41]) {
						if ((ssENProgressReportSection.ssEmployabilityUpdatesdBy==0)) {
							sqlCmd.CreateParameter("@ssEmployabilityUpdatesdBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssEmployabilityUpdatesdBy", DbType.Int32, ssENProgressReportSection.ssEmployabilityUpdatesdBy);
						}
						counter++;
					}
					if (usedFields[42]) {
						sqlCmd.CreateParameter("@ssEmployabilityUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssEmployabilityUpdatedOn);
						counter++;
					}
					if (usedFields[43]) {
						sqlCmd.CreateParameter("@ssEmployabilityCompleted", DbType.Boolean, ssENProgressReportSection.ssEmployabilityCompleted);
						counter++;
					}
					if (usedFields[44]) {
						sqlCmd.CreateParameter("@ssWorkExperience", DbType.String, ssENProgressReportSection.ssWorkExperience);
						counter++;
					}
					if (usedFields[45]) {
						sqlCmd.CreateParameter("@ssWorkExperienceVisible", DbType.Boolean, ssENProgressReportSection.ssWorkExperienceVisible);
						counter++;
					}
					if (usedFields[46]) {
						if ((ssENProgressReportSection.ssWorkExperienceUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssWorkExperienceUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssWorkExperienceUpdatedBy", DbType.Int32, ssENProgressReportSection.ssWorkExperienceUpdatedBy);
						}
						counter++;
					}
					if (usedFields[47]) {
						sqlCmd.CreateParameter("@ssWorkExperienceUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssWorkExperienceUpdatedOn);
						counter++;
					}
					if (usedFields[48]) {
						sqlCmd.CreateParameter("@ssWorkExperienceCompleted", DbType.Boolean, ssENProgressReportSection.ssWorkExperienceCompleted);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[COURSEOUTLINEVISIBLE] = [COURSEOUTLINEVISIBLE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENProgressReportSectionssId", DbType.Int32, ssENProgressReportSection.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateProgressReportSection (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENProgressReportSectionEntity.LocalViewName(null, null) + " (" +
						 " [GROUP]" +
						 ", [CREATEDBY]" +
						 ", [CREATEDON]" +
						 ", [COURSEOUTLINE]" +
						 ", [COURSEOUTLINEVISIBLE]" +
						 ", [COURSEOUTLINEUPDATEDBY]" +
						 ", [COURSEOUTLINEUPDATEDON]" +
						 ", [COURSEOUTLINECOMPLETED]" +
						 ", [KEYSTRENGTHS]" +
						 ", [KEYSTRENGTHSVISIBLE]" +
						 ", [KEYSTRENGTHSUPDATEDBY]" +
						 ", [KEYSTRENGTHSUPDATEDON]" +
						 ", [KEYSTRENGTHSCOMPLETED]" +
						 ", [AREASFORDEVELOPMENT]" +
						 ", [AREASFORDEVELOPMENTVISIBLE]" +
						 ", [AREASFORDEVELOPMENTUPDATEDBY]" +
						 ", [AREASFORDEVELOPMENTUPDATEDON]" +
						 ", [AREASFORDEVELOPMENTCOMPLETED]" +
						 ", [PREDICTEDOUTCOME]" +
						 ", [PREDICTEDOUTCOMEVISIBLE]" +
						 ", [PREDICTEDOUTCOMEUPDATEDBY]" +
						 ", [PREDICTEDOUTCOMEUPDATEDON]" +
						 ", [PREDICTEDOUTCOMECOMPLETED]" +
						 ", [ATTENDANCE]" +
						 ", [ATTENDANCEVISIBLE]" +
						 ", [ATTENDANCEUPDATEDBY]" +
						 ", [ATTENDANCEUPDATEDON]" +
						 ", [ATTENDANCECOMPLETED]" +
						 ", [COURSECOORDINATORSUMMARY]" +
						 ", [COURSECOORDINATORSUMMARYVISI]" +
						 ", [COURSECOORDINATORUPDATEDBY]" +
						 ", [COURSECOORDINATORUPDATEDON]" +
						 ", [COURSECOORDINATORCOMPLETED]" +
						 ", [STUDYPROGRAMMEOVERVIEW]" +
						 ", [STUDYPROGRAMMEOVERVIEWVISIBL]" +
						 ", [STUDYPROGRAMMEUPDATEDBY]" +
						 ", [STUDYPROGRAMMEUPDATEDON]" +
						 ", [STUDYPROGRAMMECOMPLETED]" +
						 ", [EMPLOYABILITY]" +
						 ", [EMPLOYABILITYVISIBLE]" +
						 ", [EMPLOYABILITYUPDATESDBY]" +
						 ", [EMPLOYABILITYUPDATEDON]" +
						 ", [EMPLOYABILITYCOMPLETED]" +
						 ", [WORKEXPERIENCE]" +
						 ", [WORKEXPERIENCEVISIBLE]" +
						 ", [WORKEXPERIENCEUPDATEDBY]" +
						 ", [WORKEXPERIENCEUPDATEDON]" +
						 ", [WORKEXPERIENCECOMPLETED]" +
						 " ) VALUES (" +
						 " @ssGroup" +
						 ", @ssCreatedBy" +
						 ", @ssCreatedOn" +
						 ", @ssCourseOutline" +
						 ", @ssCourseOutlineVisible" +
						 ", @ssCourseOutlineUpdatedBy" +
						 ", @ssCourseOutlineUpdatedOn" +
						 ", @ssCourseOutlineCompleted" +
						 ", @ssKeyStrengths" +
						 ", @ssKeyStrengthsVisible" +
						 ", @ssKeyStrengthsUpdatedBy" +
						 ", @ssKeyStrengthsUpdatedOn" +
						 ", @ssKeyStrengthsCompleted" +
						 ", @ssAreasForDevelopment" +
						 ", @ssAreasForDevelopmentVisible" +
						 ", @ssAreasForDevelopmentUpdatedBy" +
						 ", @ssAreasForDevelopmentUpdatedOn" +
						 ", @ssAreasForDevelopmentCompleted" +
						 ", @ssPredictedOutcome" +
						 ", @ssPredictedOutcomeVisible" +
						 ", @ssPredictedOutcomeUpdatedBy" +
						 ", @ssPredictedOutcomeUpdatedOn" +
						 ", @ssPredictedOutcomeCompleted" +
						 ", @ssAttendance" +
						 ", @ssAttendanceVisible" +
						 ", @ssAttendanceUpdatedBy" +
						 ", @ssAttendanceUpdatedOn" +
						 ", @ssAttendanceCompleted" +
						 ", @ssCourseCoordinatorSummary" +
						 ", @ssCourseCoordinatorSummaryVisi" +
						 ", @ssCourseCoordinatorUpdatedBy" +
						 ", @ssCourseCoordinatorUpdatedOn" +
						 ", @ssCourseCoordinatorCompleted" +
						 ", @ssStudyProgrammeOverview" +
						 ", @ssStudyProgrammeOverviewVisibl" +
						 ", @ssStudyProgrammeUpdatedBy" +
						 ", @ssStudyProgrammeUpdatedOn" +
						 ", @ssStudyProgrammeCompleted" +
						 ", @ssEmployability" +
						 ", @ssEmployabilityVisible" +
						 ", @ssEmployabilityUpdatesdBy" +
						 ", @ssEmployabilityUpdatedOn" +
						 ", @ssEmployabilityCompleted" +
						 ", @ssWorkExperience" +
						 ", @ssWorkExperienceVisible" +
						 ", @ssWorkExperienceUpdatedBy" +
						 ", @ssWorkExperienceUpdatedOn" +
						 ", @ssWorkExperienceCompleted" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENProgressReportSection.ssGroup==0)) {
							insertSqlCmd.CreateParameter("@ssGroup", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssGroup", DbType.Int32, ssENProgressReportSection.ssGroup);
						}
						if ((ssENProgressReportSection.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENProgressReportSection.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENProgressReportSection.ssCreatedOn);
						insertSqlCmd.CreateParameter("@ssCourseOutline", DbType.String, ssENProgressReportSection.ssCourseOutline);
						insertSqlCmd.CreateParameter("@ssCourseOutlineVisible", DbType.Boolean, ssENProgressReportSection.ssCourseOutlineVisible);
						if ((ssENProgressReportSection.ssCourseOutlineUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCourseOutlineUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCourseOutlineUpdatedBy", DbType.Int32, ssENProgressReportSection.ssCourseOutlineUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssCourseOutlineUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssCourseOutlineUpdatedOn);
						insertSqlCmd.CreateParameter("@ssCourseOutlineCompleted", DbType.Boolean, ssENProgressReportSection.ssCourseOutlineCompleted);
						insertSqlCmd.CreateParameter("@ssKeyStrengths", DbType.String, ssENProgressReportSection.ssKeyStrengths);
						insertSqlCmd.CreateParameter("@ssKeyStrengthsVisible", DbType.Boolean, ssENProgressReportSection.ssKeyStrengthsVisible);
						if ((ssENProgressReportSection.ssKeyStrengthsUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssKeyStrengthsUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssKeyStrengthsUpdatedBy", DbType.Int32, ssENProgressReportSection.ssKeyStrengthsUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssKeyStrengthsUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssKeyStrengthsUpdatedOn);
						insertSqlCmd.CreateParameter("@ssKeyStrengthsCompleted", DbType.Boolean, ssENProgressReportSection.ssKeyStrengthsCompleted);
						insertSqlCmd.CreateParameter("@ssAreasForDevelopment", DbType.String, ssENProgressReportSection.ssAreasForDevelopment);
						insertSqlCmd.CreateParameter("@ssAreasForDevelopmentVisible", DbType.Boolean, ssENProgressReportSection.ssAreasForDevelopmentVisible);
						if ((ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedBy", DbType.Int32, ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn);
						insertSqlCmd.CreateParameter("@ssAreasForDevelopmentCompleted", DbType.Boolean, ssENProgressReportSection.ssAreasForDevelopmentCompleted);
						insertSqlCmd.CreateParameter("@ssPredictedOutcome", DbType.String, ssENProgressReportSection.ssPredictedOutcome);
						insertSqlCmd.CreateParameter("@ssPredictedOutcomeVisible", DbType.Boolean, ssENProgressReportSection.ssPredictedOutcomeVisible);
						if ((ssENProgressReportSection.ssPredictedOutcomeUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedBy", DbType.Int32, ssENProgressReportSection.ssPredictedOutcomeUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssPredictedOutcomeUpdatedOn);
						insertSqlCmd.CreateParameter("@ssPredictedOutcomeCompleted", DbType.Boolean, ssENProgressReportSection.ssPredictedOutcomeCompleted);
						insertSqlCmd.CreateParameter("@ssAttendance", DbType.String, ssENProgressReportSection.ssAttendance);
						insertSqlCmd.CreateParameter("@ssAttendanceVisible", DbType.Boolean, ssENProgressReportSection.ssAttendanceVisible);
						if ((ssENProgressReportSection.ssAttendanceUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssAttendanceUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssAttendanceUpdatedBy", DbType.Int32, ssENProgressReportSection.ssAttendanceUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssAttendanceUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssAttendanceUpdatedOn);
						insertSqlCmd.CreateParameter("@ssAttendanceCompleted", DbType.Boolean, ssENProgressReportSection.ssAttendanceCompleted);
						insertSqlCmd.CreateParameter("@ssCourseCoordinatorSummary", DbType.String, ssENProgressReportSection.ssCourseCoordinatorSummary);
						insertSqlCmd.CreateParameter("@ssCourseCoordinatorSummaryVisi", DbType.Boolean, ssENProgressReportSection.ssCourseCoordinatorSummaryVisi);
						if ((ssENProgressReportSection.ssCourseCoordinatorUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedBy", DbType.Int32, ssENProgressReportSection.ssCourseCoordinatorUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssCourseCoordinatorUpdatedOn);
						insertSqlCmd.CreateParameter("@ssCourseCoordinatorCompleted", DbType.Boolean, ssENProgressReportSection.ssCourseCoordinatorCompleted);
						insertSqlCmd.CreateParameter("@ssStudyProgrammeOverview", DbType.String, ssENProgressReportSection.ssStudyProgrammeOverview);
						insertSqlCmd.CreateParameter("@ssStudyProgrammeOverviewVisibl", DbType.Boolean, ssENProgressReportSection.ssStudyProgrammeOverviewVisibl);
						if ((ssENProgressReportSection.ssStudyProgrammeUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssStudyProgrammeUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudyProgrammeUpdatedBy", DbType.Int32, ssENProgressReportSection.ssStudyProgrammeUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssStudyProgrammeUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssStudyProgrammeUpdatedOn);
						insertSqlCmd.CreateParameter("@ssStudyProgrammeCompleted", DbType.Boolean, ssENProgressReportSection.ssStudyProgrammeCompleted);
						insertSqlCmd.CreateParameter("@ssEmployability", DbType.String, ssENProgressReportSection.ssEmployability);
						insertSqlCmd.CreateParameter("@ssEmployabilityVisible", DbType.Boolean, ssENProgressReportSection.ssEmployabilityVisible);
						if ((ssENProgressReportSection.ssEmployabilityUpdatesdBy==0)) {
							insertSqlCmd.CreateParameter("@ssEmployabilityUpdatesdBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssEmployabilityUpdatesdBy", DbType.Int32, ssENProgressReportSection.ssEmployabilityUpdatesdBy);
						}
						insertSqlCmd.CreateParameter("@ssEmployabilityUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssEmployabilityUpdatedOn);
						insertSqlCmd.CreateParameter("@ssEmployabilityCompleted", DbType.Boolean, ssENProgressReportSection.ssEmployabilityCompleted);
						insertSqlCmd.CreateParameter("@ssWorkExperience", DbType.String, ssENProgressReportSection.ssWorkExperience);
						insertSqlCmd.CreateParameter("@ssWorkExperienceVisible", DbType.Boolean, ssENProgressReportSection.ssWorkExperienceVisible);
						if ((ssENProgressReportSection.ssWorkExperienceUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssWorkExperienceUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssWorkExperienceUpdatedBy", DbType.Int32, ssENProgressReportSection.ssWorkExperienceUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssWorkExperienceUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssWorkExperienceUpdatedOn);
						insertSqlCmd.CreateParameter("@ssWorkExperienceCompleted", DbType.Boolean, ssENProgressReportSection.ssWorkExperienceCompleted);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateProgressReportSection", true), typeof(int));
					} else {
						outParamId = ssENProgressReportSection.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteProgressReportSection
		/// </summary>

		public static void DeleteProgressReportSection(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENProgressReportSectionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteProgressReportSection", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetProgressReportSection
		/// </summary>

		public static void GetProgressReportSection(HeContext heContext, int inParamId, out RCProgressReportSectionRecord outParamRecord) {
			outParamRecord = new RCProgressReportSectionRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [GROUP]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 ", [COURSEOUTLINE]" +
					 ", [COURSEOUTLINEVISIBLE]" +
					 ", [COURSEOUTLINEUPDATEDBY]" +
					 ", [COURSEOUTLINEUPDATEDON]" +
					 ", [COURSEOUTLINECOMPLETED]" +
					 ", [KEYSTRENGTHS]" +
					 ", [KEYSTRENGTHSVISIBLE]" +
					 ", [KEYSTRENGTHSUPDATEDBY]" +
					 ", [KEYSTRENGTHSUPDATEDON]" +
					 ", [KEYSTRENGTHSCOMPLETED]" +
					 ", [AREASFORDEVELOPMENT]" +
					 ", [AREASFORDEVELOPMENTVISIBLE]" +
					 ", [AREASFORDEVELOPMENTUPDATEDBY]" +
					 ", [AREASFORDEVELOPMENTUPDATEDON]" +
					 ", [AREASFORDEVELOPMENTCOMPLETED]" +
					 ", [PREDICTEDOUTCOME]" +
					 ", [PREDICTEDOUTCOMEVISIBLE]" +
					 ", [PREDICTEDOUTCOMEUPDATEDBY]" +
					 ", [PREDICTEDOUTCOMEUPDATEDON]" +
					 ", [PREDICTEDOUTCOMECOMPLETED]" +
					 ", [ATTENDANCE]" +
					 ", [ATTENDANCEVISIBLE]" +
					 ", [ATTENDANCEUPDATEDBY]" +
					 ", [ATTENDANCEUPDATEDON]" +
					 ", [ATTENDANCECOMPLETED]" +
					 ", [COURSECOORDINATORSUMMARY]" +
					 ", [COURSECOORDINATORSUMMARYVISI]" +
					 ", [COURSECOORDINATORUPDATEDBY]" +
					 ", [COURSECOORDINATORUPDATEDON]" +
					 ", [COURSECOORDINATORCOMPLETED]" +
					 ", [STUDYPROGRAMMEOVERVIEW]" +
					 ", [STUDYPROGRAMMEOVERVIEWVISIBL]" +
					 ", [STUDYPROGRAMMEUPDATEDBY]" +
					 ", [STUDYPROGRAMMEUPDATEDON]" +
					 ", [STUDYPROGRAMMECOMPLETED]" +
					 ", [EMPLOYABILITY]" +
					 ", [EMPLOYABILITYVISIBLE]" +
					 ", [EMPLOYABILITYUPDATESDBY]" +
					 ", [EMPLOYABILITYUPDATEDON]" +
					 ", [EMPLOYABILITYCOMPLETED]" +
					 ", [WORKEXPERIENCE]" +
					 ", [WORKEXPERIENCEVISIBLE]" +
					 ", [WORKEXPERIENCEUPDATEDBY]" +
					 ", [WORKEXPERIENCEUPDATEDON]" +
					 ", [WORKEXPERIENCECOMPLETED]" +
					 " FROM " + ENProgressReportSectionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetProgressReportSection", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(49, false)
							}
							;
						} else
						throw new DataBaseException(ENProgressReportSectionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetProgressReportSectionForUpdate
		/// </summary>

		public static void GetProgressReportSectionForUpdate(HeContext heContext, int inParamId, out RCProgressReportSectionRecord outParamRecord) {
			outParamRecord = new RCProgressReportSectionRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [GROUP]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 ", [COURSEOUTLINE]" +
					 ", [COURSEOUTLINEVISIBLE]" +
					 ", [COURSEOUTLINEUPDATEDBY]" +
					 ", [COURSEOUTLINEUPDATEDON]" +
					 ", [COURSEOUTLINECOMPLETED]" +
					 ", [KEYSTRENGTHS]" +
					 ", [KEYSTRENGTHSVISIBLE]" +
					 ", [KEYSTRENGTHSUPDATEDBY]" +
					 ", [KEYSTRENGTHSUPDATEDON]" +
					 ", [KEYSTRENGTHSCOMPLETED]" +
					 ", [AREASFORDEVELOPMENT]" +
					 ", [AREASFORDEVELOPMENTVISIBLE]" +
					 ", [AREASFORDEVELOPMENTUPDATEDBY]" +
					 ", [AREASFORDEVELOPMENTUPDATEDON]" +
					 ", [AREASFORDEVELOPMENTCOMPLETED]" +
					 ", [PREDICTEDOUTCOME]" +
					 ", [PREDICTEDOUTCOMEVISIBLE]" +
					 ", [PREDICTEDOUTCOMEUPDATEDBY]" +
					 ", [PREDICTEDOUTCOMEUPDATEDON]" +
					 ", [PREDICTEDOUTCOMECOMPLETED]" +
					 ", [ATTENDANCE]" +
					 ", [ATTENDANCEVISIBLE]" +
					 ", [ATTENDANCEUPDATEDBY]" +
					 ", [ATTENDANCEUPDATEDON]" +
					 ", [ATTENDANCECOMPLETED]" +
					 ", [COURSECOORDINATORSUMMARY]" +
					 ", [COURSECOORDINATORSUMMARYVISI]" +
					 ", [COURSECOORDINATORUPDATEDBY]" +
					 ", [COURSECOORDINATORUPDATEDON]" +
					 ", [COURSECOORDINATORCOMPLETED]" +
					 ", [STUDYPROGRAMMEOVERVIEW]" +
					 ", [STUDYPROGRAMMEOVERVIEWVISIBL]" +
					 ", [STUDYPROGRAMMEUPDATEDBY]" +
					 ", [STUDYPROGRAMMEUPDATEDON]" +
					 ", [STUDYPROGRAMMECOMPLETED]" +
					 ", [EMPLOYABILITY]" +
					 ", [EMPLOYABILITYVISIBLE]" +
					 ", [EMPLOYABILITYUPDATESDBY]" +
					 ", [EMPLOYABILITYUPDATEDON]" +
					 ", [EMPLOYABILITYCOMPLETED]" +
					 ", [WORKEXPERIENCE]" +
					 ", [WORKEXPERIENCEVISIBLE]" +
					 ", [WORKEXPERIENCEUPDATEDBY]" +
					 ", [WORKEXPERIENCEUPDATEDON]" +
					 ", [WORKEXPERIENCECOMPLETED]" +
					 "FROM " + ENProgressReportSectionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetProgressReportSectionForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(49, false)
							}
							;
						} else
						throw new DataBaseException(ENProgressReportSectionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateProgressReportSection
		/// </summary>

		public static void UpdateProgressReportSection(HeContext heContext, BitArray usedFields, RCProgressReportSectionRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionEntity.eSpaceId;
				ENProgressReportSectionEntityRecord ssENProgressReportSection = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(49, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENProgressReportSectionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUP] = @ssGroup"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEOUTLINE] = @ssCourseOutline"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEOUTLINEVISIBLE] = @ssCourseOutlineVisible"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEOUTLINEUPDATEDBY] = @ssCourseOutlineUpdatedBy"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEOUTLINEUPDATEDON] = @ssCourseOutlineUpdatedOn"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEOUTLINECOMPLETED] = @ssCourseOutlineCompleted"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[KEYSTRENGTHS] = @ssKeyStrengths"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[KEYSTRENGTHSVISIBLE] = @ssKeyStrengthsVisible"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[KEYSTRENGTHSUPDATEDBY] = @ssKeyStrengthsUpdatedBy"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[KEYSTRENGTHSUPDATEDON] = @ssKeyStrengthsUpdatedOn"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[KEYSTRENGTHSCOMPLETED] = @ssKeyStrengthsCompleted"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AREASFORDEVELOPMENT] = @ssAreasForDevelopment"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AREASFORDEVELOPMENTVISIBLE] = @ssAreasForDevelopmentVisible"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AREASFORDEVELOPMENTUPDATEDBY] = @ssAreasForDevelopmentUpdatedBy"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AREASFORDEVELOPMENTUPDATEDON] = @ssAreasForDevelopmentUpdatedOn"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[AREASFORDEVELOPMENTCOMPLETED] = @ssAreasForDevelopmentCompleted"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREDICTEDOUTCOME] = @ssPredictedOutcome"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREDICTEDOUTCOMEVISIBLE] = @ssPredictedOutcomeVisible"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREDICTEDOUTCOMEUPDATEDBY] = @ssPredictedOutcomeUpdatedBy"): parameters);
					parameters = (usedFields[22] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREDICTEDOUTCOMEUPDATEDON] = @ssPredictedOutcomeUpdatedOn"): parameters);
					parameters = (usedFields[23] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREDICTEDOUTCOMECOMPLETED] = @ssPredictedOutcomeCompleted"): parameters);
					parameters = (usedFields[24] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ATTENDANCE] = @ssAttendance"): parameters);
					parameters = (usedFields[25] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ATTENDANCEVISIBLE] = @ssAttendanceVisible"): parameters);
					parameters = (usedFields[26] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ATTENDANCEUPDATEDBY] = @ssAttendanceUpdatedBy"): parameters);
					parameters = (usedFields[27] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ATTENDANCEUPDATEDON] = @ssAttendanceUpdatedOn"): parameters);
					parameters = (usedFields[28] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ATTENDANCECOMPLETED] = @ssAttendanceCompleted"): parameters);
					parameters = (usedFields[29] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSECOORDINATORSUMMARY] = @ssCourseCoordinatorSummary"): parameters);
					parameters = (usedFields[30] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSECOORDINATORSUMMARYVISI] = @ssCourseCoordinatorSummaryVisi"): parameters);
					parameters = (usedFields[31] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSECOORDINATORUPDATEDBY] = @ssCourseCoordinatorUpdatedBy"): parameters);
					parameters = (usedFields[32] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSECOORDINATORUPDATEDON] = @ssCourseCoordinatorUpdatedOn"): parameters);
					parameters = (usedFields[33] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSECOORDINATORCOMPLETED] = @ssCourseCoordinatorCompleted"): parameters);
					parameters = (usedFields[34] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDYPROGRAMMEOVERVIEW] = @ssStudyProgrammeOverview"): parameters);
					parameters = (usedFields[35] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDYPROGRAMMEOVERVIEWVISIBL] = @ssStudyProgrammeOverviewVisibl"): parameters);
					parameters = (usedFields[36] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDYPROGRAMMEUPDATEDBY] = @ssStudyProgrammeUpdatedBy"): parameters);
					parameters = (usedFields[37] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDYPROGRAMMEUPDATEDON] = @ssStudyProgrammeUpdatedOn"): parameters);
					parameters = (usedFields[38] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDYPROGRAMMECOMPLETED] = @ssStudyProgrammeCompleted"): parameters);
					parameters = (usedFields[39] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMPLOYABILITY] = @ssEmployability"): parameters);
					parameters = (usedFields[40] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMPLOYABILITYVISIBLE] = @ssEmployabilityVisible"): parameters);
					parameters = (usedFields[41] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMPLOYABILITYUPDATESDBY] = @ssEmployabilityUpdatesdBy"): parameters);
					parameters = (usedFields[42] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMPLOYABILITYUPDATEDON] = @ssEmployabilityUpdatedOn"): parameters);
					parameters = (usedFields[43] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMPLOYABILITYCOMPLETED] = @ssEmployabilityCompleted"): parameters);
					parameters = (usedFields[44] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WORKEXPERIENCE] = @ssWorkExperience"): parameters);
					parameters = (usedFields[45] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WORKEXPERIENCEVISIBLE] = @ssWorkExperienceVisible"): parameters);
					parameters = (usedFields[46] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WORKEXPERIENCEUPDATEDBY] = @ssWorkExperienceUpdatedBy"): parameters);
					parameters = (usedFields[47] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WORKEXPERIENCEUPDATEDON] = @ssWorkExperienceUpdatedOn"): parameters);
					parameters = (usedFields[48] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[WORKEXPERIENCECOMPLETED] = @ssWorkExperienceCompleted"): parameters);
					string whereCondition = " WHERE [ID] = @ssENProgressReportSectionssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENProgressReportSection.ssGroup==0)) {
							sqlCmd.CreateParameter("@ssGroup", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssGroup", DbType.Int32, ssENProgressReportSection.ssGroup);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENProgressReportSection.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENProgressReportSection.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENProgressReportSection.ssCreatedOn);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssCourseOutline", DbType.String, ssENProgressReportSection.ssCourseOutline);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssCourseOutlineVisible", DbType.Boolean, ssENProgressReportSection.ssCourseOutlineVisible);
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENProgressReportSection.ssCourseOutlineUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssCourseOutlineUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCourseOutlineUpdatedBy", DbType.Int32, ssENProgressReportSection.ssCourseOutlineUpdatedBy);
						}
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssCourseOutlineUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssCourseOutlineUpdatedOn);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssCourseOutlineCompleted", DbType.Boolean, ssENProgressReportSection.ssCourseOutlineCompleted);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssKeyStrengths", DbType.String, ssENProgressReportSection.ssKeyStrengths);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssKeyStrengthsVisible", DbType.Boolean, ssENProgressReportSection.ssKeyStrengthsVisible);
						counter++;
					}
					if (usedFields[11]) {
						if ((ssENProgressReportSection.ssKeyStrengthsUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssKeyStrengthsUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssKeyStrengthsUpdatedBy", DbType.Int32, ssENProgressReportSection.ssKeyStrengthsUpdatedBy);
						}
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssKeyStrengthsUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssKeyStrengthsUpdatedOn);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssKeyStrengthsCompleted", DbType.Boolean, ssENProgressReportSection.ssKeyStrengthsCompleted);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssAreasForDevelopment", DbType.String, ssENProgressReportSection.ssAreasForDevelopment);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssAreasForDevelopmentVisible", DbType.Boolean, ssENProgressReportSection.ssAreasForDevelopmentVisible);
						counter++;
					}
					if (usedFields[16]) {
						if ((ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedBy", DbType.Int32, ssENProgressReportSection.ssAreasForDevelopmentUpdatedBy);
						}
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssAreasForDevelopmentUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssAreasForDevelopmentUpdatedOn);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssAreasForDevelopmentCompleted", DbType.Boolean, ssENProgressReportSection.ssAreasForDevelopmentCompleted);
						counter++;
					}
					if (usedFields[19]) {
						sqlCmd.CreateParameter("@ssPredictedOutcome", DbType.String, ssENProgressReportSection.ssPredictedOutcome);
						counter++;
					}
					if (usedFields[20]) {
						sqlCmd.CreateParameter("@ssPredictedOutcomeVisible", DbType.Boolean, ssENProgressReportSection.ssPredictedOutcomeVisible);
						counter++;
					}
					if (usedFields[21]) {
						if ((ssENProgressReportSection.ssPredictedOutcomeUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedBy", DbType.Int32, ssENProgressReportSection.ssPredictedOutcomeUpdatedBy);
						}
						counter++;
					}
					if (usedFields[22]) {
						sqlCmd.CreateParameter("@ssPredictedOutcomeUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssPredictedOutcomeUpdatedOn);
						counter++;
					}
					if (usedFields[23]) {
						sqlCmd.CreateParameter("@ssPredictedOutcomeCompleted", DbType.Boolean, ssENProgressReportSection.ssPredictedOutcomeCompleted);
						counter++;
					}
					if (usedFields[24]) {
						sqlCmd.CreateParameter("@ssAttendance", DbType.String, ssENProgressReportSection.ssAttendance);
						counter++;
					}
					if (usedFields[25]) {
						sqlCmd.CreateParameter("@ssAttendanceVisible", DbType.Boolean, ssENProgressReportSection.ssAttendanceVisible);
						counter++;
					}
					if (usedFields[26]) {
						if ((ssENProgressReportSection.ssAttendanceUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssAttendanceUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssAttendanceUpdatedBy", DbType.Int32, ssENProgressReportSection.ssAttendanceUpdatedBy);
						}
						counter++;
					}
					if (usedFields[27]) {
						sqlCmd.CreateParameter("@ssAttendanceUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssAttendanceUpdatedOn);
						counter++;
					}
					if (usedFields[28]) {
						sqlCmd.CreateParameter("@ssAttendanceCompleted", DbType.Boolean, ssENProgressReportSection.ssAttendanceCompleted);
						counter++;
					}
					if (usedFields[29]) {
						sqlCmd.CreateParameter("@ssCourseCoordinatorSummary", DbType.String, ssENProgressReportSection.ssCourseCoordinatorSummary);
						counter++;
					}
					if (usedFields[30]) {
						sqlCmd.CreateParameter("@ssCourseCoordinatorSummaryVisi", DbType.Boolean, ssENProgressReportSection.ssCourseCoordinatorSummaryVisi);
						counter++;
					}
					if (usedFields[31]) {
						if ((ssENProgressReportSection.ssCourseCoordinatorUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedBy", DbType.Int32, ssENProgressReportSection.ssCourseCoordinatorUpdatedBy);
						}
						counter++;
					}
					if (usedFields[32]) {
						sqlCmd.CreateParameter("@ssCourseCoordinatorUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssCourseCoordinatorUpdatedOn);
						counter++;
					}
					if (usedFields[33]) {
						sqlCmd.CreateParameter("@ssCourseCoordinatorCompleted", DbType.Boolean, ssENProgressReportSection.ssCourseCoordinatorCompleted);
						counter++;
					}
					if (usedFields[34]) {
						sqlCmd.CreateParameter("@ssStudyProgrammeOverview", DbType.String, ssENProgressReportSection.ssStudyProgrammeOverview);
						counter++;
					}
					if (usedFields[35]) {
						sqlCmd.CreateParameter("@ssStudyProgrammeOverviewVisibl", DbType.Boolean, ssENProgressReportSection.ssStudyProgrammeOverviewVisibl);
						counter++;
					}
					if (usedFields[36]) {
						if ((ssENProgressReportSection.ssStudyProgrammeUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssStudyProgrammeUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudyProgrammeUpdatedBy", DbType.Int32, ssENProgressReportSection.ssStudyProgrammeUpdatedBy);
						}
						counter++;
					}
					if (usedFields[37]) {
						sqlCmd.CreateParameter("@ssStudyProgrammeUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssStudyProgrammeUpdatedOn);
						counter++;
					}
					if (usedFields[38]) {
						sqlCmd.CreateParameter("@ssStudyProgrammeCompleted", DbType.Boolean, ssENProgressReportSection.ssStudyProgrammeCompleted);
						counter++;
					}
					if (usedFields[39]) {
						sqlCmd.CreateParameter("@ssEmployability", DbType.String, ssENProgressReportSection.ssEmployability);
						counter++;
					}
					if (usedFields[40]) {
						sqlCmd.CreateParameter("@ssEmployabilityVisible", DbType.Boolean, ssENProgressReportSection.ssEmployabilityVisible);
						counter++;
					}
					if (usedFields[41]) {
						if ((ssENProgressReportSection.ssEmployabilityUpdatesdBy==0)) {
							sqlCmd.CreateParameter("@ssEmployabilityUpdatesdBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssEmployabilityUpdatesdBy", DbType.Int32, ssENProgressReportSection.ssEmployabilityUpdatesdBy);
						}
						counter++;
					}
					if (usedFields[42]) {
						sqlCmd.CreateParameter("@ssEmployabilityUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssEmployabilityUpdatedOn);
						counter++;
					}
					if (usedFields[43]) {
						sqlCmd.CreateParameter("@ssEmployabilityCompleted", DbType.Boolean, ssENProgressReportSection.ssEmployabilityCompleted);
						counter++;
					}
					if (usedFields[44]) {
						sqlCmd.CreateParameter("@ssWorkExperience", DbType.String, ssENProgressReportSection.ssWorkExperience);
						counter++;
					}
					if (usedFields[45]) {
						sqlCmd.CreateParameter("@ssWorkExperienceVisible", DbType.Boolean, ssENProgressReportSection.ssWorkExperienceVisible);
						counter++;
					}
					if (usedFields[46]) {
						if ((ssENProgressReportSection.ssWorkExperienceUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssWorkExperienceUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssWorkExperienceUpdatedBy", DbType.Int32, ssENProgressReportSection.ssWorkExperienceUpdatedBy);
						}
						counter++;
					}
					if (usedFields[47]) {
						sqlCmd.CreateParameter("@ssWorkExperienceUpdatedOn", DbType.DateTime, ssENProgressReportSection.ssWorkExperienceUpdatedOn);
						counter++;
					}
					if (usedFields[48]) {
						sqlCmd.CreateParameter("@ssWorkExperienceCompleted", DbType.Boolean, ssENProgressReportSection.ssWorkExperienceCompleted);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[COURSEOUTLINEVISIBLE] = [COURSEOUTLINEVISIBLE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENProgressReportSectionssId", DbType.Int32, ssENProgressReportSection.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateProgressReportSection", true) <= 0)
					throw new DataBaseException(ENProgressReportSectionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENProgressReportSection.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("ProgressReportSection")]
	public class WORCProgressReportSectionRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Group")]
		public int varWSGroup;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime varWSCreatedOn;

		[System.Xml.Serialization.XmlElement("CourseOutline")]
		public string varWSCourseOutline;

		[System.Xml.Serialization.XmlElement("CourseOutlineVisible")]
		public bool varWSCourseOutlineVisible;

		[System.Xml.Serialization.XmlElement("CourseOutlineUpdatedBy")]
		public int varWSCourseOutlineUpdatedBy;

		[System.Xml.Serialization.XmlElement("CourseOutlineUpdatedOn")]
		public DateTime varWSCourseOutlineUpdatedOn;

		[System.Xml.Serialization.XmlElement("CourseOutlineCompleted")]
		public bool varWSCourseOutlineCompleted;

		[System.Xml.Serialization.XmlElement("KeyStrengths")]
		public string varWSKeyStrengths;

		[System.Xml.Serialization.XmlElement("KeyStrengthsVisible")]
		public bool varWSKeyStrengthsVisible;

		[System.Xml.Serialization.XmlElement("KeyStrengthsUpdatedBy")]
		public int varWSKeyStrengthsUpdatedBy;

		[System.Xml.Serialization.XmlElement("KeyStrengthsUpdatedOn")]
		public DateTime varWSKeyStrengthsUpdatedOn;

		[System.Xml.Serialization.XmlElement("KeyStrengthsCompleted")]
		public bool varWSKeyStrengthsCompleted;

		[System.Xml.Serialization.XmlElement("AreasForDevelopment")]
		public string varWSAreasForDevelopment;

		[System.Xml.Serialization.XmlElement("AreasForDevelopmentVisible")]
		public bool varWSAreasForDevelopmentVisible;

		[System.Xml.Serialization.XmlElement("AreasForDevelopmentUpdatedBy")]
		public int varWSAreasForDevelopmentUpdatedBy;

		[System.Xml.Serialization.XmlElement("AreasForDevelopmentUpdatedOn")]
		public DateTime varWSAreasForDevelopmentUpdatedOn;

		[System.Xml.Serialization.XmlElement("AreasForDevelopmentCompleted")]
		public bool varWSAreasForDevelopmentCompleted;

		[System.Xml.Serialization.XmlElement("PredictedOutcome")]
		public string varWSPredictedOutcome;

		[System.Xml.Serialization.XmlElement("PredictedOutcomeVisible")]
		public bool varWSPredictedOutcomeVisible;

		[System.Xml.Serialization.XmlElement("PredictedOutcomeUpdatedBy")]
		public int varWSPredictedOutcomeUpdatedBy;

		[System.Xml.Serialization.XmlElement("PredictedOutcomeUpdatedOn")]
		public DateTime varWSPredictedOutcomeUpdatedOn;

		[System.Xml.Serialization.XmlElement("PredictedOutcomeCompleted")]
		public bool varWSPredictedOutcomeCompleted;

		[System.Xml.Serialization.XmlElement("Attendance")]
		public string varWSAttendance;

		[System.Xml.Serialization.XmlElement("AttendanceVisible")]
		public bool varWSAttendanceVisible;

		[System.Xml.Serialization.XmlElement("AttendanceUpdatedBy")]
		public int varWSAttendanceUpdatedBy;

		[System.Xml.Serialization.XmlElement("AttendanceUpdatedOn")]
		public DateTime varWSAttendanceUpdatedOn;

		[System.Xml.Serialization.XmlElement("AttendanceCompleted")]
		public bool varWSAttendanceCompleted;

		[System.Xml.Serialization.XmlElement("CourseCoordinatorSummary")]
		public string varWSCourseCoordinatorSummary;

		[System.Xml.Serialization.XmlElement("CourseCoordinatorSummaryVisi")]
		public bool varWSCourseCoordinatorSummaryVisi;

		[System.Xml.Serialization.XmlElement("CourseCoordinatorUpdatedBy")]
		public int varWSCourseCoordinatorUpdatedBy;

		[System.Xml.Serialization.XmlElement("CourseCoordinatorUpdatedOn")]
		public DateTime varWSCourseCoordinatorUpdatedOn;

		[System.Xml.Serialization.XmlElement("CourseCoordinatorCompleted")]
		public bool varWSCourseCoordinatorCompleted;

		[System.Xml.Serialization.XmlElement("StudyProgrammeOverview")]
		public string varWSStudyProgrammeOverview;

		[System.Xml.Serialization.XmlElement("StudyProgrammeOverviewVisibl")]
		public bool varWSStudyProgrammeOverviewVisibl;

		[System.Xml.Serialization.XmlElement("StudyProgrammeUpdatedBy")]
		public int varWSStudyProgrammeUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudyProgrammeUpdatedOn")]
		public DateTime varWSStudyProgrammeUpdatedOn;

		[System.Xml.Serialization.XmlElement("StudyProgrammeCompleted")]
		public bool varWSStudyProgrammeCompleted;

		[System.Xml.Serialization.XmlElement("Employability")]
		public string varWSEmployability;

		[System.Xml.Serialization.XmlElement("EmployabilityVisible")]
		public bool varWSEmployabilityVisible;

		[System.Xml.Serialization.XmlElement("EmployabilityUpdatesdBy")]
		public int varWSEmployabilityUpdatesdBy;

		[System.Xml.Serialization.XmlElement("EmployabilityUpdatedOn")]
		public DateTime varWSEmployabilityUpdatedOn;

		[System.Xml.Serialization.XmlElement("EmployabilityCompleted")]
		public bool varWSEmployabilityCompleted;

		[System.Xml.Serialization.XmlElement("WorkExperience")]
		public string varWSWorkExperience;

		[System.Xml.Serialization.XmlElement("WorkExperienceVisible")]
		public bool varWSWorkExperienceVisible;

		[System.Xml.Serialization.XmlElement("WorkExperienceUpdatedBy")]
		public int varWSWorkExperienceUpdatedBy;

		[System.Xml.Serialization.XmlElement("WorkExperienceUpdatedOn")]
		public DateTime varWSWorkExperienceUpdatedOn;

		[System.Xml.Serialization.XmlElement("WorkExperienceCompleted")]
		public bool varWSWorkExperienceCompleted;

		public WORCProgressReportSectionRecord() {
			varWSId = (int) 0;
			varWSGroup = (int) 0;
			varWSCreatedBy = (int) 0;
			varWSCreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCourseOutline = (string) "";
			varWSCourseOutlineVisible = (bool) false;
			varWSCourseOutlineUpdatedBy = (int) 0;
			varWSCourseOutlineUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCourseOutlineCompleted = (bool) false;
			varWSKeyStrengths = (string) "";
			varWSKeyStrengthsVisible = (bool) false;
			varWSKeyStrengthsUpdatedBy = (int) 0;
			varWSKeyStrengthsUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSKeyStrengthsCompleted = (bool) false;
			varWSAreasForDevelopment = (string) "";
			varWSAreasForDevelopmentVisible = (bool) false;
			varWSAreasForDevelopmentUpdatedBy = (int) 0;
			varWSAreasForDevelopmentUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSAreasForDevelopmentCompleted = (bool) false;
			varWSPredictedOutcome = (string) "";
			varWSPredictedOutcomeVisible = (bool) false;
			varWSPredictedOutcomeUpdatedBy = (int) 0;
			varWSPredictedOutcomeUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSPredictedOutcomeCompleted = (bool) false;
			varWSAttendance = (string) "";
			varWSAttendanceVisible = (bool) false;
			varWSAttendanceUpdatedBy = (int) 0;
			varWSAttendanceUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSAttendanceCompleted = (bool) false;
			varWSCourseCoordinatorSummary = (string) "";
			varWSCourseCoordinatorSummaryVisi = (bool) false;
			varWSCourseCoordinatorUpdatedBy = (int) 0;
			varWSCourseCoordinatorUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCourseCoordinatorCompleted = (bool) false;
			varWSStudyProgrammeOverview = (string) "";
			varWSStudyProgrammeOverviewVisibl = (bool) false;
			varWSStudyProgrammeUpdatedBy = (int) 0;
			varWSStudyProgrammeUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudyProgrammeCompleted = (bool) false;
			varWSEmployability = (string) "";
			varWSEmployabilityVisible = (bool) false;
			varWSEmployabilityUpdatesdBy = (int) 0;
			varWSEmployabilityUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSEmployabilityCompleted = (bool) false;
			varWSWorkExperience = (string) "";
			varWSWorkExperienceVisible = (bool) false;
			varWSWorkExperienceUpdatedBy = (int) 0;
			varWSWorkExperienceUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSWorkExperienceCompleted = (bool) false;
		}

		public WORCProgressReportSectionRecord(ENProgressReportSectionEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSGroup = (int) r.ssGroup;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSCreatedOn = (DateTime) r.ssCreatedOn;
			varWSCourseOutline = BaseAppUtils.RemoveControlChars(r.ssCourseOutline);
			varWSCourseOutlineVisible = (bool) r.ssCourseOutlineVisible;
			varWSCourseOutlineUpdatedBy = (int) r.ssCourseOutlineUpdatedBy;
			varWSCourseOutlineUpdatedOn = (DateTime) r.ssCourseOutlineUpdatedOn;
			varWSCourseOutlineCompleted = (bool) r.ssCourseOutlineCompleted;
			varWSKeyStrengths = BaseAppUtils.RemoveControlChars(r.ssKeyStrengths);
			varWSKeyStrengthsVisible = (bool) r.ssKeyStrengthsVisible;
			varWSKeyStrengthsUpdatedBy = (int) r.ssKeyStrengthsUpdatedBy;
			varWSKeyStrengthsUpdatedOn = (DateTime) r.ssKeyStrengthsUpdatedOn;
			varWSKeyStrengthsCompleted = (bool) r.ssKeyStrengthsCompleted;
			varWSAreasForDevelopment = BaseAppUtils.RemoveControlChars(r.ssAreasForDevelopment);
			varWSAreasForDevelopmentVisible = (bool) r.ssAreasForDevelopmentVisible;
			varWSAreasForDevelopmentUpdatedBy = (int) r.ssAreasForDevelopmentUpdatedBy;
			varWSAreasForDevelopmentUpdatedOn = (DateTime) r.ssAreasForDevelopmentUpdatedOn;
			varWSAreasForDevelopmentCompleted = (bool) r.ssAreasForDevelopmentCompleted;
			varWSPredictedOutcome = BaseAppUtils.RemoveControlChars(r.ssPredictedOutcome);
			varWSPredictedOutcomeVisible = (bool) r.ssPredictedOutcomeVisible;
			varWSPredictedOutcomeUpdatedBy = (int) r.ssPredictedOutcomeUpdatedBy;
			varWSPredictedOutcomeUpdatedOn = (DateTime) r.ssPredictedOutcomeUpdatedOn;
			varWSPredictedOutcomeCompleted = (bool) r.ssPredictedOutcomeCompleted;
			varWSAttendance = BaseAppUtils.RemoveControlChars(r.ssAttendance);
			varWSAttendanceVisible = (bool) r.ssAttendanceVisible;
			varWSAttendanceUpdatedBy = (int) r.ssAttendanceUpdatedBy;
			varWSAttendanceUpdatedOn = (DateTime) r.ssAttendanceUpdatedOn;
			varWSAttendanceCompleted = (bool) r.ssAttendanceCompleted;
			varWSCourseCoordinatorSummary = BaseAppUtils.RemoveControlChars(r.ssCourseCoordinatorSummary);
			varWSCourseCoordinatorSummaryVisi = (bool) r.ssCourseCoordinatorSummaryVisi;
			varWSCourseCoordinatorUpdatedBy = (int) r.ssCourseCoordinatorUpdatedBy;
			varWSCourseCoordinatorUpdatedOn = (DateTime) r.ssCourseCoordinatorUpdatedOn;
			varWSCourseCoordinatorCompleted = (bool) r.ssCourseCoordinatorCompleted;
			varWSStudyProgrammeOverview = BaseAppUtils.RemoveControlChars(r.ssStudyProgrammeOverview);
			varWSStudyProgrammeOverviewVisibl = (bool) r.ssStudyProgrammeOverviewVisibl;
			varWSStudyProgrammeUpdatedBy = (int) r.ssStudyProgrammeUpdatedBy;
			varWSStudyProgrammeUpdatedOn = (DateTime) r.ssStudyProgrammeUpdatedOn;
			varWSStudyProgrammeCompleted = (bool) r.ssStudyProgrammeCompleted;
			varWSEmployability = BaseAppUtils.RemoveControlChars(r.ssEmployability);
			varWSEmployabilityVisible = (bool) r.ssEmployabilityVisible;
			varWSEmployabilityUpdatesdBy = (int) r.ssEmployabilityUpdatesdBy;
			varWSEmployabilityUpdatedOn = (DateTime) r.ssEmployabilityUpdatedOn;
			varWSEmployabilityCompleted = (bool) r.ssEmployabilityCompleted;
			varWSWorkExperience = BaseAppUtils.RemoveControlChars(r.ssWorkExperience);
			varWSWorkExperienceVisible = (bool) r.ssWorkExperienceVisible;
			varWSWorkExperienceUpdatedBy = (int) r.ssWorkExperienceUpdatedBy;
			varWSWorkExperienceUpdatedOn = (DateTime) r.ssWorkExperienceUpdatedOn;
			varWSWorkExperienceCompleted = (bool) r.ssWorkExperienceCompleted;
		}

		public static RLProgressReportSectionList ToRecordList(WORCProgressReportSectionRecord[] array) {
			RLProgressReportSectionList rl = new RLProgressReportSectionList();
			if (array != null) {
				foreach(WORCProgressReportSectionRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCProgressReportSectionRecord[] FromRecordList(RLProgressReportSectionList rl) {
			WORCProgressReportSectionRecord[] array = new WORCProgressReportSectionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCProgressReportSectionRecord {
		public static implicit operator WORCProgressReportSectionRecord(RCProgressReportSectionRecord r) {
			return new WORCProgressReportSectionRecord(r.ssENProgressReportSection);
		}

		public static implicit operator RCProgressReportSectionRecord(WORCProgressReportSectionRecord w) {
			RCProgressReportSectionRecord r = new RCProgressReportSectionRecord("");
			if (w != null) {
				r.ssENProgressReportSection = w;
			}
			return r;
		}

	}

	partial struct ENProgressReportSectionEntityRecord {
		public static implicit operator WORCProgressReportSectionRecord(ENProgressReportSectionEntityRecord r) {
			return new WORCProgressReportSectionRecord(r);
		}

		public static implicit operator ENProgressReportSectionEntityRecord(WORCProgressReportSectionRecord w) {
			ENProgressReportSectionEntityRecord r = new ENProgressReportSectionEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssGroup = (int) w.varWSGroup;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssCreatedOn = (DateTime) w.varWSCreatedOn;
				r.ssCourseOutline = ((string) w.varWSCourseOutline ?? "");
				r.ssCourseOutlineVisible = (bool) w.varWSCourseOutlineVisible;
				r.ssCourseOutlineUpdatedBy = (int) w.varWSCourseOutlineUpdatedBy;
				r.ssCourseOutlineUpdatedOn = (DateTime) w.varWSCourseOutlineUpdatedOn;
				r.ssCourseOutlineCompleted = (bool) w.varWSCourseOutlineCompleted;
				r.ssKeyStrengths = ((string) w.varWSKeyStrengths ?? "");
				r.ssKeyStrengthsVisible = (bool) w.varWSKeyStrengthsVisible;
				r.ssKeyStrengthsUpdatedBy = (int) w.varWSKeyStrengthsUpdatedBy;
				r.ssKeyStrengthsUpdatedOn = (DateTime) w.varWSKeyStrengthsUpdatedOn;
				r.ssKeyStrengthsCompleted = (bool) w.varWSKeyStrengthsCompleted;
				r.ssAreasForDevelopment = ((string) w.varWSAreasForDevelopment ?? "");
				r.ssAreasForDevelopmentVisible = (bool) w.varWSAreasForDevelopmentVisible;
				r.ssAreasForDevelopmentUpdatedBy = (int) w.varWSAreasForDevelopmentUpdatedBy;
				r.ssAreasForDevelopmentUpdatedOn = (DateTime) w.varWSAreasForDevelopmentUpdatedOn;
				r.ssAreasForDevelopmentCompleted = (bool) w.varWSAreasForDevelopmentCompleted;
				r.ssPredictedOutcome = ((string) w.varWSPredictedOutcome ?? "");
				r.ssPredictedOutcomeVisible = (bool) w.varWSPredictedOutcomeVisible;
				r.ssPredictedOutcomeUpdatedBy = (int) w.varWSPredictedOutcomeUpdatedBy;
				r.ssPredictedOutcomeUpdatedOn = (DateTime) w.varWSPredictedOutcomeUpdatedOn;
				r.ssPredictedOutcomeCompleted = (bool) w.varWSPredictedOutcomeCompleted;
				r.ssAttendance = ((string) w.varWSAttendance ?? "");
				r.ssAttendanceVisible = (bool) w.varWSAttendanceVisible;
				r.ssAttendanceUpdatedBy = (int) w.varWSAttendanceUpdatedBy;
				r.ssAttendanceUpdatedOn = (DateTime) w.varWSAttendanceUpdatedOn;
				r.ssAttendanceCompleted = (bool) w.varWSAttendanceCompleted;
				r.ssCourseCoordinatorSummary = ((string) w.varWSCourseCoordinatorSummary ?? "");
				r.ssCourseCoordinatorSummaryVisi = (bool) w.varWSCourseCoordinatorSummaryVisi;
				r.ssCourseCoordinatorUpdatedBy = (int) w.varWSCourseCoordinatorUpdatedBy;
				r.ssCourseCoordinatorUpdatedOn = (DateTime) w.varWSCourseCoordinatorUpdatedOn;
				r.ssCourseCoordinatorCompleted = (bool) w.varWSCourseCoordinatorCompleted;
				r.ssStudyProgrammeOverview = ((string) w.varWSStudyProgrammeOverview ?? "");
				r.ssStudyProgrammeOverviewVisibl = (bool) w.varWSStudyProgrammeOverviewVisibl;
				r.ssStudyProgrammeUpdatedBy = (int) w.varWSStudyProgrammeUpdatedBy;
				r.ssStudyProgrammeUpdatedOn = (DateTime) w.varWSStudyProgrammeUpdatedOn;
				r.ssStudyProgrammeCompleted = (bool) w.varWSStudyProgrammeCompleted;
				r.ssEmployability = ((string) w.varWSEmployability ?? "");
				r.ssEmployabilityVisible = (bool) w.varWSEmployabilityVisible;
				r.ssEmployabilityUpdatesdBy = (int) w.varWSEmployabilityUpdatesdBy;
				r.ssEmployabilityUpdatedOn = (DateTime) w.varWSEmployabilityUpdatedOn;
				r.ssEmployabilityCompleted = (bool) w.varWSEmployabilityCompleted;
				r.ssWorkExperience = ((string) w.varWSWorkExperience ?? "");
				r.ssWorkExperienceVisible = (bool) w.varWSWorkExperienceVisible;
				r.ssWorkExperienceUpdatedBy = (int) w.varWSWorkExperienceUpdatedBy;
				r.ssWorkExperienceUpdatedOn = (DateTime) w.varWSWorkExperienceUpdatedOn;
				r.ssWorkExperienceCompleted = (bool) w.varWSWorkExperienceCompleted;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLProgressReportSectionRecordList {
		public WORCProgressReportSectionRecord[] Array;


		public WORLProgressReportSectionRecordList(WORCProgressReportSectionRecord[] r) {
			if (r == null)
			Array = new WORCProgressReportSectionRecord[0];
			else
			Array = r;
		}
		public WORLProgressReportSectionRecordList() {
			Array = new WORCProgressReportSectionRecord[0];
		}

		public WORLProgressReportSectionRecordList(RLProgressReportSectionRecordList rl) {
			rl=(RLProgressReportSectionRecordList) rl.Duplicate();
			Array = new WORCProgressReportSectionRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCProgressReportSectionRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLProgressReportSectionRecordList {
		public static implicit operator RLProgressReportSectionRecordList(WORCProgressReportSectionRecord[] array) {
			RLProgressReportSectionRecordList rl = new RLProgressReportSectionRecordList();
			if (array != null) {
				foreach(WORCProgressReportSectionRecord val in array) {
					rl.Append((RCProgressReportSectionRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCProgressReportSectionRecord[](RLProgressReportSectionRecordList rl) {
			WORCProgressReportSectionRecord[] array = new WORCProgressReportSectionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCProgressReportSectionRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLProgressReportSectionRecordList {
		public static implicit operator RLProgressReportSectionRecordList(WORLProgressReportSectionRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLProgressReportSectionRecordList(RLProgressReportSectionRecordList rl) {
			return new WORLProgressReportSectionRecordList(rl);
		}
		public static implicit operator WORCProgressReportSectionRecord[](WORLProgressReportSectionRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLProgressReportSectionRecordList(WORCProgressReportSectionRecord[] array) {
			return new WORLProgressReportSectionRecordList(array);
		}
	}
}

