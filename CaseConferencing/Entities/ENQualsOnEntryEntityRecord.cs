/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENQualsOnEntryEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENQualsOnEntryEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENQualsOnEntryEntity.eSpaceId;
	} // ENQualsOnEntryEntity

	/// <summary>
	/// Entity <code>ENQualsOnEntryEntityRecord</code> that represents the Service Studio entity
	///  <code>QualsOnEntry</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("QualsOnEntry", "go+DKrhAgUWno8mVKH0Lyg", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_QualsOnEntry", "")]
	[Serializable()]
	public partial struct ENQualsOnEntryEntityRecord: ISerializable, ITypedRecord<ENQualsOnEntryEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*j0lJpNab4069gkA3ZldJQA");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*e_kY48nSiky5G5B6R9civQ");
		private static readonly GlobalObjectKey IdQualificationName = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*sp2OcOgEXUm7M3siwokkpA");
		private static readonly GlobalObjectKey IdQualificationCode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*n7MQO84vw0KpIX_kpF4+0A");
		private static readonly GlobalObjectKey IdGrade = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*Vq2oHonxtECK4FxGYt7c+g");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(5, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("QUALIFICATIONNAME", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("QualificationName")]
		private string _ssQualificationName;
		public string ssQualificationName {
			get {
				return _ssQualificationName;
			}
			set {
				if ((_ssQualificationName!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssQualificationName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("QUALIFICATIONCODE", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("QualificationCode")]
		private string _ssQualificationCode;
		public string ssQualificationCode {
			get {
				return _ssQualificationCode;
			}
			set {
				if ((_ssQualificationCode!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssQualificationCode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GRADE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Grade")]
		private string _ssGrade;
		public string ssGrade {
			get {
				return _ssGrade;
			}
			set {
				if ((_ssGrade!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssGrade = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENQualsOnEntryEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssQualificationName = "";
			_ssQualificationCode = "";
			_ssGrade = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "QualsOnEntry.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "QualsOnEntry.StudentReference", "");
			ssQualificationName = r.ReadText(index++, "QualsOnEntry.QualificationName", "");
			ssQualificationCode = r.ReadText(index++, "QualsOnEntry.QualificationCode", "");
			ssGrade = r.ReadText(index++, "QualsOnEntry.Grade", "");
			ChangedAttributes = new BitArray(5, false);
			OptimizedAttributes = new BitArray(5, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENQualsOnEntryEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENQualsOnEntryEntityRecord a, ENQualsOnEntryEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssQualificationName != b.ssQualificationName) return false;
			if (a.ssQualificationCode != b.ssQualificationCode) return false;
			if (a.ssGrade != b.ssGrade) return false;
			return true;
		}

		public static bool operator != (ENQualsOnEntryEntityRecord a, ENQualsOnEntryEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENQualsOnEntryEntityRecord)) return false;
			return (this == (ENQualsOnEntryEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssQualificationName.GetHashCode()
				^ ssQualificationCode.GetHashCode()
				^ ssGrade.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENQualsOnEntryEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssQualificationName = "";
			_ssQualificationCode = "";
			_ssGrade = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssQualificationName = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssQualificationCode = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssGrade = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENQualsOnEntryEntityRecord Duplicate() {
			ENQualsOnEntryEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssQualificationName = this._ssQualificationName;
			t._ssQualificationCode = this._ssQualificationCode;
			t._ssGrade = this._ssGrade;
			t.ChangedAttributes = new BitArray(5);
			t.OptimizedAttributes = new BitArray(5);
			for (int i = 0; i < 5; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".QualificationName")) VarValue.AppendAttribute(recordElem, "QualificationName", ssQualificationName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "QualificationName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".QualificationCode")) VarValue.AppendAttribute(recordElem, "QualificationCode", ssQualificationCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "QualificationCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Grade")) VarValue.AppendAttribute(recordElem, "Grade", ssGrade, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Grade");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "qualificationname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".QualificationName")) variable.Value = ssQualificationName; else variable.Optimized = true;
			} else if (head == "qualificationcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".QualificationCode")) variable.Value = ssQualificationCode; else variable.Optimized = true;
			} else if (head == "grade") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Grade")) variable.Value = ssGrade; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdQualificationName)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdQualificationCode)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdGrade)) {
				return ChangedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdQualificationName)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdQualificationCode)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdGrade)) {
				return OptimizedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdQualificationName) {
				return ssQualificationName;
			} else if (key == IdQualificationCode) {
				return ssQualificationCode;
			} else if (key == IdGrade) {
				return ssGrade;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(5);
			OptimizedAttributes = new BitArray(5);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssQualificationName = (string) other.AttributeGet(IdQualificationName);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdQualificationName);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdQualificationName);
			ssQualificationCode = (string) other.AttributeGet(IdQualificationCode);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdQualificationCode);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdQualificationCode);
			ssGrade = (string) other.AttributeGet(IdGrade);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdGrade);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdGrade);
		}
	} // ENQualsOnEntryEntityRecord
	/// <summary>
	/// Structure <code>RCQualsOnEntryRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCQualsOnEntryRecord: ISerializable, ITypedRecord<RCQualsOnEntryRecord> {
		private static readonly GlobalObjectKey IdQualsOnEntry = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*U+MwWspRBcfphMWcXZtLIw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("QualsOnEntry")]
		public ENQualsOnEntryEntityRecord ssENQualsOnEntry;


		public static implicit operator ENQualsOnEntryEntityRecord(RCQualsOnEntryRecord r) {
			return r.ssENQualsOnEntry;
		}

		public static implicit operator RCQualsOnEntryRecord(ENQualsOnEntryEntityRecord r) {
			RCQualsOnEntryRecord res = new RCQualsOnEntryRecord(null);
			res.ssENQualsOnEntry = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENQualsOnEntry.ChangedAttributes = value;
			}
			get {
				return ssENQualsOnEntry.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCQualsOnEntryRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENQualsOnEntry = new ENQualsOnEntryEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENQualsOnEntry.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENQualsOnEntry.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENQualsOnEntry.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENQualsOnEntry.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCQualsOnEntryRecord r) {
			this = r;
		}


		public static bool operator == (RCQualsOnEntryRecord a, RCQualsOnEntryRecord b) {
			if (a.ssENQualsOnEntry != b.ssENQualsOnEntry) return false;
			return true;
		}

		public static bool operator != (RCQualsOnEntryRecord a, RCQualsOnEntryRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCQualsOnEntryRecord)) return false;
			return (this == (RCQualsOnEntryRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENQualsOnEntry.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCQualsOnEntryRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENQualsOnEntry = new ENQualsOnEntryEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENQualsOnEntry = (ENQualsOnEntryEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENQualsOnEntry.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENQualsOnEntry.InternalRecursiveSave();
		}


		public RCQualsOnEntryRecord Duplicate() {
			RCQualsOnEntryRecord t;
			t.ssENQualsOnEntry = (ENQualsOnEntryEntityRecord) this.ssENQualsOnEntry.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENQualsOnEntry.ToXml(this, recordElem, "QualsOnEntry", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "qualsonentry") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".QualsOnEntry")) variable.Value = ssENQualsOnEntry; else variable.Optimized = true;
				variable.SetFieldName("qualsonentry");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENQualsOnEntry.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENQualsOnEntry.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdQualsOnEntry) {
				return ssENQualsOnEntry;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENQualsOnEntry.FillFromOther((IRecord) other.AttributeGet(IdQualsOnEntry));
		}
	} // RCQualsOnEntryRecord
	/// <summary>
	/// RecordList type <code>RLQualsOnEntryRecordList</code> that represents a record list of
	///  <code>QualsOnEntry</code>
	/// </summary>
	[Serializable()]
	public partial class RLQualsOnEntryRecordList: GenericRecordList<RCQualsOnEntryRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCQualsOnEntryRecord GetElementDefaultValue() {
			return new RCQualsOnEntryRecord("");
		}

		public T[] ToArray<T>(Func<RCQualsOnEntryRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLQualsOnEntryRecordList recordlist, Func<RCQualsOnEntryRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLQualsOnEntryRecordList ToList<T>(T[] array, Func <T, RCQualsOnEntryRecord> converter) {
			RLQualsOnEntryRecordList result = new RLQualsOnEntryRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLQualsOnEntryRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLQualsOnEntryRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLQualsOnEntryRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLQualsOnEntryRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCQualsOnEntryRecord> NewList() {
			return new RLQualsOnEntryRecordList();
		}


	} // RLQualsOnEntryRecordList

	/// <summary>
	/// RecordList type <code>RLQualsOnEntryList</code> that represents a record list of
	///  <code>StudentIdentifier, Text, Text, Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLQualsOnEntryList: GenericRecordList<ENQualsOnEntryEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENQualsOnEntryEntityRecord GetElementDefaultValue() {
			return new ENQualsOnEntryEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENQualsOnEntryEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLQualsOnEntryList recordlist, Func<ENQualsOnEntryEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLQualsOnEntryList ToList<T>(T[] array, Func <T, ENQualsOnEntryEntityRecord> converter) {
			RLQualsOnEntryList result = new RLQualsOnEntryList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLQualsOnEntryList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLQualsOnEntryList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLQualsOnEntryList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLQualsOnEntryList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENQualsOnEntryEntityRecord> NewList() {
			return new RLQualsOnEntryList();
		}


	} // RLQualsOnEntryList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateQualsOnEntry
		/// </summary>

		public static void CreateQualsOnEntry(HeContext heContext, RCQualsOnEntryRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENQualsOnEntryEntity.eSpaceId;
				ENQualsOnEntryEntityRecord ssENQualsOnEntry = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENQualsOnEntryEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [QUALIFICATIONNAME]" +
					 ", [QUALIFICATIONCODE]" +
					 ", [GRADE]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssQualificationName" +
					 ", @ssQualificationCode" +
					 ", @ssGrade" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENQualsOnEntry.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENQualsOnEntry.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssQualificationName", DbType.String, ssENQualsOnEntry.ssQualificationName);
					insertSqlCmd.CreateParameter("@ssQualificationCode", DbType.String, ssENQualsOnEntry.ssQualificationCode);
					insertSqlCmd.CreateParameter("@ssGrade", DbType.String, ssENQualsOnEntry.ssGrade);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateQualsOnEntry", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateQualsOnEntry
		/// </summary>

		public static void CreateOrUpdateQualsOnEntry(HeContext heContext, BitArray usedFields, RCQualsOnEntryRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENQualsOnEntryEntity.eSpaceId;
				ENQualsOnEntryEntityRecord ssENQualsOnEntry = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENQualsOnEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[QUALIFICATIONNAME] = @ssQualificationName"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[QUALIFICATIONCODE] = @ssQualificationCode"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GRADE] = @ssGrade"): parameters);
					string whereCondition = " WHERE [ID] = @ssENQualsOnEntryssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENQualsOnEntry.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENQualsOnEntry.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssQualificationName", DbType.String, ssENQualsOnEntry.ssQualificationName);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssQualificationCode", DbType.String, ssENQualsOnEntry.ssQualificationCode);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssGrade", DbType.String, ssENQualsOnEntry.ssGrade);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[GRADE] = [GRADE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENQualsOnEntryssId", DbType.Int32, ssENQualsOnEntry.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateQualsOnEntry (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENQualsOnEntryEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [QUALIFICATIONNAME]" +
						 ", [QUALIFICATIONCODE]" +
						 ", [GRADE]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssQualificationName" +
						 ", @ssQualificationCode" +
						 ", @ssGrade" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENQualsOnEntry.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENQualsOnEntry.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssQualificationName", DbType.String, ssENQualsOnEntry.ssQualificationName);
						insertSqlCmd.CreateParameter("@ssQualificationCode", DbType.String, ssENQualsOnEntry.ssQualificationCode);
						insertSqlCmd.CreateParameter("@ssGrade", DbType.String, ssENQualsOnEntry.ssGrade);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateQualsOnEntry", true), typeof(int));
					} else {
						outParamId = ssENQualsOnEntry.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteQualsOnEntry
		/// </summary>

		public static void DeleteQualsOnEntry(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENQualsOnEntryEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENQualsOnEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteQualsOnEntry", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetQualsOnEntry
		/// </summary>

		public static void GetQualsOnEntry(HeContext heContext, int inParamId, out RCQualsOnEntryRecord outParamRecord) {
			outParamRecord = new RCQualsOnEntryRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENQualsOnEntryEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [QUALIFICATIONNAME]" +
					 ", [QUALIFICATIONCODE]" +
					 ", [GRADE]" +
					 " FROM " + ENQualsOnEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetQualsOnEntry", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENQualsOnEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetQualsOnEntryForUpdate
		/// </summary>

		public static void GetQualsOnEntryForUpdate(HeContext heContext, int inParamId, out RCQualsOnEntryRecord outParamRecord) {
			outParamRecord = new RCQualsOnEntryRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENQualsOnEntryEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [QUALIFICATIONNAME]" +
					 ", [QUALIFICATIONCODE]" +
					 ", [GRADE]" +
					 "FROM " + ENQualsOnEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetQualsOnEntryForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENQualsOnEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateQualsOnEntry
		/// </summary>

		public static void UpdateQualsOnEntry(HeContext heContext, BitArray usedFields, RCQualsOnEntryRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENQualsOnEntryEntity.eSpaceId;
				ENQualsOnEntryEntityRecord ssENQualsOnEntry = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENQualsOnEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[QUALIFICATIONNAME] = @ssQualificationName"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[QUALIFICATIONCODE] = @ssQualificationCode"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GRADE] = @ssGrade"): parameters);
					string whereCondition = " WHERE [ID] = @ssENQualsOnEntryssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENQualsOnEntry.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENQualsOnEntry.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssQualificationName", DbType.String, ssENQualsOnEntry.ssQualificationName);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssQualificationCode", DbType.String, ssENQualsOnEntry.ssQualificationCode);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssGrade", DbType.String, ssENQualsOnEntry.ssGrade);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[GRADE] = [GRADE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENQualsOnEntryssId", DbType.Int32, ssENQualsOnEntry.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateQualsOnEntry", true) <= 0)
					throw new DataBaseException(ENQualsOnEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENQualsOnEntry.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("QualsOnEntry")]
	public class WORCQualsOnEntryRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("QualificationName")]
		public string varWSQualificationName;

		[System.Xml.Serialization.XmlElement("QualificationCode")]
		public string varWSQualificationCode;

		[System.Xml.Serialization.XmlElement("Grade")]
		public string varWSGrade;

		public WORCQualsOnEntryRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSQualificationName = (string) "";
			varWSQualificationCode = (string) "";
			varWSGrade = (string) "";
		}

		public WORCQualsOnEntryRecord(ENQualsOnEntryEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSQualificationName = BaseAppUtils.RemoveControlChars(r.ssQualificationName);
			varWSQualificationCode = BaseAppUtils.RemoveControlChars(r.ssQualificationCode);
			varWSGrade = BaseAppUtils.RemoveControlChars(r.ssGrade);
		}

		public static RLQualsOnEntryList ToRecordList(WORCQualsOnEntryRecord[] array) {
			RLQualsOnEntryList rl = new RLQualsOnEntryList();
			if (array != null) {
				foreach(WORCQualsOnEntryRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCQualsOnEntryRecord[] FromRecordList(RLQualsOnEntryList rl) {
			WORCQualsOnEntryRecord[] array = new WORCQualsOnEntryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCQualsOnEntryRecord {
		public static implicit operator WORCQualsOnEntryRecord(RCQualsOnEntryRecord r) {
			return new WORCQualsOnEntryRecord(r.ssENQualsOnEntry);
		}

		public static implicit operator RCQualsOnEntryRecord(WORCQualsOnEntryRecord w) {
			RCQualsOnEntryRecord r = new RCQualsOnEntryRecord("");
			if (w != null) {
				r.ssENQualsOnEntry = w;
			}
			return r;
		}

	}

	partial struct ENQualsOnEntryEntityRecord {
		public static implicit operator WORCQualsOnEntryRecord(ENQualsOnEntryEntityRecord r) {
			return new WORCQualsOnEntryRecord(r);
		}

		public static implicit operator ENQualsOnEntryEntityRecord(WORCQualsOnEntryRecord w) {
			ENQualsOnEntryEntityRecord r = new ENQualsOnEntryEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssQualificationName = ((string) w.varWSQualificationName ?? "");
				r.ssQualificationCode = ((string) w.varWSQualificationCode ?? "");
				r.ssGrade = ((string) w.varWSGrade ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLQualsOnEntryRecordList {
		public WORCQualsOnEntryRecord[] Array;


		public WORLQualsOnEntryRecordList(WORCQualsOnEntryRecord[] r) {
			if (r == null)
			Array = new WORCQualsOnEntryRecord[0];
			else
			Array = r;
		}
		public WORLQualsOnEntryRecordList() {
			Array = new WORCQualsOnEntryRecord[0];
		}

		public WORLQualsOnEntryRecordList(RLQualsOnEntryRecordList rl) {
			rl=(RLQualsOnEntryRecordList) rl.Duplicate();
			Array = new WORCQualsOnEntryRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCQualsOnEntryRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLQualsOnEntryRecordList {
		public static implicit operator RLQualsOnEntryRecordList(WORCQualsOnEntryRecord[] array) {
			RLQualsOnEntryRecordList rl = new RLQualsOnEntryRecordList();
			if (array != null) {
				foreach(WORCQualsOnEntryRecord val in array) {
					rl.Append((RCQualsOnEntryRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCQualsOnEntryRecord[](RLQualsOnEntryRecordList rl) {
			WORCQualsOnEntryRecord[] array = new WORCQualsOnEntryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCQualsOnEntryRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLQualsOnEntryRecordList {
		public static implicit operator RLQualsOnEntryRecordList(WORLQualsOnEntryRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLQualsOnEntryRecordList(RLQualsOnEntryRecordList rl) {
			return new WORLQualsOnEntryRecordList(rl);
		}
		public static implicit operator WORCQualsOnEntryRecord[](WORLQualsOnEntryRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLQualsOnEntryRecordList(WORCQualsOnEntryRecord[] array) {
			return new WORLQualsOnEntryRecordList(array);
		}
	}
}

