/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENRewardEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENRewardEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENRewardEntity.eSpaceId;
	} // ENRewardEntity

	/// <summary>
	/// Entity <code>ENRewardEntityRecord</code> that represents the Service Studio entity
	///  <code>Reward</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Reward", "+pAMS6yd7kqS1W3mj4SAUw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_Reward", "")]
	[Serializable()]
	public partial struct ENRewardEntityRecord: ISerializable, ITypedRecord<ENRewardEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*PRYAdXKCJU2ZA_ZIAs95GA");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*h4krERDkrUKtKBA8c_HPbA");
		private static readonly GlobalObjectKey IdReasonId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ozzMwLCllkuQVpJSOzL5TA");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*6zyrLYDCP0WEGSxhMZvcRg");
		private static readonly GlobalObjectKey IdType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*G1hBW9kL4EeKGroR+dNSFA");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*h73sW1WAh0mG2heAd4GeKw");
		private static readonly GlobalObjectKey IdCreatedAt = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*r5acgQpTO0G6Yh4rZz9v6w");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("REASONID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ReasonId")]
		private int _ssReasonId;
		public int ssReasonId {
			get {
				return _ssReasonId;
			}
			set {
				if ((_ssReasonId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssReasonId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TYPE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Type")]
		private bool _ssType;
		public bool ssType {
			get {
				return _ssType;
			}
			set {
				if ((_ssType!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDAT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedAt")]
		private DateTime _ssCreatedAt;
		public DateTime ssCreatedAt {
			get {
				return _ssCreatedAt;
			}
			set {
				if ((_ssCreatedAt!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssCreatedAt = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENRewardEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssReasonId = 0;
			_ssDescription = "";
			_ssType = false;
			_ssCreatedBy = 0;
			_ssCreatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Reward.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "Reward.StudentReference", "");
			ssReasonId = r.ReadEntityReference(index++, "Reward.ReasonId", 0);
			ssDescription = r.ReadText(index++, "Reward.Description", "");
			ssType = r.ReadBoolean(index++, "Reward.Type", false);
			ssCreatedBy = r.ReadEntityReference(index++, "Reward.CreatedBy", 0);
			ssCreatedAt = r.ReadDateTime(index++, "Reward.CreatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENRewardEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENRewardEntityRecord a, ENRewardEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssReasonId != b.ssReasonId) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssType != b.ssType) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssCreatedAt != b.ssCreatedAt) return false;
			return true;
		}

		public static bool operator != (ENRewardEntityRecord a, ENRewardEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENRewardEntityRecord)) return false;
			return (this == (ENRewardEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssReasonId.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssType.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssCreatedAt.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENRewardEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssReasonId = 0;
			_ssDescription = "";
			_ssType = false;
			_ssCreatedBy = 0;
			_ssCreatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssReasonId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssType = (bool) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssCreatedAt = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENRewardEntityRecord Duplicate() {
			ENRewardEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssReasonId = this._ssReasonId;
			t._ssDescription = this._ssDescription;
			t._ssType = this._ssType;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssCreatedAt = this._ssCreatedAt;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ReasonId")) VarValue.AppendAttribute(recordElem, "ReasonId", ssReasonId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ReasonId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Type")) VarValue.AppendAttribute(recordElem, "Type", ssType, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedAt")) VarValue.AppendAttribute(recordElem, "CreatedAt", ssCreatedAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedAt");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "reasonid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ReasonId")) variable.Value = ssReasonId; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Type")) variable.Value = ssType; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "createdat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedAt")) variable.Value = ssCreatedAt; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdReasonId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdType)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdCreatedAt)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdReasonId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdType)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdCreatedAt)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdReasonId) {
				return ssReasonId;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdType) {
				return ssType;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdCreatedAt) {
				return ssCreatedAt;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssReasonId = (int) other.AttributeGet(IdReasonId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdReasonId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdReasonId);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdDescription);
			ssType = (bool) other.AttributeGet(IdType);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdType);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdType);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCreatedBy);
			ssCreatedAt = (DateTime) other.AttributeGet(IdCreatedAt);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdCreatedAt);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdCreatedAt);
		}
	} // ENRewardEntityRecord
	/// <summary>
	/// Structure <code>RCRewardRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRewardRecord: ISerializable, ITypedRecord<RCRewardRecord> {
		private static readonly GlobalObjectKey IdReward = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*PQCIEsZWtzfWsOwKuqu68w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Reward")]
		public ENRewardEntityRecord ssENReward;


		public static implicit operator ENRewardEntityRecord(RCRewardRecord r) {
			return r.ssENReward;
		}

		public static implicit operator RCRewardRecord(ENRewardEntityRecord r) {
			RCRewardRecord res = new RCRewardRecord(null);
			res.ssENReward = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENReward.ChangedAttributes = value;
			}
			get {
				return ssENReward.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCRewardRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENReward = new ENRewardEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENReward.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENReward.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENReward.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENReward.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRewardRecord r) {
			this = r;
		}


		public static bool operator == (RCRewardRecord a, RCRewardRecord b) {
			if (a.ssENReward != b.ssENReward) return false;
			return true;
		}

		public static bool operator != (RCRewardRecord a, RCRewardRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRewardRecord)) return false;
			return (this == (RCRewardRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENReward.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRewardRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENReward = new ENRewardEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENReward = (ENRewardEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENReward.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENReward.InternalRecursiveSave();
		}


		public RCRewardRecord Duplicate() {
			RCRewardRecord t;
			t.ssENReward = (ENRewardEntityRecord) this.ssENReward.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENReward.ToXml(this, recordElem, "Reward", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "reward") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Reward")) variable.Value = ssENReward; else variable.Optimized = true;
				variable.SetFieldName("reward");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENReward.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENReward.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdReward) {
				return ssENReward;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENReward.FillFromOther((IRecord) other.AttributeGet(IdReward));
		}
	} // RCRewardRecord
	/// <summary>
	/// RecordList type <code>RLRewardRecordList</code> that represents a record list of
	///  <code>Reward</code>
	/// </summary>
	[Serializable()]
	public partial class RLRewardRecordList: GenericRecordList<RCRewardRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRewardRecord GetElementDefaultValue() {
			return new RCRewardRecord("");
		}

		public T[] ToArray<T>(Func<RCRewardRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRewardRecordList recordlist, Func<RCRewardRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRewardRecordList ToList<T>(T[] array, Func <T, RCRewardRecord> converter) {
			RLRewardRecordList result = new RLRewardRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRewardRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRewardRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRewardRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRewardRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRewardRecord> NewList() {
			return new RLRewardRecordList();
		}


	} // RLRewardRecordList

	/// <summary>
	/// RecordList type <code>RLRewardList</code> that represents a record list of <code>StudentIdentifier,
	///  UserIdentifier, Text, DateTime, Boolean, Integer, RewardReasonIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLRewardList: GenericRecordList<ENRewardEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENRewardEntityRecord GetElementDefaultValue() {
			return new ENRewardEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENRewardEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRewardList recordlist, Func<ENRewardEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRewardList ToList<T>(T[] array, Func <T, ENRewardEntityRecord> converter) {
			RLRewardList result = new RLRewardList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRewardList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRewardList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRewardList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRewardList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENRewardEntityRecord> NewList() {
			return new RLRewardList();
		}


	} // RLRewardList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateReward
		/// </summary>

		public static void CreateReward(HeContext heContext, RCRewardRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRewardEntity.eSpaceId;
				ENRewardEntityRecord ssENReward = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENRewardEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [REASONID]" +
					 ", [DESCRIPTION]" +
					 ", [TYPE]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDAT]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssReasonId" +
					 ", @ssDescription" +
					 ", @ssType" +
					 ", @ssCreatedBy" +
					 ", @ssCreatedAt" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENReward.ssStudentReference);
					insertSqlCmd.CreateParameter("@ssReasonId", DbType.Int32, ssENReward.ssReasonId);
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENReward.ssDescription);
					insertSqlCmd.CreateParameter("@ssType", DbType.Boolean, ssENReward.ssType);
					if ((ssENReward.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENReward.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENReward.ssCreatedAt);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateReward", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateReward
		/// </summary>

		public static void CreateOrUpdateReward(HeContext heContext, BitArray usedFields, RCRewardRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRewardEntity.eSpaceId;
				ENRewardEntityRecord ssENReward = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRewardEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REASONID] = @ssReasonId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TYPE] = @ssType"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRewardssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENReward.ssStudentReference);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssReasonId", DbType.Int32, ssENReward.ssReasonId);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENReward.ssDescription);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssType", DbType.Boolean, ssENReward.ssType);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENReward.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENReward.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENReward.ssCreatedAt);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[TYPE] = [TYPE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRewardssId", DbType.Int32, ssENReward.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateReward (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENRewardEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [REASONID]" +
						 ", [DESCRIPTION]" +
						 ", [TYPE]" +
						 ", [CREATEDBY]" +
						 ", [CREATEDAT]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssReasonId" +
						 ", @ssDescription" +
						 ", @ssType" +
						 ", @ssCreatedBy" +
						 ", @ssCreatedAt" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENReward.ssStudentReference);
						insertSqlCmd.CreateParameter("@ssReasonId", DbType.Int32, ssENReward.ssReasonId);
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENReward.ssDescription);
						insertSqlCmd.CreateParameter("@ssType", DbType.Boolean, ssENReward.ssType);
						if ((ssENReward.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENReward.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENReward.ssCreatedAt);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateReward", true), typeof(int));
					} else {
						outParamId = ssENReward.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteReward
		/// </summary>

		public static void DeleteReward(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRewardEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENRewardEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteReward", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetReward
		/// </summary>

		public static void GetReward(HeContext heContext, int inParamId, out RCRewardRecord outParamRecord) {
			outParamRecord = new RCRewardRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRewardEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [REASONID]" +
					 ", [DESCRIPTION]" +
					 ", [TYPE]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDAT]" +
					 " FROM " + ENRewardEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetReward", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENRewardEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRewardForUpdate
		/// </summary>

		public static void GetRewardForUpdate(HeContext heContext, int inParamId, out RCRewardRecord outParamRecord) {
			outParamRecord = new RCRewardRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRewardEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [REASONID]" +
					 ", [DESCRIPTION]" +
					 ", [TYPE]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDAT]" +
					 "FROM " + ENRewardEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRewardForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENRewardEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateReward
		/// </summary>

		public static void UpdateReward(HeContext heContext, BitArray usedFields, RCRewardRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRewardEntity.eSpaceId;
				ENRewardEntityRecord ssENReward = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRewardEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REASONID] = @ssReasonId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TYPE] = @ssType"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRewardssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENReward.ssStudentReference);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssReasonId", DbType.Int32, ssENReward.ssReasonId);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENReward.ssDescription);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssType", DbType.Boolean, ssENReward.ssType);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENReward.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENReward.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENReward.ssCreatedAt);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[TYPE] = [TYPE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRewardssId", DbType.Int32, ssENReward.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateReward", true) <= 0)
					throw new DataBaseException(ENRewardEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENReward.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Reward")]
	public class WORCRewardRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("ReasonId")]
		public int varWSReasonId;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		[System.Xml.Serialization.XmlElement("Type")]
		public bool varWSType;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("CreatedAt")]
		public DateTime varWSCreatedAt;

		public WORCRewardRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSReasonId = (int) 0;
			varWSDescription = (string) "";
			varWSType = (bool) false;
			varWSCreatedBy = (int) 0;
			varWSCreatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCRewardRecord(ENRewardEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSReasonId = (int) r.ssReasonId;
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
			varWSType = (bool) r.ssType;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSCreatedAt = (DateTime) r.ssCreatedAt;
		}

		public static RLRewardList ToRecordList(WORCRewardRecord[] array) {
			RLRewardList rl = new RLRewardList();
			if (array != null) {
				foreach(WORCRewardRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRewardRecord[] FromRecordList(RLRewardList rl) {
			WORCRewardRecord[] array = new WORCRewardRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCRewardRecord {
		public static implicit operator WORCRewardRecord(RCRewardRecord r) {
			return new WORCRewardRecord(r.ssENReward);
		}

		public static implicit operator RCRewardRecord(WORCRewardRecord w) {
			RCRewardRecord r = new RCRewardRecord("");
			if (w != null) {
				r.ssENReward = w;
			}
			return r;
		}

	}

	partial struct ENRewardEntityRecord {
		public static implicit operator WORCRewardRecord(ENRewardEntityRecord r) {
			return new WORCRewardRecord(r);
		}

		public static implicit operator ENRewardEntityRecord(WORCRewardRecord w) {
			ENRewardEntityRecord r = new ENRewardEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssReasonId = (int) w.varWSReasonId;
				r.ssDescription = ((string) w.varWSDescription ?? "");
				r.ssType = (bool) w.varWSType;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssCreatedAt = (DateTime) w.varWSCreatedAt;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRewardRecordList {
		public WORCRewardRecord[] Array;


		public WORLRewardRecordList(WORCRewardRecord[] r) {
			if (r == null)
			Array = new WORCRewardRecord[0];
			else
			Array = r;
		}
		public WORLRewardRecordList() {
			Array = new WORCRewardRecord[0];
		}

		public WORLRewardRecordList(RLRewardRecordList rl) {
			rl=(RLRewardRecordList) rl.Duplicate();
			Array = new WORCRewardRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRewardRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRewardRecordList {
		public static implicit operator RLRewardRecordList(WORCRewardRecord[] array) {
			RLRewardRecordList rl = new RLRewardRecordList();
			if (array != null) {
				foreach(WORCRewardRecord val in array) {
					rl.Append((RCRewardRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRewardRecord[](RLRewardRecordList rl) {
			WORCRewardRecord[] array = new WORCRewardRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRewardRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRewardRecordList {
		public static implicit operator RLRewardRecordList(WORLRewardRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRewardRecordList(RLRewardRecordList rl) {
			return new WORLRewardRecordList(rl);
		}
		public static implicit operator WORCRewardRecord[](WORLRewardRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRewardRecordList(WORCRewardRecord[] array) {
			return new WORLRewardRecordList(array);
		}
	}
}

