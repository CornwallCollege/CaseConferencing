/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENCommunicationEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENCommunicationEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENCommunicationEntity.eSpaceId;
	} // ENCommunicationEntity

	/// <summary>
	/// Entity <code>ENCommunicationEntityRecord</code> that represents the Service Studio entity
	///  <code>Communication</code> <p> Description: All Message send / receive</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Communication", "0An+tur51kWoQ9gOeU6qEQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_Communication", "")]
	[Serializable()]
	public partial struct ENCommunicationEntityRecord: ISerializable, ITypedRecord<ENCommunicationEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*jNN8ftZFm0mdCQXY43li7g");
		private static readonly GlobalObjectKey IdStudentId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*RC4Fs1YgWkmpA1LoqqXH2g");
		private static readonly GlobalObjectKey IdTypeId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*PCrLsCFyV0C2CBUydd5NQA");
		private static readonly GlobalObjectKey IdFrom = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ttRTuc0UnEatd8EbTaVY_A");
		private static readonly GlobalObjectKey IdTo = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*b8xIiZ4dfEuvZ0DUKygSMg");
		private static readonly GlobalObjectKey IdBCC = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*YbdZKodZ4USF2hlNRFOXSQ");
		private static readonly GlobalObjectKey IdCC = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xGw7l9cvkECytQkyCLDpAQ");
		private static readonly GlobalObjectKey IdSubject = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*eN3OFKiIZUWV3cpVFUML2Q");
		private static readonly GlobalObjectKey IdBody = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*NgH04h5M8EyAwv_Za2PhFQ");
		private static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*oH0nFOUMekWh6WMixajrBA");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*DhXMy9ouuk+QxRQ3n5mTRg");
		private static readonly GlobalObjectKey IdMsgId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*wzYT3TP9QkyVIPEJTh7Tcw");
		private static readonly GlobalObjectKey IdStatus = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*FMEcbiQWtkaZHTI5PZSZdQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(13, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentId")]
		private string _ssStudentId;
		public string ssStudentId {
			get {
				return _ssStudentId;
			}
			set {
				if ((_ssStudentId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TYPEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("TypeId")]
		private int _ssTypeId;
		public int ssTypeId {
			get {
				return _ssTypeId;
			}
			set {
				if ((_ssTypeId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssTypeId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("FROM", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("From")]
		private string _ssFrom;
		public string ssFrom {
			get {
				return _ssFrom;
			}
			set {
				if ((_ssFrom!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssFrom = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TO", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("To")]
		private string _ssTo;
		public string ssTo {
			get {
				return _ssTo;
			}
			set {
				if ((_ssTo!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssTo = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("BCC", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("BCC")]
		private string _ssBCC;
		public string ssBCC {
			get {
				return _ssBCC;
			}
			set {
				if ((_ssBCC!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssBCC = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CC", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("CC")]
		private string _ssCC;
		public string ssCC {
			get {
				return _ssCC;
			}
			set {
				if ((_ssCC!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssCC = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SUBJECT", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Subject")]
		private string _ssSubject;
		public string ssSubject {
			get {
				return _ssSubject;
			}
			set {
				if ((_ssSubject!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssSubject = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("BODY", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Body")]
		private string _ssBody;
		public string ssBody {
			get {
				return _ssBody;
			}
			set {
				if ((_ssBody!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssBody = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedOn")]
		private DateTime _ssCreatedOn;
		public DateTime ssCreatedOn {
			get {
				return _ssCreatedOn;
			}
			set {
				if ((_ssCreatedOn!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssCreatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MSGID", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("MsgId")]
		private string _ssMsgId;
		public string ssMsgId {
			get {
				return _ssMsgId;
			}
			set {
				if ((_ssMsgId!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssMsgId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STATUS", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Status")]
		private string _ssStatus;
		public string ssStatus {
			get {
				return _ssStatus;
			}
			set {
				if ((_ssStatus!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssStatus = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENCommunicationEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(13, true);
			OptimizedAttributes = new BitArray(13, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssTypeId = 0;
			_ssFrom = "";
			_ssTo = "";
			_ssBCC = "";
			_ssCC = "";
			_ssSubject = "";
			_ssBody = "";
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssMsgId = "";
			_ssStatus = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Communication.Id", 0);
			ssStudentId = r.ReadTextEntityReference(index++, "Communication.StudentId", "");
			ssTypeId = r.ReadEntityReference(index++, "Communication.TypeId", 0);
			ssFrom = r.ReadText(index++, "Communication.From", "");
			ssTo = r.ReadText(index++, "Communication.To", "");
			ssBCC = r.ReadText(index++, "Communication.BCC", "");
			ssCC = r.ReadText(index++, "Communication.CC", "");
			ssSubject = r.ReadText(index++, "Communication.Subject", "");
			ssBody = r.ReadText(index++, "Communication.Body", "");
			ssCreatedOn = r.ReadDateTime(index++, "Communication.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "Communication.CreatedBy", 0);
			ssMsgId = r.ReadText(index++, "Communication.MsgId", "");
			ssStatus = r.ReadText(index++, "Communication.Status", "");
			ChangedAttributes = new BitArray(13, false);
			OptimizedAttributes = new BitArray(13, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENCommunicationEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENCommunicationEntityRecord a, ENCommunicationEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentId != b.ssStudentId) return false;
			if (a.ssTypeId != b.ssTypeId) return false;
			if (a.ssFrom != b.ssFrom) return false;
			if (a.ssTo != b.ssTo) return false;
			if (a.ssBCC != b.ssBCC) return false;
			if (a.ssCC != b.ssCC) return false;
			if (a.ssSubject != b.ssSubject) return false;
			if (a.ssBody != b.ssBody) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssMsgId != b.ssMsgId) return false;
			if (a.ssStatus != b.ssStatus) return false;
			return true;
		}

		public static bool operator != (ENCommunicationEntityRecord a, ENCommunicationEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENCommunicationEntityRecord)) return false;
			return (this == (ENCommunicationEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentId.GetHashCode()
				^ ssTypeId.GetHashCode()
				^ ssFrom.GetHashCode()
				^ ssTo.GetHashCode()
				^ ssBCC.GetHashCode()
				^ ssCC.GetHashCode()
				^ ssSubject.GetHashCode()
				^ ssBody.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssMsgId.GetHashCode()
				^ ssStatus.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENCommunicationEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(13, true);
			OptimizedAttributes = new BitArray(13, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssTypeId = 0;
			_ssFrom = "";
			_ssTo = "";
			_ssBCC = "";
			_ssCC = "";
			_ssSubject = "";
			_ssBody = "";
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssMsgId = "";
			_ssStatus = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentId = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssTypeId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssFrom = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssTo = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssBCC = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssCC = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssSubject = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssBody = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssCreatedOn = (DateTime) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssMsgId = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssStatus = (string) info.GetValue(fields[12] .Name, fields[12] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENCommunicationEntityRecord Duplicate() {
			ENCommunicationEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentId = this._ssStudentId;
			t._ssTypeId = this._ssTypeId;
			t._ssFrom = this._ssFrom;
			t._ssTo = this._ssTo;
			t._ssBCC = this._ssBCC;
			t._ssCC = this._ssCC;
			t._ssSubject = this._ssSubject;
			t._ssBody = this._ssBody;
			t._ssCreatedOn = this._ssCreatedOn;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssMsgId = this._ssMsgId;
			t._ssStatus = this._ssStatus;
			t.ChangedAttributes = new BitArray(13);
			t.OptimizedAttributes = new BitArray(13);
			for (int i = 0; i < 13; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentId")) VarValue.AppendAttribute(recordElem, "StudentId", ssStudentId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TypeId")) VarValue.AppendAttribute(recordElem, "TypeId", ssTypeId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "TypeId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".From")) VarValue.AppendAttribute(recordElem, "From", ssFrom, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "From");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".To")) VarValue.AppendAttribute(recordElem, "To", ssTo, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "To");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".BCC")) VarValue.AppendAttribute(recordElem, "BCC", ssBCC, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "BCC");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CC")) VarValue.AppendAttribute(recordElem, "CC", ssCC, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CC");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Subject")) VarValue.AppendAttribute(recordElem, "Subject", ssSubject, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Subject");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Body")) VarValue.AppendAttribute(recordElem, "Body", ssBody, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Body");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MsgId")) VarValue.AppendAttribute(recordElem, "MsgId", ssMsgId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MsgId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Status")) VarValue.AppendAttribute(recordElem, "Status", ssStatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Status");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentId")) variable.Value = ssStudentId; else variable.Optimized = true;
			} else if (head == "typeid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TypeId")) variable.Value = ssTypeId; else variable.Optimized = true;
			} else if (head == "from") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".From")) variable.Value = ssFrom; else variable.Optimized = true;
			} else if (head == "to") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".To")) variable.Value = ssTo; else variable.Optimized = true;
			} else if (head == "bcc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".BCC")) variable.Value = ssBCC; else variable.Optimized = true;
			} else if (head == "cc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CC")) variable.Value = ssCC; else variable.Optimized = true;
			} else if (head == "subject") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Subject")) variable.Value = ssSubject; else variable.Optimized = true;
			} else if (head == "body") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Body")) variable.Value = ssBody; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "msgid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MsgId")) variable.Value = ssMsgId; else variable.Optimized = true;
			} else if (head == "status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Status")) variable.Value = ssStatus; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdTypeId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdFrom)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdTo)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdBCC)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdCC)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdSubject)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdBody)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdCreatedOn)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdMsgId)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdStatus)) {
				return ChangedAttributes[12];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdTypeId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdFrom)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdTo)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdBCC)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdCC)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdSubject)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdBody)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdCreatedOn)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdMsgId)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdStatus)) {
				return OptimizedAttributes[12];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentId) {
				return ssStudentId;
			} else if (key == IdTypeId) {
				return ssTypeId;
			} else if (key == IdFrom) {
				return ssFrom;
			} else if (key == IdTo) {
				return ssTo;
			} else if (key == IdBCC) {
				return ssBCC;
			} else if (key == IdCC) {
				return ssCC;
			} else if (key == IdSubject) {
				return ssSubject;
			} else if (key == IdBody) {
				return ssBody;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdMsgId) {
				return ssMsgId;
			} else if (key == IdStatus) {
				return ssStatus;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(13);
			OptimizedAttributes = new BitArray(13);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentId = (string) other.AttributeGet(IdStudentId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentId);
			ssTypeId = (int) other.AttributeGet(IdTypeId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdTypeId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdTypeId);
			ssFrom = (string) other.AttributeGet(IdFrom);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdFrom);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdFrom);
			ssTo = (string) other.AttributeGet(IdTo);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdTo);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdTo);
			ssBCC = (string) other.AttributeGet(IdBCC);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdBCC);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdBCC);
			ssCC = (string) other.AttributeGet(IdCC);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdCC);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdCC);
			ssSubject = (string) other.AttributeGet(IdSubject);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdSubject);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdSubject);
			ssBody = (string) other.AttributeGet(IdBody);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdBody);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdBody);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdCreatedOn);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdCreatedOn);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdCreatedBy);
			ssMsgId = (string) other.AttributeGet(IdMsgId);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdMsgId);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdMsgId);
			ssStatus = (string) other.AttributeGet(IdStatus);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdStatus);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdStatus);
		}
	} // ENCommunicationEntityRecord
	/// <summary>
	/// Structure <code>RCCommunicationRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCommunicationRecord: ISerializable, ITypedRecord<RCCommunicationRecord> {
		private static readonly GlobalObjectKey IdCommunication = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Mje+JTHR9VpPmgPWMth_iA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Communication")]
		public ENCommunicationEntityRecord ssENCommunication;


		public static implicit operator ENCommunicationEntityRecord(RCCommunicationRecord r) {
			return r.ssENCommunication;
		}

		public static implicit operator RCCommunicationRecord(ENCommunicationEntityRecord r) {
			RCCommunicationRecord res = new RCCommunicationRecord(null);
			res.ssENCommunication = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENCommunication.ChangedAttributes = value;
			}
			get {
				return ssENCommunication.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCCommunicationRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCommunication = new ENCommunicationEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(13, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCommunication.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENCommunication.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENCommunication.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCommunication.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCommunicationRecord r) {
			this = r;
		}


		public static bool operator == (RCCommunicationRecord a, RCCommunicationRecord b) {
			if (a.ssENCommunication != b.ssENCommunication) return false;
			return true;
		}

		public static bool operator != (RCCommunicationRecord a, RCCommunicationRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCommunicationRecord)) return false;
			return (this == (RCCommunicationRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCommunication.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCommunicationRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCommunication = new ENCommunicationEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCommunication = (ENCommunicationEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENCommunication.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCommunication.InternalRecursiveSave();
		}


		public RCCommunicationRecord Duplicate() {
			RCCommunicationRecord t;
			t.ssENCommunication = (ENCommunicationEntityRecord) this.ssENCommunication.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCommunication.ToXml(this, recordElem, "Communication", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "communication") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Communication")) variable.Value = ssENCommunication; else variable.Optimized = true;
				variable.SetFieldName("communication");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENCommunication.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENCommunication.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCommunication) {
				return ssENCommunication;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCommunication.FillFromOther((IRecord) other.AttributeGet(IdCommunication));
		}
	} // RCCommunicationRecord
	/// <summary>
	/// RecordList type <code>RLCommunicationRecordList</code> that represents a record list of
	///  <code>Communication</code>
	/// </summary>
	[Serializable()]
	public partial class RLCommunicationRecordList: GenericRecordList<RCCommunicationRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCommunicationRecord GetElementDefaultValue() {
			return new RCCommunicationRecord("");
		}

		public T[] ToArray<T>(Func<RCCommunicationRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCommunicationRecordList recordlist, Func<RCCommunicationRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCommunicationRecordList ToList<T>(T[] array, Func <T, RCCommunicationRecord> converter) {
			RLCommunicationRecordList result = new RLCommunicationRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCommunicationRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCommunicationRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCommunicationRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCommunicationRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(13, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCommunicationRecord> NewList() {
			return new RLCommunicationRecordList();
		}


	} // RLCommunicationRecordList

	/// <summary>
	/// RecordList type <code>RLCommunicationList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, Text, Text, Text, Text, Text, Text, Text, DateTime
	/// , Integer, CommunicationTypeIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLCommunicationList: GenericRecordList<ENCommunicationEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENCommunicationEntityRecord GetElementDefaultValue() {
			return new ENCommunicationEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENCommunicationEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCommunicationList recordlist, Func<ENCommunicationEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCommunicationList ToList<T>(T[] array, Func <T, ENCommunicationEntityRecord> converter) {
			RLCommunicationList result = new RLCommunicationList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCommunicationList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCommunicationList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCommunicationList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCommunicationList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENCommunicationEntityRecord> NewList() {
			return new RLCommunicationList();
		}


	} // RLCommunicationList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateCommunication
		/// </summary>

		public static void CreateCommunication(HeContext heContext, RCCommunicationRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationEntity.eSpaceId;
				ENCommunicationEntityRecord ssENCommunication = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENCommunicationEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTID]" +
					 ", [TYPEID]" +
					 ", [FROM]" +
					 ", [TO]" +
					 ", [BCC]" +
					 ", [CC]" +
					 ", [SUBJECT]" +
					 ", [BODY]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 ", [MSGID]" +
					 ", [STATUS]" +
					 " ) VALUES (" +
					 " @ssStudentId" +
					 ", @ssTypeId" +
					 ", @ssFrom" +
					 ", @ssTo" +
					 ", @ssBCC" +
					 ", @ssCC" +
					 ", @ssSubject" +
					 ", @ssBody" +
					 ", @ssCreatedOn" +
					 ", @ssCreatedBy" +
					 ", @ssMsgId" +
					 ", @ssStatus" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENCommunication.ssStudentId== "")) {
						insertSqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENCommunication.ssStudentId);
					}
					if ((ssENCommunication.ssTypeId==0)) {
						insertSqlCmd.CreateParameter("@ssTypeId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssTypeId", DbType.Int32, ssENCommunication.ssTypeId);
					}
					insertSqlCmd.CreateParameter("@ssFrom", DbType.String, ssENCommunication.ssFrom);
					insertSqlCmd.CreateParameter("@ssTo", DbType.String, ssENCommunication.ssTo);
					insertSqlCmd.CreateParameter("@ssBCC", DbType.String, ssENCommunication.ssBCC);
					insertSqlCmd.CreateParameter("@ssCC", DbType.String, ssENCommunication.ssCC);
					insertSqlCmd.CreateParameter("@ssSubject", DbType.String, ssENCommunication.ssSubject);
					insertSqlCmd.CreateParameter("@ssBody", DbType.String, ssENCommunication.ssBody);
					insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENCommunication.ssCreatedOn);
					if ((ssENCommunication.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCommunication.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssMsgId", DbType.String, ssENCommunication.ssMsgId);
					insertSqlCmd.CreateParameter("@ssStatus", DbType.String, ssENCommunication.ssStatus);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateCommunication", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateCommunication
		/// </summary>

		public static void CreateOrUpdateCommunication(HeContext heContext, BitArray usedFields, RCCommunicationRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationEntity.eSpaceId;
				ENCommunicationEntityRecord ssENCommunication = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(13, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCommunicationEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TYPEID] = @ssTypeId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[FROM] = @ssFrom"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TO] = @ssTo"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[BCC] = @ssBCC"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CC] = @ssCC"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUBJECT] = @ssSubject"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[BODY] = @ssBody"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MSGID] = @ssMsgId"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STATUS] = @ssStatus"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCommunicationssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCommunication.ssStudentId== "")) {
							sqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENCommunication.ssStudentId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCommunication.ssTypeId==0)) {
							sqlCmd.CreateParameter("@ssTypeId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssTypeId", DbType.Int32, ssENCommunication.ssTypeId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssFrom", DbType.String, ssENCommunication.ssFrom);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssTo", DbType.String, ssENCommunication.ssTo);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssBCC", DbType.String, ssENCommunication.ssBCC);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssCC", DbType.String, ssENCommunication.ssCC);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssSubject", DbType.String, ssENCommunication.ssSubject);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssBody", DbType.String, ssENCommunication.ssBody);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENCommunication.ssCreatedOn);
						counter++;
					}
					if (usedFields[10]) {
						if ((ssENCommunication.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCommunication.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssMsgId", DbType.String, ssENCommunication.ssMsgId);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssStatus", DbType.String, ssENCommunication.ssStatus);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDON] = [CREATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCommunicationssId", DbType.Int32, ssENCommunication.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateCommunication (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENCommunicationEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTID]" +
						 ", [TYPEID]" +
						 ", [FROM]" +
						 ", [TO]" +
						 ", [BCC]" +
						 ", [CC]" +
						 ", [SUBJECT]" +
						 ", [BODY]" +
						 ", [CREATEDON]" +
						 ", [CREATEDBY]" +
						 ", [MSGID]" +
						 ", [STATUS]" +
						 " ) VALUES (" +
						 " @ssStudentId" +
						 ", @ssTypeId" +
						 ", @ssFrom" +
						 ", @ssTo" +
						 ", @ssBCC" +
						 ", @ssCC" +
						 ", @ssSubject" +
						 ", @ssBody" +
						 ", @ssCreatedOn" +
						 ", @ssCreatedBy" +
						 ", @ssMsgId" +
						 ", @ssStatus" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENCommunication.ssStudentId== "")) {
							insertSqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENCommunication.ssStudentId);
						}
						if ((ssENCommunication.ssTypeId==0)) {
							insertSqlCmd.CreateParameter("@ssTypeId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssTypeId", DbType.Int32, ssENCommunication.ssTypeId);
						}
						insertSqlCmd.CreateParameter("@ssFrom", DbType.String, ssENCommunication.ssFrom);
						insertSqlCmd.CreateParameter("@ssTo", DbType.String, ssENCommunication.ssTo);
						insertSqlCmd.CreateParameter("@ssBCC", DbType.String, ssENCommunication.ssBCC);
						insertSqlCmd.CreateParameter("@ssCC", DbType.String, ssENCommunication.ssCC);
						insertSqlCmd.CreateParameter("@ssSubject", DbType.String, ssENCommunication.ssSubject);
						insertSqlCmd.CreateParameter("@ssBody", DbType.String, ssENCommunication.ssBody);
						insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENCommunication.ssCreatedOn);
						if ((ssENCommunication.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCommunication.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssMsgId", DbType.String, ssENCommunication.ssMsgId);
						insertSqlCmd.CreateParameter("@ssStatus", DbType.String, ssENCommunication.ssStatus);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateCommunication", true), typeof(int));
					} else {
						outParamId = ssENCommunication.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteCommunication
		/// </summary>

		public static void DeleteCommunication(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENCommunicationEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteCommunication", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCommunication
		/// </summary>

		public static void GetCommunication(HeContext heContext, int inParamId, out RCCommunicationRecord outParamRecord) {
			outParamRecord = new RCCommunicationRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [TYPEID]" +
					 ", [FROM]" +
					 ", [TO]" +
					 ", [BCC]" +
					 ", [CC]" +
					 ", [SUBJECT]" +
					 ", [BODY]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 ", [MSGID]" +
					 ", [STATUS]" +
					 " FROM " + ENCommunicationEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCommunication", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(13, false)
							}
							;
						} else
						throw new DataBaseException(ENCommunicationEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCommunicationForUpdate
		/// </summary>

		public static void GetCommunicationForUpdate(HeContext heContext, int inParamId, out RCCommunicationRecord outParamRecord) {
			outParamRecord = new RCCommunicationRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [TYPEID]" +
					 ", [FROM]" +
					 ", [TO]" +
					 ", [BCC]" +
					 ", [CC]" +
					 ", [SUBJECT]" +
					 ", [BODY]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 ", [MSGID]" +
					 ", [STATUS]" +
					 "FROM " + ENCommunicationEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCommunicationForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(13, false)
							}
							;
						} else
						throw new DataBaseException(ENCommunicationEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateCommunication
		/// </summary>

		public static void UpdateCommunication(HeContext heContext, BitArray usedFields, RCCommunicationRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationEntity.eSpaceId;
				ENCommunicationEntityRecord ssENCommunication = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(13, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCommunicationEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TYPEID] = @ssTypeId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[FROM] = @ssFrom"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TO] = @ssTo"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[BCC] = @ssBCC"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CC] = @ssCC"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUBJECT] = @ssSubject"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[BODY] = @ssBody"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MSGID] = @ssMsgId"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STATUS] = @ssStatus"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCommunicationssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCommunication.ssStudentId== "")) {
							sqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENCommunication.ssStudentId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCommunication.ssTypeId==0)) {
							sqlCmd.CreateParameter("@ssTypeId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssTypeId", DbType.Int32, ssENCommunication.ssTypeId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssFrom", DbType.String, ssENCommunication.ssFrom);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssTo", DbType.String, ssENCommunication.ssTo);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssBCC", DbType.String, ssENCommunication.ssBCC);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssCC", DbType.String, ssENCommunication.ssCC);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssSubject", DbType.String, ssENCommunication.ssSubject);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssBody", DbType.String, ssENCommunication.ssBody);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENCommunication.ssCreatedOn);
						counter++;
					}
					if (usedFields[10]) {
						if ((ssENCommunication.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCommunication.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssMsgId", DbType.String, ssENCommunication.ssMsgId);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssStatus", DbType.String, ssENCommunication.ssStatus);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDON] = [CREATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCommunicationssId", DbType.Int32, ssENCommunication.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateCommunication", true) <= 0)
					throw new DataBaseException(ENCommunicationEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENCommunication.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Communication")]
	public class WORCCommunicationRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentId")]
		public string varWSStudentId;

		[System.Xml.Serialization.XmlElement("TypeId")]
		public int varWSTypeId;

		[System.Xml.Serialization.XmlElement("From")]
		public string varWSFrom;

		[System.Xml.Serialization.XmlElement("To")]
		public string varWSTo;

		[System.Xml.Serialization.XmlElement("BCC")]
		public string varWSBCC;

		[System.Xml.Serialization.XmlElement("CC")]
		public string varWSCC;

		[System.Xml.Serialization.XmlElement("Subject")]
		public string varWSSubject;

		[System.Xml.Serialization.XmlElement("Body")]
		public string varWSBody;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime varWSCreatedOn;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("MsgId")]
		public string varWSMsgId;

		[System.Xml.Serialization.XmlElement("Status")]
		public string varWSStatus;

		public WORCCommunicationRecord() {
			varWSId = (int) 0;
			varWSStudentId = (string) "";
			varWSTypeId = (int) 0;
			varWSFrom = (string) "";
			varWSTo = (string) "";
			varWSBCC = (string) "";
			varWSCC = (string) "";
			varWSSubject = (string) "";
			varWSBody = (string) "";
			varWSCreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
			varWSMsgId = (string) "";
			varWSStatus = (string) "";
		}

		public WORCCommunicationRecord(ENCommunicationEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentId = BaseAppUtils.RemoveControlChars(r.ssStudentId);
			varWSTypeId = (int) r.ssTypeId;
			varWSFrom = BaseAppUtils.RemoveControlChars(r.ssFrom);
			varWSTo = BaseAppUtils.RemoveControlChars(r.ssTo);
			varWSBCC = BaseAppUtils.RemoveControlChars(r.ssBCC);
			varWSCC = BaseAppUtils.RemoveControlChars(r.ssCC);
			varWSSubject = BaseAppUtils.RemoveControlChars(r.ssSubject);
			varWSBody = BaseAppUtils.RemoveControlChars(r.ssBody);
			varWSCreatedOn = (DateTime) r.ssCreatedOn;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSMsgId = BaseAppUtils.RemoveControlChars(r.ssMsgId);
			varWSStatus = BaseAppUtils.RemoveControlChars(r.ssStatus);
		}

		public static RLCommunicationList ToRecordList(WORCCommunicationRecord[] array) {
			RLCommunicationList rl = new RLCommunicationList();
			if (array != null) {
				foreach(WORCCommunicationRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCommunicationRecord[] FromRecordList(RLCommunicationList rl) {
			WORCCommunicationRecord[] array = new WORCCommunicationRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCommunicationRecord {
		public static implicit operator WORCCommunicationRecord(RCCommunicationRecord r) {
			return new WORCCommunicationRecord(r.ssENCommunication);
		}

		public static implicit operator RCCommunicationRecord(WORCCommunicationRecord w) {
			RCCommunicationRecord r = new RCCommunicationRecord("");
			if (w != null) {
				r.ssENCommunication = w;
			}
			return r;
		}

	}

	partial struct ENCommunicationEntityRecord {
		public static implicit operator WORCCommunicationRecord(ENCommunicationEntityRecord r) {
			return new WORCCommunicationRecord(r);
		}

		public static implicit operator ENCommunicationEntityRecord(WORCCommunicationRecord w) {
			ENCommunicationEntityRecord r = new ENCommunicationEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentId = (string) w.varWSStudentId;
				r.ssTypeId = (int) w.varWSTypeId;
				r.ssFrom = ((string) w.varWSFrom ?? "");
				r.ssTo = ((string) w.varWSTo ?? "");
				r.ssBCC = ((string) w.varWSBCC ?? "");
				r.ssCC = ((string) w.varWSCC ?? "");
				r.ssSubject = ((string) w.varWSSubject ?? "");
				r.ssBody = ((string) w.varWSBody ?? "");
				r.ssCreatedOn = (DateTime) w.varWSCreatedOn;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssMsgId = ((string) w.varWSMsgId ?? "");
				r.ssStatus = ((string) w.varWSStatus ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCommunicationRecordList {
		public WORCCommunicationRecord[] Array;


		public WORLCommunicationRecordList(WORCCommunicationRecord[] r) {
			if (r == null)
			Array = new WORCCommunicationRecord[0];
			else
			Array = r;
		}
		public WORLCommunicationRecordList() {
			Array = new WORCCommunicationRecord[0];
		}

		public WORLCommunicationRecordList(RLCommunicationRecordList rl) {
			rl=(RLCommunicationRecordList) rl.Duplicate();
			Array = new WORCCommunicationRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCommunicationRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCommunicationRecordList {
		public static implicit operator RLCommunicationRecordList(WORCCommunicationRecord[] array) {
			RLCommunicationRecordList rl = new RLCommunicationRecordList();
			if (array != null) {
				foreach(WORCCommunicationRecord val in array) {
					rl.Append((RCCommunicationRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCommunicationRecord[](RLCommunicationRecordList rl) {
			WORCCommunicationRecord[] array = new WORCCommunicationRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCommunicationRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCommunicationRecordList {
		public static implicit operator RLCommunicationRecordList(WORLCommunicationRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCommunicationRecordList(RLCommunicationRecordList rl) {
			return new WORLCommunicationRecordList(rl);
		}
		public static implicit operator WORCCommunicationRecord[](WORLCommunicationRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCommunicationRecordList(WORCCommunicationRecord[] array) {
			return new WORLCommunicationRecordList(array);
		}
	}
}

