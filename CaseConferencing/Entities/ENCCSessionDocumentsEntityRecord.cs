/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENCCSessionDocumentsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENCCSessionDocumentsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENCCSessionDocumentsEntity.eSpaceId;
	} // ENCCSessionDocumentsEntity

	/// <summary>
	/// Entity <code>ENCCSessionDocumentsEntityRecord</code> that represents the Service Studio entity
	///  <code>CCSessionDocuments</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("CCSessionDocuments", "SiQNyaVdz0ex9H3IR+gJiw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_CCSessionDocuments", "")]
	[Serializable()]
	public partial struct ENCCSessionDocumentsEntityRecord: ISerializable, ITypedRecord<ENCCSessionDocumentsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ztfRNzX5NUOePfKgfoARdg");
		private static readonly GlobalObjectKey IdCCSessionID = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*b3zUnxPv3Ey_2tOQeBAC9g");
		private static readonly GlobalObjectKey IdDocumentId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*kXyTmUo1ZE6wJuFkbDPj_w");
		private static readonly GlobalObjectKey IdAddedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*lAU_TTZRHkGasIZF_kAGQw");
		private static readonly GlobalObjectKey IdAddedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*UBRXuRJxQkW1xVrdc9w3CQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(5, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CCSESSIONID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CCSessionID")]
		private int _ssCCSessionID;
		public int ssCCSessionID {
			get {
				return _ssCCSessionID;
			}
			set {
				if ((_ssCCSessionID!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssCCSessionID = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("DocumentId")]
		private int _ssDocumentId;
		public int ssDocumentId {
			get {
				return _ssDocumentId;
			}
			set {
				if ((_ssDocumentId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDocumentId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ADDEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("AddedOn")]
		private DateTime _ssAddedOn;
		public DateTime ssAddedOn {
			get {
				return _ssAddedOn;
			}
			set {
				if ((_ssAddedOn!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssAddedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ADDEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("AddedBy")]
		private int _ssAddedBy;
		public int ssAddedBy {
			get {
				return _ssAddedBy;
			}
			set {
				if ((_ssAddedBy!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssAddedBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENCCSessionDocumentsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssCCSessionID = 0;
			_ssDocumentId = 0;
			_ssAddedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssAddedBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "CCSessionDocuments.Id", 0);
			ssCCSessionID = r.ReadEntityReference(index++, "CCSessionDocuments.CCSessionID", 0);
			ssDocumentId = r.ReadEntityReference(index++, "CCSessionDocuments.DocumentId", 0);
			ssAddedOn = r.ReadDateTime(index++, "CCSessionDocuments.AddedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssAddedBy = r.ReadEntityReference(index++, "CCSessionDocuments.AddedBy", 0);
			ChangedAttributes = new BitArray(5, false);
			OptimizedAttributes = new BitArray(5, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENCCSessionDocumentsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENCCSessionDocumentsEntityRecord a, ENCCSessionDocumentsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssCCSessionID != b.ssCCSessionID) return false;
			if (a.ssDocumentId != b.ssDocumentId) return false;
			if (a.ssAddedOn != b.ssAddedOn) return false;
			if (a.ssAddedBy != b.ssAddedBy) return false;
			return true;
		}

		public static bool operator != (ENCCSessionDocumentsEntityRecord a, ENCCSessionDocumentsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENCCSessionDocumentsEntityRecord)) return false;
			return (this == (ENCCSessionDocumentsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssCCSessionID.GetHashCode()
				^ ssDocumentId.GetHashCode()
				^ ssAddedOn.GetHashCode()
				^ ssAddedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENCCSessionDocumentsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssCCSessionID = 0;
			_ssDocumentId = 0;
			_ssAddedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssAddedBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssCCSessionID = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDocumentId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssAddedOn = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssAddedBy = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENCCSessionDocumentsEntityRecord Duplicate() {
			ENCCSessionDocumentsEntityRecord t;
			t._ssId = this._ssId;
			t._ssCCSessionID = this._ssCCSessionID;
			t._ssDocumentId = this._ssDocumentId;
			t._ssAddedOn = this._ssAddedOn;
			t._ssAddedBy = this._ssAddedBy;
			t.ChangedAttributes = new BitArray(5);
			t.OptimizedAttributes = new BitArray(5);
			for (int i = 0; i < 5; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CCSessionID")) VarValue.AppendAttribute(recordElem, "CCSessionID", ssCCSessionID, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CCSessionID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocumentId")) VarValue.AppendAttribute(recordElem, "DocumentId", ssDocumentId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "DocumentId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AddedOn")) VarValue.AppendAttribute(recordElem, "AddedOn", ssAddedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "AddedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AddedBy")) VarValue.AppendAttribute(recordElem, "AddedBy", ssAddedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "AddedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "ccsessionid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CCSessionID")) variable.Value = ssCCSessionID; else variable.Optimized = true;
			} else if (head == "documentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocumentId")) variable.Value = ssDocumentId; else variable.Optimized = true;
			} else if (head == "addedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AddedOn")) variable.Value = ssAddedOn; else variable.Optimized = true;
			} else if (head == "addedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AddedBy")) variable.Value = ssAddedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdCCSessionID)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDocumentId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdAddedOn)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdAddedBy)) {
				return ChangedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdCCSessionID)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDocumentId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdAddedOn)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdAddedBy)) {
				return OptimizedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdCCSessionID) {
				return ssCCSessionID;
			} else if (key == IdDocumentId) {
				return ssDocumentId;
			} else if (key == IdAddedOn) {
				return ssAddedOn;
			} else if (key == IdAddedBy) {
				return ssAddedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(5);
			OptimizedAttributes = new BitArray(5);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssCCSessionID = (int) other.AttributeGet(IdCCSessionID);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdCCSessionID);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdCCSessionID);
			ssDocumentId = (int) other.AttributeGet(IdDocumentId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDocumentId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDocumentId);
			ssAddedOn = (DateTime) other.AttributeGet(IdAddedOn);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdAddedOn);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdAddedOn);
			ssAddedBy = (int) other.AttributeGet(IdAddedBy);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdAddedBy);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdAddedBy);
		}
	} // ENCCSessionDocumentsEntityRecord
	/// <summary>
	/// Structure <code>RCCCSessionDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCCSessionDocumentsRecord: ISerializable, ITypedRecord<RCCCSessionDocumentsRecord> {
		private static readonly GlobalObjectKey IdCCSessionDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*1NvNXTzD7JuDJc59eCCADQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CCSessionDocuments")]
		public ENCCSessionDocumentsEntityRecord ssENCCSessionDocuments;


		public static implicit operator ENCCSessionDocumentsEntityRecord(RCCCSessionDocumentsRecord r) {
			return r.ssENCCSessionDocuments;
		}

		public static implicit operator RCCCSessionDocumentsRecord(ENCCSessionDocumentsEntityRecord r) {
			RCCCSessionDocumentsRecord res = new RCCCSessionDocumentsRecord(null);
			res.ssENCCSessionDocuments = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENCCSessionDocuments.ChangedAttributes = value;
			}
			get {
				return ssENCCSessionDocuments.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCCCSessionDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCCSessionDocuments = new ENCCSessionDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCCSessionDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENCCSessionDocuments.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENCCSessionDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCCSessionDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCCSessionDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCCCSessionDocumentsRecord a, RCCCSessionDocumentsRecord b) {
			if (a.ssENCCSessionDocuments != b.ssENCCSessionDocuments) return false;
			return true;
		}

		public static bool operator != (RCCCSessionDocumentsRecord a, RCCCSessionDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCCSessionDocumentsRecord)) return false;
			return (this == (RCCCSessionDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCCSessionDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCCSessionDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCCSessionDocuments = new ENCCSessionDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCCSessionDocuments = (ENCCSessionDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENCCSessionDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCCSessionDocuments.InternalRecursiveSave();
		}


		public RCCCSessionDocumentsRecord Duplicate() {
			RCCCSessionDocumentsRecord t;
			t.ssENCCSessionDocuments = (ENCCSessionDocumentsEntityRecord) this.ssENCCSessionDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCCSessionDocuments.ToXml(this, recordElem, "CCSessionDocuments", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "ccsessiondocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CCSessionDocuments")) variable.Value = ssENCCSessionDocuments; else variable.Optimized = true;
				variable.SetFieldName("ccsessiondocuments");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENCCSessionDocuments.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENCCSessionDocuments.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCCSessionDocuments) {
				return ssENCCSessionDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCCSessionDocuments.FillFromOther((IRecord) other.AttributeGet(IdCCSessionDocuments));
		}
	} // RCCCSessionDocumentsRecord
	/// <summary>
	/// RecordList type <code>RLCCSessionDocumentsRecordList</code> that represents a record list of
	///  <code>CCSessionDocuments</code>
	/// </summary>
	[Serializable()]
	public partial class RLCCSessionDocumentsRecordList: GenericRecordList<RCCCSessionDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCCSessionDocumentsRecord GetElementDefaultValue() {
			return new RCCCSessionDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCCCSessionDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCCSessionDocumentsRecordList recordlist, Func<RCCCSessionDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCCSessionDocumentsRecordList ToList<T>(T[] array, Func <T, RCCCSessionDocumentsRecord> converter) {
			RLCCSessionDocumentsRecordList result = new RLCCSessionDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCCSessionDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCCSessionDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCCSessionDocumentsRecord> NewList() {
			return new RLCCSessionDocumentsRecordList();
		}


	} // RLCCSessionDocumentsRecordList

	/// <summary>
	/// RecordList type <code>RLCCSessionDocumentsList</code> that represents a record list of
	///  <code>UserIdentifier, DateTime, Integer, CCSessionIdentifier, DocumentsIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLCCSessionDocumentsList: GenericRecordList<ENCCSessionDocumentsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENCCSessionDocumentsEntityRecord GetElementDefaultValue() {
			return new ENCCSessionDocumentsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENCCSessionDocumentsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCCSessionDocumentsList recordlist, Func<ENCCSessionDocumentsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCCSessionDocumentsList ToList<T>(T[] array, Func <T, ENCCSessionDocumentsEntityRecord> converter) {
			RLCCSessionDocumentsList result = new RLCCSessionDocumentsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCCSessionDocumentsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionDocumentsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionDocumentsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCCSessionDocumentsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENCCSessionDocumentsEntityRecord> NewList() {
			return new RLCCSessionDocumentsList();
		}


	} // RLCCSessionDocumentsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateCCSessionDocuments
		/// </summary>

		public static void CreateCCSessionDocuments(HeContext heContext, RCCCSessionDocumentsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionDocumentsEntity.eSpaceId;
				ENCCSessionDocumentsEntityRecord ssENCCSessionDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENCCSessionDocumentsEntity.LocalViewName(null, null) + " (" +
					 " [CCSESSIONID]" +
					 ", [DOCUMENTID]" +
					 ", [ADDEDON]" +
					 ", [ADDEDBY]" +
					 " ) VALUES (" +
					 " @ssCCSessionID" +
					 ", @ssDocumentId" +
					 ", @ssAddedOn" +
					 ", @ssAddedBy" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENCCSessionDocuments.ssCCSessionID==0)) {
						insertSqlCmd.CreateParameter("@ssCCSessionID", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCCSessionID", DbType.Int32, ssENCCSessionDocuments.ssCCSessionID);
					}
					if ((ssENCCSessionDocuments.ssDocumentId==0)) {
						insertSqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENCCSessionDocuments.ssDocumentId);
					}
					insertSqlCmd.CreateParameter("@ssAddedOn", DbType.DateTime, ssENCCSessionDocuments.ssAddedOn);
					if ((ssENCCSessionDocuments.ssAddedBy==0)) {
						insertSqlCmd.CreateParameter("@ssAddedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssAddedBy", DbType.Int32, ssENCCSessionDocuments.ssAddedBy);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateCCSessionDocuments", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateCCSessionDocuments
		/// </summary>

		public static void CreateOrUpdateCCSessionDocuments(HeContext heContext, BitArray usedFields, RCCCSessionDocumentsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionDocumentsEntity.eSpaceId;
				ENCCSessionDocumentsEntityRecord ssENCCSessionDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCCSessionDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CCSESSIONID] = @ssCCSessionID"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDEDON] = @ssAddedOn"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDEDBY] = @ssAddedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCCSessionDocumentsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCCSessionDocuments.ssCCSessionID==0)) {
							sqlCmd.CreateParameter("@ssCCSessionID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCCSessionID", DbType.Int32, ssENCCSessionDocuments.ssCCSessionID);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCCSessionDocuments.ssDocumentId==0)) {
							sqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENCCSessionDocuments.ssDocumentId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssAddedOn", DbType.DateTime, ssENCCSessionDocuments.ssAddedOn);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENCCSessionDocuments.ssAddedBy==0)) {
							sqlCmd.CreateParameter("@ssAddedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssAddedBy", DbType.Int32, ssENCCSessionDocuments.ssAddedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ADDEDON] = [ADDEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCCSessionDocumentsssId", DbType.Int32, ssENCCSessionDocuments.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateCCSessionDocuments (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENCCSessionDocumentsEntity.LocalViewName(null, null) + " (" +
						 " [CCSESSIONID]" +
						 ", [DOCUMENTID]" +
						 ", [ADDEDON]" +
						 ", [ADDEDBY]" +
						 " ) VALUES (" +
						 " @ssCCSessionID" +
						 ", @ssDocumentId" +
						 ", @ssAddedOn" +
						 ", @ssAddedBy" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENCCSessionDocuments.ssCCSessionID==0)) {
							insertSqlCmd.CreateParameter("@ssCCSessionID", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCCSessionID", DbType.Int32, ssENCCSessionDocuments.ssCCSessionID);
						}
						if ((ssENCCSessionDocuments.ssDocumentId==0)) {
							insertSqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENCCSessionDocuments.ssDocumentId);
						}
						insertSqlCmd.CreateParameter("@ssAddedOn", DbType.DateTime, ssENCCSessionDocuments.ssAddedOn);
						if ((ssENCCSessionDocuments.ssAddedBy==0)) {
							insertSqlCmd.CreateParameter("@ssAddedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssAddedBy", DbType.Int32, ssENCCSessionDocuments.ssAddedBy);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateCCSessionDocuments", true), typeof(int));
					} else {
						outParamId = ssENCCSessionDocuments.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteCCSessionDocuments
		/// </summary>

		public static void DeleteCCSessionDocuments(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENCCSessionDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteCCSessionDocuments", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCCSessionDocuments
		/// </summary>

		public static void GetCCSessionDocuments(HeContext heContext, int inParamId, out RCCCSessionDocumentsRecord outParamRecord) {
			outParamRecord = new RCCCSessionDocumentsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [CCSESSIONID]" +
					 ", [DOCUMENTID]" +
					 ", [ADDEDON]" +
					 ", [ADDEDBY]" +
					 " FROM " + ENCCSessionDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCCSessionDocuments", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENCCSessionDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCCSessionDocumentsForUpdate
		/// </summary>

		public static void GetCCSessionDocumentsForUpdate(HeContext heContext, int inParamId, out RCCCSessionDocumentsRecord outParamRecord) {
			outParamRecord = new RCCCSessionDocumentsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [CCSESSIONID]" +
					 ", [DOCUMENTID]" +
					 ", [ADDEDON]" +
					 ", [ADDEDBY]" +
					 "FROM " + ENCCSessionDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCCSessionDocumentsForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENCCSessionDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateCCSessionDocuments
		/// </summary>

		public static void UpdateCCSessionDocuments(HeContext heContext, BitArray usedFields, RCCCSessionDocumentsRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionDocumentsEntity.eSpaceId;
				ENCCSessionDocumentsEntityRecord ssENCCSessionDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCCSessionDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CCSESSIONID] = @ssCCSessionID"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDEDON] = @ssAddedOn"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDEDBY] = @ssAddedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCCSessionDocumentsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCCSessionDocuments.ssCCSessionID==0)) {
							sqlCmd.CreateParameter("@ssCCSessionID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCCSessionID", DbType.Int32, ssENCCSessionDocuments.ssCCSessionID);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCCSessionDocuments.ssDocumentId==0)) {
							sqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENCCSessionDocuments.ssDocumentId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssAddedOn", DbType.DateTime, ssENCCSessionDocuments.ssAddedOn);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENCCSessionDocuments.ssAddedBy==0)) {
							sqlCmd.CreateParameter("@ssAddedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssAddedBy", DbType.Int32, ssENCCSessionDocuments.ssAddedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ADDEDON] = [ADDEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCCSessionDocumentsssId", DbType.Int32, ssENCCSessionDocuments.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateCCSessionDocuments", true) <= 0)
					throw new DataBaseException(ENCCSessionDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENCCSessionDocuments.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("CCSessionDocuments")]
	public class WORCCCSessionDocumentsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("CCSessionID")]
		public int varWSCCSessionID;

		[System.Xml.Serialization.XmlElement("DocumentId")]
		public int varWSDocumentId;

		[System.Xml.Serialization.XmlElement("AddedOn")]
		public DateTime varWSAddedOn;

		[System.Xml.Serialization.XmlElement("AddedBy")]
		public int varWSAddedBy;

		public WORCCCSessionDocumentsRecord() {
			varWSId = (int) 0;
			varWSCCSessionID = (int) 0;
			varWSDocumentId = (int) 0;
			varWSAddedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSAddedBy = (int) 0;
		}

		public WORCCCSessionDocumentsRecord(ENCCSessionDocumentsEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSCCSessionID = (int) r.ssCCSessionID;
			varWSDocumentId = (int) r.ssDocumentId;
			varWSAddedOn = (DateTime) r.ssAddedOn;
			varWSAddedBy = (int) r.ssAddedBy;
		}

		public static RLCCSessionDocumentsList ToRecordList(WORCCCSessionDocumentsRecord[] array) {
			RLCCSessionDocumentsList rl = new RLCCSessionDocumentsList();
			if (array != null) {
				foreach(WORCCCSessionDocumentsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCCSessionDocumentsRecord[] FromRecordList(RLCCSessionDocumentsList rl) {
			WORCCCSessionDocumentsRecord[] array = new WORCCCSessionDocumentsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCCSessionDocumentsRecord {
		public static implicit operator WORCCCSessionDocumentsRecord(RCCCSessionDocumentsRecord r) {
			return new WORCCCSessionDocumentsRecord(r.ssENCCSessionDocuments);
		}

		public static implicit operator RCCCSessionDocumentsRecord(WORCCCSessionDocumentsRecord w) {
			RCCCSessionDocumentsRecord r = new RCCCSessionDocumentsRecord("");
			if (w != null) {
				r.ssENCCSessionDocuments = w;
			}
			return r;
		}

	}

	partial struct ENCCSessionDocumentsEntityRecord {
		public static implicit operator WORCCCSessionDocumentsRecord(ENCCSessionDocumentsEntityRecord r) {
			return new WORCCCSessionDocumentsRecord(r);
		}

		public static implicit operator ENCCSessionDocumentsEntityRecord(WORCCCSessionDocumentsRecord w) {
			ENCCSessionDocumentsEntityRecord r = new ENCCSessionDocumentsEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssCCSessionID = (int) w.varWSCCSessionID;
				r.ssDocumentId = (int) w.varWSDocumentId;
				r.ssAddedOn = (DateTime) w.varWSAddedOn;
				r.ssAddedBy = (int) w.varWSAddedBy;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCCSessionDocumentsRecordList {
		public WORCCCSessionDocumentsRecord[] Array;


		public WORLCCSessionDocumentsRecordList(WORCCCSessionDocumentsRecord[] r) {
			if (r == null)
			Array = new WORCCCSessionDocumentsRecord[0];
			else
			Array = r;
		}
		public WORLCCSessionDocumentsRecordList() {
			Array = new WORCCCSessionDocumentsRecord[0];
		}

		public WORLCCSessionDocumentsRecordList(RLCCSessionDocumentsRecordList rl) {
			rl=(RLCCSessionDocumentsRecordList) rl.Duplicate();
			Array = new WORCCCSessionDocumentsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCCSessionDocumentsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCCSessionDocumentsRecordList {
		public static implicit operator RLCCSessionDocumentsRecordList(WORCCCSessionDocumentsRecord[] array) {
			RLCCSessionDocumentsRecordList rl = new RLCCSessionDocumentsRecordList();
			if (array != null) {
				foreach(WORCCCSessionDocumentsRecord val in array) {
					rl.Append((RCCCSessionDocumentsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCCSessionDocumentsRecord[](RLCCSessionDocumentsRecordList rl) {
			WORCCCSessionDocumentsRecord[] array = new WORCCCSessionDocumentsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCCSessionDocumentsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCCSessionDocumentsRecordList {
		public static implicit operator RLCCSessionDocumentsRecordList(WORLCCSessionDocumentsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCCSessionDocumentsRecordList(RLCCSessionDocumentsRecordList rl) {
			return new WORLCCSessionDocumentsRecordList(rl);
		}
		public static implicit operator WORCCCSessionDocumentsRecord[](WORLCCSessionDocumentsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCCSessionDocumentsRecordList(WORCCCSessionDocumentsRecord[] array) {
			return new WORLCCSessionDocumentsRecordList(array);
		}
	}
}

