/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSafeguardingEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENSafeguardingEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENSafeguardingEntity.eSpaceId;
	} // ENSafeguardingEntity

	/// <summary>
	/// Entity <code>ENSafeguardingEntityRecord</code> that represents the Service Studio entity
	///  <code>Safeguarding</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Safeguarding", "ZhszCggz10WQ_bFWjWF6hA", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Safeguarding", "")]
	[Serializable()]
	public partial struct ENSafeguardingEntityRecord: ISerializable, ITypedRecord<ENSafeguardingEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*o4JNdu4C1kuPs+1+GM8Fpg");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*SvExCi6qBUS8bus12S6iCw");
		private static readonly GlobalObjectKey IdSafeguardingTypeId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*keEOSCwIRESOlELibUUb8g");
		private static readonly GlobalObjectKey IdSafeguardingStatusId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*taXzBBhP702LUp57+Gq2Lg");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(4, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGTYPEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SafeguardingTypeId")]
		private int _ssSafeguardingTypeId;
		public int ssSafeguardingTypeId {
			get {
				return _ssSafeguardingTypeId;
			}
			set {
				if ((_ssSafeguardingTypeId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssSafeguardingTypeId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGSTATUSID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SafeguardingStatusId")]
		private int _ssSafeguardingStatusId;
		public int ssSafeguardingStatusId {
			get {
				return _ssSafeguardingStatusId;
			}
			set {
				if ((_ssSafeguardingStatusId!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssSafeguardingStatusId = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSafeguardingEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(4, true);
			OptimizedAttributes = new BitArray(4, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssSafeguardingTypeId = 0;
			_ssSafeguardingStatusId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Safeguarding.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "Safeguarding.StudentReference", "");
			ssSafeguardingTypeId = r.ReadEntityReference(index++, "Safeguarding.SafeguardingTypeId", 0);
			ssSafeguardingStatusId = r.ReadEntityReference(index++, "Safeguarding.SafeguardingStatusId", 0);
			ChangedAttributes = new BitArray(4, false);
			OptimizedAttributes = new BitArray(4, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSafeguardingEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSafeguardingEntityRecord a, ENSafeguardingEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssSafeguardingTypeId != b.ssSafeguardingTypeId) return false;
			if (a.ssSafeguardingStatusId != b.ssSafeguardingStatusId) return false;
			return true;
		}

		public static bool operator != (ENSafeguardingEntityRecord a, ENSafeguardingEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSafeguardingEntityRecord)) return false;
			return (this == (ENSafeguardingEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssSafeguardingTypeId.GetHashCode()
				^ ssSafeguardingStatusId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSafeguardingEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(4, true);
			OptimizedAttributes = new BitArray(4, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssSafeguardingTypeId = 0;
			_ssSafeguardingStatusId = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssSafeguardingTypeId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssSafeguardingStatusId = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSafeguardingEntityRecord Duplicate() {
			ENSafeguardingEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssSafeguardingTypeId = this._ssSafeguardingTypeId;
			t._ssSafeguardingStatusId = this._ssSafeguardingStatusId;
			t.ChangedAttributes = new BitArray(4);
			t.OptimizedAttributes = new BitArray(4);
			for (int i = 0; i < 4; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingTypeId")) VarValue.AppendAttribute(recordElem, "SafeguardingTypeId", ssSafeguardingTypeId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingTypeId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingStatusId")) VarValue.AppendAttribute(recordElem, "SafeguardingStatusId", ssSafeguardingStatusId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingStatusId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "safeguardingtypeid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingTypeId")) variable.Value = ssSafeguardingTypeId; else variable.Optimized = true;
			} else if (head == "safeguardingstatusid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingStatusId")) variable.Value = ssSafeguardingStatusId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdSafeguardingTypeId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdSafeguardingStatusId)) {
				return ChangedAttributes[3];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdSafeguardingTypeId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdSafeguardingStatusId)) {
				return OptimizedAttributes[3];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdSafeguardingTypeId) {
				return ssSafeguardingTypeId;
			} else if (key == IdSafeguardingStatusId) {
				return ssSafeguardingStatusId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(4);
			OptimizedAttributes = new BitArray(4);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssSafeguardingTypeId = (int) other.AttributeGet(IdSafeguardingTypeId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdSafeguardingTypeId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdSafeguardingTypeId);
			ssSafeguardingStatusId = (int) other.AttributeGet(IdSafeguardingStatusId);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdSafeguardingStatusId);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdSafeguardingStatusId);
		}
	} // ENSafeguardingEntityRecord
	/// <summary>
	/// Structure <code>RCSafeguardingRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSafeguardingRecord: ISerializable, ITypedRecord<RCSafeguardingRecord> {
		private static readonly GlobalObjectKey IdSafeguarding = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SdFo0PbvCVcdS4ssnr2ntA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Safeguarding")]
		public ENSafeguardingEntityRecord ssENSafeguarding;


		public static implicit operator ENSafeguardingEntityRecord(RCSafeguardingRecord r) {
			return r.ssENSafeguarding;
		}

		public static implicit operator RCSafeguardingRecord(ENSafeguardingEntityRecord r) {
			RCSafeguardingRecord res = new RCSafeguardingRecord(null);
			res.ssENSafeguarding = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSafeguarding.ChangedAttributes = value;
			}
			get {
				return ssENSafeguarding.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSafeguardingRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSafeguarding = new ENSafeguardingEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSafeguarding.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSafeguarding.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSafeguarding.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSafeguarding.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSafeguardingRecord r) {
			this = r;
		}


		public static bool operator == (RCSafeguardingRecord a, RCSafeguardingRecord b) {
			if (a.ssENSafeguarding != b.ssENSafeguarding) return false;
			return true;
		}

		public static bool operator != (RCSafeguardingRecord a, RCSafeguardingRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSafeguardingRecord)) return false;
			return (this == (RCSafeguardingRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSafeguarding.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSafeguardingRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSafeguarding = new ENSafeguardingEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSafeguarding = (ENSafeguardingEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSafeguarding.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSafeguarding.InternalRecursiveSave();
		}


		public RCSafeguardingRecord Duplicate() {
			RCSafeguardingRecord t;
			t.ssENSafeguarding = (ENSafeguardingEntityRecord) this.ssENSafeguarding.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSafeguarding.ToXml(this, recordElem, "Safeguarding", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "safeguarding") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Safeguarding")) variable.Value = ssENSafeguarding; else variable.Optimized = true;
				variable.SetFieldName("safeguarding");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSafeguarding.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSafeguarding.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSafeguarding) {
				return ssENSafeguarding;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSafeguarding.FillFromOther((IRecord) other.AttributeGet(IdSafeguarding));
		}
	} // RCSafeguardingRecord
	/// <summary>
	/// RecordList type <code>RLSafeguardingRecordList</code> that represents a record list of
	///  <code>Safeguarding</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingRecordList: GenericRecordList<RCSafeguardingRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSafeguardingRecord GetElementDefaultValue() {
			return new RCSafeguardingRecord("");
		}

		public T[] ToArray<T>(Func<RCSafeguardingRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingRecordList recordlist, Func<RCSafeguardingRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingRecordList ToList<T>(T[] array, Func <T, RCSafeguardingRecord> converter) {
			RLSafeguardingRecordList result = new RLSafeguardingRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSafeguardingRecord> NewList() {
			return new RLSafeguardingRecordList();
		}


	} // RLSafeguardingRecordList

	/// <summary>
	/// RecordList type <code>RLSafeguardingList</code> that represents a record list of
	///  <code>StudentIdentifier, SafeguardingTypeIdentifier, SafeguardingStatusIdentifier, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingList: GenericRecordList<ENSafeguardingEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSafeguardingEntityRecord GetElementDefaultValue() {
			return new ENSafeguardingEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSafeguardingEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingList recordlist, Func<ENSafeguardingEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingList ToList<T>(T[] array, Func <T, ENSafeguardingEntityRecord> converter) {
			RLSafeguardingList result = new RLSafeguardingList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSafeguardingEntityRecord> NewList() {
			return new RLSafeguardingList();
		}


	} // RLSafeguardingList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateSafeguarding
		/// </summary>

		public static void CreateSafeguarding(HeContext heContext, RCSafeguardingRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingEntity.eSpaceId;
				ENSafeguardingEntityRecord ssENSafeguarding = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENSafeguardingEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [SAFEGUARDINGTYPEID]" +
					 ", [SAFEGUARDINGSTATUSID]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssSafeguardingTypeId" +
					 ", @ssSafeguardingStatusId" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENSafeguarding.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSafeguarding.ssStudentReference);
					}
					if ((ssENSafeguarding.ssSafeguardingTypeId==0)) {
						insertSqlCmd.CreateParameter("@ssSafeguardingTypeId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSafeguardingTypeId", DbType.Int32, ssENSafeguarding.ssSafeguardingTypeId);
					}
					if ((ssENSafeguarding.ssSafeguardingStatusId==0)) {
						insertSqlCmd.CreateParameter("@ssSafeguardingStatusId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSafeguardingStatusId", DbType.Int32, ssENSafeguarding.ssSafeguardingStatusId);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateSafeguarding", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateSafeguarding
		/// </summary>

		public static void CreateOrUpdateSafeguarding(HeContext heContext, BitArray usedFields, RCSafeguardingRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingEntity.eSpaceId;
				ENSafeguardingEntityRecord ssENSafeguarding = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(4, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSafeguardingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGTYPEID] = @ssSafeguardingTypeId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGSTATUSID] = @ssSafeguardingStatusId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSafeguardingssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSafeguarding.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSafeguarding.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSafeguarding.ssSafeguardingTypeId==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingTypeId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingTypeId", DbType.Int32, ssENSafeguarding.ssSafeguardingTypeId);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENSafeguarding.ssSafeguardingStatusId==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingStatusId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingStatusId", DbType.Int32, ssENSafeguarding.ssSafeguardingStatusId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[SAFEGUARDINGTYPEID] = [SAFEGUARDINGTYPEID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSafeguardingssId", DbType.Int32, ssENSafeguarding.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateSafeguarding (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENSafeguardingEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [SAFEGUARDINGTYPEID]" +
						 ", [SAFEGUARDINGSTATUSID]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssSafeguardingTypeId" +
						 ", @ssSafeguardingStatusId" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENSafeguarding.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSafeguarding.ssStudentReference);
						}
						if ((ssENSafeguarding.ssSafeguardingTypeId==0)) {
							insertSqlCmd.CreateParameter("@ssSafeguardingTypeId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSafeguardingTypeId", DbType.Int32, ssENSafeguarding.ssSafeguardingTypeId);
						}
						if ((ssENSafeguarding.ssSafeguardingStatusId==0)) {
							insertSqlCmd.CreateParameter("@ssSafeguardingStatusId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSafeguardingStatusId", DbType.Int32, ssENSafeguarding.ssSafeguardingStatusId);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateSafeguarding", true), typeof(int));
					} else {
						outParamId = ssENSafeguarding.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteSafeguarding
		/// </summary>

		public static void DeleteSafeguarding(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENSafeguardingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteSafeguarding", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSafeguarding
		/// </summary>

		public static void GetSafeguarding(HeContext heContext, int inParamId, out RCSafeguardingRecord outParamRecord) {
			outParamRecord = new RCSafeguardingRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [SAFEGUARDINGTYPEID]" +
					 ", [SAFEGUARDINGSTATUSID]" +
					 " FROM " + ENSafeguardingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSafeguarding", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(4, false)
							}
							;
						} else
						throw new DataBaseException(ENSafeguardingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSafeguardingForUpdate
		/// </summary>

		public static void GetSafeguardingForUpdate(HeContext heContext, int inParamId, out RCSafeguardingRecord outParamRecord) {
			outParamRecord = new RCSafeguardingRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [SAFEGUARDINGTYPEID]" +
					 ", [SAFEGUARDINGSTATUSID]" +
					 "FROM " + ENSafeguardingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSafeguardingForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(4, false)
							}
							;
						} else
						throw new DataBaseException(ENSafeguardingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateSafeguarding
		/// </summary>

		public static void UpdateSafeguarding(HeContext heContext, BitArray usedFields, RCSafeguardingRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingEntity.eSpaceId;
				ENSafeguardingEntityRecord ssENSafeguarding = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(4, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSafeguardingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGTYPEID] = @ssSafeguardingTypeId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGSTATUSID] = @ssSafeguardingStatusId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSafeguardingssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSafeguarding.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSafeguarding.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSafeguarding.ssSafeguardingTypeId==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingTypeId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingTypeId", DbType.Int32, ssENSafeguarding.ssSafeguardingTypeId);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENSafeguarding.ssSafeguardingStatusId==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingStatusId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingStatusId", DbType.Int32, ssENSafeguarding.ssSafeguardingStatusId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[SAFEGUARDINGTYPEID] = [SAFEGUARDINGTYPEID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSafeguardingssId", DbType.Int32, ssENSafeguarding.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateSafeguarding", true) <= 0)
					throw new DataBaseException(ENSafeguardingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENSafeguarding.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Safeguarding")]
	public class WORCSafeguardingRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("SafeguardingTypeId")]
		public int varWSSafeguardingTypeId;

		[System.Xml.Serialization.XmlElement("SafeguardingStatusId")]
		public int varWSSafeguardingStatusId;

		public WORCSafeguardingRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSSafeguardingTypeId = (int) 0;
			varWSSafeguardingStatusId = (int) 0;
		}

		public WORCSafeguardingRecord(ENSafeguardingEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSSafeguardingTypeId = (int) r.ssSafeguardingTypeId;
			varWSSafeguardingStatusId = (int) r.ssSafeguardingStatusId;
		}

		public static RLSafeguardingList ToRecordList(WORCSafeguardingRecord[] array) {
			RLSafeguardingList rl = new RLSafeguardingList();
			if (array != null) {
				foreach(WORCSafeguardingRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSafeguardingRecord[] FromRecordList(RLSafeguardingList rl) {
			WORCSafeguardingRecord[] array = new WORCSafeguardingRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSafeguardingRecord {
		public static implicit operator WORCSafeguardingRecord(RCSafeguardingRecord r) {
			return new WORCSafeguardingRecord(r.ssENSafeguarding);
		}

		public static implicit operator RCSafeguardingRecord(WORCSafeguardingRecord w) {
			RCSafeguardingRecord r = new RCSafeguardingRecord("");
			if (w != null) {
				r.ssENSafeguarding = w;
			}
			return r;
		}

	}

	partial struct ENSafeguardingEntityRecord {
		public static implicit operator WORCSafeguardingRecord(ENSafeguardingEntityRecord r) {
			return new WORCSafeguardingRecord(r);
		}

		public static implicit operator ENSafeguardingEntityRecord(WORCSafeguardingRecord w) {
			ENSafeguardingEntityRecord r = new ENSafeguardingEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssSafeguardingTypeId = (int) w.varWSSafeguardingTypeId;
				r.ssSafeguardingStatusId = (int) w.varWSSafeguardingStatusId;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSafeguardingRecordList {
		public WORCSafeguardingRecord[] Array;


		public WORLSafeguardingRecordList(WORCSafeguardingRecord[] r) {
			if (r == null)
			Array = new WORCSafeguardingRecord[0];
			else
			Array = r;
		}
		public WORLSafeguardingRecordList() {
			Array = new WORCSafeguardingRecord[0];
		}

		public WORLSafeguardingRecordList(RLSafeguardingRecordList rl) {
			rl=(RLSafeguardingRecordList) rl.Duplicate();
			Array = new WORCSafeguardingRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSafeguardingRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSafeguardingRecordList {
		public static implicit operator RLSafeguardingRecordList(WORCSafeguardingRecord[] array) {
			RLSafeguardingRecordList rl = new RLSafeguardingRecordList();
			if (array != null) {
				foreach(WORCSafeguardingRecord val in array) {
					rl.Append((RCSafeguardingRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSafeguardingRecord[](RLSafeguardingRecordList rl) {
			WORCSafeguardingRecord[] array = new WORCSafeguardingRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSafeguardingRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSafeguardingRecordList {
		public static implicit operator RLSafeguardingRecordList(WORLSafeguardingRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSafeguardingRecordList(RLSafeguardingRecordList rl) {
			return new WORLSafeguardingRecordList(rl);
		}
		public static implicit operator WORCSafeguardingRecord[](WORLSafeguardingRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSafeguardingRecordList(WORCSafeguardingRecord[] array) {
			return new WORLSafeguardingRecordList(array);
		}
	}
}

