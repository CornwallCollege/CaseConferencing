/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENEspaceEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(1), "ossys_espace");
		}
		public const int eSpaceId = 1;
	} // ENEspaceEntity

	/// <summary>
	/// Entity <code>ENEspaceEntityRecord</code> that represents the Service Studio entity
	///  <code>Espace</code> <p> Description: Espaces defined in Service Studio. Older and deleted eSpace
	/// s are kept as inactive.</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Espace", "lMHkhDUE0U+kZIBXGgyiUA", "uXCIR2Atc0+es3zYuZSnNw", 0, "ossys_espace", "")]
	[Serializable()]
	public partial struct ENEspaceEntityRecord: ISerializable, ITypedRecord<ENEspaceEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*nT2tk5kOGl5OtMd+chGs0A");
		private static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*AZLlE1D6fXPxiJTnJvAQ8Q");
		private static readonly GlobalObjectKey IdIs_Multitenant = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*A4dE+eIcaq_MddPunci47g");
		private static readonly GlobalObjectKey IdSS_Key = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*00WyUgKMoJvuFP2TkIq+cw");
		private static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*GslDmi6VKU8s8fQwjjjdAA");
		private static readonly GlobalObjectKey IdIs_System = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*yE5vtKQlqUYGgdTvZgeuvw");
		private static readonly GlobalObjectKey IdVersion_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*ozwNrU09LcRBYT_SNbZnWQ");
		private static readonly GlobalObjectKey IdIs_Consistent = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*DVUatVHzQUJRXTne6CAGRg");
		private static readonly GlobalObjectKey IdZone_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*vQhyCcRppLXYRT9F1fpPlg");
		private static readonly GlobalObjectKey IdIs_User_Provider = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*vKIanuN25Au+qnS6GpTD9Q");
		private static readonly GlobalObjectKey IdUser_Provider_Key = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*Y3lR1wXCDixMFqXkQBFA7A");
		private static readonly GlobalObjectKey IdUser_Provider_Name = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*cRkDqM7bpCNVmleiI5zWBg");
		private static readonly GlobalObjectKey IdIs_Locked = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*6Et4pjhA2HLqi36L+VknMg");
		private static readonly GlobalObjectKey IdLocked_Date = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*F2LzSluod06WQrO6ut2KCw");
		private static readonly GlobalObjectKey IdDBCatalog_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*8Aj7tWj6rUWAkFmHh3vLLg");
		private static readonly GlobalObjectKey IdPending_Version_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*D86pj6KcckyxrbdCR+BX3g");
		private static readonly GlobalObjectKey IdHMAC = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*nB45+pFFgUiS55qwyRgU6g");
		private static readonly GlobalObjectKey IdHMACVersion = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*NS8vBs8YTky1wI0JvlwI1g");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(18, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NAME", 35, false, false, false)]
		[System.Xml.Serialization.XmlElement("Name")]
		private string _ssName;
		public string ssName {
			get {
				return _ssName;
			}
			set {
				if ((_ssName!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_MULTITENANT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_Multitenant")]
		private bool _ssIs_Multitenant;
		public bool ssIs_Multitenant {
			get {
				return _ssIs_Multitenant;
			}
			set {
				if ((_ssIs_Multitenant!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssIs_Multitenant = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SS_KEY", 100, false, false, false)]
		[System.Xml.Serialization.XmlElement("SS_Key")]
		private string _ssSS_Key;
		public string ssSS_Key {
			get {
				return _ssSS_Key;
			}
			set {
				if ((_ssSS_Key!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssSS_Key = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_Active")]
		private bool _ssIs_Active;
		public bool ssIs_Active {
			get {
				return _ssIs_Active;
			}
			set {
				if ((_ssIs_Active!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssIs_Active = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_SYSTEM", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_System")]
		private bool _ssIs_System;
		public bool ssIs_System {
			get {
				return _ssIs_System;
			}
			set {
				if ((_ssIs_System!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssIs_System = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("VERSION_ID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Version_Id")]
		private int _ssVersion_Id;
		public int ssVersion_Id {
			get {
				return _ssVersion_Id;
			}
			set {
				if ((_ssVersion_Id!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssVersion_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_CONSISTENT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_Consistent")]
		private bool _ssIs_Consistent;
		public bool ssIs_Consistent {
			get {
				return _ssIs_Consistent;
			}
			set {
				if ((_ssIs_Consistent!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssIs_Consistent = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ZONE_ID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Zone_Id")]
		private int _ssZone_Id;
		public int ssZone_Id {
			get {
				return _ssZone_Id;
			}
			set {
				if ((_ssZone_Id!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssZone_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_USER_PROVIDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_User_Provider")]
		private bool _ssIs_User_Provider;
		public bool ssIs_User_Provider {
			get {
				return _ssIs_User_Provider;
			}
			set {
				if ((_ssIs_User_Provider!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssIs_User_Provider = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USER_PROVIDER_KEY", 100, false, false, false)]
		[System.Xml.Serialization.XmlElement("User_Provider_Key")]
		private string _ssUser_Provider_Key;
		public string ssUser_Provider_Key {
			get {
				return _ssUser_Provider_Key;
			}
			set {
				if ((_ssUser_Provider_Key!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssUser_Provider_Key = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USER_PROVIDER_NAME", 35, false, false, false)]
		[System.Xml.Serialization.XmlElement("User_Provider_Name")]
		private string _ssUser_Provider_Name;
		public string ssUser_Provider_Name {
			get {
				return _ssUser_Provider_Name;
			}
			set {
				if ((_ssUser_Provider_Name!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssUser_Provider_Name = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_LOCKED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_Locked")]
		private bool _ssIs_Locked;
		public bool ssIs_Locked {
			get {
				return _ssIs_Locked;
			}
			set {
				if ((_ssIs_Locked!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssIs_Locked = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LOCKED_DATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Locked_Date")]
		private DateTime _ssLocked_Date;
		public DateTime ssLocked_Date {
			get {
				return _ssLocked_Date;
			}
			set {
				if ((_ssLocked_Date!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssLocked_Date = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DBCATALOG_ID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("DBCatalog_Id")]
		private int _ssDBCatalog_Id;
		public int ssDBCatalog_Id {
			get {
				return _ssDBCatalog_Id;
			}
			set {
				if ((_ssDBCatalog_Id!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssDBCatalog_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PENDING_VERSION_ID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Pending_Version_Id")]
		private int _ssPending_Version_Id;
		public int ssPending_Version_Id {
			get {
				return _ssPending_Version_Id;
			}
			set {
				if ((_ssPending_Version_Id!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssPending_Version_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("HMAC", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("HMAC")]
		private string _ssHMAC;
		public string ssHMAC {
			get {
				return _ssHMAC;
			}
			set {
				if ((_ssHMAC!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssHMAC = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("HMACVERSION", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("HMACVersion")]
		private string _ssHMACVersion;
		public string ssHMACVersion {
			get {
				return _ssHMACVersion;
			}
			set {
				if ((_ssHMACVersion!=value) || OptimizedAttributes[17]) {
					ChangedAttributes[17] = true;
					_ssHMACVersion = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENEspaceEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(18, true);
			OptimizedAttributes = new BitArray(18, false);
			_ssId = 0;
			_ssName = "";
			_ssIs_Multitenant = false;
			_ssSS_Key = "";
			_ssIs_Active = false;
			_ssIs_System = false;
			_ssVersion_Id = 0;
			_ssIs_Consistent = false;
			_ssZone_Id = 0;
			_ssIs_User_Provider = false;
			_ssUser_Provider_Key = "";
			_ssUser_Provider_Name = "";
			_ssIs_Locked = false;
			_ssLocked_Date = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssDBCatalog_Id = 0;
			_ssPending_Version_Id = 0;
			_ssHMAC = "";
			_ssHMACVersion = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Espace.Id", 0);
			ssName = r.ReadText(index++, "Espace.Name", "");
			ssIs_Multitenant = r.ReadBoolean(index++, "Espace.Is_Multitenant", false);
			ssSS_Key = r.ReadText(index++, "Espace.SS_Key", "");
			ssIs_Active = r.ReadBoolean(index++, "Espace.Is_Active", false);
			ssIs_System = r.ReadBoolean(index++, "Espace.Is_System", false);
			ssVersion_Id = r.ReadEntityReference(index++, "Espace.Version_Id", 0);
			ssIs_Consistent = r.ReadBoolean(index++, "Espace.Is_Consistent", false);
			ssZone_Id = r.ReadEntityReference(index++, "Espace.Zone_Id", 0);
			ssIs_User_Provider = r.ReadBoolean(index++, "Espace.Is_User_Provider", false);
			ssUser_Provider_Key = r.ReadText(index++, "Espace.User_Provider_Key", "");
			ssUser_Provider_Name = r.ReadText(index++, "Espace.User_Provider_Name", "");
			ssIs_Locked = r.ReadBoolean(index++, "Espace.Is_Locked", false);
			ssLocked_Date = r.ReadDateTime(index++, "Espace.Locked_Date", new DateTime(1900, 1, 1, 0, 0, 0));
			ssDBCatalog_Id = r.ReadEntityReference(index++, "Espace.DBCatalog_Id", 0);
			ssPending_Version_Id = r.ReadEntityReference(index++, "Espace.Pending_Version_Id", 0);
			ssHMAC = r.ReadText(index++, "Espace.HMAC", "");
			ssHMACVersion = r.ReadText(index++, "Espace.HMACVersion", "");
			ChangedAttributes = new BitArray(18, false);
			OptimizedAttributes = new BitArray(18, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENEspaceEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENEspaceEntityRecord a, ENEspaceEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssIs_Multitenant != b.ssIs_Multitenant) return false;
			if (a.ssSS_Key != b.ssSS_Key) return false;
			if (a.ssIs_Active != b.ssIs_Active) return false;
			if (a.ssIs_System != b.ssIs_System) return false;
			if (a.ssVersion_Id != b.ssVersion_Id) return false;
			if (a.ssIs_Consistent != b.ssIs_Consistent) return false;
			if (a.ssZone_Id != b.ssZone_Id) return false;
			if (a.ssIs_User_Provider != b.ssIs_User_Provider) return false;
			if (a.ssUser_Provider_Key != b.ssUser_Provider_Key) return false;
			if (a.ssUser_Provider_Name != b.ssUser_Provider_Name) return false;
			if (a.ssIs_Locked != b.ssIs_Locked) return false;
			if (a.ssLocked_Date != b.ssLocked_Date) return false;
			if (a.ssDBCatalog_Id != b.ssDBCatalog_Id) return false;
			if (a.ssPending_Version_Id != b.ssPending_Version_Id) return false;
			if (a.ssHMAC != b.ssHMAC) return false;
			if (a.ssHMACVersion != b.ssHMACVersion) return false;
			return true;
		}

		public static bool operator != (ENEspaceEntityRecord a, ENEspaceEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENEspaceEntityRecord)) return false;
			return (this == (ENEspaceEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssName.GetHashCode()
				^ ssIs_Multitenant.GetHashCode()
				^ ssSS_Key.GetHashCode()
				^ ssIs_Active.GetHashCode()
				^ ssIs_System.GetHashCode()
				^ ssVersion_Id.GetHashCode()
				^ ssIs_Consistent.GetHashCode()
				^ ssZone_Id.GetHashCode()
				^ ssIs_User_Provider.GetHashCode()
				^ ssUser_Provider_Key.GetHashCode()
				^ ssUser_Provider_Name.GetHashCode()
				^ ssIs_Locked.GetHashCode()
				^ ssLocked_Date.GetHashCode()
				^ ssDBCatalog_Id.GetHashCode()
				^ ssPending_Version_Id.GetHashCode()
				^ ssHMAC.GetHashCode()
				^ ssHMACVersion.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENEspaceEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(18, true);
			OptimizedAttributes = new BitArray(18, false);
			_ssId = 0;
			_ssName = "";
			_ssIs_Multitenant = false;
			_ssSS_Key = "";
			_ssIs_Active = false;
			_ssIs_System = false;
			_ssVersion_Id = 0;
			_ssIs_Consistent = false;
			_ssZone_Id = 0;
			_ssIs_User_Provider = false;
			_ssUser_Provider_Key = "";
			_ssUser_Provider_Name = "";
			_ssIs_Locked = false;
			_ssLocked_Date = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssDBCatalog_Id = 0;
			_ssPending_Version_Id = 0;
			_ssHMAC = "";
			_ssHMACVersion = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssName = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssIs_Multitenant = (bool) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssSS_Key = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssIs_Active = (bool) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssIs_System = (bool) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssVersion_Id = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssIs_Consistent = (bool) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssZone_Id = (int) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssIs_User_Provider = (bool) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssUser_Provider_Key = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssUser_Provider_Name = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssIs_Locked = (bool) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssLocked_Date = (DateTime) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssDBCatalog_Id = (int) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssPending_Version_Id = (int) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssHMAC = (string) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			_ssHMACVersion = (string) info.GetValue(fields[17] .Name, fields[17] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENEspaceEntityRecord Duplicate() {
			ENEspaceEntityRecord t;
			t._ssId = this._ssId;
			t._ssName = this._ssName;
			t._ssIs_Multitenant = this._ssIs_Multitenant;
			t._ssSS_Key = this._ssSS_Key;
			t._ssIs_Active = this._ssIs_Active;
			t._ssIs_System = this._ssIs_System;
			t._ssVersion_Id = this._ssVersion_Id;
			t._ssIs_Consistent = this._ssIs_Consistent;
			t._ssZone_Id = this._ssZone_Id;
			t._ssIs_User_Provider = this._ssIs_User_Provider;
			t._ssUser_Provider_Key = this._ssUser_Provider_Key;
			t._ssUser_Provider_Name = this._ssUser_Provider_Name;
			t._ssIs_Locked = this._ssIs_Locked;
			t._ssLocked_Date = this._ssLocked_Date;
			t._ssDBCatalog_Id = this._ssDBCatalog_Id;
			t._ssPending_Version_Id = this._ssPending_Version_Id;
			t._ssHMAC = this._ssHMAC;
			t._ssHMACVersion = this._ssHMACVersion;
			t.ChangedAttributes = new BitArray(18);
			t.OptimizedAttributes = new BitArray(18);
			for (int i = 0; i < 18; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Multitenant")) VarValue.AppendAttribute(recordElem, "Is_Multitenant", ssIs_Multitenant, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Multitenant");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SS_Key")) VarValue.AppendAttribute(recordElem, "SS_Key", ssSS_Key, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SS_Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_System")) VarValue.AppendAttribute(recordElem, "Is_System", ssIs_System, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_System");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Version_Id")) VarValue.AppendAttribute(recordElem, "Version_Id", ssVersion_Id, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Version_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Consistent")) VarValue.AppendAttribute(recordElem, "Is_Consistent", ssIs_Consistent, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Consistent");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Zone_Id")) VarValue.AppendAttribute(recordElem, "Zone_Id", ssZone_Id, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Zone_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_User_Provider")) VarValue.AppendAttribute(recordElem, "Is_User_Provider", ssIs_User_Provider, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_User_Provider");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".User_Provider_Key")) VarValue.AppendAttribute(recordElem, "User_Provider_Key", ssUser_Provider_Key, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "User_Provider_Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".User_Provider_Name")) VarValue.AppendAttribute(recordElem, "User_Provider_Name", ssUser_Provider_Name, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "User_Provider_Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Locked")) VarValue.AppendAttribute(recordElem, "Is_Locked", ssIs_Locked, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Locked");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Locked_Date")) VarValue.AppendAttribute(recordElem, "Locked_Date", ssLocked_Date, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Locked_Date");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DBCatalog_Id")) VarValue.AppendAttribute(recordElem, "DBCatalog_Id", ssDBCatalog_Id, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "DBCatalog_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pending_Version_Id")) VarValue.AppendAttribute(recordElem, "Pending_Version_Id", ssPending_Version_Id, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Pending_Version_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HMAC")) VarValue.AppendAttribute(recordElem, "HMAC", ssHMAC, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "HMAC");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HMACVersion")) VarValue.AppendAttribute(recordElem, "HMACVersion", ssHMACVersion, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "HMACVersion");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "is_multitenant") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Multitenant")) variable.Value = ssIs_Multitenant; else variable.Optimized = true;
			} else if (head == "ss_key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SS_Key")) variable.Value = ssSS_Key; else variable.Optimized = true;
			} else if (head == "is_active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
			} else if (head == "is_system") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_System")) variable.Value = ssIs_System; else variable.Optimized = true;
			} else if (head == "version_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Version_Id")) variable.Value = ssVersion_Id; else variable.Optimized = true;
			} else if (head == "is_consistent") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Consistent")) variable.Value = ssIs_Consistent; else variable.Optimized = true;
			} else if (head == "zone_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Zone_Id")) variable.Value = ssZone_Id; else variable.Optimized = true;
			} else if (head == "is_user_provider") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_User_Provider")) variable.Value = ssIs_User_Provider; else variable.Optimized = true;
			} else if (head == "user_provider_key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_Provider_Key")) variable.Value = ssUser_Provider_Key; else variable.Optimized = true;
			} else if (head == "user_provider_name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_Provider_Name")) variable.Value = ssUser_Provider_Name; else variable.Optimized = true;
			} else if (head == "is_locked") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Locked")) variable.Value = ssIs_Locked; else variable.Optimized = true;
			} else if (head == "locked_date") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Locked_Date")) variable.Value = ssLocked_Date; else variable.Optimized = true;
			} else if (head == "dbcatalog_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DBCatalog_Id")) variable.Value = ssDBCatalog_Id; else variable.Optimized = true;
			} else if (head == "pending_version_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pending_Version_Id")) variable.Value = ssPending_Version_Id; else variable.Optimized = true;
			} else if (head == "hmac") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HMAC")) variable.Value = ssHMAC; else variable.Optimized = true;
			} else if (head == "hmacversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HMACVersion")) variable.Value = ssHMACVersion; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdName)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdIs_Multitenant)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdSS_Key)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdIs_Active)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdIs_System)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdVersion_Id)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdIs_Consistent)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdZone_Id)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdIs_User_Provider)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdUser_Provider_Key)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdUser_Provider_Name)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdIs_Locked)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdLocked_Date)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdDBCatalog_Id)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdPending_Version_Id)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdHMAC)) {
				return ChangedAttributes[16];
			} else if (key.Equals(IdHMACVersion)) {
				return ChangedAttributes[17];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdName)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdIs_Multitenant)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdSS_Key)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdIs_Active)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdIs_System)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdVersion_Id)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdIs_Consistent)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdZone_Id)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdIs_User_Provider)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdUser_Provider_Key)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdUser_Provider_Name)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdIs_Locked)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdLocked_Date)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdDBCatalog_Id)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdPending_Version_Id)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdHMAC)) {
				return OptimizedAttributes[16];
			} else if (key.Equals(IdHMACVersion)) {
				return OptimizedAttributes[17];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdIs_Multitenant) {
				return ssIs_Multitenant;
			} else if (key == IdSS_Key) {
				return ssSS_Key;
			} else if (key == IdIs_Active) {
				return ssIs_Active;
			} else if (key == IdIs_System) {
				return ssIs_System;
			} else if (key == IdVersion_Id) {
				return ssVersion_Id;
			} else if (key == IdIs_Consistent) {
				return ssIs_Consistent;
			} else if (key == IdZone_Id) {
				return ssZone_Id;
			} else if (key == IdIs_User_Provider) {
				return ssIs_User_Provider;
			} else if (key == IdUser_Provider_Key) {
				return ssUser_Provider_Key;
			} else if (key == IdUser_Provider_Name) {
				return ssUser_Provider_Name;
			} else if (key == IdIs_Locked) {
				return ssIs_Locked;
			} else if (key == IdLocked_Date) {
				return ssLocked_Date;
			} else if (key == IdDBCatalog_Id) {
				return ssDBCatalog_Id;
			} else if (key == IdPending_Version_Id) {
				return ssPending_Version_Id;
			} else if (key == IdHMAC) {
				return ssHMAC;
			} else if (key == IdHMACVersion) {
				return ssHMACVersion;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(18);
			OptimizedAttributes = new BitArray(18);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssName = (string) other.AttributeGet(IdName);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdName);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdName);
			ssIs_Multitenant = (bool) other.AttributeGet(IdIs_Multitenant);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdIs_Multitenant);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdIs_Multitenant);
			ssSS_Key = (string) other.AttributeGet(IdSS_Key);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdSS_Key);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdSS_Key);
			ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdIs_Active);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdIs_Active);
			ssIs_System = (bool) other.AttributeGet(IdIs_System);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdIs_System);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdIs_System);
			ssVersion_Id = (int) other.AttributeGet(IdVersion_Id);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdVersion_Id);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdVersion_Id);
			ssIs_Consistent = (bool) other.AttributeGet(IdIs_Consistent);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdIs_Consistent);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdIs_Consistent);
			ssZone_Id = (int) other.AttributeGet(IdZone_Id);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdZone_Id);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdZone_Id);
			ssIs_User_Provider = (bool) other.AttributeGet(IdIs_User_Provider);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdIs_User_Provider);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdIs_User_Provider);
			ssUser_Provider_Key = (string) other.AttributeGet(IdUser_Provider_Key);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdUser_Provider_Key);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdUser_Provider_Key);
			ssUser_Provider_Name = (string) other.AttributeGet(IdUser_Provider_Name);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdUser_Provider_Name);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdUser_Provider_Name);
			ssIs_Locked = (bool) other.AttributeGet(IdIs_Locked);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdIs_Locked);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdIs_Locked);
			ssLocked_Date = (DateTime) other.AttributeGet(IdLocked_Date);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdLocked_Date);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdLocked_Date);
			ssDBCatalog_Id = (int) other.AttributeGet(IdDBCatalog_Id);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdDBCatalog_Id);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdDBCatalog_Id);
			ssPending_Version_Id = (int) other.AttributeGet(IdPending_Version_Id);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdPending_Version_Id);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdPending_Version_Id);
			ssHMAC = (string) other.AttributeGet(IdHMAC);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdHMAC);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdHMAC);
			ssHMACVersion = (string) other.AttributeGet(IdHMACVersion);
			ChangedAttributes[17] = other.ChangedAttributeGet(IdHMACVersion);
			OptimizedAttributes[17] = other.OptimizedAttributeGet(IdHMACVersion);
		}
	} // ENEspaceEntityRecord
	/// <summary>
	/// Structure <code>RCEspaceRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCEspaceRecord: ISerializable, ITypedRecord<RCEspaceRecord> {
		private static readonly GlobalObjectKey IdEspace = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ceECpyp3iZvBfiVEq20dKQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Espace")]
		public ENEspaceEntityRecord ssENEspace;


		public static implicit operator ENEspaceEntityRecord(RCEspaceRecord r) {
			return r.ssENEspace;
		}

		public static implicit operator RCEspaceRecord(ENEspaceEntityRecord r) {
			RCEspaceRecord res = new RCEspaceRecord(null);
			res.ssENEspace = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENEspace.ChangedAttributes = value;
			}
			get {
				return ssENEspace.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCEspaceRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENEspace = new ENEspaceEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(18, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENEspace.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENEspace.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENEspace.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENEspace.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCEspaceRecord r) {
			this = r;
		}


		public static bool operator == (RCEspaceRecord a, RCEspaceRecord b) {
			if (a.ssENEspace != b.ssENEspace) return false;
			return true;
		}

		public static bool operator != (RCEspaceRecord a, RCEspaceRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCEspaceRecord)) return false;
			return (this == (RCEspaceRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENEspace.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCEspaceRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENEspace = new ENEspaceEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENEspace = (ENEspaceEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENEspace.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENEspace.InternalRecursiveSave();
		}


		public RCEspaceRecord Duplicate() {
			RCEspaceRecord t;
			t.ssENEspace = (ENEspaceEntityRecord) this.ssENEspace.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENEspace.ToXml(this, recordElem, "Espace", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "espace") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Espace")) variable.Value = ssENEspace; else variable.Optimized = true;
				variable.SetFieldName("espace");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENEspace.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENEspace.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdEspace) {
				return ssENEspace;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENEspace.FillFromOther((IRecord) other.AttributeGet(IdEspace));
		}
	} // RCEspaceRecord
	/// <summary>
	/// RecordList type <code>RLEspaceRecordList</code> that represents a record list of
	///  <code>Espace</code>
	/// </summary>
	[Serializable()]
	public partial class RLEspaceRecordList: GenericRecordList<RCEspaceRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCEspaceRecord GetElementDefaultValue() {
			return new RCEspaceRecord("");
		}

		public T[] ToArray<T>(Func<RCEspaceRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLEspaceRecordList recordlist, Func<RCEspaceRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLEspaceRecordList ToList<T>(T[] array, Func <T, RCEspaceRecord> converter) {
			RLEspaceRecordList result = new RLEspaceRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLEspaceRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEspaceRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEspaceRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLEspaceRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(18, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCEspaceRecord> NewList() {
			return new RLEspaceRecordList();
		}


	} // RLEspaceRecordList

	/// <summary>
	/// RecordList type <code>RLEspaceList</code> that represents a record list of
	///  <code>Espace_VersionIdentifier, ZoneIdentifier, DBCatalogIdentifier, Espace_VersionIdentifier
	/// , Text, Text, Text, Text, Text, Text, DateTime, Boolean, Boolean, Boolean, Boolean, Boolean,
	///  Boolean, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLEspaceList: GenericRecordList<ENEspaceEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENEspaceEntityRecord GetElementDefaultValue() {
			return new ENEspaceEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENEspaceEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLEspaceList recordlist, Func<ENEspaceEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLEspaceList ToList<T>(T[] array, Func <T, ENEspaceEntityRecord> converter) {
			RLEspaceList result = new RLEspaceList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLEspaceList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEspaceList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEspaceList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLEspaceList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENEspaceEntityRecord> NewList() {
			return new RLEspaceList();
		}


	} // RLEspaceList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateEspace
		/// </summary>

		public static void CreateEspace(HeContext heContext, RCEspaceRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENEspaceEntity.eSpaceId;
				ENEspaceEntityRecord ssENEspace = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENEspaceEntity.LocalViewName(null, null) + " (" +
					 " [NAME]" +
					 ", [IS_MULTITENANT]" +
					 ", [SS_KEY]" +
					 ", [IS_ACTIVE]" +
					 ", [IS_SYSTEM]" +
					 ", [VERSION_ID]" +
					 ", [IS_CONSISTENT]" +
					 ", [ZONE_ID]" +
					 ", [IS_USER_PROVIDER]" +
					 ", [USER_PROVIDER_KEY]" +
					 ", [USER_PROVIDER_NAME]" +
					 ", [IS_LOCKED]" +
					 ", [LOCKED_DATE]" +
					 ", [DBCATALOG_ID]" +
					 ", [PENDING_VERSION_ID]" +
					 ", [HMAC]" +
					 ", [HMACVERSION]" +
					 " ) VALUES (" +
					 " @ssName" +
					 ", @ssIs_Multitenant" +
					 ", @ssSS_Key" +
					 ", @ssIs_Active" +
					 ", @ssIs_System" +
					 ", @ssVersion_Id" +
					 ", @ssIs_Consistent" +
					 ", @ssZone_Id" +
					 ", @ssIs_User_Provider" +
					 ", @ssUser_Provider_Key" +
					 ", @ssUser_Provider_Name" +
					 ", @ssIs_Locked" +
					 ", @ssLocked_Date" +
					 ", @ssDBCatalog_Id" +
					 ", @ssPending_Version_Id" +
					 ", @ssHMAC" +
					 ", @ssHMACVersion" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssName", DbType.String, ssENEspace.ssName);
					insertSqlCmd.CreateParameter("@ssIs_Multitenant", DbType.Boolean, ssENEspace.ssIs_Multitenant);
					insertSqlCmd.CreateParameter("@ssSS_Key", DbType.String, ssENEspace.ssSS_Key);
					insertSqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENEspace.ssIs_Active);
					insertSqlCmd.CreateParameter("@ssIs_System", DbType.Boolean, ssENEspace.ssIs_System);
					if ((ssENEspace.ssVersion_Id==0)) {
						insertSqlCmd.CreateParameter("@ssVersion_Id", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssVersion_Id", DbType.Int32, ssENEspace.ssVersion_Id);
					}
					insertSqlCmd.CreateParameter("@ssIs_Consistent", DbType.Boolean, ssENEspace.ssIs_Consistent);
					if ((ssENEspace.ssZone_Id==0)) {
						insertSqlCmd.CreateParameter("@ssZone_Id", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssZone_Id", DbType.Int32, ssENEspace.ssZone_Id);
					}
					insertSqlCmd.CreateParameter("@ssIs_User_Provider", DbType.Boolean, ssENEspace.ssIs_User_Provider);
					insertSqlCmd.CreateParameter("@ssUser_Provider_Key", DbType.String, ssENEspace.ssUser_Provider_Key);
					insertSqlCmd.CreateParameter("@ssUser_Provider_Name", DbType.String, ssENEspace.ssUser_Provider_Name);
					insertSqlCmd.CreateParameter("@ssIs_Locked", DbType.Boolean, ssENEspace.ssIs_Locked);
					insertSqlCmd.CreateParameter("@ssLocked_Date", DbType.DateTime, ssENEspace.ssLocked_Date);
					if ((ssENEspace.ssDBCatalog_Id==0)) {
						insertSqlCmd.CreateParameter("@ssDBCatalog_Id", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDBCatalog_Id", DbType.Int32, ssENEspace.ssDBCatalog_Id);
					}
					if ((ssENEspace.ssPending_Version_Id==0)) {
						insertSqlCmd.CreateParameter("@ssPending_Version_Id", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssPending_Version_Id", DbType.Int32, ssENEspace.ssPending_Version_Id);
					}
					insertSqlCmd.CreateParameter("@ssHMAC", DbType.String, ssENEspace.ssHMAC);
					insertSqlCmd.CreateParameter("@ssHMACVersion", DbType.String, ssENEspace.ssHMACVersion);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateEspace", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateEspace
		/// </summary>

		public static void CreateOrUpdateEspace(HeContext heContext, BitArray usedFields, RCEspaceRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENEspaceEntity.eSpaceId;
				ENEspaceEntityRecord ssENEspace = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(18, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENEspaceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NAME] = @ssName"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_MULTITENANT] = @ssIs_Multitenant"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SS_KEY] = @ssSS_Key"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_ACTIVE] = @ssIs_Active"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_SYSTEM] = @ssIs_System"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[VERSION_ID] = @ssVersion_Id"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_CONSISTENT] = @ssIs_Consistent"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ZONE_ID] = @ssZone_Id"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_USER_PROVIDER] = @ssIs_User_Provider"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USER_PROVIDER_KEY] = @ssUser_Provider_Key"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USER_PROVIDER_NAME] = @ssUser_Provider_Name"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_LOCKED] = @ssIs_Locked"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LOCKED_DATE] = @ssLocked_Date"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DBCATALOG_ID] = @ssDBCatalog_Id"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PENDING_VERSION_ID] = @ssPending_Version_Id"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HMAC] = @ssHMAC"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HMACVERSION] = @ssHMACVersion"): parameters);
					string whereCondition = " WHERE [ID] = @ssENEspacessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssName", DbType.String, ssENEspace.ssName);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssIs_Multitenant", DbType.Boolean, ssENEspace.ssIs_Multitenant);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssSS_Key", DbType.String, ssENEspace.ssSS_Key);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENEspace.ssIs_Active);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssIs_System", DbType.Boolean, ssENEspace.ssIs_System);
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENEspace.ssVersion_Id==0)) {
							sqlCmd.CreateParameter("@ssVersion_Id", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssVersion_Id", DbType.Int32, ssENEspace.ssVersion_Id);
						}
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssIs_Consistent", DbType.Boolean, ssENEspace.ssIs_Consistent);
						counter++;
					}
					if (usedFields[8]) {
						if ((ssENEspace.ssZone_Id==0)) {
							sqlCmd.CreateParameter("@ssZone_Id", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssZone_Id", DbType.Int32, ssENEspace.ssZone_Id);
						}
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssIs_User_Provider", DbType.Boolean, ssENEspace.ssIs_User_Provider);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssUser_Provider_Key", DbType.String, ssENEspace.ssUser_Provider_Key);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssUser_Provider_Name", DbType.String, ssENEspace.ssUser_Provider_Name);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssIs_Locked", DbType.Boolean, ssENEspace.ssIs_Locked);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssLocked_Date", DbType.DateTime, ssENEspace.ssLocked_Date);
						counter++;
					}
					if (usedFields[14]) {
						if ((ssENEspace.ssDBCatalog_Id==0)) {
							sqlCmd.CreateParameter("@ssDBCatalog_Id", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDBCatalog_Id", DbType.Int32, ssENEspace.ssDBCatalog_Id);
						}
						counter++;
					}
					if (usedFields[15]) {
						if ((ssENEspace.ssPending_Version_Id==0)) {
							sqlCmd.CreateParameter("@ssPending_Version_Id", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssPending_Version_Id", DbType.Int32, ssENEspace.ssPending_Version_Id);
						}
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssHMAC", DbType.String, ssENEspace.ssHMAC);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssHMACVersion", DbType.String, ssENEspace.ssHMACVersion);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[IS_MULTITENANT] = [IS_MULTITENANT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENEspacessId", DbType.Int32, ssENEspace.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateEspace (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENEspaceEntity.LocalViewName(null, null) + " (" +
						 " [NAME]" +
						 ", [IS_MULTITENANT]" +
						 ", [SS_KEY]" +
						 ", [IS_ACTIVE]" +
						 ", [IS_SYSTEM]" +
						 ", [VERSION_ID]" +
						 ", [IS_CONSISTENT]" +
						 ", [ZONE_ID]" +
						 ", [IS_USER_PROVIDER]" +
						 ", [USER_PROVIDER_KEY]" +
						 ", [USER_PROVIDER_NAME]" +
						 ", [IS_LOCKED]" +
						 ", [LOCKED_DATE]" +
						 ", [DBCATALOG_ID]" +
						 ", [PENDING_VERSION_ID]" +
						 ", [HMAC]" +
						 ", [HMACVERSION]" +
						 " ) VALUES (" +
						 " @ssName" +
						 ", @ssIs_Multitenant" +
						 ", @ssSS_Key" +
						 ", @ssIs_Active" +
						 ", @ssIs_System" +
						 ", @ssVersion_Id" +
						 ", @ssIs_Consistent" +
						 ", @ssZone_Id" +
						 ", @ssIs_User_Provider" +
						 ", @ssUser_Provider_Key" +
						 ", @ssUser_Provider_Name" +
						 ", @ssIs_Locked" +
						 ", @ssLocked_Date" +
						 ", @ssDBCatalog_Id" +
						 ", @ssPending_Version_Id" +
						 ", @ssHMAC" +
						 ", @ssHMACVersion" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssName", DbType.String, ssENEspace.ssName);
						insertSqlCmd.CreateParameter("@ssIs_Multitenant", DbType.Boolean, ssENEspace.ssIs_Multitenant);
						insertSqlCmd.CreateParameter("@ssSS_Key", DbType.String, ssENEspace.ssSS_Key);
						insertSqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENEspace.ssIs_Active);
						insertSqlCmd.CreateParameter("@ssIs_System", DbType.Boolean, ssENEspace.ssIs_System);
						if ((ssENEspace.ssVersion_Id==0)) {
							insertSqlCmd.CreateParameter("@ssVersion_Id", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssVersion_Id", DbType.Int32, ssENEspace.ssVersion_Id);
						}
						insertSqlCmd.CreateParameter("@ssIs_Consistent", DbType.Boolean, ssENEspace.ssIs_Consistent);
						if ((ssENEspace.ssZone_Id==0)) {
							insertSqlCmd.CreateParameter("@ssZone_Id", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssZone_Id", DbType.Int32, ssENEspace.ssZone_Id);
						}
						insertSqlCmd.CreateParameter("@ssIs_User_Provider", DbType.Boolean, ssENEspace.ssIs_User_Provider);
						insertSqlCmd.CreateParameter("@ssUser_Provider_Key", DbType.String, ssENEspace.ssUser_Provider_Key);
						insertSqlCmd.CreateParameter("@ssUser_Provider_Name", DbType.String, ssENEspace.ssUser_Provider_Name);
						insertSqlCmd.CreateParameter("@ssIs_Locked", DbType.Boolean, ssENEspace.ssIs_Locked);
						insertSqlCmd.CreateParameter("@ssLocked_Date", DbType.DateTime, ssENEspace.ssLocked_Date);
						if ((ssENEspace.ssDBCatalog_Id==0)) {
							insertSqlCmd.CreateParameter("@ssDBCatalog_Id", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDBCatalog_Id", DbType.Int32, ssENEspace.ssDBCatalog_Id);
						}
						if ((ssENEspace.ssPending_Version_Id==0)) {
							insertSqlCmd.CreateParameter("@ssPending_Version_Id", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssPending_Version_Id", DbType.Int32, ssENEspace.ssPending_Version_Id);
						}
						insertSqlCmd.CreateParameter("@ssHMAC", DbType.String, ssENEspace.ssHMAC);
						insertSqlCmd.CreateParameter("@ssHMACVersion", DbType.String, ssENEspace.ssHMACVersion);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateEspace", true), typeof(int));
					} else {
						outParamId = ssENEspace.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteEspace
		/// </summary>

		public static void DeleteEspace(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENEspaceEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENEspaceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteEspace", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetEspace
		/// </summary>

		public static void GetEspace(HeContext heContext, int inParamId, out RCEspaceRecord outParamRecord) {
			outParamRecord = new RCEspaceRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENEspaceEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [NAME]" +
					 ", [IS_MULTITENANT]" +
					 ", [SS_KEY]" +
					 ", [IS_ACTIVE]" +
					 ", [IS_SYSTEM]" +
					 ", [VERSION_ID]" +
					 ", [IS_CONSISTENT]" +
					 ", [ZONE_ID]" +
					 ", [IS_USER_PROVIDER]" +
					 ", [USER_PROVIDER_KEY]" +
					 ", [USER_PROVIDER_NAME]" +
					 ", [IS_LOCKED]" +
					 ", [LOCKED_DATE]" +
					 ", [DBCATALOG_ID]" +
					 ", [PENDING_VERSION_ID]" +
					 ", [HMAC]" +
					 ", [HMACVERSION]" +
					 " FROM " + ENEspaceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetEspace", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(18, false)
							}
							;
						} else
						throw new DataBaseException(ENEspaceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetEspaceForUpdate
		/// </summary>

		public static void GetEspaceForUpdate(HeContext heContext, int inParamId, out RCEspaceRecord outParamRecord) {
			outParamRecord = new RCEspaceRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENEspaceEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [NAME]" +
					 ", [IS_MULTITENANT]" +
					 ", [SS_KEY]" +
					 ", [IS_ACTIVE]" +
					 ", [IS_SYSTEM]" +
					 ", [VERSION_ID]" +
					 ", [IS_CONSISTENT]" +
					 ", [ZONE_ID]" +
					 ", [IS_USER_PROVIDER]" +
					 ", [USER_PROVIDER_KEY]" +
					 ", [USER_PROVIDER_NAME]" +
					 ", [IS_LOCKED]" +
					 ", [LOCKED_DATE]" +
					 ", [DBCATALOG_ID]" +
					 ", [PENDING_VERSION_ID]" +
					 ", [HMAC]" +
					 ", [HMACVERSION]" +
					 "FROM " + ENEspaceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetEspaceForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(18, false)
							}
							;
						} else
						throw new DataBaseException(ENEspaceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateEspace
		/// </summary>

		public static void UpdateEspace(HeContext heContext, BitArray usedFields, RCEspaceRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENEspaceEntity.eSpaceId;
				ENEspaceEntityRecord ssENEspace = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(18, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENEspaceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NAME] = @ssName"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_MULTITENANT] = @ssIs_Multitenant"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SS_KEY] = @ssSS_Key"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_ACTIVE] = @ssIs_Active"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_SYSTEM] = @ssIs_System"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[VERSION_ID] = @ssVersion_Id"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_CONSISTENT] = @ssIs_Consistent"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ZONE_ID] = @ssZone_Id"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_USER_PROVIDER] = @ssIs_User_Provider"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USER_PROVIDER_KEY] = @ssUser_Provider_Key"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USER_PROVIDER_NAME] = @ssUser_Provider_Name"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_LOCKED] = @ssIs_Locked"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LOCKED_DATE] = @ssLocked_Date"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DBCATALOG_ID] = @ssDBCatalog_Id"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PENDING_VERSION_ID] = @ssPending_Version_Id"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HMAC] = @ssHMAC"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HMACVERSION] = @ssHMACVersion"): parameters);
					string whereCondition = " WHERE [ID] = @ssENEspacessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssName", DbType.String, ssENEspace.ssName);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssIs_Multitenant", DbType.Boolean, ssENEspace.ssIs_Multitenant);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssSS_Key", DbType.String, ssENEspace.ssSS_Key);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENEspace.ssIs_Active);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssIs_System", DbType.Boolean, ssENEspace.ssIs_System);
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENEspace.ssVersion_Id==0)) {
							sqlCmd.CreateParameter("@ssVersion_Id", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssVersion_Id", DbType.Int32, ssENEspace.ssVersion_Id);
						}
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssIs_Consistent", DbType.Boolean, ssENEspace.ssIs_Consistent);
						counter++;
					}
					if (usedFields[8]) {
						if ((ssENEspace.ssZone_Id==0)) {
							sqlCmd.CreateParameter("@ssZone_Id", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssZone_Id", DbType.Int32, ssENEspace.ssZone_Id);
						}
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssIs_User_Provider", DbType.Boolean, ssENEspace.ssIs_User_Provider);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssUser_Provider_Key", DbType.String, ssENEspace.ssUser_Provider_Key);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssUser_Provider_Name", DbType.String, ssENEspace.ssUser_Provider_Name);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssIs_Locked", DbType.Boolean, ssENEspace.ssIs_Locked);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssLocked_Date", DbType.DateTime, ssENEspace.ssLocked_Date);
						counter++;
					}
					if (usedFields[14]) {
						if ((ssENEspace.ssDBCatalog_Id==0)) {
							sqlCmd.CreateParameter("@ssDBCatalog_Id", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDBCatalog_Id", DbType.Int32, ssENEspace.ssDBCatalog_Id);
						}
						counter++;
					}
					if (usedFields[15]) {
						if ((ssENEspace.ssPending_Version_Id==0)) {
							sqlCmd.CreateParameter("@ssPending_Version_Id", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssPending_Version_Id", DbType.Int32, ssENEspace.ssPending_Version_Id);
						}
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssHMAC", DbType.String, ssENEspace.ssHMAC);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssHMACVersion", DbType.String, ssENEspace.ssHMACVersion);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[IS_MULTITENANT] = [IS_MULTITENANT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENEspacessId", DbType.Int32, ssENEspace.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateEspace", true) <= 0)
					throw new DataBaseException(ENEspaceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENEspace.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Espace")]
	public class WORCEspaceRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Name")]
		public string varWSName;

		[System.Xml.Serialization.XmlElement("Is_Multitenant")]
		public bool varWSIs_Multitenant;

		[System.Xml.Serialization.XmlElement("SS_Key")]
		public string varWSSS_Key;

		[System.Xml.Serialization.XmlElement("Is_Active")]
		public bool varWSIs_Active;

		[System.Xml.Serialization.XmlElement("Is_System")]
		public bool varWSIs_System;

		[System.Xml.Serialization.XmlElement("Version_Id")]
		public int varWSVersion_Id;

		[System.Xml.Serialization.XmlElement("Is_Consistent")]
		public bool varWSIs_Consistent;

		[System.Xml.Serialization.XmlElement("Zone_Id")]
		public int varWSZone_Id;

		[System.Xml.Serialization.XmlElement("Is_User_Provider")]
		public bool varWSIs_User_Provider;

		[System.Xml.Serialization.XmlElement("User_Provider_Key")]
		public string varWSUser_Provider_Key;

		[System.Xml.Serialization.XmlElement("User_Provider_Name")]
		public string varWSUser_Provider_Name;

		[System.Xml.Serialization.XmlElement("Is_Locked")]
		public bool varWSIs_Locked;

		[System.Xml.Serialization.XmlElement("Locked_Date")]
		public DateTime varWSLocked_Date;

		[System.Xml.Serialization.XmlElement("DBCatalog_Id")]
		public int varWSDBCatalog_Id;

		[System.Xml.Serialization.XmlElement("Pending_Version_Id")]
		public int varWSPending_Version_Id;

		[System.Xml.Serialization.XmlElement("HMAC")]
		public string varWSHMAC;

		[System.Xml.Serialization.XmlElement("HMACVersion")]
		public string varWSHMACVersion;

		public WORCEspaceRecord() {
			varWSId = (int) 0;
			varWSName = (string) "";
			varWSIs_Multitenant = (bool) false;
			varWSSS_Key = (string) "";
			varWSIs_Active = (bool) false;
			varWSIs_System = (bool) false;
			varWSVersion_Id = (int) 0;
			varWSIs_Consistent = (bool) false;
			varWSZone_Id = (int) 0;
			varWSIs_User_Provider = (bool) false;
			varWSUser_Provider_Key = (string) "";
			varWSUser_Provider_Name = (string) "";
			varWSIs_Locked = (bool) false;
			varWSLocked_Date = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSDBCatalog_Id = (int) 0;
			varWSPending_Version_Id = (int) 0;
			varWSHMAC = (string) "";
			varWSHMACVersion = (string) "";
		}

		public WORCEspaceRecord(ENEspaceEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSName = BaseAppUtils.RemoveControlChars(r.ssName);
			varWSIs_Multitenant = (bool) r.ssIs_Multitenant;
			varWSSS_Key = BaseAppUtils.RemoveControlChars(r.ssSS_Key);
			varWSIs_Active = (bool) r.ssIs_Active;
			varWSIs_System = (bool) r.ssIs_System;
			varWSVersion_Id = (int) r.ssVersion_Id;
			varWSIs_Consistent = (bool) r.ssIs_Consistent;
			varWSZone_Id = (int) r.ssZone_Id;
			varWSIs_User_Provider = (bool) r.ssIs_User_Provider;
			varWSUser_Provider_Key = BaseAppUtils.RemoveControlChars(r.ssUser_Provider_Key);
			varWSUser_Provider_Name = BaseAppUtils.RemoveControlChars(r.ssUser_Provider_Name);
			varWSIs_Locked = (bool) r.ssIs_Locked;
			varWSLocked_Date = (DateTime) r.ssLocked_Date;
			varWSDBCatalog_Id = (int) r.ssDBCatalog_Id;
			varWSPending_Version_Id = (int) r.ssPending_Version_Id;
			varWSHMAC = BaseAppUtils.RemoveControlChars(r.ssHMAC);
			varWSHMACVersion = BaseAppUtils.RemoveControlChars(r.ssHMACVersion);
		}

		public static RLEspaceList ToRecordList(WORCEspaceRecord[] array) {
			RLEspaceList rl = new RLEspaceList();
			if (array != null) {
				foreach(WORCEspaceRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCEspaceRecord[] FromRecordList(RLEspaceList rl) {
			WORCEspaceRecord[] array = new WORCEspaceRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCEspaceRecord {
		public static implicit operator WORCEspaceRecord(RCEspaceRecord r) {
			return new WORCEspaceRecord(r.ssENEspace);
		}

		public static implicit operator RCEspaceRecord(WORCEspaceRecord w) {
			RCEspaceRecord r = new RCEspaceRecord("");
			if (w != null) {
				r.ssENEspace = w;
			}
			return r;
		}

	}

	partial struct ENEspaceEntityRecord {
		public static implicit operator WORCEspaceRecord(ENEspaceEntityRecord r) {
			return new WORCEspaceRecord(r);
		}

		public static implicit operator ENEspaceEntityRecord(WORCEspaceRecord w) {
			ENEspaceEntityRecord r = new ENEspaceEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssName = ((string) w.varWSName ?? "");
				r.ssIs_Multitenant = (bool) w.varWSIs_Multitenant;
				r.ssSS_Key = ((string) w.varWSSS_Key ?? "");
				r.ssIs_Active = (bool) w.varWSIs_Active;
				r.ssIs_System = (bool) w.varWSIs_System;
				r.ssVersion_Id = (int) w.varWSVersion_Id;
				r.ssIs_Consistent = (bool) w.varWSIs_Consistent;
				r.ssZone_Id = (int) w.varWSZone_Id;
				r.ssIs_User_Provider = (bool) w.varWSIs_User_Provider;
				r.ssUser_Provider_Key = ((string) w.varWSUser_Provider_Key ?? "");
				r.ssUser_Provider_Name = ((string) w.varWSUser_Provider_Name ?? "");
				r.ssIs_Locked = (bool) w.varWSIs_Locked;
				r.ssLocked_Date = (DateTime) w.varWSLocked_Date;
				r.ssDBCatalog_Id = (int) w.varWSDBCatalog_Id;
				r.ssPending_Version_Id = (int) w.varWSPending_Version_Id;
				r.ssHMAC = ((string) w.varWSHMAC ?? "");
				r.ssHMACVersion = ((string) w.varWSHMACVersion ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLEspaceRecordList {
		public WORCEspaceRecord[] Array;


		public WORLEspaceRecordList(WORCEspaceRecord[] r) {
			if (r == null)
			Array = new WORCEspaceRecord[0];
			else
			Array = r;
		}
		public WORLEspaceRecordList() {
			Array = new WORCEspaceRecord[0];
		}

		public WORLEspaceRecordList(RLEspaceRecordList rl) {
			rl=(RLEspaceRecordList) rl.Duplicate();
			Array = new WORCEspaceRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCEspaceRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLEspaceRecordList {
		public static implicit operator RLEspaceRecordList(WORCEspaceRecord[] array) {
			RLEspaceRecordList rl = new RLEspaceRecordList();
			if (array != null) {
				foreach(WORCEspaceRecord val in array) {
					rl.Append((RCEspaceRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCEspaceRecord[](RLEspaceRecordList rl) {
			WORCEspaceRecord[] array = new WORCEspaceRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCEspaceRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLEspaceRecordList {
		public static implicit operator RLEspaceRecordList(WORLEspaceRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLEspaceRecordList(RLEspaceRecordList rl) {
			return new WORLEspaceRecordList(rl);
		}
		public static implicit operator WORCEspaceRecord[](WORLEspaceRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLEspaceRecordList(WORCEspaceRecord[] array) {
			return new WORLEspaceRecordList(array);
		}
	}
}

