/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENDocumentsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENDocumentsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENDocumentsEntity.eSpaceId;
	} // ENDocumentsEntity

	/// <summary>
	/// Entity <code>ENDocumentsEntityRecord</code> that represents the Service Studio entity
	///  <code>Documents</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Documents", "EyUiLfyWyE+PEmkcv4Axqg", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_Documents", "")]
	[Serializable()]
	public partial struct ENDocumentsEntityRecord: ISerializable, ITypedRecord<ENDocumentsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*3osZLF__zk61DfiHVrPOAQ");
		private static readonly GlobalObjectKey IdType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*oKBgkDxBkE6jLtGn7+QJow");
		private static readonly GlobalObjectKey IdDocumentName = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*IgUzOryw5ESTaiKW2QQb_Q");
		private static readonly GlobalObjectKey IdDocumentData = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*N7gzjOGEIEuFBD2IDSGalA");
		private static readonly GlobalObjectKey IdDocumentType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*PlVWRGqfLEW_HsGFOJEivw");
		private static readonly GlobalObjectKey IdDocViewingRestrictedByUser = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*v_SCm8_210Sf_vfOHg3JHA");
		private static readonly GlobalObjectKey IdDocViewingRestrictedByRole = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*nNj3J3CY2kudAdkfWzrhCA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TYPE", 300, false, false, false)]
		[System.Xml.Serialization.XmlElement("Type")]
		private string _ssType;
		public string ssType {
			get {
				return _ssType;
			}
			set {
				if ((_ssType!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENTNAME", 250, false, false, false)]
		[System.Xml.Serialization.XmlElement("DocumentName")]
		private string _ssDocumentName;
		public string ssDocumentName {
			get {
				return _ssDocumentName;
			}
			set {
				if ((_ssDocumentName!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDocumentName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENTDATA", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("DocumentData")]
		private byte[] _ssDocumentData;
		public byte[] ssDocumentData {
			get {
				return _ssDocumentData;
			}
			set {
				if ((_ssDocumentData!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssDocumentData = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENTTYPE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("DocumentType")]
		private int _ssDocumentType;
		public int ssDocumentType {
			get {
				return _ssDocumentType;
			}
			set {
				if ((_ssDocumentType!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssDocumentType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCVIEWINGRESTRICTEDBYUSER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("DocViewingRestrictedByUser")]
		private bool _ssDocViewingRestrictedByUser;
		public bool ssDocViewingRestrictedByUser {
			get {
				return _ssDocViewingRestrictedByUser;
			}
			set {
				if ((_ssDocViewingRestrictedByUser!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssDocViewingRestrictedByUser = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCVIEWINGRESTRICTEDBYROLE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("DocViewingRestrictedByRole")]
		private string _ssDocViewingRestrictedByRole;
		public string ssDocViewingRestrictedByRole {
			get {
				return _ssDocViewingRestrictedByRole;
			}
			set {
				if ((_ssDocViewingRestrictedByRole!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssDocViewingRestrictedByRole = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENDocumentsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssType = "";
			_ssDocumentName = "";
			_ssDocumentData = new byte[] {};
			_ssDocumentType = 0;
			_ssDocViewingRestrictedByUser = false;
			_ssDocViewingRestrictedByRole = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Documents.Id", 0);
			ssType = r.ReadText(index++, "Documents.Type", "");
			ssDocumentName = r.ReadText(index++, "Documents.DocumentName", "");
			ssDocumentData = r.ReadBinaryData(index++, "Documents.DocumentData", new byte[] {}
			);
			ssDocumentType = r.ReadEntityReference(index++, "Documents.DocumentType", 0);
			ssDocViewingRestrictedByUser = r.ReadBoolean(index++, "Documents.DocViewingRestrictedByUser", false);
			ssDocViewingRestrictedByRole = r.ReadText(index++, "Documents.DocViewingRestrictedByRole", "");
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENDocumentsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENDocumentsEntityRecord a, ENDocumentsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssType != b.ssType) return false;
			if (a.ssDocumentName != b.ssDocumentName) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssDocumentData, b.ssDocumentData)) return false;
			if (a.ssDocumentType != b.ssDocumentType) return false;
			if (a.ssDocViewingRestrictedByUser != b.ssDocViewingRestrictedByUser) return false;
			if (a.ssDocViewingRestrictedByRole != b.ssDocViewingRestrictedByRole) return false;
			return true;
		}

		public static bool operator != (ENDocumentsEntityRecord a, ENDocumentsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENDocumentsEntityRecord)) return false;
			return (this == (ENDocumentsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssType.GetHashCode()
				^ ssDocumentName.GetHashCode()
				^ ssDocumentData.GetHashCode()
				^ ssDocumentType.GetHashCode()
				^ ssDocViewingRestrictedByUser.GetHashCode()
				^ ssDocViewingRestrictedByRole.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENDocumentsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssType = "";
			_ssDocumentName = "";
			_ssDocumentData = new byte[] {};
			_ssDocumentType = 0;
			_ssDocViewingRestrictedByUser = false;
			_ssDocViewingRestrictedByRole = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssType = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDocumentName = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssDocumentData = (byte[]) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssDocumentType = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssDocViewingRestrictedByUser = (bool) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssDocViewingRestrictedByRole = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENDocumentsEntityRecord Duplicate() {
			ENDocumentsEntityRecord t;
			t._ssId = this._ssId;
			t._ssType = this._ssType;
			t._ssDocumentName = this._ssDocumentName;
			if (this._ssDocumentData != null) {
				t._ssDocumentData = (byte[]) this._ssDocumentData.Clone();
			} else {
				t._ssDocumentData = null;
			}
			t._ssDocumentType = this._ssDocumentType;
			t._ssDocViewingRestrictedByUser = this._ssDocViewingRestrictedByUser;
			t._ssDocViewingRestrictedByRole = this._ssDocViewingRestrictedByRole;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Type")) VarValue.AppendAttribute(recordElem, "Type", ssType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocumentName")) VarValue.AppendAttribute(recordElem, "DocumentName", ssDocumentName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DocumentName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocumentData")) VarValue.AppendAttribute(recordElem, "DocumentData", ssDocumentData, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "DocumentData");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocumentType")) VarValue.AppendAttribute(recordElem, "DocumentType", ssDocumentType, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "DocumentType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocViewingRestrictedByUser")) VarValue.AppendAttribute(recordElem, "DocViewingRestrictedByUser", ssDocViewingRestrictedByUser, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "DocViewingRestrictedByUser");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocViewingRestrictedByRole")) VarValue.AppendAttribute(recordElem, "DocViewingRestrictedByRole", ssDocViewingRestrictedByRole, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DocViewingRestrictedByRole");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Type")) variable.Value = ssType; else variable.Optimized = true;
			} else if (head == "documentname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocumentName")) variable.Value = ssDocumentName; else variable.Optimized = true;
			} else if (head == "documentdata") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocumentData")) variable.Value = ssDocumentData; else variable.Optimized = true;
			} else if (head == "documenttype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocumentType")) variable.Value = ssDocumentType; else variable.Optimized = true;
			} else if (head == "docviewingrestrictedbyuser") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocViewingRestrictedByUser")) variable.Value = ssDocViewingRestrictedByUser; else variable.Optimized = true;
			} else if (head == "docviewingrestrictedbyrole") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocViewingRestrictedByRole")) variable.Value = ssDocViewingRestrictedByRole; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdType)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDocumentName)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdDocumentData)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdDocumentType)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdDocViewingRestrictedByUser)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdDocViewingRestrictedByRole)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdType)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDocumentName)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdDocumentData)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdDocumentType)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdDocViewingRestrictedByUser)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdDocViewingRestrictedByRole)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdType) {
				return ssType;
			} else if (key == IdDocumentName) {
				return ssDocumentName;
			} else if (key == IdDocumentData) {
				return ssDocumentData;
			} else if (key == IdDocumentType) {
				return ssDocumentType;
			} else if (key == IdDocViewingRestrictedByUser) {
				return ssDocViewingRestrictedByUser;
			} else if (key == IdDocViewingRestrictedByRole) {
				return ssDocViewingRestrictedByRole;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssType = (string) other.AttributeGet(IdType);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdType);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdType);
			ssDocumentName = (string) other.AttributeGet(IdDocumentName);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDocumentName);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDocumentName);
			ssDocumentData = (byte[]) other.AttributeGet(IdDocumentData);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdDocumentData);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdDocumentData);
			ssDocumentType = (int) other.AttributeGet(IdDocumentType);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdDocumentType);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdDocumentType);
			ssDocViewingRestrictedByUser = (bool) other.AttributeGet(IdDocViewingRestrictedByUser);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdDocViewingRestrictedByUser);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdDocViewingRestrictedByUser);
			ssDocViewingRestrictedByRole = (string) other.AttributeGet(IdDocViewingRestrictedByRole);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdDocViewingRestrictedByRole);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdDocViewingRestrictedByRole);
		}
	} // ENDocumentsEntityRecord
	/// <summary>
	/// Structure <code>RCDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCDocumentsRecord: ISerializable, ITypedRecord<RCDocumentsRecord> {
		private static readonly GlobalObjectKey IdDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*V+rMCyDoxxgjgWOZC2i4yw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Documents")]
		public ENDocumentsEntityRecord ssENDocuments;


		public static implicit operator ENDocumentsEntityRecord(RCDocumentsRecord r) {
			return r.ssENDocuments;
		}

		public static implicit operator RCDocumentsRecord(ENDocumentsEntityRecord r) {
			RCDocumentsRecord res = new RCDocumentsRecord(null);
			res.ssENDocuments = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENDocuments.ChangedAttributes = value;
			}
			get {
				return ssENDocuments.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENDocuments = new ENDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENDocuments.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCDocumentsRecord a, RCDocumentsRecord b) {
			if (a.ssENDocuments != b.ssENDocuments) return false;
			return true;
		}

		public static bool operator != (RCDocumentsRecord a, RCDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCDocumentsRecord)) return false;
			return (this == (RCDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENDocuments = new ENDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENDocuments = (ENDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENDocuments.InternalRecursiveSave();
		}


		public RCDocumentsRecord Duplicate() {
			RCDocumentsRecord t;
			t.ssENDocuments = (ENDocumentsEntityRecord) this.ssENDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENDocuments.ToXml(this, recordElem, "Documents", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "documents") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Documents")) variable.Value = ssENDocuments; else variable.Optimized = true;
				variable.SetFieldName("documents");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENDocuments.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENDocuments.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDocuments) {
				return ssENDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENDocuments.FillFromOther((IRecord) other.AttributeGet(IdDocuments));
		}
	} // RCDocumentsRecord
	/// <summary>
	/// RecordList type <code>RLDocumentsRecordList</code> that represents a record list of
	///  <code>Documents</code>
	/// </summary>
	[Serializable()]
	public partial class RLDocumentsRecordList: GenericRecordList<RCDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCDocumentsRecord GetElementDefaultValue() {
			return new RCDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDocumentsRecordList recordlist, Func<RCDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDocumentsRecordList ToList<T>(T[] array, Func <T, RCDocumentsRecord> converter) {
			RLDocumentsRecordList result = new RLDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCDocumentsRecord> NewList() {
			return new RLDocumentsRecordList();
		}


	} // RLDocumentsRecordList

	/// <summary>
	/// RecordList type <code>RLDocumentsList</code> that represents a record list of <code>Text, Text,
	///  Text, BinaryData, Boolean, Integer, DocumentTypeIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLDocumentsList: GenericRecordList<ENDocumentsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENDocumentsEntityRecord GetElementDefaultValue() {
			return new ENDocumentsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENDocumentsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDocumentsList recordlist, Func<ENDocumentsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDocumentsList ToList<T>(T[] array, Func <T, ENDocumentsEntityRecord> converter) {
			RLDocumentsList result = new RLDocumentsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDocumentsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocumentsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocumentsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDocumentsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENDocumentsEntityRecord> NewList() {
			return new RLDocumentsList();
		}


	} // RLDocumentsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateDocuments
		/// </summary>

		public static void CreateDocuments(HeContext heContext, RCDocumentsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENDocumentsEntity.eSpaceId;
				ENDocumentsEntityRecord ssENDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENDocumentsEntity.LocalViewName(null, null) + " (" +
					 " [TYPE]" +
					 ", [DOCUMENTNAME]" +
					 ", [DOCUMENTDATA]" +
					 ", [DOCUMENTTYPE]" +
					 ", [DOCVIEWINGRESTRICTEDBYUSER]" +
					 ", [DOCVIEWINGRESTRICTEDBYROLE]" +
					 " ) VALUES (" +
					 " @ssType" +
					 ", @ssDocumentName" +
					 ", @ssDocumentData" +
					 ", @ssDocumentType" +
					 ", @ssDocViewingRestrictedByUser" +
					 ", @ssDocViewingRestrictedByRole" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssType", DbType.String, ssENDocuments.ssType);
					insertSqlCmd.CreateParameter("@ssDocumentName", DbType.String, ssENDocuments.ssDocumentName);
					insertSqlCmd.CreateParameter("@ssDocumentData", DbType.Binary, ssENDocuments.ssDocumentData);
					if ((ssENDocuments.ssDocumentType==0)) {
						insertSqlCmd.CreateParameter("@ssDocumentType", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDocumentType", DbType.Int32, ssENDocuments.ssDocumentType);
					}
					insertSqlCmd.CreateParameter("@ssDocViewingRestrictedByUser", DbType.Boolean, ssENDocuments.ssDocViewingRestrictedByUser);
					insertSqlCmd.CreateParameter("@ssDocViewingRestrictedByRole", DbType.String, ssENDocuments.ssDocViewingRestrictedByRole);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateDocuments", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateDocuments
		/// </summary>

		public static void CreateOrUpdateDocuments(HeContext heContext, BitArray usedFields, RCDocumentsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENDocumentsEntity.eSpaceId;
				ENDocumentsEntityRecord ssENDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TYPE] = @ssType"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTNAME] = @ssDocumentName"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTDATA] = @ssDocumentData"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTTYPE] = @ssDocumentType"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCVIEWINGRESTRICTEDBYUSER] = @ssDocViewingRestrictedByUser"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCVIEWINGRESTRICTEDBYROLE] = @ssDocViewingRestrictedByRole"): parameters);
					string whereCondition = " WHERE [ID] = @ssENDocumentsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssType", DbType.String, ssENDocuments.ssType);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDocumentName", DbType.String, ssENDocuments.ssDocumentName);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDocumentData", DbType.Binary, ssENDocuments.ssDocumentData);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENDocuments.ssDocumentType==0)) {
							sqlCmd.CreateParameter("@ssDocumentType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentType", DbType.Int32, ssENDocuments.ssDocumentType);
						}
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssDocViewingRestrictedByUser", DbType.Boolean, ssENDocuments.ssDocViewingRestrictedByUser);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssDocViewingRestrictedByRole", DbType.String, ssENDocuments.ssDocViewingRestrictedByRole);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[DOCVIEWINGRESTRICTEDBYUSER] = [DOCVIEWINGRESTRICTEDBYUSER]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENDocumentsssId", DbType.Int32, ssENDocuments.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateDocuments (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENDocumentsEntity.LocalViewName(null, null) + " (" +
						 " [TYPE]" +
						 ", [DOCUMENTNAME]" +
						 ", [DOCUMENTDATA]" +
						 ", [DOCUMENTTYPE]" +
						 ", [DOCVIEWINGRESTRICTEDBYUSER]" +
						 ", [DOCVIEWINGRESTRICTEDBYROLE]" +
						 " ) VALUES (" +
						 " @ssType" +
						 ", @ssDocumentName" +
						 ", @ssDocumentData" +
						 ", @ssDocumentType" +
						 ", @ssDocViewingRestrictedByUser" +
						 ", @ssDocViewingRestrictedByRole" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssType", DbType.String, ssENDocuments.ssType);
						insertSqlCmd.CreateParameter("@ssDocumentName", DbType.String, ssENDocuments.ssDocumentName);
						insertSqlCmd.CreateParameter("@ssDocumentData", DbType.Binary, ssENDocuments.ssDocumentData);
						if ((ssENDocuments.ssDocumentType==0)) {
							insertSqlCmd.CreateParameter("@ssDocumentType", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDocumentType", DbType.Int32, ssENDocuments.ssDocumentType);
						}
						insertSqlCmd.CreateParameter("@ssDocViewingRestrictedByUser", DbType.Boolean, ssENDocuments.ssDocViewingRestrictedByUser);
						insertSqlCmd.CreateParameter("@ssDocViewingRestrictedByRole", DbType.String, ssENDocuments.ssDocViewingRestrictedByRole);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateDocuments", true), typeof(int));
					} else {
						outParamId = ssENDocuments.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteDocuments
		/// </summary>

		public static void DeleteDocuments(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteDocuments", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetDocuments
		/// </summary>

		public static void GetDocuments(HeContext heContext, int inParamId, out RCDocumentsRecord outParamRecord) {
			outParamRecord = new RCDocumentsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [TYPE]" +
					 ", [DOCUMENTNAME]" +
					 ", [DOCUMENTDATA]" +
					 ", [DOCUMENTTYPE]" +
					 ", [DOCVIEWINGRESTRICTEDBYUSER]" +
					 ", [DOCVIEWINGRESTRICTEDBYROLE]" +
					 " FROM " + ENDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetDocuments", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetDocumentsForUpdate
		/// </summary>

		public static void GetDocumentsForUpdate(HeContext heContext, int inParamId, out RCDocumentsRecord outParamRecord) {
			outParamRecord = new RCDocumentsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [TYPE]" +
					 ", [DOCUMENTNAME]" +
					 ", [DOCUMENTDATA]" +
					 ", [DOCUMENTTYPE]" +
					 ", [DOCVIEWINGRESTRICTEDBYUSER]" +
					 ", [DOCVIEWINGRESTRICTEDBYROLE]" +
					 "FROM " + ENDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetDocumentsForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateDocuments
		/// </summary>

		public static void UpdateDocuments(HeContext heContext, BitArray usedFields, RCDocumentsRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENDocumentsEntity.eSpaceId;
				ENDocumentsEntityRecord ssENDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TYPE] = @ssType"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTNAME] = @ssDocumentName"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTDATA] = @ssDocumentData"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTTYPE] = @ssDocumentType"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCVIEWINGRESTRICTEDBYUSER] = @ssDocViewingRestrictedByUser"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCVIEWINGRESTRICTEDBYROLE] = @ssDocViewingRestrictedByRole"): parameters);
					string whereCondition = " WHERE [ID] = @ssENDocumentsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssType", DbType.String, ssENDocuments.ssType);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDocumentName", DbType.String, ssENDocuments.ssDocumentName);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDocumentData", DbType.Binary, ssENDocuments.ssDocumentData);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENDocuments.ssDocumentType==0)) {
							sqlCmd.CreateParameter("@ssDocumentType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentType", DbType.Int32, ssENDocuments.ssDocumentType);
						}
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssDocViewingRestrictedByUser", DbType.Boolean, ssENDocuments.ssDocViewingRestrictedByUser);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssDocViewingRestrictedByRole", DbType.String, ssENDocuments.ssDocViewingRestrictedByRole);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[DOCVIEWINGRESTRICTEDBYUSER] = [DOCVIEWINGRESTRICTEDBYUSER]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENDocumentsssId", DbType.Int32, ssENDocuments.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateDocuments", true) <= 0)
					throw new DataBaseException(ENDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENDocuments.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Documents")]
	public class WORCDocumentsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Type")]
		public string varWSType;

		[System.Xml.Serialization.XmlElement("DocumentName")]
		public string varWSDocumentName;

		[System.Xml.Serialization.XmlElement("DocumentData", DataType= "base64Binary")]
		public byte[] varWSDocumentData;

		[System.Xml.Serialization.XmlElement("DocumentType")]
		public int varWSDocumentType;

		[System.Xml.Serialization.XmlElement("DocViewingRestrictedByUser")]
		public bool varWSDocViewingRestrictedByUser;

		[System.Xml.Serialization.XmlElement("DocViewingRestrictedByRole")]
		public string varWSDocViewingRestrictedByRole;

		public WORCDocumentsRecord() {
			varWSId = (int) 0;
			varWSType = (string) "";
			varWSDocumentName = (string) "";
			varWSDocumentData = (byte[]) new byte[] {};
			varWSDocumentType = (int) 0;
			varWSDocViewingRestrictedByUser = (bool) false;
			varWSDocViewingRestrictedByRole = (string) "";
		}

		public WORCDocumentsRecord(ENDocumentsEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSType = BaseAppUtils.RemoveControlChars(r.ssType);
			varWSDocumentName = BaseAppUtils.RemoveControlChars(r.ssDocumentName);
			varWSDocumentData = (byte[]) r.ssDocumentData;
			varWSDocumentType = (int) r.ssDocumentType;
			varWSDocViewingRestrictedByUser = (bool) r.ssDocViewingRestrictedByUser;
			varWSDocViewingRestrictedByRole = BaseAppUtils.RemoveControlChars(r.ssDocViewingRestrictedByRole);
		}

		public static RLDocumentsList ToRecordList(WORCDocumentsRecord[] array) {
			RLDocumentsList rl = new RLDocumentsList();
			if (array != null) {
				foreach(WORCDocumentsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCDocumentsRecord[] FromRecordList(RLDocumentsList rl) {
			WORCDocumentsRecord[] array = new WORCDocumentsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCDocumentsRecord {
		public static implicit operator WORCDocumentsRecord(RCDocumentsRecord r) {
			return new WORCDocumentsRecord(r.ssENDocuments);
		}

		public static implicit operator RCDocumentsRecord(WORCDocumentsRecord w) {
			RCDocumentsRecord r = new RCDocumentsRecord("");
			if (w != null) {
				r.ssENDocuments = w;
			}
			return r;
		}

	}

	partial struct ENDocumentsEntityRecord {
		public static implicit operator WORCDocumentsRecord(ENDocumentsEntityRecord r) {
			return new WORCDocumentsRecord(r);
		}

		public static implicit operator ENDocumentsEntityRecord(WORCDocumentsRecord w) {
			ENDocumentsEntityRecord r = new ENDocumentsEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssType = ((string) w.varWSType ?? "");
				r.ssDocumentName = ((string) w.varWSDocumentName ?? "");
				r.ssDocumentData = ((byte[]) w.varWSDocumentData ?? new byte[] {}
				);
				r.ssDocumentType = (int) w.varWSDocumentType;
				r.ssDocViewingRestrictedByUser = (bool) w.varWSDocViewingRestrictedByUser;
				r.ssDocViewingRestrictedByRole = ((string) w.varWSDocViewingRestrictedByRole ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLDocumentsRecordList {
		public WORCDocumentsRecord[] Array;


		public WORLDocumentsRecordList(WORCDocumentsRecord[] r) {
			if (r == null)
			Array = new WORCDocumentsRecord[0];
			else
			Array = r;
		}
		public WORLDocumentsRecordList() {
			Array = new WORCDocumentsRecord[0];
		}

		public WORLDocumentsRecordList(RLDocumentsRecordList rl) {
			rl=(RLDocumentsRecordList) rl.Duplicate();
			Array = new WORCDocumentsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCDocumentsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLDocumentsRecordList {
		public static implicit operator RLDocumentsRecordList(WORCDocumentsRecord[] array) {
			RLDocumentsRecordList rl = new RLDocumentsRecordList();
			if (array != null) {
				foreach(WORCDocumentsRecord val in array) {
					rl.Append((RCDocumentsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCDocumentsRecord[](RLDocumentsRecordList rl) {
			WORCDocumentsRecord[] array = new WORCDocumentsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCDocumentsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLDocumentsRecordList {
		public static implicit operator RLDocumentsRecordList(WORLDocumentsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLDocumentsRecordList(RLDocumentsRecordList rl) {
			return new WORLDocumentsRecordList(rl);
		}
		public static implicit operator WORCDocumentsRecord[](WORLDocumentsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLDocumentsRecordList(WORCDocumentsRecord[] array) {
			return new WORLDocumentsRecordList(array);
		}
	}
}

