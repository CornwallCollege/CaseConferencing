/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENUser_RoleEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(tenant, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return string.Format(BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(1), "{0}"), tenant.HasValue ? "OSSYS_USER_ROLE_T" + tenant: "OSSYS_USER_ROLE");
		}
		public const int eSpaceId = 1;
	} // ENUser_RoleEntity

	/// <summary>
	/// Entity <code>ENUser_RoleEntityRecord</code> that represents the Service Studio entity
	///  <code>User_Role</code> <p> Description: Roles for each end user.</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("User_Role", "6uJOyvQWtkmBCfQFOro3tA", "uXCIR2Atc0+es3zYuZSnNw", 0, "ossys_User_Role", "")]
	[Serializable()]
	public partial struct ENUser_RoleEntityRecord: ISerializable, ITypedRecord<ENUser_RoleEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdTenant_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*c6ZbVxjUCPthCZcayz47qg.#Tenant_Id");
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*G5GTp8FJUVe2vlaUjed+KQ");
		private static readonly GlobalObjectKey IdUser_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*jND5XlUAtOGbuwIyQH3ZJQ");
		private static readonly GlobalObjectKey IdRole_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*Wz9A8mc0dUMNd6FJXXzgyQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TENANT_ID", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Tenant_Id")]
		private int _Tenant_Id;
		public int Tenant_Id {
			get {
				return _Tenant_Id;
			}
			set {
				if ((_Tenant_Id!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(4, true);
					_Tenant_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes = new BitArray(4, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USER_ID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("User_Id")]
		private int _ssUser_Id;
		public int ssUser_Id {
			get {
				return _ssUser_Id;
			}
			set {
				if ((_ssUser_Id!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssUser_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ROLE_ID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Role_Id")]
		private int _ssRole_Id;
		public int ssRole_Id {
			get {
				return _ssRole_Id;
			}
			set {
				if ((_ssRole_Id!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssRole_Id = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENUser_RoleEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(4, true);
			OptimizedAttributes = new BitArray(4, false);
			_Tenant_Id = 0;
			_ssId = 0;
			_ssUser_Id = 0;
			_ssRole_Id = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "User_Role.Id", 0);
			ssUser_Id = r.ReadEntityReference(index++, "User_Role.User_Id", 0);
			ssRole_Id = r.ReadEntityReference(index++, "User_Role.Role_Id", 0);
			ChangedAttributes = new BitArray(4, false);
			OptimizedAttributes = new BitArray(4, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENUser_RoleEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENUser_RoleEntityRecord a, ENUser_RoleEntityRecord b) {
			if (a.Tenant_Id != b.Tenant_Id) return false;
			if (a.ssId != b.ssId) return false;
			if (a.ssUser_Id != b.ssUser_Id) return false;
			if (a.ssRole_Id != b.ssRole_Id) return false;
			return true;
		}

		public static bool operator != (ENUser_RoleEntityRecord a, ENUser_RoleEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENUser_RoleEntityRecord)) return false;
			return (this == (ENUser_RoleEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ Tenant_Id.GetHashCode()
				^ ssId.GetHashCode()
				^ ssUser_Id.GetHashCode()
				^ ssRole_Id.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENUser_RoleEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(4, true);
			OptimizedAttributes = new BitArray(4, false);
			_Tenant_Id = 0;
			_ssId = 0;
			_ssUser_Id = 0;
			_ssRole_Id = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_Tenant_Id = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssUser_Id = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssRole_Id = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENUser_RoleEntityRecord Duplicate() {
			ENUser_RoleEntityRecord t;
			t._Tenant_Id = this._Tenant_Id;
			t._ssId = this._ssId;
			t._ssUser_Id = this._ssUser_Id;
			t._ssRole_Id = this._ssRole_Id;
			t.ChangedAttributes = new BitArray(4);
			t.OptimizedAttributes = new BitArray(4);
			for (int i = 0; i < 4; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".User_Id")) VarValue.AppendAttribute(recordElem, "User_Id", ssUser_Id, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "User_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Role_Id")) VarValue.AppendAttribute(recordElem, "Role_Id", ssRole_Id, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Role_Id");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "tenant_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Tenant_Id")) variable.Value = Tenant_Id; else variable.Optimized = true;
			} else if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "user_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_Id")) variable.Value = ssUser_Id; else variable.Optimized = true;
			} else if (head == "role_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Role_Id")) variable.Value = ssRole_Id; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdTenant_Id)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdUser_Id)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdRole_Id)) {
				return ChangedAttributes[3];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdTenant_Id)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdUser_Id)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdRole_Id)) {
				return OptimizedAttributes[3];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTenant_Id) {
				return Tenant_Id;
			} else if (key == IdId) {
				return ssId;
			} else if (key == IdUser_Id) {
				return ssUser_Id;
			} else if (key == IdRole_Id) {
				return ssRole_Id;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(4);
			OptimizedAttributes = new BitArray(4);
			if (other == null) return;
			Tenant_Id = (int) other.AttributeGet(IdTenant_Id);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdTenant_Id);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdTenant_Id);
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdId);
			ssUser_Id = (int) other.AttributeGet(IdUser_Id);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdUser_Id);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdUser_Id);
			ssRole_Id = (int) other.AttributeGet(IdRole_Id);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdRole_Id);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdRole_Id);
		}
	} // ENUser_RoleEntityRecord
	/// <summary>
	/// Structure <code>RCUser_RoleRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUser_RoleRecord: ISerializable, ITypedRecord<RCUser_RoleRecord> {
		private static readonly GlobalObjectKey IdUser_Role = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*YmR_2XimscgdGbPx517Uyw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User_Role")]
		public ENUser_RoleEntityRecord ssENUser_Role;


		public static implicit operator ENUser_RoleEntityRecord(RCUser_RoleRecord r) {
			return r.ssENUser_Role;
		}

		public static implicit operator RCUser_RoleRecord(ENUser_RoleEntityRecord r) {
			RCUser_RoleRecord res = new RCUser_RoleRecord(null);
			res.ssENUser_Role = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENUser_Role.ChangedAttributes = value;
			}
			get {
				return ssENUser_Role.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCUser_RoleRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser_Role = new ENUser_RoleEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser_Role.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENUser_Role.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENUser_Role.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser_Role.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUser_RoleRecord r) {
			this = r;
		}


		public static bool operator == (RCUser_RoleRecord a, RCUser_RoleRecord b) {
			if (a.ssENUser_Role != b.ssENUser_Role) return false;
			return true;
		}

		public static bool operator != (RCUser_RoleRecord a, RCUser_RoleRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUser_RoleRecord)) return false;
			return (this == (RCUser_RoleRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser_Role.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUser_RoleRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser_Role = new ENUser_RoleEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUser_Role = (ENUser_RoleEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENUser_Role.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser_Role.InternalRecursiveSave();
		}


		public RCUser_RoleRecord Duplicate() {
			RCUser_RoleRecord t;
			t.ssENUser_Role = (ENUser_RoleEntityRecord) this.ssENUser_Role.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser_Role.ToXml(this, recordElem, "User_Role", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user_role") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User_Role")) variable.Value = ssENUser_Role; else variable.Optimized = true;
				variable.SetFieldName("user_role");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENUser_Role.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENUser_Role.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser_Role) {
				return ssENUser_Role;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser_Role.FillFromOther((IRecord) other.AttributeGet(IdUser_Role));
		}
	} // RCUser_RoleRecord
	/// <summary>
	/// RecordList type <code>RLUser_RoleRecordList</code> that represents a record list of
	///  <code>User_Role</code>
	/// </summary>
	[Serializable()]
	public partial class RLUser_RoleRecordList: GenericRecordList<RCUser_RoleRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUser_RoleRecord GetElementDefaultValue() {
			return new RCUser_RoleRecord("");
		}

		public T[] ToArray<T>(Func<RCUser_RoleRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUser_RoleRecordList recordlist, Func<RCUser_RoleRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUser_RoleRecordList ToList<T>(T[] array, Func <T, RCUser_RoleRecord> converter) {
			RLUser_RoleRecordList result = new RLUser_RoleRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUser_RoleRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUser_RoleRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUser_RoleRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUser_RoleRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUser_RoleRecord> NewList() {
			return new RLUser_RoleRecordList();
		}


	} // RLUser_RoleRecordList

	/// <summary>
	/// RecordList type <code>RLUser_RoleList</code> that represents a record list of <code>UserIdentifier,
	///  RoleIdentifier, Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLUser_RoleList: GenericRecordList<ENUser_RoleEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENUser_RoleEntityRecord GetElementDefaultValue() {
			return new ENUser_RoleEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENUser_RoleEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUser_RoleList recordlist, Func<ENUser_RoleEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUser_RoleList ToList<T>(T[] array, Func <T, ENUser_RoleEntityRecord> converter) {
			RLUser_RoleList result = new RLUser_RoleList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUser_RoleList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUser_RoleList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUser_RoleList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUser_RoleList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENUser_RoleEntityRecord> NewList() {
			return new RLUser_RoleList();
		}


	} // RLUser_RoleList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateUser_Role
		/// </summary>

		public static void CreateUser_Role(HeContext heContext, RCUser_RoleRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUser_RoleEntity.eSpaceId;
				ENUser_RoleEntityRecord ssENUser_Role = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENUser_RoleEntity.LocalViewName(null, null) + " (" +
					 " [TENANT_ID]" +
					 ", [USER_ID]" +
					 ", [ROLE_ID]" +
					 " ) VALUES (" +
					 " @Tenant_Id" +
					 ", @ssUser_Id" +
					 ", @ssRole_Id" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@Tenant_Id", DbType.Int32, heContext.AppInfo.Tenant.Id);
					insertSqlCmd.CreateParameter("@ssUser_Id", DbType.Int32, ssENUser_Role.ssUser_Id);
					insertSqlCmd.CreateParameter("@ssRole_Id", DbType.Int32, ssENUser_Role.ssRole_Id);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateUser_Role", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateUser_Role
		/// </summary>

		public static void CreateOrUpdateUser_Role(HeContext heContext, BitArray usedFields, RCUser_RoleRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUser_RoleEntity.eSpaceId;
				ENUser_RoleEntityRecord ssENUser_Role = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(4, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENUser_RoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[0] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TENANT_ID] = @Tenant_Id"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USER_ID] = @ssUser_Id"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ROLE_ID] = @ssRole_Id"): parameters);
					string whereCondition = " WHERE [ID] = @ssENUser_RolessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[0]) {
						sqlCmd.CreateParameter("@Tenant_Id", DbType.Int32, heContext.AppInfo.Tenant.Id);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssUser_Id", DbType.Int32, ssENUser_Role.ssUser_Id);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssRole_Id", DbType.Int32, ssENUser_Role.ssRole_Id);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[USER_ID] = [USER_ID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENUser_RolessId", DbType.Int32, ssENUser_Role.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateUser_Role (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENUser_RoleEntity.LocalViewName(null, null) + " (" +
						 " [TENANT_ID]" +
						 ", [USER_ID]" +
						 ", [ROLE_ID]" +
						 " ) VALUES (" +
						 " @Tenant_Id" +
						 ", @ssUser_Id" +
						 ", @ssRole_Id" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@Tenant_Id", DbType.Int32, heContext.AppInfo.Tenant.Id);
						insertSqlCmd.CreateParameter("@ssUser_Id", DbType.Int32, ssENUser_Role.ssUser_Id);
						insertSqlCmd.CreateParameter("@ssRole_Id", DbType.Int32, ssENUser_Role.ssRole_Id);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateUser_Role", true), typeof(int));
					} else {
						outParamId = ssENUser_Role.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteUser_Role
		/// </summary>

		public static void DeleteUser_Role(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUser_RoleEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENUser_RoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteUser_Role", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetUser_Role
		/// </summary>

		public static void GetUser_Role(HeContext heContext, int inParamId, out RCUser_RoleRecord outParamRecord) {
			outParamRecord = new RCUser_RoleRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUser_RoleEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [USER_ID]" +
					 ", [ROLE_ID]" +
					 " FROM " + ENUser_RoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetUser_Role", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(4, false)
							}
							;
						} else
						throw new DataBaseException(ENUser_RoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetUser_RoleForUpdate
		/// </summary>

		public static void GetUser_RoleForUpdate(HeContext heContext, int inParamId, out RCUser_RoleRecord outParamRecord) {
			outParamRecord = new RCUser_RoleRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUser_RoleEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [USER_ID]" +
					 ", [ROLE_ID]" +
					 "FROM " + ENUser_RoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetUser_RoleForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(4, false)
							}
							;
						} else
						throw new DataBaseException(ENUser_RoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateUser_Role
		/// </summary>

		public static void UpdateUser_Role(HeContext heContext, BitArray usedFields, RCUser_RoleRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUser_RoleEntity.eSpaceId;
				ENUser_RoleEntityRecord ssENUser_Role = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(4, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENUser_RoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[0] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TENANT_ID] = @Tenant_Id"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USER_ID] = @ssUser_Id"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ROLE_ID] = @ssRole_Id"): parameters);
					string whereCondition = " WHERE [ID] = @ssENUser_RolessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[0]) {
						sqlCmd.CreateParameter("@Tenant_Id", DbType.Int32, heContext.AppInfo.Tenant.Id);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssUser_Id", DbType.Int32, ssENUser_Role.ssUser_Id);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssRole_Id", DbType.Int32, ssENUser_Role.ssRole_Id);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[USER_ID] = [USER_ID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENUser_RolessId", DbType.Int32, ssENUser_Role.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateUser_Role", true) <= 0)
					throw new DataBaseException(ENUser_RoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENUser_Role.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("User_Role")]
	public class WORCUser_RoleRecord {
		[XmlIgnore]
		public int varWSTenant_Id;

		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("User_Id")]
		public int varWSUser_Id;

		[System.Xml.Serialization.XmlElement("Role_Id")]
		public int varWSRole_Id;

		public WORCUser_RoleRecord() {
			varWSTenant_Id = (int) 0;
			varWSId = (int) 0;
			varWSUser_Id = (int) 0;
			varWSRole_Id = (int) 0;
		}

		public WORCUser_RoleRecord(ENUser_RoleEntityRecord r) {
			varWSTenant_Id = (int) r.Tenant_Id;
			varWSId = (int) r.ssId;
			varWSUser_Id = (int) r.ssUser_Id;
			varWSRole_Id = (int) r.ssRole_Id;
		}

		public static RLUser_RoleList ToRecordList(WORCUser_RoleRecord[] array) {
			RLUser_RoleList rl = new RLUser_RoleList();
			if (array != null) {
				foreach(WORCUser_RoleRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCUser_RoleRecord[] FromRecordList(RLUser_RoleList rl) {
			WORCUser_RoleRecord[] array = new WORCUser_RoleRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCUser_RoleRecord {
		public static implicit operator WORCUser_RoleRecord(RCUser_RoleRecord r) {
			return new WORCUser_RoleRecord(r.ssENUser_Role);
		}

		public static implicit operator RCUser_RoleRecord(WORCUser_RoleRecord w) {
			RCUser_RoleRecord r = new RCUser_RoleRecord("");
			if (w != null) {
				r.ssENUser_Role = w;
			}
			return r;
		}

	}

	partial struct ENUser_RoleEntityRecord {
		public static implicit operator WORCUser_RoleRecord(ENUser_RoleEntityRecord r) {
			return new WORCUser_RoleRecord(r);
		}

		public static implicit operator ENUser_RoleEntityRecord(WORCUser_RoleRecord w) {
			ENUser_RoleEntityRecord r = new ENUser_RoleEntityRecord("");
			if (w != null) {
				r.Tenant_Id = (int) w.varWSTenant_Id;
				r.ssId = (int) w.varWSId;
				r.ssUser_Id = (int) w.varWSUser_Id;
				r.ssRole_Id = (int) w.varWSRole_Id;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLUser_RoleRecordList {
		public WORCUser_RoleRecord[] Array;


		public WORLUser_RoleRecordList(WORCUser_RoleRecord[] r) {
			if (r == null)
			Array = new WORCUser_RoleRecord[0];
			else
			Array = r;
		}
		public WORLUser_RoleRecordList() {
			Array = new WORCUser_RoleRecord[0];
		}

		public WORLUser_RoleRecordList(RLUser_RoleRecordList rl) {
			rl=(RLUser_RoleRecordList) rl.Duplicate();
			Array = new WORCUser_RoleRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCUser_RoleRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLUser_RoleRecordList {
		public static implicit operator RLUser_RoleRecordList(WORCUser_RoleRecord[] array) {
			RLUser_RoleRecordList rl = new RLUser_RoleRecordList();
			if (array != null) {
				foreach(WORCUser_RoleRecord val in array) {
					rl.Append((RCUser_RoleRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCUser_RoleRecord[](RLUser_RoleRecordList rl) {
			WORCUser_RoleRecord[] array = new WORCUser_RoleRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCUser_RoleRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLUser_RoleRecordList {
		public static implicit operator RLUser_RoleRecordList(WORLUser_RoleRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLUser_RoleRecordList(RLUser_RoleRecordList rl) {
			return new WORLUser_RoleRecordList(rl);
		}
		public static implicit operator WORCUser_RoleRecord[](WORLUser_RoleRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLUser_RoleRecordList(WORCUser_RoleRecord[] array) {
			return new WORLUser_RoleRecordList(array);
		}
	}
}

