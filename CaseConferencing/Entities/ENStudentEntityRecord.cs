/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENStudentEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENStudentEntity.eSpaceId;
	} // ENStudentEntity

	/// <summary>
	/// Entity <code>ENStudentEntityRecord</code> that represents the Service Studio entity
	///  <code>Student</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Student", "C1TKehCVuU++YXdRlCFeSQ", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Student", "")]
	[Serializable()]
	public partial struct ENStudentEntityRecord: ISerializable, ITypedRecord<ENStudentEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*jrmrX_8ij0yq_ahOk1TmUw");
		private static readonly GlobalObjectKey IdForenames = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*g5SD02GiY0qB2VzO6i36zQ");
		private static readonly GlobalObjectKey IdSurname = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*BpyMpnp42U2n2ClUaXrpPw");
		private static readonly GlobalObjectKey IdDateOfBirth = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*lDOF8hgf3km03r_czhp+VA");
		private static readonly GlobalObjectKey IdGender = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*Gf7KHLdZZE60HrIg2p2DAA");
		private static readonly GlobalObjectKey IdMainOfferingCode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*WDjAj9TVnUGqbO2FWXWFOw");
		private static readonly GlobalObjectKey IdMainOfferingName = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*FCcgrXWhG0mO4Ylc93GcPA");
		private static readonly GlobalObjectKey IdStudentPhotoURL = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*_vZKeqHrPU6lXtN9yrESLg");
		private static readonly GlobalObjectKey IdHomeAddress = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*N1K5+R_03UOzmJRTgs4jAg");
		private static readonly GlobalObjectKey IdHomeAddressPostCode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*yICMYXX+lUi_jmL3KLUnnA");
		private static readonly GlobalObjectKey IdCurrentAddress = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*jc62g4_s1UCXt5OyAm9rBg");
		private static readonly GlobalObjectKey IdCurrentAddressPostcode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*pPrzhukgZUu7PoNEN3JQwQ");
		private static readonly GlobalObjectKey IdEmailAddress = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*xn3lLe3d0kiUERvmziHmmg");
		private static readonly GlobalObjectKey IdHomeTelephone = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*j7RmWbLq0kCN4w++LSZ6fQ");
		private static readonly GlobalObjectKey IdMobilePhone = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*rIHBl+rOdEKq1e92HK1HNg");
		private static readonly GlobalObjectKey IdNextOfKinName = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*wzqvrlQSRUWqZ3OwJfR45Q");
		private static readonly GlobalObjectKey IdNextOfKinRelationship = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*wB7Ak9nwW0CdKmucHvtrcg");
		private static readonly GlobalObjectKey IdNextOfKinAddress = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*MI5jY9lWD02XUCvzFzvTVQ");
		private static readonly GlobalObjectKey IdNextOfKinPostcode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*BpF77wOmgUWxzd6cPMMPOA");
		private static readonly GlobalObjectKey IdNextOfKinPhone = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*1_a9SbKUvk6BW7dUJOHy4Q");
		private static readonly GlobalObjectKey IdPersonalTutor = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*ZQinPyLjd0iBD1cMqHV7kw");
		private static readonly GlobalObjectKey IdNextOfKinEmail = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*dd+au_yRv0GMIacT88rDUg");
		private static readonly GlobalObjectKey IdHasCurrentActiveEnrolment = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*_j6UPHNKekahR101P2aeGw");
		private static readonly GlobalObjectKey IdNetworkLogin = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*aXyQaf0j60ynFqxI_tyvIg");
		private static readonly GlobalObjectKey IdNINumber = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*E498nPVpwE6lPeC2KJzYXQ");
		private static readonly GlobalObjectKey IdResidentialStatus = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*yOgsyjdhv0+MKa3lnHZr0g");
		private static readonly GlobalObjectKey IdPreviousSchool = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*V4zMVSxugUubK7lqdEi92w");

		public static void EnsureInitialized() {}

		static ENStudentEntityRecord() {
			ssCaseConferencing.ENStudentEntityRecordTypeFactoryImpl.InitializeFactory();
		}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 50, false, true, false)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(27, true);
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("FORENAMES", 100, false, false, false)]
		[System.Xml.Serialization.XmlElement("Forenames")]
		private string _ssForenames;
		public string ssForenames {
			get {
				return _ssForenames;
			}
			set {
				if ((_ssForenames!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssForenames = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SURNAME", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Surname")]
		private string _ssSurname;
		public string ssSurname {
			get {
				return _ssSurname;
			}
			set {
				if ((_ssSurname!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssSurname = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DATEOFBIRTH", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("DateOfBirth")]
		private DateTime _ssDateOfBirth;
		public DateTime ssDateOfBirth {
			get {
				return _ssDateOfBirth;
			}
			set {
				if ((_ssDateOfBirth!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssDateOfBirth = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GENDER", 6, false, false, false)]
		[System.Xml.Serialization.XmlElement("Gender")]
		private string _ssGender;
		public string ssGender {
			get {
				return _ssGender;
			}
			set {
				if ((_ssGender!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssGender = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MAINOFFERINGCODE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("MainOfferingCode")]
		private string _ssMainOfferingCode;
		public string ssMainOfferingCode {
			get {
				return _ssMainOfferingCode;
			}
			set {
				if ((_ssMainOfferingCode!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssMainOfferingCode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MAINOFFERINGNAME", 200, false, false, false)]
		[System.Xml.Serialization.XmlElement("MainOfferingName")]
		private string _ssMainOfferingName;
		public string ssMainOfferingName {
			get {
				return _ssMainOfferingName;
			}
			set {
				if ((_ssMainOfferingName!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssMainOfferingName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTPHOTOURL", 200, false, false, false)]
		[System.Xml.Serialization.XmlElement("StudentPhotoURL")]
		private string _ssStudentPhotoURL;
		public string ssStudentPhotoURL {
			get {
				return _ssStudentPhotoURL;
			}
			set {
				if ((_ssStudentPhotoURL!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssStudentPhotoURL = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("HOMEADDRESS", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("HomeAddress")]
		private string _ssHomeAddress;
		public string ssHomeAddress {
			get {
				return _ssHomeAddress;
			}
			set {
				if ((_ssHomeAddress!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssHomeAddress = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("HOMEADDRESSPOSTCODE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("HomeAddressPostCode")]
		private string _ssHomeAddressPostCode;
		public string ssHomeAddressPostCode {
			get {
				return _ssHomeAddressPostCode;
			}
			set {
				if ((_ssHomeAddressPostCode!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssHomeAddressPostCode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CURRENTADDRESS", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("CurrentAddress")]
		private string _ssCurrentAddress;
		public string ssCurrentAddress {
			get {
				return _ssCurrentAddress;
			}
			set {
				if ((_ssCurrentAddress!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssCurrentAddress = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CURRENTADDRESSPOSTCODE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CurrentAddressPostcode")]
		private string _ssCurrentAddressPostcode;
		public string ssCurrentAddressPostcode {
			get {
				return _ssCurrentAddressPostcode;
			}
			set {
				if ((_ssCurrentAddressPostcode!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssCurrentAddressPostcode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EMAILADDRESS", 250, false, false, false)]
		[System.Xml.Serialization.XmlElement("EmailAddress")]
		private string _ssEmailAddress;
		public string ssEmailAddress {
			get {
				return _ssEmailAddress;
			}
			set {
				if ((_ssEmailAddress!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssEmailAddress = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("HOMETELEPHONE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("HomeTelephone")]
		private string _ssHomeTelephone;
		public string ssHomeTelephone {
			get {
				return _ssHomeTelephone;
			}
			set {
				if ((_ssHomeTelephone!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssHomeTelephone = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MOBILEPHONE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("MobilePhone")]
		private string _ssMobilePhone;
		public string ssMobilePhone {
			get {
				return _ssMobilePhone;
			}
			set {
				if ((_ssMobilePhone!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssMobilePhone = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NEXTOFKINNAME", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("NextOfKinName")]
		private string _ssNextOfKinName;
		public string ssNextOfKinName {
			get {
				return _ssNextOfKinName;
			}
			set {
				if ((_ssNextOfKinName!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssNextOfKinName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NEXTOFKINRELATIONSHIP", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("NextOfKinRelationship")]
		private string _ssNextOfKinRelationship;
		public string ssNextOfKinRelationship {
			get {
				return _ssNextOfKinRelationship;
			}
			set {
				if ((_ssNextOfKinRelationship!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssNextOfKinRelationship = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NEXTOFKINADDRESS", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("NextOfKinAddress")]
		private string _ssNextOfKinAddress;
		public string ssNextOfKinAddress {
			get {
				return _ssNextOfKinAddress;
			}
			set {
				if ((_ssNextOfKinAddress!=value) || OptimizedAttributes[17]) {
					ChangedAttributes[17] = true;
					_ssNextOfKinAddress = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NEXTOFKINPOSTCODE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("NextOfKinPostcode")]
		private string _ssNextOfKinPostcode;
		public string ssNextOfKinPostcode {
			get {
				return _ssNextOfKinPostcode;
			}
			set {
				if ((_ssNextOfKinPostcode!=value) || OptimizedAttributes[18]) {
					ChangedAttributes[18] = true;
					_ssNextOfKinPostcode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NEXTOFKINPHONE", 100, false, false, false)]
		[System.Xml.Serialization.XmlElement("NextOfKinPhone")]
		private string _ssNextOfKinPhone;
		public string ssNextOfKinPhone {
			get {
				return _ssNextOfKinPhone;
			}
			set {
				if ((_ssNextOfKinPhone!=value) || OptimizedAttributes[19]) {
					ChangedAttributes[19] = true;
					_ssNextOfKinPhone = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PERSONALTUTOR", 250, false, false, false)]
		[System.Xml.Serialization.XmlElement("PersonalTutor")]
		private string _ssPersonalTutor;
		public string ssPersonalTutor {
			get {
				return _ssPersonalTutor;
			}
			set {
				if ((_ssPersonalTutor!=value) || OptimizedAttributes[20]) {
					ChangedAttributes[20] = true;
					_ssPersonalTutor = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NEXTOFKINEMAIL", 250, false, false, false)]
		[System.Xml.Serialization.XmlElement("NextOfKinEmail")]
		private string _ssNextOfKinEmail;
		public string ssNextOfKinEmail {
			get {
				return _ssNextOfKinEmail;
			}
			set {
				if ((_ssNextOfKinEmail!=value) || OptimizedAttributes[21]) {
					ChangedAttributes[21] = true;
					_ssNextOfKinEmail = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("HASCURRENTACTIVEENROLMENT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("HasCurrentActiveEnrolment")]
		private bool _ssHasCurrentActiveEnrolment;
		public bool ssHasCurrentActiveEnrolment {
			get {
				return _ssHasCurrentActiveEnrolment;
			}
			set {
				if ((_ssHasCurrentActiveEnrolment!=value) || OptimizedAttributes[22]) {
					ChangedAttributes[22] = true;
					_ssHasCurrentActiveEnrolment = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NETWORKLOGIN", 100, false, false, false)]
		[System.Xml.Serialization.XmlElement("NetworkLogin")]
		private string _ssNetworkLogin;
		public string ssNetworkLogin {
			get {
				return _ssNetworkLogin;
			}
			set {
				if ((_ssNetworkLogin!=value) || OptimizedAttributes[23]) {
					ChangedAttributes[23] = true;
					_ssNetworkLogin = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NINUMBER", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("NINumber")]
		private string _ssNINumber;
		public string ssNINumber {
			get {
				return _ssNINumber;
			}
			set {
				if ((_ssNINumber!=value) || OptimizedAttributes[24]) {
					ChangedAttributes[24] = true;
					_ssNINumber = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RESIDENTIALSTATUS", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("ResidentialStatus")]
		private string _ssResidentialStatus;
		public string ssResidentialStatus {
			get {
				return _ssResidentialStatus;
			}
			set {
				if ((_ssResidentialStatus!=value) || OptimizedAttributes[25]) {
					ChangedAttributes[25] = true;
					_ssResidentialStatus = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PREVIOUSSCHOOL", 100, false, false, false)]
		[System.Xml.Serialization.XmlElement("PreviousSchool")]
		private string _ssPreviousSchool;
		public string ssPreviousSchool {
			get {
				return _ssPreviousSchool;
			}
			set {
				if ((_ssPreviousSchool!=value) || OptimizedAttributes[26]) {
					ChangedAttributes[26] = true;
					_ssPreviousSchool = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(27, true);
			OptimizedAttributes = new BitArray(27, false);
			_ssStudentReference = "";
			_ssForenames = "";
			_ssSurname = "";
			_ssDateOfBirth = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssGender = "";
			_ssMainOfferingCode = "";
			_ssMainOfferingName = "";
			_ssStudentPhotoURL = "";
			_ssHomeAddress = "";
			_ssHomeAddressPostCode = "";
			_ssCurrentAddress = "";
			_ssCurrentAddressPostcode = "";
			_ssEmailAddress = "";
			_ssHomeTelephone = "";
			_ssMobilePhone = "";
			_ssNextOfKinName = "";
			_ssNextOfKinRelationship = "";
			_ssNextOfKinAddress = "";
			_ssNextOfKinPostcode = "";
			_ssNextOfKinPhone = "";
			_ssPersonalTutor = "";
			_ssNextOfKinEmail = "";
			_ssHasCurrentActiveEnrolment = false;
			_ssNetworkLogin = "";
			_ssNINumber = "";
			_ssResidentialStatus = "";
			_ssPreviousSchool = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentReference = r.ReadText(index++, "Student.StudentReference", "");
			ssForenames = r.ReadText(index++, "Student.Forenames", "");
			ssSurname = r.ReadText(index++, "Student.Surname", "");
			ssDateOfBirth = r.ReadDate(index++, "Student.DateOfBirth", new DateTime(1900, 1, 1, 0, 0, 0));
			ssGender = r.ReadText(index++, "Student.Gender", "");
			ssMainOfferingCode = r.ReadText(index++, "Student.MainOfferingCode", "");
			ssMainOfferingName = r.ReadText(index++, "Student.MainOfferingName", "");
			ssStudentPhotoURL = r.ReadText(index++, "Student.StudentPhotoURL", "");
			ssHomeAddress = r.ReadText(index++, "Student.HomeAddress", "");
			ssHomeAddressPostCode = r.ReadText(index++, "Student.HomeAddressPostCode", "");
			ssCurrentAddress = r.ReadText(index++, "Student.CurrentAddress", "");
			ssCurrentAddressPostcode = r.ReadText(index++, "Student.CurrentAddressPostcode", "");
			ssEmailAddress = r.ReadEmail(index++, "Student.EmailAddress", "");
			ssHomeTelephone = r.ReadText(index++, "Student.HomeTelephone", "");
			ssMobilePhone = r.ReadText(index++, "Student.MobilePhone", "");
			ssNextOfKinName = r.ReadText(index++, "Student.NextOfKinName", "");
			ssNextOfKinRelationship = r.ReadText(index++, "Student.NextOfKinRelationship", "");
			ssNextOfKinAddress = r.ReadText(index++, "Student.NextOfKinAddress", "");
			ssNextOfKinPostcode = r.ReadText(index++, "Student.NextOfKinPostcode", "");
			ssNextOfKinPhone = r.ReadText(index++, "Student.NextOfKinPhone", "");
			ssPersonalTutor = r.ReadText(index++, "Student.PersonalTutor", "");
			ssNextOfKinEmail = r.ReadEmail(index++, "Student.NextOfKinEmail", "");
			ssHasCurrentActiveEnrolment = r.ReadBoolean(index++, "Student.HasCurrentActiveEnrolment", false);
			ssNetworkLogin = r.ReadText(index++, "Student.NetworkLogin", "");
			ssNINumber = r.ReadText(index++, "Student.NINumber", "");
			ssResidentialStatus = r.ReadText(index++, "Student.ResidentialStatus", "");
			ssPreviousSchool = r.ReadText(index++, "Student.PreviousSchool", "");
			ChangedAttributes = new BitArray(27, false);
			OptimizedAttributes = new BitArray(27, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentEntityRecord a, ENStudentEntityRecord b) {
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssForenames != b.ssForenames) return false;
			if (a.ssSurname != b.ssSurname) return false;
			if (a.ssDateOfBirth != b.ssDateOfBirth) return false;
			if (a.ssGender != b.ssGender) return false;
			if (a.ssMainOfferingCode != b.ssMainOfferingCode) return false;
			if (a.ssMainOfferingName != b.ssMainOfferingName) return false;
			if (a.ssStudentPhotoURL != b.ssStudentPhotoURL) return false;
			if (a.ssHomeAddress != b.ssHomeAddress) return false;
			if (a.ssHomeAddressPostCode != b.ssHomeAddressPostCode) return false;
			if (a.ssCurrentAddress != b.ssCurrentAddress) return false;
			if (a.ssCurrentAddressPostcode != b.ssCurrentAddressPostcode) return false;
			if (a.ssEmailAddress != b.ssEmailAddress) return false;
			if (a.ssHomeTelephone != b.ssHomeTelephone) return false;
			if (a.ssMobilePhone != b.ssMobilePhone) return false;
			if (a.ssNextOfKinName != b.ssNextOfKinName) return false;
			if (a.ssNextOfKinRelationship != b.ssNextOfKinRelationship) return false;
			if (a.ssNextOfKinAddress != b.ssNextOfKinAddress) return false;
			if (a.ssNextOfKinPostcode != b.ssNextOfKinPostcode) return false;
			if (a.ssNextOfKinPhone != b.ssNextOfKinPhone) return false;
			if (a.ssPersonalTutor != b.ssPersonalTutor) return false;
			if (a.ssNextOfKinEmail != b.ssNextOfKinEmail) return false;
			if (a.ssHasCurrentActiveEnrolment != b.ssHasCurrentActiveEnrolment) return false;
			if (a.ssNetworkLogin != b.ssNetworkLogin) return false;
			if (a.ssNINumber != b.ssNINumber) return false;
			if (a.ssResidentialStatus != b.ssResidentialStatus) return false;
			if (a.ssPreviousSchool != b.ssPreviousSchool) return false;
			return true;
		}

		public static bool operator != (ENStudentEntityRecord a, ENStudentEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentEntityRecord)) return false;
			return (this == (ENStudentEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssForenames.GetHashCode()
				^ ssSurname.GetHashCode()
				^ ssDateOfBirth.GetHashCode()
				^ ssGender.GetHashCode()
				^ ssMainOfferingCode.GetHashCode()
				^ ssMainOfferingName.GetHashCode()
				^ ssStudentPhotoURL.GetHashCode()
				^ ssHomeAddress.GetHashCode()
				^ ssHomeAddressPostCode.GetHashCode()
				^ ssCurrentAddress.GetHashCode()
				^ ssCurrentAddressPostcode.GetHashCode()
				^ ssEmailAddress.GetHashCode()
				^ ssHomeTelephone.GetHashCode()
				^ ssMobilePhone.GetHashCode()
				^ ssNextOfKinName.GetHashCode()
				^ ssNextOfKinRelationship.GetHashCode()
				^ ssNextOfKinAddress.GetHashCode()
				^ ssNextOfKinPostcode.GetHashCode()
				^ ssNextOfKinPhone.GetHashCode()
				^ ssPersonalTutor.GetHashCode()
				^ ssNextOfKinEmail.GetHashCode()
				^ ssHasCurrentActiveEnrolment.GetHashCode()
				^ ssNetworkLogin.GetHashCode()
				^ ssNINumber.GetHashCode()
				^ ssResidentialStatus.GetHashCode()
				^ ssPreviousSchool.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(27, true);
			OptimizedAttributes = new BitArray(27, false);
			_ssStudentReference = "";
			_ssForenames = "";
			_ssSurname = "";
			_ssDateOfBirth = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssGender = "";
			_ssMainOfferingCode = "";
			_ssMainOfferingName = "";
			_ssStudentPhotoURL = "";
			_ssHomeAddress = "";
			_ssHomeAddressPostCode = "";
			_ssCurrentAddress = "";
			_ssCurrentAddressPostcode = "";
			_ssEmailAddress = "";
			_ssHomeTelephone = "";
			_ssMobilePhone = "";
			_ssNextOfKinName = "";
			_ssNextOfKinRelationship = "";
			_ssNextOfKinAddress = "";
			_ssNextOfKinPostcode = "";
			_ssNextOfKinPhone = "";
			_ssPersonalTutor = "";
			_ssNextOfKinEmail = "";
			_ssHasCurrentActiveEnrolment = false;
			_ssNetworkLogin = "";
			_ssNINumber = "";
			_ssResidentialStatus = "";
			_ssPreviousSchool = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssForenames = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssSurname = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssDateOfBirth = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssGender = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssMainOfferingCode = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssMainOfferingName = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssStudentPhotoURL = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssHomeAddress = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssHomeAddressPostCode = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssCurrentAddress = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssCurrentAddressPostcode = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssEmailAddress = (string) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssHomeTelephone = (string) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssMobilePhone = (string) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssNextOfKinName = (string) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssNextOfKinRelationship = (string) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			_ssNextOfKinAddress = (string) info.GetValue(fields[17] .Name, fields[17] .FieldType);
			if (fields[18] .FieldType.IsSerializable)
			_ssNextOfKinPostcode = (string) info.GetValue(fields[18] .Name, fields[18] .FieldType);
			if (fields[19] .FieldType.IsSerializable)
			_ssNextOfKinPhone = (string) info.GetValue(fields[19] .Name, fields[19] .FieldType);
			if (fields[20] .FieldType.IsSerializable)
			_ssPersonalTutor = (string) info.GetValue(fields[20] .Name, fields[20] .FieldType);
			if (fields[21] .FieldType.IsSerializable)
			_ssNextOfKinEmail = (string) info.GetValue(fields[21] .Name, fields[21] .FieldType);
			if (fields[22] .FieldType.IsSerializable)
			_ssHasCurrentActiveEnrolment = (bool) info.GetValue(fields[22] .Name, fields[22] .FieldType);
			if (fields[23] .FieldType.IsSerializable)
			_ssNetworkLogin = (string) info.GetValue(fields[23] .Name, fields[23] .FieldType);
			if (fields[24] .FieldType.IsSerializable)
			_ssNINumber = (string) info.GetValue(fields[24] .Name, fields[24] .FieldType);
			if (fields[25] .FieldType.IsSerializable)
			_ssResidentialStatus = (string) info.GetValue(fields[25] .Name, fields[25] .FieldType);
			if (fields[26] .FieldType.IsSerializable)
			_ssPreviousSchool = (string) info.GetValue(fields[26] .Name, fields[26] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentEntityRecord Duplicate() {
			ENStudentEntityRecord t;
			t._ssStudentReference = this._ssStudentReference;
			t._ssForenames = this._ssForenames;
			t._ssSurname = this._ssSurname;
			t._ssDateOfBirth = this._ssDateOfBirth;
			t._ssGender = this._ssGender;
			t._ssMainOfferingCode = this._ssMainOfferingCode;
			t._ssMainOfferingName = this._ssMainOfferingName;
			t._ssStudentPhotoURL = this._ssStudentPhotoURL;
			t._ssHomeAddress = this._ssHomeAddress;
			t._ssHomeAddressPostCode = this._ssHomeAddressPostCode;
			t._ssCurrentAddress = this._ssCurrentAddress;
			t._ssCurrentAddressPostcode = this._ssCurrentAddressPostcode;
			t._ssEmailAddress = this._ssEmailAddress;
			t._ssHomeTelephone = this._ssHomeTelephone;
			t._ssMobilePhone = this._ssMobilePhone;
			t._ssNextOfKinName = this._ssNextOfKinName;
			t._ssNextOfKinRelationship = this._ssNextOfKinRelationship;
			t._ssNextOfKinAddress = this._ssNextOfKinAddress;
			t._ssNextOfKinPostcode = this._ssNextOfKinPostcode;
			t._ssNextOfKinPhone = this._ssNextOfKinPhone;
			t._ssPersonalTutor = this._ssPersonalTutor;
			t._ssNextOfKinEmail = this._ssNextOfKinEmail;
			t._ssHasCurrentActiveEnrolment = this._ssHasCurrentActiveEnrolment;
			t._ssNetworkLogin = this._ssNetworkLogin;
			t._ssNINumber = this._ssNINumber;
			t._ssResidentialStatus = this._ssResidentialStatus;
			t._ssPreviousSchool = this._ssPreviousSchool;
			t.ChangedAttributes = new BitArray(27);
			t.OptimizedAttributes = new BitArray(27);
			for (int i = 0; i < 27; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Forenames")) VarValue.AppendAttribute(recordElem, "Forenames", ssForenames, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Forenames");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Surname")) VarValue.AppendAttribute(recordElem, "Surname", ssSurname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Surname");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DateOfBirth")) VarValue.AppendAttribute(recordElem, "DateOfBirth", ssDateOfBirth, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "DateOfBirth");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Gender")) VarValue.AppendAttribute(recordElem, "Gender", ssGender, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Gender");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MainOfferingCode")) VarValue.AppendAttribute(recordElem, "MainOfferingCode", ssMainOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MainOfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MainOfferingName")) VarValue.AppendAttribute(recordElem, "MainOfferingName", ssMainOfferingName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MainOfferingName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentPhotoURL")) VarValue.AppendAttribute(recordElem, "StudentPhotoURL", ssStudentPhotoURL, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentPhotoURL");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HomeAddress")) VarValue.AppendAttribute(recordElem, "HomeAddress", ssHomeAddress, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "HomeAddress");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HomeAddressPostCode")) VarValue.AppendAttribute(recordElem, "HomeAddressPostCode", ssHomeAddressPostCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "HomeAddressPostCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurrentAddress")) VarValue.AppendAttribute(recordElem, "CurrentAddress", ssCurrentAddress, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CurrentAddress");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurrentAddressPostcode")) VarValue.AppendAttribute(recordElem, "CurrentAddressPostcode", ssCurrentAddressPostcode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CurrentAddressPostcode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EmailAddress")) VarValue.AppendAttribute(recordElem, "EmailAddress", ssEmailAddress, detailLevel, TypeKind.Email); else VarValue.AppendOptimizedAttribute(recordElem, "EmailAddress");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HomeTelephone")) VarValue.AppendAttribute(recordElem, "HomeTelephone", ssHomeTelephone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "HomeTelephone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MobilePhone")) VarValue.AppendAttribute(recordElem, "MobilePhone", ssMobilePhone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MobilePhone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NextOfKinName")) VarValue.AppendAttribute(recordElem, "NextOfKinName", ssNextOfKinName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NextOfKinName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NextOfKinRelationship")) VarValue.AppendAttribute(recordElem, "NextOfKinRelationship", ssNextOfKinRelationship, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NextOfKinRelationship");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NextOfKinAddress")) VarValue.AppendAttribute(recordElem, "NextOfKinAddress", ssNextOfKinAddress, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NextOfKinAddress");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NextOfKinPostcode")) VarValue.AppendAttribute(recordElem, "NextOfKinPostcode", ssNextOfKinPostcode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NextOfKinPostcode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NextOfKinPhone")) VarValue.AppendAttribute(recordElem, "NextOfKinPhone", ssNextOfKinPhone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NextOfKinPhone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PersonalTutor")) VarValue.AppendAttribute(recordElem, "PersonalTutor", ssPersonalTutor, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PersonalTutor");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NextOfKinEmail")) VarValue.AppendAttribute(recordElem, "NextOfKinEmail", ssNextOfKinEmail, detailLevel, TypeKind.Email); else VarValue.AppendOptimizedAttribute(recordElem, "NextOfKinEmail");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HasCurrentActiveEnrolment")) VarValue.AppendAttribute(recordElem, "HasCurrentActiveEnrolment", ssHasCurrentActiveEnrolment, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "HasCurrentActiveEnrolment");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NetworkLogin")) VarValue.AppendAttribute(recordElem, "NetworkLogin", ssNetworkLogin, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NetworkLogin");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NINumber")) VarValue.AppendAttribute(recordElem, "NINumber", ssNINumber, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NINumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ResidentialStatus")) VarValue.AppendAttribute(recordElem, "ResidentialStatus", ssResidentialStatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ResidentialStatus");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PreviousSchool")) VarValue.AppendAttribute(recordElem, "PreviousSchool", ssPreviousSchool, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PreviousSchool");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "forenames") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Forenames")) variable.Value = ssForenames; else variable.Optimized = true;
			} else if (head == "surname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Surname")) variable.Value = ssSurname; else variable.Optimized = true;
			} else if (head == "dateofbirth") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DateOfBirth")) variable.Value = ssDateOfBirth; else variable.Optimized = true;
			} else if (head == "gender") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Gender")) variable.Value = ssGender; else variable.Optimized = true;
			} else if (head == "mainofferingcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MainOfferingCode")) variable.Value = ssMainOfferingCode; else variable.Optimized = true;
			} else if (head == "mainofferingname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MainOfferingName")) variable.Value = ssMainOfferingName; else variable.Optimized = true;
			} else if (head == "studentphotourl") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentPhotoURL")) variable.Value = ssStudentPhotoURL; else variable.Optimized = true;
			} else if (head == "homeaddress") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HomeAddress")) variable.Value = ssHomeAddress; else variable.Optimized = true;
			} else if (head == "homeaddresspostcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HomeAddressPostCode")) variable.Value = ssHomeAddressPostCode; else variable.Optimized = true;
			} else if (head == "currentaddress") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurrentAddress")) variable.Value = ssCurrentAddress; else variable.Optimized = true;
			} else if (head == "currentaddresspostcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurrentAddressPostcode")) variable.Value = ssCurrentAddressPostcode; else variable.Optimized = true;
			} else if (head == "emailaddress") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EmailAddress")) variable.Value = ssEmailAddress; else variable.Optimized = true;
			} else if (head == "hometelephone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HomeTelephone")) variable.Value = ssHomeTelephone; else variable.Optimized = true;
			} else if (head == "mobilephone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MobilePhone")) variable.Value = ssMobilePhone; else variable.Optimized = true;
			} else if (head == "nextofkinname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NextOfKinName")) variable.Value = ssNextOfKinName; else variable.Optimized = true;
			} else if (head == "nextofkinrelationship") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NextOfKinRelationship")) variable.Value = ssNextOfKinRelationship; else variable.Optimized = true;
			} else if (head == "nextofkinaddress") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NextOfKinAddress")) variable.Value = ssNextOfKinAddress; else variable.Optimized = true;
			} else if (head == "nextofkinpostcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NextOfKinPostcode")) variable.Value = ssNextOfKinPostcode; else variable.Optimized = true;
			} else if (head == "nextofkinphone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NextOfKinPhone")) variable.Value = ssNextOfKinPhone; else variable.Optimized = true;
			} else if (head == "personaltutor") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PersonalTutor")) variable.Value = ssPersonalTutor; else variable.Optimized = true;
			} else if (head == "nextofkinemail") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NextOfKinEmail")) variable.Value = ssNextOfKinEmail; else variable.Optimized = true;
			} else if (head == "hascurrentactiveenrolment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HasCurrentActiveEnrolment")) variable.Value = ssHasCurrentActiveEnrolment; else variable.Optimized = true;
			} else if (head == "networklogin") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NetworkLogin")) variable.Value = ssNetworkLogin; else variable.Optimized = true;
			} else if (head == "ninumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NINumber")) variable.Value = ssNINumber; else variable.Optimized = true;
			} else if (head == "residentialstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ResidentialStatus")) variable.Value = ssResidentialStatus; else variable.Optimized = true;
			} else if (head == "previousschool") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PreviousSchool")) variable.Value = ssPreviousSchool; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdForenames)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdSurname)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdDateOfBirth)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdGender)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdMainOfferingCode)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdMainOfferingName)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdStudentPhotoURL)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdHomeAddress)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdHomeAddressPostCode)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdCurrentAddress)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdCurrentAddressPostcode)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdEmailAddress)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdHomeTelephone)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdMobilePhone)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdNextOfKinName)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdNextOfKinRelationship)) {
				return ChangedAttributes[16];
			} else if (key.Equals(IdNextOfKinAddress)) {
				return ChangedAttributes[17];
			} else if (key.Equals(IdNextOfKinPostcode)) {
				return ChangedAttributes[18];
			} else if (key.Equals(IdNextOfKinPhone)) {
				return ChangedAttributes[19];
			} else if (key.Equals(IdPersonalTutor)) {
				return ChangedAttributes[20];
			} else if (key.Equals(IdNextOfKinEmail)) {
				return ChangedAttributes[21];
			} else if (key.Equals(IdHasCurrentActiveEnrolment)) {
				return ChangedAttributes[22];
			} else if (key.Equals(IdNetworkLogin)) {
				return ChangedAttributes[23];
			} else if (key.Equals(IdNINumber)) {
				return ChangedAttributes[24];
			} else if (key.Equals(IdResidentialStatus)) {
				return ChangedAttributes[25];
			} else if (key.Equals(IdPreviousSchool)) {
				return ChangedAttributes[26];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdForenames)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdSurname)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdDateOfBirth)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdGender)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdMainOfferingCode)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdMainOfferingName)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdStudentPhotoURL)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdHomeAddress)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdHomeAddressPostCode)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdCurrentAddress)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdCurrentAddressPostcode)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdEmailAddress)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdHomeTelephone)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdMobilePhone)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdNextOfKinName)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdNextOfKinRelationship)) {
				return OptimizedAttributes[16];
			} else if (key.Equals(IdNextOfKinAddress)) {
				return OptimizedAttributes[17];
			} else if (key.Equals(IdNextOfKinPostcode)) {
				return OptimizedAttributes[18];
			} else if (key.Equals(IdNextOfKinPhone)) {
				return OptimizedAttributes[19];
			} else if (key.Equals(IdPersonalTutor)) {
				return OptimizedAttributes[20];
			} else if (key.Equals(IdNextOfKinEmail)) {
				return OptimizedAttributes[21];
			} else if (key.Equals(IdHasCurrentActiveEnrolment)) {
				return OptimizedAttributes[22];
			} else if (key.Equals(IdNetworkLogin)) {
				return OptimizedAttributes[23];
			} else if (key.Equals(IdNINumber)) {
				return OptimizedAttributes[24];
			} else if (key.Equals(IdResidentialStatus)) {
				return OptimizedAttributes[25];
			} else if (key.Equals(IdPreviousSchool)) {
				return OptimizedAttributes[26];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdForenames) {
				return ssForenames;
			} else if (key == IdSurname) {
				return ssSurname;
			} else if (key == IdDateOfBirth) {
				return ssDateOfBirth;
			} else if (key == IdGender) {
				return ssGender;
			} else if (key == IdMainOfferingCode) {
				return ssMainOfferingCode;
			} else if (key == IdMainOfferingName) {
				return ssMainOfferingName;
			} else if (key == IdStudentPhotoURL) {
				return ssStudentPhotoURL;
			} else if (key == IdHomeAddress) {
				return ssHomeAddress;
			} else if (key == IdHomeAddressPostCode) {
				return ssHomeAddressPostCode;
			} else if (key == IdCurrentAddress) {
				return ssCurrentAddress;
			} else if (key == IdCurrentAddressPostcode) {
				return ssCurrentAddressPostcode;
			} else if (key == IdEmailAddress) {
				return ssEmailAddress;
			} else if (key == IdHomeTelephone) {
				return ssHomeTelephone;
			} else if (key == IdMobilePhone) {
				return ssMobilePhone;
			} else if (key == IdNextOfKinName) {
				return ssNextOfKinName;
			} else if (key == IdNextOfKinRelationship) {
				return ssNextOfKinRelationship;
			} else if (key == IdNextOfKinAddress) {
				return ssNextOfKinAddress;
			} else if (key == IdNextOfKinPostcode) {
				return ssNextOfKinPostcode;
			} else if (key == IdNextOfKinPhone) {
				return ssNextOfKinPhone;
			} else if (key == IdPersonalTutor) {
				return ssPersonalTutor;
			} else if (key == IdNextOfKinEmail) {
				return ssNextOfKinEmail;
			} else if (key == IdHasCurrentActiveEnrolment) {
				return ssHasCurrentActiveEnrolment;
			} else if (key == IdNetworkLogin) {
				return ssNetworkLogin;
			} else if (key == IdNINumber) {
				return ssNINumber;
			} else if (key == IdResidentialStatus) {
				return ssResidentialStatus;
			} else if (key == IdPreviousSchool) {
				return ssPreviousSchool;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(27);
			OptimizedAttributes = new BitArray(27);
			if (other == null) return;
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdStudentReference);
			ssForenames = (string) other.AttributeGet(IdForenames);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdForenames);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdForenames);
			ssSurname = (string) other.AttributeGet(IdSurname);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdSurname);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdSurname);
			ssDateOfBirth = (DateTime) other.AttributeGet(IdDateOfBirth);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdDateOfBirth);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdDateOfBirth);
			ssGender = (string) other.AttributeGet(IdGender);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdGender);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdGender);
			ssMainOfferingCode = (string) other.AttributeGet(IdMainOfferingCode);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdMainOfferingCode);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdMainOfferingCode);
			ssMainOfferingName = (string) other.AttributeGet(IdMainOfferingName);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdMainOfferingName);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdMainOfferingName);
			ssStudentPhotoURL = (string) other.AttributeGet(IdStudentPhotoURL);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdStudentPhotoURL);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdStudentPhotoURL);
			ssHomeAddress = (string) other.AttributeGet(IdHomeAddress);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdHomeAddress);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdHomeAddress);
			ssHomeAddressPostCode = (string) other.AttributeGet(IdHomeAddressPostCode);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdHomeAddressPostCode);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdHomeAddressPostCode);
			ssCurrentAddress = (string) other.AttributeGet(IdCurrentAddress);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdCurrentAddress);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdCurrentAddress);
			ssCurrentAddressPostcode = (string) other.AttributeGet(IdCurrentAddressPostcode);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdCurrentAddressPostcode);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdCurrentAddressPostcode);
			ssEmailAddress = (string) other.AttributeGet(IdEmailAddress);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdEmailAddress);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdEmailAddress);
			ssHomeTelephone = (string) other.AttributeGet(IdHomeTelephone);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdHomeTelephone);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdHomeTelephone);
			ssMobilePhone = (string) other.AttributeGet(IdMobilePhone);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdMobilePhone);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdMobilePhone);
			ssNextOfKinName = (string) other.AttributeGet(IdNextOfKinName);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdNextOfKinName);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdNextOfKinName);
			ssNextOfKinRelationship = (string) other.AttributeGet(IdNextOfKinRelationship);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdNextOfKinRelationship);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdNextOfKinRelationship);
			ssNextOfKinAddress = (string) other.AttributeGet(IdNextOfKinAddress);
			ChangedAttributes[17] = other.ChangedAttributeGet(IdNextOfKinAddress);
			OptimizedAttributes[17] = other.OptimizedAttributeGet(IdNextOfKinAddress);
			ssNextOfKinPostcode = (string) other.AttributeGet(IdNextOfKinPostcode);
			ChangedAttributes[18] = other.ChangedAttributeGet(IdNextOfKinPostcode);
			OptimizedAttributes[18] = other.OptimizedAttributeGet(IdNextOfKinPostcode);
			ssNextOfKinPhone = (string) other.AttributeGet(IdNextOfKinPhone);
			ChangedAttributes[19] = other.ChangedAttributeGet(IdNextOfKinPhone);
			OptimizedAttributes[19] = other.OptimizedAttributeGet(IdNextOfKinPhone);
			ssPersonalTutor = (string) other.AttributeGet(IdPersonalTutor);
			ChangedAttributes[20] = other.ChangedAttributeGet(IdPersonalTutor);
			OptimizedAttributes[20] = other.OptimizedAttributeGet(IdPersonalTutor);
			ssNextOfKinEmail = (string) other.AttributeGet(IdNextOfKinEmail);
			ChangedAttributes[21] = other.ChangedAttributeGet(IdNextOfKinEmail);
			OptimizedAttributes[21] = other.OptimizedAttributeGet(IdNextOfKinEmail);
			ssHasCurrentActiveEnrolment = (bool) other.AttributeGet(IdHasCurrentActiveEnrolment);
			ChangedAttributes[22] = other.ChangedAttributeGet(IdHasCurrentActiveEnrolment);
			OptimizedAttributes[22] = other.OptimizedAttributeGet(IdHasCurrentActiveEnrolment);
			ssNetworkLogin = (string) other.AttributeGet(IdNetworkLogin);
			ChangedAttributes[23] = other.ChangedAttributeGet(IdNetworkLogin);
			OptimizedAttributes[23] = other.OptimizedAttributeGet(IdNetworkLogin);
			ssNINumber = (string) other.AttributeGet(IdNINumber);
			ChangedAttributes[24] = other.ChangedAttributeGet(IdNINumber);
			OptimizedAttributes[24] = other.OptimizedAttributeGet(IdNINumber);
			ssResidentialStatus = (string) other.AttributeGet(IdResidentialStatus);
			ChangedAttributes[25] = other.ChangedAttributeGet(IdResidentialStatus);
			OptimizedAttributes[25] = other.OptimizedAttributeGet(IdResidentialStatus);
			ssPreviousSchool = (string) other.AttributeGet(IdPreviousSchool);
			ChangedAttributes[26] = other.ChangedAttributeGet(IdPreviousSchool);
			OptimizedAttributes[26] = other.OptimizedAttributeGet(IdPreviousSchool);
		}
	} // ENStudentEntityRecord
	/// <summary>
	/// Structure <code>RCStudentRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentRecord: ISerializable, ITypedRecord<RCStudentRecord> {
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*poRKkXwJqaILf+WDNWx+bw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student")]
		public ENStudentEntityRecord ssENStudent;


		public static implicit operator ENStudentEntityRecord(RCStudentRecord r) {
			return r.ssENStudent;
		}

		public static implicit operator RCStudentRecord(ENStudentEntityRecord r) {
			RCStudentRecord res = new RCStudentRecord(null);
			res.ssENStudent = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudent.ChangedAttributes = value;
			}
			get {
				return ssENStudent.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(27, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudent.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudent.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentRecord a, RCStudentRecord b) {
			if (a.ssENStudent != b.ssENStudent) return false;
			return true;
		}

		public static bool operator != (RCStudentRecord a, RCStudentRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentRecord)) return false;
			return (this == (RCStudentRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent = new ENStudentEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent = (ENStudentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent.InternalRecursiveSave();
		}


		public RCStudentRecord Duplicate() {
			RCStudentRecord t;
			t.ssENStudent = (ENStudentEntityRecord) this.ssENStudent.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent.ToXml(this, recordElem, "Student", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssENStudent; else variable.Optimized = true;
				variable.SetFieldName("student");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudent.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudent.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent) {
				return ssENStudent;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent.FillFromOther((IRecord) other.AttributeGet(IdStudent));
		}
	} // RCStudentRecord
	/// <summary>
	/// RecordList type <code>RLStudentRecordList</code> that represents a record list of
	///  <code>Student</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentRecordList: GenericRecordList<RCStudentRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentRecord GetElementDefaultValue() {
			return new RCStudentRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentRecordList recordlist, Func<RCStudentRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentRecordList ToList<T>(T[] array, Func <T, RCStudentRecord> converter) {
			RLStudentRecordList result = new RLStudentRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(27, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentRecord> NewList() {
			return new RLStudentRecordList();
		}


	} // RLStudentRecordList

	/// <summary>
	/// RecordList type <code>RLStudentList</code> that represents a record list of <code>Text, Text, Text,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text
	/// , Text, Text, Text, Text, Date, Email, Email, Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentList: GenericRecordList<ENStudentEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentEntityRecord GetElementDefaultValue() {
			return new ENStudentEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentList recordlist, Func<ENStudentEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentList ToList<T>(T[] array, Func <T, ENStudentEntityRecord> converter) {
			RLStudentList result = new RLStudentList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentEntityRecord> NewList() {
			return new RLStudentList();
		}


	} // RLStudentList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudent
		/// </summary>

		public static void CreateStudent(HeContext heContext, RCStudentRecord inParamSource, out string outParamId) {
			outParamId = "";

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentEntity.eSpaceId;
				ENStudentEntityRecord ssENStudent = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [FORENAMES]" +
					 ", [SURNAME]" +
					 ", [DATEOFBIRTH]" +
					 ", [GENDER]" +
					 ", [MAINOFFERINGCODE]" +
					 ", [MAINOFFERINGNAME]" +
					 ", [STUDENTPHOTOURL]" +
					 ", [HOMEADDRESS]" +
					 ", [HOMEADDRESSPOSTCODE]" +
					 ", [CURRENTADDRESS]" +
					 ", [CURRENTADDRESSPOSTCODE]" +
					 ", [EMAILADDRESS]" +
					 ", [HOMETELEPHONE]" +
					 ", [MOBILEPHONE]" +
					 ", [NEXTOFKINNAME]" +
					 ", [NEXTOFKINRELATIONSHIP]" +
					 ", [NEXTOFKINADDRESS]" +
					 ", [NEXTOFKINPOSTCODE]" +
					 ", [NEXTOFKINPHONE]" +
					 ", [PERSONALTUTOR]" +
					 ", [NEXTOFKINEMAIL]" +
					 ", [HASCURRENTACTIVEENROLMENT]" +
					 ", [NETWORKLOGIN]" +
					 ", [NINUMBER]" +
					 ", [RESIDENTIALSTATUS]" +
					 ", [PREVIOUSSCHOOL]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssForenames" +
					 ", @ssSurname" +
					 ", @ssDateOfBirth" +
					 ", @ssGender" +
					 ", @ssMainOfferingCode" +
					 ", @ssMainOfferingName" +
					 ", @ssStudentPhotoURL" +
					 ", @ssHomeAddress" +
					 ", @ssHomeAddressPostCode" +
					 ", @ssCurrentAddress" +
					 ", @ssCurrentAddressPostcode" +
					 ", @ssEmailAddress" +
					 ", @ssHomeTelephone" +
					 ", @ssMobilePhone" +
					 ", @ssNextOfKinName" +
					 ", @ssNextOfKinRelationship" +
					 ", @ssNextOfKinAddress" +
					 ", @ssNextOfKinPostcode" +
					 ", @ssNextOfKinPhone" +
					 ", @ssPersonalTutor" +
					 ", @ssNextOfKinEmail" +
					 ", @ssHasCurrentActiveEnrolment" +
					 ", @ssNetworkLogin" +
					 ", @ssNINumber" +
					 ", @ssResidentialStatus" +
					 ", @ssPreviousSchool" +
					 " )";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudent.ssStudentReference);
					insertSqlCmd.CreateParameter("@ssForenames", DbType.String, ssENStudent.ssForenames);
					insertSqlCmd.CreateParameter("@ssSurname", DbType.String, ssENStudent.ssSurname);
					insertSqlCmd.CreateParameter("@ssDateOfBirth", DbType.DateTime, ssENStudent.ssDateOfBirth);
					insertSqlCmd.CreateParameter("@ssGender", DbType.String, ssENStudent.ssGender);
					insertSqlCmd.CreateParameter("@ssMainOfferingCode", DbType.String, ssENStudent.ssMainOfferingCode);
					insertSqlCmd.CreateParameter("@ssMainOfferingName", DbType.String, ssENStudent.ssMainOfferingName);
					insertSqlCmd.CreateParameter("@ssStudentPhotoURL", DbType.String, ssENStudent.ssStudentPhotoURL);
					insertSqlCmd.CreateParameter("@ssHomeAddress", DbType.String, ssENStudent.ssHomeAddress);
					insertSqlCmd.CreateParameter("@ssHomeAddressPostCode", DbType.String, ssENStudent.ssHomeAddressPostCode);
					insertSqlCmd.CreateParameter("@ssCurrentAddress", DbType.String, ssENStudent.ssCurrentAddress);
					insertSqlCmd.CreateParameter("@ssCurrentAddressPostcode", DbType.String, ssENStudent.ssCurrentAddressPostcode);
					insertSqlCmd.CreateParameter("@ssEmailAddress", DbType.String, ssENStudent.ssEmailAddress);
					insertSqlCmd.CreateParameter("@ssHomeTelephone", DbType.String, ssENStudent.ssHomeTelephone);
					insertSqlCmd.CreateParameter("@ssMobilePhone", DbType.String, ssENStudent.ssMobilePhone);
					insertSqlCmd.CreateParameter("@ssNextOfKinName", DbType.String, ssENStudent.ssNextOfKinName);
					insertSqlCmd.CreateParameter("@ssNextOfKinRelationship", DbType.String, ssENStudent.ssNextOfKinRelationship);
					insertSqlCmd.CreateParameter("@ssNextOfKinAddress", DbType.String, ssENStudent.ssNextOfKinAddress);
					insertSqlCmd.CreateParameter("@ssNextOfKinPostcode", DbType.String, ssENStudent.ssNextOfKinPostcode);
					insertSqlCmd.CreateParameter("@ssNextOfKinPhone", DbType.String, ssENStudent.ssNextOfKinPhone);
					insertSqlCmd.CreateParameter("@ssPersonalTutor", DbType.String, ssENStudent.ssPersonalTutor);
					insertSqlCmd.CreateParameter("@ssNextOfKinEmail", DbType.String, ssENStudent.ssNextOfKinEmail);
					insertSqlCmd.CreateParameter("@ssHasCurrentActiveEnrolment", DbType.Boolean, ssENStudent.ssHasCurrentActiveEnrolment);
					insertSqlCmd.CreateParameter("@ssNetworkLogin", DbType.String, ssENStudent.ssNetworkLogin);
					insertSqlCmd.CreateParameter("@ssNINumber", DbType.String, ssENStudent.ssNINumber);
					insertSqlCmd.CreateParameter("@ssResidentialStatus", DbType.String, ssENStudent.ssResidentialStatus);
					insertSqlCmd.CreateParameter("@ssPreviousSchool", DbType.String, ssENStudent.ssPreviousSchool);
					insertSqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateStudent", true);
					outParamId = ssENStudent.ssStudentReference;
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudent
		/// </summary>

		public static void CreateOrUpdateStudent(HeContext heContext, BitArray usedFields, RCStudentRecord inParamSource, out string outParamId) {
			outParamId = "";

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentEntity.eSpaceId;
				ENStudentEntityRecord ssENStudent = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(27, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[FORENAMES] = @ssForenames"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SURNAME] = @ssSurname"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATEOFBIRTH] = @ssDateOfBirth"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GENDER] = @ssGender"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MAINOFFERINGCODE] = @ssMainOfferingCode"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MAINOFFERINGNAME] = @ssMainOfferingName"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTPHOTOURL] = @ssStudentPhotoURL"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HOMEADDRESS] = @ssHomeAddress"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HOMEADDRESSPOSTCODE] = @ssHomeAddressPostCode"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTADDRESS] = @ssCurrentAddress"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTADDRESSPOSTCODE] = @ssCurrentAddressPostcode"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMAILADDRESS] = @ssEmailAddress"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HOMETELEPHONE] = @ssHomeTelephone"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MOBILEPHONE] = @ssMobilePhone"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINNAME] = @ssNextOfKinName"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINRELATIONSHIP] = @ssNextOfKinRelationship"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINADDRESS] = @ssNextOfKinAddress"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINPOSTCODE] = @ssNextOfKinPostcode"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINPHONE] = @ssNextOfKinPhone"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PERSONALTUTOR] = @ssPersonalTutor"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINEMAIL] = @ssNextOfKinEmail"): parameters);
					parameters = (usedFields[22] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HASCURRENTACTIVEENROLMENT] = @ssHasCurrentActiveEnrolment"): parameters);
					parameters = (usedFields[23] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NETWORKLOGIN] = @ssNetworkLogin"): parameters);
					parameters = (usedFields[24] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NINUMBER] = @ssNINumber"): parameters);
					parameters = (usedFields[25] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RESIDENTIALSTATUS] = @ssResidentialStatus"): parameters);
					parameters = (usedFields[26] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREVIOUSSCHOOL] = @ssPreviousSchool"): parameters);
					string whereCondition = " WHERE [STUDENTREFERENCE] = @ssENStudentssStudentReference";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssForenames", DbType.String, ssENStudent.ssForenames);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssSurname", DbType.String, ssENStudent.ssSurname);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDateOfBirth", DbType.DateTime, ssENStudent.ssDateOfBirth);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssGender", DbType.String, ssENStudent.ssGender);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssMainOfferingCode", DbType.String, ssENStudent.ssMainOfferingCode);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssMainOfferingName", DbType.String, ssENStudent.ssMainOfferingName);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssStudentPhotoURL", DbType.String, ssENStudent.ssStudentPhotoURL);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssHomeAddress", DbType.String, ssENStudent.ssHomeAddress);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssHomeAddressPostCode", DbType.String, ssENStudent.ssHomeAddressPostCode);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssCurrentAddress", DbType.String, ssENStudent.ssCurrentAddress);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssCurrentAddressPostcode", DbType.String, ssENStudent.ssCurrentAddressPostcode);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssEmailAddress", DbType.String, ssENStudent.ssEmailAddress);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssHomeTelephone", DbType.String, ssENStudent.ssHomeTelephone);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssMobilePhone", DbType.String, ssENStudent.ssMobilePhone);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssNextOfKinName", DbType.String, ssENStudent.ssNextOfKinName);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssNextOfKinRelationship", DbType.String, ssENStudent.ssNextOfKinRelationship);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssNextOfKinAddress", DbType.String, ssENStudent.ssNextOfKinAddress);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssNextOfKinPostcode", DbType.String, ssENStudent.ssNextOfKinPostcode);
						counter++;
					}
					if (usedFields[19]) {
						sqlCmd.CreateParameter("@ssNextOfKinPhone", DbType.String, ssENStudent.ssNextOfKinPhone);
						counter++;
					}
					if (usedFields[20]) {
						sqlCmd.CreateParameter("@ssPersonalTutor", DbType.String, ssENStudent.ssPersonalTutor);
						counter++;
					}
					if (usedFields[21]) {
						sqlCmd.CreateParameter("@ssNextOfKinEmail", DbType.String, ssENStudent.ssNextOfKinEmail);
						counter++;
					}
					if (usedFields[22]) {
						sqlCmd.CreateParameter("@ssHasCurrentActiveEnrolment", DbType.Boolean, ssENStudent.ssHasCurrentActiveEnrolment);
						counter++;
					}
					if (usedFields[23]) {
						sqlCmd.CreateParameter("@ssNetworkLogin", DbType.String, ssENStudent.ssNetworkLogin);
						counter++;
					}
					if (usedFields[24]) {
						sqlCmd.CreateParameter("@ssNINumber", DbType.String, ssENStudent.ssNINumber);
						counter++;
					}
					if (usedFields[25]) {
						sqlCmd.CreateParameter("@ssResidentialStatus", DbType.String, ssENStudent.ssResidentialStatus);
						counter++;
					}
					if (usedFields[26]) {
						sqlCmd.CreateParameter("@ssPreviousSchool", DbType.String, ssENStudent.ssPreviousSchool);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[HASCURRENTACTIVEENROLMENT] = [HASCURRENTACTIVEENROLMENT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentssStudentReference", DbType.String, ssENStudent.ssStudentReference);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudent (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [FORENAMES]" +
						 ", [SURNAME]" +
						 ", [DATEOFBIRTH]" +
						 ", [GENDER]" +
						 ", [MAINOFFERINGCODE]" +
						 ", [MAINOFFERINGNAME]" +
						 ", [STUDENTPHOTOURL]" +
						 ", [HOMEADDRESS]" +
						 ", [HOMEADDRESSPOSTCODE]" +
						 ", [CURRENTADDRESS]" +
						 ", [CURRENTADDRESSPOSTCODE]" +
						 ", [EMAILADDRESS]" +
						 ", [HOMETELEPHONE]" +
						 ", [MOBILEPHONE]" +
						 ", [NEXTOFKINNAME]" +
						 ", [NEXTOFKINRELATIONSHIP]" +
						 ", [NEXTOFKINADDRESS]" +
						 ", [NEXTOFKINPOSTCODE]" +
						 ", [NEXTOFKINPHONE]" +
						 ", [PERSONALTUTOR]" +
						 ", [NEXTOFKINEMAIL]" +
						 ", [HASCURRENTACTIVEENROLMENT]" +
						 ", [NETWORKLOGIN]" +
						 ", [NINUMBER]" +
						 ", [RESIDENTIALSTATUS]" +
						 ", [PREVIOUSSCHOOL]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssForenames" +
						 ", @ssSurname" +
						 ", @ssDateOfBirth" +
						 ", @ssGender" +
						 ", @ssMainOfferingCode" +
						 ", @ssMainOfferingName" +
						 ", @ssStudentPhotoURL" +
						 ", @ssHomeAddress" +
						 ", @ssHomeAddressPostCode" +
						 ", @ssCurrentAddress" +
						 ", @ssCurrentAddressPostcode" +
						 ", @ssEmailAddress" +
						 ", @ssHomeTelephone" +
						 ", @ssMobilePhone" +
						 ", @ssNextOfKinName" +
						 ", @ssNextOfKinRelationship" +
						 ", @ssNextOfKinAddress" +
						 ", @ssNextOfKinPostcode" +
						 ", @ssNextOfKinPhone" +
						 ", @ssPersonalTutor" +
						 ", @ssNextOfKinEmail" +
						 ", @ssHasCurrentActiveEnrolment" +
						 ", @ssNetworkLogin" +
						 ", @ssNINumber" +
						 ", @ssResidentialStatus" +
						 ", @ssPreviousSchool" +
						 " )";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudent.ssStudentReference);
						insertSqlCmd.CreateParameter("@ssForenames", DbType.String, ssENStudent.ssForenames);
						insertSqlCmd.CreateParameter("@ssSurname", DbType.String, ssENStudent.ssSurname);
						insertSqlCmd.CreateParameter("@ssDateOfBirth", DbType.DateTime, ssENStudent.ssDateOfBirth);
						insertSqlCmd.CreateParameter("@ssGender", DbType.String, ssENStudent.ssGender);
						insertSqlCmd.CreateParameter("@ssMainOfferingCode", DbType.String, ssENStudent.ssMainOfferingCode);
						insertSqlCmd.CreateParameter("@ssMainOfferingName", DbType.String, ssENStudent.ssMainOfferingName);
						insertSqlCmd.CreateParameter("@ssStudentPhotoURL", DbType.String, ssENStudent.ssStudentPhotoURL);
						insertSqlCmd.CreateParameter("@ssHomeAddress", DbType.String, ssENStudent.ssHomeAddress);
						insertSqlCmd.CreateParameter("@ssHomeAddressPostCode", DbType.String, ssENStudent.ssHomeAddressPostCode);
						insertSqlCmd.CreateParameter("@ssCurrentAddress", DbType.String, ssENStudent.ssCurrentAddress);
						insertSqlCmd.CreateParameter("@ssCurrentAddressPostcode", DbType.String, ssENStudent.ssCurrentAddressPostcode);
						insertSqlCmd.CreateParameter("@ssEmailAddress", DbType.String, ssENStudent.ssEmailAddress);
						insertSqlCmd.CreateParameter("@ssHomeTelephone", DbType.String, ssENStudent.ssHomeTelephone);
						insertSqlCmd.CreateParameter("@ssMobilePhone", DbType.String, ssENStudent.ssMobilePhone);
						insertSqlCmd.CreateParameter("@ssNextOfKinName", DbType.String, ssENStudent.ssNextOfKinName);
						insertSqlCmd.CreateParameter("@ssNextOfKinRelationship", DbType.String, ssENStudent.ssNextOfKinRelationship);
						insertSqlCmd.CreateParameter("@ssNextOfKinAddress", DbType.String, ssENStudent.ssNextOfKinAddress);
						insertSqlCmd.CreateParameter("@ssNextOfKinPostcode", DbType.String, ssENStudent.ssNextOfKinPostcode);
						insertSqlCmd.CreateParameter("@ssNextOfKinPhone", DbType.String, ssENStudent.ssNextOfKinPhone);
						insertSqlCmd.CreateParameter("@ssPersonalTutor", DbType.String, ssENStudent.ssPersonalTutor);
						insertSqlCmd.CreateParameter("@ssNextOfKinEmail", DbType.String, ssENStudent.ssNextOfKinEmail);
						insertSqlCmd.CreateParameter("@ssHasCurrentActiveEnrolment", DbType.Boolean, ssENStudent.ssHasCurrentActiveEnrolment);
						insertSqlCmd.CreateParameter("@ssNetworkLogin", DbType.String, ssENStudent.ssNetworkLogin);
						insertSqlCmd.CreateParameter("@ssNINumber", DbType.String, ssENStudent.ssNINumber);
						insertSqlCmd.CreateParameter("@ssResidentialStatus", DbType.String, ssENStudent.ssResidentialStatus);
						insertSqlCmd.CreateParameter("@ssPreviousSchool", DbType.String, ssENStudent.ssPreviousSchool);
						insertSqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudent", true);
						outParamId = ssENStudent.ssStudentReference;
					} else {
						outParamId = ssENStudent.ssStudentReference;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudent
		/// </summary>

		public static void DeleteStudent(HeContext heContext, string inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [STUDENTREFERENCE] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudent", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudent
		/// </summary>

		public static void GetStudent(HeContext heContext, string inParamId, out RCStudentRecord outParamRecord) {
			outParamRecord = new RCStudentRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [STUDENTREFERENCE]" +
					 ", [FORENAMES]" +
					 ", [SURNAME]" +
					 ", [DATEOFBIRTH]" +
					 ", [GENDER]" +
					 ", [MAINOFFERINGCODE]" +
					 ", [MAINOFFERINGNAME]" +
					 ", [STUDENTPHOTOURL]" +
					 ", [HOMEADDRESS]" +
					 ", [HOMEADDRESSPOSTCODE]" +
					 ", [CURRENTADDRESS]" +
					 ", [CURRENTADDRESSPOSTCODE]" +
					 ", [EMAILADDRESS]" +
					 ", [HOMETELEPHONE]" +
					 ", [MOBILEPHONE]" +
					 ", [NEXTOFKINNAME]" +
					 ", [NEXTOFKINRELATIONSHIP]" +
					 ", [NEXTOFKINADDRESS]" +
					 ", [NEXTOFKINPOSTCODE]" +
					 ", [NEXTOFKINPHONE]" +
					 ", [PERSONALTUTOR]" +
					 ", [NEXTOFKINEMAIL]" +
					 ", [HASCURRENTACTIVEENROLMENT]" +
					 ", [NETWORKLOGIN]" +
					 ", [NINUMBER]" +
					 ", [RESIDENTIALSTATUS]" +
					 ", [PREVIOUSSCHOOL]" +
					 " FROM " + ENStudentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [STUDENTREFERENCE] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudent", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(27, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentForUpdate
		/// </summary>

		public static void GetStudentForUpdate(HeContext heContext, string inParamId, out RCStudentRecord outParamRecord) {
			outParamRecord = new RCStudentRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [STUDENTREFERENCE]" +
					 ", [FORENAMES]" +
					 ", [SURNAME]" +
					 ", [DATEOFBIRTH]" +
					 ", [GENDER]" +
					 ", [MAINOFFERINGCODE]" +
					 ", [MAINOFFERINGNAME]" +
					 ", [STUDENTPHOTOURL]" +
					 ", [HOMEADDRESS]" +
					 ", [HOMEADDRESSPOSTCODE]" +
					 ", [CURRENTADDRESS]" +
					 ", [CURRENTADDRESSPOSTCODE]" +
					 ", [EMAILADDRESS]" +
					 ", [HOMETELEPHONE]" +
					 ", [MOBILEPHONE]" +
					 ", [NEXTOFKINNAME]" +
					 ", [NEXTOFKINRELATIONSHIP]" +
					 ", [NEXTOFKINADDRESS]" +
					 ", [NEXTOFKINPOSTCODE]" +
					 ", [NEXTOFKINPHONE]" +
					 ", [PERSONALTUTOR]" +
					 ", [NEXTOFKINEMAIL]" +
					 ", [HASCURRENTACTIVEENROLMENT]" +
					 ", [NETWORKLOGIN]" +
					 ", [NINUMBER]" +
					 ", [RESIDENTIALSTATUS]" +
					 ", [PREVIOUSSCHOOL]" +
					 "FROM " + ENStudentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [STUDENTREFERENCE] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(27, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudent
		/// </summary>

		public static void UpdateStudent(HeContext heContext, BitArray usedFields, RCStudentRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentEntity.eSpaceId;
				ENStudentEntityRecord ssENStudent = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(27, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[FORENAMES] = @ssForenames"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SURNAME] = @ssSurname"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATEOFBIRTH] = @ssDateOfBirth"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GENDER] = @ssGender"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MAINOFFERINGCODE] = @ssMainOfferingCode"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MAINOFFERINGNAME] = @ssMainOfferingName"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTPHOTOURL] = @ssStudentPhotoURL"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HOMEADDRESS] = @ssHomeAddress"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HOMEADDRESSPOSTCODE] = @ssHomeAddressPostCode"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTADDRESS] = @ssCurrentAddress"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTADDRESSPOSTCODE] = @ssCurrentAddressPostcode"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMAILADDRESS] = @ssEmailAddress"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HOMETELEPHONE] = @ssHomeTelephone"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MOBILEPHONE] = @ssMobilePhone"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINNAME] = @ssNextOfKinName"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINRELATIONSHIP] = @ssNextOfKinRelationship"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINADDRESS] = @ssNextOfKinAddress"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINPOSTCODE] = @ssNextOfKinPostcode"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINPHONE] = @ssNextOfKinPhone"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PERSONALTUTOR] = @ssPersonalTutor"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NEXTOFKINEMAIL] = @ssNextOfKinEmail"): parameters);
					parameters = (usedFields[22] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[HASCURRENTACTIVEENROLMENT] = @ssHasCurrentActiveEnrolment"): parameters);
					parameters = (usedFields[23] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NETWORKLOGIN] = @ssNetworkLogin"): parameters);
					parameters = (usedFields[24] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NINUMBER] = @ssNINumber"): parameters);
					parameters = (usedFields[25] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RESIDENTIALSTATUS] = @ssResidentialStatus"): parameters);
					parameters = (usedFields[26] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PREVIOUSSCHOOL] = @ssPreviousSchool"): parameters);
					string whereCondition = " WHERE [STUDENTREFERENCE] = @ssENStudentssStudentReference";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssForenames", DbType.String, ssENStudent.ssForenames);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssSurname", DbType.String, ssENStudent.ssSurname);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDateOfBirth", DbType.DateTime, ssENStudent.ssDateOfBirth);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssGender", DbType.String, ssENStudent.ssGender);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssMainOfferingCode", DbType.String, ssENStudent.ssMainOfferingCode);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssMainOfferingName", DbType.String, ssENStudent.ssMainOfferingName);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssStudentPhotoURL", DbType.String, ssENStudent.ssStudentPhotoURL);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssHomeAddress", DbType.String, ssENStudent.ssHomeAddress);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssHomeAddressPostCode", DbType.String, ssENStudent.ssHomeAddressPostCode);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssCurrentAddress", DbType.String, ssENStudent.ssCurrentAddress);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssCurrentAddressPostcode", DbType.String, ssENStudent.ssCurrentAddressPostcode);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssEmailAddress", DbType.String, ssENStudent.ssEmailAddress);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssHomeTelephone", DbType.String, ssENStudent.ssHomeTelephone);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssMobilePhone", DbType.String, ssENStudent.ssMobilePhone);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssNextOfKinName", DbType.String, ssENStudent.ssNextOfKinName);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssNextOfKinRelationship", DbType.String, ssENStudent.ssNextOfKinRelationship);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssNextOfKinAddress", DbType.String, ssENStudent.ssNextOfKinAddress);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssNextOfKinPostcode", DbType.String, ssENStudent.ssNextOfKinPostcode);
						counter++;
					}
					if (usedFields[19]) {
						sqlCmd.CreateParameter("@ssNextOfKinPhone", DbType.String, ssENStudent.ssNextOfKinPhone);
						counter++;
					}
					if (usedFields[20]) {
						sqlCmd.CreateParameter("@ssPersonalTutor", DbType.String, ssENStudent.ssPersonalTutor);
						counter++;
					}
					if (usedFields[21]) {
						sqlCmd.CreateParameter("@ssNextOfKinEmail", DbType.String, ssENStudent.ssNextOfKinEmail);
						counter++;
					}
					if (usedFields[22]) {
						sqlCmd.CreateParameter("@ssHasCurrentActiveEnrolment", DbType.Boolean, ssENStudent.ssHasCurrentActiveEnrolment);
						counter++;
					}
					if (usedFields[23]) {
						sqlCmd.CreateParameter("@ssNetworkLogin", DbType.String, ssENStudent.ssNetworkLogin);
						counter++;
					}
					if (usedFields[24]) {
						sqlCmd.CreateParameter("@ssNINumber", DbType.String, ssENStudent.ssNINumber);
						counter++;
					}
					if (usedFields[25]) {
						sqlCmd.CreateParameter("@ssResidentialStatus", DbType.String, ssENStudent.ssResidentialStatus);
						counter++;
					}
					if (usedFields[26]) {
						sqlCmd.CreateParameter("@ssPreviousSchool", DbType.String, ssENStudent.ssPreviousSchool);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[HASCURRENTACTIVEENROLMENT] = [HASCURRENTACTIVEENROLMENT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentssStudentReference", DbType.String, ssENStudent.ssStudentReference);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudent", true) <= 0)
					throw new DataBaseException(ENStudentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudent.ssStudentReference + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Student")]
	public class WORCStudentRecord {
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("Forenames")]
		public string varWSForenames;

		[System.Xml.Serialization.XmlElement("Surname")]
		public string varWSSurname;

		[System.Xml.Serialization.XmlElement("DateOfBirth", DataType= "date")]
		public DateTime varWSDateOfBirth;

		[System.Xml.Serialization.XmlElement("Gender")]
		public string varWSGender;

		[System.Xml.Serialization.XmlElement("MainOfferingCode")]
		public string varWSMainOfferingCode;

		[System.Xml.Serialization.XmlElement("MainOfferingName")]
		public string varWSMainOfferingName;

		[System.Xml.Serialization.XmlElement("StudentPhotoURL")]
		public string varWSStudentPhotoURL;

		[System.Xml.Serialization.XmlElement("HomeAddress")]
		public string varWSHomeAddress;

		[System.Xml.Serialization.XmlElement("HomeAddressPostCode")]
		public string varWSHomeAddressPostCode;

		[System.Xml.Serialization.XmlElement("CurrentAddress")]
		public string varWSCurrentAddress;

		[System.Xml.Serialization.XmlElement("CurrentAddressPostcode")]
		public string varWSCurrentAddressPostcode;

		[System.Xml.Serialization.XmlElement("EmailAddress")]
		public string varWSEmailAddress;

		[System.Xml.Serialization.XmlElement("HomeTelephone")]
		public string varWSHomeTelephone;

		[System.Xml.Serialization.XmlElement("MobilePhone")]
		public string varWSMobilePhone;

		[System.Xml.Serialization.XmlElement("NextOfKinName")]
		public string varWSNextOfKinName;

		[System.Xml.Serialization.XmlElement("NextOfKinRelationship")]
		public string varWSNextOfKinRelationship;

		[System.Xml.Serialization.XmlElement("NextOfKinAddress")]
		public string varWSNextOfKinAddress;

		[System.Xml.Serialization.XmlElement("NextOfKinPostcode")]
		public string varWSNextOfKinPostcode;

		[System.Xml.Serialization.XmlElement("NextOfKinPhone")]
		public string varWSNextOfKinPhone;

		[System.Xml.Serialization.XmlElement("PersonalTutor")]
		public string varWSPersonalTutor;

		[System.Xml.Serialization.XmlElement("NextOfKinEmail")]
		public string varWSNextOfKinEmail;

		[System.Xml.Serialization.XmlElement("HasCurrentActiveEnrolment")]
		public bool varWSHasCurrentActiveEnrolment;

		[System.Xml.Serialization.XmlElement("NetworkLogin")]
		public string varWSNetworkLogin;

		[System.Xml.Serialization.XmlElement("NINumber")]
		public string varWSNINumber;

		[System.Xml.Serialization.XmlElement("ResidentialStatus")]
		public string varWSResidentialStatus;

		[System.Xml.Serialization.XmlElement("PreviousSchool")]
		public string varWSPreviousSchool;

		public WORCStudentRecord() {
			varWSStudentReference = (string) "";
			varWSForenames = (string) "";
			varWSSurname = (string) "";
			varWSDateOfBirth = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSGender = (string) "";
			varWSMainOfferingCode = (string) "";
			varWSMainOfferingName = (string) "";
			varWSStudentPhotoURL = (string) "";
			varWSHomeAddress = (string) "";
			varWSHomeAddressPostCode = (string) "";
			varWSCurrentAddress = (string) "";
			varWSCurrentAddressPostcode = (string) "";
			varWSEmailAddress = (string) "";
			varWSHomeTelephone = (string) "";
			varWSMobilePhone = (string) "";
			varWSNextOfKinName = (string) "";
			varWSNextOfKinRelationship = (string) "";
			varWSNextOfKinAddress = (string) "";
			varWSNextOfKinPostcode = (string) "";
			varWSNextOfKinPhone = (string) "";
			varWSPersonalTutor = (string) "";
			varWSNextOfKinEmail = (string) "";
			varWSHasCurrentActiveEnrolment = (bool) false;
			varWSNetworkLogin = (string) "";
			varWSNINumber = (string) "";
			varWSResidentialStatus = (string) "";
			varWSPreviousSchool = (string) "";
		}

		public WORCStudentRecord(ENStudentEntityRecord r) {
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSForenames = BaseAppUtils.RemoveControlChars(r.ssForenames);
			varWSSurname = BaseAppUtils.RemoveControlChars(r.ssSurname);
			varWSDateOfBirth = (DateTime) r.ssDateOfBirth;
			varWSGender = BaseAppUtils.RemoveControlChars(r.ssGender);
			varWSMainOfferingCode = BaseAppUtils.RemoveControlChars(r.ssMainOfferingCode);
			varWSMainOfferingName = BaseAppUtils.RemoveControlChars(r.ssMainOfferingName);
			varWSStudentPhotoURL = BaseAppUtils.RemoveControlChars(r.ssStudentPhotoURL);
			varWSHomeAddress = BaseAppUtils.RemoveControlChars(r.ssHomeAddress);
			varWSHomeAddressPostCode = BaseAppUtils.RemoveControlChars(r.ssHomeAddressPostCode);
			varWSCurrentAddress = BaseAppUtils.RemoveControlChars(r.ssCurrentAddress);
			varWSCurrentAddressPostcode = BaseAppUtils.RemoveControlChars(r.ssCurrentAddressPostcode);
			varWSEmailAddress = BaseAppUtils.RemoveControlChars(r.ssEmailAddress);
			varWSHomeTelephone = BaseAppUtils.RemoveControlChars(r.ssHomeTelephone);
			varWSMobilePhone = BaseAppUtils.RemoveControlChars(r.ssMobilePhone);
			varWSNextOfKinName = BaseAppUtils.RemoveControlChars(r.ssNextOfKinName);
			varWSNextOfKinRelationship = BaseAppUtils.RemoveControlChars(r.ssNextOfKinRelationship);
			varWSNextOfKinAddress = BaseAppUtils.RemoveControlChars(r.ssNextOfKinAddress);
			varWSNextOfKinPostcode = BaseAppUtils.RemoveControlChars(r.ssNextOfKinPostcode);
			varWSNextOfKinPhone = BaseAppUtils.RemoveControlChars(r.ssNextOfKinPhone);
			varWSPersonalTutor = BaseAppUtils.RemoveControlChars(r.ssPersonalTutor);
			varWSNextOfKinEmail = BaseAppUtils.RemoveControlChars(r.ssNextOfKinEmail);
			varWSHasCurrentActiveEnrolment = (bool) r.ssHasCurrentActiveEnrolment;
			varWSNetworkLogin = BaseAppUtils.RemoveControlChars(r.ssNetworkLogin);
			varWSNINumber = BaseAppUtils.RemoveControlChars(r.ssNINumber);
			varWSResidentialStatus = BaseAppUtils.RemoveControlChars(r.ssResidentialStatus);
			varWSPreviousSchool = BaseAppUtils.RemoveControlChars(r.ssPreviousSchool);
		}

		public static RLStudentList ToRecordList(WORCStudentRecord[] array) {
			RLStudentList rl = new RLStudentList();
			if (array != null) {
				foreach(WORCStudentRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentRecord[] FromRecordList(RLStudentList rl) {
			WORCStudentRecord[] array = new WORCStudentRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentRecord {
		public static implicit operator WORCStudentRecord(RCStudentRecord r) {
			return new WORCStudentRecord(r.ssENStudent);
		}

		public static implicit operator RCStudentRecord(WORCStudentRecord w) {
			RCStudentRecord r = new RCStudentRecord("");
			if (w != null) {
				r.ssENStudent = w;
			}
			return r;
		}

	}

	partial struct ENStudentEntityRecord {
		public static implicit operator WORCStudentRecord(ENStudentEntityRecord r) {
			return new WORCStudentRecord(r);
		}

		public static implicit operator ENStudentEntityRecord(WORCStudentRecord w) {
			ENStudentEntityRecord r = new ENStudentEntityRecord("");
			if (w != null) {
				r.ssStudentReference = ((string) w.varWSStudentReference ?? "");
				r.ssForenames = ((string) w.varWSForenames ?? "");
				r.ssSurname = ((string) w.varWSSurname ?? "");
				r.ssDateOfBirth = (DateTime) w.varWSDateOfBirth;
				r.ssGender = ((string) w.varWSGender ?? "");
				r.ssMainOfferingCode = ((string) w.varWSMainOfferingCode ?? "");
				r.ssMainOfferingName = ((string) w.varWSMainOfferingName ?? "");
				r.ssStudentPhotoURL = ((string) w.varWSStudentPhotoURL ?? "");
				r.ssHomeAddress = ((string) w.varWSHomeAddress ?? "");
				r.ssHomeAddressPostCode = ((string) w.varWSHomeAddressPostCode ?? "");
				r.ssCurrentAddress = ((string) w.varWSCurrentAddress ?? "");
				r.ssCurrentAddressPostcode = ((string) w.varWSCurrentAddressPostcode ?? "");
				r.ssEmailAddress = ((string) w.varWSEmailAddress ?? "");
				r.ssHomeTelephone = ((string) w.varWSHomeTelephone ?? "");
				r.ssMobilePhone = ((string) w.varWSMobilePhone ?? "");
				r.ssNextOfKinName = ((string) w.varWSNextOfKinName ?? "");
				r.ssNextOfKinRelationship = ((string) w.varWSNextOfKinRelationship ?? "");
				r.ssNextOfKinAddress = ((string) w.varWSNextOfKinAddress ?? "");
				r.ssNextOfKinPostcode = ((string) w.varWSNextOfKinPostcode ?? "");
				r.ssNextOfKinPhone = ((string) w.varWSNextOfKinPhone ?? "");
				r.ssPersonalTutor = ((string) w.varWSPersonalTutor ?? "");
				r.ssNextOfKinEmail = ((string) w.varWSNextOfKinEmail ?? "");
				r.ssHasCurrentActiveEnrolment = (bool) w.varWSHasCurrentActiveEnrolment;
				r.ssNetworkLogin = ((string) w.varWSNetworkLogin ?? "");
				r.ssNINumber = ((string) w.varWSNINumber ?? "");
				r.ssResidentialStatus = ((string) w.varWSResidentialStatus ?? "");
				r.ssPreviousSchool = ((string) w.varWSPreviousSchool ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentRecordList {
		public WORCStudentRecord[] Array;


		public WORLStudentRecordList(WORCStudentRecord[] r) {
			if (r == null)
			Array = new WORCStudentRecord[0];
			else
			Array = r;
		}
		public WORLStudentRecordList() {
			Array = new WORCStudentRecord[0];
		}

		public WORLStudentRecordList(RLStudentRecordList rl) {
			rl=(RLStudentRecordList) rl.Duplicate();
			Array = new WORCStudentRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentRecordList {
		public static implicit operator RLStudentRecordList(WORCStudentRecord[] array) {
			RLStudentRecordList rl = new RLStudentRecordList();
			if (array != null) {
				foreach(WORCStudentRecord val in array) {
					rl.Append((RCStudentRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentRecord[](RLStudentRecordList rl) {
			WORCStudentRecord[] array = new WORCStudentRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentRecordList {
		public static implicit operator RLStudentRecordList(WORLStudentRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentRecordList(RLStudentRecordList rl) {
			return new WORLStudentRecordList(rl);
		}
		public static implicit operator WORCStudentRecord[](WORLStudentRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentRecordList(WORCStudentRecord[] array) {
			return new WORLStudentRecordList(array);
		}
	}
}

