/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENPDFReportTypeEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			switch (locale == null ? "":
					locale.ToLowerInvariant()) {
				default:

					int pos;
					if (!string.IsNullOrEmpty(locale) && ((pos = locale.IndexOf('-')) > 0))
					return ViewName(tenant, locale.Substring(0, pos)); // fallback
					else
					return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(10), "OSUSR_pkx_PDFReportType");
				}
			}
		} // ENPDFReportTypeEntity

		/// <summary>
		/// Entity <code>ENPDFReportTypeEntityRecord</code> that represents the Service Studio entity
		///  <code>PDFReportType</code> <p> Description: </p>
		/// </summary>
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("PDFReportType", "nUA2FWbtx0W0ihPeAoLAeQ", "shmcdFKEAEWXZGfrlZEwCQ", 0, "OSUSR_pkx_PDFReportType", null)]
		[Serializable()]
		public partial struct ENPDFReportTypeEntityRecord: ISerializable, ITypedRecord<ENPDFReportTypeEntityRecord>, ISimpleRecord {
			private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*c7yk30ecJkeyLdF6LggYEw");
			private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*nNVG5SSEr0mS5ObK7Pp0RQ");
			private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*6UmgSZm9GUysQKJuhri3pw");
			private static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*glWdQcnEeESN53QyRDSm7A");
			private static readonly GlobalObjectKey IdURL = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*_JfRkkR9rU+r+L7KnNI8Zg");

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
			[System.Xml.Serialization.XmlElement("Id")]
			private int _ssId;
			public int ssId {
				get {
					return _ssId;
				}
				set {
					if ((_ssId!=value) || OptimizedAttributes[0]) {
						ChangedAttributes = new BitArray(5, true);
						_ssId = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LABEL", 50, false, false, false)]
			[System.Xml.Serialization.XmlElement("Label")]
			private string _ssLabel;
			public string ssLabel {
				get {
					return _ssLabel;
				}
				set {
					if ((_ssLabel!=value) || OptimizedAttributes[1]) {
						ChangedAttributes[1] = true;
						_ssLabel = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
			[System.Xml.Serialization.XmlElement("Order")]
			private int _ssOrder;
			public int ssOrder {
				get {
					return _ssOrder;
				}
				set {
					if ((_ssOrder!=value) || OptimizedAttributes[2]) {
						ChangedAttributes[2] = true;
						_ssOrder = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false)]
			[System.Xml.Serialization.XmlElement("Is_Active")]
			private bool _ssIs_Active;
			public bool ssIs_Active {
				get {
					return _ssIs_Active;
				}
				set {
					if ((_ssIs_Active!=value) || OptimizedAttributes[3]) {
						ChangedAttributes[3] = true;
						_ssIs_Active = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("URL", 500, false, false, false)]
			[System.Xml.Serialization.XmlElement("URL")]
			private string _ssURL;
			public string ssURL {
				get {
					return _ssURL;
				}
				set {
					if ((_ssURL!=value) || OptimizedAttributes[4]) {
						ChangedAttributes[4] = true;
						_ssURL = value;
					}
				}
			}


			public BitArray ChangedAttributes;

			public BitArray OptimizedAttributes;

			public ENPDFReportTypeEntityRecord(params string[] dummy) {
				ChangedAttributes = new BitArray(5, true);
				OptimizedAttributes = new BitArray(5, false);
				_ssId = 0;
				_ssLabel = "";
				_ssOrder = 0;
				_ssIs_Active = false;
				_ssURL = "";
			}

			public BitArray[] GetDefaultOptimizedValues() {
				BitArray[] all = new BitArray[0];
				return all;
			}

			public BitArray[] AllOptimizedAttributes {
				set {
					if (value == null) {
					} else {
					}
				}
				get {
					BitArray[] all = new BitArray[0];
					return all;
				}
			}

			/// <summary>
			/// Read a record from database
			/// </summary>
			/// <param name="r"> Data base reader</param>
			/// <param name="index"> index</param>
			public void Read(IDataReader r, ref int index) {
				ssId = r.ReadInteger(index++, "PDFReportType.Id", 0);
				ssLabel = r.ReadText(index++, "PDFReportType.Label", "");
				ssOrder = r.ReadInteger(index++, "PDFReportType.Order", 0);
				ssIs_Active = r.ReadBoolean(index++, "PDFReportType.Is_Active", false);
				ssURL = r.ReadText(index++, "PDFReportType.URL", "");
				ChangedAttributes = new BitArray(5, false);
				OptimizedAttributes = new BitArray(5, false);
			}
			/// <summary>
			/// Read from database
			/// </summary>
			/// <param name="r"> Data reader</param>
			public void ReadDB(IDataReader r) {
				int index = 0;
				Read(r, ref index);
			}

			/// <summary>
			/// Read from record
			/// </summary>
			/// <param name="r"> Record</param>
			public void ReadIM(ENPDFReportTypeEntityRecord r) {
				this = r;
			}


			public static bool operator == (ENPDFReportTypeEntityRecord a, ENPDFReportTypeEntityRecord b) {
				if (a.ssId != b.ssId) return false;
				if (a.ssLabel != b.ssLabel) return false;
				if (a.ssOrder != b.ssOrder) return false;
				if (a.ssIs_Active != b.ssIs_Active) return false;
				if (a.ssURL != b.ssURL) return false;
				return true;
			}

			public static bool operator != (ENPDFReportTypeEntityRecord a, ENPDFReportTypeEntityRecord b) {
				return !(a==b);
			}

			public override bool Equals(object o) {
				if (o.GetType() != typeof(ENPDFReportTypeEntityRecord)) return false;
				return (this == (ENPDFReportTypeEntityRecord) o);
			}

			public override int GetHashCode() {
				try {
					return base.GetHashCode()
					^ ssId.GetHashCode()
					^ ssLabel.GetHashCode()
					^ ssOrder.GetHashCode()
					^ ssIs_Active.GetHashCode()
					^ ssURL.GetHashCode()
					;
				} catch {
					return base.GetHashCode();
				}
			}

			public void GetObjectData(SerializationInfo info, StreamingContext context) {
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				for (int i = 0; i < fields.Length; i++)
				if (fields[i] .FieldType.IsSerializable)
				info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
			}

			public ENPDFReportTypeEntityRecord(SerializationInfo info, StreamingContext context) {
				ChangedAttributes = new BitArray(5, true);
				OptimizedAttributes = new BitArray(5, false);
				_ssId = 0;
				_ssLabel = "";
				_ssOrder = 0;
				_ssIs_Active = false;
				_ssURL = "";
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fields[0] .FieldType.IsSerializable)
				_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
				if (fields[1] .FieldType.IsSerializable)
				_ssLabel = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
				if (fields[2] .FieldType.IsSerializable)
				_ssOrder = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
				if (fields[3] .FieldType.IsSerializable)
				_ssIs_Active = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
				if (fields[4] .FieldType.IsSerializable)
				_ssURL = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			}

			public void RecursiveReset() {
			}

			public void InternalRecursiveSave() {
			}


			public ENPDFReportTypeEntityRecord Duplicate() {
				ENPDFReportTypeEntityRecord t;
				t._ssId = this._ssId;
				t._ssLabel = this._ssLabel;
				t._ssOrder = this._ssOrder;
				t._ssIs_Active = this._ssIs_Active;
				t._ssURL = this._ssURL;
				t.ChangedAttributes = new BitArray(5);
				t.OptimizedAttributes = new BitArray(5);
				for (int i = 0; i < 5; i++) {
					t.ChangedAttributes[i] = ChangedAttributes[i];
					t.OptimizedAttributes[i] = OptimizedAttributes[i];
				}
				return t;
			}

			IRecord IRecord.Duplicate() {
				return Duplicate();
			}

			public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
				System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
				if (fieldName != null) {
					VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
					fieldName = fieldName.ToLowerInvariant();
				}
				if (detailLevel > 0) {
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".URL")) VarValue.AppendAttribute(recordElem, "URL", ssURL, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "URL");
				} else {
					VarValue.AppendDeferredEvaluationElement(recordElem);
				}
			}

			public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
				String head = VarValue.GetHead(fields);
				String tail = VarValue.GetTail(fields);
				variable.Found = false;
				if (head == "id") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
				} else if (head == "label") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
				} else if (head == "order") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
				} else if (head == "is_active") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
				} else if (head == "url") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".URL")) variable.Value = ssURL; else variable.Optimized = true;
				}
				if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
			}

			public bool ChangedAttributeGet(GlobalObjectKey key) {
				if (key.Equals(IdId)) {
					return ChangedAttributes[0];
				} else if (key.Equals(IdLabel)) {
					return ChangedAttributes[1];
				} else if (key.Equals(IdOrder)) {
					return ChangedAttributes[2];
				} else if (key.Equals(IdIs_Active)) {
					return ChangedAttributes[3];
				} else if (key.Equals(IdURL)) {
					return ChangedAttributes[4];
				} else {
					throw new Exception("Invalid key");
				}
			}

			public bool OptimizedAttributeGet(GlobalObjectKey key) {
				if (key.Equals(IdId)) {
					return OptimizedAttributes[0];
				} else if (key.Equals(IdLabel)) {
					return OptimizedAttributes[1];
				} else if (key.Equals(IdOrder)) {
					return OptimizedAttributes[2];
				} else if (key.Equals(IdIs_Active)) {
					return OptimizedAttributes[3];
				} else if (key.Equals(IdURL)) {
					return OptimizedAttributes[4];
				} else {
					throw new Exception("Invalid key");
				}
			}

			public object AttributeGet(GlobalObjectKey key) {
				if (key == IdId) {
					return ssId;
				} else if (key == IdLabel) {
					return ssLabel;
				} else if (key == IdOrder) {
					return ssOrder;
				} else if (key == IdIs_Active) {
					return ssIs_Active;
				} else if (key == IdURL) {
					return ssURL;
				} else {
					throw new Exception("Invalid key");
				}
			}
			public void FillFromOther(IRecord other) {
				ChangedAttributes = new BitArray(5);
				OptimizedAttributes = new BitArray(5);
				if (other == null) return;
				ssId = (int) other.AttributeGet(IdId);
				ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
				OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
				ssLabel = (string) other.AttributeGet(IdLabel);
				ChangedAttributes[1] = other.ChangedAttributeGet(IdLabel);
				OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLabel);
				ssOrder = (int) other.AttributeGet(IdOrder);
				ChangedAttributes[2] = other.ChangedAttributeGet(IdOrder);
				OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOrder);
				ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
				ChangedAttributes[3] = other.ChangedAttributeGet(IdIs_Active);
				OptimizedAttributes[3] = other.OptimizedAttributeGet(IdIs_Active);
				ssURL = (string) other.AttributeGet(IdURL);
				ChangedAttributes[4] = other.ChangedAttributeGet(IdURL);
				OptimizedAttributes[4] = other.OptimizedAttributeGet(IdURL);
			}
		} // ENPDFReportTypeEntityRecord
		partial class ENPDFReportTypeEntity: StaticEntityRuntime {


			public class ENPDFReportTypeEntityRecordMetadata: StaticEntityRuntime.StaticRecordMetadata {
				public virtual int DataId {
					get {
						return (int) _dataId;
					}
				}

				protected override object IdReader(IDataReader r) {
					Object column = r["Data_Id"];
					return (column != System.DBNull.Value ? Convert.ToInt32(column): 0);
				}
			} // " + DeclStaticMetadataClass);


			private static ENPDFReportTypeEntity instance = new ENPDFReportTypeEntity(10, ObjectKey.Parse("nUA2FWbtx0W0ihPeAoLAeQ"));

			public static ENPDFReportTypeEntity GetInstance() {
				return instance;
			}

			private ENPDFReportTypeEntity(int espaceId, ObjectKey entityKey): base(espaceId, entityKey) {
			}


			protected override StaticRecordMetadata newStaticRecord() {
				return new ENPDFReportTypeEntityRecordMetadata();
			}

			private ENPDFReportTypeEntityRecord GetRecord(ENPDFReportTypeEntityRecordMetadata meta) {
				return GetRecord(meta.DataId);
			}

			private ENPDFReportTypeEntityRecord GetRecord(int id) {
				string locale = BuiltInFunction.GetCurrentLocale();
				Object recordObj = RecordsById(locale)[id];
				if (recordObj != null) {
					return (ENPDFReportTypeEntityRecord) recordObj;
				} else {
					using(Transaction tran = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {

						int pos = 0;
						ENPDFReportTypeEntityRecord record = new ENPDFReportTypeEntityRecord(null);

						string sql= "SELECT TOP (1) " +
						 " [ID]  o1" +
						 ", [LABEL]  o2" +
						 ", [ORDER]  o3" +
						 ", [IS_ACTIVE]  o4" +
						 ", [URL]  o5" +
						 " FROM " + ENPDFReportTypeEntity.LocalViewName(null, locale) + " " +
						 " WHERE [ID] = @DataId";


						Command cmd = tran.CreateCommand(sql);
						cmd.CreateParameter("@DataId", DbType.Int32, id);

						using(IDataReader reader = cmd.ExecuteReader()) {
							if (reader.Read()) {
								record.Read(reader, ref pos);
								RecordsById(locale)[id] = record;
							} else {
								throw new DataBaseException(ViewName(null, "") + " with key " + id + " was not found.");
							}
						}
						return record;
					}

				}
			}

			public static ENPDFReportTypeEntityRecord GetRecordById(int id) {
				return instance.GetRecord(id);
			}

			public static ENPDFReportTypeEntityRecord GetRecordByName(string name) {
				ENPDFReportTypeEntityRecordMetadata meta = (ENPDFReportTypeEntityRecordMetadata) instance.GetRecordMetadataByName(name);
				if (meta == null || !meta.Valid) {
					throw new DataBaseException(ViewName(null, "") + ", record with Identifier " + name + " was not found.");
				}
				return instance.GetRecord(meta);
			}

			public static ENPDFReportTypeEntityRecord GetRecordByKey(ObjectKey key) {
				ENPDFReportTypeEntityRecordMetadata meta = (ENPDFReportTypeEntityRecordMetadata) instance.GetRecordMetadataByKey(key);
				if (meta == null || !meta.Valid) {
					throw new DataBaseException(ViewName(null, "") + ", record metadata '" + ObjectKeyUtils.DatabaseValue(key) + "' was " + (meta == null ? "not found": "invalid") + ".");
				}
				return instance.GetRecord(meta);
			}

		} // ENPDFReportTypeEntity;

		/// <summary>
		/// Structure <code>RCPDFReportTypeRecord</code>
		/// </summary>
		[Serializable()]
		public partial struct RCPDFReportTypeRecord: ISerializable, ITypedRecord<RCPDFReportTypeRecord> {
			private static readonly GlobalObjectKey IdPDFReportType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*zc2zGXQI3HSz9phN6rB1uw");

			public static void EnsureInitialized() {}
			[System.Xml.Serialization.XmlElement("PDFReportType")]
			public ENPDFReportTypeEntityRecord ssENPDFReportType;


			public static implicit operator ENPDFReportTypeEntityRecord(RCPDFReportTypeRecord r) {
				return r.ssENPDFReportType;
			}

			public static implicit operator RCPDFReportTypeRecord(ENPDFReportTypeEntityRecord r) {
				RCPDFReportTypeRecord res = new RCPDFReportTypeRecord(null);
				res.ssENPDFReportType = r;
				return res;
			}

			public BitArray ChangedAttributes {
				set {
					ssENPDFReportType.ChangedAttributes = value;
				}
				get {
					return ssENPDFReportType.ChangedAttributes;
				}
			}
			public BitArray OptimizedAttributes;

			public RCPDFReportTypeRecord(params string[] dummy) {
				OptimizedAttributes = null;
				ssENPDFReportType = new ENPDFReportTypeEntityRecord(null);
			}

			public BitArray[] GetDefaultOptimizedValues() {
				BitArray[] all = new BitArray[1];
				all[0] = new BitArray(5, false);
				return all;
			}

			public BitArray[] AllOptimizedAttributes {
				set {
					if (value == null) {
						ssENPDFReportType.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					} else {
						ssENPDFReportType.OptimizedAttributes = value[0];
					}
				}
				get {
					BitArray[] all = new BitArray[1];
					all[0] = ssENPDFReportType.OptimizedAttributes;
					return all;
				}
			}

			/// <summary>
			/// Read a record from database
			/// </summary>
			/// <param name="r"> Data base reader</param>
			/// <param name="index"> index</param>
			public void Read(IDataReader r, ref int index) {
				ssENPDFReportType.Read(r, ref index);
			}
			/// <summary>
			/// Read from database
			/// </summary>
			/// <param name="r"> Data reader</param>
			public void ReadDB(IDataReader r) {
				int index = 0;
				Read(r, ref index);
			}

			/// <summary>
			/// Read from record
			/// </summary>
			/// <param name="r"> Record</param>
			public void ReadIM(RCPDFReportTypeRecord r) {
				this = r;
			}


			public static bool operator == (RCPDFReportTypeRecord a, RCPDFReportTypeRecord b) {
				if (a.ssENPDFReportType != b.ssENPDFReportType) return false;
				return true;
			}

			public static bool operator != (RCPDFReportTypeRecord a, RCPDFReportTypeRecord b) {
				return !(a==b);
			}

			public override bool Equals(object o) {
				if (o.GetType() != typeof(RCPDFReportTypeRecord)) return false;
				return (this == (RCPDFReportTypeRecord) o);
			}

			public override int GetHashCode() {
				try {
					return base.GetHashCode()
					^ ssENPDFReportType.GetHashCode()
					;
				} catch {
					return base.GetHashCode();
				}
			}

			public void GetObjectData(SerializationInfo info, StreamingContext context) {
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				for (int i = 0; i < fields.Length; i++)
				if (fields[i] .FieldType.IsSerializable)
				info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
			}

			public RCPDFReportTypeRecord(SerializationInfo info, StreamingContext context) {
				OptimizedAttributes = null;
				ssENPDFReportType = new ENPDFReportTypeEntityRecord(null);
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fields[0] .FieldType.IsSerializable)
				ssENPDFReportType = (ENPDFReportTypeEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			}

			public void RecursiveReset() {
				ssENPDFReportType.RecursiveReset();
			}

			public void InternalRecursiveSave() {
				ssENPDFReportType.InternalRecursiveSave();
			}


			public RCPDFReportTypeRecord Duplicate() {
				RCPDFReportTypeRecord t;
				t.ssENPDFReportType = (ENPDFReportTypeEntityRecord) this.ssENPDFReportType.Duplicate();
				t.OptimizedAttributes = null;
				return t;
			}

			IRecord IRecord.Duplicate() {
				return Duplicate();
			}

			public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
				System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
				if (fieldName != null) {
					VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				}
				if (detailLevel > 0) {
					ssENPDFReportType.ToXml(this, recordElem, "PDFReportType", detailLevel - 1);
				} else {
					VarValue.AppendDeferredEvaluationElement(recordElem);
				}
			}

			public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
				String head = VarValue.GetHead(fields);
				String tail = VarValue.GetTail(fields);
				variable.Found = false;
				if (head == "pdfreporttype") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".PDFReportType")) variable.Value = ssENPDFReportType; else variable.Optimized = true;
					variable.SetFieldName("pdfreporttype");
				}
				if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
			}

			public bool ChangedAttributeGet(GlobalObjectKey key) {
				return ssENPDFReportType.ChangedAttributeGet(key);
			}

			public bool OptimizedAttributeGet(GlobalObjectKey key) {
				return ssENPDFReportType.OptimizedAttributeGet(key);
			}

			public object AttributeGet(GlobalObjectKey key) {
				if (key == IdPDFReportType) {
					return ssENPDFReportType;
				} else {
					throw new Exception("Invalid key");
				}
			}
			public void FillFromOther(IRecord other) {
				if (other == null) return;
				ssENPDFReportType.FillFromOther((IRecord) other.AttributeGet(IdPDFReportType));
			}
		} // RCPDFReportTypeRecord
		/// <summary>
		/// RecordList type <code>RLPDFReportTypeRecordList</code> that represents a record list of
		///  <code>PDFReportType</code>
		/// </summary>
		[Serializable()]
		public partial class RLPDFReportTypeRecordList: GenericRecordList<RCPDFReportTypeRecord>, IEnumerable, IEnumerator, ISerializable {
			public static void EnsureInitialized() {}

			protected override RCPDFReportTypeRecord GetElementDefaultValue() {
				return new RCPDFReportTypeRecord("");
			}

			public T[] ToArray<T>(Func<RCPDFReportTypeRecord, T> converter) {
				return ToArray(this, converter);
			}

			public static T[] ToArray<T>(RLPDFReportTypeRecordList recordlist, Func<RCPDFReportTypeRecord, T> converter) {
				T[] result = new T[recordlist.Length];
				recordlist.StartIteration();
				while (!recordlist.Eof) {
					result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
					recordlist.Advance();
				}
				recordlist.EndIteration();
				return result;
			}

			public static RLPDFReportTypeRecordList ToList<T>(T[] array, Func <T, RCPDFReportTypeRecord> converter) {
				RLPDFReportTypeRecordList result = new RLPDFReportTypeRecordList();
				if (array != null) {
					foreach(T item in array) {
						result.Append(converter(item));
					}
				}
				return result;
			}
			/// <summary>
			/// Default Constructor
			/// </summary>
			public RLPDFReportTypeRecordList(): base() {
			}

			/// <summary>
			/// Constructor with transaction parameter
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLPDFReportTypeRecordList(IDbTransaction trans): base(trans) {
			}

			/// <summary>
			/// Constructor with transaction parameter and alternate read method
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLPDFReportTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
				this.alternateReadDBMethod = alternateReadDBMethod;
			}

			/// <summary>
			/// Constructor declaration for serialization
			/// </summary>
			/// <param name="info"> SerializationInfo</param>
			/// <param name="context"> StreamingContext</param>
			public RLPDFReportTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
			}

			public override BitArray[] GetDefaultOptimizedValues() {
				BitArray[] def = new BitArray[1];
				def[0] = new BitArray(5, false);
				return def;
			}
			/// <summary>
			/// Create as new list
			/// </summary>
			/// <returns>The new record list</returns>
			protected override OSList<RCPDFReportTypeRecord> NewList() {
				return new RLPDFReportTypeRecordList();
			}


		} // RLPDFReportTypeRecordList

		/// <summary>
		/// RecordList type <code>RLPDFReportTypeList</code> that represents a record list of <code>Text, Text,
		///  Boolean, Integer, Integer</code>
		/// </summary>
		[Serializable()]
		public partial class RLPDFReportTypeList: GenericRecordList<ENPDFReportTypeEntityRecord>, IEnumerable, IEnumerator, ISerializable {
			public static void EnsureInitialized() {}

			protected override ENPDFReportTypeEntityRecord GetElementDefaultValue() {
				return new ENPDFReportTypeEntityRecord("");
			}

			public T[] ToArray<T>(Func<ENPDFReportTypeEntityRecord, T> converter) {
				return ToArray(this, converter);
			}

			public static T[] ToArray<T>(RLPDFReportTypeList recordlist, Func<ENPDFReportTypeEntityRecord, T> converter) {
				T[] result = new T[recordlist.Length];
				recordlist.StartIteration();
				while (!recordlist.Eof) {
					result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
					recordlist.Advance();
				}
				recordlist.EndIteration();
				return result;
			}

			public static RLPDFReportTypeList ToList<T>(T[] array, Func <T, ENPDFReportTypeEntityRecord> converter) {
				RLPDFReportTypeList result = new RLPDFReportTypeList();
				if (array != null) {
					foreach(T item in array) {
						result.Append(converter(item));
					}
				}
				return result;
			}
			/// <summary>
			/// Default Constructor
			/// </summary>
			public RLPDFReportTypeList(): base() {
			}

			/// <summary>
			/// Constructor with transaction parameter
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLPDFReportTypeList(IDbTransaction trans): base(trans) {
			}

			/// <summary>
			/// Constructor with transaction parameter and alternate read method
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLPDFReportTypeList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
				this.alternateReadDBMethod = alternateReadDBMethod;
			}

			/// <summary>
			/// Constructor declaration for serialization
			/// </summary>
			/// <param name="info"> SerializationInfo</param>
			/// <param name="context"> StreamingContext</param>
			public RLPDFReportTypeList(SerializationInfo info, StreamingContext context): base(info, context) {
			}

			public override BitArray[] GetDefaultOptimizedValues() {
				BitArray[] def = new BitArray[0];
				return def;
			}
			/// <summary>
			/// Create as new list
			/// </summary>
			/// <returns>The new record list</returns>
			protected override OSList<ENPDFReportTypeEntityRecord> NewList() {
				return new RLPDFReportTypeList();
			}


		} // RLPDFReportTypeList
		public partial class ExtendedActions {
			/// <summary>
			/// Action: GetPDFReportType
			/// </summary>

			public static void GetPDFReportType(HeContext heContext, int inParamId, out RCPDFReportTypeRecord outParamRecord) {
				outParamRecord = new RCPDFReportTypeRecord(null);

				try {
					outParamRecord = ENPDFReportTypeEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [ID]" +
						 ", [LABEL]" +
						 ", [ORDER]" +
						 ", [IS_ACTIVE]" +
						 ", [URL]" +
						 " FROM " + ENPDFReportTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [ID] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetPDFReportType", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENPDFReportTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			}

		}
	}

	namespace ssCaseConferencing {
		[XmlType("PDFReportType")]
		public class WORCPDFReportTypeRecord {
			[System.Xml.Serialization.XmlElement("Id")]
			public int varWSId;

			[System.Xml.Serialization.XmlElement("Label")]
			public string varWSLabel;

			[System.Xml.Serialization.XmlElement("Order")]
			public int varWSOrder;

			[System.Xml.Serialization.XmlElement("Is_Active")]
			public bool varWSIs_Active;

			[System.Xml.Serialization.XmlElement("URL")]
			public string varWSURL;

			public WORCPDFReportTypeRecord() {
				varWSId = (int) 0;
				varWSLabel = (string) "";
				varWSOrder = (int) 0;
				varWSIs_Active = (bool) false;
				varWSURL = (string) "";
			}

			public WORCPDFReportTypeRecord(ENPDFReportTypeEntityRecord r) {
				varWSId = (int) r.ssId;
				varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
				varWSOrder = (int) r.ssOrder;
				varWSIs_Active = (bool) r.ssIs_Active;
				varWSURL = BaseAppUtils.RemoveControlChars(r.ssURL);
			}

			public static RLPDFReportTypeList ToRecordList(WORCPDFReportTypeRecord[] array) {
				RLPDFReportTypeList rl = new RLPDFReportTypeList();
				if (array != null) {
					foreach(WORCPDFReportTypeRecord val in array) {
						rl.Append(val);
					}
				}
				return rl;
			}

			public static WORCPDFReportTypeRecord[] FromRecordList(RLPDFReportTypeList rl) {
				WORCPDFReportTypeRecord[] array = new WORCPDFReportTypeRecord[rl == null ? 0: rl.Length];
				for (int i = 0; i < array.Length; i++) {
					array[i] = rl.Data[i];
				}
				return array;
			}
		}
	}

	namespace ssCaseConferencing {
		partial struct RCPDFReportTypeRecord {
			public static implicit operator WORCPDFReportTypeRecord(RCPDFReportTypeRecord r) {
				return new WORCPDFReportTypeRecord(r.ssENPDFReportType);
			}

			public static implicit operator RCPDFReportTypeRecord(WORCPDFReportTypeRecord w) {
				RCPDFReportTypeRecord r = new RCPDFReportTypeRecord("");
				if (w != null) {
					r.ssENPDFReportType = w;
				}
				return r;
			}

		}

		partial struct ENPDFReportTypeEntityRecord {
			public static implicit operator WORCPDFReportTypeRecord(ENPDFReportTypeEntityRecord r) {
				return new WORCPDFReportTypeRecord(r);
			}

			public static implicit operator ENPDFReportTypeEntityRecord(WORCPDFReportTypeRecord w) {
				ENPDFReportTypeEntityRecord r = new ENPDFReportTypeEntityRecord("");
				if (w != null) {
					r.ssId = (int) w.varWSId;
					r.ssLabel = ((string) w.varWSLabel ?? "");
					r.ssOrder = (int) w.varWSOrder;
					r.ssIs_Active = (bool) w.varWSIs_Active;
					r.ssURL = ((string) w.varWSURL ?? "");
				}
				return r;
			}

		}
	}


	namespace ssCaseConferencing {
		[Serializable()]
		public partial class WORLPDFReportTypeRecordList {
			public WORCPDFReportTypeRecord[] Array;


			public WORLPDFReportTypeRecordList(WORCPDFReportTypeRecord[] r) {
				if (r == null)
				Array = new WORCPDFReportTypeRecord[0];
				else
				Array = r;
			}
			public WORLPDFReportTypeRecordList() {
				Array = new WORCPDFReportTypeRecord[0];
			}

			public WORLPDFReportTypeRecordList(RLPDFReportTypeRecordList rl) {
				rl=(RLPDFReportTypeRecordList) rl.Duplicate();
				Array = new WORCPDFReportTypeRecord[rl.Length];
				while (!rl.Eof) {
					Array[rl.CurrentRowNumber] = new WORCPDFReportTypeRecord(rl.CurrentRec);
					rl.Advance();
				}
			}

		}
	}

	namespace ssCaseConferencing {
		partial class RLPDFReportTypeRecordList {
			public static implicit operator RLPDFReportTypeRecordList(WORCPDFReportTypeRecord[] array) {
				RLPDFReportTypeRecordList rl = new RLPDFReportTypeRecordList();
				if (array != null) {
					foreach(WORCPDFReportTypeRecord val in array) {
						rl.Append((RCPDFReportTypeRecord) val);
					}
				}
				return rl;
			}
			public static implicit operator WORCPDFReportTypeRecord[](RLPDFReportTypeRecordList rl) {
				WORCPDFReportTypeRecord[] array = new WORCPDFReportTypeRecord[rl == null ? 0: rl.Length];
				for (int i = 0; i < array.Length; i++) {
					array[i] = (RCPDFReportTypeRecord) rl.Data[i];
				}
				return array;
			}
		}
	}

	namespace ssCaseConferencing {
		partial class WORLPDFReportTypeRecordList {
			public static implicit operator RLPDFReportTypeRecordList(WORLPDFReportTypeRecordList w) {
				return w.Array;
			}
			public static implicit operator WORLPDFReportTypeRecordList(RLPDFReportTypeRecordList rl) {
				return new WORLPDFReportTypeRecordList(rl);
			}
			public static implicit operator WORCPDFReportTypeRecord[](WORLPDFReportTypeRecordList w) {
				if (w != null) {
					return w.Array;
				}
				return null;
			}
			public static implicit operator WORLPDFReportTypeRecordList(WORCPDFReportTypeRecord[] array) {
				return new WORLPDFReportTypeRecordList(array);
			}
		}
	}

