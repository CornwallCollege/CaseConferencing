/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENTargetEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENTargetEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENTargetEntity.eSpaceId;
	} // ENTargetEntity

	/// <summary>
	/// Entity <code>ENTargetEntityRecord</code> that represents the Service Studio entity
	///  <code>Target</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Target", "cXT3Ptsh9E641i+K7szk8w", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Target", "")]
	[Serializable()]
	public partial struct ENTargetEntityRecord: ISerializable, ITypedRecord<ENTargetEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*2LBX4UEkjUaCVc+i01C_BA");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*17Rvb461Vkilw1w9UQyOMg");
		private static readonly GlobalObjectKey IdOfferingCode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*3yby6rvSCU6Fkso4M+ceHQ");
		private static readonly GlobalObjectKey IdOfferingName = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*taXb8bCgWU+TazHnTakM_g");
		private static readonly GlobalObjectKey IdTargetTypeId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*ft1SCp4mqk+EF6RdV9eB0w");
		private static readonly GlobalObjectKey IdTargetHeader = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*hY9Sb84Od0WCwBcXhinOIA");
		private static readonly GlobalObjectKey IdTargetDescription = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*ZvTUJzsbYEmdmVoHQKlxqg");
		private static readonly GlobalObjectKey IdTargetStatusId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*7pNYQgZxzkCCleOsAAybQQ");
		private static readonly GlobalObjectKey IdCompletionDate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*+hzE30TvvUegS4q1L1g80g");
		private static readonly GlobalObjectKey IdTargetDate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*MwtlaWIS_UqKpngqaftRfQ");
		private static readonly GlobalObjectKey IdOfferingCategory = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*MlQZ34VtjUGo9bDq5awDsw");
		private static readonly GlobalObjectKey IdCompletedPerc = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*D3JO7+u9NUGk+Gfefm7tPA");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*nf76l+2TJ02pe5JtZYRiBQ");
		private static readonly GlobalObjectKey IdCreatedAt = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*z3Ex5MysxkOwDxLdePFOrQ");
		private static readonly GlobalObjectKey IdTargetNote = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*DCdoIgyOwEa6FAn1ixygYA");
		private static readonly GlobalObjectKey IdTargetNote_CreatedOn = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*9J4cLP7gxk+rCqvUz49SpQ");
		private static readonly GlobalObjectKey IdisStudentTarget = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*yUM2MtsaDU+CCwNhkYkqcw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(17, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OFFERINGCODE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("OfferingCode")]
		private string _ssOfferingCode;
		public string ssOfferingCode {
			get {
				return _ssOfferingCode;
			}
			set {
				if ((_ssOfferingCode!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssOfferingCode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OFFERINGNAME", 200, false, false, false)]
		[System.Xml.Serialization.XmlElement("OfferingName")]
		private string _ssOfferingName;
		public string ssOfferingName {
			get {
				return _ssOfferingName;
			}
			set {
				if ((_ssOfferingName!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssOfferingName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TARGETTYPEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("TargetTypeId")]
		private int _ssTargetTypeId;
		public int ssTargetTypeId {
			get {
				return _ssTargetTypeId;
			}
			set {
				if ((_ssTargetTypeId!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssTargetTypeId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TARGETHEADER", 250, false, false, false)]
		[System.Xml.Serialization.XmlElement("TargetHeader")]
		private string _ssTargetHeader;
		public string ssTargetHeader {
			get {
				return _ssTargetHeader;
			}
			set {
				if ((_ssTargetHeader!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssTargetHeader = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TARGETDESCRIPTION", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("TargetDescription")]
		private string _ssTargetDescription;
		public string ssTargetDescription {
			get {
				return _ssTargetDescription;
			}
			set {
				if ((_ssTargetDescription!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssTargetDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TARGETSTATUSID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("TargetStatusId")]
		private int _ssTargetStatusId;
		public int ssTargetStatusId {
			get {
				return _ssTargetStatusId;
			}
			set {
				if ((_ssTargetStatusId!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssTargetStatusId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETIONDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompletionDate")]
		private DateTime _ssCompletionDate;
		public DateTime ssCompletionDate {
			get {
				return _ssCompletionDate;
			}
			set {
				if ((_ssCompletionDate!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssCompletionDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TARGETDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("TargetDate")]
		private DateTime _ssTargetDate;
		public DateTime ssTargetDate {
			get {
				return _ssTargetDate;
			}
			set {
				if ((_ssTargetDate!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssTargetDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OFFERINGCATEGORY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("OfferingCategory")]
		private int _ssOfferingCategory;
		public int ssOfferingCategory {
			get {
				return _ssOfferingCategory;
			}
			set {
				if ((_ssOfferingCategory!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssOfferingCategory = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETEDPERC", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompletedPerc")]
		private int _ssCompletedPerc;
		public int ssCompletedPerc {
			get {
				return _ssCompletedPerc;
			}
			set {
				if ((_ssCompletedPerc!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssCompletedPerc = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDAT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedAt")]
		private DateTime _ssCreatedAt;
		public DateTime ssCreatedAt {
			get {
				return _ssCreatedAt;
			}
			set {
				if ((_ssCreatedAt!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssCreatedAt = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TARGETNOTE", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("TargetNote")]
		private string _ssTargetNote;
		public string ssTargetNote {
			get {
				return _ssTargetNote;
			}
			set {
				if ((_ssTargetNote!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssTargetNote = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TARGETNOTE_CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("TargetNote_CreatedOn")]
		private DateTime _ssTargetNote_CreatedOn;
		public DateTime ssTargetNote_CreatedOn {
			get {
				return _ssTargetNote_CreatedOn;
			}
			set {
				if ((_ssTargetNote_CreatedOn!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssTargetNote_CreatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISSTUDENTTARGET", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("isStudentTarget")]
		private bool _ssisStudentTarget;
		public bool ssisStudentTarget {
			get {
				return _ssisStudentTarget;
			}
			set {
				if ((_ssisStudentTarget!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssisStudentTarget = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENTargetEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(17, true);
			OptimizedAttributes = new BitArray(17, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssOfferingCode = "";
			_ssOfferingName = "";
			_ssTargetTypeId = 0;
			_ssTargetHeader = "";
			_ssTargetDescription = "";
			_ssTargetStatusId = 0;
			_ssCompletionDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssTargetDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssOfferingCategory = 0;
			_ssCompletedPerc = 0;
			_ssCreatedBy = 0;
			_ssCreatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssTargetNote = "";
			_ssTargetNote_CreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssisStudentTarget = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Target.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "Target.StudentReference", "");
			ssOfferingCode = r.ReadText(index++, "Target.OfferingCode", "");
			ssOfferingName = r.ReadText(index++, "Target.OfferingName", "");
			ssTargetTypeId = r.ReadEntityReference(index++, "Target.TargetTypeId", 0);
			ssTargetHeader = r.ReadText(index++, "Target.TargetHeader", "");
			ssTargetDescription = r.ReadText(index++, "Target.TargetDescription", "");
			ssTargetStatusId = r.ReadEntityReference(index++, "Target.TargetStatusId", 0);
			ssCompletionDate = r.ReadDate(index++, "Target.CompletionDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssTargetDate = r.ReadDate(index++, "Target.TargetDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssOfferingCategory = r.ReadEntityReference(index++, "Target.OfferingCategory", 0);
			ssCompletedPerc = r.ReadInteger(index++, "Target.CompletedPerc", 0);
			ssCreatedBy = r.ReadEntityReference(index++, "Target.CreatedBy", 0);
			ssCreatedAt = r.ReadDateTime(index++, "Target.CreatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssTargetNote = r.ReadText(index++, "Target.TargetNote", "");
			ssTargetNote_CreatedOn = r.ReadDateTime(index++, "Target.TargetNote_CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssisStudentTarget = r.ReadBoolean(index++, "Target.isStudentTarget", false);
			ChangedAttributes = new BitArray(17, false);
			OptimizedAttributes = new BitArray(17, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENTargetEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENTargetEntityRecord a, ENTargetEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssOfferingCode != b.ssOfferingCode) return false;
			if (a.ssOfferingName != b.ssOfferingName) return false;
			if (a.ssTargetTypeId != b.ssTargetTypeId) return false;
			if (a.ssTargetHeader != b.ssTargetHeader) return false;
			if (a.ssTargetDescription != b.ssTargetDescription) return false;
			if (a.ssTargetStatusId != b.ssTargetStatusId) return false;
			if (a.ssCompletionDate != b.ssCompletionDate) return false;
			if (a.ssTargetDate != b.ssTargetDate) return false;
			if (a.ssOfferingCategory != b.ssOfferingCategory) return false;
			if (a.ssCompletedPerc != b.ssCompletedPerc) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssCreatedAt != b.ssCreatedAt) return false;
			if (a.ssTargetNote != b.ssTargetNote) return false;
			if (a.ssTargetNote_CreatedOn != b.ssTargetNote_CreatedOn) return false;
			if (a.ssisStudentTarget != b.ssisStudentTarget) return false;
			return true;
		}

		public static bool operator != (ENTargetEntityRecord a, ENTargetEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENTargetEntityRecord)) return false;
			return (this == (ENTargetEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssOfferingCode.GetHashCode()
				^ ssOfferingName.GetHashCode()
				^ ssTargetTypeId.GetHashCode()
				^ ssTargetHeader.GetHashCode()
				^ ssTargetDescription.GetHashCode()
				^ ssTargetStatusId.GetHashCode()
				^ ssCompletionDate.GetHashCode()
				^ ssTargetDate.GetHashCode()
				^ ssOfferingCategory.GetHashCode()
				^ ssCompletedPerc.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssCreatedAt.GetHashCode()
				^ ssTargetNote.GetHashCode()
				^ ssTargetNote_CreatedOn.GetHashCode()
				^ ssisStudentTarget.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENTargetEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(17, true);
			OptimizedAttributes = new BitArray(17, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssOfferingCode = "";
			_ssOfferingName = "";
			_ssTargetTypeId = 0;
			_ssTargetHeader = "";
			_ssTargetDescription = "";
			_ssTargetStatusId = 0;
			_ssCompletionDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssTargetDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssOfferingCategory = 0;
			_ssCompletedPerc = 0;
			_ssCreatedBy = 0;
			_ssCreatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssTargetNote = "";
			_ssTargetNote_CreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssisStudentTarget = false;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssOfferingCode = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssOfferingName = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssTargetTypeId = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssTargetHeader = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssTargetDescription = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssTargetStatusId = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssCompletionDate = (DateTime) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssTargetDate = (DateTime) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssOfferingCategory = (int) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssCompletedPerc = (int) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssCreatedAt = (DateTime) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssTargetNote = (string) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssTargetNote_CreatedOn = (DateTime) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssisStudentTarget = (bool) info.GetValue(fields[16] .Name, fields[16] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENTargetEntityRecord Duplicate() {
			ENTargetEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssOfferingCode = this._ssOfferingCode;
			t._ssOfferingName = this._ssOfferingName;
			t._ssTargetTypeId = this._ssTargetTypeId;
			t._ssTargetHeader = this._ssTargetHeader;
			t._ssTargetDescription = this._ssTargetDescription;
			t._ssTargetStatusId = this._ssTargetStatusId;
			t._ssCompletionDate = this._ssCompletionDate;
			t._ssTargetDate = this._ssTargetDate;
			t._ssOfferingCategory = this._ssOfferingCategory;
			t._ssCompletedPerc = this._ssCompletedPerc;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssCreatedAt = this._ssCreatedAt;
			t._ssTargetNote = this._ssTargetNote;
			t._ssTargetNote_CreatedOn = this._ssTargetNote_CreatedOn;
			t._ssisStudentTarget = this._ssisStudentTarget;
			t.ChangedAttributes = new BitArray(17);
			t.OptimizedAttributes = new BitArray(17);
			for (int i = 0; i < 17; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCode")) VarValue.AppendAttribute(recordElem, "OfferingCode", ssOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingName")) VarValue.AppendAttribute(recordElem, "OfferingName", ssOfferingName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetTypeId")) VarValue.AppendAttribute(recordElem, "TargetTypeId", ssTargetTypeId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "TargetTypeId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetHeader")) VarValue.AppendAttribute(recordElem, "TargetHeader", ssTargetHeader, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TargetHeader");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetDescription")) VarValue.AppendAttribute(recordElem, "TargetDescription", ssTargetDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TargetDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetStatusId")) VarValue.AppendAttribute(recordElem, "TargetStatusId", ssTargetStatusId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "TargetStatusId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletionDate")) VarValue.AppendAttribute(recordElem, "CompletionDate", ssCompletionDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "CompletionDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetDate")) VarValue.AppendAttribute(recordElem, "TargetDate", ssTargetDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "TargetDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCategory")) VarValue.AppendAttribute(recordElem, "OfferingCategory", ssOfferingCategory, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCategory");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletedPerc")) VarValue.AppendAttribute(recordElem, "CompletedPerc", ssCompletedPerc, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CompletedPerc");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedAt")) VarValue.AppendAttribute(recordElem, "CreatedAt", ssCreatedAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetNote")) VarValue.AppendAttribute(recordElem, "TargetNote", ssTargetNote, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TargetNote");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetNote_CreatedOn")) VarValue.AppendAttribute(recordElem, "TargetNote_CreatedOn", ssTargetNote_CreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "TargetNote_CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".isStudentTarget")) VarValue.AppendAttribute(recordElem, "isStudentTarget", ssisStudentTarget, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "isStudentTarget");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "offeringcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCode")) variable.Value = ssOfferingCode; else variable.Optimized = true;
			} else if (head == "offeringname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingName")) variable.Value = ssOfferingName; else variable.Optimized = true;
			} else if (head == "targettypeid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetTypeId")) variable.Value = ssTargetTypeId; else variable.Optimized = true;
			} else if (head == "targetheader") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetHeader")) variable.Value = ssTargetHeader; else variable.Optimized = true;
			} else if (head == "targetdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetDescription")) variable.Value = ssTargetDescription; else variable.Optimized = true;
			} else if (head == "targetstatusid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetStatusId")) variable.Value = ssTargetStatusId; else variable.Optimized = true;
			} else if (head == "completiondate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletionDate")) variable.Value = ssCompletionDate; else variable.Optimized = true;
			} else if (head == "targetdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetDate")) variable.Value = ssTargetDate; else variable.Optimized = true;
			} else if (head == "offeringcategory") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCategory")) variable.Value = ssOfferingCategory; else variable.Optimized = true;
			} else if (head == "completedperc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletedPerc")) variable.Value = ssCompletedPerc; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "createdat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedAt")) variable.Value = ssCreatedAt; else variable.Optimized = true;
			} else if (head == "targetnote") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetNote")) variable.Value = ssTargetNote; else variable.Optimized = true;
			} else if (head == "targetnote_createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetNote_CreatedOn")) variable.Value = ssTargetNote_CreatedOn; else variable.Optimized = true;
			} else if (head == "isstudenttarget") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".isStudentTarget")) variable.Value = ssisStudentTarget; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdOfferingCode)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdOfferingName)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdTargetTypeId)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdTargetHeader)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdTargetDescription)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdTargetStatusId)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdCompletionDate)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdTargetDate)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdOfferingCategory)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdCompletedPerc)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdCreatedAt)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdTargetNote)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdTargetNote_CreatedOn)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdisStudentTarget)) {
				return ChangedAttributes[16];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdOfferingCode)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdOfferingName)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdTargetTypeId)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdTargetHeader)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdTargetDescription)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdTargetStatusId)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdCompletionDate)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdTargetDate)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdOfferingCategory)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdCompletedPerc)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdCreatedAt)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdTargetNote)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdTargetNote_CreatedOn)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdisStudentTarget)) {
				return OptimizedAttributes[16];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdOfferingCode) {
				return ssOfferingCode;
			} else if (key == IdOfferingName) {
				return ssOfferingName;
			} else if (key == IdTargetTypeId) {
				return ssTargetTypeId;
			} else if (key == IdTargetHeader) {
				return ssTargetHeader;
			} else if (key == IdTargetDescription) {
				return ssTargetDescription;
			} else if (key == IdTargetStatusId) {
				return ssTargetStatusId;
			} else if (key == IdCompletionDate) {
				return ssCompletionDate;
			} else if (key == IdTargetDate) {
				return ssTargetDate;
			} else if (key == IdOfferingCategory) {
				return ssOfferingCategory;
			} else if (key == IdCompletedPerc) {
				return ssCompletedPerc;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdCreatedAt) {
				return ssCreatedAt;
			} else if (key == IdTargetNote) {
				return ssTargetNote;
			} else if (key == IdTargetNote_CreatedOn) {
				return ssTargetNote_CreatedOn;
			} else if (key == IdisStudentTarget) {
				return ssisStudentTarget;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(17);
			OptimizedAttributes = new BitArray(17);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssOfferingCode = (string) other.AttributeGet(IdOfferingCode);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdOfferingCode);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOfferingCode);
			ssOfferingName = (string) other.AttributeGet(IdOfferingName);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdOfferingName);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdOfferingName);
			ssTargetTypeId = (int) other.AttributeGet(IdTargetTypeId);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdTargetTypeId);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdTargetTypeId);
			ssTargetHeader = (string) other.AttributeGet(IdTargetHeader);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdTargetHeader);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdTargetHeader);
			ssTargetDescription = (string) other.AttributeGet(IdTargetDescription);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdTargetDescription);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdTargetDescription);
			ssTargetStatusId = (int) other.AttributeGet(IdTargetStatusId);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdTargetStatusId);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdTargetStatusId);
			ssCompletionDate = (DateTime) other.AttributeGet(IdCompletionDate);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdCompletionDate);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdCompletionDate);
			ssTargetDate = (DateTime) other.AttributeGet(IdTargetDate);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdTargetDate);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdTargetDate);
			ssOfferingCategory = (int) other.AttributeGet(IdOfferingCategory);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdOfferingCategory);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdOfferingCategory);
			ssCompletedPerc = (int) other.AttributeGet(IdCompletedPerc);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdCompletedPerc);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdCompletedPerc);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdCreatedBy);
			ssCreatedAt = (DateTime) other.AttributeGet(IdCreatedAt);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdCreatedAt);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdCreatedAt);
			ssTargetNote = (string) other.AttributeGet(IdTargetNote);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdTargetNote);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdTargetNote);
			ssTargetNote_CreatedOn = (DateTime) other.AttributeGet(IdTargetNote_CreatedOn);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdTargetNote_CreatedOn);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdTargetNote_CreatedOn);
			ssisStudentTarget = (bool) other.AttributeGet(IdisStudentTarget);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdisStudentTarget);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdisStudentTarget);
		}
	} // ENTargetEntityRecord
	/// <summary>
	/// Structure <code>RCTargetRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTargetRecord: ISerializable, ITypedRecord<RCTargetRecord> {
		private static readonly GlobalObjectKey IdTarget = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*t3qfNkN0E4nmQK_NGFBTGw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Target")]
		public ENTargetEntityRecord ssENTarget;


		public static implicit operator ENTargetEntityRecord(RCTargetRecord r) {
			return r.ssENTarget;
		}

		public static implicit operator RCTargetRecord(ENTargetEntityRecord r) {
			RCTargetRecord res = new RCTargetRecord(null);
			res.ssENTarget = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENTarget.ChangedAttributes = value;
			}
			get {
				return ssENTarget.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCTargetRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENTarget = new ENTargetEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(17, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENTarget.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENTarget.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENTarget.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENTarget.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTargetRecord r) {
			this = r;
		}


		public static bool operator == (RCTargetRecord a, RCTargetRecord b) {
			if (a.ssENTarget != b.ssENTarget) return false;
			return true;
		}

		public static bool operator != (RCTargetRecord a, RCTargetRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTargetRecord)) return false;
			return (this == (RCTargetRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENTarget.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTargetRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENTarget = new ENTargetEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENTarget = (ENTargetEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENTarget.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENTarget.InternalRecursiveSave();
		}


		public RCTargetRecord Duplicate() {
			RCTargetRecord t;
			t.ssENTarget = (ENTargetEntityRecord) this.ssENTarget.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENTarget.ToXml(this, recordElem, "Target", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "target") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Target")) variable.Value = ssENTarget; else variable.Optimized = true;
				variable.SetFieldName("target");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENTarget.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENTarget.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTarget) {
				return ssENTarget;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENTarget.FillFromOther((IRecord) other.AttributeGet(IdTarget));
		}
	} // RCTargetRecord
	/// <summary>
	/// RecordList type <code>RLTargetRecordList</code> that represents a record list of
	///  <code>Target</code>
	/// </summary>
	[Serializable()]
	public partial class RLTargetRecordList: GenericRecordList<RCTargetRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTargetRecord GetElementDefaultValue() {
			return new RCTargetRecord("");
		}

		public T[] ToArray<T>(Func<RCTargetRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTargetRecordList recordlist, Func<RCTargetRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTargetRecordList ToList<T>(T[] array, Func <T, RCTargetRecord> converter) {
			RLTargetRecordList result = new RLTargetRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTargetRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTargetRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTargetRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTargetRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(17, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTargetRecord> NewList() {
			return new RLTargetRecordList();
		}


	} // RLTargetRecordList

	/// <summary>
	/// RecordList type <code>RLTargetList</code> that represents a record list of <code>StudentIdentifier,
	///  TargetTypeIdentifier, TargetStatusIdentifier, CategoryIdentifier, UserIdentifier, Text, Text, Text
	/// , Text, Text, Date, Date, DateTime, DateTime, Boolean, Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLTargetList: GenericRecordList<ENTargetEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENTargetEntityRecord GetElementDefaultValue() {
			return new ENTargetEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENTargetEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTargetList recordlist, Func<ENTargetEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTargetList ToList<T>(T[] array, Func <T, ENTargetEntityRecord> converter) {
			RLTargetList result = new RLTargetList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTargetList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTargetList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTargetList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTargetList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENTargetEntityRecord> NewList() {
			return new RLTargetList();
		}


	} // RLTargetList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateTarget
		/// </summary>

		public static void CreateTarget(HeContext heContext, RCTargetRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTargetEntity.eSpaceId;
				ENTargetEntityRecord ssENTarget = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENTargetEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [OFFERINGCODE]" +
					 ", [OFFERINGNAME]" +
					 ", [TARGETTYPEID]" +
					 ", [TARGETHEADER]" +
					 ", [TARGETDESCRIPTION]" +
					 ", [TARGETSTATUSID]" +
					 ", [COMPLETIONDATE]" +
					 ", [TARGETDATE]" +
					 ", [OFFERINGCATEGORY]" +
					 ", [COMPLETEDPERC]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDAT]" +
					 ", [TARGETNOTE]" +
					 ", [TARGETNOTE_CREATEDON]" +
					 ", [ISSTUDENTTARGET]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssOfferingCode" +
					 ", @ssOfferingName" +
					 ", @ssTargetTypeId" +
					 ", @ssTargetHeader" +
					 ", @ssTargetDescription" +
					 ", @ssTargetStatusId" +
					 ", @ssCompletionDate" +
					 ", @ssTargetDate" +
					 ", @ssOfferingCategory" +
					 ", @ssCompletedPerc" +
					 ", @ssCreatedBy" +
					 ", @ssCreatedAt" +
					 ", @ssTargetNote" +
					 ", @ssTargetNote_CreatedOn" +
					 ", @ssisStudentTarget" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENTarget.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENTarget.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENTarget.ssOfferingCode);
					insertSqlCmd.CreateParameter("@ssOfferingName", DbType.String, ssENTarget.ssOfferingName);
					insertSqlCmd.CreateParameter("@ssTargetTypeId", DbType.Int32, ssENTarget.ssTargetTypeId);
					insertSqlCmd.CreateParameter("@ssTargetHeader", DbType.String, ssENTarget.ssTargetHeader);
					insertSqlCmd.CreateParameter("@ssTargetDescription", DbType.String, ssENTarget.ssTargetDescription);
					insertSqlCmd.CreateParameter("@ssTargetStatusId", DbType.Int32, ssENTarget.ssTargetStatusId);
					insertSqlCmd.CreateParameter("@ssCompletionDate", DbType.DateTime, ssENTarget.ssCompletionDate);
					insertSqlCmd.CreateParameter("@ssTargetDate", DbType.DateTime, ssENTarget.ssTargetDate);
					insertSqlCmd.CreateParameter("@ssOfferingCategory", DbType.Int32, ssENTarget.ssOfferingCategory);
					insertSqlCmd.CreateParameter("@ssCompletedPerc", DbType.Int32, ssENTarget.ssCompletedPerc);
					if ((ssENTarget.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENTarget.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENTarget.ssCreatedAt);
					insertSqlCmd.CreateParameter("@ssTargetNote", DbType.String, ssENTarget.ssTargetNote);
					insertSqlCmd.CreateParameter("@ssTargetNote_CreatedOn", DbType.DateTime, ssENTarget.ssTargetNote_CreatedOn);
					insertSqlCmd.CreateParameter("@ssisStudentTarget", DbType.Boolean, ssENTarget.ssisStudentTarget);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateTarget", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateTarget
		/// </summary>

		public static void CreateOrUpdateTarget(HeContext heContext, BitArray usedFields, RCTargetRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTargetEntity.eSpaceId;
				ENTargetEntityRecord ssENTarget = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(17, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENTargetEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGCODE] = @ssOfferingCode"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGNAME] = @ssOfferingName"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETTYPEID] = @ssTargetTypeId"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETHEADER] = @ssTargetHeader"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETDESCRIPTION] = @ssTargetDescription"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETSTATUSID] = @ssTargetStatusId"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONDATE] = @ssCompletionDate"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETDATE] = @ssTargetDate"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGCATEGORY] = @ssOfferingCategory"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETEDPERC] = @ssCompletedPerc"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETNOTE] = @ssTargetNote"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETNOTE_CREATEDON] = @ssTargetNote_CreatedOn"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISSTUDENTTARGET] = @ssisStudentTarget"): parameters);
					string whereCondition = " WHERE [ID] = @ssENTargetssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENTarget.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENTarget.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENTarget.ssOfferingCode);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssOfferingName", DbType.String, ssENTarget.ssOfferingName);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssTargetTypeId", DbType.Int32, ssENTarget.ssTargetTypeId);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssTargetHeader", DbType.String, ssENTarget.ssTargetHeader);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssTargetDescription", DbType.String, ssENTarget.ssTargetDescription);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssTargetStatusId", DbType.Int32, ssENTarget.ssTargetStatusId);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssCompletionDate", DbType.DateTime, ssENTarget.ssCompletionDate);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssTargetDate", DbType.DateTime, ssENTarget.ssTargetDate);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssOfferingCategory", DbType.Int32, ssENTarget.ssOfferingCategory);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssCompletedPerc", DbType.Int32, ssENTarget.ssCompletedPerc);
						counter++;
					}
					if (usedFields[12]) {
						if ((ssENTarget.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENTarget.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENTarget.ssCreatedAt);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssTargetNote", DbType.String, ssENTarget.ssTargetNote);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssTargetNote_CreatedOn", DbType.DateTime, ssENTarget.ssTargetNote_CreatedOn);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssisStudentTarget", DbType.Boolean, ssENTarget.ssisStudentTarget);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISSTUDENTTARGET] = [ISSTUDENTTARGET]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENTargetssId", DbType.Int32, ssENTarget.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateTarget (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENTargetEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [OFFERINGCODE]" +
						 ", [OFFERINGNAME]" +
						 ", [TARGETTYPEID]" +
						 ", [TARGETHEADER]" +
						 ", [TARGETDESCRIPTION]" +
						 ", [TARGETSTATUSID]" +
						 ", [COMPLETIONDATE]" +
						 ", [TARGETDATE]" +
						 ", [OFFERINGCATEGORY]" +
						 ", [COMPLETEDPERC]" +
						 ", [CREATEDBY]" +
						 ", [CREATEDAT]" +
						 ", [TARGETNOTE]" +
						 ", [TARGETNOTE_CREATEDON]" +
						 ", [ISSTUDENTTARGET]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssOfferingCode" +
						 ", @ssOfferingName" +
						 ", @ssTargetTypeId" +
						 ", @ssTargetHeader" +
						 ", @ssTargetDescription" +
						 ", @ssTargetStatusId" +
						 ", @ssCompletionDate" +
						 ", @ssTargetDate" +
						 ", @ssOfferingCategory" +
						 ", @ssCompletedPerc" +
						 ", @ssCreatedBy" +
						 ", @ssCreatedAt" +
						 ", @ssTargetNote" +
						 ", @ssTargetNote_CreatedOn" +
						 ", @ssisStudentTarget" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENTarget.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENTarget.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENTarget.ssOfferingCode);
						insertSqlCmd.CreateParameter("@ssOfferingName", DbType.String, ssENTarget.ssOfferingName);
						insertSqlCmd.CreateParameter("@ssTargetTypeId", DbType.Int32, ssENTarget.ssTargetTypeId);
						insertSqlCmd.CreateParameter("@ssTargetHeader", DbType.String, ssENTarget.ssTargetHeader);
						insertSqlCmd.CreateParameter("@ssTargetDescription", DbType.String, ssENTarget.ssTargetDescription);
						insertSqlCmd.CreateParameter("@ssTargetStatusId", DbType.Int32, ssENTarget.ssTargetStatusId);
						insertSqlCmd.CreateParameter("@ssCompletionDate", DbType.DateTime, ssENTarget.ssCompletionDate);
						insertSqlCmd.CreateParameter("@ssTargetDate", DbType.DateTime, ssENTarget.ssTargetDate);
						insertSqlCmd.CreateParameter("@ssOfferingCategory", DbType.Int32, ssENTarget.ssOfferingCategory);
						insertSqlCmd.CreateParameter("@ssCompletedPerc", DbType.Int32, ssENTarget.ssCompletedPerc);
						if ((ssENTarget.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENTarget.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENTarget.ssCreatedAt);
						insertSqlCmd.CreateParameter("@ssTargetNote", DbType.String, ssENTarget.ssTargetNote);
						insertSqlCmd.CreateParameter("@ssTargetNote_CreatedOn", DbType.DateTime, ssENTarget.ssTargetNote_CreatedOn);
						insertSqlCmd.CreateParameter("@ssisStudentTarget", DbType.Boolean, ssENTarget.ssisStudentTarget);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateTarget", true), typeof(int));
					} else {
						outParamId = ssENTarget.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteTarget
		/// </summary>

		public static void DeleteTarget(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTargetEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENTargetEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteTarget", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetTarget
		/// </summary>

		public static void GetTarget(HeContext heContext, int inParamId, out RCTargetRecord outParamRecord) {
			outParamRecord = new RCTargetRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTargetEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [OFFERINGCODE]" +
					 ", [OFFERINGNAME]" +
					 ", [TARGETTYPEID]" +
					 ", [TARGETHEADER]" +
					 ", [TARGETDESCRIPTION]" +
					 ", [TARGETSTATUSID]" +
					 ", [COMPLETIONDATE]" +
					 ", [TARGETDATE]" +
					 ", [OFFERINGCATEGORY]" +
					 ", [COMPLETEDPERC]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDAT]" +
					 ", [TARGETNOTE]" +
					 ", [TARGETNOTE_CREATEDON]" +
					 ", [ISSTUDENTTARGET]" +
					 " FROM " + ENTargetEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetTarget", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(17, false)
							}
							;
						} else
						throw new DataBaseException(ENTargetEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetTargetForUpdate
		/// </summary>

		public static void GetTargetForUpdate(HeContext heContext, int inParamId, out RCTargetRecord outParamRecord) {
			outParamRecord = new RCTargetRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTargetEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [OFFERINGCODE]" +
					 ", [OFFERINGNAME]" +
					 ", [TARGETTYPEID]" +
					 ", [TARGETHEADER]" +
					 ", [TARGETDESCRIPTION]" +
					 ", [TARGETSTATUSID]" +
					 ", [COMPLETIONDATE]" +
					 ", [TARGETDATE]" +
					 ", [OFFERINGCATEGORY]" +
					 ", [COMPLETEDPERC]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDAT]" +
					 ", [TARGETNOTE]" +
					 ", [TARGETNOTE_CREATEDON]" +
					 ", [ISSTUDENTTARGET]" +
					 "FROM " + ENTargetEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetTargetForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(17, false)
							}
							;
						} else
						throw new DataBaseException(ENTargetEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateTarget
		/// </summary>

		public static void UpdateTarget(HeContext heContext, BitArray usedFields, RCTargetRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTargetEntity.eSpaceId;
				ENTargetEntityRecord ssENTarget = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(17, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENTargetEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGCODE] = @ssOfferingCode"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGNAME] = @ssOfferingName"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETTYPEID] = @ssTargetTypeId"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETHEADER] = @ssTargetHeader"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETDESCRIPTION] = @ssTargetDescription"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETSTATUSID] = @ssTargetStatusId"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONDATE] = @ssCompletionDate"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETDATE] = @ssTargetDate"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGCATEGORY] = @ssOfferingCategory"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETEDPERC] = @ssCompletedPerc"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETNOTE] = @ssTargetNote"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TARGETNOTE_CREATEDON] = @ssTargetNote_CreatedOn"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISSTUDENTTARGET] = @ssisStudentTarget"): parameters);
					string whereCondition = " WHERE [ID] = @ssENTargetssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENTarget.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENTarget.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENTarget.ssOfferingCode);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssOfferingName", DbType.String, ssENTarget.ssOfferingName);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssTargetTypeId", DbType.Int32, ssENTarget.ssTargetTypeId);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssTargetHeader", DbType.String, ssENTarget.ssTargetHeader);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssTargetDescription", DbType.String, ssENTarget.ssTargetDescription);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssTargetStatusId", DbType.Int32, ssENTarget.ssTargetStatusId);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssCompletionDate", DbType.DateTime, ssENTarget.ssCompletionDate);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssTargetDate", DbType.DateTime, ssENTarget.ssTargetDate);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssOfferingCategory", DbType.Int32, ssENTarget.ssOfferingCategory);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssCompletedPerc", DbType.Int32, ssENTarget.ssCompletedPerc);
						counter++;
					}
					if (usedFields[12]) {
						if ((ssENTarget.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENTarget.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENTarget.ssCreatedAt);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssTargetNote", DbType.String, ssENTarget.ssTargetNote);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssTargetNote_CreatedOn", DbType.DateTime, ssENTarget.ssTargetNote_CreatedOn);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssisStudentTarget", DbType.Boolean, ssENTarget.ssisStudentTarget);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISSTUDENTTARGET] = [ISSTUDENTTARGET]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENTargetssId", DbType.Int32, ssENTarget.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateTarget", true) <= 0)
					throw new DataBaseException(ENTargetEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENTarget.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Target")]
	public class WORCTargetRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string varWSOfferingCode;

		[System.Xml.Serialization.XmlElement("OfferingName")]
		public string varWSOfferingName;

		[System.Xml.Serialization.XmlElement("TargetTypeId")]
		public int varWSTargetTypeId;

		[System.Xml.Serialization.XmlElement("TargetHeader")]
		public string varWSTargetHeader;

		[System.Xml.Serialization.XmlElement("TargetDescription")]
		public string varWSTargetDescription;

		[System.Xml.Serialization.XmlElement("TargetStatusId")]
		public int varWSTargetStatusId;

		[System.Xml.Serialization.XmlElement("CompletionDate", DataType= "date")]
		public DateTime varWSCompletionDate;

		[System.Xml.Serialization.XmlElement("TargetDate", DataType= "date")]
		public DateTime varWSTargetDate;

		[System.Xml.Serialization.XmlElement("OfferingCategory")]
		public int varWSOfferingCategory;

		[System.Xml.Serialization.XmlElement("CompletedPerc")]
		public int varWSCompletedPerc;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("CreatedAt")]
		public DateTime varWSCreatedAt;

		[System.Xml.Serialization.XmlElement("TargetNote")]
		public string varWSTargetNote;

		[System.Xml.Serialization.XmlElement("TargetNote_CreatedOn")]
		public DateTime varWSTargetNote_CreatedOn;

		[System.Xml.Serialization.XmlElement("isStudentTarget")]
		public bool varWSisStudentTarget;

		public WORCTargetRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSOfferingCode = (string) "";
			varWSOfferingName = (string) "";
			varWSTargetTypeId = (int) 0;
			varWSTargetHeader = (string) "";
			varWSTargetDescription = (string) "";
			varWSTargetStatusId = (int) 0;
			varWSCompletionDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSTargetDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSOfferingCategory = (int) 0;
			varWSCompletedPerc = (int) 0;
			varWSCreatedBy = (int) 0;
			varWSCreatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSTargetNote = (string) "";
			varWSTargetNote_CreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSisStudentTarget = (bool) false;
		}

		public WORCTargetRecord(ENTargetEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSOfferingCode = BaseAppUtils.RemoveControlChars(r.ssOfferingCode);
			varWSOfferingName = BaseAppUtils.RemoveControlChars(r.ssOfferingName);
			varWSTargetTypeId = (int) r.ssTargetTypeId;
			varWSTargetHeader = BaseAppUtils.RemoveControlChars(r.ssTargetHeader);
			varWSTargetDescription = BaseAppUtils.RemoveControlChars(r.ssTargetDescription);
			varWSTargetStatusId = (int) r.ssTargetStatusId;
			varWSCompletionDate = (DateTime) r.ssCompletionDate;
			varWSTargetDate = (DateTime) r.ssTargetDate;
			varWSOfferingCategory = (int) r.ssOfferingCategory;
			varWSCompletedPerc = (int) r.ssCompletedPerc;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSCreatedAt = (DateTime) r.ssCreatedAt;
			varWSTargetNote = BaseAppUtils.RemoveControlChars(r.ssTargetNote);
			varWSTargetNote_CreatedOn = (DateTime) r.ssTargetNote_CreatedOn;
			varWSisStudentTarget = (bool) r.ssisStudentTarget;
		}

		public static RLTargetList ToRecordList(WORCTargetRecord[] array) {
			RLTargetList rl = new RLTargetList();
			if (array != null) {
				foreach(WORCTargetRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCTargetRecord[] FromRecordList(RLTargetList rl) {
			WORCTargetRecord[] array = new WORCTargetRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCTargetRecord {
		public static implicit operator WORCTargetRecord(RCTargetRecord r) {
			return new WORCTargetRecord(r.ssENTarget);
		}

		public static implicit operator RCTargetRecord(WORCTargetRecord w) {
			RCTargetRecord r = new RCTargetRecord("");
			if (w != null) {
				r.ssENTarget = w;
			}
			return r;
		}

	}

	partial struct ENTargetEntityRecord {
		public static implicit operator WORCTargetRecord(ENTargetEntityRecord r) {
			return new WORCTargetRecord(r);
		}

		public static implicit operator ENTargetEntityRecord(WORCTargetRecord w) {
			ENTargetEntityRecord r = new ENTargetEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssOfferingCode = ((string) w.varWSOfferingCode ?? "");
				r.ssOfferingName = ((string) w.varWSOfferingName ?? "");
				r.ssTargetTypeId = (int) w.varWSTargetTypeId;
				r.ssTargetHeader = ((string) w.varWSTargetHeader ?? "");
				r.ssTargetDescription = ((string) w.varWSTargetDescription ?? "");
				r.ssTargetStatusId = (int) w.varWSTargetStatusId;
				r.ssCompletionDate = (DateTime) w.varWSCompletionDate;
				r.ssTargetDate = (DateTime) w.varWSTargetDate;
				r.ssOfferingCategory = (int) w.varWSOfferingCategory;
				r.ssCompletedPerc = (int) w.varWSCompletedPerc;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssCreatedAt = (DateTime) w.varWSCreatedAt;
				r.ssTargetNote = ((string) w.varWSTargetNote ?? "");
				r.ssTargetNote_CreatedOn = (DateTime) w.varWSTargetNote_CreatedOn;
				r.ssisStudentTarget = (bool) w.varWSisStudentTarget;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTargetRecordList {
		public WORCTargetRecord[] Array;


		public WORLTargetRecordList(WORCTargetRecord[] r) {
			if (r == null)
			Array = new WORCTargetRecord[0];
			else
			Array = r;
		}
		public WORLTargetRecordList() {
			Array = new WORCTargetRecord[0];
		}

		public WORLTargetRecordList(RLTargetRecordList rl) {
			rl=(RLTargetRecordList) rl.Duplicate();
			Array = new WORCTargetRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCTargetRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTargetRecordList {
		public static implicit operator RLTargetRecordList(WORCTargetRecord[] array) {
			RLTargetRecordList rl = new RLTargetRecordList();
			if (array != null) {
				foreach(WORCTargetRecord val in array) {
					rl.Append((RCTargetRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTargetRecord[](RLTargetRecordList rl) {
			WORCTargetRecord[] array = new WORCTargetRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCTargetRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTargetRecordList {
		public static implicit operator RLTargetRecordList(WORLTargetRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLTargetRecordList(RLTargetRecordList rl) {
			return new WORLTargetRecordList(rl);
		}
		public static implicit operator WORCTargetRecord[](WORLTargetRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTargetRecordList(WORCTargetRecord[] array) {
			return new WORLTargetRecordList(array);
		}
	}
}

