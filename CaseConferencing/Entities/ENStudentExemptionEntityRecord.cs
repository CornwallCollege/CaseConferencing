/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentExemptionEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentExemptionEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentExemptionEntity.eSpaceId;
	} // ENStudentExemptionEntity

	/// <summary>
	/// Entity <code>ENStudentExemptionEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentExemption</code> <p> Description: Manual Define Student Exemption</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentExemption", "yl8E6edV106kh3sdxoxdlQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentExemption", "")]
	[Serializable()]
	public partial struct ENStudentExemptionEntityRecord: ISerializable, ITypedRecord<ENStudentExemptionEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*P8pxyyokZESc6HUzOcmI9Q");
		private static readonly GlobalObjectKey IdStudentId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*K+a5kMx8uEe15wXagjsNpg");
		private static readonly GlobalObjectKey IdIsMathExemption = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*P7MoAlzSKEy3vDfo8QpLbw");
		private static readonly GlobalObjectKey IdIsEnglishExemption = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*V63EHnu0l0yLgxMp_xJmMQ");
		private static readonly GlobalObjectKey IdLastUpdateOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*nGc0t0TsDE2CsfT3+hGnIw");
		private static readonly GlobalObjectKey IdLastUpdateBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*UXwd_2JE_EegCCy7HTSvog");
		private static readonly GlobalObjectKey IdExemptionReason = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*2ZWvCcZi802ENKTFTf7WdQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentId")]
		private string _ssStudentId;
		public string ssStudentId {
			get {
				return _ssStudentId;
			}
			set {
				if ((_ssStudentId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISMATHEXEMPTION", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IsMathExemption")]
		private bool _ssIsMathExemption;
		public bool ssIsMathExemption {
			get {
				return _ssIsMathExemption;
			}
			set {
				if ((_ssIsMathExemption!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssIsMathExemption = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISENGLISHEXEMPTION", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IsEnglishExemption")]
		private bool _ssIsEnglishExemption;
		public bool ssIsEnglishExemption {
			get {
				return _ssIsEnglishExemption;
			}
			set {
				if ((_ssIsEnglishExemption!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssIsEnglishExemption = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastUpdateOn")]
		private DateTime _ssLastUpdateOn;
		public DateTime ssLastUpdateOn {
			get {
				return _ssLastUpdateOn;
			}
			set {
				if ((_ssLastUpdateOn!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssLastUpdateOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LastUpdateBy")]
		private int _ssLastUpdateBy;
		public int ssLastUpdateBy {
			get {
				return _ssLastUpdateBy;
			}
			set {
				if ((_ssLastUpdateBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssLastUpdateBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EXEMPTIONREASON", 250, false, false, false)]
		[System.Xml.Serialization.XmlElement("ExemptionReason")]
		private string _ssExemptionReason;
		public string ssExemptionReason {
			get {
				return _ssExemptionReason;
			}
			set {
				if ((_ssExemptionReason!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssExemptionReason = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentExemptionEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssIsMathExemption = false;
			_ssIsEnglishExemption = false;
			_ssLastUpdateOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastUpdateBy = 0;
			_ssExemptionReason = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentExemption.Id", 0);
			ssStudentId = r.ReadTextEntityReference(index++, "StudentExemption.StudentId", "");
			ssIsMathExemption = r.ReadBoolean(index++, "StudentExemption.IsMathExemption", false);
			ssIsEnglishExemption = r.ReadBoolean(index++, "StudentExemption.IsEnglishExemption", false);
			ssLastUpdateOn = r.ReadDateTime(index++, "StudentExemption.LastUpdateOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLastUpdateBy = r.ReadEntityReference(index++, "StudentExemption.LastUpdateBy", 0);
			ssExemptionReason = r.ReadText(index++, "StudentExemption.ExemptionReason", "");
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentExemptionEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentExemptionEntityRecord a, ENStudentExemptionEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentId != b.ssStudentId) return false;
			if (a.ssIsMathExemption != b.ssIsMathExemption) return false;
			if (a.ssIsEnglishExemption != b.ssIsEnglishExemption) return false;
			if (a.ssLastUpdateOn != b.ssLastUpdateOn) return false;
			if (a.ssLastUpdateBy != b.ssLastUpdateBy) return false;
			if (a.ssExemptionReason != b.ssExemptionReason) return false;
			return true;
		}

		public static bool operator != (ENStudentExemptionEntityRecord a, ENStudentExemptionEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentExemptionEntityRecord)) return false;
			return (this == (ENStudentExemptionEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentId.GetHashCode()
				^ ssIsMathExemption.GetHashCode()
				^ ssIsEnglishExemption.GetHashCode()
				^ ssLastUpdateOn.GetHashCode()
				^ ssLastUpdateBy.GetHashCode()
				^ ssExemptionReason.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentExemptionEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssIsMathExemption = false;
			_ssIsEnglishExemption = false;
			_ssLastUpdateOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastUpdateBy = 0;
			_ssExemptionReason = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentId = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssIsMathExemption = (bool) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssIsEnglishExemption = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssLastUpdateOn = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssLastUpdateBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssExemptionReason = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentExemptionEntityRecord Duplicate() {
			ENStudentExemptionEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentId = this._ssStudentId;
			t._ssIsMathExemption = this._ssIsMathExemption;
			t._ssIsEnglishExemption = this._ssIsEnglishExemption;
			t._ssLastUpdateOn = this._ssLastUpdateOn;
			t._ssLastUpdateBy = this._ssLastUpdateBy;
			t._ssExemptionReason = this._ssExemptionReason;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentId")) VarValue.AppendAttribute(recordElem, "StudentId", ssStudentId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsMathExemption")) VarValue.AppendAttribute(recordElem, "IsMathExemption", ssIsMathExemption, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsMathExemption");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsEnglishExemption")) VarValue.AppendAttribute(recordElem, "IsEnglishExemption", ssIsEnglishExemption, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsEnglishExemption");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdateOn")) VarValue.AppendAttribute(recordElem, "LastUpdateOn", ssLastUpdateOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdateOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdateBy")) VarValue.AppendAttribute(recordElem, "LastUpdateBy", ssLastUpdateBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdateBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExemptionReason")) VarValue.AppendAttribute(recordElem, "ExemptionReason", ssExemptionReason, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ExemptionReason");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentId")) variable.Value = ssStudentId; else variable.Optimized = true;
			} else if (head == "ismathexemption") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsMathExemption")) variable.Value = ssIsMathExemption; else variable.Optimized = true;
			} else if (head == "isenglishexemption") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsEnglishExemption")) variable.Value = ssIsEnglishExemption; else variable.Optimized = true;
			} else if (head == "lastupdateon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdateOn")) variable.Value = ssLastUpdateOn; else variable.Optimized = true;
			} else if (head == "lastupdateby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdateBy")) variable.Value = ssLastUpdateBy; else variable.Optimized = true;
			} else if (head == "exemptionreason") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExemptionReason")) variable.Value = ssExemptionReason; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdIsMathExemption)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdIsEnglishExemption)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdLastUpdateOn)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdLastUpdateBy)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdExemptionReason)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdIsMathExemption)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdIsEnglishExemption)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdLastUpdateOn)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdLastUpdateBy)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdExemptionReason)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentId) {
				return ssStudentId;
			} else if (key == IdIsMathExemption) {
				return ssIsMathExemption;
			} else if (key == IdIsEnglishExemption) {
				return ssIsEnglishExemption;
			} else if (key == IdLastUpdateOn) {
				return ssLastUpdateOn;
			} else if (key == IdLastUpdateBy) {
				return ssLastUpdateBy;
			} else if (key == IdExemptionReason) {
				return ssExemptionReason;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentId = (string) other.AttributeGet(IdStudentId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentId);
			ssIsMathExemption = (bool) other.AttributeGet(IdIsMathExemption);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdIsMathExemption);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdIsMathExemption);
			ssIsEnglishExemption = (bool) other.AttributeGet(IdIsEnglishExemption);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdIsEnglishExemption);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdIsEnglishExemption);
			ssLastUpdateOn = (DateTime) other.AttributeGet(IdLastUpdateOn);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdLastUpdateOn);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdLastUpdateOn);
			ssLastUpdateBy = (int) other.AttributeGet(IdLastUpdateBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdLastUpdateBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdLastUpdateBy);
			ssExemptionReason = (string) other.AttributeGet(IdExemptionReason);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdExemptionReason);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdExemptionReason);
		}
	} // ENStudentExemptionEntityRecord
	/// <summary>
	/// Structure <code>RCStudentExemptionRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentExemptionRecord: ISerializable, ITypedRecord<RCStudentExemptionRecord> {
		private static readonly GlobalObjectKey IdStudentExemption = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*UGj3QseZ7x9cfZ4dR+p_TA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentExemption")]
		public ENStudentExemptionEntityRecord ssENStudentExemption;


		public static implicit operator ENStudentExemptionEntityRecord(RCStudentExemptionRecord r) {
			return r.ssENStudentExemption;
		}

		public static implicit operator RCStudentExemptionRecord(ENStudentExemptionEntityRecord r) {
			RCStudentExemptionRecord res = new RCStudentExemptionRecord(null);
			res.ssENStudentExemption = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentExemption.ChangedAttributes = value;
			}
			get {
				return ssENStudentExemption.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentExemptionRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentExemption = new ENStudentExemptionEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentExemption.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentExemption.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentExemption.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentExemption.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentExemptionRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentExemptionRecord a, RCStudentExemptionRecord b) {
			if (a.ssENStudentExemption != b.ssENStudentExemption) return false;
			return true;
		}

		public static bool operator != (RCStudentExemptionRecord a, RCStudentExemptionRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentExemptionRecord)) return false;
			return (this == (RCStudentExemptionRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentExemption.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentExemptionRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentExemption = new ENStudentExemptionEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentExemption = (ENStudentExemptionEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentExemption.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentExemption.InternalRecursiveSave();
		}


		public RCStudentExemptionRecord Duplicate() {
			RCStudentExemptionRecord t;
			t.ssENStudentExemption = (ENStudentExemptionEntityRecord) this.ssENStudentExemption.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentExemption.ToXml(this, recordElem, "StudentExemption", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentexemption") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentExemption")) variable.Value = ssENStudentExemption; else variable.Optimized = true;
				variable.SetFieldName("studentexemption");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentExemption.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentExemption.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentExemption) {
				return ssENStudentExemption;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentExemption.FillFromOther((IRecord) other.AttributeGet(IdStudentExemption));
		}
	} // RCStudentExemptionRecord
	/// <summary>
	/// RecordList type <code>RLStudentExemptionRecordList</code> that represents a record list of
	///  <code>StudentExemption</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentExemptionRecordList: GenericRecordList<RCStudentExemptionRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentExemptionRecord GetElementDefaultValue() {
			return new RCStudentExemptionRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentExemptionRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentExemptionRecordList recordlist, Func<RCStudentExemptionRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentExemptionRecordList ToList<T>(T[] array, Func <T, RCStudentExemptionRecord> converter) {
			RLStudentExemptionRecordList result = new RLStudentExemptionRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentExemptionRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentExemptionRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentExemptionRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentExemptionRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentExemptionRecord> NewList() {
			return new RLStudentExemptionRecordList();
		}


	} // RLStudentExemptionRecordList

	/// <summary>
	/// RecordList type <code>RLStudentExemptionList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, DateTime, Boolean, Boolean, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentExemptionList: GenericRecordList<ENStudentExemptionEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentExemptionEntityRecord GetElementDefaultValue() {
			return new ENStudentExemptionEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentExemptionEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentExemptionList recordlist, Func<ENStudentExemptionEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentExemptionList ToList<T>(T[] array, Func <T, ENStudentExemptionEntityRecord> converter) {
			RLStudentExemptionList result = new RLStudentExemptionList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentExemptionList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentExemptionList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentExemptionList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentExemptionList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentExemptionEntityRecord> NewList() {
			return new RLStudentExemptionList();
		}


	} // RLStudentExemptionList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentExemption
		/// </summary>

		public static void CreateStudentExemption(HeContext heContext, RCStudentExemptionRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExemptionEntity.eSpaceId;
				ENStudentExemptionEntityRecord ssENStudentExemption = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentExemptionEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTID]" +
					 ", [ISMATHEXEMPTION]" +
					 ", [ISENGLISHEXEMPTION]" +
					 ", [LASTUPDATEON]" +
					 ", [LASTUPDATEBY]" +
					 ", [EXEMPTIONREASON]" +
					 " ) VALUES (" +
					 " @ssStudentId" +
					 ", @ssIsMathExemption" +
					 ", @ssIsEnglishExemption" +
					 ", @ssLastUpdateOn" +
					 ", @ssLastUpdateBy" +
					 ", @ssExemptionReason" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudentExemption.ssStudentId== "")) {
						insertSqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENStudentExemption.ssStudentId);
					}
					insertSqlCmd.CreateParameter("@ssIsMathExemption", DbType.Boolean, ssENStudentExemption.ssIsMathExemption);
					insertSqlCmd.CreateParameter("@ssIsEnglishExemption", DbType.Boolean, ssENStudentExemption.ssIsEnglishExemption);
					insertSqlCmd.CreateParameter("@ssLastUpdateOn", DbType.DateTime, ssENStudentExemption.ssLastUpdateOn);
					if ((ssENStudentExemption.ssLastUpdateBy==0)) {
						insertSqlCmd.CreateParameter("@ssLastUpdateBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLastUpdateBy", DbType.Int32, ssENStudentExemption.ssLastUpdateBy);
					}
					insertSqlCmd.CreateParameter("@ssExemptionReason", DbType.String, ssENStudentExemption.ssExemptionReason);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentExemption", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentExemption
		/// </summary>

		public static void CreateOrUpdateStudentExemption(HeContext heContext, BitArray usedFields, RCStudentExemptionRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExemptionEntity.eSpaceId;
				ENStudentExemptionEntityRecord ssENStudentExemption = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentExemptionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISMATHEXEMPTION] = @ssIsMathExemption"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISENGLISHEXEMPTION] = @ssIsEnglishExemption"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEON] = @ssLastUpdateOn"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEBY] = @ssLastUpdateBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXEMPTIONREASON] = @ssExemptionReason"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentExemptionssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentExemption.ssStudentId== "")) {
							sqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENStudentExemption.ssStudentId);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssIsMathExemption", DbType.Boolean, ssENStudentExemption.ssIsMathExemption);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssIsEnglishExemption", DbType.Boolean, ssENStudentExemption.ssIsEnglishExemption);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssLastUpdateOn", DbType.DateTime, ssENStudentExemption.ssLastUpdateOn);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENStudentExemption.ssLastUpdateBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdateBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdateBy", DbType.Int32, ssENStudentExemption.ssLastUpdateBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssExemptionReason", DbType.String, ssENStudentExemption.ssExemptionReason);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISMATHEXEMPTION] = [ISMATHEXEMPTION]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentExemptionssId", DbType.Int32, ssENStudentExemption.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentExemption (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentExemptionEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTID]" +
						 ", [ISMATHEXEMPTION]" +
						 ", [ISENGLISHEXEMPTION]" +
						 ", [LASTUPDATEON]" +
						 ", [LASTUPDATEBY]" +
						 ", [EXEMPTIONREASON]" +
						 " ) VALUES (" +
						 " @ssStudentId" +
						 ", @ssIsMathExemption" +
						 ", @ssIsEnglishExemption" +
						 ", @ssLastUpdateOn" +
						 ", @ssLastUpdateBy" +
						 ", @ssExemptionReason" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudentExemption.ssStudentId== "")) {
							insertSqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENStudentExemption.ssStudentId);
						}
						insertSqlCmd.CreateParameter("@ssIsMathExemption", DbType.Boolean, ssENStudentExemption.ssIsMathExemption);
						insertSqlCmd.CreateParameter("@ssIsEnglishExemption", DbType.Boolean, ssENStudentExemption.ssIsEnglishExemption);
						insertSqlCmd.CreateParameter("@ssLastUpdateOn", DbType.DateTime, ssENStudentExemption.ssLastUpdateOn);
						if ((ssENStudentExemption.ssLastUpdateBy==0)) {
							insertSqlCmd.CreateParameter("@ssLastUpdateBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLastUpdateBy", DbType.Int32, ssENStudentExemption.ssLastUpdateBy);
						}
						insertSqlCmd.CreateParameter("@ssExemptionReason", DbType.String, ssENStudentExemption.ssExemptionReason);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentExemption", true), typeof(int));
					} else {
						outParamId = ssENStudentExemption.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentExemption
		/// </summary>

		public static void DeleteStudentExemption(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExemptionEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentExemptionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentExemption", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentExemption
		/// </summary>

		public static void GetStudentExemption(HeContext heContext, int inParamId, out RCStudentExemptionRecord outParamRecord) {
			outParamRecord = new RCStudentExemptionRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExemptionEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [ISMATHEXEMPTION]" +
					 ", [ISENGLISHEXEMPTION]" +
					 ", [LASTUPDATEON]" +
					 ", [LASTUPDATEBY]" +
					 ", [EXEMPTIONREASON]" +
					 " FROM " + ENStudentExemptionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentExemption", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentExemptionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentExemptionForUpdate
		/// </summary>

		public static void GetStudentExemptionForUpdate(HeContext heContext, int inParamId, out RCStudentExemptionRecord outParamRecord) {
			outParamRecord = new RCStudentExemptionRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExemptionEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [ISMATHEXEMPTION]" +
					 ", [ISENGLISHEXEMPTION]" +
					 ", [LASTUPDATEON]" +
					 ", [LASTUPDATEBY]" +
					 ", [EXEMPTIONREASON]" +
					 "FROM " + ENStudentExemptionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentExemptionForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentExemptionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentExemption
		/// </summary>

		public static void UpdateStudentExemption(HeContext heContext, BitArray usedFields, RCStudentExemptionRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExemptionEntity.eSpaceId;
				ENStudentExemptionEntityRecord ssENStudentExemption = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentExemptionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISMATHEXEMPTION] = @ssIsMathExemption"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISENGLISHEXEMPTION] = @ssIsEnglishExemption"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEON] = @ssLastUpdateOn"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEBY] = @ssLastUpdateBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXEMPTIONREASON] = @ssExemptionReason"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentExemptionssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentExemption.ssStudentId== "")) {
							sqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENStudentExemption.ssStudentId);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssIsMathExemption", DbType.Boolean, ssENStudentExemption.ssIsMathExemption);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssIsEnglishExemption", DbType.Boolean, ssENStudentExemption.ssIsEnglishExemption);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssLastUpdateOn", DbType.DateTime, ssENStudentExemption.ssLastUpdateOn);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENStudentExemption.ssLastUpdateBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdateBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdateBy", DbType.Int32, ssENStudentExemption.ssLastUpdateBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssExemptionReason", DbType.String, ssENStudentExemption.ssExemptionReason);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISMATHEXEMPTION] = [ISMATHEXEMPTION]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentExemptionssId", DbType.Int32, ssENStudentExemption.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentExemption", true) <= 0)
					throw new DataBaseException(ENStudentExemptionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentExemption.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentExemption")]
	public class WORCStudentExemptionRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentId")]
		public string varWSStudentId;

		[System.Xml.Serialization.XmlElement("IsMathExemption")]
		public bool varWSIsMathExemption;

		[System.Xml.Serialization.XmlElement("IsEnglishExemption")]
		public bool varWSIsEnglishExemption;

		[System.Xml.Serialization.XmlElement("LastUpdateOn")]
		public DateTime varWSLastUpdateOn;

		[System.Xml.Serialization.XmlElement("LastUpdateBy")]
		public int varWSLastUpdateBy;

		[System.Xml.Serialization.XmlElement("ExemptionReason")]
		public string varWSExemptionReason;

		public WORCStudentExemptionRecord() {
			varWSId = (int) 0;
			varWSStudentId = (string) "";
			varWSIsMathExemption = (bool) false;
			varWSIsEnglishExemption = (bool) false;
			varWSLastUpdateOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLastUpdateBy = (int) 0;
			varWSExemptionReason = (string) "";
		}

		public WORCStudentExemptionRecord(ENStudentExemptionEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentId = BaseAppUtils.RemoveControlChars(r.ssStudentId);
			varWSIsMathExemption = (bool) r.ssIsMathExemption;
			varWSIsEnglishExemption = (bool) r.ssIsEnglishExemption;
			varWSLastUpdateOn = (DateTime) r.ssLastUpdateOn;
			varWSLastUpdateBy = (int) r.ssLastUpdateBy;
			varWSExemptionReason = BaseAppUtils.RemoveControlChars(r.ssExemptionReason);
		}

		public static RLStudentExemptionList ToRecordList(WORCStudentExemptionRecord[] array) {
			RLStudentExemptionList rl = new RLStudentExemptionList();
			if (array != null) {
				foreach(WORCStudentExemptionRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentExemptionRecord[] FromRecordList(RLStudentExemptionList rl) {
			WORCStudentExemptionRecord[] array = new WORCStudentExemptionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentExemptionRecord {
		public static implicit operator WORCStudentExemptionRecord(RCStudentExemptionRecord r) {
			return new WORCStudentExemptionRecord(r.ssENStudentExemption);
		}

		public static implicit operator RCStudentExemptionRecord(WORCStudentExemptionRecord w) {
			RCStudentExemptionRecord r = new RCStudentExemptionRecord("");
			if (w != null) {
				r.ssENStudentExemption = w;
			}
			return r;
		}

	}

	partial struct ENStudentExemptionEntityRecord {
		public static implicit operator WORCStudentExemptionRecord(ENStudentExemptionEntityRecord r) {
			return new WORCStudentExemptionRecord(r);
		}

		public static implicit operator ENStudentExemptionEntityRecord(WORCStudentExemptionRecord w) {
			ENStudentExemptionEntityRecord r = new ENStudentExemptionEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentId = (string) w.varWSStudentId;
				r.ssIsMathExemption = (bool) w.varWSIsMathExemption;
				r.ssIsEnglishExemption = (bool) w.varWSIsEnglishExemption;
				r.ssLastUpdateOn = (DateTime) w.varWSLastUpdateOn;
				r.ssLastUpdateBy = (int) w.varWSLastUpdateBy;
				r.ssExemptionReason = ((string) w.varWSExemptionReason ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentExemptionRecordList {
		public WORCStudentExemptionRecord[] Array;


		public WORLStudentExemptionRecordList(WORCStudentExemptionRecord[] r) {
			if (r == null)
			Array = new WORCStudentExemptionRecord[0];
			else
			Array = r;
		}
		public WORLStudentExemptionRecordList() {
			Array = new WORCStudentExemptionRecord[0];
		}

		public WORLStudentExemptionRecordList(RLStudentExemptionRecordList rl) {
			rl=(RLStudentExemptionRecordList) rl.Duplicate();
			Array = new WORCStudentExemptionRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentExemptionRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentExemptionRecordList {
		public static implicit operator RLStudentExemptionRecordList(WORCStudentExemptionRecord[] array) {
			RLStudentExemptionRecordList rl = new RLStudentExemptionRecordList();
			if (array != null) {
				foreach(WORCStudentExemptionRecord val in array) {
					rl.Append((RCStudentExemptionRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentExemptionRecord[](RLStudentExemptionRecordList rl) {
			WORCStudentExemptionRecord[] array = new WORCStudentExemptionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentExemptionRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentExemptionRecordList {
		public static implicit operator RLStudentExemptionRecordList(WORLStudentExemptionRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentExemptionRecordList(RLStudentExemptionRecordList rl) {
			return new WORLStudentExemptionRecordList(rl);
		}
		public static implicit operator WORCStudentExemptionRecord[](WORLStudentExemptionRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentExemptionRecordList(WORCStudentExemptionRecord[] array) {
			return new WORLStudentExemptionRecordList(array);
		}
	}
}

