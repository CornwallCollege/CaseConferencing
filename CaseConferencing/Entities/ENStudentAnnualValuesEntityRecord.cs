/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentAnnualValuesEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENStudentAnnualValuesEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENStudentAnnualValuesEntity.eSpaceId;
	} // ENStudentAnnualValuesEntity

	/// <summary>
	/// Entity <code>ENStudentAnnualValuesEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentAnnualValues</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentAnnualValues", "8YvAxcodHEepqU3utpCDOw", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_StudentAnnualValues", "")]
	[Serializable()]
	public partial struct ENStudentAnnualValuesEntityRecord: ISerializable, ITypedRecord<ENStudentAnnualValuesEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*axkq6zfAdkeUXh5fXLk3DA");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*gGukBAiJ_EKNmYXjGibo1Q");
		private static readonly GlobalObjectKey IdAcademicYear = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*QM4dtP3Wd0WgaOqg+w5gVw");
		private static readonly GlobalObjectKey IdDisability = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*07IfDUZp3USGRNRgSa1aYQ");
		private static readonly GlobalObjectKey IdLearningDifficulty = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*u_TlbMhSXk63ZrkmeNx3Ww");
		private static readonly GlobalObjectKey IdCurrentPlannedLearningHours = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*nAxvEXJLoUumtYDawtaHaw");
		private static readonly GlobalObjectKey IdCurrentPlannedEEPLearningHou = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*0DJnE_GRrkisVVrD2hJQiA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ACADEMICYEAR", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("AcademicYear")]
		private string _ssAcademicYear;
		public string ssAcademicYear {
			get {
				return _ssAcademicYear;
			}
			set {
				if ((_ssAcademicYear!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssAcademicYear = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DISABILITY", 150, false, false, false)]
		[System.Xml.Serialization.XmlElement("Disability")]
		private string _ssDisability;
		public string ssDisability {
			get {
				return _ssDisability;
			}
			set {
				if ((_ssDisability!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssDisability = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNINGDIFFICULTY", 100, false, false, false)]
		[System.Xml.Serialization.XmlElement("LearningDifficulty")]
		private string _ssLearningDifficulty;
		public string ssLearningDifficulty {
			get {
				return _ssLearningDifficulty;
			}
			set {
				if ((_ssLearningDifficulty!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssLearningDifficulty = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CURRENTPLANNEDLEARNINGHOURS", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CurrentPlannedLearningHours")]
		private int _ssCurrentPlannedLearningHours;
		public int ssCurrentPlannedLearningHours {
			get {
				return _ssCurrentPlannedLearningHours;
			}
			set {
				if ((_ssCurrentPlannedLearningHours!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCurrentPlannedLearningHours = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CURRENTPLANNEDEEPLEARNINGHOU", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CurrentPlannedEEPLearningHou")]
		private int _ssCurrentPlannedEEPLearningHou;
		public int ssCurrentPlannedEEPLearningHou {
			get {
				return _ssCurrentPlannedEEPLearningHou;
			}
			set {
				if ((_ssCurrentPlannedEEPLearningHou!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssCurrentPlannedEEPLearningHou = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentAnnualValuesEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssAcademicYear = "";
			_ssDisability = "";
			_ssLearningDifficulty = "";
			_ssCurrentPlannedLearningHours = 0;
			_ssCurrentPlannedEEPLearningHou = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentAnnualValues.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "StudentAnnualValues.StudentReference", "");
			ssAcademicYear = r.ReadText(index++, "StudentAnnualValues.AcademicYear", "");
			ssDisability = r.ReadText(index++, "StudentAnnualValues.Disability", "");
			ssLearningDifficulty = r.ReadText(index++, "StudentAnnualValues.LearningDifficulty", "");
			ssCurrentPlannedLearningHours = r.ReadInteger(index++, "StudentAnnualValues.CurrentPlannedLearningHours", 0);
			ssCurrentPlannedEEPLearningHou = r.ReadInteger(index++, "StudentAnnualValues.CurrentPlannedEEPLearningHou", 0);
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentAnnualValuesEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentAnnualValuesEntityRecord a, ENStudentAnnualValuesEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssAcademicYear != b.ssAcademicYear) return false;
			if (a.ssDisability != b.ssDisability) return false;
			if (a.ssLearningDifficulty != b.ssLearningDifficulty) return false;
			if (a.ssCurrentPlannedLearningHours != b.ssCurrentPlannedLearningHours) return false;
			if (a.ssCurrentPlannedEEPLearningHou != b.ssCurrentPlannedEEPLearningHou) return false;
			return true;
		}

		public static bool operator != (ENStudentAnnualValuesEntityRecord a, ENStudentAnnualValuesEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentAnnualValuesEntityRecord)) return false;
			return (this == (ENStudentAnnualValuesEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssAcademicYear.GetHashCode()
				^ ssDisability.GetHashCode()
				^ ssLearningDifficulty.GetHashCode()
				^ ssCurrentPlannedLearningHours.GetHashCode()
				^ ssCurrentPlannedEEPLearningHou.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentAnnualValuesEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssAcademicYear = "";
			_ssDisability = "";
			_ssLearningDifficulty = "";
			_ssCurrentPlannedLearningHours = 0;
			_ssCurrentPlannedEEPLearningHou = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssAcademicYear = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssDisability = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssLearningDifficulty = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCurrentPlannedLearningHours = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssCurrentPlannedEEPLearningHou = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentAnnualValuesEntityRecord Duplicate() {
			ENStudentAnnualValuesEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssAcademicYear = this._ssAcademicYear;
			t._ssDisability = this._ssDisability;
			t._ssLearningDifficulty = this._ssLearningDifficulty;
			t._ssCurrentPlannedLearningHours = this._ssCurrentPlannedLearningHours;
			t._ssCurrentPlannedEEPLearningHou = this._ssCurrentPlannedEEPLearningHou;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AcademicYear")) VarValue.AppendAttribute(recordElem, "AcademicYear", ssAcademicYear, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AcademicYear");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Disability")) VarValue.AppendAttribute(recordElem, "Disability", ssDisability, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Disability");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearningDifficulty")) VarValue.AppendAttribute(recordElem, "LearningDifficulty", ssLearningDifficulty, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LearningDifficulty");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurrentPlannedLearningHours")) VarValue.AppendAttribute(recordElem, "CurrentPlannedLearningHours", ssCurrentPlannedLearningHours, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CurrentPlannedLearningHours");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurrentPlannedEEPLearningHou")) VarValue.AppendAttribute(recordElem, "CurrentPlannedEEPLearningHou", ssCurrentPlannedEEPLearningHou, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CurrentPlannedEEPLearningHou");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "academicyear") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYear")) variable.Value = ssAcademicYear; else variable.Optimized = true;
			} else if (head == "disability") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Disability")) variable.Value = ssDisability; else variable.Optimized = true;
			} else if (head == "learningdifficulty") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningDifficulty")) variable.Value = ssLearningDifficulty; else variable.Optimized = true;
			} else if (head == "currentplannedlearninghours") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurrentPlannedLearningHours")) variable.Value = ssCurrentPlannedLearningHours; else variable.Optimized = true;
			} else if (head == "currentplannedeeplearninghou") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurrentPlannedEEPLearningHou")) variable.Value = ssCurrentPlannedEEPLearningHou; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdAcademicYear)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdDisability)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdLearningDifficulty)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCurrentPlannedLearningHours)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdCurrentPlannedEEPLearningHou)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdAcademicYear)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdDisability)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdLearningDifficulty)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCurrentPlannedLearningHours)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdCurrentPlannedEEPLearningHou)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdAcademicYear) {
				return ssAcademicYear;
			} else if (key == IdDisability) {
				return ssDisability;
			} else if (key == IdLearningDifficulty) {
				return ssLearningDifficulty;
			} else if (key == IdCurrentPlannedLearningHours) {
				return ssCurrentPlannedLearningHours;
			} else if (key == IdCurrentPlannedEEPLearningHou) {
				return ssCurrentPlannedEEPLearningHou;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssAcademicYear = (string) other.AttributeGet(IdAcademicYear);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdAcademicYear);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdAcademicYear);
			ssDisability = (string) other.AttributeGet(IdDisability);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdDisability);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdDisability);
			ssLearningDifficulty = (string) other.AttributeGet(IdLearningDifficulty);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdLearningDifficulty);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdLearningDifficulty);
			ssCurrentPlannedLearningHours = (int) other.AttributeGet(IdCurrentPlannedLearningHours);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCurrentPlannedLearningHours);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCurrentPlannedLearningHours);
			ssCurrentPlannedEEPLearningHou = (int) other.AttributeGet(IdCurrentPlannedEEPLearningHou);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdCurrentPlannedEEPLearningHou);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdCurrentPlannedEEPLearningHou);
		}
	} // ENStudentAnnualValuesEntityRecord
	/// <summary>
	/// Structure <code>RCStudentAnnualValuesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentAnnualValuesRecord: ISerializable, ITypedRecord<RCStudentAnnualValuesRecord> {
		private static readonly GlobalObjectKey IdStudentAnnualValues = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*e2Fpw3VJitQ7rENi2DWdDg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentAnnualValues")]
		public ENStudentAnnualValuesEntityRecord ssENStudentAnnualValues;


		public static implicit operator ENStudentAnnualValuesEntityRecord(RCStudentAnnualValuesRecord r) {
			return r.ssENStudentAnnualValues;
		}

		public static implicit operator RCStudentAnnualValuesRecord(ENStudentAnnualValuesEntityRecord r) {
			RCStudentAnnualValuesRecord res = new RCStudentAnnualValuesRecord(null);
			res.ssENStudentAnnualValues = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentAnnualValues.ChangedAttributes = value;
			}
			get {
				return ssENStudentAnnualValues.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentAnnualValuesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentAnnualValues = new ENStudentAnnualValuesEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentAnnualValues.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentAnnualValues.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentAnnualValues.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentAnnualValues.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentAnnualValuesRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentAnnualValuesRecord a, RCStudentAnnualValuesRecord b) {
			if (a.ssENStudentAnnualValues != b.ssENStudentAnnualValues) return false;
			return true;
		}

		public static bool operator != (RCStudentAnnualValuesRecord a, RCStudentAnnualValuesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentAnnualValuesRecord)) return false;
			return (this == (RCStudentAnnualValuesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentAnnualValues.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentAnnualValuesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentAnnualValues = new ENStudentAnnualValuesEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentAnnualValues = (ENStudentAnnualValuesEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentAnnualValues.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentAnnualValues.InternalRecursiveSave();
		}


		public RCStudentAnnualValuesRecord Duplicate() {
			RCStudentAnnualValuesRecord t;
			t.ssENStudentAnnualValues = (ENStudentAnnualValuesEntityRecord) this.ssENStudentAnnualValues.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentAnnualValues.ToXml(this, recordElem, "StudentAnnualValues", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentannualvalues") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentAnnualValues")) variable.Value = ssENStudentAnnualValues; else variable.Optimized = true;
				variable.SetFieldName("studentannualvalues");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentAnnualValues.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentAnnualValues.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentAnnualValues) {
				return ssENStudentAnnualValues;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentAnnualValues.FillFromOther((IRecord) other.AttributeGet(IdStudentAnnualValues));
		}
	} // RCStudentAnnualValuesRecord
	/// <summary>
	/// RecordList type <code>RLStudentAnnualValuesRecordList</code> that represents a record list of
	///  <code>StudentAnnualValues</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentAnnualValuesRecordList: GenericRecordList<RCStudentAnnualValuesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentAnnualValuesRecord GetElementDefaultValue() {
			return new RCStudentAnnualValuesRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentAnnualValuesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentAnnualValuesRecordList recordlist, Func<RCStudentAnnualValuesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentAnnualValuesRecordList ToList<T>(T[] array, Func <T, RCStudentAnnualValuesRecord> converter) {
			RLStudentAnnualValuesRecordList result = new RLStudentAnnualValuesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentAnnualValuesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAnnualValuesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAnnualValuesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentAnnualValuesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentAnnualValuesRecord> NewList() {
			return new RLStudentAnnualValuesRecordList();
		}


	} // RLStudentAnnualValuesRecordList

	/// <summary>
	/// RecordList type <code>RLStudentAnnualValuesList</code> that represents a record list of
	///  <code>StudentIdentifier, Text, Text, Text, Integer, Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentAnnualValuesList: GenericRecordList<ENStudentAnnualValuesEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentAnnualValuesEntityRecord GetElementDefaultValue() {
			return new ENStudentAnnualValuesEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentAnnualValuesEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentAnnualValuesList recordlist, Func<ENStudentAnnualValuesEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentAnnualValuesList ToList<T>(T[] array, Func <T, ENStudentAnnualValuesEntityRecord> converter) {
			RLStudentAnnualValuesList result = new RLStudentAnnualValuesList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentAnnualValuesList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAnnualValuesList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAnnualValuesList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentAnnualValuesList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentAnnualValuesEntityRecord> NewList() {
			return new RLStudentAnnualValuesList();
		}


	} // RLStudentAnnualValuesList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentAnnualValues
		/// </summary>

		public static void CreateStudentAnnualValues(HeContext heContext, RCStudentAnnualValuesRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAnnualValuesEntity.eSpaceId;
				ENStudentAnnualValuesEntityRecord ssENStudentAnnualValues = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentAnnualValuesEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [ACADEMICYEAR]" +
					 ", [DISABILITY]" +
					 ", [LEARNINGDIFFICULTY]" +
					 ", [CURRENTPLANNEDLEARNINGHOURS]" +
					 ", [CURRENTPLANNEDEEPLEARNINGHOU]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssAcademicYear" +
					 ", @ssDisability" +
					 ", @ssLearningDifficulty" +
					 ", @ssCurrentPlannedLearningHours" +
					 ", @ssCurrentPlannedEEPLearningHou" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudentAnnualValues.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentAnnualValues.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudentAnnualValues.ssAcademicYear);
					insertSqlCmd.CreateParameter("@ssDisability", DbType.String, ssENStudentAnnualValues.ssDisability);
					insertSqlCmd.CreateParameter("@ssLearningDifficulty", DbType.String, ssENStudentAnnualValues.ssLearningDifficulty);
					insertSqlCmd.CreateParameter("@ssCurrentPlannedLearningHours", DbType.Int32, ssENStudentAnnualValues.ssCurrentPlannedLearningHours);
					insertSqlCmd.CreateParameter("@ssCurrentPlannedEEPLearningHou", DbType.Int32, ssENStudentAnnualValues.ssCurrentPlannedEEPLearningHou);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentAnnualValues", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentAnnualValues
		/// </summary>

		public static void CreateOrUpdateStudentAnnualValues(HeContext heContext, BitArray usedFields, RCStudentAnnualValuesRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAnnualValuesEntity.eSpaceId;
				ENStudentAnnualValuesEntityRecord ssENStudentAnnualValues = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentAnnualValuesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACADEMICYEAR] = @ssAcademicYear"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DISABILITY] = @ssDisability"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNINGDIFFICULTY] = @ssLearningDifficulty"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTPLANNEDLEARNINGHOURS] = @ssCurrentPlannedLearningHours"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTPLANNEDEEPLEARNINGHOU] = @ssCurrentPlannedEEPLearningHou"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentAnnualValuesssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentAnnualValues.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentAnnualValues.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudentAnnualValues.ssAcademicYear);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDisability", DbType.String, ssENStudentAnnualValues.ssDisability);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssLearningDifficulty", DbType.String, ssENStudentAnnualValues.ssLearningDifficulty);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssCurrentPlannedLearningHours", DbType.Int32, ssENStudentAnnualValues.ssCurrentPlannedLearningHours);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssCurrentPlannedEEPLearningHou", DbType.Int32, ssENStudentAnnualValues.ssCurrentPlannedEEPLearningHou);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CURRENTPLANNEDLEARNINGHOURS] = [CURRENTPLANNEDLEARNINGHOURS]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentAnnualValuesssId", DbType.Int32, ssENStudentAnnualValues.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentAnnualValues (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentAnnualValuesEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [ACADEMICYEAR]" +
						 ", [DISABILITY]" +
						 ", [LEARNINGDIFFICULTY]" +
						 ", [CURRENTPLANNEDLEARNINGHOURS]" +
						 ", [CURRENTPLANNEDEEPLEARNINGHOU]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssAcademicYear" +
						 ", @ssDisability" +
						 ", @ssLearningDifficulty" +
						 ", @ssCurrentPlannedLearningHours" +
						 ", @ssCurrentPlannedEEPLearningHou" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudentAnnualValues.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentAnnualValues.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudentAnnualValues.ssAcademicYear);
						insertSqlCmd.CreateParameter("@ssDisability", DbType.String, ssENStudentAnnualValues.ssDisability);
						insertSqlCmd.CreateParameter("@ssLearningDifficulty", DbType.String, ssENStudentAnnualValues.ssLearningDifficulty);
						insertSqlCmd.CreateParameter("@ssCurrentPlannedLearningHours", DbType.Int32, ssENStudentAnnualValues.ssCurrentPlannedLearningHours);
						insertSqlCmd.CreateParameter("@ssCurrentPlannedEEPLearningHou", DbType.Int32, ssENStudentAnnualValues.ssCurrentPlannedEEPLearningHou);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentAnnualValues", true), typeof(int));
					} else {
						outParamId = ssENStudentAnnualValues.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentAnnualValues
		/// </summary>

		public static void DeleteStudentAnnualValues(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAnnualValuesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentAnnualValuesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentAnnualValues", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentAnnualValues
		/// </summary>

		public static void GetStudentAnnualValues(HeContext heContext, int inParamId, out RCStudentAnnualValuesRecord outParamRecord) {
			outParamRecord = new RCStudentAnnualValuesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAnnualValuesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [ACADEMICYEAR]" +
					 ", [DISABILITY]" +
					 ", [LEARNINGDIFFICULTY]" +
					 ", [CURRENTPLANNEDLEARNINGHOURS]" +
					 ", [CURRENTPLANNEDEEPLEARNINGHOU]" +
					 " FROM " + ENStudentAnnualValuesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentAnnualValues", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentAnnualValuesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentAnnualValuesForUpdate
		/// </summary>

		public static void GetStudentAnnualValuesForUpdate(HeContext heContext, int inParamId, out RCStudentAnnualValuesRecord outParamRecord) {
			outParamRecord = new RCStudentAnnualValuesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAnnualValuesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [ACADEMICYEAR]" +
					 ", [DISABILITY]" +
					 ", [LEARNINGDIFFICULTY]" +
					 ", [CURRENTPLANNEDLEARNINGHOURS]" +
					 ", [CURRENTPLANNEDEEPLEARNINGHOU]" +
					 "FROM " + ENStudentAnnualValuesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentAnnualValuesForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentAnnualValuesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentAnnualValues
		/// </summary>

		public static void UpdateStudentAnnualValues(HeContext heContext, BitArray usedFields, RCStudentAnnualValuesRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAnnualValuesEntity.eSpaceId;
				ENStudentAnnualValuesEntityRecord ssENStudentAnnualValues = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentAnnualValuesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACADEMICYEAR] = @ssAcademicYear"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DISABILITY] = @ssDisability"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNINGDIFFICULTY] = @ssLearningDifficulty"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTPLANNEDLEARNINGHOURS] = @ssCurrentPlannedLearningHours"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTPLANNEDEEPLEARNINGHOU] = @ssCurrentPlannedEEPLearningHou"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentAnnualValuesssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentAnnualValues.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentAnnualValues.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudentAnnualValues.ssAcademicYear);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDisability", DbType.String, ssENStudentAnnualValues.ssDisability);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssLearningDifficulty", DbType.String, ssENStudentAnnualValues.ssLearningDifficulty);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssCurrentPlannedLearningHours", DbType.Int32, ssENStudentAnnualValues.ssCurrentPlannedLearningHours);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssCurrentPlannedEEPLearningHou", DbType.Int32, ssENStudentAnnualValues.ssCurrentPlannedEEPLearningHou);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CURRENTPLANNEDLEARNINGHOURS] = [CURRENTPLANNEDLEARNINGHOURS]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentAnnualValuesssId", DbType.Int32, ssENStudentAnnualValues.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentAnnualValues", true) <= 0)
					throw new DataBaseException(ENStudentAnnualValuesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentAnnualValues.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentAnnualValues")]
	public class WORCStudentAnnualValuesRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("AcademicYear")]
		public string varWSAcademicYear;

		[System.Xml.Serialization.XmlElement("Disability")]
		public string varWSDisability;

		[System.Xml.Serialization.XmlElement("LearningDifficulty")]
		public string varWSLearningDifficulty;

		[System.Xml.Serialization.XmlElement("CurrentPlannedLearningHours")]
		public int varWSCurrentPlannedLearningHours;

		[System.Xml.Serialization.XmlElement("CurrentPlannedEEPLearningHou")]
		public int varWSCurrentPlannedEEPLearningHou;

		public WORCStudentAnnualValuesRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSAcademicYear = (string) "";
			varWSDisability = (string) "";
			varWSLearningDifficulty = (string) "";
			varWSCurrentPlannedLearningHours = (int) 0;
			varWSCurrentPlannedEEPLearningHou = (int) 0;
		}

		public WORCStudentAnnualValuesRecord(ENStudentAnnualValuesEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSAcademicYear = BaseAppUtils.RemoveControlChars(r.ssAcademicYear);
			varWSDisability = BaseAppUtils.RemoveControlChars(r.ssDisability);
			varWSLearningDifficulty = BaseAppUtils.RemoveControlChars(r.ssLearningDifficulty);
			varWSCurrentPlannedLearningHours = (int) r.ssCurrentPlannedLearningHours;
			varWSCurrentPlannedEEPLearningHou = (int) r.ssCurrentPlannedEEPLearningHou;
		}

		public static RLStudentAnnualValuesList ToRecordList(WORCStudentAnnualValuesRecord[] array) {
			RLStudentAnnualValuesList rl = new RLStudentAnnualValuesList();
			if (array != null) {
				foreach(WORCStudentAnnualValuesRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentAnnualValuesRecord[] FromRecordList(RLStudentAnnualValuesList rl) {
			WORCStudentAnnualValuesRecord[] array = new WORCStudentAnnualValuesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentAnnualValuesRecord {
		public static implicit operator WORCStudentAnnualValuesRecord(RCStudentAnnualValuesRecord r) {
			return new WORCStudentAnnualValuesRecord(r.ssENStudentAnnualValues);
		}

		public static implicit operator RCStudentAnnualValuesRecord(WORCStudentAnnualValuesRecord w) {
			RCStudentAnnualValuesRecord r = new RCStudentAnnualValuesRecord("");
			if (w != null) {
				r.ssENStudentAnnualValues = w;
			}
			return r;
		}

	}

	partial struct ENStudentAnnualValuesEntityRecord {
		public static implicit operator WORCStudentAnnualValuesRecord(ENStudentAnnualValuesEntityRecord r) {
			return new WORCStudentAnnualValuesRecord(r);
		}

		public static implicit operator ENStudentAnnualValuesEntityRecord(WORCStudentAnnualValuesRecord w) {
			ENStudentAnnualValuesEntityRecord r = new ENStudentAnnualValuesEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssAcademicYear = ((string) w.varWSAcademicYear ?? "");
				r.ssDisability = ((string) w.varWSDisability ?? "");
				r.ssLearningDifficulty = ((string) w.varWSLearningDifficulty ?? "");
				r.ssCurrentPlannedLearningHours = (int) w.varWSCurrentPlannedLearningHours;
				r.ssCurrentPlannedEEPLearningHou = (int) w.varWSCurrentPlannedEEPLearningHou;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentAnnualValuesRecordList {
		public WORCStudentAnnualValuesRecord[] Array;


		public WORLStudentAnnualValuesRecordList(WORCStudentAnnualValuesRecord[] r) {
			if (r == null)
			Array = new WORCStudentAnnualValuesRecord[0];
			else
			Array = r;
		}
		public WORLStudentAnnualValuesRecordList() {
			Array = new WORCStudentAnnualValuesRecord[0];
		}

		public WORLStudentAnnualValuesRecordList(RLStudentAnnualValuesRecordList rl) {
			rl=(RLStudentAnnualValuesRecordList) rl.Duplicate();
			Array = new WORCStudentAnnualValuesRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentAnnualValuesRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentAnnualValuesRecordList {
		public static implicit operator RLStudentAnnualValuesRecordList(WORCStudentAnnualValuesRecord[] array) {
			RLStudentAnnualValuesRecordList rl = new RLStudentAnnualValuesRecordList();
			if (array != null) {
				foreach(WORCStudentAnnualValuesRecord val in array) {
					rl.Append((RCStudentAnnualValuesRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentAnnualValuesRecord[](RLStudentAnnualValuesRecordList rl) {
			WORCStudentAnnualValuesRecord[] array = new WORCStudentAnnualValuesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentAnnualValuesRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentAnnualValuesRecordList {
		public static implicit operator RLStudentAnnualValuesRecordList(WORLStudentAnnualValuesRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentAnnualValuesRecordList(RLStudentAnnualValuesRecordList rl) {
			return new WORLStudentAnnualValuesRecordList(rl);
		}
		public static implicit operator WORCStudentAnnualValuesRecord[](WORLStudentAnnualValuesRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentAnnualValuesRecordList(WORCStudentAnnualValuesRecord[] array) {
			return new WORLStudentAnnualValuesRecordList(array);
		}
	}
}

