/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENLearnerDetailMenuEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			switch (locale == null ? "":
					locale.ToLowerInvariant()) {
				default:

					int pos;
					if (!string.IsNullOrEmpty(locale) && ((pos = locale.IndexOf('-')) > 0))
					return ViewName(tenant, locale.Substring(0, pos)); // fallback
					else
					return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(10), "OSUSR_pkx_LearnerDetailMenu");
				}
			}
		} // ENLearnerDetailMenuEntity

		/// <summary>
		/// Entity <code>ENLearnerDetailMenuEntityRecord</code> that represents the Service Studio entity
		///  <code>LearnerDetailMenu</code> <p> Description: </p>
		/// </summary>
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("LearnerDetailMenu", "yp2SDpWDiEe2K9xaWY2t5g", "shmcdFKEAEWXZGfrlZEwCQ", 0, "OSUSR_pkx_LearnerDetailMenu", null)]
		[Serializable()]
		public partial struct ENLearnerDetailMenuEntityRecord: ISerializable, ITypedRecord<ENLearnerDetailMenuEntityRecord>, ISimpleRecord {
			private static readonly GlobalObjectKey IdMenu = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*z8atiasSs0izNdEFEs7T6A");

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MENU", 50, false, true, false)]
			[System.Xml.Serialization.XmlElement("Menu")]
			private string _ssMenu;
			public string ssMenu {
				get {
					return _ssMenu;
				}
				set {
					if ((_ssMenu!=value) || OptimizedAttributes[0]) {
						ChangedAttributes = new BitArray(1, true);
						_ssMenu = value;
					}
				}
			}


			public BitArray ChangedAttributes;

			public BitArray OptimizedAttributes;

			public ENLearnerDetailMenuEntityRecord(params string[] dummy) {
				ChangedAttributes = new BitArray(1, true);
				OptimizedAttributes = new BitArray(1, false);
				_ssMenu = "";
			}

			public BitArray[] GetDefaultOptimizedValues() {
				BitArray[] all = new BitArray[0];
				return all;
			}

			public BitArray[] AllOptimizedAttributes {
				set {
					if (value == null) {
					} else {
					}
				}
				get {
					BitArray[] all = new BitArray[0];
					return all;
				}
			}

			/// <summary>
			/// Read a record from database
			/// </summary>
			/// <param name="r"> Data base reader</param>
			/// <param name="index"> index</param>
			public void Read(IDataReader r, ref int index) {
				ssMenu = r.ReadText(index++, "LearnerDetailMenu.Menu", "");
				ChangedAttributes = new BitArray(1, false);
				OptimizedAttributes = new BitArray(1, false);
			}
			/// <summary>
			/// Read from database
			/// </summary>
			/// <param name="r"> Data reader</param>
			public void ReadDB(IDataReader r) {
				int index = 0;
				Read(r, ref index);
			}

			/// <summary>
			/// Read from record
			/// </summary>
			/// <param name="r"> Record</param>
			public void ReadIM(ENLearnerDetailMenuEntityRecord r) {
				this = r;
			}


			public static bool operator == (ENLearnerDetailMenuEntityRecord a, ENLearnerDetailMenuEntityRecord b) {
				if (a.ssMenu != b.ssMenu) return false;
				return true;
			}

			public static bool operator != (ENLearnerDetailMenuEntityRecord a, ENLearnerDetailMenuEntityRecord b) {
				return !(a==b);
			}

			public override bool Equals(object o) {
				if (o.GetType() != typeof(ENLearnerDetailMenuEntityRecord)) return false;
				return (this == (ENLearnerDetailMenuEntityRecord) o);
			}

			public override int GetHashCode() {
				try {
					return base.GetHashCode()
					^ ssMenu.GetHashCode()
					;
				} catch {
					return base.GetHashCode();
				}
			}

			public void GetObjectData(SerializationInfo info, StreamingContext context) {
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				for (int i = 0; i < fields.Length; i++)
				if (fields[i] .FieldType.IsSerializable)
				info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
			}

			public ENLearnerDetailMenuEntityRecord(SerializationInfo info, StreamingContext context) {
				ChangedAttributes = new BitArray(1, true);
				OptimizedAttributes = new BitArray(1, false);
				_ssMenu = "";
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fields[0] .FieldType.IsSerializable)
				_ssMenu = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			}

			public void RecursiveReset() {
			}

			public void InternalRecursiveSave() {
			}


			public ENLearnerDetailMenuEntityRecord Duplicate() {
				ENLearnerDetailMenuEntityRecord t;
				t._ssMenu = this._ssMenu;
				t.ChangedAttributes = new BitArray(1);
				t.OptimizedAttributes = new BitArray(1);
				for (int i = 0; i < 1; i++) {
					t.ChangedAttributes[i] = ChangedAttributes[i];
					t.OptimizedAttributes[i] = OptimizedAttributes[i];
				}
				return t;
			}

			IRecord IRecord.Duplicate() {
				return Duplicate();
			}

			public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
				System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
				if (fieldName != null) {
					VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
					fieldName = fieldName.ToLowerInvariant();
				}
				if (detailLevel > 0) {
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Menu")) VarValue.AppendAttribute(recordElem, "Menu", ssMenu, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Menu");
				} else {
					VarValue.AppendDeferredEvaluationElement(recordElem);
				}
			}

			public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
				String head = VarValue.GetHead(fields);
				String tail = VarValue.GetTail(fields);
				variable.Found = false;
				if (head == "menu") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Menu")) variable.Value = ssMenu; else variable.Optimized = true;
				}
				if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
			}

			public bool ChangedAttributeGet(GlobalObjectKey key) {
				if (key.Equals(IdMenu)) {
					return ChangedAttributes[0];
				} else {
					throw new Exception("Invalid key");
				}
			}

			public bool OptimizedAttributeGet(GlobalObjectKey key) {
				if (key.Equals(IdMenu)) {
					return OptimizedAttributes[0];
				} else {
					throw new Exception("Invalid key");
				}
			}

			public object AttributeGet(GlobalObjectKey key) {
				if (key == IdMenu) {
					return ssMenu;
				} else {
					throw new Exception("Invalid key");
				}
			}
			public void FillFromOther(IRecord other) {
				ChangedAttributes = new BitArray(1);
				OptimizedAttributes = new BitArray(1);
				if (other == null) return;
				ssMenu = (string) other.AttributeGet(IdMenu);
				ChangedAttributes[0] = other.ChangedAttributeGet(IdMenu);
				OptimizedAttributes[0] = other.OptimizedAttributeGet(IdMenu);
			}
		} // ENLearnerDetailMenuEntityRecord
		partial class ENLearnerDetailMenuEntity: StaticEntityRuntime {


			public class ENLearnerDetailMenuEntityRecordMetadata: StaticEntityRuntime.StaticRecordMetadata {
				public virtual string DataId {
					get {
						return (string) _dataId;
					}
				}

				protected override object IdReader(IDataReader r) {
					Object column = r["Data_Id"];
					return (column != System.DBNull.Value ? column: "");
				}
			} // " + DeclStaticMetadataClass);


			private static ENLearnerDetailMenuEntity instance = new ENLearnerDetailMenuEntity(10, ObjectKey.Parse("yp2SDpWDiEe2K9xaWY2t5g"));

			public static ENLearnerDetailMenuEntity GetInstance() {
				return instance;
			}

			private ENLearnerDetailMenuEntity(int espaceId, ObjectKey entityKey): base(espaceId, entityKey) {
			}


			protected override StaticRecordMetadata newStaticRecord() {
				return new ENLearnerDetailMenuEntityRecordMetadata();
			}

			private ENLearnerDetailMenuEntityRecord GetRecord(ENLearnerDetailMenuEntityRecordMetadata meta) {
				return GetRecord(meta.DataId);
			}

			private ENLearnerDetailMenuEntityRecord GetRecord(string id) {
				string locale = BuiltInFunction.GetCurrentLocale();
				Object recordObj = RecordsById(locale)[id];
				if (recordObj != null) {
					return (ENLearnerDetailMenuEntityRecord) recordObj;
				} else {
					using(Transaction tran = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {

						int pos = 0;
						ENLearnerDetailMenuEntityRecord record = new ENLearnerDetailMenuEntityRecord(null);

						string sql= "SELECT TOP (1) " +
						 " [MENU]  o1" +
						 " FROM " + ENLearnerDetailMenuEntity.LocalViewName(null, locale) + " " +
						 " WHERE [MENU] = @DataId";


						Command cmd = tran.CreateCommand(sql);
						cmd.CreateParameter("@DataId", DbType.String, id);

						using(IDataReader reader = cmd.ExecuteReader()) {
							if (reader.Read()) {
								record.Read(reader, ref pos);
								RecordsById(locale)[id] = record;
							} else {
								throw new DataBaseException(ViewName(null, "") + " with key " + id + " was not found.");
							}
						}
						return record;
					}

				}
			}

			public static ENLearnerDetailMenuEntityRecord GetRecordById(string id) {
				return instance.GetRecord(id);
			}

			public static ENLearnerDetailMenuEntityRecord GetRecordByName(string name) {
				ENLearnerDetailMenuEntityRecordMetadata meta = (ENLearnerDetailMenuEntityRecordMetadata) instance.GetRecordMetadataByName(name);
				if (meta == null || !meta.Valid) {
					throw new DataBaseException(ViewName(null, "") + ", record with Identifier " + name + " was not found.");
				}
				return instance.GetRecord(meta);
			}

			public static ENLearnerDetailMenuEntityRecord GetRecordByKey(ObjectKey key) {
				ENLearnerDetailMenuEntityRecordMetadata meta = (ENLearnerDetailMenuEntityRecordMetadata) instance.GetRecordMetadataByKey(key);
				if (meta == null || !meta.Valid) {
					throw new DataBaseException(ViewName(null, "") + ", record metadata '" + ObjectKeyUtils.DatabaseValue(key) + "' was " + (meta == null ? "not found": "invalid") + ".");
				}
				return instance.GetRecord(meta);
			}

		} // ENLearnerDetailMenuEntity;

		/// <summary>
		/// Structure <code>RCLearnerDetailMenuRecord</code>
		/// </summary>
		[Serializable()]
		public partial struct RCLearnerDetailMenuRecord: ISerializable, ITypedRecord<RCLearnerDetailMenuRecord> {
			private static readonly GlobalObjectKey IdLearnerDetailMenu = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*b5khvJkVs_RyHbwAxrdMAA");

			public static void EnsureInitialized() {}
			[System.Xml.Serialization.XmlElement("LearnerDetailMenu")]
			public ENLearnerDetailMenuEntityRecord ssENLearnerDetailMenu;


			public static implicit operator ENLearnerDetailMenuEntityRecord(RCLearnerDetailMenuRecord r) {
				return r.ssENLearnerDetailMenu;
			}

			public static implicit operator RCLearnerDetailMenuRecord(ENLearnerDetailMenuEntityRecord r) {
				RCLearnerDetailMenuRecord res = new RCLearnerDetailMenuRecord(null);
				res.ssENLearnerDetailMenu = r;
				return res;
			}

			public BitArray ChangedAttributes {
				set {
					ssENLearnerDetailMenu.ChangedAttributes = value;
				}
				get {
					return ssENLearnerDetailMenu.ChangedAttributes;
				}
			}
			public BitArray OptimizedAttributes;

			public RCLearnerDetailMenuRecord(params string[] dummy) {
				OptimizedAttributes = null;
				ssENLearnerDetailMenu = new ENLearnerDetailMenuEntityRecord(null);
			}

			public BitArray[] GetDefaultOptimizedValues() {
				BitArray[] all = new BitArray[1];
				all[0] = new BitArray(1, false);
				return all;
			}

			public BitArray[] AllOptimizedAttributes {
				set {
					if (value == null) {
						ssENLearnerDetailMenu.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					} else {
						ssENLearnerDetailMenu.OptimizedAttributes = value[0];
					}
				}
				get {
					BitArray[] all = new BitArray[1];
					all[0] = ssENLearnerDetailMenu.OptimizedAttributes;
					return all;
				}
			}

			/// <summary>
			/// Read a record from database
			/// </summary>
			/// <param name="r"> Data base reader</param>
			/// <param name="index"> index</param>
			public void Read(IDataReader r, ref int index) {
				ssENLearnerDetailMenu.Read(r, ref index);
			}
			/// <summary>
			/// Read from database
			/// </summary>
			/// <param name="r"> Data reader</param>
			public void ReadDB(IDataReader r) {
				int index = 0;
				Read(r, ref index);
			}

			/// <summary>
			/// Read from record
			/// </summary>
			/// <param name="r"> Record</param>
			public void ReadIM(RCLearnerDetailMenuRecord r) {
				this = r;
			}


			public static bool operator == (RCLearnerDetailMenuRecord a, RCLearnerDetailMenuRecord b) {
				if (a.ssENLearnerDetailMenu != b.ssENLearnerDetailMenu) return false;
				return true;
			}

			public static bool operator != (RCLearnerDetailMenuRecord a, RCLearnerDetailMenuRecord b) {
				return !(a==b);
			}

			public override bool Equals(object o) {
				if (o.GetType() != typeof(RCLearnerDetailMenuRecord)) return false;
				return (this == (RCLearnerDetailMenuRecord) o);
			}

			public override int GetHashCode() {
				try {
					return base.GetHashCode()
					^ ssENLearnerDetailMenu.GetHashCode()
					;
				} catch {
					return base.GetHashCode();
				}
			}

			public void GetObjectData(SerializationInfo info, StreamingContext context) {
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				for (int i = 0; i < fields.Length; i++)
				if (fields[i] .FieldType.IsSerializable)
				info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
			}

			public RCLearnerDetailMenuRecord(SerializationInfo info, StreamingContext context) {
				OptimizedAttributes = null;
				ssENLearnerDetailMenu = new ENLearnerDetailMenuEntityRecord(null);
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fields[0] .FieldType.IsSerializable)
				ssENLearnerDetailMenu = (ENLearnerDetailMenuEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			}

			public void RecursiveReset() {
				ssENLearnerDetailMenu.RecursiveReset();
			}

			public void InternalRecursiveSave() {
				ssENLearnerDetailMenu.InternalRecursiveSave();
			}


			public RCLearnerDetailMenuRecord Duplicate() {
				RCLearnerDetailMenuRecord t;
				t.ssENLearnerDetailMenu = (ENLearnerDetailMenuEntityRecord) this.ssENLearnerDetailMenu.Duplicate();
				t.OptimizedAttributes = null;
				return t;
			}

			IRecord IRecord.Duplicate() {
				return Duplicate();
			}

			public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
				System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
				if (fieldName != null) {
					VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				}
				if (detailLevel > 0) {
					ssENLearnerDetailMenu.ToXml(this, recordElem, "LearnerDetailMenu", detailLevel - 1);
				} else {
					VarValue.AppendDeferredEvaluationElement(recordElem);
				}
			}

			public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
				String head = VarValue.GetHead(fields);
				String tail = VarValue.GetTail(fields);
				variable.Found = false;
				if (head == "learnerdetailmenu") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".LearnerDetailMenu")) variable.Value = ssENLearnerDetailMenu; else variable.Optimized = true;
					variable.SetFieldName("learnerdetailmenu");
				}
				if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
			}

			public bool ChangedAttributeGet(GlobalObjectKey key) {
				return ssENLearnerDetailMenu.ChangedAttributeGet(key);
			}

			public bool OptimizedAttributeGet(GlobalObjectKey key) {
				return ssENLearnerDetailMenu.OptimizedAttributeGet(key);
			}

			public object AttributeGet(GlobalObjectKey key) {
				if (key == IdLearnerDetailMenu) {
					return ssENLearnerDetailMenu;
				} else {
					throw new Exception("Invalid key");
				}
			}
			public void FillFromOther(IRecord other) {
				if (other == null) return;
				ssENLearnerDetailMenu.FillFromOther((IRecord) other.AttributeGet(IdLearnerDetailMenu));
			}
		} // RCLearnerDetailMenuRecord
		/// <summary>
		/// RecordList type <code>RLLearnerDetailMenuRecordList</code> that represents a record list of
		///  <code>LearnerDetailMenu</code>
		/// </summary>
		[Serializable()]
		public partial class RLLearnerDetailMenuRecordList: GenericRecordList<RCLearnerDetailMenuRecord>, IEnumerable, IEnumerator, ISerializable {
			public static void EnsureInitialized() {}

			protected override RCLearnerDetailMenuRecord GetElementDefaultValue() {
				return new RCLearnerDetailMenuRecord("");
			}

			public T[] ToArray<T>(Func<RCLearnerDetailMenuRecord, T> converter) {
				return ToArray(this, converter);
			}

			public static T[] ToArray<T>(RLLearnerDetailMenuRecordList recordlist, Func<RCLearnerDetailMenuRecord, T> converter) {
				T[] result = new T[recordlist.Length];
				recordlist.StartIteration();
				while (!recordlist.Eof) {
					result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
					recordlist.Advance();
				}
				recordlist.EndIteration();
				return result;
			}

			public static RLLearnerDetailMenuRecordList ToList<T>(T[] array, Func <T, RCLearnerDetailMenuRecord> converter) {
				RLLearnerDetailMenuRecordList result = new RLLearnerDetailMenuRecordList();
				if (array != null) {
					foreach(T item in array) {
						result.Append(converter(item));
					}
				}
				return result;
			}
			/// <summary>
			/// Default Constructor
			/// </summary>
			public RLLearnerDetailMenuRecordList(): base() {
			}

			/// <summary>
			/// Constructor with transaction parameter
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLLearnerDetailMenuRecordList(IDbTransaction trans): base(trans) {
			}

			/// <summary>
			/// Constructor with transaction parameter and alternate read method
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLLearnerDetailMenuRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
				this.alternateReadDBMethod = alternateReadDBMethod;
			}

			/// <summary>
			/// Constructor declaration for serialization
			/// </summary>
			/// <param name="info"> SerializationInfo</param>
			/// <param name="context"> StreamingContext</param>
			public RLLearnerDetailMenuRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
			}

			public override BitArray[] GetDefaultOptimizedValues() {
				BitArray[] def = new BitArray[1];
				def[0] = new BitArray(1, false);
				return def;
			}
			/// <summary>
			/// Create as new list
			/// </summary>
			/// <returns>The new record list</returns>
			protected override OSList<RCLearnerDetailMenuRecord> NewList() {
				return new RLLearnerDetailMenuRecordList();
			}


		} // RLLearnerDetailMenuRecordList

		/// <summary>
		/// RecordList type <code>RLLearnerDetailMenuList</code> that represents a record list of
		///  <code>Text</code>
		/// </summary>
		[Serializable()]
		public partial class RLLearnerDetailMenuList: GenericRecordList<ENLearnerDetailMenuEntityRecord>, IEnumerable, IEnumerator, ISerializable {
			public static void EnsureInitialized() {}

			protected override ENLearnerDetailMenuEntityRecord GetElementDefaultValue() {
				return new ENLearnerDetailMenuEntityRecord("");
			}

			public T[] ToArray<T>(Func<ENLearnerDetailMenuEntityRecord, T> converter) {
				return ToArray(this, converter);
			}

			public static T[] ToArray<T>(RLLearnerDetailMenuList recordlist, Func<ENLearnerDetailMenuEntityRecord, T> converter) {
				T[] result = new T[recordlist.Length];
				recordlist.StartIteration();
				while (!recordlist.Eof) {
					result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
					recordlist.Advance();
				}
				recordlist.EndIteration();
				return result;
			}

			public static RLLearnerDetailMenuList ToList<T>(T[] array, Func <T, ENLearnerDetailMenuEntityRecord> converter) {
				RLLearnerDetailMenuList result = new RLLearnerDetailMenuList();
				if (array != null) {
					foreach(T item in array) {
						result.Append(converter(item));
					}
				}
				return result;
			}
			/// <summary>
			/// Default Constructor
			/// </summary>
			public RLLearnerDetailMenuList(): base() {
			}

			/// <summary>
			/// Constructor with transaction parameter
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLLearnerDetailMenuList(IDbTransaction trans): base(trans) {
			}

			/// <summary>
			/// Constructor with transaction parameter and alternate read method
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLLearnerDetailMenuList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
				this.alternateReadDBMethod = alternateReadDBMethod;
			}

			/// <summary>
			/// Constructor declaration for serialization
			/// </summary>
			/// <param name="info"> SerializationInfo</param>
			/// <param name="context"> StreamingContext</param>
			public RLLearnerDetailMenuList(SerializationInfo info, StreamingContext context): base(info, context) {
			}

			public override BitArray[] GetDefaultOptimizedValues() {
				BitArray[] def = new BitArray[0];
				return def;
			}
			/// <summary>
			/// Create as new list
			/// </summary>
			/// <returns>The new record list</returns>
			protected override OSList<ENLearnerDetailMenuEntityRecord> NewList() {
				return new RLLearnerDetailMenuList();
			}


		} // RLLearnerDetailMenuList
		public partial class ExtendedActions {
			/// <summary>
			/// Action: GetLearnerDetailMenu
			/// </summary>

			public static void GetLearnerDetailMenu(HeContext heContext, string inParamId, out RCLearnerDetailMenuRecord outParamRecord) {
				outParamRecord = new RCLearnerDetailMenuRecord(null);

				try {
					outParamRecord = ENLearnerDetailMenuEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [MENU]" +
						 " FROM " + ENLearnerDetailMenuEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [MENU] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetLearnerDetailMenu", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENLearnerDetailMenuEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			}

		}
	}

	namespace ssCaseConferencing {
		[XmlType("LearnerDetailMenu")]
		public class WORCLearnerDetailMenuRecord {
			[System.Xml.Serialization.XmlElement("Menu")]
			public string varWSMenu;

			public WORCLearnerDetailMenuRecord() {
				varWSMenu = (string) "";
			}

			public WORCLearnerDetailMenuRecord(ENLearnerDetailMenuEntityRecord r) {
				varWSMenu = BaseAppUtils.RemoveControlChars(r.ssMenu);
			}

			public static RLLearnerDetailMenuList ToRecordList(WORCLearnerDetailMenuRecord[] array) {
				RLLearnerDetailMenuList rl = new RLLearnerDetailMenuList();
				if (array != null) {
					foreach(WORCLearnerDetailMenuRecord val in array) {
						rl.Append(val);
					}
				}
				return rl;
			}

			public static WORCLearnerDetailMenuRecord[] FromRecordList(RLLearnerDetailMenuList rl) {
				WORCLearnerDetailMenuRecord[] array = new WORCLearnerDetailMenuRecord[rl == null ? 0: rl.Length];
				for (int i = 0; i < array.Length; i++) {
					array[i] = rl.Data[i];
				}
				return array;
			}
		}
	}

	namespace ssCaseConferencing {
		partial struct RCLearnerDetailMenuRecord {
			public static implicit operator WORCLearnerDetailMenuRecord(RCLearnerDetailMenuRecord r) {
				return new WORCLearnerDetailMenuRecord(r.ssENLearnerDetailMenu);
			}

			public static implicit operator RCLearnerDetailMenuRecord(WORCLearnerDetailMenuRecord w) {
				RCLearnerDetailMenuRecord r = new RCLearnerDetailMenuRecord("");
				if (w != null) {
					r.ssENLearnerDetailMenu = w;
				}
				return r;
			}

		}

		partial struct ENLearnerDetailMenuEntityRecord {
			public static implicit operator WORCLearnerDetailMenuRecord(ENLearnerDetailMenuEntityRecord r) {
				return new WORCLearnerDetailMenuRecord(r);
			}

			public static implicit operator ENLearnerDetailMenuEntityRecord(WORCLearnerDetailMenuRecord w) {
				ENLearnerDetailMenuEntityRecord r = new ENLearnerDetailMenuEntityRecord("");
				if (w != null) {
					r.ssMenu = ((string) w.varWSMenu ?? "");
				}
				return r;
			}

		}
	}


	namespace ssCaseConferencing {
		[Serializable()]
		public partial class WORLLearnerDetailMenuRecordList {
			public WORCLearnerDetailMenuRecord[] Array;


			public WORLLearnerDetailMenuRecordList(WORCLearnerDetailMenuRecord[] r) {
				if (r == null)
				Array = new WORCLearnerDetailMenuRecord[0];
				else
				Array = r;
			}
			public WORLLearnerDetailMenuRecordList() {
				Array = new WORCLearnerDetailMenuRecord[0];
			}

			public WORLLearnerDetailMenuRecordList(RLLearnerDetailMenuRecordList rl) {
				rl=(RLLearnerDetailMenuRecordList) rl.Duplicate();
				Array = new WORCLearnerDetailMenuRecord[rl.Length];
				while (!rl.Eof) {
					Array[rl.CurrentRowNumber] = new WORCLearnerDetailMenuRecord(rl.CurrentRec);
					rl.Advance();
				}
			}

		}
	}

	namespace ssCaseConferencing {
		partial class RLLearnerDetailMenuRecordList {
			public static implicit operator RLLearnerDetailMenuRecordList(WORCLearnerDetailMenuRecord[] array) {
				RLLearnerDetailMenuRecordList rl = new RLLearnerDetailMenuRecordList();
				if (array != null) {
					foreach(WORCLearnerDetailMenuRecord val in array) {
						rl.Append((RCLearnerDetailMenuRecord) val);
					}
				}
				return rl;
			}
			public static implicit operator WORCLearnerDetailMenuRecord[](RLLearnerDetailMenuRecordList rl) {
				WORCLearnerDetailMenuRecord[] array = new WORCLearnerDetailMenuRecord[rl == null ? 0: rl.Length];
				for (int i = 0; i < array.Length; i++) {
					array[i] = (RCLearnerDetailMenuRecord) rl.Data[i];
				}
				return array;
			}
		}
	}

	namespace ssCaseConferencing {
		partial class WORLLearnerDetailMenuRecordList {
			public static implicit operator RLLearnerDetailMenuRecordList(WORLLearnerDetailMenuRecordList w) {
				return w.Array;
			}
			public static implicit operator WORLLearnerDetailMenuRecordList(RLLearnerDetailMenuRecordList rl) {
				return new WORLLearnerDetailMenuRecordList(rl);
			}
			public static implicit operator WORCLearnerDetailMenuRecord[](WORLLearnerDetailMenuRecordList w) {
				if (w != null) {
					return w.Array;
				}
				return null;
			}
			public static implicit operator WORLLearnerDetailMenuRecordList(WORCLearnerDetailMenuRecord[] array) {
				return new WORLLearnerDetailMenuRecordList(array);
			}
		}
	}

