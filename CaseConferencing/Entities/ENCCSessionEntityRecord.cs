/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENCCSessionEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENCCSessionEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENCCSessionEntity.eSpaceId;
	} // ENCCSessionEntity

	/// <summary>
	/// Entity <code>ENCCSessionEntityRecord</code> that represents the Service Studio entity
	///  <code>CCSession</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("CCSession", "kWA_4sgl2USLgtyYV44bjg", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_CCSession", "")]
	[Serializable()]
	public partial struct ENCCSessionEntityRecord: ISerializable, ITypedRecord<ENCCSessionEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*+jHr5ETeZE2ltfHCY7Weyw");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*pqOeivWTSEGHMoDXyWrkrg");
		private static readonly GlobalObjectKey IdNotes = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ZDkBtG6i8E2fhfHYZfIxbg");
		private static readonly GlobalObjectKey IdClusterId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*iFGJha2+hUet7kE+Vvsy6A");
		private static readonly GlobalObjectKey IdStartDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*mHEiN1CXWkyHl7UuQ5ZSzA");
		private static readonly GlobalObjectKey IdEndDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*IASTK+aceki1mO936ZFmTQ");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ABXCiR+kwEuKyvuMPm4INg");
		private static readonly GlobalObjectKey IdIsActive = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*GJGUsNtx4ku5G3IciNmsxQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(8, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 300, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NOTES", 1000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Notes")]
		private string _ssNotes;
		public string ssNotes {
			get {
				return _ssNotes;
			}
			set {
				if ((_ssNotes!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssNotes = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CLUSTERID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ClusterId")]
		private string _ssClusterId;
		public string ssClusterId {
			get {
				return _ssClusterId;
			}
			set {
				if ((_ssClusterId!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssClusterId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STARTDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("StartDate")]
		private DateTime _ssStartDate;
		public DateTime ssStartDate {
			get {
				return _ssStartDate;
			}
			set {
				if ((_ssStartDate!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssStartDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENDDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("EndDate")]
		private DateTime _ssEndDate;
		public DateTime ssEndDate {
			get {
				return _ssEndDate;
			}
			set {
				if ((_ssEndDate!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssEndDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IsActive")]
		private bool _ssIsActive;
		public bool ssIsActive {
			get {
				return _ssIsActive;
			}
			set {
				if ((_ssIsActive!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssIsActive = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENCCSessionEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(8, true);
			OptimizedAttributes = new BitArray(8, false);
			_ssId = 0;
			_ssDescription = "";
			_ssNotes = "";
			_ssClusterId = "";
			_ssStartDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssEndDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssIsActive = true;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "CCSession.Id", 0);
			ssDescription = r.ReadText(index++, "CCSession.Description", "");
			ssNotes = r.ReadText(index++, "CCSession.Notes", "");
			ssClusterId = r.ReadTextEntityReference(index++, "CCSession.ClusterId", "");
			ssStartDate = r.ReadDateTime(index++, "CCSession.StartDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssEndDate = r.ReadDateTime(index++, "CCSession.EndDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "CCSession.CreatedBy", 0);
			ssIsActive = r.ReadBoolean(index++, "CCSession.IsActive", false);
			ChangedAttributes = new BitArray(8, false);
			OptimizedAttributes = new BitArray(8, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENCCSessionEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENCCSessionEntityRecord a, ENCCSessionEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssNotes != b.ssNotes) return false;
			if (a.ssClusterId != b.ssClusterId) return false;
			if (a.ssStartDate != b.ssStartDate) return false;
			if (a.ssEndDate != b.ssEndDate) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssIsActive != b.ssIsActive) return false;
			return true;
		}

		public static bool operator != (ENCCSessionEntityRecord a, ENCCSessionEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENCCSessionEntityRecord)) return false;
			return (this == (ENCCSessionEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssNotes.GetHashCode()
				^ ssClusterId.GetHashCode()
				^ ssStartDate.GetHashCode()
				^ ssEndDate.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssIsActive.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENCCSessionEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(8, true);
			OptimizedAttributes = new BitArray(8, false);
			_ssId = 0;
			_ssDescription = "";
			_ssNotes = "";
			_ssClusterId = "";
			_ssStartDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssEndDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssIsActive = true;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssNotes = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssClusterId = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssStartDate = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssEndDate = (DateTime) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssIsActive = (bool) info.GetValue(fields[7] .Name, fields[7] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENCCSessionEntityRecord Duplicate() {
			ENCCSessionEntityRecord t;
			t._ssId = this._ssId;
			t._ssDescription = this._ssDescription;
			t._ssNotes = this._ssNotes;
			t._ssClusterId = this._ssClusterId;
			t._ssStartDate = this._ssStartDate;
			t._ssEndDate = this._ssEndDate;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssIsActive = this._ssIsActive;
			t.ChangedAttributes = new BitArray(8);
			t.OptimizedAttributes = new BitArray(8);
			for (int i = 0; i < 8; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Notes")) VarValue.AppendAttribute(recordElem, "Notes", ssNotes, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Notes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ClusterId")) VarValue.AppendAttribute(recordElem, "ClusterId", ssClusterId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ClusterId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StartDate")) VarValue.AppendAttribute(recordElem, "StartDate", ssStartDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "StartDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EndDate")) VarValue.AppendAttribute(recordElem, "EndDate", ssEndDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "EndDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsActive")) VarValue.AppendAttribute(recordElem, "IsActive", ssIsActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsActive");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "notes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Notes")) variable.Value = ssNotes; else variable.Optimized = true;
			} else if (head == "clusterid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ClusterId")) variable.Value = ssClusterId; else variable.Optimized = true;
			} else if (head == "startdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StartDate")) variable.Value = ssStartDate; else variable.Optimized = true;
			} else if (head == "enddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EndDate")) variable.Value = ssEndDate; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "isactive") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsActive")) variable.Value = ssIsActive; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdNotes)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdClusterId)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdStartDate)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdEndDate)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdIsActive)) {
				return ChangedAttributes[7];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdNotes)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdClusterId)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdStartDate)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdEndDate)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdIsActive)) {
				return OptimizedAttributes[7];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdNotes) {
				return ssNotes;
			} else if (key == IdClusterId) {
				return ssClusterId;
			} else if (key == IdStartDate) {
				return ssStartDate;
			} else if (key == IdEndDate) {
				return ssEndDate;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdIsActive) {
				return ssIsActive;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(8);
			OptimizedAttributes = new BitArray(8);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdDescription);
			ssNotes = (string) other.AttributeGet(IdNotes);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdNotes);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdNotes);
			ssClusterId = (string) other.AttributeGet(IdClusterId);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdClusterId);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdClusterId);
			ssStartDate = (DateTime) other.AttributeGet(IdStartDate);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdStartDate);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdStartDate);
			ssEndDate = (DateTime) other.AttributeGet(IdEndDate);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdEndDate);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdEndDate);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdCreatedBy);
			ssIsActive = (bool) other.AttributeGet(IdIsActive);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdIsActive);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdIsActive);
		}
	} // ENCCSessionEntityRecord
	/// <summary>
	/// Structure <code>RCCCSessionRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCCSessionRecord: ISerializable, ITypedRecord<RCCCSessionRecord> {
		private static readonly GlobalObjectKey IdCCSession = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*YtIMR1wPQu4yPKHpr39GBQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CCSession")]
		public ENCCSessionEntityRecord ssENCCSession;


		public static implicit operator ENCCSessionEntityRecord(RCCCSessionRecord r) {
			return r.ssENCCSession;
		}

		public static implicit operator RCCCSessionRecord(ENCCSessionEntityRecord r) {
			RCCCSessionRecord res = new RCCCSessionRecord(null);
			res.ssENCCSession = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENCCSession.ChangedAttributes = value;
			}
			get {
				return ssENCCSession.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCCCSessionRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCCSession = new ENCCSessionEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCCSession.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENCCSession.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENCCSession.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCCSession.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCCSessionRecord r) {
			this = r;
		}


		public static bool operator == (RCCCSessionRecord a, RCCCSessionRecord b) {
			if (a.ssENCCSession != b.ssENCCSession) return false;
			return true;
		}

		public static bool operator != (RCCCSessionRecord a, RCCCSessionRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCCSessionRecord)) return false;
			return (this == (RCCCSessionRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCCSession.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCCSessionRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCCSession = new ENCCSessionEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCCSession = (ENCCSessionEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENCCSession.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCCSession.InternalRecursiveSave();
		}


		public RCCCSessionRecord Duplicate() {
			RCCCSessionRecord t;
			t.ssENCCSession = (ENCCSessionEntityRecord) this.ssENCCSession.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCCSession.ToXml(this, recordElem, "CCSession", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "ccsession") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CCSession")) variable.Value = ssENCCSession; else variable.Optimized = true;
				variable.SetFieldName("ccsession");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENCCSession.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENCCSession.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCCSession) {
				return ssENCCSession;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCCSession.FillFromOther((IRecord) other.AttributeGet(IdCCSession));
		}
	} // RCCCSessionRecord
	/// <summary>
	/// RecordList type <code>RLCCSessionRecordList</code> that represents a record list of
	///  <code>CCSession</code>
	/// </summary>
	[Serializable()]
	public partial class RLCCSessionRecordList: GenericRecordList<RCCCSessionRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCCSessionRecord GetElementDefaultValue() {
			return new RCCCSessionRecord("");
		}

		public T[] ToArray<T>(Func<RCCCSessionRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCCSessionRecordList recordlist, Func<RCCCSessionRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCCSessionRecordList ToList<T>(T[] array, Func <T, RCCCSessionRecord> converter) {
			RLCCSessionRecordList result = new RLCCSessionRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCCSessionRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCCSessionRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCCSessionRecord> NewList() {
			return new RLCCSessionRecordList();
		}


	} // RLCCSessionRecordList

	/// <summary>
	/// RecordList type <code>RLCCSessionList</code> that represents a record list of
	///  <code>ClusterIdentifier, UserIdentifier, Text, Text, DateTime, DateTime, Boolean, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLCCSessionList: GenericRecordList<ENCCSessionEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENCCSessionEntityRecord GetElementDefaultValue() {
			return new ENCCSessionEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENCCSessionEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCCSessionList recordlist, Func<ENCCSessionEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCCSessionList ToList<T>(T[] array, Func <T, ENCCSessionEntityRecord> converter) {
			RLCCSessionList result = new RLCCSessionList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCCSessionList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCCSessionList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENCCSessionEntityRecord> NewList() {
			return new RLCCSessionList();
		}


	} // RLCCSessionList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateCCSession
		/// </summary>

		public static void CreateCCSession(HeContext heContext, RCCCSessionRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionEntity.eSpaceId;
				ENCCSessionEntityRecord ssENCCSession = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENCCSessionEntity.LocalViewName(null, null) + " (" +
					 " [DESCRIPTION]" +
					 ", [NOTES]" +
					 ", [CLUSTERID]" +
					 ", [STARTDATE]" +
					 ", [ENDDATE]" +
					 ", [CREATEDBY]" +
					 ", [ISACTIVE]" +
					 " ) VALUES (" +
					 " @ssDescription" +
					 ", @ssNotes" +
					 ", @ssClusterId" +
					 ", @ssStartDate" +
					 ", @ssEndDate" +
					 ", @ssCreatedBy" +
					 ", @ssIsActive" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCCSession.ssDescription);
					insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENCCSession.ssNotes);
					if ((ssENCCSession.ssClusterId== "")) {
						insertSqlCmd.CreateParameter("@ssClusterId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssClusterId", DbType.String, ssENCCSession.ssClusterId);
					}
					insertSqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENCCSession.ssStartDate);
					insertSqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENCCSession.ssEndDate);
					if ((ssENCCSession.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCCSession.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENCCSession.ssIsActive);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateCCSession", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateCCSession
		/// </summary>

		public static void CreateOrUpdateCCSession(HeContext heContext, BitArray usedFields, RCCCSessionRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionEntity.eSpaceId;
				ENCCSessionEntityRecord ssENCCSession = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(8, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCCSessionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CLUSTERID] = @ssClusterId"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STARTDATE] = @ssStartDate"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENDDATE] = @ssEndDate"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISACTIVE] = @ssIsActive"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCCSessionssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCCSession.ssDescription);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENCCSession.ssNotes);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENCCSession.ssClusterId== "")) {
							sqlCmd.CreateParameter("@ssClusterId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssClusterId", DbType.String, ssENCCSession.ssClusterId);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENCCSession.ssStartDate);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENCCSession.ssEndDate);
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENCCSession.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCCSession.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENCCSession.ssIsActive);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISACTIVE] = [ISACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCCSessionssId", DbType.Int32, ssENCCSession.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateCCSession (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENCCSessionEntity.LocalViewName(null, null) + " (" +
						 " [DESCRIPTION]" +
						 ", [NOTES]" +
						 ", [CLUSTERID]" +
						 ", [STARTDATE]" +
						 ", [ENDDATE]" +
						 ", [CREATEDBY]" +
						 ", [ISACTIVE]" +
						 " ) VALUES (" +
						 " @ssDescription" +
						 ", @ssNotes" +
						 ", @ssClusterId" +
						 ", @ssStartDate" +
						 ", @ssEndDate" +
						 ", @ssCreatedBy" +
						 ", @ssIsActive" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCCSession.ssDescription);
						insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENCCSession.ssNotes);
						if ((ssENCCSession.ssClusterId== "")) {
							insertSqlCmd.CreateParameter("@ssClusterId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssClusterId", DbType.String, ssENCCSession.ssClusterId);
						}
						insertSqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENCCSession.ssStartDate);
						insertSqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENCCSession.ssEndDate);
						if ((ssENCCSession.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCCSession.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENCCSession.ssIsActive);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateCCSession", true), typeof(int));
					} else {
						outParamId = ssENCCSession.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteCCSession
		/// </summary>

		public static void DeleteCCSession(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENCCSessionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteCCSession", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCCSession
		/// </summary>

		public static void GetCCSession(HeContext heContext, int inParamId, out RCCCSessionRecord outParamRecord) {
			outParamRecord = new RCCCSessionRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [DESCRIPTION]" +
					 ", [NOTES]" +
					 ", [CLUSTERID]" +
					 ", [STARTDATE]" +
					 ", [ENDDATE]" +
					 ", [CREATEDBY]" +
					 ", [ISACTIVE]" +
					 " FROM " + ENCCSessionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCCSession", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(8, false)
							}
							;
						} else
						throw new DataBaseException(ENCCSessionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCCSessionForUpdate
		/// </summary>

		public static void GetCCSessionForUpdate(HeContext heContext, int inParamId, out RCCCSessionRecord outParamRecord) {
			outParamRecord = new RCCCSessionRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [DESCRIPTION]" +
					 ", [NOTES]" +
					 ", [CLUSTERID]" +
					 ", [STARTDATE]" +
					 ", [ENDDATE]" +
					 ", [CREATEDBY]" +
					 ", [ISACTIVE]" +
					 "FROM " + ENCCSessionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCCSessionForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(8, false)
							}
							;
						} else
						throw new DataBaseException(ENCCSessionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateCCSession
		/// </summary>

		public static void UpdateCCSession(HeContext heContext, BitArray usedFields, RCCCSessionRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionEntity.eSpaceId;
				ENCCSessionEntityRecord ssENCCSession = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(8, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCCSessionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CLUSTERID] = @ssClusterId"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STARTDATE] = @ssStartDate"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENDDATE] = @ssEndDate"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISACTIVE] = @ssIsActive"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCCSessionssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCCSession.ssDescription);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENCCSession.ssNotes);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENCCSession.ssClusterId== "")) {
							sqlCmd.CreateParameter("@ssClusterId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssClusterId", DbType.String, ssENCCSession.ssClusterId);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENCCSession.ssStartDate);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENCCSession.ssEndDate);
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENCCSession.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCCSession.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENCCSession.ssIsActive);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISACTIVE] = [ISACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCCSessionssId", DbType.Int32, ssENCCSession.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateCCSession", true) <= 0)
					throw new DataBaseException(ENCCSessionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENCCSession.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("CCSession")]
	public class WORCCCSessionRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string varWSNotes;

		[System.Xml.Serialization.XmlElement("ClusterId")]
		public string varWSClusterId;

		[System.Xml.Serialization.XmlElement("StartDate")]
		public DateTime varWSStartDate;

		[System.Xml.Serialization.XmlElement("EndDate")]
		public DateTime varWSEndDate;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("IsActive")]
		public bool varWSIsActive;

		public WORCCCSessionRecord() {
			varWSId = (int) 0;
			varWSDescription = (string) "";
			varWSNotes = (string) "";
			varWSClusterId = (string) "";
			varWSStartDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSEndDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
			varWSIsActive = (bool) true;
		}

		public WORCCCSessionRecord(ENCCSessionEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
			varWSNotes = BaseAppUtils.RemoveControlChars(r.ssNotes);
			varWSClusterId = BaseAppUtils.RemoveControlChars(r.ssClusterId);
			varWSStartDate = (DateTime) r.ssStartDate;
			varWSEndDate = (DateTime) r.ssEndDate;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSIsActive = (bool) r.ssIsActive;
		}

		public static RLCCSessionList ToRecordList(WORCCCSessionRecord[] array) {
			RLCCSessionList rl = new RLCCSessionList();
			if (array != null) {
				foreach(WORCCCSessionRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCCSessionRecord[] FromRecordList(RLCCSessionList rl) {
			WORCCCSessionRecord[] array = new WORCCCSessionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCCSessionRecord {
		public static implicit operator WORCCCSessionRecord(RCCCSessionRecord r) {
			return new WORCCCSessionRecord(r.ssENCCSession);
		}

		public static implicit operator RCCCSessionRecord(WORCCCSessionRecord w) {
			RCCCSessionRecord r = new RCCCSessionRecord("");
			if (w != null) {
				r.ssENCCSession = w;
			}
			return r;
		}

	}

	partial struct ENCCSessionEntityRecord {
		public static implicit operator WORCCCSessionRecord(ENCCSessionEntityRecord r) {
			return new WORCCCSessionRecord(r);
		}

		public static implicit operator ENCCSessionEntityRecord(WORCCCSessionRecord w) {
			ENCCSessionEntityRecord r = new ENCCSessionEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssDescription = ((string) w.varWSDescription ?? "");
				r.ssNotes = ((string) w.varWSNotes ?? "");
				r.ssClusterId = (string) w.varWSClusterId;
				r.ssStartDate = (DateTime) w.varWSStartDate;
				r.ssEndDate = (DateTime) w.varWSEndDate;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssIsActive = (bool) w.varWSIsActive;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCCSessionRecordList {
		public WORCCCSessionRecord[] Array;


		public WORLCCSessionRecordList(WORCCCSessionRecord[] r) {
			if (r == null)
			Array = new WORCCCSessionRecord[0];
			else
			Array = r;
		}
		public WORLCCSessionRecordList() {
			Array = new WORCCCSessionRecord[0];
		}

		public WORLCCSessionRecordList(RLCCSessionRecordList rl) {
			rl=(RLCCSessionRecordList) rl.Duplicate();
			Array = new WORCCCSessionRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCCSessionRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCCSessionRecordList {
		public static implicit operator RLCCSessionRecordList(WORCCCSessionRecord[] array) {
			RLCCSessionRecordList rl = new RLCCSessionRecordList();
			if (array != null) {
				foreach(WORCCCSessionRecord val in array) {
					rl.Append((RCCCSessionRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCCSessionRecord[](RLCCSessionRecordList rl) {
			WORCCCSessionRecord[] array = new WORCCCSessionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCCSessionRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCCSessionRecordList {
		public static implicit operator RLCCSessionRecordList(WORLCCSessionRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCCSessionRecordList(RLCCSessionRecordList rl) {
			return new WORLCCSessionRecordList(rl);
		}
		public static implicit operator WORCCCSessionRecord[](WORLCCSessionRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCCSessionRecordList(WORCCCSessionRecord[] array) {
			return new WORLCCSessionRecordList(array);
		}
	}
}

