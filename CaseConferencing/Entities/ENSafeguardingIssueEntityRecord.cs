/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSafeguardingIssueEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENSafeguardingIssueEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENSafeguardingIssueEntity.eSpaceId;
	} // ENSafeguardingIssueEntity

	/// <summary>
	/// Entity <code>ENSafeguardingIssueEntityRecord</code> that represents the Service Studio entity
	///  <code>SafeguardingIssue</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("SafeguardingIssue", "0pOsFdEOK0WEEQXt_lVifg", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_SafeguardingIssue", "")]
	[Serializable()]
	public partial struct ENSafeguardingIssueEntityRecord: ISerializable, ITypedRecord<ENSafeguardingIssueEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*MXbEAZulakOAGV12qXYHoA");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*pv9b6xtv6ES_egw3ZDifVg");
		private static readonly GlobalObjectKey IdSafeguardingIssueType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*PijZezu9OkGBS+8NYU_9bw");
		private static readonly GlobalObjectKey IdDateOfRefferal = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*qukayoENAkS1A7FkgyCEZg");
		private static readonly GlobalObjectKey IdActionTaken = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xoCoBRbcbkezMSHoZg_Eng");
		private static readonly GlobalObjectKey IdRAGStatus = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*TV22OAIdREW_nmu9MZDhhA");
		private static readonly GlobalObjectKey IdAdditionalInformation = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*d6gv85Dpd0m4kTyi6VChOQ");
		private static readonly GlobalObjectKey IdNumberOfConcernsRaised = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*BbNl7SpVNU+rfDAmY4eJvg");
		private static readonly GlobalObjectKey IdFileReceivedFromSchool = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*r4m+QZLhFk6wE95LBlpD2w");
		private static readonly GlobalObjectKey IdLeadProfessional = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*FzY2vwlmAE6SLCvrXnXKEA");
		private static readonly GlobalObjectKey IdSafeguardingOutcome = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*yuaDJ+AqZUa3mmIOpfPIVA");
		private static readonly GlobalObjectKey IdSafeguardingOutcomeOtherText = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*eSFWApGqKkO6fWdVyxEYMQ");
		private static readonly GlobalObjectKey IdSafeguardingNatureOfConcern = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*fQX9xe6HL0ycIGxih5tbDg");
		private static readonly GlobalObjectKey IdDetailsOfConcern = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*v98hMDnxU0S4XEBTCln3Lw");
		private static readonly GlobalObjectKey IdLearnerAgeAtTimeOfReferral = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*FTiGoELJTkquvnsicHkGUw");
		private static readonly GlobalObjectKey IdSafeguardingReferralMadeTo = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*zkBrZ115N0SH6elF2AtAcA");
		private static readonly GlobalObjectKey IdUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*YVrAijhzeEeLOlHKB4jXQw");
		private static readonly GlobalObjectKey IdUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*XZsyTyy0+EqaHpOAwt+6Bw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(18, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGISSUETYPE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SafeguardingIssueType")]
		private string _ssSafeguardingIssueType;
		public string ssSafeguardingIssueType {
			get {
				return _ssSafeguardingIssueType;
			}
			set {
				if ((_ssSafeguardingIssueType!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssSafeguardingIssueType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DATEOFREFFERAL", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("DateOfRefferal")]
		private DateTime _ssDateOfRefferal;
		public DateTime ssDateOfRefferal {
			get {
				return _ssDateOfRefferal;
			}
			set {
				if ((_ssDateOfRefferal!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssDateOfRefferal = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ACTIONTAKEN", 1000, false, false, false)]
		[System.Xml.Serialization.XmlElement("ActionTaken")]
		private string _ssActionTaken;
		public string ssActionTaken {
			get {
				return _ssActionTaken;
			}
			set {
				if ((_ssActionTaken!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssActionTaken = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RAGSTATUS", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RAGStatus")]
		private string _ssRAGStatus;
		public string ssRAGStatus {
			get {
				return _ssRAGStatus;
			}
			set {
				if ((_ssRAGStatus!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssRAGStatus = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ADDITIONALINFORMATION", 1000, false, false, false)]
		[System.Xml.Serialization.XmlElement("AdditionalInformation")]
		private string _ssAdditionalInformation;
		public string ssAdditionalInformation {
			get {
				return _ssAdditionalInformation;
			}
			set {
				if ((_ssAdditionalInformation!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssAdditionalInformation = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NUMBEROFCONCERNSRAISED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("NumberOfConcernsRaised")]
		private int _ssNumberOfConcernsRaised;
		public int ssNumberOfConcernsRaised {
			get {
				return _ssNumberOfConcernsRaised;
			}
			set {
				if ((_ssNumberOfConcernsRaised!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssNumberOfConcernsRaised = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("FILERECEIVEDFROMSCHOOL", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("FileReceivedFromSchool")]
		private bool _ssFileReceivedFromSchool;
		public bool ssFileReceivedFromSchool {
			get {
				return _ssFileReceivedFromSchool;
			}
			set {
				if ((_ssFileReceivedFromSchool!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssFileReceivedFromSchool = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEADPROFESSIONAL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LeadProfessional")]
		private int _ssLeadProfessional;
		public int ssLeadProfessional {
			get {
				return _ssLeadProfessional;
			}
			set {
				if ((_ssLeadProfessional!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssLeadProfessional = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGOUTCOME", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SafeguardingOutcome")]
		private string _ssSafeguardingOutcome;
		public string ssSafeguardingOutcome {
			get {
				return _ssSafeguardingOutcome;
			}
			set {
				if ((_ssSafeguardingOutcome!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssSafeguardingOutcome = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGOUTCOMEOTHERTEXT", 1000, false, false, false)]
		[System.Xml.Serialization.XmlElement("SafeguardingOutcomeOtherText")]
		private string _ssSafeguardingOutcomeOtherText;
		public string ssSafeguardingOutcomeOtherText {
			get {
				return _ssSafeguardingOutcomeOtherText;
			}
			set {
				if ((_ssSafeguardingOutcomeOtherText!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssSafeguardingOutcomeOtherText = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGNATUREOFCONCERN", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SafeguardingNatureOfConcern")]
		private int _ssSafeguardingNatureOfConcern;
		public int ssSafeguardingNatureOfConcern {
			get {
				return _ssSafeguardingNatureOfConcern;
			}
			set {
				if ((_ssSafeguardingNatureOfConcern!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssSafeguardingNatureOfConcern = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DETAILSOFCONCERN", 1000, false, false, false)]
		[System.Xml.Serialization.XmlElement("DetailsOfConcern")]
		private string _ssDetailsOfConcern;
		public string ssDetailsOfConcern {
			get {
				return _ssDetailsOfConcern;
			}
			set {
				if ((_ssDetailsOfConcern!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssDetailsOfConcern = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNERAGEATTIMEOFREFERRAL", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LearnerAgeAtTimeOfReferral")]
		private int _ssLearnerAgeAtTimeOfReferral;
		public int ssLearnerAgeAtTimeOfReferral {
			get {
				return _ssLearnerAgeAtTimeOfReferral;
			}
			set {
				if ((_ssLearnerAgeAtTimeOfReferral!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssLearnerAgeAtTimeOfReferral = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGREFERRALMADETO", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SafeguardingReferralMadeTo")]
		private int _ssSafeguardingReferralMadeTo;
		public int ssSafeguardingReferralMadeTo {
			get {
				return _ssSafeguardingReferralMadeTo;
			}
			set {
				if ((_ssSafeguardingReferralMadeTo!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssSafeguardingReferralMadeTo = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("UpdatedOn")]
		private DateTime _ssUpdatedOn;
		public DateTime ssUpdatedOn {
			get {
				return _ssUpdatedOn;
			}
			set {
				if ((_ssUpdatedOn!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("UpdatedBy")]
		private int _ssUpdatedBy;
		public int ssUpdatedBy {
			get {
				return _ssUpdatedBy;
			}
			set {
				if ((_ssUpdatedBy!=value) || OptimizedAttributes[17]) {
					ChangedAttributes[17] = true;
					_ssUpdatedBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSafeguardingIssueEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(18, true);
			OptimizedAttributes = new BitArray(18, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssSafeguardingIssueType = "";
			_ssDateOfRefferal = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssActionTaken = "";
			_ssRAGStatus = "";
			_ssAdditionalInformation = "";
			_ssNumberOfConcernsRaised = 0;
			_ssFileReceivedFromSchool = false;
			_ssLeadProfessional = 0;
			_ssSafeguardingOutcome = "";
			_ssSafeguardingOutcomeOtherText = "";
			_ssSafeguardingNatureOfConcern = 0;
			_ssDetailsOfConcern = "";
			_ssLearnerAgeAtTimeOfReferral = 0;
			_ssSafeguardingReferralMadeTo = 0;
			_ssUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssUpdatedBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "SafeguardingIssue.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "SafeguardingIssue.StudentReference", "");
			ssSafeguardingIssueType = r.ReadTextEntityReference(index++, "SafeguardingIssue.SafeguardingIssueType", "");
			ssDateOfRefferal = r.ReadDate(index++, "SafeguardingIssue.DateOfRefferal", new DateTime(1900, 1, 1, 0, 0, 0));
			ssActionTaken = r.ReadText(index++, "SafeguardingIssue.ActionTaken", "");
			ssRAGStatus = r.ReadTextEntityReference(index++, "SafeguardingIssue.RAGStatus", "");
			ssAdditionalInformation = r.ReadText(index++, "SafeguardingIssue.AdditionalInformation", "");
			ssNumberOfConcernsRaised = r.ReadInteger(index++, "SafeguardingIssue.NumberOfConcernsRaised", 0);
			ssFileReceivedFromSchool = r.ReadBoolean(index++, "SafeguardingIssue.FileReceivedFromSchool", false);
			ssLeadProfessional = r.ReadEntityReference(index++, "SafeguardingIssue.LeadProfessional", 0);
			ssSafeguardingOutcome = r.ReadTextEntityReference(index++, "SafeguardingIssue.SafeguardingOutcome", "");
			ssSafeguardingOutcomeOtherText = r.ReadText(index++, "SafeguardingIssue.SafeguardingOutcomeOtherText", "");
			ssSafeguardingNatureOfConcern = r.ReadEntityReference(index++, "SafeguardingIssue.SafeguardingNatureOfConcern", 0);
			ssDetailsOfConcern = r.ReadText(index++, "SafeguardingIssue.DetailsOfConcern", "");
			ssLearnerAgeAtTimeOfReferral = r.ReadInteger(index++, "SafeguardingIssue.LearnerAgeAtTimeOfReferral", 0);
			ssSafeguardingReferralMadeTo = r.ReadEntityReference(index++, "SafeguardingIssue.SafeguardingReferralMadeTo", 0);
			ssUpdatedOn = r.ReadDateTime(index++, "SafeguardingIssue.UpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssUpdatedBy = r.ReadEntityReference(index++, "SafeguardingIssue.UpdatedBy", 0);
			ChangedAttributes = new BitArray(18, false);
			OptimizedAttributes = new BitArray(18, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSafeguardingIssueEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSafeguardingIssueEntityRecord a, ENSafeguardingIssueEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssSafeguardingIssueType != b.ssSafeguardingIssueType) return false;
			if (a.ssDateOfRefferal != b.ssDateOfRefferal) return false;
			if (a.ssActionTaken != b.ssActionTaken) return false;
			if (a.ssRAGStatus != b.ssRAGStatus) return false;
			if (a.ssAdditionalInformation != b.ssAdditionalInformation) return false;
			if (a.ssNumberOfConcernsRaised != b.ssNumberOfConcernsRaised) return false;
			if (a.ssFileReceivedFromSchool != b.ssFileReceivedFromSchool) return false;
			if (a.ssLeadProfessional != b.ssLeadProfessional) return false;
			if (a.ssSafeguardingOutcome != b.ssSafeguardingOutcome) return false;
			if (a.ssSafeguardingOutcomeOtherText != b.ssSafeguardingOutcomeOtherText) return false;
			if (a.ssSafeguardingNatureOfConcern != b.ssSafeguardingNatureOfConcern) return false;
			if (a.ssDetailsOfConcern != b.ssDetailsOfConcern) return false;
			if (a.ssLearnerAgeAtTimeOfReferral != b.ssLearnerAgeAtTimeOfReferral) return false;
			if (a.ssSafeguardingReferralMadeTo != b.ssSafeguardingReferralMadeTo) return false;
			if (a.ssUpdatedOn != b.ssUpdatedOn) return false;
			if (a.ssUpdatedBy != b.ssUpdatedBy) return false;
			return true;
		}

		public static bool operator != (ENSafeguardingIssueEntityRecord a, ENSafeguardingIssueEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSafeguardingIssueEntityRecord)) return false;
			return (this == (ENSafeguardingIssueEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssSafeguardingIssueType.GetHashCode()
				^ ssDateOfRefferal.GetHashCode()
				^ ssActionTaken.GetHashCode()
				^ ssRAGStatus.GetHashCode()
				^ ssAdditionalInformation.GetHashCode()
				^ ssNumberOfConcernsRaised.GetHashCode()
				^ ssFileReceivedFromSchool.GetHashCode()
				^ ssLeadProfessional.GetHashCode()
				^ ssSafeguardingOutcome.GetHashCode()
				^ ssSafeguardingOutcomeOtherText.GetHashCode()
				^ ssSafeguardingNatureOfConcern.GetHashCode()
				^ ssDetailsOfConcern.GetHashCode()
				^ ssLearnerAgeAtTimeOfReferral.GetHashCode()
				^ ssSafeguardingReferralMadeTo.GetHashCode()
				^ ssUpdatedOn.GetHashCode()
				^ ssUpdatedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSafeguardingIssueEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(18, true);
			OptimizedAttributes = new BitArray(18, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssSafeguardingIssueType = "";
			_ssDateOfRefferal = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssActionTaken = "";
			_ssRAGStatus = "";
			_ssAdditionalInformation = "";
			_ssNumberOfConcernsRaised = 0;
			_ssFileReceivedFromSchool = false;
			_ssLeadProfessional = 0;
			_ssSafeguardingOutcome = "";
			_ssSafeguardingOutcomeOtherText = "";
			_ssSafeguardingNatureOfConcern = 0;
			_ssDetailsOfConcern = "";
			_ssLearnerAgeAtTimeOfReferral = 0;
			_ssSafeguardingReferralMadeTo = 0;
			_ssUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssUpdatedBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssSafeguardingIssueType = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssDateOfRefferal = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssActionTaken = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssRAGStatus = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssAdditionalInformation = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssNumberOfConcernsRaised = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssFileReceivedFromSchool = (bool) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssLeadProfessional = (int) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssSafeguardingOutcome = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssSafeguardingOutcomeOtherText = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssSafeguardingNatureOfConcern = (int) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssDetailsOfConcern = (string) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssLearnerAgeAtTimeOfReferral = (int) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssSafeguardingReferralMadeTo = (int) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssUpdatedOn = (DateTime) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			_ssUpdatedBy = (int) info.GetValue(fields[17] .Name, fields[17] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSafeguardingIssueEntityRecord Duplicate() {
			ENSafeguardingIssueEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssSafeguardingIssueType = this._ssSafeguardingIssueType;
			t._ssDateOfRefferal = this._ssDateOfRefferal;
			t._ssActionTaken = this._ssActionTaken;
			t._ssRAGStatus = this._ssRAGStatus;
			t._ssAdditionalInformation = this._ssAdditionalInformation;
			t._ssNumberOfConcernsRaised = this._ssNumberOfConcernsRaised;
			t._ssFileReceivedFromSchool = this._ssFileReceivedFromSchool;
			t._ssLeadProfessional = this._ssLeadProfessional;
			t._ssSafeguardingOutcome = this._ssSafeguardingOutcome;
			t._ssSafeguardingOutcomeOtherText = this._ssSafeguardingOutcomeOtherText;
			t._ssSafeguardingNatureOfConcern = this._ssSafeguardingNatureOfConcern;
			t._ssDetailsOfConcern = this._ssDetailsOfConcern;
			t._ssLearnerAgeAtTimeOfReferral = this._ssLearnerAgeAtTimeOfReferral;
			t._ssSafeguardingReferralMadeTo = this._ssSafeguardingReferralMadeTo;
			t._ssUpdatedOn = this._ssUpdatedOn;
			t._ssUpdatedBy = this._ssUpdatedBy;
			t.ChangedAttributes = new BitArray(18);
			t.OptimizedAttributes = new BitArray(18);
			for (int i = 0; i < 18; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingIssueType")) VarValue.AppendAttribute(recordElem, "SafeguardingIssueType", ssSafeguardingIssueType, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingIssueType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DateOfRefferal")) VarValue.AppendAttribute(recordElem, "DateOfRefferal", ssDateOfRefferal, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "DateOfRefferal");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ActionTaken")) VarValue.AppendAttribute(recordElem, "ActionTaken", ssActionTaken, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ActionTaken");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RAGStatus")) VarValue.AppendAttribute(recordElem, "RAGStatus", ssRAGStatus, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RAGStatus");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AdditionalInformation")) VarValue.AppendAttribute(recordElem, "AdditionalInformation", ssAdditionalInformation, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AdditionalInformation");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NumberOfConcernsRaised")) VarValue.AppendAttribute(recordElem, "NumberOfConcernsRaised", ssNumberOfConcernsRaised, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "NumberOfConcernsRaised");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FileReceivedFromSchool")) VarValue.AppendAttribute(recordElem, "FileReceivedFromSchool", ssFileReceivedFromSchool, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "FileReceivedFromSchool");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LeadProfessional")) VarValue.AppendAttribute(recordElem, "LeadProfessional", ssLeadProfessional, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LeadProfessional");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingOutcome")) VarValue.AppendAttribute(recordElem, "SafeguardingOutcome", ssSafeguardingOutcome, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingOutcome");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingOutcomeOtherText")) VarValue.AppendAttribute(recordElem, "SafeguardingOutcomeOtherText", ssSafeguardingOutcomeOtherText, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingOutcomeOtherText");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingNatureOfConcern")) VarValue.AppendAttribute(recordElem, "SafeguardingNatureOfConcern", ssSafeguardingNatureOfConcern, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingNatureOfConcern");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DetailsOfConcern")) VarValue.AppendAttribute(recordElem, "DetailsOfConcern", ssDetailsOfConcern, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DetailsOfConcern");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearnerAgeAtTimeOfReferral")) VarValue.AppendAttribute(recordElem, "LearnerAgeAtTimeOfReferral", ssLearnerAgeAtTimeOfReferral, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LearnerAgeAtTimeOfReferral");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingReferralMadeTo")) VarValue.AppendAttribute(recordElem, "SafeguardingReferralMadeTo", ssSafeguardingReferralMadeTo, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingReferralMadeTo");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdatedOn")) VarValue.AppendAttribute(recordElem, "UpdatedOn", ssUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "UpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdatedBy")) VarValue.AppendAttribute(recordElem, "UpdatedBy", ssUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "UpdatedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "safeguardingissuetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssueType")) variable.Value = ssSafeguardingIssueType; else variable.Optimized = true;
			} else if (head == "dateofrefferal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DateOfRefferal")) variable.Value = ssDateOfRefferal; else variable.Optimized = true;
			} else if (head == "actiontaken") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ActionTaken")) variable.Value = ssActionTaken; else variable.Optimized = true;
			} else if (head == "ragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatus")) variable.Value = ssRAGStatus; else variable.Optimized = true;
			} else if (head == "additionalinformation") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AdditionalInformation")) variable.Value = ssAdditionalInformation; else variable.Optimized = true;
			} else if (head == "numberofconcernsraised") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NumberOfConcernsRaised")) variable.Value = ssNumberOfConcernsRaised; else variable.Optimized = true;
			} else if (head == "filereceivedfromschool") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FileReceivedFromSchool")) variable.Value = ssFileReceivedFromSchool; else variable.Optimized = true;
			} else if (head == "leadprofessional") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LeadProfessional")) variable.Value = ssLeadProfessional; else variable.Optimized = true;
			} else if (head == "safeguardingoutcome") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingOutcome")) variable.Value = ssSafeguardingOutcome; else variable.Optimized = true;
			} else if (head == "safeguardingoutcomeothertext") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingOutcomeOtherText")) variable.Value = ssSafeguardingOutcomeOtherText; else variable.Optimized = true;
			} else if (head == "safeguardingnatureofconcern") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingNatureOfConcern")) variable.Value = ssSafeguardingNatureOfConcern; else variable.Optimized = true;
			} else if (head == "detailsofconcern") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DetailsOfConcern")) variable.Value = ssDetailsOfConcern; else variable.Optimized = true;
			} else if (head == "learnerageattimeofreferral") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearnerAgeAtTimeOfReferral")) variable.Value = ssLearnerAgeAtTimeOfReferral; else variable.Optimized = true;
			} else if (head == "safeguardingreferralmadeto") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingReferralMadeTo")) variable.Value = ssSafeguardingReferralMadeTo; else variable.Optimized = true;
			} else if (head == "updatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdatedOn")) variable.Value = ssUpdatedOn; else variable.Optimized = true;
			} else if (head == "updatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdatedBy")) variable.Value = ssUpdatedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdSafeguardingIssueType)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdDateOfRefferal)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdActionTaken)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdRAGStatus)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdAdditionalInformation)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdNumberOfConcernsRaised)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdFileReceivedFromSchool)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdLeadProfessional)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdSafeguardingOutcome)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdSafeguardingOutcomeOtherText)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdSafeguardingNatureOfConcern)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdDetailsOfConcern)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdLearnerAgeAtTimeOfReferral)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdSafeguardingReferralMadeTo)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdUpdatedOn)) {
				return ChangedAttributes[16];
			} else if (key.Equals(IdUpdatedBy)) {
				return ChangedAttributes[17];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdSafeguardingIssueType)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdDateOfRefferal)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdActionTaken)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdRAGStatus)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdAdditionalInformation)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdNumberOfConcernsRaised)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdFileReceivedFromSchool)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdLeadProfessional)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdSafeguardingOutcome)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdSafeguardingOutcomeOtherText)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdSafeguardingNatureOfConcern)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdDetailsOfConcern)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdLearnerAgeAtTimeOfReferral)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdSafeguardingReferralMadeTo)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdUpdatedOn)) {
				return OptimizedAttributes[16];
			} else if (key.Equals(IdUpdatedBy)) {
				return OptimizedAttributes[17];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdSafeguardingIssueType) {
				return ssSafeguardingIssueType;
			} else if (key == IdDateOfRefferal) {
				return ssDateOfRefferal;
			} else if (key == IdActionTaken) {
				return ssActionTaken;
			} else if (key == IdRAGStatus) {
				return ssRAGStatus;
			} else if (key == IdAdditionalInformation) {
				return ssAdditionalInformation;
			} else if (key == IdNumberOfConcernsRaised) {
				return ssNumberOfConcernsRaised;
			} else if (key == IdFileReceivedFromSchool) {
				return ssFileReceivedFromSchool;
			} else if (key == IdLeadProfessional) {
				return ssLeadProfessional;
			} else if (key == IdSafeguardingOutcome) {
				return ssSafeguardingOutcome;
			} else if (key == IdSafeguardingOutcomeOtherText) {
				return ssSafeguardingOutcomeOtherText;
			} else if (key == IdSafeguardingNatureOfConcern) {
				return ssSafeguardingNatureOfConcern;
			} else if (key == IdDetailsOfConcern) {
				return ssDetailsOfConcern;
			} else if (key == IdLearnerAgeAtTimeOfReferral) {
				return ssLearnerAgeAtTimeOfReferral;
			} else if (key == IdSafeguardingReferralMadeTo) {
				return ssSafeguardingReferralMadeTo;
			} else if (key == IdUpdatedOn) {
				return ssUpdatedOn;
			} else if (key == IdUpdatedBy) {
				return ssUpdatedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(18);
			OptimizedAttributes = new BitArray(18);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssSafeguardingIssueType = (string) other.AttributeGet(IdSafeguardingIssueType);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdSafeguardingIssueType);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdSafeguardingIssueType);
			ssDateOfRefferal = (DateTime) other.AttributeGet(IdDateOfRefferal);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdDateOfRefferal);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdDateOfRefferal);
			ssActionTaken = (string) other.AttributeGet(IdActionTaken);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdActionTaken);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdActionTaken);
			ssRAGStatus = (string) other.AttributeGet(IdRAGStatus);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdRAGStatus);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdRAGStatus);
			ssAdditionalInformation = (string) other.AttributeGet(IdAdditionalInformation);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdAdditionalInformation);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdAdditionalInformation);
			ssNumberOfConcernsRaised = (int) other.AttributeGet(IdNumberOfConcernsRaised);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdNumberOfConcernsRaised);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdNumberOfConcernsRaised);
			ssFileReceivedFromSchool = (bool) other.AttributeGet(IdFileReceivedFromSchool);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdFileReceivedFromSchool);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdFileReceivedFromSchool);
			ssLeadProfessional = (int) other.AttributeGet(IdLeadProfessional);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdLeadProfessional);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdLeadProfessional);
			ssSafeguardingOutcome = (string) other.AttributeGet(IdSafeguardingOutcome);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdSafeguardingOutcome);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdSafeguardingOutcome);
			ssSafeguardingOutcomeOtherText = (string) other.AttributeGet(IdSafeguardingOutcomeOtherText);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdSafeguardingOutcomeOtherText);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdSafeguardingOutcomeOtherText);
			ssSafeguardingNatureOfConcern = (int) other.AttributeGet(IdSafeguardingNatureOfConcern);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdSafeguardingNatureOfConcern);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdSafeguardingNatureOfConcern);
			ssDetailsOfConcern = (string) other.AttributeGet(IdDetailsOfConcern);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdDetailsOfConcern);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdDetailsOfConcern);
			ssLearnerAgeAtTimeOfReferral = (int) other.AttributeGet(IdLearnerAgeAtTimeOfReferral);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdLearnerAgeAtTimeOfReferral);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdLearnerAgeAtTimeOfReferral);
			ssSafeguardingReferralMadeTo = (int) other.AttributeGet(IdSafeguardingReferralMadeTo);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdSafeguardingReferralMadeTo);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdSafeguardingReferralMadeTo);
			ssUpdatedOn = (DateTime) other.AttributeGet(IdUpdatedOn);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdUpdatedOn);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdUpdatedOn);
			ssUpdatedBy = (int) other.AttributeGet(IdUpdatedBy);
			ChangedAttributes[17] = other.ChangedAttributeGet(IdUpdatedBy);
			OptimizedAttributes[17] = other.OptimizedAttributeGet(IdUpdatedBy);
		}
	} // ENSafeguardingIssueEntityRecord
	/// <summary>
	/// Structure <code>RCSafeguardingIssueRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSafeguardingIssueRecord: ISerializable, ITypedRecord<RCSafeguardingIssueRecord> {
		private static readonly GlobalObjectKey IdSafeguardingIssue = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SAAZcYT_EnM1GejsKShLag");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SafeguardingIssue")]
		public ENSafeguardingIssueEntityRecord ssENSafeguardingIssue;


		public static implicit operator ENSafeguardingIssueEntityRecord(RCSafeguardingIssueRecord r) {
			return r.ssENSafeguardingIssue;
		}

		public static implicit operator RCSafeguardingIssueRecord(ENSafeguardingIssueEntityRecord r) {
			RCSafeguardingIssueRecord res = new RCSafeguardingIssueRecord(null);
			res.ssENSafeguardingIssue = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSafeguardingIssue.ChangedAttributes = value;
			}
			get {
				return ssENSafeguardingIssue.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSafeguardingIssueRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(18, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSafeguardingIssue.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSafeguardingIssue.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSafeguardingIssue.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSafeguardingIssue.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSafeguardingIssueRecord r) {
			this = r;
		}


		public static bool operator == (RCSafeguardingIssueRecord a, RCSafeguardingIssueRecord b) {
			if (a.ssENSafeguardingIssue != b.ssENSafeguardingIssue) return false;
			return true;
		}

		public static bool operator != (RCSafeguardingIssueRecord a, RCSafeguardingIssueRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSafeguardingIssueRecord)) return false;
			return (this == (RCSafeguardingIssueRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSafeguardingIssue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSafeguardingIssueRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSafeguardingIssue = new ENSafeguardingIssueEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSafeguardingIssue.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSafeguardingIssue.InternalRecursiveSave();
		}


		public RCSafeguardingIssueRecord Duplicate() {
			RCSafeguardingIssueRecord t;
			t.ssENSafeguardingIssue = (ENSafeguardingIssueEntityRecord) this.ssENSafeguardingIssue.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSafeguardingIssue.ToXml(this, recordElem, "SafeguardingIssue", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "safeguardingissue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssue")) variable.Value = ssENSafeguardingIssue; else variable.Optimized = true;
				variable.SetFieldName("safeguardingissue");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSafeguardingIssue.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSafeguardingIssue.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSafeguardingIssue) {
				return ssENSafeguardingIssue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSafeguardingIssue.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingIssue));
		}
	} // RCSafeguardingIssueRecord
	/// <summary>
	/// RecordList type <code>RLSafeguardingIssueRecordList</code> that represents a record list of
	///  <code>SafeguardingIssue</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingIssueRecordList: GenericRecordList<RCSafeguardingIssueRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSafeguardingIssueRecord GetElementDefaultValue() {
			return new RCSafeguardingIssueRecord("");
		}

		public T[] ToArray<T>(Func<RCSafeguardingIssueRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingIssueRecordList recordlist, Func<RCSafeguardingIssueRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingIssueRecordList ToList<T>(T[] array, Func <T, RCSafeguardingIssueRecord> converter) {
			RLSafeguardingIssueRecordList result = new RLSafeguardingIssueRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingIssueRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingIssueRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingIssueRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingIssueRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(18, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSafeguardingIssueRecord> NewList() {
			return new RLSafeguardingIssueRecordList();
		}


	} // RLSafeguardingIssueRecordList

	/// <summary>
	/// RecordList type <code>RLSafeguardingIssueList</code> that represents a record list of
	///  <code>StudentIdentifier, StaffIdentifier, UserIdentifier, Text, Text, Text, Text, Date, DateTime
	/// , Boolean, Integer, Integer, Integer, SafeguardingIssueTypeIdentifier, RAGStatusIdentifier,
	///  SafeguardingOutcomeIdentifier, SafeguardingNatureOfConcernIdentifier
	/// , SafeguardingReferralMadeToIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingIssueList: GenericRecordList<ENSafeguardingIssueEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSafeguardingIssueEntityRecord GetElementDefaultValue() {
			return new ENSafeguardingIssueEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSafeguardingIssueEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingIssueList recordlist, Func<ENSafeguardingIssueEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingIssueList ToList<T>(T[] array, Func <T, ENSafeguardingIssueEntityRecord> converter) {
			RLSafeguardingIssueList result = new RLSafeguardingIssueList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingIssueList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingIssueList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingIssueList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingIssueList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSafeguardingIssueEntityRecord> NewList() {
			return new RLSafeguardingIssueList();
		}


	} // RLSafeguardingIssueList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateSafeguardingIssue
		/// </summary>

		public static void CreateSafeguardingIssue(HeContext heContext, RCSafeguardingIssueRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingIssueEntity.eSpaceId;
				ENSafeguardingIssueEntityRecord ssENSafeguardingIssue = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENSafeguardingIssueEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [SAFEGUARDINGISSUETYPE]" +
					 ", [DATEOFREFFERAL]" +
					 ", [ACTIONTAKEN]" +
					 ", [RAGSTATUS]" +
					 ", [ADDITIONALINFORMATION]" +
					 ", [NUMBEROFCONCERNSRAISED]" +
					 ", [FILERECEIVEDFROMSCHOOL]" +
					 ", [LEADPROFESSIONAL]" +
					 ", [SAFEGUARDINGOUTCOME]" +
					 ", [SAFEGUARDINGOUTCOMEOTHERTEXT]" +
					 ", [SAFEGUARDINGNATUREOFCONCERN]" +
					 ", [DETAILSOFCONCERN]" +
					 ", [LEARNERAGEATTIMEOFREFERRAL]" +
					 ", [SAFEGUARDINGREFERRALMADETO]" +
					 ", [UPDATEDON]" +
					 ", [UPDATEDBY]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssSafeguardingIssueType" +
					 ", @ssDateOfRefferal" +
					 ", @ssActionTaken" +
					 ", @ssRAGStatus" +
					 ", @ssAdditionalInformation" +
					 ", @ssNumberOfConcernsRaised" +
					 ", @ssFileReceivedFromSchool" +
					 ", @ssLeadProfessional" +
					 ", @ssSafeguardingOutcome" +
					 ", @ssSafeguardingOutcomeOtherText" +
					 ", @ssSafeguardingNatureOfConcern" +
					 ", @ssDetailsOfConcern" +
					 ", @ssLearnerAgeAtTimeOfReferral" +
					 ", @ssSafeguardingReferralMadeTo" +
					 ", @ssUpdatedOn" +
					 ", @ssUpdatedBy" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENSafeguardingIssue.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSafeguardingIssue.ssStudentReference);
					}
					if ((ssENSafeguardingIssue.ssSafeguardingIssueType== "")) {
						insertSqlCmd.CreateParameter("@ssSafeguardingIssueType", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSafeguardingIssueType", DbType.String, ssENSafeguardingIssue.ssSafeguardingIssueType);
					}
					insertSqlCmd.CreateParameter("@ssDateOfRefferal", DbType.DateTime, ssENSafeguardingIssue.ssDateOfRefferal);
					insertSqlCmd.CreateParameter("@ssActionTaken", DbType.String, ssENSafeguardingIssue.ssActionTaken);
					if ((ssENSafeguardingIssue.ssRAGStatus== "")) {
						insertSqlCmd.CreateParameter("@ssRAGStatus", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRAGStatus", DbType.String, ssENSafeguardingIssue.ssRAGStatus);
					}
					insertSqlCmd.CreateParameter("@ssAdditionalInformation", DbType.String, ssENSafeguardingIssue.ssAdditionalInformation);
					insertSqlCmd.CreateParameter("@ssNumberOfConcernsRaised", DbType.Int32, ssENSafeguardingIssue.ssNumberOfConcernsRaised);
					insertSqlCmd.CreateParameter("@ssFileReceivedFromSchool", DbType.Boolean, ssENSafeguardingIssue.ssFileReceivedFromSchool);
					if ((ssENSafeguardingIssue.ssLeadProfessional==0)) {
						insertSqlCmd.CreateParameter("@ssLeadProfessional", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLeadProfessional", DbType.Int32, ssENSafeguardingIssue.ssLeadProfessional);
					}
					if ((ssENSafeguardingIssue.ssSafeguardingOutcome== "")) {
						insertSqlCmd.CreateParameter("@ssSafeguardingOutcome", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSafeguardingOutcome", DbType.String, ssENSafeguardingIssue.ssSafeguardingOutcome);
					}
					insertSqlCmd.CreateParameter("@ssSafeguardingOutcomeOtherText", DbType.String, ssENSafeguardingIssue.ssSafeguardingOutcomeOtherText);
					if ((ssENSafeguardingIssue.ssSafeguardingNatureOfConcern==0)) {
						insertSqlCmd.CreateParameter("@ssSafeguardingNatureOfConcern", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSafeguardingNatureOfConcern", DbType.Int32, ssENSafeguardingIssue.ssSafeguardingNatureOfConcern);
					}
					insertSqlCmd.CreateParameter("@ssDetailsOfConcern", DbType.String, ssENSafeguardingIssue.ssDetailsOfConcern);
					insertSqlCmd.CreateParameter("@ssLearnerAgeAtTimeOfReferral", DbType.Int32, ssENSafeguardingIssue.ssLearnerAgeAtTimeOfReferral);
					if ((ssENSafeguardingIssue.ssSafeguardingReferralMadeTo==0)) {
						insertSqlCmd.CreateParameter("@ssSafeguardingReferralMadeTo", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSafeguardingReferralMadeTo", DbType.Int32, ssENSafeguardingIssue.ssSafeguardingReferralMadeTo);
					}
					insertSqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENSafeguardingIssue.ssUpdatedOn);
					if ((ssENSafeguardingIssue.ssUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENSafeguardingIssue.ssUpdatedBy);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateSafeguardingIssue", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateSafeguardingIssue
		/// </summary>

		public static void CreateOrUpdateSafeguardingIssue(HeContext heContext, BitArray usedFields, RCSafeguardingIssueRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingIssueEntity.eSpaceId;
				ENSafeguardingIssueEntityRecord ssENSafeguardingIssue = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(18, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSafeguardingIssueEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGISSUETYPE] = @ssSafeguardingIssueType"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATEOFREFFERAL] = @ssDateOfRefferal"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACTIONTAKEN] = @ssActionTaken"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RAGSTATUS] = @ssRAGStatus"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDITIONALINFORMATION] = @ssAdditionalInformation"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NUMBEROFCONCERNSRAISED] = @ssNumberOfConcernsRaised"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[FILERECEIVEDFROMSCHOOL] = @ssFileReceivedFromSchool"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEADPROFESSIONAL] = @ssLeadProfessional"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGOUTCOME] = @ssSafeguardingOutcome"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGOUTCOMEOTHERTEXT] = @ssSafeguardingOutcomeOtherText"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGNATUREOFCONCERN] = @ssSafeguardingNatureOfConcern"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DETAILSOFCONCERN] = @ssDetailsOfConcern"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERAGEATTIMEOFREFERRAL] = @ssLearnerAgeAtTimeOfReferral"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGREFERRALMADETO] = @ssSafeguardingReferralMadeTo"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDON] = @ssUpdatedOn"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDBY] = @ssUpdatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSafeguardingIssuessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSafeguardingIssue.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSafeguardingIssue.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSafeguardingIssue.ssSafeguardingIssueType== "")) {
							sqlCmd.CreateParameter("@ssSafeguardingIssueType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingIssueType", DbType.String, ssENSafeguardingIssue.ssSafeguardingIssueType);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDateOfRefferal", DbType.DateTime, ssENSafeguardingIssue.ssDateOfRefferal);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssActionTaken", DbType.String, ssENSafeguardingIssue.ssActionTaken);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENSafeguardingIssue.ssRAGStatus== "")) {
							sqlCmd.CreateParameter("@ssRAGStatus", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRAGStatus", DbType.String, ssENSafeguardingIssue.ssRAGStatus);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssAdditionalInformation", DbType.String, ssENSafeguardingIssue.ssAdditionalInformation);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssNumberOfConcernsRaised", DbType.Int32, ssENSafeguardingIssue.ssNumberOfConcernsRaised);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssFileReceivedFromSchool", DbType.Boolean, ssENSafeguardingIssue.ssFileReceivedFromSchool);
						counter++;
					}
					if (usedFields[9]) {
						if ((ssENSafeguardingIssue.ssLeadProfessional==0)) {
							sqlCmd.CreateParameter("@ssLeadProfessional", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLeadProfessional", DbType.Int32, ssENSafeguardingIssue.ssLeadProfessional);
						}
						counter++;
					}
					if (usedFields[10]) {
						if ((ssENSafeguardingIssue.ssSafeguardingOutcome== "")) {
							sqlCmd.CreateParameter("@ssSafeguardingOutcome", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingOutcome", DbType.String, ssENSafeguardingIssue.ssSafeguardingOutcome);
						}
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssSafeguardingOutcomeOtherText", DbType.String, ssENSafeguardingIssue.ssSafeguardingOutcomeOtherText);
						counter++;
					}
					if (usedFields[12]) {
						if ((ssENSafeguardingIssue.ssSafeguardingNatureOfConcern==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingNatureOfConcern", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingNatureOfConcern", DbType.Int32, ssENSafeguardingIssue.ssSafeguardingNatureOfConcern);
						}
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssDetailsOfConcern", DbType.String, ssENSafeguardingIssue.ssDetailsOfConcern);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssLearnerAgeAtTimeOfReferral", DbType.Int32, ssENSafeguardingIssue.ssLearnerAgeAtTimeOfReferral);
						counter++;
					}
					if (usedFields[15]) {
						if ((ssENSafeguardingIssue.ssSafeguardingReferralMadeTo==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingReferralMadeTo", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingReferralMadeTo", DbType.Int32, ssENSafeguardingIssue.ssSafeguardingReferralMadeTo);
						}
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENSafeguardingIssue.ssUpdatedOn);
						counter++;
					}
					if (usedFields[17]) {
						if ((ssENSafeguardingIssue.ssUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENSafeguardingIssue.ssUpdatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[FILERECEIVEDFROMSCHOOL] = [FILERECEIVEDFROMSCHOOL]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSafeguardingIssuessId", DbType.Int32, ssENSafeguardingIssue.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateSafeguardingIssue (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENSafeguardingIssueEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [SAFEGUARDINGISSUETYPE]" +
						 ", [DATEOFREFFERAL]" +
						 ", [ACTIONTAKEN]" +
						 ", [RAGSTATUS]" +
						 ", [ADDITIONALINFORMATION]" +
						 ", [NUMBEROFCONCERNSRAISED]" +
						 ", [FILERECEIVEDFROMSCHOOL]" +
						 ", [LEADPROFESSIONAL]" +
						 ", [SAFEGUARDINGOUTCOME]" +
						 ", [SAFEGUARDINGOUTCOMEOTHERTEXT]" +
						 ", [SAFEGUARDINGNATUREOFCONCERN]" +
						 ", [DETAILSOFCONCERN]" +
						 ", [LEARNERAGEATTIMEOFREFERRAL]" +
						 ", [SAFEGUARDINGREFERRALMADETO]" +
						 ", [UPDATEDON]" +
						 ", [UPDATEDBY]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssSafeguardingIssueType" +
						 ", @ssDateOfRefferal" +
						 ", @ssActionTaken" +
						 ", @ssRAGStatus" +
						 ", @ssAdditionalInformation" +
						 ", @ssNumberOfConcernsRaised" +
						 ", @ssFileReceivedFromSchool" +
						 ", @ssLeadProfessional" +
						 ", @ssSafeguardingOutcome" +
						 ", @ssSafeguardingOutcomeOtherText" +
						 ", @ssSafeguardingNatureOfConcern" +
						 ", @ssDetailsOfConcern" +
						 ", @ssLearnerAgeAtTimeOfReferral" +
						 ", @ssSafeguardingReferralMadeTo" +
						 ", @ssUpdatedOn" +
						 ", @ssUpdatedBy" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENSafeguardingIssue.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSafeguardingIssue.ssStudentReference);
						}
						if ((ssENSafeguardingIssue.ssSafeguardingIssueType== "")) {
							insertSqlCmd.CreateParameter("@ssSafeguardingIssueType", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSafeguardingIssueType", DbType.String, ssENSafeguardingIssue.ssSafeguardingIssueType);
						}
						insertSqlCmd.CreateParameter("@ssDateOfRefferal", DbType.DateTime, ssENSafeguardingIssue.ssDateOfRefferal);
						insertSqlCmd.CreateParameter("@ssActionTaken", DbType.String, ssENSafeguardingIssue.ssActionTaken);
						if ((ssENSafeguardingIssue.ssRAGStatus== "")) {
							insertSqlCmd.CreateParameter("@ssRAGStatus", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRAGStatus", DbType.String, ssENSafeguardingIssue.ssRAGStatus);
						}
						insertSqlCmd.CreateParameter("@ssAdditionalInformation", DbType.String, ssENSafeguardingIssue.ssAdditionalInformation);
						insertSqlCmd.CreateParameter("@ssNumberOfConcernsRaised", DbType.Int32, ssENSafeguardingIssue.ssNumberOfConcernsRaised);
						insertSqlCmd.CreateParameter("@ssFileReceivedFromSchool", DbType.Boolean, ssENSafeguardingIssue.ssFileReceivedFromSchool);
						if ((ssENSafeguardingIssue.ssLeadProfessional==0)) {
							insertSqlCmd.CreateParameter("@ssLeadProfessional", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLeadProfessional", DbType.Int32, ssENSafeguardingIssue.ssLeadProfessional);
						}
						if ((ssENSafeguardingIssue.ssSafeguardingOutcome== "")) {
							insertSqlCmd.CreateParameter("@ssSafeguardingOutcome", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSafeguardingOutcome", DbType.String, ssENSafeguardingIssue.ssSafeguardingOutcome);
						}
						insertSqlCmd.CreateParameter("@ssSafeguardingOutcomeOtherText", DbType.String, ssENSafeguardingIssue.ssSafeguardingOutcomeOtherText);
						if ((ssENSafeguardingIssue.ssSafeguardingNatureOfConcern==0)) {
							insertSqlCmd.CreateParameter("@ssSafeguardingNatureOfConcern", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSafeguardingNatureOfConcern", DbType.Int32, ssENSafeguardingIssue.ssSafeguardingNatureOfConcern);
						}
						insertSqlCmd.CreateParameter("@ssDetailsOfConcern", DbType.String, ssENSafeguardingIssue.ssDetailsOfConcern);
						insertSqlCmd.CreateParameter("@ssLearnerAgeAtTimeOfReferral", DbType.Int32, ssENSafeguardingIssue.ssLearnerAgeAtTimeOfReferral);
						if ((ssENSafeguardingIssue.ssSafeguardingReferralMadeTo==0)) {
							insertSqlCmd.CreateParameter("@ssSafeguardingReferralMadeTo", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSafeguardingReferralMadeTo", DbType.Int32, ssENSafeguardingIssue.ssSafeguardingReferralMadeTo);
						}
						insertSqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENSafeguardingIssue.ssUpdatedOn);
						if ((ssENSafeguardingIssue.ssUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENSafeguardingIssue.ssUpdatedBy);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateSafeguardingIssue", true), typeof(int));
					} else {
						outParamId = ssENSafeguardingIssue.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteSafeguardingIssue
		/// </summary>

		public static void DeleteSafeguardingIssue(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingIssueEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENSafeguardingIssueEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteSafeguardingIssue", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSafeguardingIssue
		/// </summary>

		public static void GetSafeguardingIssue(HeContext heContext, int inParamId, out RCSafeguardingIssueRecord outParamRecord) {
			outParamRecord = new RCSafeguardingIssueRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingIssueEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [SAFEGUARDINGISSUETYPE]" +
					 ", [DATEOFREFFERAL]" +
					 ", [ACTIONTAKEN]" +
					 ", [RAGSTATUS]" +
					 ", [ADDITIONALINFORMATION]" +
					 ", [NUMBEROFCONCERNSRAISED]" +
					 ", [FILERECEIVEDFROMSCHOOL]" +
					 ", [LEADPROFESSIONAL]" +
					 ", [SAFEGUARDINGOUTCOME]" +
					 ", [SAFEGUARDINGOUTCOMEOTHERTEXT]" +
					 ", [SAFEGUARDINGNATUREOFCONCERN]" +
					 ", [DETAILSOFCONCERN]" +
					 ", [LEARNERAGEATTIMEOFREFERRAL]" +
					 ", [SAFEGUARDINGREFERRALMADETO]" +
					 ", [UPDATEDON]" +
					 ", [UPDATEDBY]" +
					 " FROM " + ENSafeguardingIssueEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSafeguardingIssue", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(18, false)
							}
							;
						} else
						throw new DataBaseException(ENSafeguardingIssueEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSafeguardingIssueForUpdate
		/// </summary>

		public static void GetSafeguardingIssueForUpdate(HeContext heContext, int inParamId, out RCSafeguardingIssueRecord outParamRecord) {
			outParamRecord = new RCSafeguardingIssueRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingIssueEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [SAFEGUARDINGISSUETYPE]" +
					 ", [DATEOFREFFERAL]" +
					 ", [ACTIONTAKEN]" +
					 ", [RAGSTATUS]" +
					 ", [ADDITIONALINFORMATION]" +
					 ", [NUMBEROFCONCERNSRAISED]" +
					 ", [FILERECEIVEDFROMSCHOOL]" +
					 ", [LEADPROFESSIONAL]" +
					 ", [SAFEGUARDINGOUTCOME]" +
					 ", [SAFEGUARDINGOUTCOMEOTHERTEXT]" +
					 ", [SAFEGUARDINGNATUREOFCONCERN]" +
					 ", [DETAILSOFCONCERN]" +
					 ", [LEARNERAGEATTIMEOFREFERRAL]" +
					 ", [SAFEGUARDINGREFERRALMADETO]" +
					 ", [UPDATEDON]" +
					 ", [UPDATEDBY]" +
					 "FROM " + ENSafeguardingIssueEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSafeguardingIssueForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(18, false)
							}
							;
						} else
						throw new DataBaseException(ENSafeguardingIssueEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateSafeguardingIssue
		/// </summary>

		public static void UpdateSafeguardingIssue(HeContext heContext, BitArray usedFields, RCSafeguardingIssueRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingIssueEntity.eSpaceId;
				ENSafeguardingIssueEntityRecord ssENSafeguardingIssue = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(18, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSafeguardingIssueEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGISSUETYPE] = @ssSafeguardingIssueType"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATEOFREFFERAL] = @ssDateOfRefferal"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACTIONTAKEN] = @ssActionTaken"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RAGSTATUS] = @ssRAGStatus"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDITIONALINFORMATION] = @ssAdditionalInformation"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NUMBEROFCONCERNSRAISED] = @ssNumberOfConcernsRaised"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[FILERECEIVEDFROMSCHOOL] = @ssFileReceivedFromSchool"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEADPROFESSIONAL] = @ssLeadProfessional"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGOUTCOME] = @ssSafeguardingOutcome"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGOUTCOMEOTHERTEXT] = @ssSafeguardingOutcomeOtherText"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGNATUREOFCONCERN] = @ssSafeguardingNatureOfConcern"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DETAILSOFCONCERN] = @ssDetailsOfConcern"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERAGEATTIMEOFREFERRAL] = @ssLearnerAgeAtTimeOfReferral"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGREFERRALMADETO] = @ssSafeguardingReferralMadeTo"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDON] = @ssUpdatedOn"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDBY] = @ssUpdatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSafeguardingIssuessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSafeguardingIssue.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENSafeguardingIssue.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSafeguardingIssue.ssSafeguardingIssueType== "")) {
							sqlCmd.CreateParameter("@ssSafeguardingIssueType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingIssueType", DbType.String, ssENSafeguardingIssue.ssSafeguardingIssueType);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDateOfRefferal", DbType.DateTime, ssENSafeguardingIssue.ssDateOfRefferal);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssActionTaken", DbType.String, ssENSafeguardingIssue.ssActionTaken);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENSafeguardingIssue.ssRAGStatus== "")) {
							sqlCmd.CreateParameter("@ssRAGStatus", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRAGStatus", DbType.String, ssENSafeguardingIssue.ssRAGStatus);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssAdditionalInformation", DbType.String, ssENSafeguardingIssue.ssAdditionalInformation);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssNumberOfConcernsRaised", DbType.Int32, ssENSafeguardingIssue.ssNumberOfConcernsRaised);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssFileReceivedFromSchool", DbType.Boolean, ssENSafeguardingIssue.ssFileReceivedFromSchool);
						counter++;
					}
					if (usedFields[9]) {
						if ((ssENSafeguardingIssue.ssLeadProfessional==0)) {
							sqlCmd.CreateParameter("@ssLeadProfessional", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLeadProfessional", DbType.Int32, ssENSafeguardingIssue.ssLeadProfessional);
						}
						counter++;
					}
					if (usedFields[10]) {
						if ((ssENSafeguardingIssue.ssSafeguardingOutcome== "")) {
							sqlCmd.CreateParameter("@ssSafeguardingOutcome", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingOutcome", DbType.String, ssENSafeguardingIssue.ssSafeguardingOutcome);
						}
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssSafeguardingOutcomeOtherText", DbType.String, ssENSafeguardingIssue.ssSafeguardingOutcomeOtherText);
						counter++;
					}
					if (usedFields[12]) {
						if ((ssENSafeguardingIssue.ssSafeguardingNatureOfConcern==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingNatureOfConcern", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingNatureOfConcern", DbType.Int32, ssENSafeguardingIssue.ssSafeguardingNatureOfConcern);
						}
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssDetailsOfConcern", DbType.String, ssENSafeguardingIssue.ssDetailsOfConcern);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssLearnerAgeAtTimeOfReferral", DbType.Int32, ssENSafeguardingIssue.ssLearnerAgeAtTimeOfReferral);
						counter++;
					}
					if (usedFields[15]) {
						if ((ssENSafeguardingIssue.ssSafeguardingReferralMadeTo==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingReferralMadeTo", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingReferralMadeTo", DbType.Int32, ssENSafeguardingIssue.ssSafeguardingReferralMadeTo);
						}
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENSafeguardingIssue.ssUpdatedOn);
						counter++;
					}
					if (usedFields[17]) {
						if ((ssENSafeguardingIssue.ssUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENSafeguardingIssue.ssUpdatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[FILERECEIVEDFROMSCHOOL] = [FILERECEIVEDFROMSCHOOL]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSafeguardingIssuessId", DbType.Int32, ssENSafeguardingIssue.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateSafeguardingIssue", true) <= 0)
					throw new DataBaseException(ENSafeguardingIssueEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENSafeguardingIssue.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("SafeguardingIssue")]
	public class WORCSafeguardingIssueRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueType")]
		public string varWSSafeguardingIssueType;

		[System.Xml.Serialization.XmlElement("DateOfRefferal", DataType= "date")]
		public DateTime varWSDateOfRefferal;

		[System.Xml.Serialization.XmlElement("ActionTaken")]
		public string varWSActionTaken;

		[System.Xml.Serialization.XmlElement("RAGStatus")]
		public string varWSRAGStatus;

		[System.Xml.Serialization.XmlElement("AdditionalInformation")]
		public string varWSAdditionalInformation;

		[System.Xml.Serialization.XmlElement("NumberOfConcernsRaised")]
		public int varWSNumberOfConcernsRaised;

		[System.Xml.Serialization.XmlElement("FileReceivedFromSchool")]
		public bool varWSFileReceivedFromSchool;

		[System.Xml.Serialization.XmlElement("LeadProfessional")]
		public int varWSLeadProfessional;

		[System.Xml.Serialization.XmlElement("SafeguardingOutcome")]
		public string varWSSafeguardingOutcome;

		[System.Xml.Serialization.XmlElement("SafeguardingOutcomeOtherText")]
		public string varWSSafeguardingOutcomeOtherText;

		[System.Xml.Serialization.XmlElement("SafeguardingNatureOfConcern")]
		public int varWSSafeguardingNatureOfConcern;

		[System.Xml.Serialization.XmlElement("DetailsOfConcern")]
		public string varWSDetailsOfConcern;

		[System.Xml.Serialization.XmlElement("LearnerAgeAtTimeOfReferral")]
		public int varWSLearnerAgeAtTimeOfReferral;

		[System.Xml.Serialization.XmlElement("SafeguardingReferralMadeTo")]
		public int varWSSafeguardingReferralMadeTo;

		[System.Xml.Serialization.XmlElement("UpdatedOn")]
		public DateTime varWSUpdatedOn;

		[System.Xml.Serialization.XmlElement("UpdatedBy")]
		public int varWSUpdatedBy;

		public WORCSafeguardingIssueRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSSafeguardingIssueType = (string) "";
			varWSDateOfRefferal = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSActionTaken = (string) "";
			varWSRAGStatus = (string) "";
			varWSAdditionalInformation = (string) "";
			varWSNumberOfConcernsRaised = (int) 0;
			varWSFileReceivedFromSchool = (bool) false;
			varWSLeadProfessional = (int) 0;
			varWSSafeguardingOutcome = (string) "";
			varWSSafeguardingOutcomeOtherText = (string) "";
			varWSSafeguardingNatureOfConcern = (int) 0;
			varWSDetailsOfConcern = (string) "";
			varWSLearnerAgeAtTimeOfReferral = (int) 0;
			varWSSafeguardingReferralMadeTo = (int) 0;
			varWSUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSUpdatedBy = (int) 0;
		}

		public WORCSafeguardingIssueRecord(ENSafeguardingIssueEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSSafeguardingIssueType = BaseAppUtils.RemoveControlChars(r.ssSafeguardingIssueType);
			varWSDateOfRefferal = (DateTime) r.ssDateOfRefferal;
			varWSActionTaken = BaseAppUtils.RemoveControlChars(r.ssActionTaken);
			varWSRAGStatus = BaseAppUtils.RemoveControlChars(r.ssRAGStatus);
			varWSAdditionalInformation = BaseAppUtils.RemoveControlChars(r.ssAdditionalInformation);
			varWSNumberOfConcernsRaised = (int) r.ssNumberOfConcernsRaised;
			varWSFileReceivedFromSchool = (bool) r.ssFileReceivedFromSchool;
			varWSLeadProfessional = (int) r.ssLeadProfessional;
			varWSSafeguardingOutcome = BaseAppUtils.RemoveControlChars(r.ssSafeguardingOutcome);
			varWSSafeguardingOutcomeOtherText = BaseAppUtils.RemoveControlChars(r.ssSafeguardingOutcomeOtherText);
			varWSSafeguardingNatureOfConcern = (int) r.ssSafeguardingNatureOfConcern;
			varWSDetailsOfConcern = BaseAppUtils.RemoveControlChars(r.ssDetailsOfConcern);
			varWSLearnerAgeAtTimeOfReferral = (int) r.ssLearnerAgeAtTimeOfReferral;
			varWSSafeguardingReferralMadeTo = (int) r.ssSafeguardingReferralMadeTo;
			varWSUpdatedOn = (DateTime) r.ssUpdatedOn;
			varWSUpdatedBy = (int) r.ssUpdatedBy;
		}

		public static RLSafeguardingIssueList ToRecordList(WORCSafeguardingIssueRecord[] array) {
			RLSafeguardingIssueList rl = new RLSafeguardingIssueList();
			if (array != null) {
				foreach(WORCSafeguardingIssueRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSafeguardingIssueRecord[] FromRecordList(RLSafeguardingIssueList rl) {
			WORCSafeguardingIssueRecord[] array = new WORCSafeguardingIssueRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSafeguardingIssueRecord {
		public static implicit operator WORCSafeguardingIssueRecord(RCSafeguardingIssueRecord r) {
			return new WORCSafeguardingIssueRecord(r.ssENSafeguardingIssue);
		}

		public static implicit operator RCSafeguardingIssueRecord(WORCSafeguardingIssueRecord w) {
			RCSafeguardingIssueRecord r = new RCSafeguardingIssueRecord("");
			if (w != null) {
				r.ssENSafeguardingIssue = w;
			}
			return r;
		}

	}

	partial struct ENSafeguardingIssueEntityRecord {
		public static implicit operator WORCSafeguardingIssueRecord(ENSafeguardingIssueEntityRecord r) {
			return new WORCSafeguardingIssueRecord(r);
		}

		public static implicit operator ENSafeguardingIssueEntityRecord(WORCSafeguardingIssueRecord w) {
			ENSafeguardingIssueEntityRecord r = new ENSafeguardingIssueEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssSafeguardingIssueType = (string) w.varWSSafeguardingIssueType;
				r.ssDateOfRefferal = (DateTime) w.varWSDateOfRefferal;
				r.ssActionTaken = ((string) w.varWSActionTaken ?? "");
				r.ssRAGStatus = (string) w.varWSRAGStatus;
				r.ssAdditionalInformation = ((string) w.varWSAdditionalInformation ?? "");
				r.ssNumberOfConcernsRaised = (int) w.varWSNumberOfConcernsRaised;
				r.ssFileReceivedFromSchool = (bool) w.varWSFileReceivedFromSchool;
				r.ssLeadProfessional = (int) w.varWSLeadProfessional;
				r.ssSafeguardingOutcome = (string) w.varWSSafeguardingOutcome;
				r.ssSafeguardingOutcomeOtherText = ((string) w.varWSSafeguardingOutcomeOtherText ?? "");
				r.ssSafeguardingNatureOfConcern = (int) w.varWSSafeguardingNatureOfConcern;
				r.ssDetailsOfConcern = ((string) w.varWSDetailsOfConcern ?? "");
				r.ssLearnerAgeAtTimeOfReferral = (int) w.varWSLearnerAgeAtTimeOfReferral;
				r.ssSafeguardingReferralMadeTo = (int) w.varWSSafeguardingReferralMadeTo;
				r.ssUpdatedOn = (DateTime) w.varWSUpdatedOn;
				r.ssUpdatedBy = (int) w.varWSUpdatedBy;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSafeguardingIssueRecordList {
		public WORCSafeguardingIssueRecord[] Array;


		public WORLSafeguardingIssueRecordList(WORCSafeguardingIssueRecord[] r) {
			if (r == null)
			Array = new WORCSafeguardingIssueRecord[0];
			else
			Array = r;
		}
		public WORLSafeguardingIssueRecordList() {
			Array = new WORCSafeguardingIssueRecord[0];
		}

		public WORLSafeguardingIssueRecordList(RLSafeguardingIssueRecordList rl) {
			rl=(RLSafeguardingIssueRecordList) rl.Duplicate();
			Array = new WORCSafeguardingIssueRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSafeguardingIssueRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSafeguardingIssueRecordList {
		public static implicit operator RLSafeguardingIssueRecordList(WORCSafeguardingIssueRecord[] array) {
			RLSafeguardingIssueRecordList rl = new RLSafeguardingIssueRecordList();
			if (array != null) {
				foreach(WORCSafeguardingIssueRecord val in array) {
					rl.Append((RCSafeguardingIssueRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSafeguardingIssueRecord[](RLSafeguardingIssueRecordList rl) {
			WORCSafeguardingIssueRecord[] array = new WORCSafeguardingIssueRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSafeguardingIssueRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSafeguardingIssueRecordList {
		public static implicit operator RLSafeguardingIssueRecordList(WORLSafeguardingIssueRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSafeguardingIssueRecordList(RLSafeguardingIssueRecordList rl) {
			return new WORLSafeguardingIssueRecordList(rl);
		}
		public static implicit operator WORCSafeguardingIssueRecord[](WORLSafeguardingIssueRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSafeguardingIssueRecordList(WORCSafeguardingIssueRecord[] array) {
			return new WORLSafeguardingIssueRecordList(array);
		}
	}
}

