/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSafeguardingDocumentsBinaryEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENSafeguardingDocumentsBinaryEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENSafeguardingDocumentsBinaryEntity.eSpaceId;
	} // ENSafeguardingDocumentsBinaryEntity

	/// <summary>
	/// Entity <code>ENSafeguardingDocumentsBinaryEntityRecord</code> that represents the Service Studio
	///  entity <code>SafeguardingDocumentsBinary</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("SafeguardingDocumentsBinary", "MVv3Yj5iWkq+sZ72pnVAoQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_SafeguardingDocumentsBinary", "")]
	[Serializable()]
	public partial struct ENSafeguardingDocumentsBinaryEntityRecord: ISerializable, ITypedRecord<ENSafeguardingDocumentsBinaryEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*yNWNddkABU2CVEXIUn6p5w");
		private static readonly GlobalObjectKey IdSafeguardingDocuments = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*aBVayy8JwkaNOvjtVuI0sQ");
		private static readonly GlobalObjectKey IdDocumentBinary = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Z9sOnKAC_0WxyZuymfDRLQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGDOCUMENTS", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SafeguardingDocuments")]
		private int _ssSafeguardingDocuments;
		public int ssSafeguardingDocuments {
			get {
				return _ssSafeguardingDocuments;
			}
			set {
				if ((_ssSafeguardingDocuments!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssSafeguardingDocuments = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENTBINARY", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("DocumentBinary")]
		private byte[] _ssDocumentBinary;
		public byte[] ssDocumentBinary {
			get {
				return _ssDocumentBinary;
			}
			set {
				if ((_ssDocumentBinary!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDocumentBinary = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSafeguardingDocumentsBinaryEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssSafeguardingDocuments = 0;
			_ssDocumentBinary = new byte[] {};
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "SafeguardingDocumentsBinary.Id", 0);
			ssSafeguardingDocuments = r.ReadEntityReference(index++, "SafeguardingDocumentsBinary.SafeguardingDocuments", 0);
			ssDocumentBinary = r.ReadBinaryData(index++, "SafeguardingDocumentsBinary.DocumentBinary", new byte[] {}
			);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSafeguardingDocumentsBinaryEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSafeguardingDocumentsBinaryEntityRecord a, ENSafeguardingDocumentsBinaryEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssSafeguardingDocuments != b.ssSafeguardingDocuments) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssDocumentBinary, b.ssDocumentBinary)) return false;
			return true;
		}

		public static bool operator != (ENSafeguardingDocumentsBinaryEntityRecord a, ENSafeguardingDocumentsBinaryEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSafeguardingDocumentsBinaryEntityRecord)) return false;
			return (this == (ENSafeguardingDocumentsBinaryEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssSafeguardingDocuments.GetHashCode()
				^ ssDocumentBinary.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSafeguardingDocumentsBinaryEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssSafeguardingDocuments = 0;
			_ssDocumentBinary = new byte[] {};
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssSafeguardingDocuments = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDocumentBinary = (byte[]) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSafeguardingDocumentsBinaryEntityRecord Duplicate() {
			ENSafeguardingDocumentsBinaryEntityRecord t;
			t._ssId = this._ssId;
			t._ssSafeguardingDocuments = this._ssSafeguardingDocuments;
			if (this._ssDocumentBinary != null) {
				t._ssDocumentBinary = (byte[]) this._ssDocumentBinary.Clone();
			} else {
				t._ssDocumentBinary = null;
			}
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingDocuments")) VarValue.AppendAttribute(recordElem, "SafeguardingDocuments", ssSafeguardingDocuments, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingDocuments");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocumentBinary")) VarValue.AppendAttribute(recordElem, "DocumentBinary", ssDocumentBinary, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "DocumentBinary");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "safeguardingdocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingDocuments")) variable.Value = ssSafeguardingDocuments; else variable.Optimized = true;
			} else if (head == "documentbinary") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocumentBinary")) variable.Value = ssDocumentBinary; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdSafeguardingDocuments)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDocumentBinary)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdSafeguardingDocuments)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDocumentBinary)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdSafeguardingDocuments) {
				return ssSafeguardingDocuments;
			} else if (key == IdDocumentBinary) {
				return ssDocumentBinary;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssSafeguardingDocuments = (int) other.AttributeGet(IdSafeguardingDocuments);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdSafeguardingDocuments);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdSafeguardingDocuments);
			ssDocumentBinary = (byte[]) other.AttributeGet(IdDocumentBinary);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDocumentBinary);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDocumentBinary);
		}
	} // ENSafeguardingDocumentsBinaryEntityRecord
	/// <summary>
	/// Structure <code>RCSafeguardingDocumentsBinaryRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSafeguardingDocumentsBinaryRecord: ISerializable, ITypedRecord<RCSafeguardingDocumentsBinaryRecord> {
		private static readonly GlobalObjectKey IdSafeguardingDocumentsBinary = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*RmsLIgvKUSgdHczuolLLXQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SafeguardingDocumentsBinary")]
		public ENSafeguardingDocumentsBinaryEntityRecord ssENSafeguardingDocumentsBinary;


		public static implicit operator ENSafeguardingDocumentsBinaryEntityRecord(RCSafeguardingDocumentsBinaryRecord r) {
			return r.ssENSafeguardingDocumentsBinary;
		}

		public static implicit operator RCSafeguardingDocumentsBinaryRecord(ENSafeguardingDocumentsBinaryEntityRecord r) {
			RCSafeguardingDocumentsBinaryRecord res = new RCSafeguardingDocumentsBinaryRecord(null);
			res.ssENSafeguardingDocumentsBinary = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSafeguardingDocumentsBinary.ChangedAttributes = value;
			}
			get {
				return ssENSafeguardingDocumentsBinary.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSafeguardingDocumentsBinaryRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSafeguardingDocumentsBinary = new ENSafeguardingDocumentsBinaryEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSafeguardingDocumentsBinary.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSafeguardingDocumentsBinary.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSafeguardingDocumentsBinary.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSafeguardingDocumentsBinary.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSafeguardingDocumentsBinaryRecord r) {
			this = r;
		}


		public static bool operator == (RCSafeguardingDocumentsBinaryRecord a, RCSafeguardingDocumentsBinaryRecord b) {
			if (a.ssENSafeguardingDocumentsBinary != b.ssENSafeguardingDocumentsBinary) return false;
			return true;
		}

		public static bool operator != (RCSafeguardingDocumentsBinaryRecord a, RCSafeguardingDocumentsBinaryRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSafeguardingDocumentsBinaryRecord)) return false;
			return (this == (RCSafeguardingDocumentsBinaryRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSafeguardingDocumentsBinary.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSafeguardingDocumentsBinaryRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSafeguardingDocumentsBinary = new ENSafeguardingDocumentsBinaryEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSafeguardingDocumentsBinary = (ENSafeguardingDocumentsBinaryEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSafeguardingDocumentsBinary.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSafeguardingDocumentsBinary.InternalRecursiveSave();
		}


		public RCSafeguardingDocumentsBinaryRecord Duplicate() {
			RCSafeguardingDocumentsBinaryRecord t;
			t.ssENSafeguardingDocumentsBinary = (ENSafeguardingDocumentsBinaryEntityRecord) this.ssENSafeguardingDocumentsBinary.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSafeguardingDocumentsBinary.ToXml(this, recordElem, "SafeguardingDocumentsBinary", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "safeguardingdocumentsbinary") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingDocumentsBinary")) variable.Value = ssENSafeguardingDocumentsBinary; else variable.Optimized = true;
				variable.SetFieldName("safeguardingdocumentsbinary");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSafeguardingDocumentsBinary.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSafeguardingDocumentsBinary.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSafeguardingDocumentsBinary) {
				return ssENSafeguardingDocumentsBinary;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSafeguardingDocumentsBinary.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingDocumentsBinary));
		}
	} // RCSafeguardingDocumentsBinaryRecord
	/// <summary>
	/// RecordList type <code>RLSafeguardingDocumentsBinaryRecordList</code> that represents a record list
	///  of <code>SafeguardingDocumentsBinary</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingDocumentsBinaryRecordList: GenericRecordList<RCSafeguardingDocumentsBinaryRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSafeguardingDocumentsBinaryRecord GetElementDefaultValue() {
			return new RCSafeguardingDocumentsBinaryRecord("");
		}

		public T[] ToArray<T>(Func<RCSafeguardingDocumentsBinaryRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingDocumentsBinaryRecordList recordlist, Func<RCSafeguardingDocumentsBinaryRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingDocumentsBinaryRecordList ToList<T>(T[] array, Func <T, RCSafeguardingDocumentsBinaryRecord> converter) {
			RLSafeguardingDocumentsBinaryRecordList result = new RLSafeguardingDocumentsBinaryRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingDocumentsBinaryRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingDocumentsBinaryRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingDocumentsBinaryRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingDocumentsBinaryRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSafeguardingDocumentsBinaryRecord> NewList() {
			return new RLSafeguardingDocumentsBinaryRecordList();
		}


	} // RLSafeguardingDocumentsBinaryRecordList

	/// <summary>
	/// RecordList type <code>RLSafeguardingDocumentsBinaryList</code> that represents a record list of
	///  <code>BinaryData, Integer, SafeguardingDocumentsIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingDocumentsBinaryList: GenericRecordList<ENSafeguardingDocumentsBinaryEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSafeguardingDocumentsBinaryEntityRecord GetElementDefaultValue() {
			return new ENSafeguardingDocumentsBinaryEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSafeguardingDocumentsBinaryEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingDocumentsBinaryList recordlist, Func<ENSafeguardingDocumentsBinaryEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingDocumentsBinaryList ToList<T>(T[] array, Func <T, ENSafeguardingDocumentsBinaryEntityRecord> converter) {
			RLSafeguardingDocumentsBinaryList result = new RLSafeguardingDocumentsBinaryList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingDocumentsBinaryList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingDocumentsBinaryList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingDocumentsBinaryList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingDocumentsBinaryList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSafeguardingDocumentsBinaryEntityRecord> NewList() {
			return new RLSafeguardingDocumentsBinaryList();
		}


	} // RLSafeguardingDocumentsBinaryList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateSafeguardingDocumentsBinary
		/// </summary>

		public static void CreateSafeguardingDocumentsBinary(HeContext heContext, RCSafeguardingDocumentsBinaryRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingDocumentsBinaryEntity.eSpaceId;
				ENSafeguardingDocumentsBinaryEntityRecord ssENSafeguardingDocumentsBinary = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENSafeguardingDocumentsBinaryEntity.LocalViewName(null, null) + " (" +
					 " [SAFEGUARDINGDOCUMENTS]" +
					 ", [DOCUMENTBINARY]" +
					 " ) VALUES (" +
					 " @ssSafeguardingDocuments" +
					 ", @ssDocumentBinary" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENSafeguardingDocumentsBinary.ssSafeguardingDocuments==0)) {
						insertSqlCmd.CreateParameter("@ssSafeguardingDocuments", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSafeguardingDocuments", DbType.Int32, ssENSafeguardingDocumentsBinary.ssSafeguardingDocuments);
					}
					insertSqlCmd.CreateParameter("@ssDocumentBinary", DbType.Binary, ssENSafeguardingDocumentsBinary.ssDocumentBinary);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateSafeguardingDocumentsBinary", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateSafeguardingDocumentsBinary
		/// </summary>

		public static void CreateOrUpdateSafeguardingDocumentsBinary(HeContext heContext, BitArray usedFields, RCSafeguardingDocumentsBinaryRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingDocumentsBinaryEntity.eSpaceId;
				ENSafeguardingDocumentsBinaryEntityRecord ssENSafeguardingDocumentsBinary = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSafeguardingDocumentsBinaryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGDOCUMENTS] = @ssSafeguardingDocuments"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTBINARY] = @ssDocumentBinary"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSafeguardingDocumentsBinaryssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSafeguardingDocumentsBinary.ssSafeguardingDocuments==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingDocuments", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingDocuments", DbType.Int32, ssENSafeguardingDocumentsBinary.ssSafeguardingDocuments);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDocumentBinary", DbType.Binary, ssENSafeguardingDocumentsBinary.ssDocumentBinary);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[DOCUMENTBINARY] = [DOCUMENTBINARY]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSafeguardingDocumentsBinaryssId", DbType.Int32, ssENSafeguardingDocumentsBinary.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateSafeguardingDocumentsBinary (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENSafeguardingDocumentsBinaryEntity.LocalViewName(null, null) + " (" +
						 " [SAFEGUARDINGDOCUMENTS]" +
						 ", [DOCUMENTBINARY]" +
						 " ) VALUES (" +
						 " @ssSafeguardingDocuments" +
						 ", @ssDocumentBinary" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENSafeguardingDocumentsBinary.ssSafeguardingDocuments==0)) {
							insertSqlCmd.CreateParameter("@ssSafeguardingDocuments", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSafeguardingDocuments", DbType.Int32, ssENSafeguardingDocumentsBinary.ssSafeguardingDocuments);
						}
						insertSqlCmd.CreateParameter("@ssDocumentBinary", DbType.Binary, ssENSafeguardingDocumentsBinary.ssDocumentBinary);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateSafeguardingDocumentsBinary", true), typeof(int));
					} else {
						outParamId = ssENSafeguardingDocumentsBinary.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteSafeguardingDocumentsBinary
		/// </summary>

		public static void DeleteSafeguardingDocumentsBinary(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingDocumentsBinaryEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENSafeguardingDocumentsBinaryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteSafeguardingDocumentsBinary", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSafeguardingDocumentsBinary
		/// </summary>

		public static void GetSafeguardingDocumentsBinary(HeContext heContext, int inParamId, out RCSafeguardingDocumentsBinaryRecord outParamRecord) {
			outParamRecord = new RCSafeguardingDocumentsBinaryRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingDocumentsBinaryEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [SAFEGUARDINGDOCUMENTS]" +
					 ", [DOCUMENTBINARY]" +
					 " FROM " + ENSafeguardingDocumentsBinaryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSafeguardingDocumentsBinary", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENSafeguardingDocumentsBinaryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSafeguardingDocumentsBinaryForUpdate
		/// </summary>

		public static void GetSafeguardingDocumentsBinaryForUpdate(HeContext heContext, int inParamId, out RCSafeguardingDocumentsBinaryRecord outParamRecord) {
			outParamRecord = new RCSafeguardingDocumentsBinaryRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingDocumentsBinaryEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [SAFEGUARDINGDOCUMENTS]" +
					 ", [DOCUMENTBINARY]" +
					 "FROM " + ENSafeguardingDocumentsBinaryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSafeguardingDocumentsBinaryForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENSafeguardingDocumentsBinaryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateSafeguardingDocumentsBinary
		/// </summary>

		public static void UpdateSafeguardingDocumentsBinary(HeContext heContext, BitArray usedFields, RCSafeguardingDocumentsBinaryRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingDocumentsBinaryEntity.eSpaceId;
				ENSafeguardingDocumentsBinaryEntityRecord ssENSafeguardingDocumentsBinary = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSafeguardingDocumentsBinaryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGDOCUMENTS] = @ssSafeguardingDocuments"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTBINARY] = @ssDocumentBinary"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSafeguardingDocumentsBinaryssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSafeguardingDocumentsBinary.ssSafeguardingDocuments==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingDocuments", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingDocuments", DbType.Int32, ssENSafeguardingDocumentsBinary.ssSafeguardingDocuments);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDocumentBinary", DbType.Binary, ssENSafeguardingDocumentsBinary.ssDocumentBinary);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[DOCUMENTBINARY] = [DOCUMENTBINARY]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSafeguardingDocumentsBinaryssId", DbType.Int32, ssENSafeguardingDocumentsBinary.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateSafeguardingDocumentsBinary", true) <= 0)
					throw new DataBaseException(ENSafeguardingDocumentsBinaryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENSafeguardingDocumentsBinary.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("SafeguardingDocumentsBinary")]
	public class WORCSafeguardingDocumentsBinaryRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("SafeguardingDocuments")]
		public int varWSSafeguardingDocuments;

		[System.Xml.Serialization.XmlElement("DocumentBinary", DataType= "base64Binary")]
		public byte[] varWSDocumentBinary;

		public WORCSafeguardingDocumentsBinaryRecord() {
			varWSId = (int) 0;
			varWSSafeguardingDocuments = (int) 0;
			varWSDocumentBinary = (byte[]) new byte[] {};
		}

		public WORCSafeguardingDocumentsBinaryRecord(ENSafeguardingDocumentsBinaryEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSSafeguardingDocuments = (int) r.ssSafeguardingDocuments;
			varWSDocumentBinary = (byte[]) r.ssDocumentBinary;
		}

		public static RLSafeguardingDocumentsBinaryList ToRecordList(WORCSafeguardingDocumentsBinaryRecord[] array) {
			RLSafeguardingDocumentsBinaryList rl = new RLSafeguardingDocumentsBinaryList();
			if (array != null) {
				foreach(WORCSafeguardingDocumentsBinaryRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSafeguardingDocumentsBinaryRecord[] FromRecordList(RLSafeguardingDocumentsBinaryList rl) {
			WORCSafeguardingDocumentsBinaryRecord[] array = new WORCSafeguardingDocumentsBinaryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSafeguardingDocumentsBinaryRecord {
		public static implicit operator WORCSafeguardingDocumentsBinaryRecord(RCSafeguardingDocumentsBinaryRecord r) {
			return new WORCSafeguardingDocumentsBinaryRecord(r.ssENSafeguardingDocumentsBinary);
		}

		public static implicit operator RCSafeguardingDocumentsBinaryRecord(WORCSafeguardingDocumentsBinaryRecord w) {
			RCSafeguardingDocumentsBinaryRecord r = new RCSafeguardingDocumentsBinaryRecord("");
			if (w != null) {
				r.ssENSafeguardingDocumentsBinary = w;
			}
			return r;
		}

	}

	partial struct ENSafeguardingDocumentsBinaryEntityRecord {
		public static implicit operator WORCSafeguardingDocumentsBinaryRecord(ENSafeguardingDocumentsBinaryEntityRecord r) {
			return new WORCSafeguardingDocumentsBinaryRecord(r);
		}

		public static implicit operator ENSafeguardingDocumentsBinaryEntityRecord(WORCSafeguardingDocumentsBinaryRecord w) {
			ENSafeguardingDocumentsBinaryEntityRecord r = new ENSafeguardingDocumentsBinaryEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssSafeguardingDocuments = (int) w.varWSSafeguardingDocuments;
				r.ssDocumentBinary = ((byte[]) w.varWSDocumentBinary ?? new byte[] {}
				);
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSafeguardingDocumentsBinaryRecordList {
		public WORCSafeguardingDocumentsBinaryRecord[] Array;


		public WORLSafeguardingDocumentsBinaryRecordList(WORCSafeguardingDocumentsBinaryRecord[] r) {
			if (r == null)
			Array = new WORCSafeguardingDocumentsBinaryRecord[0];
			else
			Array = r;
		}
		public WORLSafeguardingDocumentsBinaryRecordList() {
			Array = new WORCSafeguardingDocumentsBinaryRecord[0];
		}

		public WORLSafeguardingDocumentsBinaryRecordList(RLSafeguardingDocumentsBinaryRecordList rl) {
			rl=(RLSafeguardingDocumentsBinaryRecordList) rl.Duplicate();
			Array = new WORCSafeguardingDocumentsBinaryRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSafeguardingDocumentsBinaryRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSafeguardingDocumentsBinaryRecordList {
		public static implicit operator RLSafeguardingDocumentsBinaryRecordList(WORCSafeguardingDocumentsBinaryRecord[] array) {
			RLSafeguardingDocumentsBinaryRecordList rl = new RLSafeguardingDocumentsBinaryRecordList();
			if (array != null) {
				foreach(WORCSafeguardingDocumentsBinaryRecord val in array) {
					rl.Append((RCSafeguardingDocumentsBinaryRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSafeguardingDocumentsBinaryRecord[](RLSafeguardingDocumentsBinaryRecordList rl) {
			WORCSafeguardingDocumentsBinaryRecord[] array = new WORCSafeguardingDocumentsBinaryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSafeguardingDocumentsBinaryRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSafeguardingDocumentsBinaryRecordList {
		public static implicit operator RLSafeguardingDocumentsBinaryRecordList(WORLSafeguardingDocumentsBinaryRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSafeguardingDocumentsBinaryRecordList(RLSafeguardingDocumentsBinaryRecordList rl) {
			return new WORLSafeguardingDocumentsBinaryRecordList(rl);
		}
		public static implicit operator WORCSafeguardingDocumentsBinaryRecord[](WORLSafeguardingDocumentsBinaryRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSafeguardingDocumentsBinaryRecordList(WORCSafeguardingDocumentsBinaryRecord[] array) {
			return new WORLSafeguardingDocumentsBinaryRecordList(array);
		}
	}
}

