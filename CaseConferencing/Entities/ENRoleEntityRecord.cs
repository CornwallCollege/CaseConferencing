/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENRoleEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(1), "ossys_Role");
		}
		public const int eSpaceId = 1;
	} // ENRoleEntity

	/// <summary>
	/// Entity <code>ENRoleEntityRecord</code> that represents the Service Studio entity <code>Role</code>
	///  <p> Description: Espace specific roles as defined in Service Studio. Old roles are kept a
	/// s inactive.</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Role", "602RDI8y_kaAArNdYUjwlg", "uXCIR2Atc0+es3zYuZSnNw", 0, "ossys_Role", "")]
	[Serializable()]
	public partial struct ENRoleEntityRecord: ISerializable, ITypedRecord<ENRoleEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*_DJ_uUlSl4pvOGCY3MUm7g");
		private static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*zsCxh3FTxPxyVD0qLwNg8w");
		private static readonly GlobalObjectKey IdPersistent = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*Q12rzWMN44TXMbMoKF5arA");
		private static readonly GlobalObjectKey IdSS_Key = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*t0jHlMRrHYQM5LpBSDuu4A");
		private static readonly GlobalObjectKey IdEspace_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*iT7YM5R1Cs29iTjgOYOxDw");
		private static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*gT+fMSirLDScD0KyuCwGJg");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*mL7O4cxWuJzPa1epSGMD5g");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NAME", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Name")]
		private string _ssName;
		public string ssName {
			get {
				return _ssName;
			}
			set {
				if ((_ssName!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PERSISTENT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Persistent")]
		private bool _ssPersistent;
		public bool ssPersistent {
			get {
				return _ssPersistent;
			}
			set {
				if ((_ssPersistent!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssPersistent = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SS_KEY", 100, false, false, false)]
		[System.Xml.Serialization.XmlElement("SS_Key")]
		private string _ssSS_Key;
		public string ssSS_Key {
			get {
				return _ssSS_Key;
			}
			set {
				if ((_ssSS_Key!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssSS_Key = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ESPACE_ID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Espace_Id")]
		private int _ssEspace_Id;
		public int ssEspace_Id {
			get {
				return _ssEspace_Id;
			}
			set {
				if ((_ssEspace_Id!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssEspace_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_Active")]
		private bool _ssIs_Active;
		public bool ssIs_Active {
			get {
				return _ssIs_Active;
			}
			set {
				if ((_ssIs_Active!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssIs_Active = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssDescription = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENRoleEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssName = "";
			_ssPersistent = false;
			_ssSS_Key = "";
			_ssEspace_Id = 0;
			_ssIs_Active = false;
			_ssDescription = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Role.Id", 0);
			ssName = r.ReadText(index++, "Role.Name", "");
			ssPersistent = r.ReadBoolean(index++, "Role.Persistent", false);
			ssSS_Key = r.ReadText(index++, "Role.SS_Key", "");
			ssEspace_Id = r.ReadEntityReference(index++, "Role.Espace_Id", 0);
			ssIs_Active = r.ReadBoolean(index++, "Role.Is_Active", false);
			ssDescription = r.ReadText(index++, "Role.Description", "");
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENRoleEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENRoleEntityRecord a, ENRoleEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssPersistent != b.ssPersistent) return false;
			if (a.ssSS_Key != b.ssSS_Key) return false;
			if (a.ssEspace_Id != b.ssEspace_Id) return false;
			if (a.ssIs_Active != b.ssIs_Active) return false;
			if (a.ssDescription != b.ssDescription) return false;
			return true;
		}

		public static bool operator != (ENRoleEntityRecord a, ENRoleEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENRoleEntityRecord)) return false;
			return (this == (ENRoleEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssName.GetHashCode()
				^ ssPersistent.GetHashCode()
				^ ssSS_Key.GetHashCode()
				^ ssEspace_Id.GetHashCode()
				^ ssIs_Active.GetHashCode()
				^ ssDescription.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENRoleEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssName = "";
			_ssPersistent = false;
			_ssSS_Key = "";
			_ssEspace_Id = 0;
			_ssIs_Active = false;
			_ssDescription = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssName = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssPersistent = (bool) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssSS_Key = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssEspace_Id = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssIs_Active = (bool) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENRoleEntityRecord Duplicate() {
			ENRoleEntityRecord t;
			t._ssId = this._ssId;
			t._ssName = this._ssName;
			t._ssPersistent = this._ssPersistent;
			t._ssSS_Key = this._ssSS_Key;
			t._ssEspace_Id = this._ssEspace_Id;
			t._ssIs_Active = this._ssIs_Active;
			t._ssDescription = this._ssDescription;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Persistent")) VarValue.AppendAttribute(recordElem, "Persistent", ssPersistent, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Persistent");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SS_Key")) VarValue.AppendAttribute(recordElem, "SS_Key", ssSS_Key, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SS_Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Espace_Id")) VarValue.AppendAttribute(recordElem, "Espace_Id", ssEspace_Id, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Espace_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "persistent") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Persistent")) variable.Value = ssPersistent; else variable.Optimized = true;
			} else if (head == "ss_key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SS_Key")) variable.Value = ssSS_Key; else variable.Optimized = true;
			} else if (head == "espace_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Espace_Id")) variable.Value = ssEspace_Id; else variable.Optimized = true;
			} else if (head == "is_active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdName)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdPersistent)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdSS_Key)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdEspace_Id)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdIs_Active)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdName)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdPersistent)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdSS_Key)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdEspace_Id)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdIs_Active)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdPersistent) {
				return ssPersistent;
			} else if (key == IdSS_Key) {
				return ssSS_Key;
			} else if (key == IdEspace_Id) {
				return ssEspace_Id;
			} else if (key == IdIs_Active) {
				return ssIs_Active;
			} else if (key == IdDescription) {
				return ssDescription;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssName = (string) other.AttributeGet(IdName);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdName);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdName);
			ssPersistent = (bool) other.AttributeGet(IdPersistent);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdPersistent);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdPersistent);
			ssSS_Key = (string) other.AttributeGet(IdSS_Key);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdSS_Key);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdSS_Key);
			ssEspace_Id = (int) other.AttributeGet(IdEspace_Id);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdEspace_Id);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdEspace_Id);
			ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdIs_Active);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdIs_Active);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdDescription);
		}
	} // ENRoleEntityRecord
	/// <summary>
	/// Structure <code>RCRoleRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRoleRecord: ISerializable, ITypedRecord<RCRoleRecord> {
		private static readonly GlobalObjectKey IdRole = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*hAhjEym2paOekp4c3qQusQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Role")]
		public ENRoleEntityRecord ssENRole;


		public static implicit operator ENRoleEntityRecord(RCRoleRecord r) {
			return r.ssENRole;
		}

		public static implicit operator RCRoleRecord(ENRoleEntityRecord r) {
			RCRoleRecord res = new RCRoleRecord(null);
			res.ssENRole = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENRole.ChangedAttributes = value;
			}
			get {
				return ssENRole.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCRoleRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRole = new ENRoleEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRole.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENRole.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENRole.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRole.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRoleRecord r) {
			this = r;
		}


		public static bool operator == (RCRoleRecord a, RCRoleRecord b) {
			if (a.ssENRole != b.ssENRole) return false;
			return true;
		}

		public static bool operator != (RCRoleRecord a, RCRoleRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRoleRecord)) return false;
			return (this == (RCRoleRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRole.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRoleRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRole = new ENRoleEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRole = (ENRoleEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENRole.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRole.InternalRecursiveSave();
		}


		public RCRoleRecord Duplicate() {
			RCRoleRecord t;
			t.ssENRole = (ENRoleEntityRecord) this.ssENRole.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRole.ToXml(this, recordElem, "Role", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "role") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Role")) variable.Value = ssENRole; else variable.Optimized = true;
				variable.SetFieldName("role");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENRole.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENRole.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRole) {
				return ssENRole;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRole.FillFromOther((IRecord) other.AttributeGet(IdRole));
		}
	} // RCRoleRecord
	/// <summary>
	/// RecordList type <code>RLRoleRecordList</code> that represents a record list of <code>Role</code>
	/// </summary>
	[Serializable()]
	public partial class RLRoleRecordList: GenericRecordList<RCRoleRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRoleRecord GetElementDefaultValue() {
			return new RCRoleRecord("");
		}

		public T[] ToArray<T>(Func<RCRoleRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRoleRecordList recordlist, Func<RCRoleRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRoleRecordList ToList<T>(T[] array, Func <T, RCRoleRecord> converter) {
			RLRoleRecordList result = new RLRoleRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRoleRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRoleRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRoleRecord> NewList() {
			return new RLRoleRecordList();
		}


	} // RLRoleRecordList

	/// <summary>
	/// RecordList type <code>RLRoleList</code> that represents a record list of <code>EspaceIdentifier,
	///  Text, Text, Text, Boolean, Boolean, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLRoleList: GenericRecordList<ENRoleEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENRoleEntityRecord GetElementDefaultValue() {
			return new ENRoleEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENRoleEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRoleList recordlist, Func<ENRoleEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRoleList ToList<T>(T[] array, Func <T, ENRoleEntityRecord> converter) {
			RLRoleList result = new RLRoleList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRoleList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRoleList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENRoleEntityRecord> NewList() {
			return new RLRoleList();
		}


	} // RLRoleList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateRole
		/// </summary>

		public static void CreateRole(HeContext heContext, RCRoleRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleEntity.eSpaceId;
				ENRoleEntityRecord ssENRole = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENRoleEntity.LocalViewName(null, null) + " (" +
					 " [NAME]" +
					 ", [PERSISTENT]" +
					 ", [SS_KEY]" +
					 ", [ESPACE_ID]" +
					 ", [IS_ACTIVE]" +
					 ", [DESCRIPTION]" +
					 " ) VALUES (" +
					 " @ssName" +
					 ", @ssPersistent" +
					 ", @ssSS_Key" +
					 ", @ssEspace_Id" +
					 ", @ssIs_Active" +
					 ", @ssDescription" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssName", DbType.String, ssENRole.ssName);
					insertSqlCmd.CreateParameter("@ssPersistent", DbType.Boolean, ssENRole.ssPersistent);
					insertSqlCmd.CreateParameter("@ssSS_Key", DbType.String, ssENRole.ssSS_Key);
					insertSqlCmd.CreateParameter("@ssEspace_Id", DbType.Int32, ssENRole.ssEspace_Id);
					insertSqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENRole.ssIs_Active);
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENRole.ssDescription);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateRole", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateRole
		/// </summary>

		public static void CreateOrUpdateRole(HeContext heContext, BitArray usedFields, RCRoleRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleEntity.eSpaceId;
				ENRoleEntityRecord ssENRole = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NAME] = @ssName"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PERSISTENT] = @ssPersistent"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SS_KEY] = @ssSS_Key"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ESPACE_ID] = @ssEspace_Id"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_ACTIVE] = @ssIs_Active"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRolessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssName", DbType.String, ssENRole.ssName);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssPersistent", DbType.Boolean, ssENRole.ssPersistent);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssSS_Key", DbType.String, ssENRole.ssSS_Key);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssEspace_Id", DbType.Int32, ssENRole.ssEspace_Id);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENRole.ssIs_Active);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENRole.ssDescription);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[PERSISTENT] = [PERSISTENT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRolessId", DbType.Int32, ssENRole.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateRole (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENRoleEntity.LocalViewName(null, null) + " (" +
						 " [NAME]" +
						 ", [PERSISTENT]" +
						 ", [SS_KEY]" +
						 ", [ESPACE_ID]" +
						 ", [IS_ACTIVE]" +
						 ", [DESCRIPTION]" +
						 " ) VALUES (" +
						 " @ssName" +
						 ", @ssPersistent" +
						 ", @ssSS_Key" +
						 ", @ssEspace_Id" +
						 ", @ssIs_Active" +
						 ", @ssDescription" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssName", DbType.String, ssENRole.ssName);
						insertSqlCmd.CreateParameter("@ssPersistent", DbType.Boolean, ssENRole.ssPersistent);
						insertSqlCmd.CreateParameter("@ssSS_Key", DbType.String, ssENRole.ssSS_Key);
						insertSqlCmd.CreateParameter("@ssEspace_Id", DbType.Int32, ssENRole.ssEspace_Id);
						insertSqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENRole.ssIs_Active);
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENRole.ssDescription);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateRole", true), typeof(int));
					} else {
						outParamId = ssENRole.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteRole
		/// </summary>

		public static void DeleteRole(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENRoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteRole", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRole
		/// </summary>

		public static void GetRole(HeContext heContext, int inParamId, out RCRoleRecord outParamRecord) {
			outParamRecord = new RCRoleRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [NAME]" +
					 ", [PERSISTENT]" +
					 ", [SS_KEY]" +
					 ", [ESPACE_ID]" +
					 ", [IS_ACTIVE]" +
					 ", [DESCRIPTION]" +
					 " FROM " + ENRoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRole", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENRoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRoleForUpdate
		/// </summary>

		public static void GetRoleForUpdate(HeContext heContext, int inParamId, out RCRoleRecord outParamRecord) {
			outParamRecord = new RCRoleRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [NAME]" +
					 ", [PERSISTENT]" +
					 ", [SS_KEY]" +
					 ", [ESPACE_ID]" +
					 ", [IS_ACTIVE]" +
					 ", [DESCRIPTION]" +
					 "FROM " + ENRoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRoleForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENRoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateRole
		/// </summary>

		public static void UpdateRole(HeContext heContext, BitArray usedFields, RCRoleRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleEntity.eSpaceId;
				ENRoleEntityRecord ssENRole = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NAME] = @ssName"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PERSISTENT] = @ssPersistent"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SS_KEY] = @ssSS_Key"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ESPACE_ID] = @ssEspace_Id"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_ACTIVE] = @ssIs_Active"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRolessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssName", DbType.String, ssENRole.ssName);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssPersistent", DbType.Boolean, ssENRole.ssPersistent);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssSS_Key", DbType.String, ssENRole.ssSS_Key);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssEspace_Id", DbType.Int32, ssENRole.ssEspace_Id);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENRole.ssIs_Active);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENRole.ssDescription);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[PERSISTENT] = [PERSISTENT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRolessId", DbType.Int32, ssENRole.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateRole", true) <= 0)
					throw new DataBaseException(ENRoleEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENRole.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Role")]
	public class WORCRoleRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Name")]
		public string varWSName;

		[System.Xml.Serialization.XmlElement("Persistent")]
		public bool varWSPersistent;

		[System.Xml.Serialization.XmlElement("SS_Key")]
		public string varWSSS_Key;

		[System.Xml.Serialization.XmlElement("Espace_Id")]
		public int varWSEspace_Id;

		[System.Xml.Serialization.XmlElement("Is_Active")]
		public bool varWSIs_Active;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		public WORCRoleRecord() {
			varWSId = (int) 0;
			varWSName = (string) "";
			varWSPersistent = (bool) false;
			varWSSS_Key = (string) "";
			varWSEspace_Id = (int) 0;
			varWSIs_Active = (bool) false;
			varWSDescription = (string) "";
		}

		public WORCRoleRecord(ENRoleEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSName = BaseAppUtils.RemoveControlChars(r.ssName);
			varWSPersistent = (bool) r.ssPersistent;
			varWSSS_Key = BaseAppUtils.RemoveControlChars(r.ssSS_Key);
			varWSEspace_Id = (int) r.ssEspace_Id;
			varWSIs_Active = (bool) r.ssIs_Active;
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
		}

		public static RLRoleList ToRecordList(WORCRoleRecord[] array) {
			RLRoleList rl = new RLRoleList();
			if (array != null) {
				foreach(WORCRoleRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRoleRecord[] FromRecordList(RLRoleList rl) {
			WORCRoleRecord[] array = new WORCRoleRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCRoleRecord {
		public static implicit operator WORCRoleRecord(RCRoleRecord r) {
			return new WORCRoleRecord(r.ssENRole);
		}

		public static implicit operator RCRoleRecord(WORCRoleRecord w) {
			RCRoleRecord r = new RCRoleRecord("");
			if (w != null) {
				r.ssENRole = w;
			}
			return r;
		}

	}

	partial struct ENRoleEntityRecord {
		public static implicit operator WORCRoleRecord(ENRoleEntityRecord r) {
			return new WORCRoleRecord(r);
		}

		public static implicit operator ENRoleEntityRecord(WORCRoleRecord w) {
			ENRoleEntityRecord r = new ENRoleEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssName = ((string) w.varWSName ?? "");
				r.ssPersistent = (bool) w.varWSPersistent;
				r.ssSS_Key = ((string) w.varWSSS_Key ?? "");
				r.ssEspace_Id = (int) w.varWSEspace_Id;
				r.ssIs_Active = (bool) w.varWSIs_Active;
				r.ssDescription = ((string) w.varWSDescription ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRoleRecordList {
		public WORCRoleRecord[] Array;


		public WORLRoleRecordList(WORCRoleRecord[] r) {
			if (r == null)
			Array = new WORCRoleRecord[0];
			else
			Array = r;
		}
		public WORLRoleRecordList() {
			Array = new WORCRoleRecord[0];
		}

		public WORLRoleRecordList(RLRoleRecordList rl) {
			rl=(RLRoleRecordList) rl.Duplicate();
			Array = new WORCRoleRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRoleRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRoleRecordList {
		public static implicit operator RLRoleRecordList(WORCRoleRecord[] array) {
			RLRoleRecordList rl = new RLRoleRecordList();
			if (array != null) {
				foreach(WORCRoleRecord val in array) {
					rl.Append((RCRoleRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRoleRecord[](RLRoleRecordList rl) {
			WORCRoleRecord[] array = new WORCRoleRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRoleRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRoleRecordList {
		public static implicit operator RLRoleRecordList(WORLRoleRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRoleRecordList(RLRoleRecordList rl) {
			return new WORLRoleRecordList(rl);
		}
		public static implicit operator WORCRoleRecord[](WORLRoleRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRoleRecordList(WORCRoleRecord[] array) {
			return new WORLRoleRecordList(array);
		}
	}
}

