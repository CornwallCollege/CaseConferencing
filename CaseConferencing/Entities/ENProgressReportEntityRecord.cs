/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENProgressReportEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENProgressReportEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENProgressReportEntity.eSpaceId;
	} // ENProgressReportEntity

	/// <summary>
	/// Entity <code>ENProgressReportEntityRecord</code> that represents the Service Studio entity
	///  <code>ProgressReport</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("ProgressReport", "eZjjt470D0SV2Xd+kw5bQw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_ProgressReport", "")]
	[Serializable()]
	public partial struct ENProgressReportEntityRecord: ISerializable, ITypedRecord<ENProgressReportEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*rKwv3+xcI0mPYlXG1j0VwQ");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*2y4nVC7DN0exswHith+14A");
		private static readonly GlobalObjectKey IdDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*AIv0npvtqUysPnHHJuVM6w");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*bAUpgv9if0CNA6NCDxfUEw");
		private static readonly GlobalObjectKey IdIsComplete = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*V4pm2uwc8kuRj7f0FX6NGA");
		private static readonly GlobalObjectKey IdCompleteDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Hbltgtm2OEyZP1fTRxgwBA");
		private static readonly GlobalObjectKey IdCompleteBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*KQ7CO7t3JkmlJaSnFMzyFg");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*THiS+dSXIESQZNdK_2KESw");
		private static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Q5oWrkxxqkeDKZ9pOobJFw");
		private static readonly GlobalObjectKey IdIntroduction = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*iSqMYoAVxUOTcAVPemux+Q");
		private static readonly GlobalObjectKey IdSignoff = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*LnWV0RlYIE+6fnq1Xr7V1w");
		private static readonly GlobalObjectKey IdIntroductionVisible = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Tf2I4nVALEywvNALgQrg5g");
		private static readonly GlobalObjectKey IdSignOffVisible = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*V6H4jIhbikm5Hfvicg6fBQ");
		private static readonly GlobalObjectKey IdIntroductionUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Fw4uAgDWhEe37Jdx4WZgfw");
		private static readonly GlobalObjectKey IdIntroductionUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*M0UOKNt79kWwppR2xGX3jg");
		private static readonly GlobalObjectKey IdSignOffUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*yOtThRa4CUGIxFYCU0BHUA");
		private static readonly GlobalObjectKey IdSignOffUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*3jhqWzBPbUakgyM9IfmBDg");
		private static readonly GlobalObjectKey IdIntroductionCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*edu+3L2h8068t5Ws67Cd4g");
		private static readonly GlobalObjectKey IdSignOffCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*1agiSVKsHka0XX7rkU4k_w");
		private static readonly GlobalObjectKey IdProgressReportType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*vmgF752r1kq+GUyf1DYsgw");
		private static readonly GlobalObjectKey IdAcademicYear = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*QIUYBA5qAE683fI7t1F5mg");
		private static readonly GlobalObjectKey IdLogoID = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*6_niv9VVjEaNg7BwTg+54g");
		private static readonly GlobalObjectKey IdPrintedAndSentDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*McNRWqL7ZUyHJGU3CUvKtg");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(23, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENT", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Student")]
		private string _ssStudent;
		public string ssStudent {
			get {
				return _ssStudent;
			}
			set {
				if ((_ssStudent!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudent = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Date")]
		private DateTime _ssDate;
		public DateTime ssDate {
			get {
				return _ssDate;
			}
			set {
				if ((_ssDate!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISCOMPLETE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IsComplete")]
		private bool _ssIsComplete;
		public bool ssIsComplete {
			get {
				return _ssIsComplete;
			}
			set {
				if ((_ssIsComplete!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssIsComplete = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETEDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompleteDate")]
		private DateTime _ssCompleteDate;
		public DateTime ssCompleteDate {
			get {
				return _ssCompleteDate;
			}
			set {
				if ((_ssCompleteDate!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCompleteDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETEBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CompleteBy")]
		private int _ssCompleteBy;
		public int ssCompleteBy {
			get {
				return _ssCompleteBy;
			}
			set {
				if ((_ssCompleteBy!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssCompleteBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedOn")]
		private DateTime _ssCreatedOn;
		public DateTime ssCreatedOn {
			get {
				return _ssCreatedOn;
			}
			set {
				if ((_ssCreatedOn!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssCreatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("INTRODUCTION", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Introduction")]
		private string _ssIntroduction;
		public string ssIntroduction {
			get {
				return _ssIntroduction;
			}
			set {
				if ((_ssIntroduction!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssIntroduction = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SIGNOFF", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Signoff")]
		private string _ssSignoff;
		public string ssSignoff {
			get {
				return _ssSignoff;
			}
			set {
				if ((_ssSignoff!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssSignoff = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("INTRODUCTIONVISIBLE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IntroductionVisible")]
		private bool _ssIntroductionVisible;
		public bool ssIntroductionVisible {
			get {
				return _ssIntroductionVisible;
			}
			set {
				if ((_ssIntroductionVisible!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssIntroductionVisible = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SIGNOFFVISIBLE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("SignOffVisible")]
		private bool _ssSignOffVisible;
		public bool ssSignOffVisible {
			get {
				return _ssSignOffVisible;
			}
			set {
				if ((_ssSignOffVisible!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssSignOffVisible = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("INTRODUCTIONUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("IntroductionUpdatedBy")]
		private int _ssIntroductionUpdatedBy;
		public int ssIntroductionUpdatedBy {
			get {
				return _ssIntroductionUpdatedBy;
			}
			set {
				if ((_ssIntroductionUpdatedBy!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssIntroductionUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("INTRODUCTIONUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IntroductionUpdatedOn")]
		private DateTime _ssIntroductionUpdatedOn;
		public DateTime ssIntroductionUpdatedOn {
			get {
				return _ssIntroductionUpdatedOn;
			}
			set {
				if ((_ssIntroductionUpdatedOn!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssIntroductionUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SIGNOFFUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SignOffUpdatedBy")]
		private int _ssSignOffUpdatedBy;
		public int ssSignOffUpdatedBy {
			get {
				return _ssSignOffUpdatedBy;
			}
			set {
				if ((_ssSignOffUpdatedBy!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssSignOffUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SIGNOFFUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("SignOffUpdatedOn")]
		private DateTime _ssSignOffUpdatedOn;
		public DateTime ssSignOffUpdatedOn {
			get {
				return _ssSignOffUpdatedOn;
			}
			set {
				if ((_ssSignOffUpdatedOn!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssSignOffUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("INTRODUCTIONCOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IntroductionCompleted")]
		private bool _ssIntroductionCompleted;
		public bool ssIntroductionCompleted {
			get {
				return _ssIntroductionCompleted;
			}
			set {
				if ((_ssIntroductionCompleted!=value) || OptimizedAttributes[17]) {
					ChangedAttributes[17] = true;
					_ssIntroductionCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SIGNOFFCOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("SignOffCompleted")]
		private bool _ssSignOffCompleted;
		public bool ssSignOffCompleted {
			get {
				return _ssSignOffCompleted;
			}
			set {
				if ((_ssSignOffCompleted!=value) || OptimizedAttributes[18]) {
					ChangedAttributes[18] = true;
					_ssSignOffCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PROGRESSREPORTTYPE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ProgressReportType")]
		private int _ssProgressReportType;
		public int ssProgressReportType {
			get {
				return _ssProgressReportType;
			}
			set {
				if ((_ssProgressReportType!=value) || OptimizedAttributes[19]) {
					ChangedAttributes[19] = true;
					_ssProgressReportType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ACADEMICYEAR", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("AcademicYear")]
		private string _ssAcademicYear;
		public string ssAcademicYear {
			get {
				return _ssAcademicYear;
			}
			set {
				if ((_ssAcademicYear!=value) || OptimizedAttributes[20]) {
					ChangedAttributes[20] = true;
					_ssAcademicYear = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LOGOID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LogoID")]
		private string _ssLogoID;
		public string ssLogoID {
			get {
				return _ssLogoID;
			}
			set {
				if ((_ssLogoID!=value) || OptimizedAttributes[21]) {
					ChangedAttributes[21] = true;
					_ssLogoID = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PRINTEDANDSENTDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("PrintedAndSentDate")]
		private DateTime _ssPrintedAndSentDate;
		public DateTime ssPrintedAndSentDate {
			get {
				return _ssPrintedAndSentDate;
			}
			set {
				if ((_ssPrintedAndSentDate!=value) || OptimizedAttributes[22]) {
					ChangedAttributes[22] = true;
					_ssPrintedAndSentDate = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENProgressReportEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(23, true);
			OptimizedAttributes = new BitArray(23, false);
			_ssId = 0;
			_ssStudent = "";
			_ssDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssDescription = "";
			_ssIsComplete = false;
			_ssCompleteDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCompleteBy = 0;
			_ssCreatedBy = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIntroduction = "";
			_ssSignoff = "";
			_ssIntroductionVisible = false;
			_ssSignOffVisible = false;
			_ssIntroductionUpdatedBy = 0;
			_ssIntroductionUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssSignOffUpdatedBy = 0;
			_ssSignOffUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIntroductionCompleted = false;
			_ssSignOffCompleted = false;
			_ssProgressReportType = 0;
			_ssAcademicYear = "";
			_ssLogoID = "";
			_ssPrintedAndSentDate = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "ProgressReport.Id", 0);
			ssStudent = r.ReadTextEntityReference(index++, "ProgressReport.Student", "");
			ssDate = r.ReadDate(index++, "ProgressReport.Date", new DateTime(1900, 1, 1, 0, 0, 0));
			ssDescription = r.ReadText(index++, "ProgressReport.Description", "");
			ssIsComplete = r.ReadBoolean(index++, "ProgressReport.IsComplete", false);
			ssCompleteDate = r.ReadDate(index++, "ProgressReport.CompleteDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCompleteBy = r.ReadEntityReference(index++, "ProgressReport.CompleteBy", 0);
			ssCreatedBy = r.ReadEntityReference(index++, "ProgressReport.CreatedBy", 0);
			ssCreatedOn = r.ReadDateTime(index++, "ProgressReport.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssIntroduction = r.ReadText(index++, "ProgressReport.Introduction", "");
			ssSignoff = r.ReadText(index++, "ProgressReport.Signoff", "");
			ssIntroductionVisible = r.ReadBoolean(index++, "ProgressReport.IntroductionVisible", false);
			ssSignOffVisible = r.ReadBoolean(index++, "ProgressReport.SignOffVisible", false);
			ssIntroductionUpdatedBy = r.ReadEntityReference(index++, "ProgressReport.IntroductionUpdatedBy", 0);
			ssIntroductionUpdatedOn = r.ReadDateTime(index++, "ProgressReport.IntroductionUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssSignOffUpdatedBy = r.ReadEntityReference(index++, "ProgressReport.SignOffUpdatedBy", 0);
			ssSignOffUpdatedOn = r.ReadDateTime(index++, "ProgressReport.SignOffUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssIntroductionCompleted = r.ReadBoolean(index++, "ProgressReport.IntroductionCompleted", false);
			ssSignOffCompleted = r.ReadBoolean(index++, "ProgressReport.SignOffCompleted", false);
			ssProgressReportType = r.ReadEntityReference(index++, "ProgressReport.ProgressReportType", 0);
			ssAcademicYear = r.ReadTextEntityReference(index++, "ProgressReport.AcademicYear", "");
			ssLogoID = r.ReadTextEntityReference(index++, "ProgressReport.LogoID", "");
			ssPrintedAndSentDate = r.ReadDate(index++, "ProgressReport.PrintedAndSentDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(23, false);
			OptimizedAttributes = new BitArray(23, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENProgressReportEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENProgressReportEntityRecord a, ENProgressReportEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudent != b.ssStudent) return false;
			if (a.ssDate != b.ssDate) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssIsComplete != b.ssIsComplete) return false;
			if (a.ssCompleteDate != b.ssCompleteDate) return false;
			if (a.ssCompleteBy != b.ssCompleteBy) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			if (a.ssIntroduction != b.ssIntroduction) return false;
			if (a.ssSignoff != b.ssSignoff) return false;
			if (a.ssIntroductionVisible != b.ssIntroductionVisible) return false;
			if (a.ssSignOffVisible != b.ssSignOffVisible) return false;
			if (a.ssIntroductionUpdatedBy != b.ssIntroductionUpdatedBy) return false;
			if (a.ssIntroductionUpdatedOn != b.ssIntroductionUpdatedOn) return false;
			if (a.ssSignOffUpdatedBy != b.ssSignOffUpdatedBy) return false;
			if (a.ssSignOffUpdatedOn != b.ssSignOffUpdatedOn) return false;
			if (a.ssIntroductionCompleted != b.ssIntroductionCompleted) return false;
			if (a.ssSignOffCompleted != b.ssSignOffCompleted) return false;
			if (a.ssProgressReportType != b.ssProgressReportType) return false;
			if (a.ssAcademicYear != b.ssAcademicYear) return false;
			if (a.ssLogoID != b.ssLogoID) return false;
			if (a.ssPrintedAndSentDate != b.ssPrintedAndSentDate) return false;
			return true;
		}

		public static bool operator != (ENProgressReportEntityRecord a, ENProgressReportEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENProgressReportEntityRecord)) return false;
			return (this == (ENProgressReportEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudent.GetHashCode()
				^ ssDate.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssIsComplete.GetHashCode()
				^ ssCompleteDate.GetHashCode()
				^ ssCompleteBy.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				^ ssIntroduction.GetHashCode()
				^ ssSignoff.GetHashCode()
				^ ssIntroductionVisible.GetHashCode()
				^ ssSignOffVisible.GetHashCode()
				^ ssIntroductionUpdatedBy.GetHashCode()
				^ ssIntroductionUpdatedOn.GetHashCode()
				^ ssSignOffUpdatedBy.GetHashCode()
				^ ssSignOffUpdatedOn.GetHashCode()
				^ ssIntroductionCompleted.GetHashCode()
				^ ssSignOffCompleted.GetHashCode()
				^ ssProgressReportType.GetHashCode()
				^ ssAcademicYear.GetHashCode()
				^ ssLogoID.GetHashCode()
				^ ssPrintedAndSentDate.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENProgressReportEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(23, true);
			OptimizedAttributes = new BitArray(23, false);
			_ssId = 0;
			_ssStudent = "";
			_ssDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssDescription = "";
			_ssIsComplete = false;
			_ssCompleteDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCompleteBy = 0;
			_ssCreatedBy = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIntroduction = "";
			_ssSignoff = "";
			_ssIntroductionVisible = false;
			_ssSignOffVisible = false;
			_ssIntroductionUpdatedBy = 0;
			_ssIntroductionUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssSignOffUpdatedBy = 0;
			_ssSignOffUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIntroductionCompleted = false;
			_ssSignOffCompleted = false;
			_ssProgressReportType = 0;
			_ssAcademicYear = "";
			_ssLogoID = "";
			_ssPrintedAndSentDate = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudent = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDate = (DateTime) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssIsComplete = (bool) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCompleteDate = (DateTime) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssCompleteBy = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssCreatedOn = (DateTime) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssIntroduction = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssSignoff = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssIntroductionVisible = (bool) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssSignOffVisible = (bool) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssIntroductionUpdatedBy = (int) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssIntroductionUpdatedOn = (DateTime) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssSignOffUpdatedBy = (int) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssSignOffUpdatedOn = (DateTime) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			_ssIntroductionCompleted = (bool) info.GetValue(fields[17] .Name, fields[17] .FieldType);
			if (fields[18] .FieldType.IsSerializable)
			_ssSignOffCompleted = (bool) info.GetValue(fields[18] .Name, fields[18] .FieldType);
			if (fields[19] .FieldType.IsSerializable)
			_ssProgressReportType = (int) info.GetValue(fields[19] .Name, fields[19] .FieldType);
			if (fields[20] .FieldType.IsSerializable)
			_ssAcademicYear = (string) info.GetValue(fields[20] .Name, fields[20] .FieldType);
			if (fields[21] .FieldType.IsSerializable)
			_ssLogoID = (string) info.GetValue(fields[21] .Name, fields[21] .FieldType);
			if (fields[22] .FieldType.IsSerializable)
			_ssPrintedAndSentDate = (DateTime) info.GetValue(fields[22] .Name, fields[22] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENProgressReportEntityRecord Duplicate() {
			ENProgressReportEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudent = this._ssStudent;
			t._ssDate = this._ssDate;
			t._ssDescription = this._ssDescription;
			t._ssIsComplete = this._ssIsComplete;
			t._ssCompleteDate = this._ssCompleteDate;
			t._ssCompleteBy = this._ssCompleteBy;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssCreatedOn = this._ssCreatedOn;
			t._ssIntroduction = this._ssIntroduction;
			t._ssSignoff = this._ssSignoff;
			t._ssIntroductionVisible = this._ssIntroductionVisible;
			t._ssSignOffVisible = this._ssSignOffVisible;
			t._ssIntroductionUpdatedBy = this._ssIntroductionUpdatedBy;
			t._ssIntroductionUpdatedOn = this._ssIntroductionUpdatedOn;
			t._ssSignOffUpdatedBy = this._ssSignOffUpdatedBy;
			t._ssSignOffUpdatedOn = this._ssSignOffUpdatedOn;
			t._ssIntroductionCompleted = this._ssIntroductionCompleted;
			t._ssSignOffCompleted = this._ssSignOffCompleted;
			t._ssProgressReportType = this._ssProgressReportType;
			t._ssAcademicYear = this._ssAcademicYear;
			t._ssLogoID = this._ssLogoID;
			t._ssPrintedAndSentDate = this._ssPrintedAndSentDate;
			t.ChangedAttributes = new BitArray(23);
			t.OptimizedAttributes = new BitArray(23);
			for (int i = 0; i < 23; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Student")) VarValue.AppendAttribute(recordElem, "Student", ssStudent, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Student");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Date")) VarValue.AppendAttribute(recordElem, "Date", ssDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "Date");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsComplete")) VarValue.AppendAttribute(recordElem, "IsComplete", ssIsComplete, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsComplete");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompleteDate")) VarValue.AppendAttribute(recordElem, "CompleteDate", ssCompleteDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "CompleteDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompleteBy")) VarValue.AppendAttribute(recordElem, "CompleteBy", ssCompleteBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CompleteBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Introduction")) VarValue.AppendAttribute(recordElem, "Introduction", ssIntroduction, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Introduction");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Signoff")) VarValue.AppendAttribute(recordElem, "Signoff", ssSignoff, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Signoff");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IntroductionVisible")) VarValue.AppendAttribute(recordElem, "IntroductionVisible", ssIntroductionVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IntroductionVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SignOffVisible")) VarValue.AppendAttribute(recordElem, "SignOffVisible", ssSignOffVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SignOffVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IntroductionUpdatedBy")) VarValue.AppendAttribute(recordElem, "IntroductionUpdatedBy", ssIntroductionUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "IntroductionUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IntroductionUpdatedOn")) VarValue.AppendAttribute(recordElem, "IntroductionUpdatedOn", ssIntroductionUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "IntroductionUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SignOffUpdatedBy")) VarValue.AppendAttribute(recordElem, "SignOffUpdatedBy", ssSignOffUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SignOffUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SignOffUpdatedOn")) VarValue.AppendAttribute(recordElem, "SignOffUpdatedOn", ssSignOffUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "SignOffUpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IntroductionCompleted")) VarValue.AppendAttribute(recordElem, "IntroductionCompleted", ssIntroductionCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IntroductionCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SignOffCompleted")) VarValue.AppendAttribute(recordElem, "SignOffCompleted", ssSignOffCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SignOffCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProgressReportType")) VarValue.AppendAttribute(recordElem, "ProgressReportType", ssProgressReportType, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ProgressReportType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AcademicYear")) VarValue.AppendAttribute(recordElem, "AcademicYear", ssAcademicYear, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "AcademicYear");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogoID")) VarValue.AppendAttribute(recordElem, "LogoID", ssLogoID, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LogoID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PrintedAndSentDate")) VarValue.AppendAttribute(recordElem, "PrintedAndSentDate", ssPrintedAndSentDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "PrintedAndSentDate");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssStudent; else variable.Optimized = true;
			} else if (head == "date") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Date")) variable.Value = ssDate; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "iscomplete") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsComplete")) variable.Value = ssIsComplete; else variable.Optimized = true;
			} else if (head == "completedate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompleteDate")) variable.Value = ssCompleteDate; else variable.Optimized = true;
			} else if (head == "completeby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompleteBy")) variable.Value = ssCompleteBy; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			} else if (head == "introduction") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Introduction")) variable.Value = ssIntroduction; else variable.Optimized = true;
			} else if (head == "signoff") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Signoff")) variable.Value = ssSignoff; else variable.Optimized = true;
			} else if (head == "introductionvisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IntroductionVisible")) variable.Value = ssIntroductionVisible; else variable.Optimized = true;
			} else if (head == "signoffvisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SignOffVisible")) variable.Value = ssSignOffVisible; else variable.Optimized = true;
			} else if (head == "introductionupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IntroductionUpdatedBy")) variable.Value = ssIntroductionUpdatedBy; else variable.Optimized = true;
			} else if (head == "introductionupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IntroductionUpdatedOn")) variable.Value = ssIntroductionUpdatedOn; else variable.Optimized = true;
			} else if (head == "signoffupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SignOffUpdatedBy")) variable.Value = ssSignOffUpdatedBy; else variable.Optimized = true;
			} else if (head == "signoffupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SignOffUpdatedOn")) variable.Value = ssSignOffUpdatedOn; else variable.Optimized = true;
			} else if (head == "introductioncompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IntroductionCompleted")) variable.Value = ssIntroductionCompleted; else variable.Optimized = true;
			} else if (head == "signoffcompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SignOffCompleted")) variable.Value = ssSignOffCompleted; else variable.Optimized = true;
			} else if (head == "progressreporttype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportType")) variable.Value = ssProgressReportType; else variable.Optimized = true;
			} else if (head == "academicyear") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYear")) variable.Value = ssAcademicYear; else variable.Optimized = true;
			} else if (head == "logoid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogoID")) variable.Value = ssLogoID; else variable.Optimized = true;
			} else if (head == "printedandsentdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PrintedAndSentDate")) variable.Value = ssPrintedAndSentDate; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudent)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDate)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdIsComplete)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCompleteDate)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdCompleteBy)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdCreatedOn)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdIntroduction)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdSignoff)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdIntroductionVisible)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdSignOffVisible)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdIntroductionUpdatedBy)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdIntroductionUpdatedOn)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdSignOffUpdatedBy)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdSignOffUpdatedOn)) {
				return ChangedAttributes[16];
			} else if (key.Equals(IdIntroductionCompleted)) {
				return ChangedAttributes[17];
			} else if (key.Equals(IdSignOffCompleted)) {
				return ChangedAttributes[18];
			} else if (key.Equals(IdProgressReportType)) {
				return ChangedAttributes[19];
			} else if (key.Equals(IdAcademicYear)) {
				return ChangedAttributes[20];
			} else if (key.Equals(IdLogoID)) {
				return ChangedAttributes[21];
			} else if (key.Equals(IdPrintedAndSentDate)) {
				return ChangedAttributes[22];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudent)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDate)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdIsComplete)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCompleteDate)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdCompleteBy)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdCreatedOn)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdIntroduction)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdSignoff)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdIntroductionVisible)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdSignOffVisible)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdIntroductionUpdatedBy)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdIntroductionUpdatedOn)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdSignOffUpdatedBy)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdSignOffUpdatedOn)) {
				return OptimizedAttributes[16];
			} else if (key.Equals(IdIntroductionCompleted)) {
				return OptimizedAttributes[17];
			} else if (key.Equals(IdSignOffCompleted)) {
				return OptimizedAttributes[18];
			} else if (key.Equals(IdProgressReportType)) {
				return OptimizedAttributes[19];
			} else if (key.Equals(IdAcademicYear)) {
				return OptimizedAttributes[20];
			} else if (key.Equals(IdLogoID)) {
				return OptimizedAttributes[21];
			} else if (key.Equals(IdPrintedAndSentDate)) {
				return OptimizedAttributes[22];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudent) {
				return ssStudent;
			} else if (key == IdDate) {
				return ssDate;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdIsComplete) {
				return ssIsComplete;
			} else if (key == IdCompleteDate) {
				return ssCompleteDate;
			} else if (key == IdCompleteBy) {
				return ssCompleteBy;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else if (key == IdIntroduction) {
				return ssIntroduction;
			} else if (key == IdSignoff) {
				return ssSignoff;
			} else if (key == IdIntroductionVisible) {
				return ssIntroductionVisible;
			} else if (key == IdSignOffVisible) {
				return ssSignOffVisible;
			} else if (key == IdIntroductionUpdatedBy) {
				return ssIntroductionUpdatedBy;
			} else if (key == IdIntroductionUpdatedOn) {
				return ssIntroductionUpdatedOn;
			} else if (key == IdSignOffUpdatedBy) {
				return ssSignOffUpdatedBy;
			} else if (key == IdSignOffUpdatedOn) {
				return ssSignOffUpdatedOn;
			} else if (key == IdIntroductionCompleted) {
				return ssIntroductionCompleted;
			} else if (key == IdSignOffCompleted) {
				return ssSignOffCompleted;
			} else if (key == IdProgressReportType) {
				return ssProgressReportType;
			} else if (key == IdAcademicYear) {
				return ssAcademicYear;
			} else if (key == IdLogoID) {
				return ssLogoID;
			} else if (key == IdPrintedAndSentDate) {
				return ssPrintedAndSentDate;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(23);
			OptimizedAttributes = new BitArray(23);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudent = (string) other.AttributeGet(IdStudent);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudent);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudent);
			ssDate = (DateTime) other.AttributeGet(IdDate);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDate);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDate);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdDescription);
			ssIsComplete = (bool) other.AttributeGet(IdIsComplete);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdIsComplete);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdIsComplete);
			ssCompleteDate = (DateTime) other.AttributeGet(IdCompleteDate);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCompleteDate);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCompleteDate);
			ssCompleteBy = (int) other.AttributeGet(IdCompleteBy);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdCompleteBy);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdCompleteBy);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdCreatedBy);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdCreatedOn);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdCreatedOn);
			ssIntroduction = (string) other.AttributeGet(IdIntroduction);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdIntroduction);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdIntroduction);
			ssSignoff = (string) other.AttributeGet(IdSignoff);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdSignoff);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdSignoff);
			ssIntroductionVisible = (bool) other.AttributeGet(IdIntroductionVisible);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdIntroductionVisible);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdIntroductionVisible);
			ssSignOffVisible = (bool) other.AttributeGet(IdSignOffVisible);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdSignOffVisible);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdSignOffVisible);
			ssIntroductionUpdatedBy = (int) other.AttributeGet(IdIntroductionUpdatedBy);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdIntroductionUpdatedBy);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdIntroductionUpdatedBy);
			ssIntroductionUpdatedOn = (DateTime) other.AttributeGet(IdIntroductionUpdatedOn);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdIntroductionUpdatedOn);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdIntroductionUpdatedOn);
			ssSignOffUpdatedBy = (int) other.AttributeGet(IdSignOffUpdatedBy);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdSignOffUpdatedBy);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdSignOffUpdatedBy);
			ssSignOffUpdatedOn = (DateTime) other.AttributeGet(IdSignOffUpdatedOn);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdSignOffUpdatedOn);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdSignOffUpdatedOn);
			ssIntroductionCompleted = (bool) other.AttributeGet(IdIntroductionCompleted);
			ChangedAttributes[17] = other.ChangedAttributeGet(IdIntroductionCompleted);
			OptimizedAttributes[17] = other.OptimizedAttributeGet(IdIntroductionCompleted);
			ssSignOffCompleted = (bool) other.AttributeGet(IdSignOffCompleted);
			ChangedAttributes[18] = other.ChangedAttributeGet(IdSignOffCompleted);
			OptimizedAttributes[18] = other.OptimizedAttributeGet(IdSignOffCompleted);
			ssProgressReportType = (int) other.AttributeGet(IdProgressReportType);
			ChangedAttributes[19] = other.ChangedAttributeGet(IdProgressReportType);
			OptimizedAttributes[19] = other.OptimizedAttributeGet(IdProgressReportType);
			ssAcademicYear = (string) other.AttributeGet(IdAcademicYear);
			ChangedAttributes[20] = other.ChangedAttributeGet(IdAcademicYear);
			OptimizedAttributes[20] = other.OptimizedAttributeGet(IdAcademicYear);
			ssLogoID = (string) other.AttributeGet(IdLogoID);
			ChangedAttributes[21] = other.ChangedAttributeGet(IdLogoID);
			OptimizedAttributes[21] = other.OptimizedAttributeGet(IdLogoID);
			ssPrintedAndSentDate = (DateTime) other.AttributeGet(IdPrintedAndSentDate);
			ChangedAttributes[22] = other.ChangedAttributeGet(IdPrintedAndSentDate);
			OptimizedAttributes[22] = other.OptimizedAttributeGet(IdPrintedAndSentDate);
		}
	} // ENProgressReportEntityRecord
	/// <summary>
	/// Structure <code>RCProgressReportRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCProgressReportRecord: ISerializable, ITypedRecord<RCProgressReportRecord> {
		private static readonly GlobalObjectKey IdProgressReport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SPM6fO6pklT1IyJ42zLhqA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ProgressReport")]
		public ENProgressReportEntityRecord ssENProgressReport;


		public static implicit operator ENProgressReportEntityRecord(RCProgressReportRecord r) {
			return r.ssENProgressReport;
		}

		public static implicit operator RCProgressReportRecord(ENProgressReportEntityRecord r) {
			RCProgressReportRecord res = new RCProgressReportRecord(null);
			res.ssENProgressReport = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENProgressReport.ChangedAttributes = value;
			}
			get {
				return ssENProgressReport.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCProgressReportRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENProgressReport = new ENProgressReportEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(23, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENProgressReport.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENProgressReport.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENProgressReport.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENProgressReport.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCProgressReportRecord r) {
			this = r;
		}


		public static bool operator == (RCProgressReportRecord a, RCProgressReportRecord b) {
			if (a.ssENProgressReport != b.ssENProgressReport) return false;
			return true;
		}

		public static bool operator != (RCProgressReportRecord a, RCProgressReportRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCProgressReportRecord)) return false;
			return (this == (RCProgressReportRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENProgressReport.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCProgressReportRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENProgressReport = new ENProgressReportEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENProgressReport = (ENProgressReportEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENProgressReport.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENProgressReport.InternalRecursiveSave();
		}


		public RCProgressReportRecord Duplicate() {
			RCProgressReportRecord t;
			t.ssENProgressReport = (ENProgressReportEntityRecord) this.ssENProgressReport.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENProgressReport.ToXml(this, recordElem, "ProgressReport", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "progressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReport")) variable.Value = ssENProgressReport; else variable.Optimized = true;
				variable.SetFieldName("progressreport");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENProgressReport.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENProgressReport.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdProgressReport) {
				return ssENProgressReport;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENProgressReport.FillFromOther((IRecord) other.AttributeGet(IdProgressReport));
		}
	} // RCProgressReportRecord
	/// <summary>
	/// RecordList type <code>RLProgressReportRecordList</code> that represents a record list of
	///  <code>ProgressReport</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportRecordList: GenericRecordList<RCProgressReportRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCProgressReportRecord GetElementDefaultValue() {
			return new RCProgressReportRecord("");
		}

		public T[] ToArray<T>(Func<RCProgressReportRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportRecordList recordlist, Func<RCProgressReportRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportRecordList ToList<T>(T[] array, Func <T, RCProgressReportRecord> converter) {
			RLProgressReportRecordList result = new RLProgressReportRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(23, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCProgressReportRecord> NewList() {
			return new RLProgressReportRecordList();
		}


	} // RLProgressReportRecordList

	/// <summary>
	/// RecordList type <code>RLProgressReportList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, UserIdentifier, UserIdentifier, UserIdentifier, Text
	/// , Text, Text, Date, Date, Date, DateTime, DateTime, DateTime, Boolean, Boolean, Boolean, Boolean,
	///  Boolean, Integer, ProgressReportTypeIdentifier, AcademicYearsIdentifier, LogoIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportList: GenericRecordList<ENProgressReportEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENProgressReportEntityRecord GetElementDefaultValue() {
			return new ENProgressReportEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENProgressReportEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportList recordlist, Func<ENProgressReportEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportList ToList<T>(T[] array, Func <T, ENProgressReportEntityRecord> converter) {
			RLProgressReportList result = new RLProgressReportList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENProgressReportEntityRecord> NewList() {
			return new RLProgressReportList();
		}


	} // RLProgressReportList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateProgressReport
		/// </summary>

		public static void CreateProgressReport(HeContext heContext, RCProgressReportRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportEntity.eSpaceId;
				ENProgressReportEntityRecord ssENProgressReport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENProgressReportEntity.LocalViewName(null, null) + " (" +
					 " [STUDENT]" +
					 ", [DATE]" +
					 ", [DESCRIPTION]" +
					 ", [ISCOMPLETE]" +
					 ", [COMPLETEDATE]" +
					 ", [COMPLETEBY]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 ", [INTRODUCTION]" +
					 ", [SIGNOFF]" +
					 ", [INTRODUCTIONVISIBLE]" +
					 ", [SIGNOFFVISIBLE]" +
					 ", [INTRODUCTIONUPDATEDBY]" +
					 ", [INTRODUCTIONUPDATEDON]" +
					 ", [SIGNOFFUPDATEDBY]" +
					 ", [SIGNOFFUPDATEDON]" +
					 ", [INTRODUCTIONCOMPLETED]" +
					 ", [SIGNOFFCOMPLETED]" +
					 ", [PROGRESSREPORTTYPE]" +
					 ", [ACADEMICYEAR]" +
					 ", [LOGOID]" +
					 ", [PRINTEDANDSENTDATE]" +
					 " ) VALUES (" +
					 " @ssStudent" +
					 ", @ssDate" +
					 ", @ssDescription" +
					 ", @ssIsComplete" +
					 ", @ssCompleteDate" +
					 ", @ssCompleteBy" +
					 ", @ssCreatedBy" +
					 ", @ssCreatedOn" +
					 ", @ssIntroduction" +
					 ", @ssSignoff" +
					 ", @ssIntroductionVisible" +
					 ", @ssSignOffVisible" +
					 ", @ssIntroductionUpdatedBy" +
					 ", @ssIntroductionUpdatedOn" +
					 ", @ssSignOffUpdatedBy" +
					 ", @ssSignOffUpdatedOn" +
					 ", @ssIntroductionCompleted" +
					 ", @ssSignOffCompleted" +
					 ", @ssProgressReportType" +
					 ", @ssAcademicYear" +
					 ", @ssLogoID" +
					 ", @ssPrintedAndSentDate" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssStudent", DbType.String, ssENProgressReport.ssStudent);
					insertSqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENProgressReport.ssDate);
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENProgressReport.ssDescription);
					insertSqlCmd.CreateParameter("@ssIsComplete", DbType.Boolean, ssENProgressReport.ssIsComplete);
					insertSqlCmd.CreateParameter("@ssCompleteDate", DbType.DateTime, ssENProgressReport.ssCompleteDate);
					if ((ssENProgressReport.ssCompleteBy==0)) {
						insertSqlCmd.CreateParameter("@ssCompleteBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCompleteBy", DbType.Int32, ssENProgressReport.ssCompleteBy);
					}
					if ((ssENProgressReport.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENProgressReport.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENProgressReport.ssCreatedOn);
					insertSqlCmd.CreateParameter("@ssIntroduction", DbType.String, ssENProgressReport.ssIntroduction);
					insertSqlCmd.CreateParameter("@ssSignoff", DbType.String, ssENProgressReport.ssSignoff);
					insertSqlCmd.CreateParameter("@ssIntroductionVisible", DbType.Boolean, ssENProgressReport.ssIntroductionVisible);
					insertSqlCmd.CreateParameter("@ssSignOffVisible", DbType.Boolean, ssENProgressReport.ssSignOffVisible);
					if ((ssENProgressReport.ssIntroductionUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssIntroductionUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssIntroductionUpdatedBy", DbType.Int32, ssENProgressReport.ssIntroductionUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssIntroductionUpdatedOn", DbType.DateTime, ssENProgressReport.ssIntroductionUpdatedOn);
					if ((ssENProgressReport.ssSignOffUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssSignOffUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSignOffUpdatedBy", DbType.Int32, ssENProgressReport.ssSignOffUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssSignOffUpdatedOn", DbType.DateTime, ssENProgressReport.ssSignOffUpdatedOn);
					insertSqlCmd.CreateParameter("@ssIntroductionCompleted", DbType.Boolean, ssENProgressReport.ssIntroductionCompleted);
					insertSqlCmd.CreateParameter("@ssSignOffCompleted", DbType.Boolean, ssENProgressReport.ssSignOffCompleted);
					if ((ssENProgressReport.ssProgressReportType==0)) {
						insertSqlCmd.CreateParameter("@ssProgressReportType", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssProgressReportType", DbType.Int32, ssENProgressReport.ssProgressReportType);
					}
					if ((ssENProgressReport.ssAcademicYear== "")) {
						insertSqlCmd.CreateParameter("@ssAcademicYear", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENProgressReport.ssAcademicYear);
					}
					if ((ssENProgressReport.ssLogoID== "")) {
						insertSqlCmd.CreateParameter("@ssLogoID", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLogoID", DbType.String, ssENProgressReport.ssLogoID);
					}
					insertSqlCmd.CreateParameter("@ssPrintedAndSentDate", DbType.DateTime, ssENProgressReport.ssPrintedAndSentDate);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateProgressReport", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateProgressReport
		/// </summary>

		public static void CreateOrUpdateProgressReport(HeContext heContext, BitArray usedFields, RCProgressReportRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportEntity.eSpaceId;
				ENProgressReportEntityRecord ssENProgressReport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(23, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENProgressReportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENT] = @ssStudent"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATE] = @ssDate"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISCOMPLETE] = @ssIsComplete"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETEDATE] = @ssCompleteDate"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETEBY] = @ssCompleteBy"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTRODUCTION] = @ssIntroduction"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIGNOFF] = @ssSignoff"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTRODUCTIONVISIBLE] = @ssIntroductionVisible"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIGNOFFVISIBLE] = @ssSignOffVisible"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTRODUCTIONUPDATEDBY] = @ssIntroductionUpdatedBy"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTRODUCTIONUPDATEDON] = @ssIntroductionUpdatedOn"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIGNOFFUPDATEDBY] = @ssSignOffUpdatedBy"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIGNOFFUPDATEDON] = @ssSignOffUpdatedOn"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTRODUCTIONCOMPLETED] = @ssIntroductionCompleted"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIGNOFFCOMPLETED] = @ssSignOffCompleted"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROGRESSREPORTTYPE] = @ssProgressReportType"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACADEMICYEAR] = @ssAcademicYear"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LOGOID] = @ssLogoID"): parameters);
					parameters = (usedFields[22] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PRINTEDANDSENTDATE] = @ssPrintedAndSentDate"): parameters);
					string whereCondition = " WHERE [ID] = @ssENProgressReportssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssStudent", DbType.String, ssENProgressReport.ssStudent);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENProgressReport.ssDate);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENProgressReport.ssDescription);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssIsComplete", DbType.Boolean, ssENProgressReport.ssIsComplete);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssCompleteDate", DbType.DateTime, ssENProgressReport.ssCompleteDate);
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENProgressReport.ssCompleteBy==0)) {
							sqlCmd.CreateParameter("@ssCompleteBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCompleteBy", DbType.Int32, ssENProgressReport.ssCompleteBy);
						}
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENProgressReport.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENProgressReport.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENProgressReport.ssCreatedOn);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssIntroduction", DbType.String, ssENProgressReport.ssIntroduction);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssSignoff", DbType.String, ssENProgressReport.ssSignoff);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssIntroductionVisible", DbType.Boolean, ssENProgressReport.ssIntroductionVisible);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssSignOffVisible", DbType.Boolean, ssENProgressReport.ssSignOffVisible);
						counter++;
					}
					if (usedFields[13]) {
						if ((ssENProgressReport.ssIntroductionUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssIntroductionUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssIntroductionUpdatedBy", DbType.Int32, ssENProgressReport.ssIntroductionUpdatedBy);
						}
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssIntroductionUpdatedOn", DbType.DateTime, ssENProgressReport.ssIntroductionUpdatedOn);
						counter++;
					}
					if (usedFields[15]) {
						if ((ssENProgressReport.ssSignOffUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssSignOffUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSignOffUpdatedBy", DbType.Int32, ssENProgressReport.ssSignOffUpdatedBy);
						}
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssSignOffUpdatedOn", DbType.DateTime, ssENProgressReport.ssSignOffUpdatedOn);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssIntroductionCompleted", DbType.Boolean, ssENProgressReport.ssIntroductionCompleted);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssSignOffCompleted", DbType.Boolean, ssENProgressReport.ssSignOffCompleted);
						counter++;
					}
					if (usedFields[19]) {
						if ((ssENProgressReport.ssProgressReportType==0)) {
							sqlCmd.CreateParameter("@ssProgressReportType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssProgressReportType", DbType.Int32, ssENProgressReport.ssProgressReportType);
						}
						counter++;
					}
					if (usedFields[20]) {
						if ((ssENProgressReport.ssAcademicYear== "")) {
							sqlCmd.CreateParameter("@ssAcademicYear", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENProgressReport.ssAcademicYear);
						}
						counter++;
					}
					if (usedFields[21]) {
						if ((ssENProgressReport.ssLogoID== "")) {
							sqlCmd.CreateParameter("@ssLogoID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLogoID", DbType.String, ssENProgressReport.ssLogoID);
						}
						counter++;
					}
					if (usedFields[22]) {
						sqlCmd.CreateParameter("@ssPrintedAndSentDate", DbType.DateTime, ssENProgressReport.ssPrintedAndSentDate);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISCOMPLETE] = [ISCOMPLETE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENProgressReportssId", DbType.Int32, ssENProgressReport.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateProgressReport (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENProgressReportEntity.LocalViewName(null, null) + " (" +
						 " [STUDENT]" +
						 ", [DATE]" +
						 ", [DESCRIPTION]" +
						 ", [ISCOMPLETE]" +
						 ", [COMPLETEDATE]" +
						 ", [COMPLETEBY]" +
						 ", [CREATEDBY]" +
						 ", [CREATEDON]" +
						 ", [INTRODUCTION]" +
						 ", [SIGNOFF]" +
						 ", [INTRODUCTIONVISIBLE]" +
						 ", [SIGNOFFVISIBLE]" +
						 ", [INTRODUCTIONUPDATEDBY]" +
						 ", [INTRODUCTIONUPDATEDON]" +
						 ", [SIGNOFFUPDATEDBY]" +
						 ", [SIGNOFFUPDATEDON]" +
						 ", [INTRODUCTIONCOMPLETED]" +
						 ", [SIGNOFFCOMPLETED]" +
						 ", [PROGRESSREPORTTYPE]" +
						 ", [ACADEMICYEAR]" +
						 ", [LOGOID]" +
						 ", [PRINTEDANDSENTDATE]" +
						 " ) VALUES (" +
						 " @ssStudent" +
						 ", @ssDate" +
						 ", @ssDescription" +
						 ", @ssIsComplete" +
						 ", @ssCompleteDate" +
						 ", @ssCompleteBy" +
						 ", @ssCreatedBy" +
						 ", @ssCreatedOn" +
						 ", @ssIntroduction" +
						 ", @ssSignoff" +
						 ", @ssIntroductionVisible" +
						 ", @ssSignOffVisible" +
						 ", @ssIntroductionUpdatedBy" +
						 ", @ssIntroductionUpdatedOn" +
						 ", @ssSignOffUpdatedBy" +
						 ", @ssSignOffUpdatedOn" +
						 ", @ssIntroductionCompleted" +
						 ", @ssSignOffCompleted" +
						 ", @ssProgressReportType" +
						 ", @ssAcademicYear" +
						 ", @ssLogoID" +
						 ", @ssPrintedAndSentDate" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssStudent", DbType.String, ssENProgressReport.ssStudent);
						insertSqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENProgressReport.ssDate);
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENProgressReport.ssDescription);
						insertSqlCmd.CreateParameter("@ssIsComplete", DbType.Boolean, ssENProgressReport.ssIsComplete);
						insertSqlCmd.CreateParameter("@ssCompleteDate", DbType.DateTime, ssENProgressReport.ssCompleteDate);
						if ((ssENProgressReport.ssCompleteBy==0)) {
							insertSqlCmd.CreateParameter("@ssCompleteBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCompleteBy", DbType.Int32, ssENProgressReport.ssCompleteBy);
						}
						if ((ssENProgressReport.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENProgressReport.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENProgressReport.ssCreatedOn);
						insertSqlCmd.CreateParameter("@ssIntroduction", DbType.String, ssENProgressReport.ssIntroduction);
						insertSqlCmd.CreateParameter("@ssSignoff", DbType.String, ssENProgressReport.ssSignoff);
						insertSqlCmd.CreateParameter("@ssIntroductionVisible", DbType.Boolean, ssENProgressReport.ssIntroductionVisible);
						insertSqlCmd.CreateParameter("@ssSignOffVisible", DbType.Boolean, ssENProgressReport.ssSignOffVisible);
						if ((ssENProgressReport.ssIntroductionUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssIntroductionUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssIntroductionUpdatedBy", DbType.Int32, ssENProgressReport.ssIntroductionUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssIntroductionUpdatedOn", DbType.DateTime, ssENProgressReport.ssIntroductionUpdatedOn);
						if ((ssENProgressReport.ssSignOffUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssSignOffUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSignOffUpdatedBy", DbType.Int32, ssENProgressReport.ssSignOffUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssSignOffUpdatedOn", DbType.DateTime, ssENProgressReport.ssSignOffUpdatedOn);
						insertSqlCmd.CreateParameter("@ssIntroductionCompleted", DbType.Boolean, ssENProgressReport.ssIntroductionCompleted);
						insertSqlCmd.CreateParameter("@ssSignOffCompleted", DbType.Boolean, ssENProgressReport.ssSignOffCompleted);
						if ((ssENProgressReport.ssProgressReportType==0)) {
							insertSqlCmd.CreateParameter("@ssProgressReportType", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssProgressReportType", DbType.Int32, ssENProgressReport.ssProgressReportType);
						}
						if ((ssENProgressReport.ssAcademicYear== "")) {
							insertSqlCmd.CreateParameter("@ssAcademicYear", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENProgressReport.ssAcademicYear);
						}
						if ((ssENProgressReport.ssLogoID== "")) {
							insertSqlCmd.CreateParameter("@ssLogoID", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLogoID", DbType.String, ssENProgressReport.ssLogoID);
						}
						insertSqlCmd.CreateParameter("@ssPrintedAndSentDate", DbType.DateTime, ssENProgressReport.ssPrintedAndSentDate);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateProgressReport", true), typeof(int));
					} else {
						outParamId = ssENProgressReport.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteProgressReport
		/// </summary>

		public static void DeleteProgressReport(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENProgressReportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteProgressReport", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetProgressReport
		/// </summary>

		public static void GetProgressReport(HeContext heContext, int inParamId, out RCProgressReportRecord outParamRecord) {
			outParamRecord = new RCProgressReportRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENT]" +
					 ", [DATE]" +
					 ", [DESCRIPTION]" +
					 ", [ISCOMPLETE]" +
					 ", [COMPLETEDATE]" +
					 ", [COMPLETEBY]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 ", [INTRODUCTION]" +
					 ", [SIGNOFF]" +
					 ", [INTRODUCTIONVISIBLE]" +
					 ", [SIGNOFFVISIBLE]" +
					 ", [INTRODUCTIONUPDATEDBY]" +
					 ", [INTRODUCTIONUPDATEDON]" +
					 ", [SIGNOFFUPDATEDBY]" +
					 ", [SIGNOFFUPDATEDON]" +
					 ", [INTRODUCTIONCOMPLETED]" +
					 ", [SIGNOFFCOMPLETED]" +
					 ", [PROGRESSREPORTTYPE]" +
					 ", [ACADEMICYEAR]" +
					 ", [LOGOID]" +
					 ", [PRINTEDANDSENTDATE]" +
					 " FROM " + ENProgressReportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetProgressReport", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(23, false)
							}
							;
						} else
						throw new DataBaseException(ENProgressReportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetProgressReportForUpdate
		/// </summary>

		public static void GetProgressReportForUpdate(HeContext heContext, int inParamId, out RCProgressReportRecord outParamRecord) {
			outParamRecord = new RCProgressReportRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENT]" +
					 ", [DATE]" +
					 ", [DESCRIPTION]" +
					 ", [ISCOMPLETE]" +
					 ", [COMPLETEDATE]" +
					 ", [COMPLETEBY]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 ", [INTRODUCTION]" +
					 ", [SIGNOFF]" +
					 ", [INTRODUCTIONVISIBLE]" +
					 ", [SIGNOFFVISIBLE]" +
					 ", [INTRODUCTIONUPDATEDBY]" +
					 ", [INTRODUCTIONUPDATEDON]" +
					 ", [SIGNOFFUPDATEDBY]" +
					 ", [SIGNOFFUPDATEDON]" +
					 ", [INTRODUCTIONCOMPLETED]" +
					 ", [SIGNOFFCOMPLETED]" +
					 ", [PROGRESSREPORTTYPE]" +
					 ", [ACADEMICYEAR]" +
					 ", [LOGOID]" +
					 ", [PRINTEDANDSENTDATE]" +
					 "FROM " + ENProgressReportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetProgressReportForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(23, false)
							}
							;
						} else
						throw new DataBaseException(ENProgressReportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateProgressReport
		/// </summary>

		public static void UpdateProgressReport(HeContext heContext, BitArray usedFields, RCProgressReportRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportEntity.eSpaceId;
				ENProgressReportEntityRecord ssENProgressReport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(23, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENProgressReportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENT] = @ssStudent"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATE] = @ssDate"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISCOMPLETE] = @ssIsComplete"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETEDATE] = @ssCompleteDate"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETEBY] = @ssCompleteBy"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTRODUCTION] = @ssIntroduction"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIGNOFF] = @ssSignoff"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTRODUCTIONVISIBLE] = @ssIntroductionVisible"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIGNOFFVISIBLE] = @ssSignOffVisible"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTRODUCTIONUPDATEDBY] = @ssIntroductionUpdatedBy"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTRODUCTIONUPDATEDON] = @ssIntroductionUpdatedOn"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIGNOFFUPDATEDBY] = @ssSignOffUpdatedBy"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIGNOFFUPDATEDON] = @ssSignOffUpdatedOn"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTRODUCTIONCOMPLETED] = @ssIntroductionCompleted"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SIGNOFFCOMPLETED] = @ssSignOffCompleted"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROGRESSREPORTTYPE] = @ssProgressReportType"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACADEMICYEAR] = @ssAcademicYear"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LOGOID] = @ssLogoID"): parameters);
					parameters = (usedFields[22] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PRINTEDANDSENTDATE] = @ssPrintedAndSentDate"): parameters);
					string whereCondition = " WHERE [ID] = @ssENProgressReportssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssStudent", DbType.String, ssENProgressReport.ssStudent);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENProgressReport.ssDate);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENProgressReport.ssDescription);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssIsComplete", DbType.Boolean, ssENProgressReport.ssIsComplete);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssCompleteDate", DbType.DateTime, ssENProgressReport.ssCompleteDate);
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENProgressReport.ssCompleteBy==0)) {
							sqlCmd.CreateParameter("@ssCompleteBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCompleteBy", DbType.Int32, ssENProgressReport.ssCompleteBy);
						}
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENProgressReport.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENProgressReport.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENProgressReport.ssCreatedOn);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssIntroduction", DbType.String, ssENProgressReport.ssIntroduction);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssSignoff", DbType.String, ssENProgressReport.ssSignoff);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssIntroductionVisible", DbType.Boolean, ssENProgressReport.ssIntroductionVisible);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssSignOffVisible", DbType.Boolean, ssENProgressReport.ssSignOffVisible);
						counter++;
					}
					if (usedFields[13]) {
						if ((ssENProgressReport.ssIntroductionUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssIntroductionUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssIntroductionUpdatedBy", DbType.Int32, ssENProgressReport.ssIntroductionUpdatedBy);
						}
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssIntroductionUpdatedOn", DbType.DateTime, ssENProgressReport.ssIntroductionUpdatedOn);
						counter++;
					}
					if (usedFields[15]) {
						if ((ssENProgressReport.ssSignOffUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssSignOffUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSignOffUpdatedBy", DbType.Int32, ssENProgressReport.ssSignOffUpdatedBy);
						}
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssSignOffUpdatedOn", DbType.DateTime, ssENProgressReport.ssSignOffUpdatedOn);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssIntroductionCompleted", DbType.Boolean, ssENProgressReport.ssIntroductionCompleted);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssSignOffCompleted", DbType.Boolean, ssENProgressReport.ssSignOffCompleted);
						counter++;
					}
					if (usedFields[19]) {
						if ((ssENProgressReport.ssProgressReportType==0)) {
							sqlCmd.CreateParameter("@ssProgressReportType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssProgressReportType", DbType.Int32, ssENProgressReport.ssProgressReportType);
						}
						counter++;
					}
					if (usedFields[20]) {
						if ((ssENProgressReport.ssAcademicYear== "")) {
							sqlCmd.CreateParameter("@ssAcademicYear", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENProgressReport.ssAcademicYear);
						}
						counter++;
					}
					if (usedFields[21]) {
						if ((ssENProgressReport.ssLogoID== "")) {
							sqlCmd.CreateParameter("@ssLogoID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLogoID", DbType.String, ssENProgressReport.ssLogoID);
						}
						counter++;
					}
					if (usedFields[22]) {
						sqlCmd.CreateParameter("@ssPrintedAndSentDate", DbType.DateTime, ssENProgressReport.ssPrintedAndSentDate);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISCOMPLETE] = [ISCOMPLETE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENProgressReportssId", DbType.Int32, ssENProgressReport.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateProgressReport", true) <= 0)
					throw new DataBaseException(ENProgressReportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENProgressReport.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("ProgressReport")]
	public class WORCProgressReportRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Student")]
		public string varWSStudent;

		[System.Xml.Serialization.XmlElement("Date", DataType= "date")]
		public DateTime varWSDate;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		[System.Xml.Serialization.XmlElement("IsComplete")]
		public bool varWSIsComplete;

		[System.Xml.Serialization.XmlElement("CompleteDate", DataType= "date")]
		public DateTime varWSCompleteDate;

		[System.Xml.Serialization.XmlElement("CompleteBy")]
		public int varWSCompleteBy;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime varWSCreatedOn;

		[System.Xml.Serialization.XmlElement("Introduction")]
		public string varWSIntroduction;

		[System.Xml.Serialization.XmlElement("Signoff")]
		public string varWSSignoff;

		[System.Xml.Serialization.XmlElement("IntroductionVisible")]
		public bool varWSIntroductionVisible;

		[System.Xml.Serialization.XmlElement("SignOffVisible")]
		public bool varWSSignOffVisible;

		[System.Xml.Serialization.XmlElement("IntroductionUpdatedBy")]
		public int varWSIntroductionUpdatedBy;

		[System.Xml.Serialization.XmlElement("IntroductionUpdatedOn")]
		public DateTime varWSIntroductionUpdatedOn;

		[System.Xml.Serialization.XmlElement("SignOffUpdatedBy")]
		public int varWSSignOffUpdatedBy;

		[System.Xml.Serialization.XmlElement("SignOffUpdatedOn")]
		public DateTime varWSSignOffUpdatedOn;

		[System.Xml.Serialization.XmlElement("IntroductionCompleted")]
		public bool varWSIntroductionCompleted;

		[System.Xml.Serialization.XmlElement("SignOffCompleted")]
		public bool varWSSignOffCompleted;

		[System.Xml.Serialization.XmlElement("ProgressReportType")]
		public int varWSProgressReportType;

		[System.Xml.Serialization.XmlElement("AcademicYear")]
		public string varWSAcademicYear;

		[System.Xml.Serialization.XmlElement("LogoID")]
		public string varWSLogoID;

		[System.Xml.Serialization.XmlElement("PrintedAndSentDate", DataType= "date")]
		public DateTime varWSPrintedAndSentDate;

		public WORCProgressReportRecord() {
			varWSId = (int) 0;
			varWSStudent = (string) "";
			varWSDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSDescription = (string) "";
			varWSIsComplete = (bool) false;
			varWSCompleteDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCompleteBy = (int) 0;
			varWSCreatedBy = (int) 0;
			varWSCreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSIntroduction = (string) "";
			varWSSignoff = (string) "";
			varWSIntroductionVisible = (bool) false;
			varWSSignOffVisible = (bool) false;
			varWSIntroductionUpdatedBy = (int) 0;
			varWSIntroductionUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSSignOffUpdatedBy = (int) 0;
			varWSSignOffUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSIntroductionCompleted = (bool) false;
			varWSSignOffCompleted = (bool) false;
			varWSProgressReportType = (int) 0;
			varWSAcademicYear = (string) "";
			varWSLogoID = (string) "";
			varWSPrintedAndSentDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCProgressReportRecord(ENProgressReportEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudent = BaseAppUtils.RemoveControlChars(r.ssStudent);
			varWSDate = (DateTime) r.ssDate;
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
			varWSIsComplete = (bool) r.ssIsComplete;
			varWSCompleteDate = (DateTime) r.ssCompleteDate;
			varWSCompleteBy = (int) r.ssCompleteBy;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSCreatedOn = (DateTime) r.ssCreatedOn;
			varWSIntroduction = BaseAppUtils.RemoveControlChars(r.ssIntroduction);
			varWSSignoff = BaseAppUtils.RemoveControlChars(r.ssSignoff);
			varWSIntroductionVisible = (bool) r.ssIntroductionVisible;
			varWSSignOffVisible = (bool) r.ssSignOffVisible;
			varWSIntroductionUpdatedBy = (int) r.ssIntroductionUpdatedBy;
			varWSIntroductionUpdatedOn = (DateTime) r.ssIntroductionUpdatedOn;
			varWSSignOffUpdatedBy = (int) r.ssSignOffUpdatedBy;
			varWSSignOffUpdatedOn = (DateTime) r.ssSignOffUpdatedOn;
			varWSIntroductionCompleted = (bool) r.ssIntroductionCompleted;
			varWSSignOffCompleted = (bool) r.ssSignOffCompleted;
			varWSProgressReportType = (int) r.ssProgressReportType;
			varWSAcademicYear = BaseAppUtils.RemoveControlChars(r.ssAcademicYear);
			varWSLogoID = BaseAppUtils.RemoveControlChars(r.ssLogoID);
			varWSPrintedAndSentDate = (DateTime) r.ssPrintedAndSentDate;
		}

		public static RLProgressReportList ToRecordList(WORCProgressReportRecord[] array) {
			RLProgressReportList rl = new RLProgressReportList();
			if (array != null) {
				foreach(WORCProgressReportRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCProgressReportRecord[] FromRecordList(RLProgressReportList rl) {
			WORCProgressReportRecord[] array = new WORCProgressReportRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCProgressReportRecord {
		public static implicit operator WORCProgressReportRecord(RCProgressReportRecord r) {
			return new WORCProgressReportRecord(r.ssENProgressReport);
		}

		public static implicit operator RCProgressReportRecord(WORCProgressReportRecord w) {
			RCProgressReportRecord r = new RCProgressReportRecord("");
			if (w != null) {
				r.ssENProgressReport = w;
			}
			return r;
		}

	}

	partial struct ENProgressReportEntityRecord {
		public static implicit operator WORCProgressReportRecord(ENProgressReportEntityRecord r) {
			return new WORCProgressReportRecord(r);
		}

		public static implicit operator ENProgressReportEntityRecord(WORCProgressReportRecord w) {
			ENProgressReportEntityRecord r = new ENProgressReportEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudent = (string) w.varWSStudent;
				r.ssDate = (DateTime) w.varWSDate;
				r.ssDescription = ((string) w.varWSDescription ?? "");
				r.ssIsComplete = (bool) w.varWSIsComplete;
				r.ssCompleteDate = (DateTime) w.varWSCompleteDate;
				r.ssCompleteBy = (int) w.varWSCompleteBy;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssCreatedOn = (DateTime) w.varWSCreatedOn;
				r.ssIntroduction = ((string) w.varWSIntroduction ?? "");
				r.ssSignoff = ((string) w.varWSSignoff ?? "");
				r.ssIntroductionVisible = (bool) w.varWSIntroductionVisible;
				r.ssSignOffVisible = (bool) w.varWSSignOffVisible;
				r.ssIntroductionUpdatedBy = (int) w.varWSIntroductionUpdatedBy;
				r.ssIntroductionUpdatedOn = (DateTime) w.varWSIntroductionUpdatedOn;
				r.ssSignOffUpdatedBy = (int) w.varWSSignOffUpdatedBy;
				r.ssSignOffUpdatedOn = (DateTime) w.varWSSignOffUpdatedOn;
				r.ssIntroductionCompleted = (bool) w.varWSIntroductionCompleted;
				r.ssSignOffCompleted = (bool) w.varWSSignOffCompleted;
				r.ssProgressReportType = (int) w.varWSProgressReportType;
				r.ssAcademicYear = (string) w.varWSAcademicYear;
				r.ssLogoID = (string) w.varWSLogoID;
				r.ssPrintedAndSentDate = (DateTime) w.varWSPrintedAndSentDate;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLProgressReportRecordList {
		public WORCProgressReportRecord[] Array;


		public WORLProgressReportRecordList(WORCProgressReportRecord[] r) {
			if (r == null)
			Array = new WORCProgressReportRecord[0];
			else
			Array = r;
		}
		public WORLProgressReportRecordList() {
			Array = new WORCProgressReportRecord[0];
		}

		public WORLProgressReportRecordList(RLProgressReportRecordList rl) {
			rl=(RLProgressReportRecordList) rl.Duplicate();
			Array = new WORCProgressReportRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCProgressReportRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLProgressReportRecordList {
		public static implicit operator RLProgressReportRecordList(WORCProgressReportRecord[] array) {
			RLProgressReportRecordList rl = new RLProgressReportRecordList();
			if (array != null) {
				foreach(WORCProgressReportRecord val in array) {
					rl.Append((RCProgressReportRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCProgressReportRecord[](RLProgressReportRecordList rl) {
			WORCProgressReportRecord[] array = new WORCProgressReportRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCProgressReportRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLProgressReportRecordList {
		public static implicit operator RLProgressReportRecordList(WORLProgressReportRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLProgressReportRecordList(RLProgressReportRecordList rl) {
			return new WORLProgressReportRecordList(rl);
		}
		public static implicit operator WORCProgressReportRecord[](WORLProgressReportRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLProgressReportRecordList(WORCProgressReportRecord[] array) {
			return new WORLProgressReportRecordList(array);
		}
	}
}

