/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENTabsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceThemeProvider.ENTabsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceThemeProvider.ENTabsEntity.eSpaceId;
	} // ENTabsEntity

	/// <summary>
	/// Entity <code>ENTabsEntityRecord</code> that represents the Service Studio entity <code>Tabs</code>
	///  <p> Description: Defines which tab should be active.</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Tabs", "fKGtdpMWfUOABMBo1SKpWg", "VofHcHeK2kSPL0JlVdburg", 0, "OSUSR_o9a_Tabs", "")]
	[Serializable()]
	public partial struct ENTabsEntityRecord: ISerializable, ITypedRecord<ENTabsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("VofHcHeK2kSPL0JlVdburg*0zl2SgqhNkCHy2nx8mUVLg");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("VofHcHeK2kSPL0JlVdburg*Ynwrux2fpEWfLavNporsKQ");

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(2, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssOrder = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENTabsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(2, true);
			OptimizedAttributes = new BitArray(2, false);
			_ssId = 0;
			_ssOrder = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Tabs.Id", 0);
			ssOrder = r.ReadInteger(index++, "Tabs.Order", 0);
			ChangedAttributes = new BitArray(2, false);
			OptimizedAttributes = new BitArray(2, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENTabsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENTabsEntityRecord a, ENTabsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssOrder != b.ssOrder) return false;
			return true;
		}

		public static bool operator != (ENTabsEntityRecord a, ENTabsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENTabsEntityRecord)) return false;
			return (this == (ENTabsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssOrder.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENTabsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(2, true);
			OptimizedAttributes = new BitArray(2, false);
			_ssId = 0;
			_ssOrder = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssOrder = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENTabsEntityRecord Duplicate() {
			ENTabsEntityRecord t;
			t._ssId = this._ssId;
			t._ssOrder = this._ssOrder;
			t.ChangedAttributes = new BitArray(2);
			t.OptimizedAttributes = new BitArray(2);
			for (int i = 0; i < 2; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[1];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[1];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdOrder) {
				return ssOrder;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(2);
			OptimizedAttributes = new BitArray(2);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdOrder);
		}
	} // ENTabsEntityRecord
	/// <summary>
	/// Static Entity <code>ENTabsEntity</code> gets the values for this static entity records in runtime
	///  <code>Tabs</code>
	/// </summary>
	partial class ENTabsEntity {


		static ENTabsEntity() {
			ENTabsEntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENTabsEntityRecord GetRecordById(int id) {
			return (ENTabsEntityRecord) RsseSpaceThemeProvider.ENTabsEntity.GetRecordById(id);
		}

		public static ENTabsEntityRecord GetRecordByName(string name) {
			return (ENTabsEntityRecord) RsseSpaceThemeProvider.ENTabsEntity.GetRecordByName(name);
		}

		public static ENTabsEntityRecord GetRecordByKey(ObjectKey key) {
			return (ENTabsEntityRecord) RsseSpaceThemeProvider.ENTabsEntity.GetRecordByKey(key);
		}
	} // ENTabsEntity;
	/// <summary>
	/// Structure <code>RCTabsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTabsRecord: ISerializable, ITypedRecord<RCTabsRecord> {
		private static readonly GlobalObjectKey IdTabs = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*OaDKetrjsWRt4PiddBLDUQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Tabs")]
		public ENTabsEntityRecord ssENTabs;


		public static implicit operator ENTabsEntityRecord(RCTabsRecord r) {
			return r.ssENTabs;
		}

		public static implicit operator RCTabsRecord(ENTabsEntityRecord r) {
			RCTabsRecord res = new RCTabsRecord(null);
			res.ssENTabs = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENTabs.ChangedAttributes = value;
			}
			get {
				return ssENTabs.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCTabsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENTabs = new ENTabsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(2, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENTabs.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENTabs.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENTabs.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENTabs.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTabsRecord r) {
			this = r;
		}


		public static bool operator == (RCTabsRecord a, RCTabsRecord b) {
			if (a.ssENTabs != b.ssENTabs) return false;
			return true;
		}

		public static bool operator != (RCTabsRecord a, RCTabsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTabsRecord)) return false;
			return (this == (RCTabsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENTabs.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTabsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENTabs = new ENTabsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENTabs = (ENTabsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENTabs.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENTabs.InternalRecursiveSave();
		}


		public RCTabsRecord Duplicate() {
			RCTabsRecord t;
			t.ssENTabs = (ENTabsEntityRecord) this.ssENTabs.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENTabs.ToXml(this, recordElem, "Tabs", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "tabs") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Tabs")) variable.Value = ssENTabs; else variable.Optimized = true;
				variable.SetFieldName("tabs");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENTabs.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENTabs.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTabs) {
				return ssENTabs;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENTabs.FillFromOther((IRecord) other.AttributeGet(IdTabs));
		}
	} // RCTabsRecord
	/// <summary>
	/// RecordList type <code>RLTabsRecordList</code> that represents a record list of <code>Tabs</code>
	/// </summary>
	[Serializable()]
	public partial class RLTabsRecordList: GenericRecordList<RCTabsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTabsRecord GetElementDefaultValue() {
			return new RCTabsRecord("");
		}

		public T[] ToArray<T>(Func<RCTabsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTabsRecordList recordlist, Func<RCTabsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTabsRecordList ToList<T>(T[] array, Func <T, RCTabsRecord> converter) {
			RLTabsRecordList result = new RLTabsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTabsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTabsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTabsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTabsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(2, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTabsRecord> NewList() {
			return new RLTabsRecordList();
		}


	} // RLTabsRecordList

	/// <summary>
	/// RecordList type <code>RLTabsList</code> that represents a record list of <code>Integer,
	///  Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLTabsList: GenericRecordList<ENTabsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENTabsEntityRecord GetElementDefaultValue() {
			return new ENTabsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENTabsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTabsList recordlist, Func<ENTabsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTabsList ToList<T>(T[] array, Func <T, ENTabsEntityRecord> converter) {
			RLTabsList result = new RLTabsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTabsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTabsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTabsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTabsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENTabsEntityRecord> NewList() {
			return new RLTabsList();
		}


	} // RLTabsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetTabs
		/// </summary>

		public static void GetTabs(HeContext heContext, int inParamId, out RCTabsRecord outParamRecord) {
			outParamRecord = new RCTabsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTabsEntity.eSpaceId;
				try {
					outParamRecord = ENTabsEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [ID]" +
						 ", [ORDER]" +
						 " FROM " + ENTabsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [ID] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetTabs", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENTabsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Tabs")]
	public class WORCTabsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		public WORCTabsRecord() {
			varWSId = (int) 0;
			varWSOrder = (int) 0;
		}

		public WORCTabsRecord(ENTabsEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSOrder = (int) r.ssOrder;
		}

		public static RLTabsList ToRecordList(WORCTabsRecord[] array) {
			RLTabsList rl = new RLTabsList();
			if (array != null) {
				foreach(WORCTabsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCTabsRecord[] FromRecordList(RLTabsList rl) {
			WORCTabsRecord[] array = new WORCTabsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCTabsRecord {
		public static implicit operator WORCTabsRecord(RCTabsRecord r) {
			return new WORCTabsRecord(r.ssENTabs);
		}

		public static implicit operator RCTabsRecord(WORCTabsRecord w) {
			RCTabsRecord r = new RCTabsRecord("");
			if (w != null) {
				r.ssENTabs = w;
			}
			return r;
		}

	}

	partial struct ENTabsEntityRecord {
		public static implicit operator WORCTabsRecord(ENTabsEntityRecord r) {
			return new WORCTabsRecord(r);
		}

		public static implicit operator ENTabsEntityRecord(WORCTabsRecord w) {
			ENTabsEntityRecord r = new ENTabsEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssOrder = (int) w.varWSOrder;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTabsRecordList {
		public WORCTabsRecord[] Array;


		public WORLTabsRecordList(WORCTabsRecord[] r) {
			if (r == null)
			Array = new WORCTabsRecord[0];
			else
			Array = r;
		}
		public WORLTabsRecordList() {
			Array = new WORCTabsRecord[0];
		}

		public WORLTabsRecordList(RLTabsRecordList rl) {
			rl=(RLTabsRecordList) rl.Duplicate();
			Array = new WORCTabsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCTabsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTabsRecordList {
		public static implicit operator RLTabsRecordList(WORCTabsRecord[] array) {
			RLTabsRecordList rl = new RLTabsRecordList();
			if (array != null) {
				foreach(WORCTabsRecord val in array) {
					rl.Append((RCTabsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTabsRecord[](RLTabsRecordList rl) {
			WORCTabsRecord[] array = new WORCTabsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCTabsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTabsRecordList {
		public static implicit operator RLTabsRecordList(WORLTabsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLTabsRecordList(RLTabsRecordList rl) {
			return new WORLTabsRecordList(rl);
		}
		public static implicit operator WORCTabsRecord[](WORLTabsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTabsRecordList(WORCTabsRecord[] array) {
			return new WORLTabsRecordList(array);
		}
	}
}

