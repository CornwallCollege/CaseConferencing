/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENCCSessionCurriculumLeadEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENCCSessionCurriculumLeadEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENCCSessionCurriculumLeadEntity.eSpaceId;
	} // ENCCSessionCurriculumLeadEntity

	/// <summary>
	/// Entity <code>ENCCSessionCurriculumLeadEntityRecord</code> that represents the Service Studio entity
	///  <code>CCSessionCurriculumLead</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("CCSessionCurriculumLead", "dZtRd+w+1UW75m1zaCFv8A", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_CCSessionCurriculumLead", "")]
	[Serializable()]
	public partial struct ENCCSessionCurriculumLeadEntityRecord: ISerializable, ITypedRecord<ENCCSessionCurriculumLeadEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*AaZY1gpJkEm5Xp6VpiXM_w");
		private static readonly GlobalObjectKey IdSessionId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*1+8e7ZK_F0KfCCzN1gFJrA");
		private static readonly GlobalObjectKey IdCurriculumLead = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*JzPoKqjynUamV4yVj5iw7Q");
		private static readonly GlobalObjectKey IdNotes = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ltpkHMJ4wEaP60eo3BsX7g");
		private static readonly GlobalObjectKey IdCreatedAt = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*4Y2p_0iPWUC9gFKZJUJgVg");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*L6flOmzTVkiCojiVPmL8+Q");
		private static readonly GlobalObjectKey IdEndDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*2MvWnZ0_50mAGgWPUDJEcg");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SESSIONID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SessionId")]
		private int _ssSessionId;
		public int ssSessionId {
			get {
				return _ssSessionId;
			}
			set {
				if ((_ssSessionId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssSessionId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CURRICULUMLEAD", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CurriculumLead")]
		private int _ssCurriculumLead;
		public int ssCurriculumLead {
			get {
				return _ssCurriculumLead;
			}
			set {
				if ((_ssCurriculumLead!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssCurriculumLead = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NOTES", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("Notes")]
		private string _ssNotes;
		public string ssNotes {
			get {
				return _ssNotes;
			}
			set {
				if ((_ssNotes!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssNotes = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDAT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedAt")]
		private DateTime _ssCreatedAt;
		public DateTime ssCreatedAt {
			get {
				return _ssCreatedAt;
			}
			set {
				if ((_ssCreatedAt!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCreatedAt = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENDDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("EndDate")]
		private DateTime _ssEndDate;
		public DateTime ssEndDate {
			get {
				return _ssEndDate;
			}
			set {
				if ((_ssEndDate!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssEndDate = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENCCSessionCurriculumLeadEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssSessionId = 0;
			_ssCurriculumLead = 0;
			_ssNotes = "";
			_ssCreatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssEndDate = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "CCSessionCurriculumLead.Id", 0);
			ssSessionId = r.ReadEntityReference(index++, "CCSessionCurriculumLead.SessionId", 0);
			ssCurriculumLead = r.ReadEntityReference(index++, "CCSessionCurriculumLead.CurriculumLead", 0);
			ssNotes = r.ReadText(index++, "CCSessionCurriculumLead.Notes", "");
			ssCreatedAt = r.ReadDateTime(index++, "CCSessionCurriculumLead.CreatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "CCSessionCurriculumLead.CreatedBy", 0);
			ssEndDate = r.ReadDateTime(index++, "CCSessionCurriculumLead.EndDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENCCSessionCurriculumLeadEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENCCSessionCurriculumLeadEntityRecord a, ENCCSessionCurriculumLeadEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssSessionId != b.ssSessionId) return false;
			if (a.ssCurriculumLead != b.ssCurriculumLead) return false;
			if (a.ssNotes != b.ssNotes) return false;
			if (a.ssCreatedAt != b.ssCreatedAt) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssEndDate != b.ssEndDate) return false;
			return true;
		}

		public static bool operator != (ENCCSessionCurriculumLeadEntityRecord a, ENCCSessionCurriculumLeadEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENCCSessionCurriculumLeadEntityRecord)) return false;
			return (this == (ENCCSessionCurriculumLeadEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssSessionId.GetHashCode()
				^ ssCurriculumLead.GetHashCode()
				^ ssNotes.GetHashCode()
				^ ssCreatedAt.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssEndDate.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENCCSessionCurriculumLeadEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssSessionId = 0;
			_ssCurriculumLead = 0;
			_ssNotes = "";
			_ssCreatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssEndDate = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssSessionId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssCurriculumLead = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssNotes = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCreatedAt = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssEndDate = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENCCSessionCurriculumLeadEntityRecord Duplicate() {
			ENCCSessionCurriculumLeadEntityRecord t;
			t._ssId = this._ssId;
			t._ssSessionId = this._ssSessionId;
			t._ssCurriculumLead = this._ssCurriculumLead;
			t._ssNotes = this._ssNotes;
			t._ssCreatedAt = this._ssCreatedAt;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssEndDate = this._ssEndDate;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SessionId")) VarValue.AppendAttribute(recordElem, "SessionId", ssSessionId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SessionId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurriculumLead")) VarValue.AppendAttribute(recordElem, "CurriculumLead", ssCurriculumLead, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CurriculumLead");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Notes")) VarValue.AppendAttribute(recordElem, "Notes", ssNotes, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Notes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedAt")) VarValue.AppendAttribute(recordElem, "CreatedAt", ssCreatedAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EndDate")) VarValue.AppendAttribute(recordElem, "EndDate", ssEndDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "EndDate");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "sessionid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SessionId")) variable.Value = ssSessionId; else variable.Optimized = true;
			} else if (head == "curriculumlead") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurriculumLead")) variable.Value = ssCurriculumLead; else variable.Optimized = true;
			} else if (head == "notes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Notes")) variable.Value = ssNotes; else variable.Optimized = true;
			} else if (head == "createdat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedAt")) variable.Value = ssCreatedAt; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "enddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EndDate")) variable.Value = ssEndDate; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdSessionId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdCurriculumLead)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdNotes)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCreatedAt)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdEndDate)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdSessionId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdCurriculumLead)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdNotes)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCreatedAt)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdEndDate)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdSessionId) {
				return ssSessionId;
			} else if (key == IdCurriculumLead) {
				return ssCurriculumLead;
			} else if (key == IdNotes) {
				return ssNotes;
			} else if (key == IdCreatedAt) {
				return ssCreatedAt;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdEndDate) {
				return ssEndDate;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssSessionId = (int) other.AttributeGet(IdSessionId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdSessionId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdSessionId);
			ssCurriculumLead = (int) other.AttributeGet(IdCurriculumLead);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdCurriculumLead);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdCurriculumLead);
			ssNotes = (string) other.AttributeGet(IdNotes);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdNotes);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdNotes);
			ssCreatedAt = (DateTime) other.AttributeGet(IdCreatedAt);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCreatedAt);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCreatedAt);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCreatedBy);
			ssEndDate = (DateTime) other.AttributeGet(IdEndDate);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdEndDate);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdEndDate);
		}
	} // ENCCSessionCurriculumLeadEntityRecord
	/// <summary>
	/// Structure <code>RCCCSessionCurriculumLeadRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCCSessionCurriculumLeadRecord: ISerializable, ITypedRecord<RCCCSessionCurriculumLeadRecord> {
		private static readonly GlobalObjectKey IdCCSessionCurriculumLead = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*mZasj6V3KC_lipHEcbpByQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CCSessionCurriculumLead")]
		public ENCCSessionCurriculumLeadEntityRecord ssENCCSessionCurriculumLead;


		public static implicit operator ENCCSessionCurriculumLeadEntityRecord(RCCCSessionCurriculumLeadRecord r) {
			return r.ssENCCSessionCurriculumLead;
		}

		public static implicit operator RCCCSessionCurriculumLeadRecord(ENCCSessionCurriculumLeadEntityRecord r) {
			RCCCSessionCurriculumLeadRecord res = new RCCCSessionCurriculumLeadRecord(null);
			res.ssENCCSessionCurriculumLead = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENCCSessionCurriculumLead.ChangedAttributes = value;
			}
			get {
				return ssENCCSessionCurriculumLead.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCCCSessionCurriculumLeadRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCCSessionCurriculumLead = new ENCCSessionCurriculumLeadEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCCSessionCurriculumLead.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENCCSessionCurriculumLead.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENCCSessionCurriculumLead.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCCSessionCurriculumLead.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCCSessionCurriculumLeadRecord r) {
			this = r;
		}


		public static bool operator == (RCCCSessionCurriculumLeadRecord a, RCCCSessionCurriculumLeadRecord b) {
			if (a.ssENCCSessionCurriculumLead != b.ssENCCSessionCurriculumLead) return false;
			return true;
		}

		public static bool operator != (RCCCSessionCurriculumLeadRecord a, RCCCSessionCurriculumLeadRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCCSessionCurriculumLeadRecord)) return false;
			return (this == (RCCCSessionCurriculumLeadRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCCSessionCurriculumLead.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCCSessionCurriculumLeadRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCCSessionCurriculumLead = new ENCCSessionCurriculumLeadEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCCSessionCurriculumLead = (ENCCSessionCurriculumLeadEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENCCSessionCurriculumLead.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCCSessionCurriculumLead.InternalRecursiveSave();
		}


		public RCCCSessionCurriculumLeadRecord Duplicate() {
			RCCCSessionCurriculumLeadRecord t;
			t.ssENCCSessionCurriculumLead = (ENCCSessionCurriculumLeadEntityRecord) this.ssENCCSessionCurriculumLead.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCCSessionCurriculumLead.ToXml(this, recordElem, "CCSessionCurriculumLead", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "ccsessioncurriculumlead") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CCSessionCurriculumLead")) variable.Value = ssENCCSessionCurriculumLead; else variable.Optimized = true;
				variable.SetFieldName("ccsessioncurriculumlead");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENCCSessionCurriculumLead.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENCCSessionCurriculumLead.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCCSessionCurriculumLead) {
				return ssENCCSessionCurriculumLead;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCCSessionCurriculumLead.FillFromOther((IRecord) other.AttributeGet(IdCCSessionCurriculumLead));
		}
	} // RCCCSessionCurriculumLeadRecord
	/// <summary>
	/// RecordList type <code>RLCCSessionCurriculumLeadRecordList</code> that represents a record list of
	///  <code>CCSessionCurriculumLead</code>
	/// </summary>
	[Serializable()]
	public partial class RLCCSessionCurriculumLeadRecordList: GenericRecordList<RCCCSessionCurriculumLeadRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCCSessionCurriculumLeadRecord GetElementDefaultValue() {
			return new RCCCSessionCurriculumLeadRecord("");
		}

		public T[] ToArray<T>(Func<RCCCSessionCurriculumLeadRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCCSessionCurriculumLeadRecordList recordlist, Func<RCCCSessionCurriculumLeadRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCCSessionCurriculumLeadRecordList ToList<T>(T[] array, Func <T, RCCCSessionCurriculumLeadRecord> converter) {
			RLCCSessionCurriculumLeadRecordList result = new RLCCSessionCurriculumLeadRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCCSessionCurriculumLeadRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionCurriculumLeadRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionCurriculumLeadRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCCSessionCurriculumLeadRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCCSessionCurriculumLeadRecord> NewList() {
			return new RLCCSessionCurriculumLeadRecordList();
		}


	} // RLCCSessionCurriculumLeadRecordList

	/// <summary>
	/// RecordList type <code>RLCCSessionCurriculumLeadList</code> that represents a record list of
	///  <code>CurriculumLeadIdentifier, UserIdentifier, Text, DateTime, DateTime, Integer
	/// , CCSessionIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLCCSessionCurriculumLeadList: GenericRecordList<ENCCSessionCurriculumLeadEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENCCSessionCurriculumLeadEntityRecord GetElementDefaultValue() {
			return new ENCCSessionCurriculumLeadEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENCCSessionCurriculumLeadEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCCSessionCurriculumLeadList recordlist, Func<ENCCSessionCurriculumLeadEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCCSessionCurriculumLeadList ToList<T>(T[] array, Func <T, ENCCSessionCurriculumLeadEntityRecord> converter) {
			RLCCSessionCurriculumLeadList result = new RLCCSessionCurriculumLeadList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCCSessionCurriculumLeadList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionCurriculumLeadList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCCSessionCurriculumLeadList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCCSessionCurriculumLeadList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENCCSessionCurriculumLeadEntityRecord> NewList() {
			return new RLCCSessionCurriculumLeadList();
		}


	} // RLCCSessionCurriculumLeadList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateCCSessionCurriculumLead
		/// </summary>

		public static void CreateCCSessionCurriculumLead(HeContext heContext, RCCCSessionCurriculumLeadRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionCurriculumLeadEntity.eSpaceId;
				ENCCSessionCurriculumLeadEntityRecord ssENCCSessionCurriculumLead = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENCCSessionCurriculumLeadEntity.LocalViewName(null, null) + " (" +
					 " [SESSIONID]" +
					 ", [CURRICULUMLEAD]" +
					 ", [NOTES]" +
					 ", [CREATEDAT]" +
					 ", [CREATEDBY]" +
					 ", [ENDDATE]" +
					 " ) VALUES (" +
					 " @ssSessionId" +
					 ", @ssCurriculumLead" +
					 ", @ssNotes" +
					 ", @ssCreatedAt" +
					 ", @ssCreatedBy" +
					 ", @ssEndDate" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENCCSessionCurriculumLead.ssSessionId==0)) {
						insertSqlCmd.CreateParameter("@ssSessionId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSessionId", DbType.Int32, ssENCCSessionCurriculumLead.ssSessionId);
					}
					if ((ssENCCSessionCurriculumLead.ssCurriculumLead==0)) {
						insertSqlCmd.CreateParameter("@ssCurriculumLead", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCurriculumLead", DbType.Int32, ssENCCSessionCurriculumLead.ssCurriculumLead);
					}
					insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENCCSessionCurriculumLead.ssNotes);
					insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENCCSessionCurriculumLead.ssCreatedAt);
					if ((ssENCCSessionCurriculumLead.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCCSessionCurriculumLead.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENCCSessionCurriculumLead.ssEndDate);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateCCSessionCurriculumLead", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateCCSessionCurriculumLead
		/// </summary>

		public static void CreateOrUpdateCCSessionCurriculumLead(HeContext heContext, BitArray usedFields, RCCCSessionCurriculumLeadRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionCurriculumLeadEntity.eSpaceId;
				ENCCSessionCurriculumLeadEntityRecord ssENCCSessionCurriculumLead = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCCSessionCurriculumLeadEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SESSIONID] = @ssSessionId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRICULUMLEAD] = @ssCurriculumLead"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENDDATE] = @ssEndDate"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCCSessionCurriculumLeadssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCCSessionCurriculumLead.ssSessionId==0)) {
							sqlCmd.CreateParameter("@ssSessionId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSessionId", DbType.Int32, ssENCCSessionCurriculumLead.ssSessionId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCCSessionCurriculumLead.ssCurriculumLead==0)) {
							sqlCmd.CreateParameter("@ssCurriculumLead", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCurriculumLead", DbType.Int32, ssENCCSessionCurriculumLead.ssCurriculumLead);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENCCSessionCurriculumLead.ssNotes);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENCCSessionCurriculumLead.ssCreatedAt);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENCCSessionCurriculumLead.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCCSessionCurriculumLead.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENCCSessionCurriculumLead.ssEndDate);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDAT] = [CREATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCCSessionCurriculumLeadssId", DbType.Int32, ssENCCSessionCurriculumLead.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateCCSessionCurriculumLead (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENCCSessionCurriculumLeadEntity.LocalViewName(null, null) + " (" +
						 " [SESSIONID]" +
						 ", [CURRICULUMLEAD]" +
						 ", [NOTES]" +
						 ", [CREATEDAT]" +
						 ", [CREATEDBY]" +
						 ", [ENDDATE]" +
						 " ) VALUES (" +
						 " @ssSessionId" +
						 ", @ssCurriculumLead" +
						 ", @ssNotes" +
						 ", @ssCreatedAt" +
						 ", @ssCreatedBy" +
						 ", @ssEndDate" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENCCSessionCurriculumLead.ssSessionId==0)) {
							insertSqlCmd.CreateParameter("@ssSessionId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSessionId", DbType.Int32, ssENCCSessionCurriculumLead.ssSessionId);
						}
						if ((ssENCCSessionCurriculumLead.ssCurriculumLead==0)) {
							insertSqlCmd.CreateParameter("@ssCurriculumLead", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCurriculumLead", DbType.Int32, ssENCCSessionCurriculumLead.ssCurriculumLead);
						}
						insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENCCSessionCurriculumLead.ssNotes);
						insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENCCSessionCurriculumLead.ssCreatedAt);
						if ((ssENCCSessionCurriculumLead.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCCSessionCurriculumLead.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENCCSessionCurriculumLead.ssEndDate);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateCCSessionCurriculumLead", true), typeof(int));
					} else {
						outParamId = ssENCCSessionCurriculumLead.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteCCSessionCurriculumLead
		/// </summary>

		public static void DeleteCCSessionCurriculumLead(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionCurriculumLeadEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENCCSessionCurriculumLeadEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteCCSessionCurriculumLead", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCCSessionCurriculumLead
		/// </summary>

		public static void GetCCSessionCurriculumLead(HeContext heContext, int inParamId, out RCCCSessionCurriculumLeadRecord outParamRecord) {
			outParamRecord = new RCCCSessionCurriculumLeadRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionCurriculumLeadEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [SESSIONID]" +
					 ", [CURRICULUMLEAD]" +
					 ", [NOTES]" +
					 ", [CREATEDAT]" +
					 ", [CREATEDBY]" +
					 ", [ENDDATE]" +
					 " FROM " + ENCCSessionCurriculumLeadEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCCSessionCurriculumLead", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENCCSessionCurriculumLeadEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCCSessionCurriculumLeadForUpdate
		/// </summary>

		public static void GetCCSessionCurriculumLeadForUpdate(HeContext heContext, int inParamId, out RCCCSessionCurriculumLeadRecord outParamRecord) {
			outParamRecord = new RCCCSessionCurriculumLeadRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionCurriculumLeadEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [SESSIONID]" +
					 ", [CURRICULUMLEAD]" +
					 ", [NOTES]" +
					 ", [CREATEDAT]" +
					 ", [CREATEDBY]" +
					 ", [ENDDATE]" +
					 "FROM " + ENCCSessionCurriculumLeadEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCCSessionCurriculumLeadForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENCCSessionCurriculumLeadEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateCCSessionCurriculumLead
		/// </summary>

		public static void UpdateCCSessionCurriculumLead(HeContext heContext, BitArray usedFields, RCCCSessionCurriculumLeadRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCCSessionCurriculumLeadEntity.eSpaceId;
				ENCCSessionCurriculumLeadEntityRecord ssENCCSessionCurriculumLead = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCCSessionCurriculumLeadEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SESSIONID] = @ssSessionId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRICULUMLEAD] = @ssCurriculumLead"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENDDATE] = @ssEndDate"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCCSessionCurriculumLeadssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCCSessionCurriculumLead.ssSessionId==0)) {
							sqlCmd.CreateParameter("@ssSessionId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSessionId", DbType.Int32, ssENCCSessionCurriculumLead.ssSessionId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCCSessionCurriculumLead.ssCurriculumLead==0)) {
							sqlCmd.CreateParameter("@ssCurriculumLead", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCurriculumLead", DbType.Int32, ssENCCSessionCurriculumLead.ssCurriculumLead);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENCCSessionCurriculumLead.ssNotes);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENCCSessionCurriculumLead.ssCreatedAt);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENCCSessionCurriculumLead.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCCSessionCurriculumLead.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENCCSessionCurriculumLead.ssEndDate);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDAT] = [CREATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCCSessionCurriculumLeadssId", DbType.Int32, ssENCCSessionCurriculumLead.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateCCSessionCurriculumLead", true) <= 0)
					throw new DataBaseException(ENCCSessionCurriculumLeadEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENCCSessionCurriculumLead.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("CCSessionCurriculumLead")]
	public class WORCCCSessionCurriculumLeadRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("SessionId")]
		public int varWSSessionId;

		[System.Xml.Serialization.XmlElement("CurriculumLead")]
		public int varWSCurriculumLead;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string varWSNotes;

		[System.Xml.Serialization.XmlElement("CreatedAt")]
		public DateTime varWSCreatedAt;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("EndDate")]
		public DateTime varWSEndDate;

		public WORCCCSessionCurriculumLeadRecord() {
			varWSId = (int) 0;
			varWSSessionId = (int) 0;
			varWSCurriculumLead = (int) 0;
			varWSNotes = (string) "";
			varWSCreatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
			varWSEndDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCCCSessionCurriculumLeadRecord(ENCCSessionCurriculumLeadEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSSessionId = (int) r.ssSessionId;
			varWSCurriculumLead = (int) r.ssCurriculumLead;
			varWSNotes = BaseAppUtils.RemoveControlChars(r.ssNotes);
			varWSCreatedAt = (DateTime) r.ssCreatedAt;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSEndDate = (DateTime) r.ssEndDate;
		}

		public static RLCCSessionCurriculumLeadList ToRecordList(WORCCCSessionCurriculumLeadRecord[] array) {
			RLCCSessionCurriculumLeadList rl = new RLCCSessionCurriculumLeadList();
			if (array != null) {
				foreach(WORCCCSessionCurriculumLeadRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCCSessionCurriculumLeadRecord[] FromRecordList(RLCCSessionCurriculumLeadList rl) {
			WORCCCSessionCurriculumLeadRecord[] array = new WORCCCSessionCurriculumLeadRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCCSessionCurriculumLeadRecord {
		public static implicit operator WORCCCSessionCurriculumLeadRecord(RCCCSessionCurriculumLeadRecord r) {
			return new WORCCCSessionCurriculumLeadRecord(r.ssENCCSessionCurriculumLead);
		}

		public static implicit operator RCCCSessionCurriculumLeadRecord(WORCCCSessionCurriculumLeadRecord w) {
			RCCCSessionCurriculumLeadRecord r = new RCCCSessionCurriculumLeadRecord("");
			if (w != null) {
				r.ssENCCSessionCurriculumLead = w;
			}
			return r;
		}

	}

	partial struct ENCCSessionCurriculumLeadEntityRecord {
		public static implicit operator WORCCCSessionCurriculumLeadRecord(ENCCSessionCurriculumLeadEntityRecord r) {
			return new WORCCCSessionCurriculumLeadRecord(r);
		}

		public static implicit operator ENCCSessionCurriculumLeadEntityRecord(WORCCCSessionCurriculumLeadRecord w) {
			ENCCSessionCurriculumLeadEntityRecord r = new ENCCSessionCurriculumLeadEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssSessionId = (int) w.varWSSessionId;
				r.ssCurriculumLead = (int) w.varWSCurriculumLead;
				r.ssNotes = ((string) w.varWSNotes ?? "");
				r.ssCreatedAt = (DateTime) w.varWSCreatedAt;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssEndDate = (DateTime) w.varWSEndDate;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCCSessionCurriculumLeadRecordList {
		public WORCCCSessionCurriculumLeadRecord[] Array;


		public WORLCCSessionCurriculumLeadRecordList(WORCCCSessionCurriculumLeadRecord[] r) {
			if (r == null)
			Array = new WORCCCSessionCurriculumLeadRecord[0];
			else
			Array = r;
		}
		public WORLCCSessionCurriculumLeadRecordList() {
			Array = new WORCCCSessionCurriculumLeadRecord[0];
		}

		public WORLCCSessionCurriculumLeadRecordList(RLCCSessionCurriculumLeadRecordList rl) {
			rl=(RLCCSessionCurriculumLeadRecordList) rl.Duplicate();
			Array = new WORCCCSessionCurriculumLeadRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCCSessionCurriculumLeadRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCCSessionCurriculumLeadRecordList {
		public static implicit operator RLCCSessionCurriculumLeadRecordList(WORCCCSessionCurriculumLeadRecord[] array) {
			RLCCSessionCurriculumLeadRecordList rl = new RLCCSessionCurriculumLeadRecordList();
			if (array != null) {
				foreach(WORCCCSessionCurriculumLeadRecord val in array) {
					rl.Append((RCCCSessionCurriculumLeadRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCCSessionCurriculumLeadRecord[](RLCCSessionCurriculumLeadRecordList rl) {
			WORCCCSessionCurriculumLeadRecord[] array = new WORCCCSessionCurriculumLeadRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCCSessionCurriculumLeadRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCCSessionCurriculumLeadRecordList {
		public static implicit operator RLCCSessionCurriculumLeadRecordList(WORLCCSessionCurriculumLeadRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCCSessionCurriculumLeadRecordList(RLCCSessionCurriculumLeadRecordList rl) {
			return new WORLCCSessionCurriculumLeadRecordList(rl);
		}
		public static implicit operator WORCCCSessionCurriculumLeadRecord[](WORLCCSessionCurriculumLeadRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCCSessionCurriculumLeadRecordList(WORCCCSessionCurriculumLeadRecord[] array) {
			return new WORLCCSessionCurriculumLeadRecordList(array);
		}
	}
}

