/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSizesEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceSilkUIFramework.ENSizesEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceSilkUIFramework.ENSizesEntity.eSpaceId;
	} // ENSizesEntity

	/// <summary>
	/// Entity <code>ENSizesEntityRecord</code> that represents the Service Studio entity
	///  <code>Sizes</code> <p> Description: Auto, Small, Medium, Large</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Sizes", "esafTBB+Gkym7FxnCotSSQ", "_0wt0yCe7UKjIAnEn6+EiQ", 0, "OSUSR_zdl_Sizes", "")]
	[Serializable()]
	public partial struct ENSizesEntityRecord: ISerializable, ITypedRecord<ENSizesEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdType = GlobalObjectKey.Parse("_0wt0yCe7UKjIAnEn6+EiQ*0ZHVz5dD0EahmljJ6hqYYw");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("_0wt0yCe7UKjIAnEn6+EiQ*JIaWaSqpRUKaD0qVQ+r5Ag");
		private static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("_0wt0yCe7UKjIAnEn6+EiQ*IwfPa28pwUiVdfO5Tm8t+w");

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TYPE", 50, false, true, false)]
		[System.Xml.Serialization.XmlElement("Type")]
		private string _ssType;
		public string ssType {
			get {
				return _ssType;
			}
			set {
				if ((_ssType!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssOrder = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_Active")]
		private bool _ssIs_Active;
		public bool ssIs_Active {
			get {
				return _ssIs_Active;
			}
			set {
				if ((_ssIs_Active!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssIs_Active = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSizesEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssType = "";
			_ssOrder = 0;
			_ssIs_Active = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssType = r.ReadText(index++, "Sizes.Type", "");
			ssOrder = r.ReadInteger(index++, "Sizes.Order", 0);
			ssIs_Active = r.ReadBoolean(index++, "Sizes.Is_Active", false);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSizesEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSizesEntityRecord a, ENSizesEntityRecord b) {
			if (a.ssType != b.ssType) return false;
			if (a.ssOrder != b.ssOrder) return false;
			if (a.ssIs_Active != b.ssIs_Active) return false;
			return true;
		}

		public static bool operator != (ENSizesEntityRecord a, ENSizesEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSizesEntityRecord)) return false;
			return (this == (ENSizesEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssType.GetHashCode()
				^ ssOrder.GetHashCode()
				^ ssIs_Active.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSizesEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssType = "";
			_ssOrder = 0;
			_ssIs_Active = false;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssType = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssOrder = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssIs_Active = (bool) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSizesEntityRecord Duplicate() {
			ENSizesEntityRecord t;
			t._ssType = this._ssType;
			t._ssOrder = this._ssOrder;
			t._ssIs_Active = this._ssIs_Active;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Type")) VarValue.AppendAttribute(recordElem, "Type", ssType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Type")) variable.Value = ssType; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			} else if (head == "is_active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdType)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdIs_Active)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdType)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdIs_Active)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdType) {
				return ssType;
			} else if (key == IdOrder) {
				return ssOrder;
			} else if (key == IdIs_Active) {
				return ssIs_Active;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssType = (string) other.AttributeGet(IdType);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdType);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdType);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdOrder);
			ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdIs_Active);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdIs_Active);
		}
	} // ENSizesEntityRecord
	/// <summary>
	/// Static Entity <code>ENSizesEntity</code> gets the values for this static entity records in runtime
	///  <code>Sizes</code>
	/// </summary>
	partial class ENSizesEntity {


		static ENSizesEntity() {
			ENSizesEntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENSizesEntityRecord GetRecordById(string id) {
			return (ENSizesEntityRecord) RsseSpaceSilkUIFramework.ENSizesEntity.GetRecordById(id);
		}

		public static ENSizesEntityRecord GetRecordByName(string name) {
			return (ENSizesEntityRecord) RsseSpaceSilkUIFramework.ENSizesEntity.GetRecordByName(name);
		}

		public static ENSizesEntityRecord GetRecordByKey(ObjectKey key) {
			return (ENSizesEntityRecord) RsseSpaceSilkUIFramework.ENSizesEntity.GetRecordByKey(key);
		}
	} // ENSizesEntity;
	/// <summary>
	/// Structure <code>RCSizesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSizesRecord: ISerializable, ITypedRecord<RCSizesRecord> {
		private static readonly GlobalObjectKey IdSizes = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*yTSkbqtIh5asJCL0ZI+EAg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Sizes")]
		public ENSizesEntityRecord ssENSizes;


		public static implicit operator ENSizesEntityRecord(RCSizesRecord r) {
			return r.ssENSizes;
		}

		public static implicit operator RCSizesRecord(ENSizesEntityRecord r) {
			RCSizesRecord res = new RCSizesRecord(null);
			res.ssENSizes = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSizes.ChangedAttributes = value;
			}
			get {
				return ssENSizes.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSizesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSizes = new ENSizesEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSizes.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSizes.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSizes.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSizes.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSizesRecord r) {
			this = r;
		}


		public static bool operator == (RCSizesRecord a, RCSizesRecord b) {
			if (a.ssENSizes != b.ssENSizes) return false;
			return true;
		}

		public static bool operator != (RCSizesRecord a, RCSizesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSizesRecord)) return false;
			return (this == (RCSizesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSizes.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSizesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSizes = new ENSizesEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSizes = (ENSizesEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSizes.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSizes.InternalRecursiveSave();
		}


		public RCSizesRecord Duplicate() {
			RCSizesRecord t;
			t.ssENSizes = (ENSizesEntityRecord) this.ssENSizes.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSizes.ToXml(this, recordElem, "Sizes", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "sizes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sizes")) variable.Value = ssENSizes; else variable.Optimized = true;
				variable.SetFieldName("sizes");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSizes.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSizes.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSizes) {
				return ssENSizes;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSizes.FillFromOther((IRecord) other.AttributeGet(IdSizes));
		}
	} // RCSizesRecord
	/// <summary>
	/// RecordList type <code>RLSizesRecordList</code> that represents a record list of <code>Sizes</code>
	/// </summary>
	[Serializable()]
	public partial class RLSizesRecordList: GenericRecordList<RCSizesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSizesRecord GetElementDefaultValue() {
			return new RCSizesRecord("");
		}

		public T[] ToArray<T>(Func<RCSizesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSizesRecordList recordlist, Func<RCSizesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSizesRecordList ToList<T>(T[] array, Func <T, RCSizesRecord> converter) {
			RLSizesRecordList result = new RLSizesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSizesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSizesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSizesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSizesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSizesRecord> NewList() {
			return new RLSizesRecordList();
		}


	} // RLSizesRecordList

	/// <summary>
	/// RecordList type <code>RLSizesList</code> that represents a record list of <code>Text, Boolean,
	///  Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLSizesList: GenericRecordList<ENSizesEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSizesEntityRecord GetElementDefaultValue() {
			return new ENSizesEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSizesEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSizesList recordlist, Func<ENSizesEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSizesList ToList<T>(T[] array, Func <T, ENSizesEntityRecord> converter) {
			RLSizesList result = new RLSizesList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSizesList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSizesList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSizesList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSizesList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSizesEntityRecord> NewList() {
			return new RLSizesList();
		}


	} // RLSizesList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetSizes
		/// </summary>

		public static void GetSizes(HeContext heContext, string inParamId, out RCSizesRecord outParamRecord) {
			outParamRecord = new RCSizesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSizesEntity.eSpaceId;
				try {
					outParamRecord = ENSizesEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [TYPE]" +
						 ", [ORDER]" +
						 ", [IS_ACTIVE]" +
						 " FROM " + ENSizesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [TYPE] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSizes", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENSizesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Sizes")]
	public class WORCSizesRecord {
		[System.Xml.Serialization.XmlElement("Type")]
		public string varWSType;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		[System.Xml.Serialization.XmlElement("Is_Active")]
		public bool varWSIs_Active;

		public WORCSizesRecord() {
			varWSType = (string) "";
			varWSOrder = (int) 0;
			varWSIs_Active = (bool) false;
		}

		public WORCSizesRecord(ENSizesEntityRecord r) {
			varWSType = BaseAppUtils.RemoveControlChars(r.ssType);
			varWSOrder = (int) r.ssOrder;
			varWSIs_Active = (bool) r.ssIs_Active;
		}

		public static RLSizesList ToRecordList(WORCSizesRecord[] array) {
			RLSizesList rl = new RLSizesList();
			if (array != null) {
				foreach(WORCSizesRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSizesRecord[] FromRecordList(RLSizesList rl) {
			WORCSizesRecord[] array = new WORCSizesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSizesRecord {
		public static implicit operator WORCSizesRecord(RCSizesRecord r) {
			return new WORCSizesRecord(r.ssENSizes);
		}

		public static implicit operator RCSizesRecord(WORCSizesRecord w) {
			RCSizesRecord r = new RCSizesRecord("");
			if (w != null) {
				r.ssENSizes = w;
			}
			return r;
		}

	}

	partial struct ENSizesEntityRecord {
		public static implicit operator WORCSizesRecord(ENSizesEntityRecord r) {
			return new WORCSizesRecord(r);
		}

		public static implicit operator ENSizesEntityRecord(WORCSizesRecord w) {
			ENSizesEntityRecord r = new ENSizesEntityRecord("");
			if (w != null) {
				r.ssType = ((string) w.varWSType ?? "");
				r.ssOrder = (int) w.varWSOrder;
				r.ssIs_Active = (bool) w.varWSIs_Active;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSizesRecordList {
		public WORCSizesRecord[] Array;


		public WORLSizesRecordList(WORCSizesRecord[] r) {
			if (r == null)
			Array = new WORCSizesRecord[0];
			else
			Array = r;
		}
		public WORLSizesRecordList() {
			Array = new WORCSizesRecord[0];
		}

		public WORLSizesRecordList(RLSizesRecordList rl) {
			rl=(RLSizesRecordList) rl.Duplicate();
			Array = new WORCSizesRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSizesRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSizesRecordList {
		public static implicit operator RLSizesRecordList(WORCSizesRecord[] array) {
			RLSizesRecordList rl = new RLSizesRecordList();
			if (array != null) {
				foreach(WORCSizesRecord val in array) {
					rl.Append((RCSizesRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSizesRecord[](RLSizesRecordList rl) {
			WORCSizesRecord[] array = new WORCSizesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSizesRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSizesRecordList {
		public static implicit operator RLSizesRecordList(WORLSizesRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSizesRecordList(RLSizesRecordList rl) {
			return new WORLSizesRecordList(rl);
		}
		public static implicit operator WORCSizesRecord[](WORLSizesRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSizesRecordList(WORCSizesRecord[] array) {
			return new WORLSizesRecordList(array);
		}
	}
}

