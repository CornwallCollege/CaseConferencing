/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENLearningSupportEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENLearningSupportEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENLearningSupportEntity.eSpaceId;
	} // ENLearningSupportEntity

	/// <summary>
	/// Entity <code>ENLearningSupportEntityRecord</code> that represents the Service Studio entity
	///  <code>LearningSupport</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("LearningSupport", "8cPQL1KiqUeZMEAw8azo_Q", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_LearningSupport", "")]
	[Serializable()]
	public partial struct ENLearningSupportEntityRecord: ISerializable, ITypedRecord<ENLearningSupportEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*h9kAaV4jHkuE3uS88g2ktw");
		private static readonly GlobalObjectKey IdLearningSupportType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*_dhyoQpF_ECKy1tRj6+wUw");
		private static readonly GlobalObjectKey IdOtherDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*1r9l7wjjNEm8aP0hEpN5iA");
		private static readonly GlobalObjectKey IdCommencementDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*lnMrC6l0bEKkp798mAp9bg");
		private static readonly GlobalObjectKey IdReviewDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Z5_W+pl6J0GxIKemqaIxRQ");
		private static readonly GlobalObjectKey IdLeadProfessional = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*45STs2YmikORk_2cYVc9SA");
		private static readonly GlobalObjectKey IdLocationOfOriginal = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*+MfrhQKs7U+GMCMTKRR9fw");
		private static readonly GlobalObjectKey IdStudentID = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*gCU8tpvHi0yD70vXC+n00g");
		private static readonly GlobalObjectKey IdNotes = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*TSUrTuDn6km2EaLPZVnVtg");
		private static readonly GlobalObjectKey IdLastUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xE+PdrPUI025p8SFu12a4g");
		private static readonly GlobalObjectKey IdLastUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*pKkiX6FLU0mGPuq229xKsw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(11, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNINGSUPPORTTYPE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LearningSupportType")]
		private int _ssLearningSupportType;
		public int ssLearningSupportType {
			get {
				return _ssLearningSupportType;
			}
			set {
				if ((_ssLearningSupportType!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssLearningSupportType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OTHERDESCRIPTION", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("OtherDescription")]
		private string _ssOtherDescription;
		public string ssOtherDescription {
			get {
				return _ssOtherDescription;
			}
			set {
				if ((_ssOtherDescription!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssOtherDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMMENCEMENTDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CommencementDate")]
		private DateTime _ssCommencementDate;
		public DateTime ssCommencementDate {
			get {
				return _ssCommencementDate;
			}
			set {
				if ((_ssCommencementDate!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssCommencementDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("REVIEWDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("ReviewDate")]
		private DateTime _ssReviewDate;
		public DateTime ssReviewDate {
			get {
				return _ssReviewDate;
			}
			set {
				if ((_ssReviewDate!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssReviewDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEADPROFESSIONAL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LeadProfessional")]
		private int _ssLeadProfessional;
		public int ssLeadProfessional {
			get {
				return _ssLeadProfessional;
			}
			set {
				if ((_ssLeadProfessional!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssLeadProfessional = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LOCATIONOFORIGINAL", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("LocationOfOriginal")]
		private string _ssLocationOfOriginal;
		public string ssLocationOfOriginal {
			get {
				return _ssLocationOfOriginal;
			}
			set {
				if ((_ssLocationOfOriginal!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssLocationOfOriginal = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentID")]
		private string _ssStudentID;
		public string ssStudentID {
			get {
				return _ssStudentID;
			}
			set {
				if ((_ssStudentID!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssStudentID = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NOTES", 1000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Notes")]
		private string _ssNotes;
		public string ssNotes {
			get {
				return _ssNotes;
			}
			set {
				if ((_ssNotes!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssNotes = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		private int _ssLastUpdatedBy;
		public int ssLastUpdatedBy {
			get {
				return _ssLastUpdatedBy;
			}
			set {
				if ((_ssLastUpdatedBy!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssLastUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastUpdatedOn")]
		private DateTime _ssLastUpdatedOn;
		public DateTime ssLastUpdatedOn {
			get {
				return _ssLastUpdatedOn;
			}
			set {
				if ((_ssLastUpdatedOn!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssLastUpdatedOn = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENLearningSupportEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(11, true);
			OptimizedAttributes = new BitArray(11, false);
			_ssId = 0;
			_ssLearningSupportType = 0;
			_ssOtherDescription = "";
			_ssCommencementDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssReviewDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLeadProfessional = 0;
			_ssLocationOfOriginal = "";
			_ssStudentID = "";
			_ssNotes = "";
			_ssLastUpdatedBy = 0;
			_ssLastUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "LearningSupport.Id", 0);
			ssLearningSupportType = r.ReadEntityReference(index++, "LearningSupport.LearningSupportType", 0);
			ssOtherDescription = r.ReadText(index++, "LearningSupport.OtherDescription", "");
			ssCommencementDate = r.ReadDate(index++, "LearningSupport.CommencementDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssReviewDate = r.ReadDate(index++, "LearningSupport.ReviewDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLeadProfessional = r.ReadEntityReference(index++, "LearningSupport.LeadProfessional", 0);
			ssLocationOfOriginal = r.ReadText(index++, "LearningSupport.LocationOfOriginal", "");
			ssStudentID = r.ReadTextEntityReference(index++, "LearningSupport.StudentID", "");
			ssNotes = r.ReadText(index++, "LearningSupport.Notes", "");
			ssLastUpdatedBy = r.ReadEntityReference(index++, "LearningSupport.LastUpdatedBy", 0);
			ssLastUpdatedOn = r.ReadDateTime(index++, "LearningSupport.LastUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(11, false);
			OptimizedAttributes = new BitArray(11, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENLearningSupportEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENLearningSupportEntityRecord a, ENLearningSupportEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssLearningSupportType != b.ssLearningSupportType) return false;
			if (a.ssOtherDescription != b.ssOtherDescription) return false;
			if (a.ssCommencementDate != b.ssCommencementDate) return false;
			if (a.ssReviewDate != b.ssReviewDate) return false;
			if (a.ssLeadProfessional != b.ssLeadProfessional) return false;
			if (a.ssLocationOfOriginal != b.ssLocationOfOriginal) return false;
			if (a.ssStudentID != b.ssStudentID) return false;
			if (a.ssNotes != b.ssNotes) return false;
			if (a.ssLastUpdatedBy != b.ssLastUpdatedBy) return false;
			if (a.ssLastUpdatedOn != b.ssLastUpdatedOn) return false;
			return true;
		}

		public static bool operator != (ENLearningSupportEntityRecord a, ENLearningSupportEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENLearningSupportEntityRecord)) return false;
			return (this == (ENLearningSupportEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssLearningSupportType.GetHashCode()
				^ ssOtherDescription.GetHashCode()
				^ ssCommencementDate.GetHashCode()
				^ ssReviewDate.GetHashCode()
				^ ssLeadProfessional.GetHashCode()
				^ ssLocationOfOriginal.GetHashCode()
				^ ssStudentID.GetHashCode()
				^ ssNotes.GetHashCode()
				^ ssLastUpdatedBy.GetHashCode()
				^ ssLastUpdatedOn.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENLearningSupportEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(11, true);
			OptimizedAttributes = new BitArray(11, false);
			_ssId = 0;
			_ssLearningSupportType = 0;
			_ssOtherDescription = "";
			_ssCommencementDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssReviewDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLeadProfessional = 0;
			_ssLocationOfOriginal = "";
			_ssStudentID = "";
			_ssNotes = "";
			_ssLastUpdatedBy = 0;
			_ssLastUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssLearningSupportType = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssOtherDescription = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssCommencementDate = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssReviewDate = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssLeadProfessional = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssLocationOfOriginal = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssStudentID = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssNotes = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssLastUpdatedBy = (int) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssLastUpdatedOn = (DateTime) info.GetValue(fields[10] .Name, fields[10] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENLearningSupportEntityRecord Duplicate() {
			ENLearningSupportEntityRecord t;
			t._ssId = this._ssId;
			t._ssLearningSupportType = this._ssLearningSupportType;
			t._ssOtherDescription = this._ssOtherDescription;
			t._ssCommencementDate = this._ssCommencementDate;
			t._ssReviewDate = this._ssReviewDate;
			t._ssLeadProfessional = this._ssLeadProfessional;
			t._ssLocationOfOriginal = this._ssLocationOfOriginal;
			t._ssStudentID = this._ssStudentID;
			t._ssNotes = this._ssNotes;
			t._ssLastUpdatedBy = this._ssLastUpdatedBy;
			t._ssLastUpdatedOn = this._ssLastUpdatedOn;
			t.ChangedAttributes = new BitArray(11);
			t.OptimizedAttributes = new BitArray(11);
			for (int i = 0; i < 11; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearningSupportType")) VarValue.AppendAttribute(recordElem, "LearningSupportType", ssLearningSupportType, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LearningSupportType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OtherDescription")) VarValue.AppendAttribute(recordElem, "OtherDescription", ssOtherDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OtherDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CommencementDate")) VarValue.AppendAttribute(recordElem, "CommencementDate", ssCommencementDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "CommencementDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ReviewDate")) VarValue.AppendAttribute(recordElem, "ReviewDate", ssReviewDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "ReviewDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LeadProfessional")) VarValue.AppendAttribute(recordElem, "LeadProfessional", ssLeadProfessional, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LeadProfessional");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LocationOfOriginal")) VarValue.AppendAttribute(recordElem, "LocationOfOriginal", ssLocationOfOriginal, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LocationOfOriginal");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentID")) VarValue.AppendAttribute(recordElem, "StudentID", ssStudentID, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Notes")) VarValue.AppendAttribute(recordElem, "Notes", ssNotes, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Notes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedBy")) VarValue.AppendAttribute(recordElem, "LastUpdatedBy", ssLastUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedOn")) VarValue.AppendAttribute(recordElem, "LastUpdatedOn", ssLastUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedOn");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "learningsupporttype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningSupportType")) variable.Value = ssLearningSupportType; else variable.Optimized = true;
			} else if (head == "otherdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OtherDescription")) variable.Value = ssOtherDescription; else variable.Optimized = true;
			} else if (head == "commencementdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CommencementDate")) variable.Value = ssCommencementDate; else variable.Optimized = true;
			} else if (head == "reviewdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ReviewDate")) variable.Value = ssReviewDate; else variable.Optimized = true;
			} else if (head == "leadprofessional") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LeadProfessional")) variable.Value = ssLeadProfessional; else variable.Optimized = true;
			} else if (head == "locationoforiginal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LocationOfOriginal")) variable.Value = ssLocationOfOriginal; else variable.Optimized = true;
			} else if (head == "studentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentID")) variable.Value = ssStudentID; else variable.Optimized = true;
			} else if (head == "notes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Notes")) variable.Value = ssNotes; else variable.Optimized = true;
			} else if (head == "lastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedBy")) variable.Value = ssLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "lastupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedOn")) variable.Value = ssLastUpdatedOn; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdLearningSupportType)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdOtherDescription)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdCommencementDate)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdReviewDate)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdLeadProfessional)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdLocationOfOriginal)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdStudentID)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdNotes)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdLastUpdatedOn)) {
				return ChangedAttributes[10];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdLearningSupportType)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdOtherDescription)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdCommencementDate)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdReviewDate)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdLeadProfessional)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdLocationOfOriginal)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdStudentID)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdNotes)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdLastUpdatedOn)) {
				return OptimizedAttributes[10];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdLearningSupportType) {
				return ssLearningSupportType;
			} else if (key == IdOtherDescription) {
				return ssOtherDescription;
			} else if (key == IdCommencementDate) {
				return ssCommencementDate;
			} else if (key == IdReviewDate) {
				return ssReviewDate;
			} else if (key == IdLeadProfessional) {
				return ssLeadProfessional;
			} else if (key == IdLocationOfOriginal) {
				return ssLocationOfOriginal;
			} else if (key == IdStudentID) {
				return ssStudentID;
			} else if (key == IdNotes) {
				return ssNotes;
			} else if (key == IdLastUpdatedBy) {
				return ssLastUpdatedBy;
			} else if (key == IdLastUpdatedOn) {
				return ssLastUpdatedOn;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(11);
			OptimizedAttributes = new BitArray(11);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssLearningSupportType = (int) other.AttributeGet(IdLearningSupportType);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdLearningSupportType);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLearningSupportType);
			ssOtherDescription = (string) other.AttributeGet(IdOtherDescription);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdOtherDescription);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOtherDescription);
			ssCommencementDate = (DateTime) other.AttributeGet(IdCommencementDate);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdCommencementDate);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdCommencementDate);
			ssReviewDate = (DateTime) other.AttributeGet(IdReviewDate);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdReviewDate);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdReviewDate);
			ssLeadProfessional = (int) other.AttributeGet(IdLeadProfessional);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdLeadProfessional);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdLeadProfessional);
			ssLocationOfOriginal = (string) other.AttributeGet(IdLocationOfOriginal);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdLocationOfOriginal);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdLocationOfOriginal);
			ssStudentID = (string) other.AttributeGet(IdStudentID);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdStudentID);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdStudentID);
			ssNotes = (string) other.AttributeGet(IdNotes);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdNotes);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdNotes);
			ssLastUpdatedBy = (int) other.AttributeGet(IdLastUpdatedBy);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdLastUpdatedBy);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdLastUpdatedBy);
			ssLastUpdatedOn = (DateTime) other.AttributeGet(IdLastUpdatedOn);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdLastUpdatedOn);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdLastUpdatedOn);
		}
	} // ENLearningSupportEntityRecord
	/// <summary>
	/// Structure <code>RCLearningSupportRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCLearningSupportRecord: ISerializable, ITypedRecord<RCLearningSupportRecord> {
		private static readonly GlobalObjectKey IdLearningSupport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*MDt1Q66SLOweJSaDpIleRw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("LearningSupport")]
		public ENLearningSupportEntityRecord ssENLearningSupport;


		public static implicit operator ENLearningSupportEntityRecord(RCLearningSupportRecord r) {
			return r.ssENLearningSupport;
		}

		public static implicit operator RCLearningSupportRecord(ENLearningSupportEntityRecord r) {
			RCLearningSupportRecord res = new RCLearningSupportRecord(null);
			res.ssENLearningSupport = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENLearningSupport.ChangedAttributes = value;
			}
			get {
				return ssENLearningSupport.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCLearningSupportRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENLearningSupport = new ENLearningSupportEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(11, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENLearningSupport.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENLearningSupport.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENLearningSupport.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENLearningSupport.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCLearningSupportRecord r) {
			this = r;
		}


		public static bool operator == (RCLearningSupportRecord a, RCLearningSupportRecord b) {
			if (a.ssENLearningSupport != b.ssENLearningSupport) return false;
			return true;
		}

		public static bool operator != (RCLearningSupportRecord a, RCLearningSupportRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCLearningSupportRecord)) return false;
			return (this == (RCLearningSupportRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENLearningSupport.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCLearningSupportRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENLearningSupport = new ENLearningSupportEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENLearningSupport = (ENLearningSupportEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENLearningSupport.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENLearningSupport.InternalRecursiveSave();
		}


		public RCLearningSupportRecord Duplicate() {
			RCLearningSupportRecord t;
			t.ssENLearningSupport = (ENLearningSupportEntityRecord) this.ssENLearningSupport.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENLearningSupport.ToXml(this, recordElem, "LearningSupport", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "learningsupport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningSupport")) variable.Value = ssENLearningSupport; else variable.Optimized = true;
				variable.SetFieldName("learningsupport");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENLearningSupport.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENLearningSupport.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLearningSupport) {
				return ssENLearningSupport;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENLearningSupport.FillFromOther((IRecord) other.AttributeGet(IdLearningSupport));
		}
	} // RCLearningSupportRecord
	/// <summary>
	/// RecordList type <code>RLLearningSupportRecordList</code> that represents a record list of
	///  <code>LearningSupport</code>
	/// </summary>
	[Serializable()]
	public partial class RLLearningSupportRecordList: GenericRecordList<RCLearningSupportRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCLearningSupportRecord GetElementDefaultValue() {
			return new RCLearningSupportRecord("");
		}

		public T[] ToArray<T>(Func<RCLearningSupportRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLLearningSupportRecordList recordlist, Func<RCLearningSupportRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLLearningSupportRecordList ToList<T>(T[] array, Func <T, RCLearningSupportRecord> converter) {
			RLLearningSupportRecordList result = new RLLearningSupportRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLLearningSupportRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearningSupportRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearningSupportRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLLearningSupportRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(11, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCLearningSupportRecord> NewList() {
			return new RLLearningSupportRecordList();
		}


	} // RLLearningSupportRecordList

	/// <summary>
	/// RecordList type <code>RLLearningSupportList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, UserIdentifier, Text, Text, Text, Date, Date, DateTime
	/// , Integer, LearningSupportTypesIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLLearningSupportList: GenericRecordList<ENLearningSupportEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENLearningSupportEntityRecord GetElementDefaultValue() {
			return new ENLearningSupportEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENLearningSupportEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLLearningSupportList recordlist, Func<ENLearningSupportEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLLearningSupportList ToList<T>(T[] array, Func <T, ENLearningSupportEntityRecord> converter) {
			RLLearningSupportList result = new RLLearningSupportList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLLearningSupportList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearningSupportList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearningSupportList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLLearningSupportList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENLearningSupportEntityRecord> NewList() {
			return new RLLearningSupportList();
		}


	} // RLLearningSupportList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateLearningSupport
		/// </summary>

		public static void CreateLearningSupport(HeContext heContext, RCLearningSupportRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportEntity.eSpaceId;
				ENLearningSupportEntityRecord ssENLearningSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENLearningSupportEntity.LocalViewName(null, null) + " (" +
					 " [LEARNINGSUPPORTTYPE]" +
					 ", [OTHERDESCRIPTION]" +
					 ", [COMMENCEMENTDATE]" +
					 ", [REVIEWDATE]" +
					 ", [LEADPROFESSIONAL]" +
					 ", [LOCATIONOFORIGINAL]" +
					 ", [STUDENTID]" +
					 ", [NOTES]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDON]" +
					 " ) VALUES (" +
					 " @ssLearningSupportType" +
					 ", @ssOtherDescription" +
					 ", @ssCommencementDate" +
					 ", @ssReviewDate" +
					 ", @ssLeadProfessional" +
					 ", @ssLocationOfOriginal" +
					 ", @ssStudentID" +
					 ", @ssNotes" +
					 ", @ssLastUpdatedBy" +
					 ", @ssLastUpdatedOn" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENLearningSupport.ssLearningSupportType==0)) {
						insertSqlCmd.CreateParameter("@ssLearningSupportType", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLearningSupportType", DbType.Int32, ssENLearningSupport.ssLearningSupportType);
					}
					insertSqlCmd.CreateParameter("@ssOtherDescription", DbType.String, ssENLearningSupport.ssOtherDescription);
					insertSqlCmd.CreateParameter("@ssCommencementDate", DbType.DateTime, ssENLearningSupport.ssCommencementDate);
					insertSqlCmd.CreateParameter("@ssReviewDate", DbType.DateTime, ssENLearningSupport.ssReviewDate);
					if ((ssENLearningSupport.ssLeadProfessional==0)) {
						insertSqlCmd.CreateParameter("@ssLeadProfessional", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLeadProfessional", DbType.Int32, ssENLearningSupport.ssLeadProfessional);
					}
					insertSqlCmd.CreateParameter("@ssLocationOfOriginal", DbType.String, ssENLearningSupport.ssLocationOfOriginal);
					if ((ssENLearningSupport.ssStudentID== "")) {
						insertSqlCmd.CreateParameter("@ssStudentID", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentID", DbType.String, ssENLearningSupport.ssStudentID);
					}
					insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENLearningSupport.ssNotes);
					if ((ssENLearningSupport.ssLastUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENLearningSupport.ssLastUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENLearningSupport.ssLastUpdatedOn);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateLearningSupport", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateLearningSupport
		/// </summary>

		public static void CreateOrUpdateLearningSupport(HeContext heContext, BitArray usedFields, RCLearningSupportRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportEntity.eSpaceId;
				ENLearningSupportEntityRecord ssENLearningSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(11, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENLearningSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNINGSUPPORTTYPE] = @ssLearningSupportType"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OTHERDESCRIPTION] = @ssOtherDescription"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMMENCEMENTDATE] = @ssCommencementDate"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REVIEWDATE] = @ssReviewDate"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEADPROFESSIONAL] = @ssLeadProfessional"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LOCATIONOFORIGINAL] = @ssLocationOfOriginal"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentID"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDON] = @ssLastUpdatedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENLearningSupportssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENLearningSupport.ssLearningSupportType==0)) {
							sqlCmd.CreateParameter("@ssLearningSupportType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLearningSupportType", DbType.Int32, ssENLearningSupport.ssLearningSupportType);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssOtherDescription", DbType.String, ssENLearningSupport.ssOtherDescription);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCommencementDate", DbType.DateTime, ssENLearningSupport.ssCommencementDate);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssReviewDate", DbType.DateTime, ssENLearningSupport.ssReviewDate);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENLearningSupport.ssLeadProfessional==0)) {
							sqlCmd.CreateParameter("@ssLeadProfessional", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLeadProfessional", DbType.Int32, ssENLearningSupport.ssLeadProfessional);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssLocationOfOriginal", DbType.String, ssENLearningSupport.ssLocationOfOriginal);
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENLearningSupport.ssStudentID== "")) {
							sqlCmd.CreateParameter("@ssStudentID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentID", DbType.String, ssENLearningSupport.ssStudentID);
						}
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENLearningSupport.ssNotes);
						counter++;
					}
					if (usedFields[9]) {
						if ((ssENLearningSupport.ssLastUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENLearningSupport.ssLastUpdatedBy);
						}
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENLearningSupport.ssLastUpdatedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[COMMENCEMENTDATE] = [COMMENCEMENTDATE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENLearningSupportssId", DbType.Int32, ssENLearningSupport.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateLearningSupport (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENLearningSupportEntity.LocalViewName(null, null) + " (" +
						 " [LEARNINGSUPPORTTYPE]" +
						 ", [OTHERDESCRIPTION]" +
						 ", [COMMENCEMENTDATE]" +
						 ", [REVIEWDATE]" +
						 ", [LEADPROFESSIONAL]" +
						 ", [LOCATIONOFORIGINAL]" +
						 ", [STUDENTID]" +
						 ", [NOTES]" +
						 ", [LASTUPDATEDBY]" +
						 ", [LASTUPDATEDON]" +
						 " ) VALUES (" +
						 " @ssLearningSupportType" +
						 ", @ssOtherDescription" +
						 ", @ssCommencementDate" +
						 ", @ssReviewDate" +
						 ", @ssLeadProfessional" +
						 ", @ssLocationOfOriginal" +
						 ", @ssStudentID" +
						 ", @ssNotes" +
						 ", @ssLastUpdatedBy" +
						 ", @ssLastUpdatedOn" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENLearningSupport.ssLearningSupportType==0)) {
							insertSqlCmd.CreateParameter("@ssLearningSupportType", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLearningSupportType", DbType.Int32, ssENLearningSupport.ssLearningSupportType);
						}
						insertSqlCmd.CreateParameter("@ssOtherDescription", DbType.String, ssENLearningSupport.ssOtherDescription);
						insertSqlCmd.CreateParameter("@ssCommencementDate", DbType.DateTime, ssENLearningSupport.ssCommencementDate);
						insertSqlCmd.CreateParameter("@ssReviewDate", DbType.DateTime, ssENLearningSupport.ssReviewDate);
						if ((ssENLearningSupport.ssLeadProfessional==0)) {
							insertSqlCmd.CreateParameter("@ssLeadProfessional", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLeadProfessional", DbType.Int32, ssENLearningSupport.ssLeadProfessional);
						}
						insertSqlCmd.CreateParameter("@ssLocationOfOriginal", DbType.String, ssENLearningSupport.ssLocationOfOriginal);
						if ((ssENLearningSupport.ssStudentID== "")) {
							insertSqlCmd.CreateParameter("@ssStudentID", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentID", DbType.String, ssENLearningSupport.ssStudentID);
						}
						insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENLearningSupport.ssNotes);
						if ((ssENLearningSupport.ssLastUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENLearningSupport.ssLastUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENLearningSupport.ssLastUpdatedOn);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateLearningSupport", true), typeof(int));
					} else {
						outParamId = ssENLearningSupport.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteLearningSupport
		/// </summary>

		public static void DeleteLearningSupport(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENLearningSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteLearningSupport", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetLearningSupport
		/// </summary>

		public static void GetLearningSupport(HeContext heContext, int inParamId, out RCLearningSupportRecord outParamRecord) {
			outParamRecord = new RCLearningSupportRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [LEARNINGSUPPORTTYPE]" +
					 ", [OTHERDESCRIPTION]" +
					 ", [COMMENCEMENTDATE]" +
					 ", [REVIEWDATE]" +
					 ", [LEADPROFESSIONAL]" +
					 ", [LOCATIONOFORIGINAL]" +
					 ", [STUDENTID]" +
					 ", [NOTES]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDON]" +
					 " FROM " + ENLearningSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetLearningSupport", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(11, false)
							}
							;
						} else
						throw new DataBaseException(ENLearningSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetLearningSupportForUpdate
		/// </summary>

		public static void GetLearningSupportForUpdate(HeContext heContext, int inParamId, out RCLearningSupportRecord outParamRecord) {
			outParamRecord = new RCLearningSupportRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [LEARNINGSUPPORTTYPE]" +
					 ", [OTHERDESCRIPTION]" +
					 ", [COMMENCEMENTDATE]" +
					 ", [REVIEWDATE]" +
					 ", [LEADPROFESSIONAL]" +
					 ", [LOCATIONOFORIGINAL]" +
					 ", [STUDENTID]" +
					 ", [NOTES]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDON]" +
					 "FROM " + ENLearningSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetLearningSupportForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(11, false)
							}
							;
						} else
						throw new DataBaseException(ENLearningSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateLearningSupport
		/// </summary>

		public static void UpdateLearningSupport(HeContext heContext, BitArray usedFields, RCLearningSupportRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportEntity.eSpaceId;
				ENLearningSupportEntityRecord ssENLearningSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(11, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENLearningSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNINGSUPPORTTYPE] = @ssLearningSupportType"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OTHERDESCRIPTION] = @ssOtherDescription"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMMENCEMENTDATE] = @ssCommencementDate"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REVIEWDATE] = @ssReviewDate"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEADPROFESSIONAL] = @ssLeadProfessional"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LOCATIONOFORIGINAL] = @ssLocationOfOriginal"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentID"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDON] = @ssLastUpdatedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENLearningSupportssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENLearningSupport.ssLearningSupportType==0)) {
							sqlCmd.CreateParameter("@ssLearningSupportType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLearningSupportType", DbType.Int32, ssENLearningSupport.ssLearningSupportType);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssOtherDescription", DbType.String, ssENLearningSupport.ssOtherDescription);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCommencementDate", DbType.DateTime, ssENLearningSupport.ssCommencementDate);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssReviewDate", DbType.DateTime, ssENLearningSupport.ssReviewDate);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENLearningSupport.ssLeadProfessional==0)) {
							sqlCmd.CreateParameter("@ssLeadProfessional", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLeadProfessional", DbType.Int32, ssENLearningSupport.ssLeadProfessional);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssLocationOfOriginal", DbType.String, ssENLearningSupport.ssLocationOfOriginal);
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENLearningSupport.ssStudentID== "")) {
							sqlCmd.CreateParameter("@ssStudentID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentID", DbType.String, ssENLearningSupport.ssStudentID);
						}
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENLearningSupport.ssNotes);
						counter++;
					}
					if (usedFields[9]) {
						if ((ssENLearningSupport.ssLastUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENLearningSupport.ssLastUpdatedBy);
						}
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENLearningSupport.ssLastUpdatedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[COMMENCEMENTDATE] = [COMMENCEMENTDATE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENLearningSupportssId", DbType.Int32, ssENLearningSupport.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateLearningSupport", true) <= 0)
					throw new DataBaseException(ENLearningSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENLearningSupport.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("LearningSupport")]
	public class WORCLearningSupportRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("LearningSupportType")]
		public int varWSLearningSupportType;

		[System.Xml.Serialization.XmlElement("OtherDescription")]
		public string varWSOtherDescription;

		[System.Xml.Serialization.XmlElement("CommencementDate", DataType= "date")]
		public DateTime varWSCommencementDate;

		[System.Xml.Serialization.XmlElement("ReviewDate", DataType= "date")]
		public DateTime varWSReviewDate;

		[System.Xml.Serialization.XmlElement("LeadProfessional")]
		public int varWSLeadProfessional;

		[System.Xml.Serialization.XmlElement("LocationOfOriginal")]
		public string varWSLocationOfOriginal;

		[System.Xml.Serialization.XmlElement("StudentID")]
		public string varWSStudentID;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string varWSNotes;

		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		public int varWSLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("LastUpdatedOn")]
		public DateTime varWSLastUpdatedOn;

		public WORCLearningSupportRecord() {
			varWSId = (int) 0;
			varWSLearningSupportType = (int) 0;
			varWSOtherDescription = (string) "";
			varWSCommencementDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSReviewDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLeadProfessional = (int) 0;
			varWSLocationOfOriginal = (string) "";
			varWSStudentID = (string) "";
			varWSNotes = (string) "";
			varWSLastUpdatedBy = (int) 0;
			varWSLastUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCLearningSupportRecord(ENLearningSupportEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSLearningSupportType = (int) r.ssLearningSupportType;
			varWSOtherDescription = BaseAppUtils.RemoveControlChars(r.ssOtherDescription);
			varWSCommencementDate = (DateTime) r.ssCommencementDate;
			varWSReviewDate = (DateTime) r.ssReviewDate;
			varWSLeadProfessional = (int) r.ssLeadProfessional;
			varWSLocationOfOriginal = BaseAppUtils.RemoveControlChars(r.ssLocationOfOriginal);
			varWSStudentID = BaseAppUtils.RemoveControlChars(r.ssStudentID);
			varWSNotes = BaseAppUtils.RemoveControlChars(r.ssNotes);
			varWSLastUpdatedBy = (int) r.ssLastUpdatedBy;
			varWSLastUpdatedOn = (DateTime) r.ssLastUpdatedOn;
		}

		public static RLLearningSupportList ToRecordList(WORCLearningSupportRecord[] array) {
			RLLearningSupportList rl = new RLLearningSupportList();
			if (array != null) {
				foreach(WORCLearningSupportRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCLearningSupportRecord[] FromRecordList(RLLearningSupportList rl) {
			WORCLearningSupportRecord[] array = new WORCLearningSupportRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCLearningSupportRecord {
		public static implicit operator WORCLearningSupportRecord(RCLearningSupportRecord r) {
			return new WORCLearningSupportRecord(r.ssENLearningSupport);
		}

		public static implicit operator RCLearningSupportRecord(WORCLearningSupportRecord w) {
			RCLearningSupportRecord r = new RCLearningSupportRecord("");
			if (w != null) {
				r.ssENLearningSupport = w;
			}
			return r;
		}

	}

	partial struct ENLearningSupportEntityRecord {
		public static implicit operator WORCLearningSupportRecord(ENLearningSupportEntityRecord r) {
			return new WORCLearningSupportRecord(r);
		}

		public static implicit operator ENLearningSupportEntityRecord(WORCLearningSupportRecord w) {
			ENLearningSupportEntityRecord r = new ENLearningSupportEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssLearningSupportType = (int) w.varWSLearningSupportType;
				r.ssOtherDescription = ((string) w.varWSOtherDescription ?? "");
				r.ssCommencementDate = (DateTime) w.varWSCommencementDate;
				r.ssReviewDate = (DateTime) w.varWSReviewDate;
				r.ssLeadProfessional = (int) w.varWSLeadProfessional;
				r.ssLocationOfOriginal = ((string) w.varWSLocationOfOriginal ?? "");
				r.ssStudentID = (string) w.varWSStudentID;
				r.ssNotes = ((string) w.varWSNotes ?? "");
				r.ssLastUpdatedBy = (int) w.varWSLastUpdatedBy;
				r.ssLastUpdatedOn = (DateTime) w.varWSLastUpdatedOn;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLLearningSupportRecordList {
		public WORCLearningSupportRecord[] Array;


		public WORLLearningSupportRecordList(WORCLearningSupportRecord[] r) {
			if (r == null)
			Array = new WORCLearningSupportRecord[0];
			else
			Array = r;
		}
		public WORLLearningSupportRecordList() {
			Array = new WORCLearningSupportRecord[0];
		}

		public WORLLearningSupportRecordList(RLLearningSupportRecordList rl) {
			rl=(RLLearningSupportRecordList) rl.Duplicate();
			Array = new WORCLearningSupportRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCLearningSupportRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLLearningSupportRecordList {
		public static implicit operator RLLearningSupportRecordList(WORCLearningSupportRecord[] array) {
			RLLearningSupportRecordList rl = new RLLearningSupportRecordList();
			if (array != null) {
				foreach(WORCLearningSupportRecord val in array) {
					rl.Append((RCLearningSupportRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCLearningSupportRecord[](RLLearningSupportRecordList rl) {
			WORCLearningSupportRecord[] array = new WORCLearningSupportRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCLearningSupportRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLLearningSupportRecordList {
		public static implicit operator RLLearningSupportRecordList(WORLLearningSupportRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLLearningSupportRecordList(RLLearningSupportRecordList rl) {
			return new WORLLearningSupportRecordList(rl);
		}
		public static implicit operator WORCLearningSupportRecord[](WORLLearningSupportRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLLearningSupportRecordList(WORCLearningSupportRecord[] array) {
			return new WORLLearningSupportRecordList(array);
		}
	}
}

