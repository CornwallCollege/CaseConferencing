/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENDashboardLastViewedEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(10), "OSUSR_pkx_DashboardLastViewed");
		}
	} // ENDashboardLastViewedEntity

	/// <summary>
	/// Entity <code>ENDashboardLastViewedEntityRecord</code> that represents the Service Studio entity
	///  <code>DashboardLastViewed</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("DashboardLastViewed", "WqdCyL1C6kK32Yxh5K6klA", "shmcdFKEAEWXZGfrlZEwCQ", 0, "OSUSR_pkx_DashboardLastViewed", null)]
	[Serializable()]
	public partial struct ENDashboardLastViewedEntityRecord: ISerializable, ITypedRecord<ENDashboardLastViewedEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*zdC2Ygdu6EiWukh5FzY0zQ");
		private static readonly GlobalObjectKey IdUserID = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*98GGPZ9q2Eul66xfpjaxyA");
		private static readonly GlobalObjectKey IdGetUpdatesFromDateTime = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*aZD5MpFxf0Cmr9qEdyoT6w");
		private static readonly GlobalObjectKey IdLastViewedDate = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*KL5bOx7q4EaI3xdnrYfkPg");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(4, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USERID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("UserID")]
		private int _ssUserID;
		public int ssUserID {
			get {
				return _ssUserID;
			}
			set {
				if ((_ssUserID!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssUserID = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GETUPDATESFROMDATETIME", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("GetUpdatesFromDateTime")]
		private DateTime _ssGetUpdatesFromDateTime;
		public DateTime ssGetUpdatesFromDateTime {
			get {
				return _ssGetUpdatesFromDateTime;
			}
			set {
				if ((_ssGetUpdatesFromDateTime!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssGetUpdatesFromDateTime = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTVIEWEDDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastViewedDate")]
		private DateTime _ssLastViewedDate;
		public DateTime ssLastViewedDate {
			get {
				return _ssLastViewedDate;
			}
			set {
				if ((_ssLastViewedDate!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssLastViewedDate = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENDashboardLastViewedEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(4, true);
			OptimizedAttributes = new BitArray(4, false);
			_ssId = 0;
			_ssUserID = 0;
			_ssGetUpdatesFromDateTime = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastViewedDate = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "DashboardLastViewed.Id", 0);
			ssUserID = r.ReadEntityReference(index++, "DashboardLastViewed.UserID", 0);
			ssGetUpdatesFromDateTime = r.ReadDate(index++, "DashboardLastViewed.GetUpdatesFromDateTime", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLastViewedDate = r.ReadDate(index++, "DashboardLastViewed.LastViewedDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(4, false);
			OptimizedAttributes = new BitArray(4, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENDashboardLastViewedEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENDashboardLastViewedEntityRecord a, ENDashboardLastViewedEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssUserID != b.ssUserID) return false;
			if (a.ssGetUpdatesFromDateTime != b.ssGetUpdatesFromDateTime) return false;
			if (a.ssLastViewedDate != b.ssLastViewedDate) return false;
			return true;
		}

		public static bool operator != (ENDashboardLastViewedEntityRecord a, ENDashboardLastViewedEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENDashboardLastViewedEntityRecord)) return false;
			return (this == (ENDashboardLastViewedEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssUserID.GetHashCode()
				^ ssGetUpdatesFromDateTime.GetHashCode()
				^ ssLastViewedDate.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENDashboardLastViewedEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(4, true);
			OptimizedAttributes = new BitArray(4, false);
			_ssId = 0;
			_ssUserID = 0;
			_ssGetUpdatesFromDateTime = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastViewedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssUserID = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssGetUpdatesFromDateTime = (DateTime) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssLastViewedDate = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENDashboardLastViewedEntityRecord Duplicate() {
			ENDashboardLastViewedEntityRecord t;
			t._ssId = this._ssId;
			t._ssUserID = this._ssUserID;
			t._ssGetUpdatesFromDateTime = this._ssGetUpdatesFromDateTime;
			t._ssLastViewedDate = this._ssLastViewedDate;
			t.ChangedAttributes = new BitArray(4);
			t.OptimizedAttributes = new BitArray(4);
			for (int i = 0; i < 4; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserID")) VarValue.AppendAttribute(recordElem, "UserID", ssUserID, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "UserID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GetUpdatesFromDateTime")) VarValue.AppendAttribute(recordElem, "GetUpdatesFromDateTime", ssGetUpdatesFromDateTime, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "GetUpdatesFromDateTime");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastViewedDate")) VarValue.AppendAttribute(recordElem, "LastViewedDate", ssLastViewedDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "LastViewedDate");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "userid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserID")) variable.Value = ssUserID; else variable.Optimized = true;
			} else if (head == "getupdatesfromdatetime") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GetUpdatesFromDateTime")) variable.Value = ssGetUpdatesFromDateTime; else variable.Optimized = true;
			} else if (head == "lastvieweddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastViewedDate")) variable.Value = ssLastViewedDate; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdUserID)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdGetUpdatesFromDateTime)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdLastViewedDate)) {
				return ChangedAttributes[3];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdUserID)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdGetUpdatesFromDateTime)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdLastViewedDate)) {
				return OptimizedAttributes[3];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdUserID) {
				return ssUserID;
			} else if (key == IdGetUpdatesFromDateTime) {
				return ssGetUpdatesFromDateTime;
			} else if (key == IdLastViewedDate) {
				return ssLastViewedDate;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(4);
			OptimizedAttributes = new BitArray(4);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssUserID = (int) other.AttributeGet(IdUserID);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdUserID);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdUserID);
			ssGetUpdatesFromDateTime = (DateTime) other.AttributeGet(IdGetUpdatesFromDateTime);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdGetUpdatesFromDateTime);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdGetUpdatesFromDateTime);
			ssLastViewedDate = (DateTime) other.AttributeGet(IdLastViewedDate);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdLastViewedDate);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdLastViewedDate);
		}
	} // ENDashboardLastViewedEntityRecord
	/// <summary>
	/// Structure <code>RCDashboardLastViewedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCDashboardLastViewedRecord: ISerializable, ITypedRecord<RCDashboardLastViewedRecord> {
		private static readonly GlobalObjectKey IdDashboardLastViewed = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*RvskuYKRDh4O3mtmvGOWNg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("DashboardLastViewed")]
		public ENDashboardLastViewedEntityRecord ssENDashboardLastViewed;


		public static implicit operator ENDashboardLastViewedEntityRecord(RCDashboardLastViewedRecord r) {
			return r.ssENDashboardLastViewed;
		}

		public static implicit operator RCDashboardLastViewedRecord(ENDashboardLastViewedEntityRecord r) {
			RCDashboardLastViewedRecord res = new RCDashboardLastViewedRecord(null);
			res.ssENDashboardLastViewed = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENDashboardLastViewed.ChangedAttributes = value;
			}
			get {
				return ssENDashboardLastViewed.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCDashboardLastViewedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENDashboardLastViewed = new ENDashboardLastViewedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENDashboardLastViewed.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENDashboardLastViewed.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENDashboardLastViewed.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENDashboardLastViewed.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCDashboardLastViewedRecord r) {
			this = r;
		}


		public static bool operator == (RCDashboardLastViewedRecord a, RCDashboardLastViewedRecord b) {
			if (a.ssENDashboardLastViewed != b.ssENDashboardLastViewed) return false;
			return true;
		}

		public static bool operator != (RCDashboardLastViewedRecord a, RCDashboardLastViewedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCDashboardLastViewedRecord)) return false;
			return (this == (RCDashboardLastViewedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENDashboardLastViewed.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCDashboardLastViewedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENDashboardLastViewed = new ENDashboardLastViewedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENDashboardLastViewed = (ENDashboardLastViewedEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENDashboardLastViewed.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENDashboardLastViewed.InternalRecursiveSave();
		}


		public RCDashboardLastViewedRecord Duplicate() {
			RCDashboardLastViewedRecord t;
			t.ssENDashboardLastViewed = (ENDashboardLastViewedEntityRecord) this.ssENDashboardLastViewed.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENDashboardLastViewed.ToXml(this, recordElem, "DashboardLastViewed", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "dashboardlastviewed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DashboardLastViewed")) variable.Value = ssENDashboardLastViewed; else variable.Optimized = true;
				variable.SetFieldName("dashboardlastviewed");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENDashboardLastViewed.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENDashboardLastViewed.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDashboardLastViewed) {
				return ssENDashboardLastViewed;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENDashboardLastViewed.FillFromOther((IRecord) other.AttributeGet(IdDashboardLastViewed));
		}
	} // RCDashboardLastViewedRecord
	/// <summary>
	/// RecordList type <code>RLDashboardLastViewedRecordList</code> that represents a record list of
	///  <code>DashboardLastViewed</code>
	/// </summary>
	[Serializable()]
	public partial class RLDashboardLastViewedRecordList: GenericRecordList<RCDashboardLastViewedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCDashboardLastViewedRecord GetElementDefaultValue() {
			return new RCDashboardLastViewedRecord("");
		}

		public T[] ToArray<T>(Func<RCDashboardLastViewedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDashboardLastViewedRecordList recordlist, Func<RCDashboardLastViewedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDashboardLastViewedRecordList ToList<T>(T[] array, Func <T, RCDashboardLastViewedRecord> converter) {
			RLDashboardLastViewedRecordList result = new RLDashboardLastViewedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDashboardLastViewedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDashboardLastViewedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDashboardLastViewedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDashboardLastViewedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCDashboardLastViewedRecord> NewList() {
			return new RLDashboardLastViewedRecordList();
		}


	} // RLDashboardLastViewedRecordList

	/// <summary>
	/// RecordList type <code>RLDashboardLastViewedList</code> that represents a record list of
	///  <code>UserIdentifier, Date, Date, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLDashboardLastViewedList: GenericRecordList<ENDashboardLastViewedEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENDashboardLastViewedEntityRecord GetElementDefaultValue() {
			return new ENDashboardLastViewedEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENDashboardLastViewedEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDashboardLastViewedList recordlist, Func<ENDashboardLastViewedEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDashboardLastViewedList ToList<T>(T[] array, Func <T, ENDashboardLastViewedEntityRecord> converter) {
			RLDashboardLastViewedList result = new RLDashboardLastViewedList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDashboardLastViewedList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDashboardLastViewedList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDashboardLastViewedList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDashboardLastViewedList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENDashboardLastViewedEntityRecord> NewList() {
			return new RLDashboardLastViewedList();
		}


	} // RLDashboardLastViewedList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateDashboardLastViewed
		/// </summary>

		public static void CreateDashboardLastViewed(HeContext heContext, RCDashboardLastViewedRecord inParamSource, out int outParamId) {
			outParamId = 0;

			ENDashboardLastViewedEntityRecord ssENDashboardLastViewed = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string insertSql =
				 "SET NOCOUNT ON; INSERT INTO " + ENDashboardLastViewedEntity.LocalViewName(null, null) + " (" +
				 " [USERID]" +
				 ", [GETUPDATESFROMDATETIME]" +
				 ", [LASTVIEWEDDATE]" +
				 " ) VALUES (" +
				 " @ssUserID" +
				 ", @ssGetUpdatesFromDateTime" +
				 ", @ssLastViewedDate" +
				 " ) ; SELECT SCOPE_IDENTITY();";
				Command insertSqlCmd = trans.CreateCommand(insertSql);
				if ((ssENDashboardLastViewed.ssUserID==0)) {
					insertSqlCmd.CreateParameter("@ssUserID", DBNull.Value);
				} else {
					insertSqlCmd.CreateParameter("@ssUserID", DbType.Int32, ssENDashboardLastViewed.ssUserID);
				}
				insertSqlCmd.CreateParameter("@ssGetUpdatesFromDateTime", DbType.DateTime, ssENDashboardLastViewed.ssGetUpdatesFromDateTime);
				insertSqlCmd.CreateParameter("@ssLastViewedDate", DbType.DateTime, ssENDashboardLastViewed.ssLastViewedDate);
				outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateDashboardLastViewed", true), typeof(int));
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateDashboardLastViewed
		/// </summary>

		public static void CreateOrUpdateDashboardLastViewed(HeContext heContext, BitArray usedFields, RCDashboardLastViewedRecord inParamSource, out int outParamId) {
			outParamId = 0;

			ENDashboardLastViewedEntityRecord ssENDashboardLastViewed = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				if (usedFields == null) {
					usedFields = new BitArray(4, true);
				}
				string updateSet = "SET NOCOUNT OFF; UPDATE " + ENDashboardLastViewedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
				string parameters = "";
				parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERID] = @ssUserID"): parameters);
				parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GETUPDATESFROMDATETIME] = @ssGetUpdatesFromDateTime"): parameters);
				parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTVIEWEDDATE] = @ssLastViewedDate"): parameters);
				string whereCondition = " WHERE [ID] = @ssENDashboardLastViewedssId";
				string sql = updateSet + parameters + whereCondition;
				Command sqlCmd = trans.CreateCommand(sql);
				int counter = 0;
				if (usedFields[1]) {
					if ((ssENDashboardLastViewed.ssUserID==0)) {
						sqlCmd.CreateParameter("@ssUserID", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssUserID", DbType.Int32, ssENDashboardLastViewed.ssUserID);
					}
					counter++;
				}
				if (usedFields[2]) {
					sqlCmd.CreateParameter("@ssGetUpdatesFromDateTime", DbType.DateTime, ssENDashboardLastViewed.ssGetUpdatesFromDateTime);
					counter++;
				}
				if (usedFields[3]) {
					sqlCmd.CreateParameter("@ssLastViewedDate", DbType.DateTime, ssENDashboardLastViewed.ssLastViewedDate);
					counter++;
				}
				if (counter == 0) {
					string dummyUpdate = "[GETUPDATESFROMDATETIME] = [GETUPDATESFROMDATETIME]";
					string noUpdate = updateSet + dummyUpdate + whereCondition;
					sqlCmd = trans.CreateCommand(noUpdate);
				}
				sqlCmd.CreateParameter("@ssENDashboardLastViewedssId", DbType.Int32, ssENDashboardLastViewed.ssId);
				counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateDashboardLastViewed (update)", true);
				if (counter == 0) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENDashboardLastViewedEntity.LocalViewName(null, null) + " (" +
					 " [USERID]" +
					 ", [GETUPDATESFROMDATETIME]" +
					 ", [LASTVIEWEDDATE]" +
					 " ) VALUES (" +
					 " @ssUserID" +
					 ", @ssGetUpdatesFromDateTime" +
					 ", @ssLastViewedDate" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENDashboardLastViewed.ssUserID==0)) {
						insertSqlCmd.CreateParameter("@ssUserID", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssUserID", DbType.Int32, ssENDashboardLastViewed.ssUserID);
					}
					insertSqlCmd.CreateParameter("@ssGetUpdatesFromDateTime", DbType.DateTime, ssENDashboardLastViewed.ssGetUpdatesFromDateTime);
					insertSqlCmd.CreateParameter("@ssLastViewedDate", DbType.DateTime, ssENDashboardLastViewed.ssLastViewedDate);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateDashboardLastViewed", true), typeof(int));
				} else {
					outParamId = ssENDashboardLastViewed.ssId;
				}
			}
		}

		/// <summary>
		/// Action: DeleteDashboardLastViewed
		/// </summary>

		public static void DeleteDashboardLastViewed(HeContext heContext, int inParamId) {
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "DELETE " +
				 "FROM " + ENDashboardLastViewedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
				 "WHERE [ID] = @inParamId";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
				sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteDashboardLastViewed", true);
			}
		}

		/// <summary>
		/// Action: GetDashboardLastViewed
		/// </summary>

		public static void GetDashboardLastViewed(HeContext heContext, int inParamId, out RCDashboardLastViewedRecord outParamRecord) {
			outParamRecord = new RCDashboardLastViewedRecord(null);

			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "SELECT " +
				 " [ID]" +
				 ", [USERID]" +
				 ", [GETUPDATESFROMDATETIME]" +
				 ", [LASTVIEWEDDATE]" +
				 " FROM " + ENDashboardLastViewedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
				 "WHERE [ID] = @inParamId";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
				using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetDashboardLastViewed", true, false, false)) {
					if (reader.Read()) {
						outParamRecord.ReadDB(reader);
						outParamRecord.AllOptimizedAttributes = new BitArray[] {
							new BitArray(4, false)
						}
						;
					} else
					throw new DataBaseException(ENDashboardLastViewedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
				}
			}
		}

		/// <summary>
		/// Action: GetDashboardLastViewedForUpdate
		/// </summary>

		public static void GetDashboardLastViewedForUpdate(HeContext heContext, int inParamId, out RCDashboardLastViewedRecord outParamRecord) {
			outParamRecord = new RCDashboardLastViewedRecord(null);

			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "SELECT " +
				 " [ID]" +
				 ", [USERID]" +
				 ", [GETUPDATESFROMDATETIME]" +
				 ", [LASTVIEWEDDATE]" +
				 "FROM " + ENDashboardLastViewedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
				 "WHERE [ID] = @inParamId ";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
				using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetDashboardLastViewedForUpdate", true, false, false)) {
					if (reader.Read()) {
						outParamRecord.ReadDB(reader);
						outParamRecord.AllOptimizedAttributes = new BitArray[] {
							new BitArray(4, false)
						}
						;
					} else
					throw new DataBaseException(ENDashboardLastViewedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
				}
			}
		}

		/// <summary>
		/// Action: UpdateDashboardLastViewed
		/// </summary>

		public static void UpdateDashboardLastViewed(HeContext heContext, BitArray usedFields, RCDashboardLastViewedRecord inParamSource) {
			ENDashboardLastViewedEntityRecord ssENDashboardLastViewed = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				if (usedFields == null) {
					usedFields = new BitArray(4, true);
				}
				string updateSet = "SET NOCOUNT OFF; UPDATE " + ENDashboardLastViewedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
				string parameters = "";
				parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERID] = @ssUserID"): parameters);
				parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GETUPDATESFROMDATETIME] = @ssGetUpdatesFromDateTime"): parameters);
				parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTVIEWEDDATE] = @ssLastViewedDate"): parameters);
				string whereCondition = " WHERE [ID] = @ssENDashboardLastViewedssId";
				string sql = updateSet + parameters + whereCondition;
				Command sqlCmd = trans.CreateCommand(sql);
				int counter = 0;
				if (usedFields[1]) {
					if ((ssENDashboardLastViewed.ssUserID==0)) {
						sqlCmd.CreateParameter("@ssUserID", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssUserID", DbType.Int32, ssENDashboardLastViewed.ssUserID);
					}
					counter++;
				}
				if (usedFields[2]) {
					sqlCmd.CreateParameter("@ssGetUpdatesFromDateTime", DbType.DateTime, ssENDashboardLastViewed.ssGetUpdatesFromDateTime);
					counter++;
				}
				if (usedFields[3]) {
					sqlCmd.CreateParameter("@ssLastViewedDate", DbType.DateTime, ssENDashboardLastViewed.ssLastViewedDate);
					counter++;
				}
				if (counter == 0) {
					string dummyUpdate = "[GETUPDATESFROMDATETIME] = [GETUPDATESFROMDATETIME]";
					string noUpdate = updateSet + dummyUpdate + whereCondition;
					sqlCmd = trans.CreateCommand(noUpdate);
				}
				sqlCmd.CreateParameter("@ssENDashboardLastViewedssId", DbType.Int32, ssENDashboardLastViewed.ssId);
				if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateDashboardLastViewed", true) <= 0)
				throw new DataBaseException(ENDashboardLastViewedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENDashboardLastViewed.ssId + " was not updated");
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("DashboardLastViewed")]
	public class WORCDashboardLastViewedRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("UserID")]
		public int varWSUserID;

		[System.Xml.Serialization.XmlElement("GetUpdatesFromDateTime", DataType= "date")]
		public DateTime varWSGetUpdatesFromDateTime;

		[System.Xml.Serialization.XmlElement("LastViewedDate", DataType= "date")]
		public DateTime varWSLastViewedDate;

		public WORCDashboardLastViewedRecord() {
			varWSId = (int) 0;
			varWSUserID = (int) 0;
			varWSGetUpdatesFromDateTime = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLastViewedDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCDashboardLastViewedRecord(ENDashboardLastViewedEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSUserID = (int) r.ssUserID;
			varWSGetUpdatesFromDateTime = (DateTime) r.ssGetUpdatesFromDateTime;
			varWSLastViewedDate = (DateTime) r.ssLastViewedDate;
		}

		public static RLDashboardLastViewedList ToRecordList(WORCDashboardLastViewedRecord[] array) {
			RLDashboardLastViewedList rl = new RLDashboardLastViewedList();
			if (array != null) {
				foreach(WORCDashboardLastViewedRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCDashboardLastViewedRecord[] FromRecordList(RLDashboardLastViewedList rl) {
			WORCDashboardLastViewedRecord[] array = new WORCDashboardLastViewedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCDashboardLastViewedRecord {
		public static implicit operator WORCDashboardLastViewedRecord(RCDashboardLastViewedRecord r) {
			return new WORCDashboardLastViewedRecord(r.ssENDashboardLastViewed);
		}

		public static implicit operator RCDashboardLastViewedRecord(WORCDashboardLastViewedRecord w) {
			RCDashboardLastViewedRecord r = new RCDashboardLastViewedRecord("");
			if (w != null) {
				r.ssENDashboardLastViewed = w;
			}
			return r;
		}

	}

	partial struct ENDashboardLastViewedEntityRecord {
		public static implicit operator WORCDashboardLastViewedRecord(ENDashboardLastViewedEntityRecord r) {
			return new WORCDashboardLastViewedRecord(r);
		}

		public static implicit operator ENDashboardLastViewedEntityRecord(WORCDashboardLastViewedRecord w) {
			ENDashboardLastViewedEntityRecord r = new ENDashboardLastViewedEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssUserID = (int) w.varWSUserID;
				r.ssGetUpdatesFromDateTime = (DateTime) w.varWSGetUpdatesFromDateTime;
				r.ssLastViewedDate = (DateTime) w.varWSLastViewedDate;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLDashboardLastViewedRecordList {
		public WORCDashboardLastViewedRecord[] Array;


		public WORLDashboardLastViewedRecordList(WORCDashboardLastViewedRecord[] r) {
			if (r == null)
			Array = new WORCDashboardLastViewedRecord[0];
			else
			Array = r;
		}
		public WORLDashboardLastViewedRecordList() {
			Array = new WORCDashboardLastViewedRecord[0];
		}

		public WORLDashboardLastViewedRecordList(RLDashboardLastViewedRecordList rl) {
			rl=(RLDashboardLastViewedRecordList) rl.Duplicate();
			Array = new WORCDashboardLastViewedRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCDashboardLastViewedRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLDashboardLastViewedRecordList {
		public static implicit operator RLDashboardLastViewedRecordList(WORCDashboardLastViewedRecord[] array) {
			RLDashboardLastViewedRecordList rl = new RLDashboardLastViewedRecordList();
			if (array != null) {
				foreach(WORCDashboardLastViewedRecord val in array) {
					rl.Append((RCDashboardLastViewedRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCDashboardLastViewedRecord[](RLDashboardLastViewedRecordList rl) {
			WORCDashboardLastViewedRecord[] array = new WORCDashboardLastViewedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCDashboardLastViewedRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLDashboardLastViewedRecordList {
		public static implicit operator RLDashboardLastViewedRecordList(WORLDashboardLastViewedRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLDashboardLastViewedRecordList(RLDashboardLastViewedRecordList rl) {
			return new WORLDashboardLastViewedRecordList(rl);
		}
		public static implicit operator WORCDashboardLastViewedRecord[](WORLDashboardLastViewedRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLDashboardLastViewedRecordList(WORCDashboardLastViewedRecord[] array) {
			return new WORLDashboardLastViewedRecordList(array);
		}
	}
}

