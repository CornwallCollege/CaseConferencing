/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENConfirmationMessageButtonsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			switch (locale == null ? "":
					locale.ToLowerInvariant()) {
				default:

					int pos;
					if (!string.IsNullOrEmpty(locale) && ((pos = locale.IndexOf('-')) > 0))
					return ViewName(tenant, locale.Substring(0, pos)); // fallback
					else
					return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(10), "OSUSR_pkx_ConfirmationMessageButtons");
				}
			}
		} // ENConfirmationMessageButtonsEntity

		/// <summary>
		/// Entity <code>ENConfirmationMessageButtonsEntityRecord</code> that represents the Service Studio
		///  entity <code>ConfirmationMessageButtons</code> <p> Description: </p>
		/// </summary>
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("ConfirmationMessageButtons", "yZAQGwkz1EyD7YTcF9f7qQ", "shmcdFKEAEWXZGfrlZEwCQ", 0, "OSUSR_pkx_ConfirmationMessageButtons", null)]
		[Serializable()]
		public partial struct ENConfirmationMessageButtonsEntityRecord: ISerializable, ITypedRecord<ENConfirmationMessageButtonsEntityRecord>, ISimpleRecord {
			private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*VEnmgBf2R0yc6DLVl_Vj6Q");
			private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*JB_MYgk9eUqdn5crXAiSJw");
			private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*PuAJFUmuA0qs22rfoIQoDA");
			private static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*7HkyRDkEGUayPzXa9mI4OA");

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
			[System.Xml.Serialization.XmlElement("Id")]
			private int _ssId;
			public int ssId {
				get {
					return _ssId;
				}
				set {
					if ((_ssId!=value) || OptimizedAttributes[0]) {
						ChangedAttributes = new BitArray(4, true);
						_ssId = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LABEL", 50, false, false, false)]
			[System.Xml.Serialization.XmlElement("Label")]
			private string _ssLabel;
			public string ssLabel {
				get {
					return _ssLabel;
				}
				set {
					if ((_ssLabel!=value) || OptimizedAttributes[1]) {
						ChangedAttributes[1] = true;
						_ssLabel = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
			[System.Xml.Serialization.XmlElement("Order")]
			private int _ssOrder;
			public int ssOrder {
				get {
					return _ssOrder;
				}
				set {
					if ((_ssOrder!=value) || OptimizedAttributes[2]) {
						ChangedAttributes[2] = true;
						_ssOrder = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false)]
			[System.Xml.Serialization.XmlElement("Is_Active")]
			private bool _ssIs_Active;
			public bool ssIs_Active {
				get {
					return _ssIs_Active;
				}
				set {
					if ((_ssIs_Active!=value) || OptimizedAttributes[3]) {
						ChangedAttributes[3] = true;
						_ssIs_Active = value;
					}
				}
			}


			public BitArray ChangedAttributes;

			public BitArray OptimizedAttributes;

			public ENConfirmationMessageButtonsEntityRecord(params string[] dummy) {
				ChangedAttributes = new BitArray(4, true);
				OptimizedAttributes = new BitArray(4, false);
				_ssId = 0;
				_ssLabel = "";
				_ssOrder = 0;
				_ssIs_Active = false;
			}

			public BitArray[] GetDefaultOptimizedValues() {
				BitArray[] all = new BitArray[0];
				return all;
			}

			public BitArray[] AllOptimizedAttributes {
				set {
					if (value == null) {
					} else {
					}
				}
				get {
					BitArray[] all = new BitArray[0];
					return all;
				}
			}

			/// <summary>
			/// Read a record from database
			/// </summary>
			/// <param name="r"> Data base reader</param>
			/// <param name="index"> index</param>
			public void Read(IDataReader r, ref int index) {
				ssId = r.ReadInteger(index++, "ConfirmationMessageButtons.Id", 0);
				ssLabel = r.ReadText(index++, "ConfirmationMessageButtons.Label", "");
				ssOrder = r.ReadInteger(index++, "ConfirmationMessageButtons.Order", 0);
				ssIs_Active = r.ReadBoolean(index++, "ConfirmationMessageButtons.Is_Active", false);
				ChangedAttributes = new BitArray(4, false);
				OptimizedAttributes = new BitArray(4, false);
			}
			/// <summary>
			/// Read from database
			/// </summary>
			/// <param name="r"> Data reader</param>
			public void ReadDB(IDataReader r) {
				int index = 0;
				Read(r, ref index);
			}

			/// <summary>
			/// Read from record
			/// </summary>
			/// <param name="r"> Record</param>
			public void ReadIM(ENConfirmationMessageButtonsEntityRecord r) {
				this = r;
			}


			public static bool operator == (ENConfirmationMessageButtonsEntityRecord a, ENConfirmationMessageButtonsEntityRecord b) {
				if (a.ssId != b.ssId) return false;
				if (a.ssLabel != b.ssLabel) return false;
				if (a.ssOrder != b.ssOrder) return false;
				if (a.ssIs_Active != b.ssIs_Active) return false;
				return true;
			}

			public static bool operator != (ENConfirmationMessageButtonsEntityRecord a, ENConfirmationMessageButtonsEntityRecord b) {
				return !(a==b);
			}

			public override bool Equals(object o) {
				if (o.GetType() != typeof(ENConfirmationMessageButtonsEntityRecord)) return false;
				return (this == (ENConfirmationMessageButtonsEntityRecord) o);
			}

			public override int GetHashCode() {
				try {
					return base.GetHashCode()
					^ ssId.GetHashCode()
					^ ssLabel.GetHashCode()
					^ ssOrder.GetHashCode()
					^ ssIs_Active.GetHashCode()
					;
				} catch {
					return base.GetHashCode();
				}
			}

			public void GetObjectData(SerializationInfo info, StreamingContext context) {
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				for (int i = 0; i < fields.Length; i++)
				if (fields[i] .FieldType.IsSerializable)
				info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
			}

			public ENConfirmationMessageButtonsEntityRecord(SerializationInfo info, StreamingContext context) {
				ChangedAttributes = new BitArray(4, true);
				OptimizedAttributes = new BitArray(4, false);
				_ssId = 0;
				_ssLabel = "";
				_ssOrder = 0;
				_ssIs_Active = false;
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fields[0] .FieldType.IsSerializable)
				_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
				if (fields[1] .FieldType.IsSerializable)
				_ssLabel = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
				if (fields[2] .FieldType.IsSerializable)
				_ssOrder = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
				if (fields[3] .FieldType.IsSerializable)
				_ssIs_Active = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			}

			public void RecursiveReset() {
			}

			public void InternalRecursiveSave() {
			}


			public ENConfirmationMessageButtonsEntityRecord Duplicate() {
				ENConfirmationMessageButtonsEntityRecord t;
				t._ssId = this._ssId;
				t._ssLabel = this._ssLabel;
				t._ssOrder = this._ssOrder;
				t._ssIs_Active = this._ssIs_Active;
				t.ChangedAttributes = new BitArray(4);
				t.OptimizedAttributes = new BitArray(4);
				for (int i = 0; i < 4; i++) {
					t.ChangedAttributes[i] = ChangedAttributes[i];
					t.OptimizedAttributes[i] = OptimizedAttributes[i];
				}
				return t;
			}

			IRecord IRecord.Duplicate() {
				return Duplicate();
			}

			public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
				System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
				if (fieldName != null) {
					VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
					fieldName = fieldName.ToLowerInvariant();
				}
				if (detailLevel > 0) {
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
				} else {
					VarValue.AppendDeferredEvaluationElement(recordElem);
				}
			}

			public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
				String head = VarValue.GetHead(fields);
				String tail = VarValue.GetTail(fields);
				variable.Found = false;
				if (head == "id") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
				} else if (head == "label") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
				} else if (head == "order") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
				} else if (head == "is_active") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
				}
				if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
			}

			public bool ChangedAttributeGet(GlobalObjectKey key) {
				if (key.Equals(IdId)) {
					return ChangedAttributes[0];
				} else if (key.Equals(IdLabel)) {
					return ChangedAttributes[1];
				} else if (key.Equals(IdOrder)) {
					return ChangedAttributes[2];
				} else if (key.Equals(IdIs_Active)) {
					return ChangedAttributes[3];
				} else {
					throw new Exception("Invalid key");
				}
			}

			public bool OptimizedAttributeGet(GlobalObjectKey key) {
				if (key.Equals(IdId)) {
					return OptimizedAttributes[0];
				} else if (key.Equals(IdLabel)) {
					return OptimizedAttributes[1];
				} else if (key.Equals(IdOrder)) {
					return OptimizedAttributes[2];
				} else if (key.Equals(IdIs_Active)) {
					return OptimizedAttributes[3];
				} else {
					throw new Exception("Invalid key");
				}
			}

			public object AttributeGet(GlobalObjectKey key) {
				if (key == IdId) {
					return ssId;
				} else if (key == IdLabel) {
					return ssLabel;
				} else if (key == IdOrder) {
					return ssOrder;
				} else if (key == IdIs_Active) {
					return ssIs_Active;
				} else {
					throw new Exception("Invalid key");
				}
			}
			public void FillFromOther(IRecord other) {
				ChangedAttributes = new BitArray(4);
				OptimizedAttributes = new BitArray(4);
				if (other == null) return;
				ssId = (int) other.AttributeGet(IdId);
				ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
				OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
				ssLabel = (string) other.AttributeGet(IdLabel);
				ChangedAttributes[1] = other.ChangedAttributeGet(IdLabel);
				OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLabel);
				ssOrder = (int) other.AttributeGet(IdOrder);
				ChangedAttributes[2] = other.ChangedAttributeGet(IdOrder);
				OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOrder);
				ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
				ChangedAttributes[3] = other.ChangedAttributeGet(IdIs_Active);
				OptimizedAttributes[3] = other.OptimizedAttributeGet(IdIs_Active);
			}
		} // ENConfirmationMessageButtonsEntityRecord
		partial class ENConfirmationMessageButtonsEntity: StaticEntityRuntime {


			public class ENConfirmationMessageButtonsEntityRecordMetadata: StaticEntityRuntime.StaticRecordMetadata {
				public virtual int DataId {
					get {
						return (int) _dataId;
					}
				}

				protected override object IdReader(IDataReader r) {
					Object column = r["Data_Id"];
					return (column != System.DBNull.Value ? Convert.ToInt32(column): 0);
				}
			} // " + DeclStaticMetadataClass);


			private static ENConfirmationMessageButtonsEntity instance = new ENConfirmationMessageButtonsEntity(10, ObjectKey.Parse("yZAQGwkz1EyD7YTcF9f7qQ"));

			public static ENConfirmationMessageButtonsEntity GetInstance() {
				return instance;
			}

			private ENConfirmationMessageButtonsEntity(int espaceId, ObjectKey entityKey): base(espaceId, entityKey) {
			}


			protected override StaticRecordMetadata newStaticRecord() {
				return new ENConfirmationMessageButtonsEntityRecordMetadata();
			}

			private ENConfirmationMessageButtonsEntityRecord GetRecord(ENConfirmationMessageButtonsEntityRecordMetadata meta) {
				return GetRecord(meta.DataId);
			}

			private ENConfirmationMessageButtonsEntityRecord GetRecord(int id) {
				string locale = BuiltInFunction.GetCurrentLocale();
				Object recordObj = RecordsById(locale)[id];
				if (recordObj != null) {
					return (ENConfirmationMessageButtonsEntityRecord) recordObj;
				} else {
					using(Transaction tran = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {

						int pos = 0;
						ENConfirmationMessageButtonsEntityRecord record = new ENConfirmationMessageButtonsEntityRecord(null);

						string sql= "SELECT TOP (1) " +
						 " [ID]  o1" +
						 ", [LABEL]  o2" +
						 ", [ORDER]  o3" +
						 ", [IS_ACTIVE]  o4" +
						 " FROM " + ENConfirmationMessageButtonsEntity.LocalViewName(null, locale) + " " +
						 " WHERE [ID] = @DataId";


						Command cmd = tran.CreateCommand(sql);
						cmd.CreateParameter("@DataId", DbType.Int32, id);

						using(IDataReader reader = cmd.ExecuteReader()) {
							if (reader.Read()) {
								record.Read(reader, ref pos);
								RecordsById(locale)[id] = record;
							} else {
								throw new DataBaseException(ViewName(null, "") + " with key " + id + " was not found.");
							}
						}
						return record;
					}

				}
			}

			public static ENConfirmationMessageButtonsEntityRecord GetRecordById(int id) {
				return instance.GetRecord(id);
			}

			public static ENConfirmationMessageButtonsEntityRecord GetRecordByName(string name) {
				ENConfirmationMessageButtonsEntityRecordMetadata meta = (ENConfirmationMessageButtonsEntityRecordMetadata) instance.GetRecordMetadataByName(name);
				if (meta == null || !meta.Valid) {
					throw new DataBaseException(ViewName(null, "") + ", record with Identifier " + name + " was not found.");
				}
				return instance.GetRecord(meta);
			}

			public static ENConfirmationMessageButtonsEntityRecord GetRecordByKey(ObjectKey key) {
				ENConfirmationMessageButtonsEntityRecordMetadata meta = (ENConfirmationMessageButtonsEntityRecordMetadata) instance.GetRecordMetadataByKey(key);
				if (meta == null || !meta.Valid) {
					throw new DataBaseException(ViewName(null, "") + ", record metadata '" + ObjectKeyUtils.DatabaseValue(key) + "' was " + (meta == null ? "not found": "invalid") + ".");
				}
				return instance.GetRecord(meta);
			}

		} // ENConfirmationMessageButtonsEntity;

		/// <summary>
		/// Structure <code>RCConfirmationMessageButtonsRecord</code>
		/// </summary>
		[Serializable()]
		public partial struct RCConfirmationMessageButtonsRecord: ISerializable, ITypedRecord<RCConfirmationMessageButtonsRecord> {
			private static readonly GlobalObjectKey IdConfirmationMessageButtons = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*eR6N5zBeCo7K4jixpMmukQ");

			public static void EnsureInitialized() {}
			[System.Xml.Serialization.XmlElement("ConfirmationMessageButtons")]
			public ENConfirmationMessageButtonsEntityRecord ssENConfirmationMessageButtons;


			public static implicit operator ENConfirmationMessageButtonsEntityRecord(RCConfirmationMessageButtonsRecord r) {
				return r.ssENConfirmationMessageButtons;
			}

			public static implicit operator RCConfirmationMessageButtonsRecord(ENConfirmationMessageButtonsEntityRecord r) {
				RCConfirmationMessageButtonsRecord res = new RCConfirmationMessageButtonsRecord(null);
				res.ssENConfirmationMessageButtons = r;
				return res;
			}

			public BitArray ChangedAttributes {
				set {
					ssENConfirmationMessageButtons.ChangedAttributes = value;
				}
				get {
					return ssENConfirmationMessageButtons.ChangedAttributes;
				}
			}
			public BitArray OptimizedAttributes;

			public RCConfirmationMessageButtonsRecord(params string[] dummy) {
				OptimizedAttributes = null;
				ssENConfirmationMessageButtons = new ENConfirmationMessageButtonsEntityRecord(null);
			}

			public BitArray[] GetDefaultOptimizedValues() {
				BitArray[] all = new BitArray[1];
				all[0] = new BitArray(4, false);
				return all;
			}

			public BitArray[] AllOptimizedAttributes {
				set {
					if (value == null) {
						ssENConfirmationMessageButtons.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					} else {
						ssENConfirmationMessageButtons.OptimizedAttributes = value[0];
					}
				}
				get {
					BitArray[] all = new BitArray[1];
					all[0] = ssENConfirmationMessageButtons.OptimizedAttributes;
					return all;
				}
			}

			/// <summary>
			/// Read a record from database
			/// </summary>
			/// <param name="r"> Data base reader</param>
			/// <param name="index"> index</param>
			public void Read(IDataReader r, ref int index) {
				ssENConfirmationMessageButtons.Read(r, ref index);
			}
			/// <summary>
			/// Read from database
			/// </summary>
			/// <param name="r"> Data reader</param>
			public void ReadDB(IDataReader r) {
				int index = 0;
				Read(r, ref index);
			}

			/// <summary>
			/// Read from record
			/// </summary>
			/// <param name="r"> Record</param>
			public void ReadIM(RCConfirmationMessageButtonsRecord r) {
				this = r;
			}


			public static bool operator == (RCConfirmationMessageButtonsRecord a, RCConfirmationMessageButtonsRecord b) {
				if (a.ssENConfirmationMessageButtons != b.ssENConfirmationMessageButtons) return false;
				return true;
			}

			public static bool operator != (RCConfirmationMessageButtonsRecord a, RCConfirmationMessageButtonsRecord b) {
				return !(a==b);
			}

			public override bool Equals(object o) {
				if (o.GetType() != typeof(RCConfirmationMessageButtonsRecord)) return false;
				return (this == (RCConfirmationMessageButtonsRecord) o);
			}

			public override int GetHashCode() {
				try {
					return base.GetHashCode()
					^ ssENConfirmationMessageButtons.GetHashCode()
					;
				} catch {
					return base.GetHashCode();
				}
			}

			public void GetObjectData(SerializationInfo info, StreamingContext context) {
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				for (int i = 0; i < fields.Length; i++)
				if (fields[i] .FieldType.IsSerializable)
				info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
			}

			public RCConfirmationMessageButtonsRecord(SerializationInfo info, StreamingContext context) {
				OptimizedAttributes = null;
				ssENConfirmationMessageButtons = new ENConfirmationMessageButtonsEntityRecord(null);
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fields[0] .FieldType.IsSerializable)
				ssENConfirmationMessageButtons = (ENConfirmationMessageButtonsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			}

			public void RecursiveReset() {
				ssENConfirmationMessageButtons.RecursiveReset();
			}

			public void InternalRecursiveSave() {
				ssENConfirmationMessageButtons.InternalRecursiveSave();
			}


			public RCConfirmationMessageButtonsRecord Duplicate() {
				RCConfirmationMessageButtonsRecord t;
				t.ssENConfirmationMessageButtons = (ENConfirmationMessageButtonsEntityRecord) this.ssENConfirmationMessageButtons.Duplicate();
				t.OptimizedAttributes = null;
				return t;
			}

			IRecord IRecord.Duplicate() {
				return Duplicate();
			}

			public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
				System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
				if (fieldName != null) {
					VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				}
				if (detailLevel > 0) {
					ssENConfirmationMessageButtons.ToXml(this, recordElem, "ConfirmationMessageButtons", detailLevel - 1);
				} else {
					VarValue.AppendDeferredEvaluationElement(recordElem);
				}
			}

			public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
				String head = VarValue.GetHead(fields);
				String tail = VarValue.GetTail(fields);
				variable.Found = false;
				if (head == "confirmationmessagebuttons") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".ConfirmationMessageButtons")) variable.Value = ssENConfirmationMessageButtons; else variable.Optimized = true;
					variable.SetFieldName("confirmationmessagebuttons");
				}
				if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
			}

			public bool ChangedAttributeGet(GlobalObjectKey key) {
				return ssENConfirmationMessageButtons.ChangedAttributeGet(key);
			}

			public bool OptimizedAttributeGet(GlobalObjectKey key) {
				return ssENConfirmationMessageButtons.OptimizedAttributeGet(key);
			}

			public object AttributeGet(GlobalObjectKey key) {
				if (key == IdConfirmationMessageButtons) {
					return ssENConfirmationMessageButtons;
				} else {
					throw new Exception("Invalid key");
				}
			}
			public void FillFromOther(IRecord other) {
				if (other == null) return;
				ssENConfirmationMessageButtons.FillFromOther((IRecord) other.AttributeGet(IdConfirmationMessageButtons));
			}
		} // RCConfirmationMessageButtonsRecord
		/// <summary>
		/// RecordList type <code>RLConfirmationMessageButtonsRecordList</code> that represents a record list
		///  of <code>ConfirmationMessageButtons</code>
		/// </summary>
		[Serializable()]
		public partial class RLConfirmationMessageButtonsRecordList: GenericRecordList<RCConfirmationMessageButtonsRecord>, IEnumerable, IEnumerator, ISerializable {
			public static void EnsureInitialized() {}

			protected override RCConfirmationMessageButtonsRecord GetElementDefaultValue() {
				return new RCConfirmationMessageButtonsRecord("");
			}

			public T[] ToArray<T>(Func<RCConfirmationMessageButtonsRecord, T> converter) {
				return ToArray(this, converter);
			}

			public static T[] ToArray<T>(RLConfirmationMessageButtonsRecordList recordlist, Func<RCConfirmationMessageButtonsRecord, T> converter) {
				T[] result = new T[recordlist.Length];
				recordlist.StartIteration();
				while (!recordlist.Eof) {
					result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
					recordlist.Advance();
				}
				recordlist.EndIteration();
				return result;
			}

			public static RLConfirmationMessageButtonsRecordList ToList<T>(T[] array, Func <T, RCConfirmationMessageButtonsRecord> converter) {
				RLConfirmationMessageButtonsRecordList result = new RLConfirmationMessageButtonsRecordList();
				if (array != null) {
					foreach(T item in array) {
						result.Append(converter(item));
					}
				}
				return result;
			}
			/// <summary>
			/// Default Constructor
			/// </summary>
			public RLConfirmationMessageButtonsRecordList(): base() {
			}

			/// <summary>
			/// Constructor with transaction parameter
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLConfirmationMessageButtonsRecordList(IDbTransaction trans): base(trans) {
			}

			/// <summary>
			/// Constructor with transaction parameter and alternate read method
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLConfirmationMessageButtonsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
				this.alternateReadDBMethod = alternateReadDBMethod;
			}

			/// <summary>
			/// Constructor declaration for serialization
			/// </summary>
			/// <param name="info"> SerializationInfo</param>
			/// <param name="context"> StreamingContext</param>
			public RLConfirmationMessageButtonsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
			}

			public override BitArray[] GetDefaultOptimizedValues() {
				BitArray[] def = new BitArray[1];
				def[0] = new BitArray(4, false);
				return def;
			}
			/// <summary>
			/// Create as new list
			/// </summary>
			/// <returns>The new record list</returns>
			protected override OSList<RCConfirmationMessageButtonsRecord> NewList() {
				return new RLConfirmationMessageButtonsRecordList();
			}


		} // RLConfirmationMessageButtonsRecordList

		/// <summary>
		/// RecordList type <code>RLConfirmationMessageButtonsList</code> that represents a record list of
		///  <code>Text, Boolean, Integer, Integer</code>
		/// </summary>
		[Serializable()]
		public partial class RLConfirmationMessageButtonsList: GenericRecordList<ENConfirmationMessageButtonsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
			public static void EnsureInitialized() {}

			protected override ENConfirmationMessageButtonsEntityRecord GetElementDefaultValue() {
				return new ENConfirmationMessageButtonsEntityRecord("");
			}

			public T[] ToArray<T>(Func<ENConfirmationMessageButtonsEntityRecord, T> converter) {
				return ToArray(this, converter);
			}

			public static T[] ToArray<T>(RLConfirmationMessageButtonsList recordlist, Func<ENConfirmationMessageButtonsEntityRecord, T> converter) {
				T[] result = new T[recordlist.Length];
				recordlist.StartIteration();
				while (!recordlist.Eof) {
					result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
					recordlist.Advance();
				}
				recordlist.EndIteration();
				return result;
			}

			public static RLConfirmationMessageButtonsList ToList<T>(T[] array, Func <T, ENConfirmationMessageButtonsEntityRecord> converter) {
				RLConfirmationMessageButtonsList result = new RLConfirmationMessageButtonsList();
				if (array != null) {
					foreach(T item in array) {
						result.Append(converter(item));
					}
				}
				return result;
			}
			/// <summary>
			/// Default Constructor
			/// </summary>
			public RLConfirmationMessageButtonsList(): base() {
			}

			/// <summary>
			/// Constructor with transaction parameter
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLConfirmationMessageButtonsList(IDbTransaction trans): base(trans) {
			}

			/// <summary>
			/// Constructor with transaction parameter and alternate read method
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLConfirmationMessageButtonsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
				this.alternateReadDBMethod = alternateReadDBMethod;
			}

			/// <summary>
			/// Constructor declaration for serialization
			/// </summary>
			/// <param name="info"> SerializationInfo</param>
			/// <param name="context"> StreamingContext</param>
			public RLConfirmationMessageButtonsList(SerializationInfo info, StreamingContext context): base(info, context) {
			}

			public override BitArray[] GetDefaultOptimizedValues() {
				BitArray[] def = new BitArray[0];
				return def;
			}
			/// <summary>
			/// Create as new list
			/// </summary>
			/// <returns>The new record list</returns>
			protected override OSList<ENConfirmationMessageButtonsEntityRecord> NewList() {
				return new RLConfirmationMessageButtonsList();
			}


		} // RLConfirmationMessageButtonsList
		public partial class ExtendedActions {
			/// <summary>
			/// Action: GetConfirmationMessageButtons
			/// </summary>

			public static void GetConfirmationMessageButtons(HeContext heContext, int inParamId, out RCConfirmationMessageButtonsRecord outParamRecord) {
				outParamRecord = new RCConfirmationMessageButtonsRecord(null);

				try {
					outParamRecord = ENConfirmationMessageButtonsEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [ID]" +
						 ", [LABEL]" +
						 ", [ORDER]" +
						 ", [IS_ACTIVE]" +
						 " FROM " + ENConfirmationMessageButtonsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [ID] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetConfirmationMessageButtons", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENConfirmationMessageButtonsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			}

		}
	}

	namespace ssCaseConferencing {
		[XmlType("ConfirmationMessageButtons")]
		public class WORCConfirmationMessageButtonsRecord {
			[System.Xml.Serialization.XmlElement("Id")]
			public int varWSId;

			[System.Xml.Serialization.XmlElement("Label")]
			public string varWSLabel;

			[System.Xml.Serialization.XmlElement("Order")]
			public int varWSOrder;

			[System.Xml.Serialization.XmlElement("Is_Active")]
			public bool varWSIs_Active;

			public WORCConfirmationMessageButtonsRecord() {
				varWSId = (int) 0;
				varWSLabel = (string) "";
				varWSOrder = (int) 0;
				varWSIs_Active = (bool) false;
			}

			public WORCConfirmationMessageButtonsRecord(ENConfirmationMessageButtonsEntityRecord r) {
				varWSId = (int) r.ssId;
				varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
				varWSOrder = (int) r.ssOrder;
				varWSIs_Active = (bool) r.ssIs_Active;
			}

			public static RLConfirmationMessageButtonsList ToRecordList(WORCConfirmationMessageButtonsRecord[] array) {
				RLConfirmationMessageButtonsList rl = new RLConfirmationMessageButtonsList();
				if (array != null) {
					foreach(WORCConfirmationMessageButtonsRecord val in array) {
						rl.Append(val);
					}
				}
				return rl;
			}

			public static WORCConfirmationMessageButtonsRecord[] FromRecordList(RLConfirmationMessageButtonsList rl) {
				WORCConfirmationMessageButtonsRecord[] array = new WORCConfirmationMessageButtonsRecord[rl == null ? 0: rl.Length];
				for (int i = 0; i < array.Length; i++) {
					array[i] = rl.Data[i];
				}
				return array;
			}
		}
	}

	namespace ssCaseConferencing {
		partial struct RCConfirmationMessageButtonsRecord {
			public static implicit operator WORCConfirmationMessageButtonsRecord(RCConfirmationMessageButtonsRecord r) {
				return new WORCConfirmationMessageButtonsRecord(r.ssENConfirmationMessageButtons);
			}

			public static implicit operator RCConfirmationMessageButtonsRecord(WORCConfirmationMessageButtonsRecord w) {
				RCConfirmationMessageButtonsRecord r = new RCConfirmationMessageButtonsRecord("");
				if (w != null) {
					r.ssENConfirmationMessageButtons = w;
				}
				return r;
			}

		}

		partial struct ENConfirmationMessageButtonsEntityRecord {
			public static implicit operator WORCConfirmationMessageButtonsRecord(ENConfirmationMessageButtonsEntityRecord r) {
				return new WORCConfirmationMessageButtonsRecord(r);
			}

			public static implicit operator ENConfirmationMessageButtonsEntityRecord(WORCConfirmationMessageButtonsRecord w) {
				ENConfirmationMessageButtonsEntityRecord r = new ENConfirmationMessageButtonsEntityRecord("");
				if (w != null) {
					r.ssId = (int) w.varWSId;
					r.ssLabel = ((string) w.varWSLabel ?? "");
					r.ssOrder = (int) w.varWSOrder;
					r.ssIs_Active = (bool) w.varWSIs_Active;
				}
				return r;
			}

		}
	}


	namespace ssCaseConferencing {
		[Serializable()]
		public partial class WORLConfirmationMessageButtonsRecordList {
			public WORCConfirmationMessageButtonsRecord[] Array;


			public WORLConfirmationMessageButtonsRecordList(WORCConfirmationMessageButtonsRecord[] r) {
				if (r == null)
				Array = new WORCConfirmationMessageButtonsRecord[0];
				else
				Array = r;
			}
			public WORLConfirmationMessageButtonsRecordList() {
				Array = new WORCConfirmationMessageButtonsRecord[0];
			}

			public WORLConfirmationMessageButtonsRecordList(RLConfirmationMessageButtonsRecordList rl) {
				rl=(RLConfirmationMessageButtonsRecordList) rl.Duplicate();
				Array = new WORCConfirmationMessageButtonsRecord[rl.Length];
				while (!rl.Eof) {
					Array[rl.CurrentRowNumber] = new WORCConfirmationMessageButtonsRecord(rl.CurrentRec);
					rl.Advance();
				}
			}

		}
	}

	namespace ssCaseConferencing {
		partial class RLConfirmationMessageButtonsRecordList {
			public static implicit operator RLConfirmationMessageButtonsRecordList(WORCConfirmationMessageButtonsRecord[] array) {
				RLConfirmationMessageButtonsRecordList rl = new RLConfirmationMessageButtonsRecordList();
				if (array != null) {
					foreach(WORCConfirmationMessageButtonsRecord val in array) {
						rl.Append((RCConfirmationMessageButtonsRecord) val);
					}
				}
				return rl;
			}
			public static implicit operator WORCConfirmationMessageButtonsRecord[](RLConfirmationMessageButtonsRecordList rl) {
				WORCConfirmationMessageButtonsRecord[] array = new WORCConfirmationMessageButtonsRecord[rl == null ? 0: rl.Length];
				for (int i = 0; i < array.Length; i++) {
					array[i] = (RCConfirmationMessageButtonsRecord) rl.Data[i];
				}
				return array;
			}
		}
	}

	namespace ssCaseConferencing {
		partial class WORLConfirmationMessageButtonsRecordList {
			public static implicit operator RLConfirmationMessageButtonsRecordList(WORLConfirmationMessageButtonsRecordList w) {
				return w.Array;
			}
			public static implicit operator WORLConfirmationMessageButtonsRecordList(RLConfirmationMessageButtonsRecordList rl) {
				return new WORLConfirmationMessageButtonsRecordList(rl);
			}
			public static implicit operator WORCConfirmationMessageButtonsRecord[](WORLConfirmationMessageButtonsRecordList w) {
				if (w != null) {
					return w.Array;
				}
				return null;
			}
			public static implicit operator WORLConfirmationMessageButtonsRecordList(WORCConfirmationMessageButtonsRecord[] array) {
				return new WORLConfirmationMessageButtonsRecordList(array);
			}
		}
	}

