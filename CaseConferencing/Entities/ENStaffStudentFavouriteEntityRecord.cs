/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStaffStudentFavouriteEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStaffStudentFavouriteEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStaffStudentFavouriteEntity.eSpaceId;
	} // ENStaffStudentFavouriteEntity

	/// <summary>
	/// Entity <code>ENStaffStudentFavouriteEntityRecord</code> that represents the Service Studio entity
	///  <code>StaffStudentFavourite</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StaffStudentFavourite", "zHScCiP1AEeAxNjSxavYVQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StaffStudentFavourite", "")]
	[Serializable()]
	public partial struct ENStaffStudentFavouriteEntityRecord: ISerializable, ITypedRecord<ENStaffStudentFavouriteEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*MMNzIm_AA0e4kvH1hiaz9A");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*yPJwHsdEf0G+XV2UG0XZNg");
		private static readonly GlobalObjectKey IdUserId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*I99h7Xhp0EyT7p6rkMFJ+w");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USERID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("UserId")]
		private int _ssUserId;
		public int ssUserId {
			get {
				return _ssUserId;
			}
			set {
				if ((_ssUserId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssUserId = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStaffStudentFavouriteEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssUserId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StaffStudentFavourite.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "StaffStudentFavourite.StudentReference", "");
			ssUserId = r.ReadEntityReference(index++, "StaffStudentFavourite.UserId", 0);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStaffStudentFavouriteEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStaffStudentFavouriteEntityRecord a, ENStaffStudentFavouriteEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssUserId != b.ssUserId) return false;
			return true;
		}

		public static bool operator != (ENStaffStudentFavouriteEntityRecord a, ENStaffStudentFavouriteEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStaffStudentFavouriteEntityRecord)) return false;
			return (this == (ENStaffStudentFavouriteEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssUserId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStaffStudentFavouriteEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssUserId = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssUserId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStaffStudentFavouriteEntityRecord Duplicate() {
			ENStaffStudentFavouriteEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssUserId = this._ssUserId;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserId")) VarValue.AppendAttribute(recordElem, "UserId", ssUserId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "UserId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "userid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserId")) variable.Value = ssUserId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdUserId)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdUserId)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdUserId) {
				return ssUserId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssUserId = (int) other.AttributeGet(IdUserId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdUserId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdUserId);
		}
	} // ENStaffStudentFavouriteEntityRecord
	/// <summary>
	/// Structure <code>RCStaffStudentFavouriteRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffStudentFavouriteRecord: ISerializable, ITypedRecord<RCStaffStudentFavouriteRecord> {
		private static readonly GlobalObjectKey IdStaffStudentFavourite = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*GJmXu+NTwwxhu3PRpD_28A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StaffStudentFavourite")]
		public ENStaffStudentFavouriteEntityRecord ssENStaffStudentFavourite;


		public static implicit operator ENStaffStudentFavouriteEntityRecord(RCStaffStudentFavouriteRecord r) {
			return r.ssENStaffStudentFavourite;
		}

		public static implicit operator RCStaffStudentFavouriteRecord(ENStaffStudentFavouriteEntityRecord r) {
			RCStaffStudentFavouriteRecord res = new RCStaffStudentFavouriteRecord(null);
			res.ssENStaffStudentFavourite = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStaffStudentFavourite.ChangedAttributes = value;
			}
			get {
				return ssENStaffStudentFavourite.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStaffStudentFavouriteRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStaffStudentFavourite = new ENStaffStudentFavouriteEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStaffStudentFavourite.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStaffStudentFavourite.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStaffStudentFavourite.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStaffStudentFavourite.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffStudentFavouriteRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffStudentFavouriteRecord a, RCStaffStudentFavouriteRecord b) {
			if (a.ssENStaffStudentFavourite != b.ssENStaffStudentFavourite) return false;
			return true;
		}

		public static bool operator != (RCStaffStudentFavouriteRecord a, RCStaffStudentFavouriteRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffStudentFavouriteRecord)) return false;
			return (this == (RCStaffStudentFavouriteRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStaffStudentFavourite.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffStudentFavouriteRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStaffStudentFavourite = new ENStaffStudentFavouriteEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStaffStudentFavourite = (ENStaffStudentFavouriteEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStaffStudentFavourite.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStaffStudentFavourite.InternalRecursiveSave();
		}


		public RCStaffStudentFavouriteRecord Duplicate() {
			RCStaffStudentFavouriteRecord t;
			t.ssENStaffStudentFavourite = (ENStaffStudentFavouriteEntityRecord) this.ssENStaffStudentFavourite.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStaffStudentFavourite.ToXml(this, recordElem, "StaffStudentFavourite", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staffstudentfavourite") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffStudentFavourite")) variable.Value = ssENStaffStudentFavourite; else variable.Optimized = true;
				variable.SetFieldName("staffstudentfavourite");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStaffStudentFavourite.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStaffStudentFavourite.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaffStudentFavourite) {
				return ssENStaffStudentFavourite;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStaffStudentFavourite.FillFromOther((IRecord) other.AttributeGet(IdStaffStudentFavourite));
		}
	} // RCStaffStudentFavouriteRecord
	/// <summary>
	/// RecordList type <code>RLStaffStudentFavouriteRecordList</code> that represents a record list of
	///  <code>StaffStudentFavourite</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffStudentFavouriteRecordList: GenericRecordList<RCStaffStudentFavouriteRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffStudentFavouriteRecord GetElementDefaultValue() {
			return new RCStaffStudentFavouriteRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffStudentFavouriteRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffStudentFavouriteRecordList recordlist, Func<RCStaffStudentFavouriteRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffStudentFavouriteRecordList ToList<T>(T[] array, Func <T, RCStaffStudentFavouriteRecord> converter) {
			RLStaffStudentFavouriteRecordList result = new RLStaffStudentFavouriteRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffStudentFavouriteRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffStudentFavouriteRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffStudentFavouriteRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffStudentFavouriteRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffStudentFavouriteRecord> NewList() {
			return new RLStaffStudentFavouriteRecordList();
		}


	} // RLStaffStudentFavouriteRecordList

	/// <summary>
	/// RecordList type <code>RLStaffStudentFavouriteList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffStudentFavouriteList: GenericRecordList<ENStaffStudentFavouriteEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStaffStudentFavouriteEntityRecord GetElementDefaultValue() {
			return new ENStaffStudentFavouriteEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStaffStudentFavouriteEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffStudentFavouriteList recordlist, Func<ENStaffStudentFavouriteEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffStudentFavouriteList ToList<T>(T[] array, Func <T, ENStaffStudentFavouriteEntityRecord> converter) {
			RLStaffStudentFavouriteList result = new RLStaffStudentFavouriteList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffStudentFavouriteList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffStudentFavouriteList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffStudentFavouriteList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffStudentFavouriteList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStaffStudentFavouriteEntityRecord> NewList() {
			return new RLStaffStudentFavouriteList();
		}


	} // RLStaffStudentFavouriteList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStaffStudentFavourite
		/// </summary>

		public static void CreateStaffStudentFavourite(HeContext heContext, RCStaffStudentFavouriteRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffStudentFavouriteEntity.eSpaceId;
				ENStaffStudentFavouriteEntityRecord ssENStaffStudentFavourite = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStaffStudentFavouriteEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [USERID]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssUserId" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStaffStudentFavourite.ssStudentReference);
					if ((ssENStaffStudentFavourite.ssUserId==0)) {
						insertSqlCmd.CreateParameter("@ssUserId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENStaffStudentFavourite.ssUserId);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStaffStudentFavourite", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStaffStudentFavourite
		/// </summary>

		public static void CreateOrUpdateStaffStudentFavourite(HeContext heContext, BitArray usedFields, RCStaffStudentFavouriteRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffStudentFavouriteEntity.eSpaceId;
				ENStaffStudentFavouriteEntityRecord ssENStaffStudentFavourite = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStaffStudentFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERID] = @ssUserId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStaffStudentFavouritessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStaffStudentFavourite.ssStudentReference);
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStaffStudentFavourite.ssUserId==0)) {
							sqlCmd.CreateParameter("@ssUserId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENStaffStudentFavourite.ssUserId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[USERID] = [USERID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStaffStudentFavouritessId", DbType.Int32, ssENStaffStudentFavourite.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStaffStudentFavourite (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStaffStudentFavouriteEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [USERID]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssUserId" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStaffStudentFavourite.ssStudentReference);
						if ((ssENStaffStudentFavourite.ssUserId==0)) {
							insertSqlCmd.CreateParameter("@ssUserId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENStaffStudentFavourite.ssUserId);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStaffStudentFavourite", true), typeof(int));
					} else {
						outParamId = ssENStaffStudentFavourite.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStaffStudentFavourite
		/// </summary>

		public static void DeleteStaffStudentFavourite(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffStudentFavouriteEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStaffStudentFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStaffStudentFavourite", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStaffStudentFavourite
		/// </summary>

		public static void GetStaffStudentFavourite(HeContext heContext, int inParamId, out RCStaffStudentFavouriteRecord outParamRecord) {
			outParamRecord = new RCStaffStudentFavouriteRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffStudentFavouriteEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [USERID]" +
					 " FROM " + ENStaffStudentFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStaffStudentFavourite", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENStaffStudentFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStaffStudentFavouriteForUpdate
		/// </summary>

		public static void GetStaffStudentFavouriteForUpdate(HeContext heContext, int inParamId, out RCStaffStudentFavouriteRecord outParamRecord) {
			outParamRecord = new RCStaffStudentFavouriteRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffStudentFavouriteEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [USERID]" +
					 "FROM " + ENStaffStudentFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStaffStudentFavouriteForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENStaffStudentFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStaffStudentFavourite
		/// </summary>

		public static void UpdateStaffStudentFavourite(HeContext heContext, BitArray usedFields, RCStaffStudentFavouriteRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffStudentFavouriteEntity.eSpaceId;
				ENStaffStudentFavouriteEntityRecord ssENStaffStudentFavourite = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStaffStudentFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERID] = @ssUserId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStaffStudentFavouritessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStaffStudentFavourite.ssStudentReference);
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStaffStudentFavourite.ssUserId==0)) {
							sqlCmd.CreateParameter("@ssUserId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENStaffStudentFavourite.ssUserId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[USERID] = [USERID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStaffStudentFavouritessId", DbType.Int32, ssENStaffStudentFavourite.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStaffStudentFavourite", true) <= 0)
					throw new DataBaseException(ENStaffStudentFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStaffStudentFavourite.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StaffStudentFavourite")]
	public class WORCStaffStudentFavouriteRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("UserId")]
		public int varWSUserId;

		public WORCStaffStudentFavouriteRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSUserId = (int) 0;
		}

		public WORCStaffStudentFavouriteRecord(ENStaffStudentFavouriteEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSUserId = (int) r.ssUserId;
		}

		public static RLStaffStudentFavouriteList ToRecordList(WORCStaffStudentFavouriteRecord[] array) {
			RLStaffStudentFavouriteList rl = new RLStaffStudentFavouriteList();
			if (array != null) {
				foreach(WORCStaffStudentFavouriteRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStaffStudentFavouriteRecord[] FromRecordList(RLStaffStudentFavouriteList rl) {
			WORCStaffStudentFavouriteRecord[] array = new WORCStaffStudentFavouriteRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStaffStudentFavouriteRecord {
		public static implicit operator WORCStaffStudentFavouriteRecord(RCStaffStudentFavouriteRecord r) {
			return new WORCStaffStudentFavouriteRecord(r.ssENStaffStudentFavourite);
		}

		public static implicit operator RCStaffStudentFavouriteRecord(WORCStaffStudentFavouriteRecord w) {
			RCStaffStudentFavouriteRecord r = new RCStaffStudentFavouriteRecord("");
			if (w != null) {
				r.ssENStaffStudentFavourite = w;
			}
			return r;
		}

	}

	partial struct ENStaffStudentFavouriteEntityRecord {
		public static implicit operator WORCStaffStudentFavouriteRecord(ENStaffStudentFavouriteEntityRecord r) {
			return new WORCStaffStudentFavouriteRecord(r);
		}

		public static implicit operator ENStaffStudentFavouriteEntityRecord(WORCStaffStudentFavouriteRecord w) {
			ENStaffStudentFavouriteEntityRecord r = new ENStaffStudentFavouriteEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssUserId = (int) w.varWSUserId;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffStudentFavouriteRecordList {
		public WORCStaffStudentFavouriteRecord[] Array;


		public WORLStaffStudentFavouriteRecordList(WORCStaffStudentFavouriteRecord[] r) {
			if (r == null)
			Array = new WORCStaffStudentFavouriteRecord[0];
			else
			Array = r;
		}
		public WORLStaffStudentFavouriteRecordList() {
			Array = new WORCStaffStudentFavouriteRecord[0];
		}

		public WORLStaffStudentFavouriteRecordList(RLStaffStudentFavouriteRecordList rl) {
			rl=(RLStaffStudentFavouriteRecordList) rl.Duplicate();
			Array = new WORCStaffStudentFavouriteRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStaffStudentFavouriteRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffStudentFavouriteRecordList {
		public static implicit operator RLStaffStudentFavouriteRecordList(WORCStaffStudentFavouriteRecord[] array) {
			RLStaffStudentFavouriteRecordList rl = new RLStaffStudentFavouriteRecordList();
			if (array != null) {
				foreach(WORCStaffStudentFavouriteRecord val in array) {
					rl.Append((RCStaffStudentFavouriteRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffStudentFavouriteRecord[](RLStaffStudentFavouriteRecordList rl) {
			WORCStaffStudentFavouriteRecord[] array = new WORCStaffStudentFavouriteRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStaffStudentFavouriteRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffStudentFavouriteRecordList {
		public static implicit operator RLStaffStudentFavouriteRecordList(WORLStaffStudentFavouriteRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffStudentFavouriteRecordList(RLStaffStudentFavouriteRecordList rl) {
			return new WORLStaffStudentFavouriteRecordList(rl);
		}
		public static implicit operator WORCStaffStudentFavouriteRecord[](WORLStaffStudentFavouriteRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffStudentFavouriteRecordList(WORCStaffStudentFavouriteRecord[] array) {
			return new WORLStaffStudentFavouriteRecordList(array);
		}
	}
}

