/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENAcademicYearsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENAcademicYearsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENAcademicYearsEntity.eSpaceId;
	} // ENAcademicYearsEntity

	/// <summary>
	/// Entity <code>ENAcademicYearsEntityRecord</code> that represents the Service Studio entity
	///  <code>AcademicYears</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("AcademicYears", "Q_Vjss34AECvwJ+aXUj+fQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_AcademicYears", "")]
	[Serializable()]
	public partial struct ENAcademicYearsEntityRecord: ISerializable, ITypedRecord<ENAcademicYearsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*82vgnQEQFkWvjGcyCOX__g");
		private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*kOJ2hjdTCkaMCrf_KkrXKQ");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*2GWufRC6vECMGWZqkOaK_Q");
		private static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*l6azD_qFNkufG6JQ1mvOaQ");
		private static readonly GlobalObjectKey IdFormatA = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*IMwL6V6XpE6TtfDnCzEKAQ");
		private static readonly GlobalObjectKey IdFormatB = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*g66K_OxJP02ZoV3_bnDoqg");
		private static readonly GlobalObjectKey IdFormatC = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Le0rYh2JNkCF16EP2CuoMw");
		private static readonly GlobalObjectKey IdFormatD = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*VN3Icir34U+PXT9Yn8GKzA");
		private static readonly GlobalObjectKey IdFormatE = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*AtFwfJUORk68mIbrJJHMkg");
		private static readonly GlobalObjectKey IdFormatF = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*0iAKsAn9EUGrSgUU2uZqiA");

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 50, false, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private string _ssId;
		public string ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(10, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LABEL", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Label")]
		private string _ssLabel;
		public string ssLabel {
			get {
				return _ssLabel;
			}
			set {
				if ((_ssLabel!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssLabel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssOrder = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_Active")]
		private bool _ssIs_Active;
		public bool ssIs_Active {
			get {
				return _ssIs_Active;
			}
			set {
				if ((_ssIs_Active!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssIs_Active = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("FORMATA", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("FormatA")]
		private string _ssFormatA;
		public string ssFormatA {
			get {
				return _ssFormatA;
			}
			set {
				if ((_ssFormatA!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssFormatA = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("FORMATB", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("FormatB")]
		private string _ssFormatB;
		public string ssFormatB {
			get {
				return _ssFormatB;
			}
			set {
				if ((_ssFormatB!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssFormatB = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("FORMATC", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("FormatC")]
		private string _ssFormatC;
		public string ssFormatC {
			get {
				return _ssFormatC;
			}
			set {
				if ((_ssFormatC!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssFormatC = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("FORMATD", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("FormatD")]
		private string _ssFormatD;
		public string ssFormatD {
			get {
				return _ssFormatD;
			}
			set {
				if ((_ssFormatD!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssFormatD = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("FORMATE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("FormatE")]
		private string _ssFormatE;
		public string ssFormatE {
			get {
				return _ssFormatE;
			}
			set {
				if ((_ssFormatE!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssFormatE = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("FORMATF", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("FormatF")]
		private string _ssFormatF;
		public string ssFormatF {
			get {
				return _ssFormatF;
			}
			set {
				if ((_ssFormatF!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssFormatF = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENAcademicYearsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(10, true);
			OptimizedAttributes = new BitArray(10, false);
			_ssId = "";
			_ssLabel = "";
			_ssOrder = 0;
			_ssIs_Active = false;
			_ssFormatA = "";
			_ssFormatB = "";
			_ssFormatC = "";
			_ssFormatD = "";
			_ssFormatE = "";
			_ssFormatF = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadText(index++, "AcademicYears.Id", "");
			ssLabel = r.ReadText(index++, "AcademicYears.Label", "");
			ssOrder = r.ReadInteger(index++, "AcademicYears.Order", 0);
			ssIs_Active = r.ReadBoolean(index++, "AcademicYears.Is_Active", false);
			ssFormatA = r.ReadText(index++, "AcademicYears.FormatA", "");
			ssFormatB = r.ReadText(index++, "AcademicYears.FormatB", "");
			ssFormatC = r.ReadText(index++, "AcademicYears.FormatC", "");
			ssFormatD = r.ReadText(index++, "AcademicYears.FormatD", "");
			ssFormatE = r.ReadText(index++, "AcademicYears.FormatE", "");
			ssFormatF = r.ReadText(index++, "AcademicYears.FormatF", "");
			ChangedAttributes = new BitArray(10, false);
			OptimizedAttributes = new BitArray(10, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENAcademicYearsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENAcademicYearsEntityRecord a, ENAcademicYearsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssLabel != b.ssLabel) return false;
			if (a.ssOrder != b.ssOrder) return false;
			if (a.ssIs_Active != b.ssIs_Active) return false;
			if (a.ssFormatA != b.ssFormatA) return false;
			if (a.ssFormatB != b.ssFormatB) return false;
			if (a.ssFormatC != b.ssFormatC) return false;
			if (a.ssFormatD != b.ssFormatD) return false;
			if (a.ssFormatE != b.ssFormatE) return false;
			if (a.ssFormatF != b.ssFormatF) return false;
			return true;
		}

		public static bool operator != (ENAcademicYearsEntityRecord a, ENAcademicYearsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENAcademicYearsEntityRecord)) return false;
			return (this == (ENAcademicYearsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssLabel.GetHashCode()
				^ ssOrder.GetHashCode()
				^ ssIs_Active.GetHashCode()
				^ ssFormatA.GetHashCode()
				^ ssFormatB.GetHashCode()
				^ ssFormatC.GetHashCode()
				^ ssFormatD.GetHashCode()
				^ ssFormatE.GetHashCode()
				^ ssFormatF.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENAcademicYearsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(10, true);
			OptimizedAttributes = new BitArray(10, false);
			_ssId = "";
			_ssLabel = "";
			_ssOrder = 0;
			_ssIs_Active = false;
			_ssFormatA = "";
			_ssFormatB = "";
			_ssFormatC = "";
			_ssFormatD = "";
			_ssFormatE = "";
			_ssFormatF = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssLabel = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssOrder = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssIs_Active = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssFormatA = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssFormatB = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssFormatC = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssFormatD = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssFormatE = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssFormatF = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENAcademicYearsEntityRecord Duplicate() {
			ENAcademicYearsEntityRecord t;
			t._ssId = this._ssId;
			t._ssLabel = this._ssLabel;
			t._ssOrder = this._ssOrder;
			t._ssIs_Active = this._ssIs_Active;
			t._ssFormatA = this._ssFormatA;
			t._ssFormatB = this._ssFormatB;
			t._ssFormatC = this._ssFormatC;
			t._ssFormatD = this._ssFormatD;
			t._ssFormatE = this._ssFormatE;
			t._ssFormatF = this._ssFormatF;
			t.ChangedAttributes = new BitArray(10);
			t.OptimizedAttributes = new BitArray(10);
			for (int i = 0; i < 10; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FormatA")) VarValue.AppendAttribute(recordElem, "FormatA", ssFormatA, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FormatA");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FormatB")) VarValue.AppendAttribute(recordElem, "FormatB", ssFormatB, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FormatB");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FormatC")) VarValue.AppendAttribute(recordElem, "FormatC", ssFormatC, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FormatC");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FormatD")) VarValue.AppendAttribute(recordElem, "FormatD", ssFormatD, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FormatD");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FormatE")) VarValue.AppendAttribute(recordElem, "FormatE", ssFormatE, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FormatE");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FormatF")) VarValue.AppendAttribute(recordElem, "FormatF", ssFormatF, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FormatF");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			} else if (head == "is_active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
			} else if (head == "formata") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FormatA")) variable.Value = ssFormatA; else variable.Optimized = true;
			} else if (head == "formatb") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FormatB")) variable.Value = ssFormatB; else variable.Optimized = true;
			} else if (head == "formatc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FormatC")) variable.Value = ssFormatC; else variable.Optimized = true;
			} else if (head == "formatd") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FormatD")) variable.Value = ssFormatD; else variable.Optimized = true;
			} else if (head == "formate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FormatE")) variable.Value = ssFormatE; else variable.Optimized = true;
			} else if (head == "formatf") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FormatF")) variable.Value = ssFormatF; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdIs_Active)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdFormatA)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdFormatB)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdFormatC)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdFormatD)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdFormatE)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdFormatF)) {
				return ChangedAttributes[9];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdIs_Active)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdFormatA)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdFormatB)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdFormatC)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdFormatD)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdFormatE)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdFormatF)) {
				return OptimizedAttributes[9];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdLabel) {
				return ssLabel;
			} else if (key == IdOrder) {
				return ssOrder;
			} else if (key == IdIs_Active) {
				return ssIs_Active;
			} else if (key == IdFormatA) {
				return ssFormatA;
			} else if (key == IdFormatB) {
				return ssFormatB;
			} else if (key == IdFormatC) {
				return ssFormatC;
			} else if (key == IdFormatD) {
				return ssFormatD;
			} else if (key == IdFormatE) {
				return ssFormatE;
			} else if (key == IdFormatF) {
				return ssFormatF;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(10);
			OptimizedAttributes = new BitArray(10);
			if (other == null) return;
			ssId = (string) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssLabel = (string) other.AttributeGet(IdLabel);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdLabel);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLabel);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOrder);
			ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdIs_Active);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdIs_Active);
			ssFormatA = (string) other.AttributeGet(IdFormatA);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdFormatA);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdFormatA);
			ssFormatB = (string) other.AttributeGet(IdFormatB);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdFormatB);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdFormatB);
			ssFormatC = (string) other.AttributeGet(IdFormatC);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdFormatC);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdFormatC);
			ssFormatD = (string) other.AttributeGet(IdFormatD);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdFormatD);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdFormatD);
			ssFormatE = (string) other.AttributeGet(IdFormatE);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdFormatE);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdFormatE);
			ssFormatF = (string) other.AttributeGet(IdFormatF);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdFormatF);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdFormatF);
		}
	} // ENAcademicYearsEntityRecord
	/// <summary>
	/// Static Entity <code>ENAcademicYearsEntity</code> gets the values for this static entity records in
	///  runtime <code>AcademicYears</code>
	/// </summary>
	partial class ENAcademicYearsEntity {


		static ENAcademicYearsEntity() {
			ENAcademicYearsEntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENAcademicYearsEntityRecord GetRecordById(string id) {
			return (ENAcademicYearsEntityRecord) RsseSpaceCaseConferencingCore.ENAcademicYearsEntity.GetRecordById(id);
		}

		public static ENAcademicYearsEntityRecord GetRecordByName(string name) {
			return (ENAcademicYearsEntityRecord) RsseSpaceCaseConferencingCore.ENAcademicYearsEntity.GetRecordByName(name);
		}

		public static ENAcademicYearsEntityRecord GetRecordByKey(ObjectKey key) {
			return (ENAcademicYearsEntityRecord) RsseSpaceCaseConferencingCore.ENAcademicYearsEntity.GetRecordByKey(key);
		}
	} // ENAcademicYearsEntity;
	/// <summary>
	/// Structure <code>RCAcademicYearsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAcademicYearsRecord: ISerializable, ITypedRecord<RCAcademicYearsRecord> {
		private static readonly GlobalObjectKey IdAcademicYears = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*s+Za7XpfGnL7R7G1Bxulmg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AcademicYears")]
		public ENAcademicYearsEntityRecord ssENAcademicYears;


		public static implicit operator ENAcademicYearsEntityRecord(RCAcademicYearsRecord r) {
			return r.ssENAcademicYears;
		}

		public static implicit operator RCAcademicYearsRecord(ENAcademicYearsEntityRecord r) {
			RCAcademicYearsRecord res = new RCAcademicYearsRecord(null);
			res.ssENAcademicYears = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENAcademicYears.ChangedAttributes = value;
			}
			get {
				return ssENAcademicYears.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCAcademicYearsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENAcademicYears = new ENAcademicYearsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(10, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENAcademicYears.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENAcademicYears.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENAcademicYears.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENAcademicYears.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAcademicYearsRecord r) {
			this = r;
		}


		public static bool operator == (RCAcademicYearsRecord a, RCAcademicYearsRecord b) {
			if (a.ssENAcademicYears != b.ssENAcademicYears) return false;
			return true;
		}

		public static bool operator != (RCAcademicYearsRecord a, RCAcademicYearsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAcademicYearsRecord)) return false;
			return (this == (RCAcademicYearsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENAcademicYears.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAcademicYearsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENAcademicYears = new ENAcademicYearsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENAcademicYears = (ENAcademicYearsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENAcademicYears.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENAcademicYears.InternalRecursiveSave();
		}


		public RCAcademicYearsRecord Duplicate() {
			RCAcademicYearsRecord t;
			t.ssENAcademicYears = (ENAcademicYearsEntityRecord) this.ssENAcademicYears.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENAcademicYears.ToXml(this, recordElem, "AcademicYears", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "academicyears") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYears")) variable.Value = ssENAcademicYears; else variable.Optimized = true;
				variable.SetFieldName("academicyears");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENAcademicYears.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENAcademicYears.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAcademicYears) {
				return ssENAcademicYears;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENAcademicYears.FillFromOther((IRecord) other.AttributeGet(IdAcademicYears));
		}
	} // RCAcademicYearsRecord
	/// <summary>
	/// RecordList type <code>RLAcademicYearsRecordList</code> that represents a record list of
	///  <code>AcademicYears</code>
	/// </summary>
	[Serializable()]
	public partial class RLAcademicYearsRecordList: GenericRecordList<RCAcademicYearsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAcademicYearsRecord GetElementDefaultValue() {
			return new RCAcademicYearsRecord("");
		}

		public T[] ToArray<T>(Func<RCAcademicYearsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAcademicYearsRecordList recordlist, Func<RCAcademicYearsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAcademicYearsRecordList ToList<T>(T[] array, Func <T, RCAcademicYearsRecord> converter) {
			RLAcademicYearsRecordList result = new RLAcademicYearsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAcademicYearsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAcademicYearsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAcademicYearsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAcademicYearsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(10, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAcademicYearsRecord> NewList() {
			return new RLAcademicYearsRecordList();
		}


	} // RLAcademicYearsRecordList

	/// <summary>
	/// RecordList type <code>RLAcademicYearsList</code> that represents a record list of <code>Text, Text,
	///  Text, Text, Text, Text, Text, Text, Boolean, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLAcademicYearsList: GenericRecordList<ENAcademicYearsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENAcademicYearsEntityRecord GetElementDefaultValue() {
			return new ENAcademicYearsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENAcademicYearsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAcademicYearsList recordlist, Func<ENAcademicYearsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAcademicYearsList ToList<T>(T[] array, Func <T, ENAcademicYearsEntityRecord> converter) {
			RLAcademicYearsList result = new RLAcademicYearsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAcademicYearsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAcademicYearsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAcademicYearsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAcademicYearsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENAcademicYearsEntityRecord> NewList() {
			return new RLAcademicYearsList();
		}


	} // RLAcademicYearsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetAcademicYears
		/// </summary>

		public static void GetAcademicYears(HeContext heContext, string inParamId, out RCAcademicYearsRecord outParamRecord) {
			outParamRecord = new RCAcademicYearsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENAcademicYearsEntity.eSpaceId;
				try {
					outParamRecord = ENAcademicYearsEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [ID]" +
						 ", [LABEL]" +
						 ", [ORDER]" +
						 ", [IS_ACTIVE]" +
						 ", [FORMATA]" +
						 ", [FORMATB]" +
						 ", [FORMATC]" +
						 ", [FORMATD]" +
						 ", [FORMATE]" +
						 ", [FORMATF]" +
						 " FROM " + ENAcademicYearsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [ID] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetAcademicYears", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENAcademicYearsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("AcademicYears")]
	public class WORCAcademicYearsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public string varWSId;

		[System.Xml.Serialization.XmlElement("Label")]
		public string varWSLabel;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		[System.Xml.Serialization.XmlElement("Is_Active")]
		public bool varWSIs_Active;

		[System.Xml.Serialization.XmlElement("FormatA")]
		public string varWSFormatA;

		[System.Xml.Serialization.XmlElement("FormatB")]
		public string varWSFormatB;

		[System.Xml.Serialization.XmlElement("FormatC")]
		public string varWSFormatC;

		[System.Xml.Serialization.XmlElement("FormatD")]
		public string varWSFormatD;

		[System.Xml.Serialization.XmlElement("FormatE")]
		public string varWSFormatE;

		[System.Xml.Serialization.XmlElement("FormatF")]
		public string varWSFormatF;

		public WORCAcademicYearsRecord() {
			varWSId = (string) "";
			varWSLabel = (string) "";
			varWSOrder = (int) 0;
			varWSIs_Active = (bool) false;
			varWSFormatA = (string) "";
			varWSFormatB = (string) "";
			varWSFormatC = (string) "";
			varWSFormatD = (string) "";
			varWSFormatE = (string) "";
			varWSFormatF = (string) "";
		}

		public WORCAcademicYearsRecord(ENAcademicYearsEntityRecord r) {
			varWSId = BaseAppUtils.RemoveControlChars(r.ssId);
			varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
			varWSOrder = (int) r.ssOrder;
			varWSIs_Active = (bool) r.ssIs_Active;
			varWSFormatA = BaseAppUtils.RemoveControlChars(r.ssFormatA);
			varWSFormatB = BaseAppUtils.RemoveControlChars(r.ssFormatB);
			varWSFormatC = BaseAppUtils.RemoveControlChars(r.ssFormatC);
			varWSFormatD = BaseAppUtils.RemoveControlChars(r.ssFormatD);
			varWSFormatE = BaseAppUtils.RemoveControlChars(r.ssFormatE);
			varWSFormatF = BaseAppUtils.RemoveControlChars(r.ssFormatF);
		}

		public static RLAcademicYearsList ToRecordList(WORCAcademicYearsRecord[] array) {
			RLAcademicYearsList rl = new RLAcademicYearsList();
			if (array != null) {
				foreach(WORCAcademicYearsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAcademicYearsRecord[] FromRecordList(RLAcademicYearsList rl) {
			WORCAcademicYearsRecord[] array = new WORCAcademicYearsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCAcademicYearsRecord {
		public static implicit operator WORCAcademicYearsRecord(RCAcademicYearsRecord r) {
			return new WORCAcademicYearsRecord(r.ssENAcademicYears);
		}

		public static implicit operator RCAcademicYearsRecord(WORCAcademicYearsRecord w) {
			RCAcademicYearsRecord r = new RCAcademicYearsRecord("");
			if (w != null) {
				r.ssENAcademicYears = w;
			}
			return r;
		}

	}

	partial struct ENAcademicYearsEntityRecord {
		public static implicit operator WORCAcademicYearsRecord(ENAcademicYearsEntityRecord r) {
			return new WORCAcademicYearsRecord(r);
		}

		public static implicit operator ENAcademicYearsEntityRecord(WORCAcademicYearsRecord w) {
			ENAcademicYearsEntityRecord r = new ENAcademicYearsEntityRecord("");
			if (w != null) {
				r.ssId = ((string) w.varWSId ?? "");
				r.ssLabel = ((string) w.varWSLabel ?? "");
				r.ssOrder = (int) w.varWSOrder;
				r.ssIs_Active = (bool) w.varWSIs_Active;
				r.ssFormatA = ((string) w.varWSFormatA ?? "");
				r.ssFormatB = ((string) w.varWSFormatB ?? "");
				r.ssFormatC = ((string) w.varWSFormatC ?? "");
				r.ssFormatD = ((string) w.varWSFormatD ?? "");
				r.ssFormatE = ((string) w.varWSFormatE ?? "");
				r.ssFormatF = ((string) w.varWSFormatF ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAcademicYearsRecordList {
		public WORCAcademicYearsRecord[] Array;


		public WORLAcademicYearsRecordList(WORCAcademicYearsRecord[] r) {
			if (r == null)
			Array = new WORCAcademicYearsRecord[0];
			else
			Array = r;
		}
		public WORLAcademicYearsRecordList() {
			Array = new WORCAcademicYearsRecord[0];
		}

		public WORLAcademicYearsRecordList(RLAcademicYearsRecordList rl) {
			rl=(RLAcademicYearsRecordList) rl.Duplicate();
			Array = new WORCAcademicYearsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAcademicYearsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAcademicYearsRecordList {
		public static implicit operator RLAcademicYearsRecordList(WORCAcademicYearsRecord[] array) {
			RLAcademicYearsRecordList rl = new RLAcademicYearsRecordList();
			if (array != null) {
				foreach(WORCAcademicYearsRecord val in array) {
					rl.Append((RCAcademicYearsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAcademicYearsRecord[](RLAcademicYearsRecordList rl) {
			WORCAcademicYearsRecord[] array = new WORCAcademicYearsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAcademicYearsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAcademicYearsRecordList {
		public static implicit operator RLAcademicYearsRecordList(WORLAcademicYearsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAcademicYearsRecordList(RLAcademicYearsRecordList rl) {
			return new WORLAcademicYearsRecordList(rl);
		}
		public static implicit operator WORCAcademicYearsRecord[](WORLAcademicYearsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAcademicYearsRecordList(WORCAcademicYearsRecord[] array) {
			return new WORLAcademicYearsRecordList(array);
		}
	}
}

