/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENRiskAssessmentKeepInformedEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENRiskAssessmentKeepInformedEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENRiskAssessmentKeepInformedEntity.eSpaceId;
	} // ENRiskAssessmentKeepInformedEntity

	/// <summary>
	/// Entity <code>ENRiskAssessmentKeepInformedEntityRecord</code> that represents the Service Studio
	///  entity <code>RiskAssessmentKeepInformed</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("RiskAssessmentKeepInformed", "VxUnhpI80Ey0xznY5qN8Mw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_RiskAssessmentKeepInformed", "")]
	[Serializable()]
	public partial struct ENRiskAssessmentKeepInformedEntityRecord: ISerializable, ITypedRecord<ENRiskAssessmentKeepInformedEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ltDTx7D0TUiUViDgPHjenw");
		private static readonly GlobalObjectKey IdRiskAssessment = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*FN6fQi1HZUueWkg51CypFw");
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*WOah7ju1bECOpN85fUQ94Q");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RISKASSESSMENT", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RiskAssessment")]
		private int _ssRiskAssessment;
		public int ssRiskAssessment {
			get {
				return _ssRiskAssessment;
			}
			set {
				if ((_ssRiskAssessment!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssRiskAssessment = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USER", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("User")]
		private int _ssUser;
		public int ssUser {
			get {
				return _ssUser;
			}
			set {
				if ((_ssUser!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssUser = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENRiskAssessmentKeepInformedEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssRiskAssessment = 0;
			_ssUser = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "RiskAssessmentKeepInformed.Id", 0);
			ssRiskAssessment = r.ReadEntityReference(index++, "RiskAssessmentKeepInformed.RiskAssessment", 0);
			ssUser = r.ReadEntityReference(index++, "RiskAssessmentKeepInformed.User", 0);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENRiskAssessmentKeepInformedEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENRiskAssessmentKeepInformedEntityRecord a, ENRiskAssessmentKeepInformedEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssRiskAssessment != b.ssRiskAssessment) return false;
			if (a.ssUser != b.ssUser) return false;
			return true;
		}

		public static bool operator != (ENRiskAssessmentKeepInformedEntityRecord a, ENRiskAssessmentKeepInformedEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENRiskAssessmentKeepInformedEntityRecord)) return false;
			return (this == (ENRiskAssessmentKeepInformedEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssRiskAssessment.GetHashCode()
				^ ssUser.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENRiskAssessmentKeepInformedEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssRiskAssessment = 0;
			_ssUser = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssRiskAssessment = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssUser = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENRiskAssessmentKeepInformedEntityRecord Duplicate() {
			ENRiskAssessmentKeepInformedEntityRecord t;
			t._ssId = this._ssId;
			t._ssRiskAssessment = this._ssRiskAssessment;
			t._ssUser = this._ssUser;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RiskAssessment")) VarValue.AppendAttribute(recordElem, "RiskAssessment", ssRiskAssessment, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RiskAssessment");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".User")) VarValue.AppendAttribute(recordElem, "User", ssUser, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "User");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "riskassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessment")) variable.Value = ssRiskAssessment; else variable.Optimized = true;
			} else if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssUser; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdRiskAssessment)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdUser)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdRiskAssessment)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdUser)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdRiskAssessment) {
				return ssRiskAssessment;
			} else if (key == IdUser) {
				return ssUser;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssRiskAssessment = (int) other.AttributeGet(IdRiskAssessment);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdRiskAssessment);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdRiskAssessment);
			ssUser = (int) other.AttributeGet(IdUser);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdUser);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdUser);
		}
	} // ENRiskAssessmentKeepInformedEntityRecord
	/// <summary>
	/// Structure <code>RCRiskAssessmentKeepInformedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRiskAssessmentKeepInformedRecord: ISerializable, ITypedRecord<RCRiskAssessmentKeepInformedRecord> {
		private static readonly GlobalObjectKey IdRiskAssessmentKeepInformed = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*4ftShLPK7Bjub7or9ZopWA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RiskAssessmentKeepInformed")]
		public ENRiskAssessmentKeepInformedEntityRecord ssENRiskAssessmentKeepInformed;


		public static implicit operator ENRiskAssessmentKeepInformedEntityRecord(RCRiskAssessmentKeepInformedRecord r) {
			return r.ssENRiskAssessmentKeepInformed;
		}

		public static implicit operator RCRiskAssessmentKeepInformedRecord(ENRiskAssessmentKeepInformedEntityRecord r) {
			RCRiskAssessmentKeepInformedRecord res = new RCRiskAssessmentKeepInformedRecord(null);
			res.ssENRiskAssessmentKeepInformed = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENRiskAssessmentKeepInformed.ChangedAttributes = value;
			}
			get {
				return ssENRiskAssessmentKeepInformed.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCRiskAssessmentKeepInformedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRiskAssessmentKeepInformed = new ENRiskAssessmentKeepInformedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRiskAssessmentKeepInformed.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENRiskAssessmentKeepInformed.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENRiskAssessmentKeepInformed.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRiskAssessmentKeepInformed.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRiskAssessmentKeepInformedRecord r) {
			this = r;
		}


		public static bool operator == (RCRiskAssessmentKeepInformedRecord a, RCRiskAssessmentKeepInformedRecord b) {
			if (a.ssENRiskAssessmentKeepInformed != b.ssENRiskAssessmentKeepInformed) return false;
			return true;
		}

		public static bool operator != (RCRiskAssessmentKeepInformedRecord a, RCRiskAssessmentKeepInformedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRiskAssessmentKeepInformedRecord)) return false;
			return (this == (RCRiskAssessmentKeepInformedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRiskAssessmentKeepInformed.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRiskAssessmentKeepInformedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRiskAssessmentKeepInformed = new ENRiskAssessmentKeepInformedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRiskAssessmentKeepInformed = (ENRiskAssessmentKeepInformedEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENRiskAssessmentKeepInformed.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRiskAssessmentKeepInformed.InternalRecursiveSave();
		}


		public RCRiskAssessmentKeepInformedRecord Duplicate() {
			RCRiskAssessmentKeepInformedRecord t;
			t.ssENRiskAssessmentKeepInformed = (ENRiskAssessmentKeepInformedEntityRecord) this.ssENRiskAssessmentKeepInformed.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRiskAssessmentKeepInformed.ToXml(this, recordElem, "RiskAssessmentKeepInformed", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "riskassessmentkeepinformed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentKeepInformed")) variable.Value = ssENRiskAssessmentKeepInformed; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentkeepinformed");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENRiskAssessmentKeepInformed.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENRiskAssessmentKeepInformed.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRiskAssessmentKeepInformed) {
				return ssENRiskAssessmentKeepInformed;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRiskAssessmentKeepInformed.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentKeepInformed));
		}
	} // RCRiskAssessmentKeepInformedRecord
	/// <summary>
	/// RecordList type <code>RLRiskAssessmentKeepInformedRecordList</code> that represents a record list
	///  of <code>RiskAssessmentKeepInformed</code>
	/// </summary>
	[Serializable()]
	public partial class RLRiskAssessmentKeepInformedRecordList: GenericRecordList<RCRiskAssessmentKeepInformedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRiskAssessmentKeepInformedRecord GetElementDefaultValue() {
			return new RCRiskAssessmentKeepInformedRecord("");
		}

		public T[] ToArray<T>(Func<RCRiskAssessmentKeepInformedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRiskAssessmentKeepInformedRecordList recordlist, Func<RCRiskAssessmentKeepInformedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRiskAssessmentKeepInformedRecordList ToList<T>(T[] array, Func <T, RCRiskAssessmentKeepInformedRecord> converter) {
			RLRiskAssessmentKeepInformedRecordList result = new RLRiskAssessmentKeepInformedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRiskAssessmentKeepInformedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentKeepInformedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentKeepInformedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRiskAssessmentKeepInformedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRiskAssessmentKeepInformedRecord> NewList() {
			return new RLRiskAssessmentKeepInformedRecordList();
		}


	} // RLRiskAssessmentKeepInformedRecordList

	/// <summary>
	/// RecordList type <code>RLRiskAssessmentKeepInformedList</code> that represents a record list of
	///  <code>UserIdentifier, Integer, RiskAssessmentIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLRiskAssessmentKeepInformedList: GenericRecordList<ENRiskAssessmentKeepInformedEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENRiskAssessmentKeepInformedEntityRecord GetElementDefaultValue() {
			return new ENRiskAssessmentKeepInformedEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENRiskAssessmentKeepInformedEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRiskAssessmentKeepInformedList recordlist, Func<ENRiskAssessmentKeepInformedEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRiskAssessmentKeepInformedList ToList<T>(T[] array, Func <T, ENRiskAssessmentKeepInformedEntityRecord> converter) {
			RLRiskAssessmentKeepInformedList result = new RLRiskAssessmentKeepInformedList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRiskAssessmentKeepInformedList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentKeepInformedList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentKeepInformedList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRiskAssessmentKeepInformedList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENRiskAssessmentKeepInformedEntityRecord> NewList() {
			return new RLRiskAssessmentKeepInformedList();
		}


	} // RLRiskAssessmentKeepInformedList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateRiskAssessmentKeepInformed
		/// </summary>

		public static void CreateRiskAssessmentKeepInformed(HeContext heContext, RCRiskAssessmentKeepInformedRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentKeepInformedEntity.eSpaceId;
				ENRiskAssessmentKeepInformedEntityRecord ssENRiskAssessmentKeepInformed = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENRiskAssessmentKeepInformedEntity.LocalViewName(null, null) + " (" +
					 " [RISKASSESSMENT]" +
					 ", [USER]" +
					 " ) VALUES (" +
					 " @ssRiskAssessment" +
					 ", @ssUser" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENRiskAssessmentKeepInformed.ssRiskAssessment==0)) {
						insertSqlCmd.CreateParameter("@ssRiskAssessment", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRiskAssessment", DbType.Int32, ssENRiskAssessmentKeepInformed.ssRiskAssessment);
					}
					if ((ssENRiskAssessmentKeepInformed.ssUser==0)) {
						insertSqlCmd.CreateParameter("@ssUser", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssUser", DbType.Int32, ssENRiskAssessmentKeepInformed.ssUser);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateRiskAssessmentKeepInformed", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateRiskAssessmentKeepInformed
		/// </summary>

		public static void CreateOrUpdateRiskAssessmentKeepInformed(HeContext heContext, BitArray usedFields, RCRiskAssessmentKeepInformedRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentKeepInformedEntity.eSpaceId;
				ENRiskAssessmentKeepInformedEntityRecord ssENRiskAssessmentKeepInformed = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRiskAssessmentKeepInformedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENT] = @ssRiskAssessment"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USER] = @ssUser"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRiskAssessmentKeepInformedssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENRiskAssessmentKeepInformed.ssRiskAssessment==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessment", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessment", DbType.Int32, ssENRiskAssessmentKeepInformed.ssRiskAssessment);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENRiskAssessmentKeepInformed.ssUser==0)) {
							sqlCmd.CreateParameter("@ssUser", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUser", DbType.Int32, ssENRiskAssessmentKeepInformed.ssUser);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[RISKASSESSMENT] = [RISKASSESSMENT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRiskAssessmentKeepInformedssId", DbType.Int32, ssENRiskAssessmentKeepInformed.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateRiskAssessmentKeepInformed (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENRiskAssessmentKeepInformedEntity.LocalViewName(null, null) + " (" +
						 " [RISKASSESSMENT]" +
						 ", [USER]" +
						 " ) VALUES (" +
						 " @ssRiskAssessment" +
						 ", @ssUser" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENRiskAssessmentKeepInformed.ssRiskAssessment==0)) {
							insertSqlCmd.CreateParameter("@ssRiskAssessment", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRiskAssessment", DbType.Int32, ssENRiskAssessmentKeepInformed.ssRiskAssessment);
						}
						if ((ssENRiskAssessmentKeepInformed.ssUser==0)) {
							insertSqlCmd.CreateParameter("@ssUser", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssUser", DbType.Int32, ssENRiskAssessmentKeepInformed.ssUser);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateRiskAssessmentKeepInformed", true), typeof(int));
					} else {
						outParamId = ssENRiskAssessmentKeepInformed.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteRiskAssessmentKeepInformed
		/// </summary>

		public static void DeleteRiskAssessmentKeepInformed(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentKeepInformedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENRiskAssessmentKeepInformedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteRiskAssessmentKeepInformed", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRiskAssessmentKeepInformed
		/// </summary>

		public static void GetRiskAssessmentKeepInformed(HeContext heContext, int inParamId, out RCRiskAssessmentKeepInformedRecord outParamRecord) {
			outParamRecord = new RCRiskAssessmentKeepInformedRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentKeepInformedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [RISKASSESSMENT]" +
					 ", [USER]" +
					 " FROM " + ENRiskAssessmentKeepInformedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRiskAssessmentKeepInformed", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENRiskAssessmentKeepInformedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRiskAssessmentKeepInformedForUpdate
		/// </summary>

		public static void GetRiskAssessmentKeepInformedForUpdate(HeContext heContext, int inParamId, out RCRiskAssessmentKeepInformedRecord outParamRecord) {
			outParamRecord = new RCRiskAssessmentKeepInformedRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentKeepInformedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [RISKASSESSMENT]" +
					 ", [USER]" +
					 "FROM " + ENRiskAssessmentKeepInformedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRiskAssessmentKeepInformedForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENRiskAssessmentKeepInformedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateRiskAssessmentKeepInformed
		/// </summary>

		public static void UpdateRiskAssessmentKeepInformed(HeContext heContext, BitArray usedFields, RCRiskAssessmentKeepInformedRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentKeepInformedEntity.eSpaceId;
				ENRiskAssessmentKeepInformedEntityRecord ssENRiskAssessmentKeepInformed = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRiskAssessmentKeepInformedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENT] = @ssRiskAssessment"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USER] = @ssUser"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRiskAssessmentKeepInformedssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENRiskAssessmentKeepInformed.ssRiskAssessment==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessment", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessment", DbType.Int32, ssENRiskAssessmentKeepInformed.ssRiskAssessment);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENRiskAssessmentKeepInformed.ssUser==0)) {
							sqlCmd.CreateParameter("@ssUser", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUser", DbType.Int32, ssENRiskAssessmentKeepInformed.ssUser);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[RISKASSESSMENT] = [RISKASSESSMENT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRiskAssessmentKeepInformedssId", DbType.Int32, ssENRiskAssessmentKeepInformed.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateRiskAssessmentKeepInformed", true) <= 0)
					throw new DataBaseException(ENRiskAssessmentKeepInformedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENRiskAssessmentKeepInformed.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("RiskAssessmentKeepInformed")]
	public class WORCRiskAssessmentKeepInformedRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("RiskAssessment")]
		public int varWSRiskAssessment;

		[System.Xml.Serialization.XmlElement("User")]
		public int varWSUser;

		public WORCRiskAssessmentKeepInformedRecord() {
			varWSId = (int) 0;
			varWSRiskAssessment = (int) 0;
			varWSUser = (int) 0;
		}

		public WORCRiskAssessmentKeepInformedRecord(ENRiskAssessmentKeepInformedEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSRiskAssessment = (int) r.ssRiskAssessment;
			varWSUser = (int) r.ssUser;
		}

		public static RLRiskAssessmentKeepInformedList ToRecordList(WORCRiskAssessmentKeepInformedRecord[] array) {
			RLRiskAssessmentKeepInformedList rl = new RLRiskAssessmentKeepInformedList();
			if (array != null) {
				foreach(WORCRiskAssessmentKeepInformedRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRiskAssessmentKeepInformedRecord[] FromRecordList(RLRiskAssessmentKeepInformedList rl) {
			WORCRiskAssessmentKeepInformedRecord[] array = new WORCRiskAssessmentKeepInformedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCRiskAssessmentKeepInformedRecord {
		public static implicit operator WORCRiskAssessmentKeepInformedRecord(RCRiskAssessmentKeepInformedRecord r) {
			return new WORCRiskAssessmentKeepInformedRecord(r.ssENRiskAssessmentKeepInformed);
		}

		public static implicit operator RCRiskAssessmentKeepInformedRecord(WORCRiskAssessmentKeepInformedRecord w) {
			RCRiskAssessmentKeepInformedRecord r = new RCRiskAssessmentKeepInformedRecord("");
			if (w != null) {
				r.ssENRiskAssessmentKeepInformed = w;
			}
			return r;
		}

	}

	partial struct ENRiskAssessmentKeepInformedEntityRecord {
		public static implicit operator WORCRiskAssessmentKeepInformedRecord(ENRiskAssessmentKeepInformedEntityRecord r) {
			return new WORCRiskAssessmentKeepInformedRecord(r);
		}

		public static implicit operator ENRiskAssessmentKeepInformedEntityRecord(WORCRiskAssessmentKeepInformedRecord w) {
			ENRiskAssessmentKeepInformedEntityRecord r = new ENRiskAssessmentKeepInformedEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssRiskAssessment = (int) w.varWSRiskAssessment;
				r.ssUser = (int) w.varWSUser;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRiskAssessmentKeepInformedRecordList {
		public WORCRiskAssessmentKeepInformedRecord[] Array;


		public WORLRiskAssessmentKeepInformedRecordList(WORCRiskAssessmentKeepInformedRecord[] r) {
			if (r == null)
			Array = new WORCRiskAssessmentKeepInformedRecord[0];
			else
			Array = r;
		}
		public WORLRiskAssessmentKeepInformedRecordList() {
			Array = new WORCRiskAssessmentKeepInformedRecord[0];
		}

		public WORLRiskAssessmentKeepInformedRecordList(RLRiskAssessmentKeepInformedRecordList rl) {
			rl=(RLRiskAssessmentKeepInformedRecordList) rl.Duplicate();
			Array = new WORCRiskAssessmentKeepInformedRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRiskAssessmentKeepInformedRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRiskAssessmentKeepInformedRecordList {
		public static implicit operator RLRiskAssessmentKeepInformedRecordList(WORCRiskAssessmentKeepInformedRecord[] array) {
			RLRiskAssessmentKeepInformedRecordList rl = new RLRiskAssessmentKeepInformedRecordList();
			if (array != null) {
				foreach(WORCRiskAssessmentKeepInformedRecord val in array) {
					rl.Append((RCRiskAssessmentKeepInformedRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRiskAssessmentKeepInformedRecord[](RLRiskAssessmentKeepInformedRecordList rl) {
			WORCRiskAssessmentKeepInformedRecord[] array = new WORCRiskAssessmentKeepInformedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRiskAssessmentKeepInformedRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRiskAssessmentKeepInformedRecordList {
		public static implicit operator RLRiskAssessmentKeepInformedRecordList(WORLRiskAssessmentKeepInformedRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRiskAssessmentKeepInformedRecordList(RLRiskAssessmentKeepInformedRecordList rl) {
			return new WORLRiskAssessmentKeepInformedRecordList(rl);
		}
		public static implicit operator WORCRiskAssessmentKeepInformedRecord[](WORLRiskAssessmentKeepInformedRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRiskAssessmentKeepInformedRecordList(WORCRiskAssessmentKeepInformedRecord[] array) {
			return new WORLRiskAssessmentKeepInformedRecordList(array);
		}
	}
}

