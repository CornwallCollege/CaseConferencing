/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENAcademicYear2Entity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCommonFunctions.ENAcademicYear2Entity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCommonFunctions.ENAcademicYear2Entity.eSpaceId;
	} // ENAcademicYear2Entity

	/// <summary>
	/// Entity <code>ENAcademicYear2EntityRecord</code> that represents the Service Studio entity
	///  <code>AcademicYear2</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("AcademicYear2", "S0+r3M8Is0avvnaqMbA4lw", "elYCxABMLUmEzEE8Goz65w", 0, "OSUSR_udf_AcademicYear", "")]
	[Serializable()]
	public partial struct ENAcademicYear2EntityRecord: ISerializable, ITypedRecord<ENAcademicYear2EntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*uaUUCQ8MSESvyZoo0lLiBw");
		private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*21a8RoevUUC166QCsJoEoQ");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*XOQdVBM4UUmoNpkRT3vipQ");
		private static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*5baXTeRRJ0C2TYEIgErTOA");
		private static readonly GlobalObjectKey IdYYYY = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*uJk_jXCdNU+FiksOXH6Azg");
		private static readonly GlobalObjectKey IdYY_YY = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*CZKTSHd7qkaz3alj3_UOHA");
		private static readonly GlobalObjectKey IdYYYY_YYYY = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*sxq_zZem80+m2aPcpAL34Q");
		private static readonly GlobalObjectKey IdDD_MMMM_YYYY = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*mfmfZkkeBki236M733B2Qw");
		private static readonly GlobalObjectKey IdYYYY_Academic = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*K+uT869bO0CyMexLfcKNKA");
		private static readonly GlobalObjectKey IdYYYY_MM_DD = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*xbWYHBDBBUGp0fono+2UMA");
		private static readonly GlobalObjectKey IdYYYYYYYY = GlobalObjectKey.Parse("elYCxABMLUmEzEE8Goz65w*O4_Xw5YpfkWF2dVExKug_w");

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 50, false, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private string _ssId;
		public string ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(11, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LABEL", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Label")]
		private string _ssLabel;
		public string ssLabel {
			get {
				return _ssLabel;
			}
			set {
				if ((_ssLabel!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssLabel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssOrder = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_Active")]
		private bool _ssIs_Active;
		public bool ssIs_Active {
			get {
				return _ssIs_Active;
			}
			set {
				if ((_ssIs_Active!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssIs_Active = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("YYYY", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("YYYY")]
		private string _ssYYYY;
		public string ssYYYY {
			get {
				return _ssYYYY;
			}
			set {
				if ((_ssYYYY!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssYYYY = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("YY_YY", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("YY_YY")]
		private string _ssYY_YY;
		public string ssYY_YY {
			get {
				return _ssYY_YY;
			}
			set {
				if ((_ssYY_YY!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssYY_YY = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("YYYY_YYYY", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("YYYY_YYYY")]
		private string _ssYYYY_YYYY;
		public string ssYYYY_YYYY {
			get {
				return _ssYYYY_YYYY;
			}
			set {
				if ((_ssYYYY_YYYY!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssYYYY_YYYY = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DD_MMMM_YYYY", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("DD_MMMM_YYYY")]
		private string _ssDD_MMMM_YYYY;
		public string ssDD_MMMM_YYYY {
			get {
				return _ssDD_MMMM_YYYY;
			}
			set {
				if ((_ssDD_MMMM_YYYY!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssDD_MMMM_YYYY = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("YYYY_ACADEMIC", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("YYYY_Academic")]
		private string _ssYYYY_Academic;
		public string ssYYYY_Academic {
			get {
				return _ssYYYY_Academic;
			}
			set {
				if ((_ssYYYY_Academic!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssYYYY_Academic = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("YYYY_MM_DD", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("YYYY_MM_DD")]
		private string _ssYYYY_MM_DD;
		public string ssYYYY_MM_DD {
			get {
				return _ssYYYY_MM_DD;
			}
			set {
				if ((_ssYYYY_MM_DD!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssYYYY_MM_DD = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("YYYYYYYY", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("YYYYYYYY")]
		private string _ssYYYYYYYY;
		public string ssYYYYYYYY {
			get {
				return _ssYYYYYYYY;
			}
			set {
				if ((_ssYYYYYYYY!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssYYYYYYYY = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENAcademicYear2EntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(11, true);
			OptimizedAttributes = new BitArray(11, false);
			_ssId = "";
			_ssLabel = "";
			_ssOrder = 0;
			_ssIs_Active = false;
			_ssYYYY = "";
			_ssYY_YY = "";
			_ssYYYY_YYYY = "";
			_ssDD_MMMM_YYYY = "";
			_ssYYYY_Academic = "";
			_ssYYYY_MM_DD = "";
			_ssYYYYYYYY = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadText(index++, "AcademicYear2.Id", "");
			ssLabel = r.ReadText(index++, "AcademicYear2.Label", "");
			ssOrder = r.ReadInteger(index++, "AcademicYear2.Order", 0);
			ssIs_Active = r.ReadBoolean(index++, "AcademicYear2.Is_Active", false);
			ssYYYY = r.ReadText(index++, "AcademicYear2.YYYY", "");
			ssYY_YY = r.ReadText(index++, "AcademicYear2.YY_YY", "");
			ssYYYY_YYYY = r.ReadText(index++, "AcademicYear2.YYYY_YYYY", "");
			ssDD_MMMM_YYYY = r.ReadText(index++, "AcademicYear2.DD_MMMM_YYYY", "");
			ssYYYY_Academic = r.ReadText(index++, "AcademicYear2.YYYY_Academic", "");
			ssYYYY_MM_DD = r.ReadText(index++, "AcademicYear2.YYYY_MM_DD", "");
			ssYYYYYYYY = r.ReadText(index++, "AcademicYear2.YYYYYYYY", "");
			ChangedAttributes = new BitArray(11, false);
			OptimizedAttributes = new BitArray(11, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENAcademicYear2EntityRecord r) {
			this = r;
		}


		public static bool operator == (ENAcademicYear2EntityRecord a, ENAcademicYear2EntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssLabel != b.ssLabel) return false;
			if (a.ssOrder != b.ssOrder) return false;
			if (a.ssIs_Active != b.ssIs_Active) return false;
			if (a.ssYYYY != b.ssYYYY) return false;
			if (a.ssYY_YY != b.ssYY_YY) return false;
			if (a.ssYYYY_YYYY != b.ssYYYY_YYYY) return false;
			if (a.ssDD_MMMM_YYYY != b.ssDD_MMMM_YYYY) return false;
			if (a.ssYYYY_Academic != b.ssYYYY_Academic) return false;
			if (a.ssYYYY_MM_DD != b.ssYYYY_MM_DD) return false;
			if (a.ssYYYYYYYY != b.ssYYYYYYYY) return false;
			return true;
		}

		public static bool operator != (ENAcademicYear2EntityRecord a, ENAcademicYear2EntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENAcademicYear2EntityRecord)) return false;
			return (this == (ENAcademicYear2EntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssLabel.GetHashCode()
				^ ssOrder.GetHashCode()
				^ ssIs_Active.GetHashCode()
				^ ssYYYY.GetHashCode()
				^ ssYY_YY.GetHashCode()
				^ ssYYYY_YYYY.GetHashCode()
				^ ssDD_MMMM_YYYY.GetHashCode()
				^ ssYYYY_Academic.GetHashCode()
				^ ssYYYY_MM_DD.GetHashCode()
				^ ssYYYYYYYY.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENAcademicYear2EntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(11, true);
			OptimizedAttributes = new BitArray(11, false);
			_ssId = "";
			_ssLabel = "";
			_ssOrder = 0;
			_ssIs_Active = false;
			_ssYYYY = "";
			_ssYY_YY = "";
			_ssYYYY_YYYY = "";
			_ssDD_MMMM_YYYY = "";
			_ssYYYY_Academic = "";
			_ssYYYY_MM_DD = "";
			_ssYYYYYYYY = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssLabel = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssOrder = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssIs_Active = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssYYYY = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssYY_YY = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssYYYY_YYYY = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssDD_MMMM_YYYY = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssYYYY_Academic = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssYYYY_MM_DD = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssYYYYYYYY = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENAcademicYear2EntityRecord Duplicate() {
			ENAcademicYear2EntityRecord t;
			t._ssId = this._ssId;
			t._ssLabel = this._ssLabel;
			t._ssOrder = this._ssOrder;
			t._ssIs_Active = this._ssIs_Active;
			t._ssYYYY = this._ssYYYY;
			t._ssYY_YY = this._ssYY_YY;
			t._ssYYYY_YYYY = this._ssYYYY_YYYY;
			t._ssDD_MMMM_YYYY = this._ssDD_MMMM_YYYY;
			t._ssYYYY_Academic = this._ssYYYY_Academic;
			t._ssYYYY_MM_DD = this._ssYYYY_MM_DD;
			t._ssYYYYYYYY = this._ssYYYYYYYY;
			t.ChangedAttributes = new BitArray(11);
			t.OptimizedAttributes = new BitArray(11);
			for (int i = 0; i < 11; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".YYYY")) VarValue.AppendAttribute(recordElem, "YYYY", ssYYYY, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "YYYY");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".YY_YY")) VarValue.AppendAttribute(recordElem, "YY_YY", ssYY_YY, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "YY_YY");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".YYYY_YYYY")) VarValue.AppendAttribute(recordElem, "YYYY_YYYY", ssYYYY_YYYY, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "YYYY_YYYY");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DD_MMMM_YYYY")) VarValue.AppendAttribute(recordElem, "DD_MMMM_YYYY", ssDD_MMMM_YYYY, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DD_MMMM_YYYY");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".YYYY_Academic")) VarValue.AppendAttribute(recordElem, "YYYY_Academic", ssYYYY_Academic, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "YYYY_Academic");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".YYYY_MM_DD")) VarValue.AppendAttribute(recordElem, "YYYY_MM_DD", ssYYYY_MM_DD, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "YYYY_MM_DD");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".YYYYYYYY")) VarValue.AppendAttribute(recordElem, "YYYYYYYY", ssYYYYYYYY, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "YYYYYYYY");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			} else if (head == "is_active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
			} else if (head == "yyyy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".YYYY")) variable.Value = ssYYYY; else variable.Optimized = true;
			} else if (head == "yy_yy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".YY_YY")) variable.Value = ssYY_YY; else variable.Optimized = true;
			} else if (head == "yyyy_yyyy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".YYYY_YYYY")) variable.Value = ssYYYY_YYYY; else variable.Optimized = true;
			} else if (head == "dd_mmmm_yyyy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DD_MMMM_YYYY")) variable.Value = ssDD_MMMM_YYYY; else variable.Optimized = true;
			} else if (head == "yyyy_academic") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".YYYY_Academic")) variable.Value = ssYYYY_Academic; else variable.Optimized = true;
			} else if (head == "yyyy_mm_dd") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".YYYY_MM_DD")) variable.Value = ssYYYY_MM_DD; else variable.Optimized = true;
			} else if (head == "yyyyyyyy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".YYYYYYYY")) variable.Value = ssYYYYYYYY; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdIs_Active)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdYYYY)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdYY_YY)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdYYYY_YYYY)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdDD_MMMM_YYYY)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdYYYY_Academic)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdYYYY_MM_DD)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdYYYYYYYY)) {
				return ChangedAttributes[10];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdIs_Active)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdYYYY)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdYY_YY)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdYYYY_YYYY)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdDD_MMMM_YYYY)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdYYYY_Academic)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdYYYY_MM_DD)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdYYYYYYYY)) {
				return OptimizedAttributes[10];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdLabel) {
				return ssLabel;
			} else if (key == IdOrder) {
				return ssOrder;
			} else if (key == IdIs_Active) {
				return ssIs_Active;
			} else if (key == IdYYYY) {
				return ssYYYY;
			} else if (key == IdYY_YY) {
				return ssYY_YY;
			} else if (key == IdYYYY_YYYY) {
				return ssYYYY_YYYY;
			} else if (key == IdDD_MMMM_YYYY) {
				return ssDD_MMMM_YYYY;
			} else if (key == IdYYYY_Academic) {
				return ssYYYY_Academic;
			} else if (key == IdYYYY_MM_DD) {
				return ssYYYY_MM_DD;
			} else if (key == IdYYYYYYYY) {
				return ssYYYYYYYY;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(11);
			OptimizedAttributes = new BitArray(11);
			if (other == null) return;
			ssId = (string) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssLabel = (string) other.AttributeGet(IdLabel);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdLabel);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLabel);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOrder);
			ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdIs_Active);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdIs_Active);
			ssYYYY = (string) other.AttributeGet(IdYYYY);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdYYYY);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdYYYY);
			ssYY_YY = (string) other.AttributeGet(IdYY_YY);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdYY_YY);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdYY_YY);
			ssYYYY_YYYY = (string) other.AttributeGet(IdYYYY_YYYY);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdYYYY_YYYY);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdYYYY_YYYY);
			ssDD_MMMM_YYYY = (string) other.AttributeGet(IdDD_MMMM_YYYY);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdDD_MMMM_YYYY);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdDD_MMMM_YYYY);
			ssYYYY_Academic = (string) other.AttributeGet(IdYYYY_Academic);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdYYYY_Academic);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdYYYY_Academic);
			ssYYYY_MM_DD = (string) other.AttributeGet(IdYYYY_MM_DD);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdYYYY_MM_DD);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdYYYY_MM_DD);
			ssYYYYYYYY = (string) other.AttributeGet(IdYYYYYYYY);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdYYYYYYYY);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdYYYYYYYY);
		}
	} // ENAcademicYear2EntityRecord
	/// <summary>
	/// Static Entity <code>ENAcademicYear2Entity</code> gets the values for this static entity records in
	///  runtime <code>AcademicYear2</code>
	/// </summary>
	partial class ENAcademicYear2Entity {


		static ENAcademicYear2Entity() {
			ENAcademicYear2EntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENAcademicYear2EntityRecord GetRecordById(string id) {
			return (ENAcademicYear2EntityRecord) RsseSpaceCommonFunctions.ENAcademicYear2Entity.GetRecordById(id);
		}

		public static ENAcademicYear2EntityRecord GetRecordByName(string name) {
			return (ENAcademicYear2EntityRecord) RsseSpaceCommonFunctions.ENAcademicYear2Entity.GetRecordByName(name);
		}

		public static ENAcademicYear2EntityRecord GetRecordByKey(ObjectKey key) {
			return (ENAcademicYear2EntityRecord) RsseSpaceCommonFunctions.ENAcademicYear2Entity.GetRecordByKey(key);
		}
	} // ENAcademicYear2Entity;
	/// <summary>
	/// Structure <code>RCAcademicYear2Record</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAcademicYear2Record: ISerializable, ITypedRecord<RCAcademicYear2Record> {
		private static readonly GlobalObjectKey IdAcademicYear2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*nljK+MAhUUr8+LBETNlV9g");

		public static void EnsureInitialized() {}

		static RCAcademicYear2Record() {
			ssCaseConferencing.RCAcademicYear2RecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("AcademicYear2")]
		public ENAcademicYear2EntityRecord ssENAcademicYear2;


		public static implicit operator ENAcademicYear2EntityRecord(RCAcademicYear2Record r) {
			return r.ssENAcademicYear2;
		}

		public static implicit operator RCAcademicYear2Record(ENAcademicYear2EntityRecord r) {
			RCAcademicYear2Record res = new RCAcademicYear2Record(null);
			res.ssENAcademicYear2 = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENAcademicYear2.ChangedAttributes = value;
			}
			get {
				return ssENAcademicYear2.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCAcademicYear2Record(params string[] dummy) {
			OptimizedAttributes = null;
			ssENAcademicYear2 = new ENAcademicYear2EntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(11, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENAcademicYear2.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENAcademicYear2.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENAcademicYear2.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENAcademicYear2.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAcademicYear2Record r) {
			this = r;
		}


		public static bool operator == (RCAcademicYear2Record a, RCAcademicYear2Record b) {
			if (a.ssENAcademicYear2 != b.ssENAcademicYear2) return false;
			return true;
		}

		public static bool operator != (RCAcademicYear2Record a, RCAcademicYear2Record b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAcademicYear2Record)) return false;
			return (this == (RCAcademicYear2Record) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENAcademicYear2.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAcademicYear2Record(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENAcademicYear2 = new ENAcademicYear2EntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENAcademicYear2 = (ENAcademicYear2EntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENAcademicYear2.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENAcademicYear2.InternalRecursiveSave();
		}


		public RCAcademicYear2Record Duplicate() {
			RCAcademicYear2Record t;
			t.ssENAcademicYear2 = (ENAcademicYear2EntityRecord) this.ssENAcademicYear2.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENAcademicYear2.ToXml(this, recordElem, "AcademicYear2", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "academicyear2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYear2")) variable.Value = ssENAcademicYear2; else variable.Optimized = true;
				variable.SetFieldName("academicyear2");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENAcademicYear2.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENAcademicYear2.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAcademicYear2) {
				return ssENAcademicYear2;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENAcademicYear2.FillFromOther((IRecord) other.AttributeGet(IdAcademicYear2));
		}
	} // RCAcademicYear2Record
	/// <summary>
	/// RecordList type <code>RLAcademicYear2RecordList</code> that represents a record list of
	///  <code>AcademicYear2</code>
	/// </summary>
	[Serializable()]
	public partial class RLAcademicYear2RecordList: GenericRecordList<RCAcademicYear2Record>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAcademicYear2Record GetElementDefaultValue() {
			return new RCAcademicYear2Record("");
		}

		public T[] ToArray<T>(Func<RCAcademicYear2Record, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAcademicYear2RecordList recordlist, Func<RCAcademicYear2Record, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAcademicYear2RecordList ToList<T>(T[] array, Func <T, RCAcademicYear2Record> converter) {
			RLAcademicYear2RecordList result = new RLAcademicYear2RecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAcademicYear2RecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAcademicYear2RecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAcademicYear2RecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAcademicYear2RecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(11, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAcademicYear2Record> NewList() {
			return new RLAcademicYear2RecordList();
		}


	} // RLAcademicYear2RecordList

	/// <summary>
	/// RecordList type <code>RLAcademicYear2List</code> that represents a record list of <code>Text, Text,
	///  Text, Text, Text, Text, Text, Text, Text, Boolean, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLAcademicYear2List: GenericRecordList<ENAcademicYear2EntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENAcademicYear2EntityRecord GetElementDefaultValue() {
			return new ENAcademicYear2EntityRecord("");
		}

		public T[] ToArray<T>(Func<ENAcademicYear2EntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAcademicYear2List recordlist, Func<ENAcademicYear2EntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAcademicYear2List ToList<T>(T[] array, Func <T, ENAcademicYear2EntityRecord> converter) {
			RLAcademicYear2List result = new RLAcademicYear2List();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAcademicYear2List(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAcademicYear2List(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAcademicYear2List(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAcademicYear2List(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENAcademicYear2EntityRecord> NewList() {
			return new RLAcademicYear2List();
		}


	} // RLAcademicYear2List
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetAcademicYear2
		/// </summary>

		public static void GetAcademicYear2(HeContext heContext, string inParamId, out RCAcademicYear2Record outParamRecord) {
			outParamRecord = new RCAcademicYear2Record(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENAcademicYear2Entity.eSpaceId;
				try {
					outParamRecord = ENAcademicYear2Entity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [ID]" +
						 ", [LABEL]" +
						 ", [ORDER]" +
						 ", [IS_ACTIVE]" +
						 ", [YYYY]" +
						 ", [YY_YY]" +
						 ", [YYYY_YYYY]" +
						 ", [DD_MMMM_YYYY]" +
						 ", [YYYY_ACADEMIC]" +
						 ", [YYYY_MM_DD]" +
						 ", [YYYYYYYY]" +
						 " FROM " + ENAcademicYear2Entity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [ID] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetAcademicYear2", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENAcademicYear2Entity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("AcademicYear")]
	public class WORCAcademicYear2Record {
		[System.Xml.Serialization.XmlElement("Id")]
		public string varWSId;

		[System.Xml.Serialization.XmlElement("Label")]
		public string varWSLabel;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		[System.Xml.Serialization.XmlElement("Is_Active")]
		public bool varWSIs_Active;

		[System.Xml.Serialization.XmlElement("YYYY")]
		public string varWSYYYY;

		[System.Xml.Serialization.XmlElement("YY_YY")]
		public string varWSYY_YY;

		[System.Xml.Serialization.XmlElement("YYYY_YYYY")]
		public string varWSYYYY_YYYY;

		[System.Xml.Serialization.XmlElement("DD_MMMM_YYYY")]
		public string varWSDD_MMMM_YYYY;

		[System.Xml.Serialization.XmlElement("YYYY_Academic")]
		public string varWSYYYY_Academic;

		[System.Xml.Serialization.XmlElement("YYYY_MM_DD")]
		public string varWSYYYY_MM_DD;

		[System.Xml.Serialization.XmlElement("YYYYYYYY")]
		public string varWSYYYYYYYY;

		public WORCAcademicYear2Record() {
			varWSId = (string) "";
			varWSLabel = (string) "";
			varWSOrder = (int) 0;
			varWSIs_Active = (bool) false;
			varWSYYYY = (string) "";
			varWSYY_YY = (string) "";
			varWSYYYY_YYYY = (string) "";
			varWSDD_MMMM_YYYY = (string) "";
			varWSYYYY_Academic = (string) "";
			varWSYYYY_MM_DD = (string) "";
			varWSYYYYYYYY = (string) "";
		}

		public WORCAcademicYear2Record(ENAcademicYear2EntityRecord r) {
			varWSId = BaseAppUtils.RemoveControlChars(r.ssId);
			varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
			varWSOrder = (int) r.ssOrder;
			varWSIs_Active = (bool) r.ssIs_Active;
			varWSYYYY = BaseAppUtils.RemoveControlChars(r.ssYYYY);
			varWSYY_YY = BaseAppUtils.RemoveControlChars(r.ssYY_YY);
			varWSYYYY_YYYY = BaseAppUtils.RemoveControlChars(r.ssYYYY_YYYY);
			varWSDD_MMMM_YYYY = BaseAppUtils.RemoveControlChars(r.ssDD_MMMM_YYYY);
			varWSYYYY_Academic = BaseAppUtils.RemoveControlChars(r.ssYYYY_Academic);
			varWSYYYY_MM_DD = BaseAppUtils.RemoveControlChars(r.ssYYYY_MM_DD);
			varWSYYYYYYYY = BaseAppUtils.RemoveControlChars(r.ssYYYYYYYY);
		}

		public static RLAcademicYear2List ToRecordList(WORCAcademicYear2Record[] array) {
			RLAcademicYear2List rl = new RLAcademicYear2List();
			if (array != null) {
				foreach(WORCAcademicYear2Record val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAcademicYear2Record[] FromRecordList(RLAcademicYear2List rl) {
			WORCAcademicYear2Record[] array = new WORCAcademicYear2Record[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCAcademicYear2Record {
		public static implicit operator WORCAcademicYear2Record(RCAcademicYear2Record r) {
			return new WORCAcademicYear2Record(r.ssENAcademicYear2);
		}

		public static implicit operator RCAcademicYear2Record(WORCAcademicYear2Record w) {
			RCAcademicYear2Record r = new RCAcademicYear2Record("");
			if (w != null) {
				r.ssENAcademicYear2 = w;
			}
			return r;
		}

	}

	partial struct ENAcademicYear2EntityRecord {
		public static implicit operator WORCAcademicYear2Record(ENAcademicYear2EntityRecord r) {
			return new WORCAcademicYear2Record(r);
		}

		public static implicit operator ENAcademicYear2EntityRecord(WORCAcademicYear2Record w) {
			ENAcademicYear2EntityRecord r = new ENAcademicYear2EntityRecord("");
			if (w != null) {
				r.ssId = ((string) w.varWSId ?? "");
				r.ssLabel = ((string) w.varWSLabel ?? "");
				r.ssOrder = (int) w.varWSOrder;
				r.ssIs_Active = (bool) w.varWSIs_Active;
				r.ssYYYY = ((string) w.varWSYYYY ?? "");
				r.ssYY_YY = ((string) w.varWSYY_YY ?? "");
				r.ssYYYY_YYYY = ((string) w.varWSYYYY_YYYY ?? "");
				r.ssDD_MMMM_YYYY = ((string) w.varWSDD_MMMM_YYYY ?? "");
				r.ssYYYY_Academic = ((string) w.varWSYYYY_Academic ?? "");
				r.ssYYYY_MM_DD = ((string) w.varWSYYYY_MM_DD ?? "");
				r.ssYYYYYYYY = ((string) w.varWSYYYYYYYY ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAcademicYear2RecordList {
		public WORCAcademicYear2Record[] Array;


		public WORLAcademicYear2RecordList(WORCAcademicYear2Record[] r) {
			if (r == null)
			Array = new WORCAcademicYear2Record[0];
			else
			Array = r;
		}
		public WORLAcademicYear2RecordList() {
			Array = new WORCAcademicYear2Record[0];
		}

		public WORLAcademicYear2RecordList(RLAcademicYear2RecordList rl) {
			rl=(RLAcademicYear2RecordList) rl.Duplicate();
			Array = new WORCAcademicYear2Record[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAcademicYear2Record(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAcademicYear2RecordList {
		public static implicit operator RLAcademicYear2RecordList(WORCAcademicYear2Record[] array) {
			RLAcademicYear2RecordList rl = new RLAcademicYear2RecordList();
			if (array != null) {
				foreach(WORCAcademicYear2Record val in array) {
					rl.Append((RCAcademicYear2Record) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAcademicYear2Record[](RLAcademicYear2RecordList rl) {
			WORCAcademicYear2Record[] array = new WORCAcademicYear2Record[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAcademicYear2Record) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAcademicYear2RecordList {
		public static implicit operator RLAcademicYear2RecordList(WORLAcademicYear2RecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAcademicYear2RecordList(RLAcademicYear2RecordList rl) {
			return new WORLAcademicYear2RecordList(rl);
		}
		public static implicit operator WORCAcademicYear2Record[](WORLAcademicYear2RecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAcademicYear2RecordList(WORCAcademicYear2Record[] array) {
			return new WORLAcademicYear2RecordList(array);
		}
	}
}

