/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSIASSupportEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENSIASSupportEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENSIASSupportEntity.eSpaceId;
	} // ENSIASSupportEntity

	/// <summary>
	/// Entity <code>ENSIASSupportEntityRecord</code> that represents the Service Studio entity
	///  <code>SIASSupport</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("SIASSupport", "YKFrriMWk0uOcY8tS4VZ+Q", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_SIASSupport", "")]
	[Serializable()]
	public partial struct ENSIASSupportEntityRecord: ISerializable, ITypedRecord<ENSIASSupportEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*c_AH8iB4CkCQl98kGe2TTA");
		private static readonly GlobalObjectKey IdStudentId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*u3nL4x8ZE0yBi+v_T6U5Hg");
		private static readonly GlobalObjectKey IdSupportType1 = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*XlN3vtwbakqTQqJiRkwOUQ");
		private static readonly GlobalObjectKey IdSupportType2 = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*tXH5wUsJqUeardntxKJk8g");
		private static readonly GlobalObjectKey IdSupportType3 = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*CT66nmGIwkSWIjAAjNdr2w");
		private static readonly GlobalObjectKey IdExamConcession = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*FpAD3VK_QUOivkfu8KKJEQ");
		private static readonly GlobalObjectKey IdNotes = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*tItLuwRct06PGtTWe2ERKw");
		private static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*UrjqwQL3dUuFKZwK6MjC3A");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*WRYCMi2m50SzEJAKkYhPgw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(9, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentId")]
		private string _ssStudentId;
		public string ssStudentId {
			get {
				return _ssStudentId;
			}
			set {
				if ((_ssStudentId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SUPPORTTYPE1", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SupportType1")]
		private int _ssSupportType1;
		public int ssSupportType1 {
			get {
				return _ssSupportType1;
			}
			set {
				if ((_ssSupportType1!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssSupportType1 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SUPPORTTYPE2", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SupportType2")]
		private int _ssSupportType2;
		public int ssSupportType2 {
			get {
				return _ssSupportType2;
			}
			set {
				if ((_ssSupportType2!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssSupportType2 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SUPPORTTYPE3", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SupportType3")]
		private int _ssSupportType3;
		public int ssSupportType3 {
			get {
				return _ssSupportType3;
			}
			set {
				if ((_ssSupportType3!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssSupportType3 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EXAMCONCESSION", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ExamConcession")]
		private string _ssExamConcession;
		public string ssExamConcession {
			get {
				return _ssExamConcession;
			}
			set {
				if ((_ssExamConcession!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssExamConcession = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NOTES", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Notes")]
		private string _ssNotes;
		public string ssNotes {
			get {
				return _ssNotes;
			}
			set {
				if ((_ssNotes!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssNotes = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedOn")]
		private DateTime _ssCreatedOn;
		public DateTime ssCreatedOn {
			get {
				return _ssCreatedOn;
			}
			set {
				if ((_ssCreatedOn!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssCreatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssCreatedBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSIASSupportEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(9, true);
			OptimizedAttributes = new BitArray(9, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssSupportType1 = 0;
			_ssSupportType2 = 0;
			_ssSupportType3 = 0;
			_ssExamConcession = "";
			_ssNotes = "";
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "SIASSupport.Id", 0);
			ssStudentId = r.ReadTextEntityReference(index++, "SIASSupport.StudentId", "");
			ssSupportType1 = r.ReadEntityReference(index++, "SIASSupport.SupportType1", 0);
			ssSupportType2 = r.ReadEntityReference(index++, "SIASSupport.SupportType2", 0);
			ssSupportType3 = r.ReadEntityReference(index++, "SIASSupport.SupportType3", 0);
			ssExamConcession = r.ReadTextEntityReference(index++, "SIASSupport.ExamConcession", "");
			ssNotes = r.ReadText(index++, "SIASSupport.Notes", "");
			ssCreatedOn = r.ReadDateTime(index++, "SIASSupport.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "SIASSupport.CreatedBy", 0);
			ChangedAttributes = new BitArray(9, false);
			OptimizedAttributes = new BitArray(9, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSIASSupportEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSIASSupportEntityRecord a, ENSIASSupportEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentId != b.ssStudentId) return false;
			if (a.ssSupportType1 != b.ssSupportType1) return false;
			if (a.ssSupportType2 != b.ssSupportType2) return false;
			if (a.ssSupportType3 != b.ssSupportType3) return false;
			if (a.ssExamConcession != b.ssExamConcession) return false;
			if (a.ssNotes != b.ssNotes) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			return true;
		}

		public static bool operator != (ENSIASSupportEntityRecord a, ENSIASSupportEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSIASSupportEntityRecord)) return false;
			return (this == (ENSIASSupportEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentId.GetHashCode()
				^ ssSupportType1.GetHashCode()
				^ ssSupportType2.GetHashCode()
				^ ssSupportType3.GetHashCode()
				^ ssExamConcession.GetHashCode()
				^ ssNotes.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSIASSupportEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(9, true);
			OptimizedAttributes = new BitArray(9, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssSupportType1 = 0;
			_ssSupportType2 = 0;
			_ssSupportType3 = 0;
			_ssExamConcession = "";
			_ssNotes = "";
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentId = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssSupportType1 = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssSupportType2 = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssSupportType3 = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssExamConcession = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssNotes = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssCreatedOn = (DateTime) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[8] .Name, fields[8] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSIASSupportEntityRecord Duplicate() {
			ENSIASSupportEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentId = this._ssStudentId;
			t._ssSupportType1 = this._ssSupportType1;
			t._ssSupportType2 = this._ssSupportType2;
			t._ssSupportType3 = this._ssSupportType3;
			t._ssExamConcession = this._ssExamConcession;
			t._ssNotes = this._ssNotes;
			t._ssCreatedOn = this._ssCreatedOn;
			t._ssCreatedBy = this._ssCreatedBy;
			t.ChangedAttributes = new BitArray(9);
			t.OptimizedAttributes = new BitArray(9);
			for (int i = 0; i < 9; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentId")) VarValue.AppendAttribute(recordElem, "StudentId", ssStudentId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportType1")) VarValue.AppendAttribute(recordElem, "SupportType1", ssSupportType1, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SupportType1");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportType2")) VarValue.AppendAttribute(recordElem, "SupportType2", ssSupportType2, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SupportType2");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportType3")) VarValue.AppendAttribute(recordElem, "SupportType3", ssSupportType3, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SupportType3");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExamConcession")) VarValue.AppendAttribute(recordElem, "ExamConcession", ssExamConcession, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ExamConcession");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Notes")) VarValue.AppendAttribute(recordElem, "Notes", ssNotes, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Notes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentId")) variable.Value = ssStudentId; else variable.Optimized = true;
			} else if (head == "supporttype1") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportType1")) variable.Value = ssSupportType1; else variable.Optimized = true;
			} else if (head == "supporttype2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportType2")) variable.Value = ssSupportType2; else variable.Optimized = true;
			} else if (head == "supporttype3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportType3")) variable.Value = ssSupportType3; else variable.Optimized = true;
			} else if (head == "examconcession") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExamConcession")) variable.Value = ssExamConcession; else variable.Optimized = true;
			} else if (head == "notes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Notes")) variable.Value = ssNotes; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdSupportType1)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdSupportType2)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdSupportType3)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdExamConcession)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdNotes)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdCreatedOn)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[8];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdSupportType1)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdSupportType2)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdSupportType3)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdExamConcession)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdNotes)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdCreatedOn)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[8];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentId) {
				return ssStudentId;
			} else if (key == IdSupportType1) {
				return ssSupportType1;
			} else if (key == IdSupportType2) {
				return ssSupportType2;
			} else if (key == IdSupportType3) {
				return ssSupportType3;
			} else if (key == IdExamConcession) {
				return ssExamConcession;
			} else if (key == IdNotes) {
				return ssNotes;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(9);
			OptimizedAttributes = new BitArray(9);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentId = (string) other.AttributeGet(IdStudentId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentId);
			ssSupportType1 = (int) other.AttributeGet(IdSupportType1);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdSupportType1);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdSupportType1);
			ssSupportType2 = (int) other.AttributeGet(IdSupportType2);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdSupportType2);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdSupportType2);
			ssSupportType3 = (int) other.AttributeGet(IdSupportType3);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdSupportType3);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdSupportType3);
			ssExamConcession = (string) other.AttributeGet(IdExamConcession);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdExamConcession);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdExamConcession);
			ssNotes = (string) other.AttributeGet(IdNotes);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdNotes);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdNotes);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdCreatedOn);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdCreatedOn);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdCreatedBy);
		}
	} // ENSIASSupportEntityRecord
	/// <summary>
	/// Structure <code>RCSIASSupportRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSIASSupportRecord: ISerializable, ITypedRecord<RCSIASSupportRecord> {
		private static readonly GlobalObjectKey IdSIASSupport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*7YNI33YcFLbMkmmlvsbsfA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SIASSupport")]
		public ENSIASSupportEntityRecord ssENSIASSupport;


		public static implicit operator ENSIASSupportEntityRecord(RCSIASSupportRecord r) {
			return r.ssENSIASSupport;
		}

		public static implicit operator RCSIASSupportRecord(ENSIASSupportEntityRecord r) {
			RCSIASSupportRecord res = new RCSIASSupportRecord(null);
			res.ssENSIASSupport = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSIASSupport.ChangedAttributes = value;
			}
			get {
				return ssENSIASSupport.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSIASSupportRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSIASSupport = new ENSIASSupportEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSIASSupport.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSIASSupport.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSIASSupport.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSIASSupport.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSIASSupportRecord r) {
			this = r;
		}


		public static bool operator == (RCSIASSupportRecord a, RCSIASSupportRecord b) {
			if (a.ssENSIASSupport != b.ssENSIASSupport) return false;
			return true;
		}

		public static bool operator != (RCSIASSupportRecord a, RCSIASSupportRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSIASSupportRecord)) return false;
			return (this == (RCSIASSupportRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSIASSupport.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSIASSupportRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSIASSupport = new ENSIASSupportEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSIASSupport = (ENSIASSupportEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSIASSupport.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSIASSupport.InternalRecursiveSave();
		}


		public RCSIASSupportRecord Duplicate() {
			RCSIASSupportRecord t;
			t.ssENSIASSupport = (ENSIASSupportEntityRecord) this.ssENSIASSupport.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSIASSupport.ToXml(this, recordElem, "SIASSupport", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "siassupport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASSupport")) variable.Value = ssENSIASSupport; else variable.Optimized = true;
				variable.SetFieldName("siassupport");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSIASSupport.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSIASSupport.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSIASSupport) {
				return ssENSIASSupport;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSIASSupport.FillFromOther((IRecord) other.AttributeGet(IdSIASSupport));
		}
	} // RCSIASSupportRecord
	/// <summary>
	/// RecordList type <code>RLSIASSupportRecordList</code> that represents a record list of
	///  <code>SIASSupport</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASSupportRecordList: GenericRecordList<RCSIASSupportRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSIASSupportRecord GetElementDefaultValue() {
			return new RCSIASSupportRecord("");
		}

		public T[] ToArray<T>(Func<RCSIASSupportRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASSupportRecordList recordlist, Func<RCSIASSupportRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASSupportRecordList ToList<T>(T[] array, Func <T, RCSIASSupportRecord> converter) {
			RLSIASSupportRecordList result = new RLSIASSupportRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASSupportRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASSupportRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSIASSupportRecord> NewList() {
			return new RLSIASSupportRecordList();
		}


	} // RLSIASSupportRecordList

	/// <summary>
	/// RecordList type <code>RLSIASSupportList</code> that represents a record list of
	///  <code>StudentIdentifier, SIASSupportTypeIdentifier, SIASSupportTypeIdentifier
	/// , SIASSupportTypeIdentifier, ExamConcessionsIdentifier, UserIdentifier, Text, DateTime,
	///  Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASSupportList: GenericRecordList<ENSIASSupportEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSIASSupportEntityRecord GetElementDefaultValue() {
			return new ENSIASSupportEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSIASSupportEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASSupportList recordlist, Func<ENSIASSupportEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASSupportList ToList<T>(T[] array, Func <T, ENSIASSupportEntityRecord> converter) {
			RLSIASSupportList result = new RLSIASSupportList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASSupportList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASSupportList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASSupportList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSIASSupportEntityRecord> NewList() {
			return new RLSIASSupportList();
		}


	} // RLSIASSupportList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateSIASSupport
		/// </summary>

		public static void CreateSIASSupport(HeContext heContext, RCSIASSupportRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportEntity.eSpaceId;
				ENSIASSupportEntityRecord ssENSIASSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENSIASSupportEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTID]" +
					 ", [SUPPORTTYPE1]" +
					 ", [SUPPORTTYPE2]" +
					 ", [SUPPORTTYPE3]" +
					 ", [EXAMCONCESSION]" +
					 ", [NOTES]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 " ) VALUES (" +
					 " @ssStudentId" +
					 ", @ssSupportType1" +
					 ", @ssSupportType2" +
					 ", @ssSupportType3" +
					 ", @ssExamConcession" +
					 ", @ssNotes" +
					 ", @ssCreatedOn" +
					 ", @ssCreatedBy" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENSIASSupport.ssStudentId== "")) {
						insertSqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENSIASSupport.ssStudentId);
					}
					if ((ssENSIASSupport.ssSupportType1==0)) {
						insertSqlCmd.CreateParameter("@ssSupportType1", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSupportType1", DbType.Int32, ssENSIASSupport.ssSupportType1);
					}
					if ((ssENSIASSupport.ssSupportType2==0)) {
						insertSqlCmd.CreateParameter("@ssSupportType2", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSupportType2", DbType.Int32, ssENSIASSupport.ssSupportType2);
					}
					if ((ssENSIASSupport.ssSupportType3==0)) {
						insertSqlCmd.CreateParameter("@ssSupportType3", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSupportType3", DbType.Int32, ssENSIASSupport.ssSupportType3);
					}
					if ((ssENSIASSupport.ssExamConcession== "")) {
						insertSqlCmd.CreateParameter("@ssExamConcession", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssExamConcession", DbType.String, ssENSIASSupport.ssExamConcession);
					}
					insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENSIASSupport.ssNotes);
					insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupport.ssCreatedOn);
					if ((ssENSIASSupport.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupport.ssCreatedBy);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateSIASSupport", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateSIASSupport
		/// </summary>

		public static void CreateOrUpdateSIASSupport(HeContext heContext, BitArray usedFields, RCSIASSupportRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportEntity.eSpaceId;
				ENSIASSupportEntityRecord ssENSIASSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(9, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSIASSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTTYPE1] = @ssSupportType1"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTTYPE2] = @ssSupportType2"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTTYPE3] = @ssSupportType3"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXAMCONCESSION] = @ssExamConcession"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSIASSupportssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSIASSupport.ssStudentId== "")) {
							sqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENSIASSupport.ssStudentId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSIASSupport.ssSupportType1==0)) {
							sqlCmd.CreateParameter("@ssSupportType1", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportType1", DbType.Int32, ssENSIASSupport.ssSupportType1);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENSIASSupport.ssSupportType2==0)) {
							sqlCmd.CreateParameter("@ssSupportType2", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportType2", DbType.Int32, ssENSIASSupport.ssSupportType2);
						}
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENSIASSupport.ssSupportType3==0)) {
							sqlCmd.CreateParameter("@ssSupportType3", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportType3", DbType.Int32, ssENSIASSupport.ssSupportType3);
						}
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENSIASSupport.ssExamConcession== "")) {
							sqlCmd.CreateParameter("@ssExamConcession", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssExamConcession", DbType.String, ssENSIASSupport.ssExamConcession);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENSIASSupport.ssNotes);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupport.ssCreatedOn);
						counter++;
					}
					if (usedFields[8]) {
						if ((ssENSIASSupport.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupport.ssCreatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDON] = [CREATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSIASSupportssId", DbType.Int32, ssENSIASSupport.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateSIASSupport (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENSIASSupportEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTID]" +
						 ", [SUPPORTTYPE1]" +
						 ", [SUPPORTTYPE2]" +
						 ", [SUPPORTTYPE3]" +
						 ", [EXAMCONCESSION]" +
						 ", [NOTES]" +
						 ", [CREATEDON]" +
						 ", [CREATEDBY]" +
						 " ) VALUES (" +
						 " @ssStudentId" +
						 ", @ssSupportType1" +
						 ", @ssSupportType2" +
						 ", @ssSupportType3" +
						 ", @ssExamConcession" +
						 ", @ssNotes" +
						 ", @ssCreatedOn" +
						 ", @ssCreatedBy" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENSIASSupport.ssStudentId== "")) {
							insertSqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENSIASSupport.ssStudentId);
						}
						if ((ssENSIASSupport.ssSupportType1==0)) {
							insertSqlCmd.CreateParameter("@ssSupportType1", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSupportType1", DbType.Int32, ssENSIASSupport.ssSupportType1);
						}
						if ((ssENSIASSupport.ssSupportType2==0)) {
							insertSqlCmd.CreateParameter("@ssSupportType2", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSupportType2", DbType.Int32, ssENSIASSupport.ssSupportType2);
						}
						if ((ssENSIASSupport.ssSupportType3==0)) {
							insertSqlCmd.CreateParameter("@ssSupportType3", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSupportType3", DbType.Int32, ssENSIASSupport.ssSupportType3);
						}
						if ((ssENSIASSupport.ssExamConcession== "")) {
							insertSqlCmd.CreateParameter("@ssExamConcession", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssExamConcession", DbType.String, ssENSIASSupport.ssExamConcession);
						}
						insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENSIASSupport.ssNotes);
						insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupport.ssCreatedOn);
						if ((ssENSIASSupport.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupport.ssCreatedBy);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateSIASSupport", true), typeof(int));
					} else {
						outParamId = ssENSIASSupport.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteSIASSupport
		/// </summary>

		public static void DeleteSIASSupport(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENSIASSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteSIASSupport", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSIASSupport
		/// </summary>

		public static void GetSIASSupport(HeContext heContext, int inParamId, out RCSIASSupportRecord outParamRecord) {
			outParamRecord = new RCSIASSupportRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [SUPPORTTYPE1]" +
					 ", [SUPPORTTYPE2]" +
					 ", [SUPPORTTYPE3]" +
					 ", [EXAMCONCESSION]" +
					 ", [NOTES]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 " FROM " + ENSIASSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSIASSupport", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(9, false)
							}
							;
						} else
						throw new DataBaseException(ENSIASSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSIASSupportForUpdate
		/// </summary>

		public static void GetSIASSupportForUpdate(HeContext heContext, int inParamId, out RCSIASSupportRecord outParamRecord) {
			outParamRecord = new RCSIASSupportRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [SUPPORTTYPE1]" +
					 ", [SUPPORTTYPE2]" +
					 ", [SUPPORTTYPE3]" +
					 ", [EXAMCONCESSION]" +
					 ", [NOTES]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 "FROM " + ENSIASSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSIASSupportForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(9, false)
							}
							;
						} else
						throw new DataBaseException(ENSIASSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateSIASSupport
		/// </summary>

		public static void UpdateSIASSupport(HeContext heContext, BitArray usedFields, RCSIASSupportRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASSupportEntity.eSpaceId;
				ENSIASSupportEntityRecord ssENSIASSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(9, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSIASSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTTYPE1] = @ssSupportType1"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTTYPE2] = @ssSupportType2"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTTYPE3] = @ssSupportType3"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXAMCONCESSION] = @ssExamConcession"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSIASSupportssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSIASSupport.ssStudentId== "")) {
							sqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENSIASSupport.ssStudentId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSIASSupport.ssSupportType1==0)) {
							sqlCmd.CreateParameter("@ssSupportType1", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportType1", DbType.Int32, ssENSIASSupport.ssSupportType1);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENSIASSupport.ssSupportType2==0)) {
							sqlCmd.CreateParameter("@ssSupportType2", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportType2", DbType.Int32, ssENSIASSupport.ssSupportType2);
						}
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENSIASSupport.ssSupportType3==0)) {
							sqlCmd.CreateParameter("@ssSupportType3", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSupportType3", DbType.Int32, ssENSIASSupport.ssSupportType3);
						}
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENSIASSupport.ssExamConcession== "")) {
							sqlCmd.CreateParameter("@ssExamConcession", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssExamConcession", DbType.String, ssENSIASSupport.ssExamConcession);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENSIASSupport.ssNotes);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASSupport.ssCreatedOn);
						counter++;
					}
					if (usedFields[8]) {
						if ((ssENSIASSupport.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASSupport.ssCreatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDON] = [CREATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSIASSupportssId", DbType.Int32, ssENSIASSupport.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateSIASSupport", true) <= 0)
					throw new DataBaseException(ENSIASSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENSIASSupport.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("SIASSupport")]
	public class WORCSIASSupportRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentId")]
		public string varWSStudentId;

		[System.Xml.Serialization.XmlElement("SupportType1")]
		public int varWSSupportType1;

		[System.Xml.Serialization.XmlElement("SupportType2")]
		public int varWSSupportType2;

		[System.Xml.Serialization.XmlElement("SupportType3")]
		public int varWSSupportType3;

		[System.Xml.Serialization.XmlElement("ExamConcession")]
		public string varWSExamConcession;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string varWSNotes;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime varWSCreatedOn;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		public WORCSIASSupportRecord() {
			varWSId = (int) 0;
			varWSStudentId = (string) "";
			varWSSupportType1 = (int) 0;
			varWSSupportType2 = (int) 0;
			varWSSupportType3 = (int) 0;
			varWSExamConcession = (string) "";
			varWSNotes = (string) "";
			varWSCreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
		}

		public WORCSIASSupportRecord(ENSIASSupportEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentId = BaseAppUtils.RemoveControlChars(r.ssStudentId);
			varWSSupportType1 = (int) r.ssSupportType1;
			varWSSupportType2 = (int) r.ssSupportType2;
			varWSSupportType3 = (int) r.ssSupportType3;
			varWSExamConcession = BaseAppUtils.RemoveControlChars(r.ssExamConcession);
			varWSNotes = BaseAppUtils.RemoveControlChars(r.ssNotes);
			varWSCreatedOn = (DateTime) r.ssCreatedOn;
			varWSCreatedBy = (int) r.ssCreatedBy;
		}

		public static RLSIASSupportList ToRecordList(WORCSIASSupportRecord[] array) {
			RLSIASSupportList rl = new RLSIASSupportList();
			if (array != null) {
				foreach(WORCSIASSupportRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSIASSupportRecord[] FromRecordList(RLSIASSupportList rl) {
			WORCSIASSupportRecord[] array = new WORCSIASSupportRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSIASSupportRecord {
		public static implicit operator WORCSIASSupportRecord(RCSIASSupportRecord r) {
			return new WORCSIASSupportRecord(r.ssENSIASSupport);
		}

		public static implicit operator RCSIASSupportRecord(WORCSIASSupportRecord w) {
			RCSIASSupportRecord r = new RCSIASSupportRecord("");
			if (w != null) {
				r.ssENSIASSupport = w;
			}
			return r;
		}

	}

	partial struct ENSIASSupportEntityRecord {
		public static implicit operator WORCSIASSupportRecord(ENSIASSupportEntityRecord r) {
			return new WORCSIASSupportRecord(r);
		}

		public static implicit operator ENSIASSupportEntityRecord(WORCSIASSupportRecord w) {
			ENSIASSupportEntityRecord r = new ENSIASSupportEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentId = (string) w.varWSStudentId;
				r.ssSupportType1 = (int) w.varWSSupportType1;
				r.ssSupportType2 = (int) w.varWSSupportType2;
				r.ssSupportType3 = (int) w.varWSSupportType3;
				r.ssExamConcession = (string) w.varWSExamConcession;
				r.ssNotes = ((string) w.varWSNotes ?? "");
				r.ssCreatedOn = (DateTime) w.varWSCreatedOn;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSIASSupportRecordList {
		public WORCSIASSupportRecord[] Array;


		public WORLSIASSupportRecordList(WORCSIASSupportRecord[] r) {
			if (r == null)
			Array = new WORCSIASSupportRecord[0];
			else
			Array = r;
		}
		public WORLSIASSupportRecordList() {
			Array = new WORCSIASSupportRecord[0];
		}

		public WORLSIASSupportRecordList(RLSIASSupportRecordList rl) {
			rl=(RLSIASSupportRecordList) rl.Duplicate();
			Array = new WORCSIASSupportRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSIASSupportRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSIASSupportRecordList {
		public static implicit operator RLSIASSupportRecordList(WORCSIASSupportRecord[] array) {
			RLSIASSupportRecordList rl = new RLSIASSupportRecordList();
			if (array != null) {
				foreach(WORCSIASSupportRecord val in array) {
					rl.Append((RCSIASSupportRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSIASSupportRecord[](RLSIASSupportRecordList rl) {
			WORCSIASSupportRecord[] array = new WORCSIASSupportRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSIASSupportRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSIASSupportRecordList {
		public static implicit operator RLSIASSupportRecordList(WORLSIASSupportRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSIASSupportRecordList(RLSIASSupportRecordList rl) {
			return new WORLSIASSupportRecordList(rl);
		}
		public static implicit operator WORCSIASSupportRecord[](WORLSIASSupportRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSIASSupportRecordList(WORCSIASSupportRecord[] array) {
			return new WORLSIASSupportRecordList(array);
		}
	}
}

