/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentCareerAimEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentCareerAimEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentCareerAimEntity.eSpaceId;
	} // ENStudentCareerAimEntity

	/// <summary>
	/// Entity <code>ENStudentCareerAimEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentCareerAim</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentCareerAim", "N+KirfP7j0u0xPKg+YShBA", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentCareerAim", "")]
	[Serializable()]
	public partial struct ENStudentCareerAimEntityRecord: ISerializable, ITypedRecord<ENStudentCareerAimEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*jpoLYdaPL06dEUQpV7WpFA");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ZxrJJL1HEkGGfH9JmWb6vQ");
		private static readonly GlobalObjectKey IdDestination = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xuZs5ivS1EiAzI92Q+15vw");
		private static readonly GlobalObjectKey IdDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*yNjW0lU_8ESv01mlxOEouQ");
		private static readonly GlobalObjectKey IdNotes = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*AjlAeJRKYUq7LcJr8F2ypw");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*mhzvZ5N+4kOZr2SKt0YLJg");
		private static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Z1McQezqm02EB2WUoBMnRg");
		private static readonly GlobalObjectKey IdIsStudent = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*fCDbmLfMeUKSNAR0ohqf8A");
		private static readonly GlobalObjectKey IdStudentNote_Descrip = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*E+U51oZCQEa2OEkrn8_WxA");
		private static readonly GlobalObjectKey IdStudentNote_CreatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*QJTYqQu0nUeAlmPasvJ8Zw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(10, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENT", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Student")]
		private string _ssStudent;
		public string ssStudent {
			get {
				return _ssStudent;
			}
			set {
				if ((_ssStudent!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudent = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESTINATION", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Destination")]
		private string _ssDestination;
		public string ssDestination {
			get {
				return _ssDestination;
			}
			set {
				if ((_ssDestination!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDestination = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Date")]
		private DateTime _ssDate;
		public DateTime ssDate {
			get {
				return _ssDate;
			}
			set {
				if ((_ssDate!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NOTES", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Notes")]
		private string _ssNotes;
		public string ssNotes {
			get {
				return _ssNotes;
			}
			set {
				if ((_ssNotes!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssNotes = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedOn")]
		private DateTime _ssCreatedOn;
		public DateTime ssCreatedOn {
			get {
				return _ssCreatedOn;
			}
			set {
				if ((_ssCreatedOn!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssCreatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISSTUDENT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IsStudent")]
		private bool _ssIsStudent;
		public bool ssIsStudent {
			get {
				return _ssIsStudent;
			}
			set {
				if ((_ssIsStudent!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssIsStudent = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTNOTE_DESCRIP", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("StudentNote_Descrip")]
		private string _ssStudentNote_Descrip;
		public string ssStudentNote_Descrip {
			get {
				return _ssStudentNote_Descrip;
			}
			set {
				if ((_ssStudentNote_Descrip!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssStudentNote_Descrip = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTNOTE_CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("StudentNote_CreatedOn")]
		private DateTime _ssStudentNote_CreatedOn;
		public DateTime ssStudentNote_CreatedOn {
			get {
				return _ssStudentNote_CreatedOn;
			}
			set {
				if ((_ssStudentNote_CreatedOn!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssStudentNote_CreatedOn = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentCareerAimEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(10, true);
			OptimizedAttributes = new BitArray(10, false);
			_ssId = 0;
			_ssStudent = "";
			_ssDestination = "";
			_ssDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssNotes = "";
			_ssCreatedBy = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIsStudent = false;
			_ssStudentNote_Descrip = "";
			_ssStudentNote_CreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentCareerAim.Id", 0);
			ssStudent = r.ReadTextEntityReference(index++, "StudentCareerAim.Student", "");
			ssDestination = r.ReadTextEntityReference(index++, "StudentCareerAim.Destination", "");
			ssDate = r.ReadDate(index++, "StudentCareerAim.Date", new DateTime(1900, 1, 1, 0, 0, 0));
			ssNotes = r.ReadText(index++, "StudentCareerAim.Notes", "");
			ssCreatedBy = r.ReadEntityReference(index++, "StudentCareerAim.CreatedBy", 0);
			ssCreatedOn = r.ReadDateTime(index++, "StudentCareerAim.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssIsStudent = r.ReadBoolean(index++, "StudentCareerAim.IsStudent", false);
			ssStudentNote_Descrip = r.ReadText(index++, "StudentCareerAim.StudentNote_Descrip", "");
			ssStudentNote_CreatedOn = r.ReadDateTime(index++, "StudentCareerAim.StudentNote_CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(10, false);
			OptimizedAttributes = new BitArray(10, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentCareerAimEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentCareerAimEntityRecord a, ENStudentCareerAimEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudent != b.ssStudent) return false;
			if (a.ssDestination != b.ssDestination) return false;
			if (a.ssDate != b.ssDate) return false;
			if (a.ssNotes != b.ssNotes) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			if (a.ssIsStudent != b.ssIsStudent) return false;
			if (a.ssStudentNote_Descrip != b.ssStudentNote_Descrip) return false;
			if (a.ssStudentNote_CreatedOn != b.ssStudentNote_CreatedOn) return false;
			return true;
		}

		public static bool operator != (ENStudentCareerAimEntityRecord a, ENStudentCareerAimEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentCareerAimEntityRecord)) return false;
			return (this == (ENStudentCareerAimEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudent.GetHashCode()
				^ ssDestination.GetHashCode()
				^ ssDate.GetHashCode()
				^ ssNotes.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				^ ssIsStudent.GetHashCode()
				^ ssStudentNote_Descrip.GetHashCode()
				^ ssStudentNote_CreatedOn.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentCareerAimEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(10, true);
			OptimizedAttributes = new BitArray(10, false);
			_ssId = 0;
			_ssStudent = "";
			_ssDestination = "";
			_ssDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssNotes = "";
			_ssCreatedBy = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIsStudent = false;
			_ssStudentNote_Descrip = "";
			_ssStudentNote_CreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudent = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDestination = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssDate = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssNotes = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssCreatedOn = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssIsStudent = (bool) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssStudentNote_Descrip = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssStudentNote_CreatedOn = (DateTime) info.GetValue(fields[9] .Name, fields[9] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentCareerAimEntityRecord Duplicate() {
			ENStudentCareerAimEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudent = this._ssStudent;
			t._ssDestination = this._ssDestination;
			t._ssDate = this._ssDate;
			t._ssNotes = this._ssNotes;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssCreatedOn = this._ssCreatedOn;
			t._ssIsStudent = this._ssIsStudent;
			t._ssStudentNote_Descrip = this._ssStudentNote_Descrip;
			t._ssStudentNote_CreatedOn = this._ssStudentNote_CreatedOn;
			t.ChangedAttributes = new BitArray(10);
			t.OptimizedAttributes = new BitArray(10);
			for (int i = 0; i < 10; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Student")) VarValue.AppendAttribute(recordElem, "Student", ssStudent, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Student");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Destination")) VarValue.AppendAttribute(recordElem, "Destination", ssDestination, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Destination");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Date")) VarValue.AppendAttribute(recordElem, "Date", ssDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "Date");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Notes")) VarValue.AppendAttribute(recordElem, "Notes", ssNotes, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Notes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsStudent")) VarValue.AppendAttribute(recordElem, "IsStudent", ssIsStudent, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsStudent");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentNote_Descrip")) VarValue.AppendAttribute(recordElem, "StudentNote_Descrip", ssStudentNote_Descrip, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentNote_Descrip");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentNote_CreatedOn")) VarValue.AppendAttribute(recordElem, "StudentNote_CreatedOn", ssStudentNote_CreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "StudentNote_CreatedOn");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssStudent; else variable.Optimized = true;
			} else if (head == "destination") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Destination")) variable.Value = ssDestination; else variable.Optimized = true;
			} else if (head == "date") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Date")) variable.Value = ssDate; else variable.Optimized = true;
			} else if (head == "notes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Notes")) variable.Value = ssNotes; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			} else if (head == "isstudent") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsStudent")) variable.Value = ssIsStudent; else variable.Optimized = true;
			} else if (head == "studentnote_descrip") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentNote_Descrip")) variable.Value = ssStudentNote_Descrip; else variable.Optimized = true;
			} else if (head == "studentnote_createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentNote_CreatedOn")) variable.Value = ssStudentNote_CreatedOn; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudent)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDestination)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdDate)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdNotes)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdCreatedOn)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdIsStudent)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdStudentNote_Descrip)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdStudentNote_CreatedOn)) {
				return ChangedAttributes[9];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudent)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDestination)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdDate)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdNotes)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdCreatedOn)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdIsStudent)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdStudentNote_Descrip)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdStudentNote_CreatedOn)) {
				return OptimizedAttributes[9];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudent) {
				return ssStudent;
			} else if (key == IdDestination) {
				return ssDestination;
			} else if (key == IdDate) {
				return ssDate;
			} else if (key == IdNotes) {
				return ssNotes;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else if (key == IdIsStudent) {
				return ssIsStudent;
			} else if (key == IdStudentNote_Descrip) {
				return ssStudentNote_Descrip;
			} else if (key == IdStudentNote_CreatedOn) {
				return ssStudentNote_CreatedOn;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(10);
			OptimizedAttributes = new BitArray(10);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudent = (string) other.AttributeGet(IdStudent);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudent);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudent);
			ssDestination = (string) other.AttributeGet(IdDestination);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDestination);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDestination);
			ssDate = (DateTime) other.AttributeGet(IdDate);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdDate);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdDate);
			ssNotes = (string) other.AttributeGet(IdNotes);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdNotes);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdNotes);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCreatedBy);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdCreatedOn);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdCreatedOn);
			ssIsStudent = (bool) other.AttributeGet(IdIsStudent);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdIsStudent);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdIsStudent);
			ssStudentNote_Descrip = (string) other.AttributeGet(IdStudentNote_Descrip);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdStudentNote_Descrip);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdStudentNote_Descrip);
			ssStudentNote_CreatedOn = (DateTime) other.AttributeGet(IdStudentNote_CreatedOn);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdStudentNote_CreatedOn);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdStudentNote_CreatedOn);
		}
	} // ENStudentCareerAimEntityRecord
	/// <summary>
	/// Structure <code>RCStudentCareerAimRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentCareerAimRecord: ISerializable, ITypedRecord<RCStudentCareerAimRecord> {
		private static readonly GlobalObjectKey IdStudentCareerAim = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*7OHP_fnG2QCFHZNNdh6gXQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentCareerAim")]
		public ENStudentCareerAimEntityRecord ssENStudentCareerAim;


		public static implicit operator ENStudentCareerAimEntityRecord(RCStudentCareerAimRecord r) {
			return r.ssENStudentCareerAim;
		}

		public static implicit operator RCStudentCareerAimRecord(ENStudentCareerAimEntityRecord r) {
			RCStudentCareerAimRecord res = new RCStudentCareerAimRecord(null);
			res.ssENStudentCareerAim = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentCareerAim.ChangedAttributes = value;
			}
			get {
				return ssENStudentCareerAim.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentCareerAimRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentCareerAim = new ENStudentCareerAimEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(10, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentCareerAim.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentCareerAim.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentCareerAim.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentCareerAim.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentCareerAimRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentCareerAimRecord a, RCStudentCareerAimRecord b) {
			if (a.ssENStudentCareerAim != b.ssENStudentCareerAim) return false;
			return true;
		}

		public static bool operator != (RCStudentCareerAimRecord a, RCStudentCareerAimRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentCareerAimRecord)) return false;
			return (this == (RCStudentCareerAimRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentCareerAim.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentCareerAimRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentCareerAim = new ENStudentCareerAimEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentCareerAim = (ENStudentCareerAimEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentCareerAim.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentCareerAim.InternalRecursiveSave();
		}


		public RCStudentCareerAimRecord Duplicate() {
			RCStudentCareerAimRecord t;
			t.ssENStudentCareerAim = (ENStudentCareerAimEntityRecord) this.ssENStudentCareerAim.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentCareerAim.ToXml(this, recordElem, "StudentCareerAim", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentcareeraim") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCareerAim")) variable.Value = ssENStudentCareerAim; else variable.Optimized = true;
				variable.SetFieldName("studentcareeraim");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentCareerAim.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentCareerAim.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentCareerAim) {
				return ssENStudentCareerAim;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentCareerAim.FillFromOther((IRecord) other.AttributeGet(IdStudentCareerAim));
		}
	} // RCStudentCareerAimRecord
	/// <summary>
	/// RecordList type <code>RLStudentCareerAimRecordList</code> that represents a record list of
	///  <code>StudentCareerAim</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentCareerAimRecordList: GenericRecordList<RCStudentCareerAimRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentCareerAimRecord GetElementDefaultValue() {
			return new RCStudentCareerAimRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentCareerAimRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentCareerAimRecordList recordlist, Func<RCStudentCareerAimRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentCareerAimRecordList ToList<T>(T[] array, Func <T, RCStudentCareerAimRecord> converter) {
			RLStudentCareerAimRecordList result = new RLStudentCareerAimRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentCareerAimRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentCareerAimRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentCareerAimRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentCareerAimRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(10, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentCareerAimRecord> NewList() {
			return new RLStudentCareerAimRecordList();
		}


	} // RLStudentCareerAimRecordList

	/// <summary>
	/// RecordList type <code>RLStudentCareerAimList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, Text, Date, DateTime, DateTime, Boolean, Integer
	/// , DestinationsIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentCareerAimList: GenericRecordList<ENStudentCareerAimEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentCareerAimEntityRecord GetElementDefaultValue() {
			return new ENStudentCareerAimEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentCareerAimEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentCareerAimList recordlist, Func<ENStudentCareerAimEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentCareerAimList ToList<T>(T[] array, Func <T, ENStudentCareerAimEntityRecord> converter) {
			RLStudentCareerAimList result = new RLStudentCareerAimList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentCareerAimList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentCareerAimList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentCareerAimList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentCareerAimList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentCareerAimEntityRecord> NewList() {
			return new RLStudentCareerAimList();
		}


	} // RLStudentCareerAimList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentCareerAim
		/// </summary>

		public static void CreateStudentCareerAim(HeContext heContext, RCStudentCareerAimRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCareerAimEntity.eSpaceId;
				ENStudentCareerAimEntityRecord ssENStudentCareerAim = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentCareerAimEntity.LocalViewName(null, null) + " (" +
					 " [STUDENT]" +
					 ", [DESTINATION]" +
					 ", [DATE]" +
					 ", [NOTES]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 ", [ISSTUDENT]" +
					 ", [STUDENTNOTE_DESCRIP]" +
					 ", [STUDENTNOTE_CREATEDON]" +
					 " ) VALUES (" +
					 " @ssStudent" +
					 ", @ssDestination" +
					 ", @ssDate" +
					 ", @ssNotes" +
					 ", @ssCreatedBy" +
					 ", @ssCreatedOn" +
					 ", @ssIsStudent" +
					 ", @ssStudentNote_Descrip" +
					 ", @ssStudentNote_CreatedOn" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudentCareerAim.ssStudent== "")) {
						insertSqlCmd.CreateParameter("@ssStudent", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudent", DbType.String, ssENStudentCareerAim.ssStudent);
					}
					if ((ssENStudentCareerAim.ssDestination== "")) {
						insertSqlCmd.CreateParameter("@ssDestination", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDestination", DbType.String, ssENStudentCareerAim.ssDestination);
					}
					insertSqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENStudentCareerAim.ssDate);
					insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENStudentCareerAim.ssNotes);
					if ((ssENStudentCareerAim.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENStudentCareerAim.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENStudentCareerAim.ssCreatedOn);
					insertSqlCmd.CreateParameter("@ssIsStudent", DbType.Boolean, ssENStudentCareerAim.ssIsStudent);
					insertSqlCmd.CreateParameter("@ssStudentNote_Descrip", DbType.String, ssENStudentCareerAim.ssStudentNote_Descrip);
					insertSqlCmd.CreateParameter("@ssStudentNote_CreatedOn", DbType.DateTime, ssENStudentCareerAim.ssStudentNote_CreatedOn);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentCareerAim", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentCareerAim
		/// </summary>

		public static void CreateOrUpdateStudentCareerAim(HeContext heContext, BitArray usedFields, RCStudentCareerAimRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCareerAimEntity.eSpaceId;
				ENStudentCareerAimEntityRecord ssENStudentCareerAim = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(10, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentCareerAimEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENT] = @ssStudent"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESTINATION] = @ssDestination"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATE] = @ssDate"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISSTUDENT] = @ssIsStudent"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTNOTE_DESCRIP] = @ssStudentNote_Descrip"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTNOTE_CREATEDON] = @ssStudentNote_CreatedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentCareerAimssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentCareerAim.ssStudent== "")) {
							sqlCmd.CreateParameter("@ssStudent", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudent", DbType.String, ssENStudentCareerAim.ssStudent);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStudentCareerAim.ssDestination== "")) {
							sqlCmd.CreateParameter("@ssDestination", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDestination", DbType.String, ssENStudentCareerAim.ssDestination);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENStudentCareerAim.ssDate);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENStudentCareerAim.ssNotes);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENStudentCareerAim.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENStudentCareerAim.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENStudentCareerAim.ssCreatedOn);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssIsStudent", DbType.Boolean, ssENStudentCareerAim.ssIsStudent);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssStudentNote_Descrip", DbType.String, ssENStudentCareerAim.ssStudentNote_Descrip);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssStudentNote_CreatedOn", DbType.DateTime, ssENStudentCareerAim.ssStudentNote_CreatedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISSTUDENT] = [ISSTUDENT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentCareerAimssId", DbType.Int32, ssENStudentCareerAim.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentCareerAim (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentCareerAimEntity.LocalViewName(null, null) + " (" +
						 " [STUDENT]" +
						 ", [DESTINATION]" +
						 ", [DATE]" +
						 ", [NOTES]" +
						 ", [CREATEDBY]" +
						 ", [CREATEDON]" +
						 ", [ISSTUDENT]" +
						 ", [STUDENTNOTE_DESCRIP]" +
						 ", [STUDENTNOTE_CREATEDON]" +
						 " ) VALUES (" +
						 " @ssStudent" +
						 ", @ssDestination" +
						 ", @ssDate" +
						 ", @ssNotes" +
						 ", @ssCreatedBy" +
						 ", @ssCreatedOn" +
						 ", @ssIsStudent" +
						 ", @ssStudentNote_Descrip" +
						 ", @ssStudentNote_CreatedOn" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudentCareerAim.ssStudent== "")) {
							insertSqlCmd.CreateParameter("@ssStudent", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudent", DbType.String, ssENStudentCareerAim.ssStudent);
						}
						if ((ssENStudentCareerAim.ssDestination== "")) {
							insertSqlCmd.CreateParameter("@ssDestination", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDestination", DbType.String, ssENStudentCareerAim.ssDestination);
						}
						insertSqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENStudentCareerAim.ssDate);
						insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENStudentCareerAim.ssNotes);
						if ((ssENStudentCareerAim.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENStudentCareerAim.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENStudentCareerAim.ssCreatedOn);
						insertSqlCmd.CreateParameter("@ssIsStudent", DbType.Boolean, ssENStudentCareerAim.ssIsStudent);
						insertSqlCmd.CreateParameter("@ssStudentNote_Descrip", DbType.String, ssENStudentCareerAim.ssStudentNote_Descrip);
						insertSqlCmd.CreateParameter("@ssStudentNote_CreatedOn", DbType.DateTime, ssENStudentCareerAim.ssStudentNote_CreatedOn);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentCareerAim", true), typeof(int));
					} else {
						outParamId = ssENStudentCareerAim.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentCareerAim
		/// </summary>

		public static void DeleteStudentCareerAim(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCareerAimEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentCareerAimEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentCareerAim", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentCareerAim
		/// </summary>

		public static void GetStudentCareerAim(HeContext heContext, int inParamId, out RCStudentCareerAimRecord outParamRecord) {
			outParamRecord = new RCStudentCareerAimRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCareerAimEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENT]" +
					 ", [DESTINATION]" +
					 ", [DATE]" +
					 ", [NOTES]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 ", [ISSTUDENT]" +
					 ", [STUDENTNOTE_DESCRIP]" +
					 ", [STUDENTNOTE_CREATEDON]" +
					 " FROM " + ENStudentCareerAimEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentCareerAim", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(10, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentCareerAimEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentCareerAimForUpdate
		/// </summary>

		public static void GetStudentCareerAimForUpdate(HeContext heContext, int inParamId, out RCStudentCareerAimRecord outParamRecord) {
			outParamRecord = new RCStudentCareerAimRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCareerAimEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENT]" +
					 ", [DESTINATION]" +
					 ", [DATE]" +
					 ", [NOTES]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 ", [ISSTUDENT]" +
					 ", [STUDENTNOTE_DESCRIP]" +
					 ", [STUDENTNOTE_CREATEDON]" +
					 "FROM " + ENStudentCareerAimEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentCareerAimForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(10, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentCareerAimEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentCareerAim
		/// </summary>

		public static void UpdateStudentCareerAim(HeContext heContext, BitArray usedFields, RCStudentCareerAimRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCareerAimEntity.eSpaceId;
				ENStudentCareerAimEntityRecord ssENStudentCareerAim = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(10, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentCareerAimEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENT] = @ssStudent"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESTINATION] = @ssDestination"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATE] = @ssDate"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISSTUDENT] = @ssIsStudent"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTNOTE_DESCRIP] = @ssStudentNote_Descrip"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTNOTE_CREATEDON] = @ssStudentNote_CreatedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentCareerAimssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentCareerAim.ssStudent== "")) {
							sqlCmd.CreateParameter("@ssStudent", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudent", DbType.String, ssENStudentCareerAim.ssStudent);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStudentCareerAim.ssDestination== "")) {
							sqlCmd.CreateParameter("@ssDestination", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDestination", DbType.String, ssENStudentCareerAim.ssDestination);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENStudentCareerAim.ssDate);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENStudentCareerAim.ssNotes);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENStudentCareerAim.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENStudentCareerAim.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENStudentCareerAim.ssCreatedOn);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssIsStudent", DbType.Boolean, ssENStudentCareerAim.ssIsStudent);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssStudentNote_Descrip", DbType.String, ssENStudentCareerAim.ssStudentNote_Descrip);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssStudentNote_CreatedOn", DbType.DateTime, ssENStudentCareerAim.ssStudentNote_CreatedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISSTUDENT] = [ISSTUDENT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentCareerAimssId", DbType.Int32, ssENStudentCareerAim.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentCareerAim", true) <= 0)
					throw new DataBaseException(ENStudentCareerAimEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentCareerAim.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentCareerAim")]
	public class WORCStudentCareerAimRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Student")]
		public string varWSStudent;

		[System.Xml.Serialization.XmlElement("Destination")]
		public string varWSDestination;

		[System.Xml.Serialization.XmlElement("Date", DataType= "date")]
		public DateTime varWSDate;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string varWSNotes;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime varWSCreatedOn;

		[System.Xml.Serialization.XmlElement("IsStudent")]
		public bool varWSIsStudent;

		[System.Xml.Serialization.XmlElement("StudentNote_Descrip")]
		public string varWSStudentNote_Descrip;

		[System.Xml.Serialization.XmlElement("StudentNote_CreatedOn")]
		public DateTime varWSStudentNote_CreatedOn;

		public WORCStudentCareerAimRecord() {
			varWSId = (int) 0;
			varWSStudent = (string) "";
			varWSDestination = (string) "";
			varWSDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSNotes = (string) "";
			varWSCreatedBy = (int) 0;
			varWSCreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSIsStudent = (bool) false;
			varWSStudentNote_Descrip = (string) "";
			varWSStudentNote_CreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCStudentCareerAimRecord(ENStudentCareerAimEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudent = BaseAppUtils.RemoveControlChars(r.ssStudent);
			varWSDestination = BaseAppUtils.RemoveControlChars(r.ssDestination);
			varWSDate = (DateTime) r.ssDate;
			varWSNotes = BaseAppUtils.RemoveControlChars(r.ssNotes);
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSCreatedOn = (DateTime) r.ssCreatedOn;
			varWSIsStudent = (bool) r.ssIsStudent;
			varWSStudentNote_Descrip = BaseAppUtils.RemoveControlChars(r.ssStudentNote_Descrip);
			varWSStudentNote_CreatedOn = (DateTime) r.ssStudentNote_CreatedOn;
		}

		public static RLStudentCareerAimList ToRecordList(WORCStudentCareerAimRecord[] array) {
			RLStudentCareerAimList rl = new RLStudentCareerAimList();
			if (array != null) {
				foreach(WORCStudentCareerAimRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentCareerAimRecord[] FromRecordList(RLStudentCareerAimList rl) {
			WORCStudentCareerAimRecord[] array = new WORCStudentCareerAimRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentCareerAimRecord {
		public static implicit operator WORCStudentCareerAimRecord(RCStudentCareerAimRecord r) {
			return new WORCStudentCareerAimRecord(r.ssENStudentCareerAim);
		}

		public static implicit operator RCStudentCareerAimRecord(WORCStudentCareerAimRecord w) {
			RCStudentCareerAimRecord r = new RCStudentCareerAimRecord("");
			if (w != null) {
				r.ssENStudentCareerAim = w;
			}
			return r;
		}

	}

	partial struct ENStudentCareerAimEntityRecord {
		public static implicit operator WORCStudentCareerAimRecord(ENStudentCareerAimEntityRecord r) {
			return new WORCStudentCareerAimRecord(r);
		}

		public static implicit operator ENStudentCareerAimEntityRecord(WORCStudentCareerAimRecord w) {
			ENStudentCareerAimEntityRecord r = new ENStudentCareerAimEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudent = (string) w.varWSStudent;
				r.ssDestination = (string) w.varWSDestination;
				r.ssDate = (DateTime) w.varWSDate;
				r.ssNotes = ((string) w.varWSNotes ?? "");
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssCreatedOn = (DateTime) w.varWSCreatedOn;
				r.ssIsStudent = (bool) w.varWSIsStudent;
				r.ssStudentNote_Descrip = ((string) w.varWSStudentNote_Descrip ?? "");
				r.ssStudentNote_CreatedOn = (DateTime) w.varWSStudentNote_CreatedOn;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentCareerAimRecordList {
		public WORCStudentCareerAimRecord[] Array;


		public WORLStudentCareerAimRecordList(WORCStudentCareerAimRecord[] r) {
			if (r == null)
			Array = new WORCStudentCareerAimRecord[0];
			else
			Array = r;
		}
		public WORLStudentCareerAimRecordList() {
			Array = new WORCStudentCareerAimRecord[0];
		}

		public WORLStudentCareerAimRecordList(RLStudentCareerAimRecordList rl) {
			rl=(RLStudentCareerAimRecordList) rl.Duplicate();
			Array = new WORCStudentCareerAimRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentCareerAimRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentCareerAimRecordList {
		public static implicit operator RLStudentCareerAimRecordList(WORCStudentCareerAimRecord[] array) {
			RLStudentCareerAimRecordList rl = new RLStudentCareerAimRecordList();
			if (array != null) {
				foreach(WORCStudentCareerAimRecord val in array) {
					rl.Append((RCStudentCareerAimRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentCareerAimRecord[](RLStudentCareerAimRecordList rl) {
			WORCStudentCareerAimRecord[] array = new WORCStudentCareerAimRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentCareerAimRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentCareerAimRecordList {
		public static implicit operator RLStudentCareerAimRecordList(WORLStudentCareerAimRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentCareerAimRecordList(RLStudentCareerAimRecordList rl) {
			return new WORLStudentCareerAimRecordList(rl);
		}
		public static implicit operator WORCStudentCareerAimRecord[](WORLStudentCareerAimRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentCareerAimRecordList(WORCStudentCareerAimRecord[] array) {
			return new WORLStudentCareerAimRecordList(array);
		}
	}
}

