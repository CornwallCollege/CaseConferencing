/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSafeguardingPersonsInvolvedEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENSafeguardingPersonsInvolvedEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENSafeguardingPersonsInvolvedEntity.eSpaceId;
	} // ENSafeguardingPersonsInvolvedEntity

	/// <summary>
	/// Entity <code>ENSafeguardingPersonsInvolvedEntityRecord</code> that represents the Service Studio
	///  entity <code>SafeguardingPersonsInvolved</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("SafeguardingPersonsInvolved", "CqmFq7mxLke1cpTEZF+Bbg", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_SafeguardingPersonsInvolved", "")]
	[Serializable()]
	public partial struct ENSafeguardingPersonsInvolvedEntityRecord: ISerializable, ITypedRecord<ENSafeguardingPersonsInvolvedEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xXUNI6TZF0uqrYI1U1QG0Q");
		private static readonly GlobalObjectKey IdStaffId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*nOZ_xhco5k6PaZJS62sqAg");
		private static readonly GlobalObjectKey IdSafeguardingIssue = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*RsK3yskFjU+BGAAZnhi0pA");
		private static readonly GlobalObjectKey IdExternalPerson = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*1zf6fhNn2kCxMUTjdqXH5g");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(4, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STAFFID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StaffId")]
		private int _ssStaffId;
		public int ssStaffId {
			get {
				return _ssStaffId;
			}
			set {
				if ((_ssStaffId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStaffId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGISSUE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SafeguardingIssue")]
		private int _ssSafeguardingIssue;
		public int ssSafeguardingIssue {
			get {
				return _ssSafeguardingIssue;
			}
			set {
				if ((_ssSafeguardingIssue!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssSafeguardingIssue = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EXTERNALPERSON", 250, false, false, false)]
		[System.Xml.Serialization.XmlElement("ExternalPerson")]
		private string _ssExternalPerson;
		public string ssExternalPerson {
			get {
				return _ssExternalPerson;
			}
			set {
				if ((_ssExternalPerson!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssExternalPerson = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSafeguardingPersonsInvolvedEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(4, true);
			OptimizedAttributes = new BitArray(4, false);
			_ssId = 0;
			_ssStaffId = 0;
			_ssSafeguardingIssue = 0;
			_ssExternalPerson = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "SafeguardingPersonsInvolved.Id", 0);
			ssStaffId = r.ReadEntityReference(index++, "SafeguardingPersonsInvolved.StaffId", 0);
			ssSafeguardingIssue = r.ReadEntityReference(index++, "SafeguardingPersonsInvolved.SafeguardingIssue", 0);
			ssExternalPerson = r.ReadText(index++, "SafeguardingPersonsInvolved.ExternalPerson", "");
			ChangedAttributes = new BitArray(4, false);
			OptimizedAttributes = new BitArray(4, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSafeguardingPersonsInvolvedEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSafeguardingPersonsInvolvedEntityRecord a, ENSafeguardingPersonsInvolvedEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStaffId != b.ssStaffId) return false;
			if (a.ssSafeguardingIssue != b.ssSafeguardingIssue) return false;
			if (a.ssExternalPerson != b.ssExternalPerson) return false;
			return true;
		}

		public static bool operator != (ENSafeguardingPersonsInvolvedEntityRecord a, ENSafeguardingPersonsInvolvedEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSafeguardingPersonsInvolvedEntityRecord)) return false;
			return (this == (ENSafeguardingPersonsInvolvedEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStaffId.GetHashCode()
				^ ssSafeguardingIssue.GetHashCode()
				^ ssExternalPerson.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSafeguardingPersonsInvolvedEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(4, true);
			OptimizedAttributes = new BitArray(4, false);
			_ssId = 0;
			_ssStaffId = 0;
			_ssSafeguardingIssue = 0;
			_ssExternalPerson = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStaffId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssSafeguardingIssue = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssExternalPerson = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSafeguardingPersonsInvolvedEntityRecord Duplicate() {
			ENSafeguardingPersonsInvolvedEntityRecord t;
			t._ssId = this._ssId;
			t._ssStaffId = this._ssStaffId;
			t._ssSafeguardingIssue = this._ssSafeguardingIssue;
			t._ssExternalPerson = this._ssExternalPerson;
			t.ChangedAttributes = new BitArray(4);
			t.OptimizedAttributes = new BitArray(4);
			for (int i = 0; i < 4; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StaffId")) VarValue.AppendAttribute(recordElem, "StaffId", ssStaffId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StaffId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingIssue")) VarValue.AppendAttribute(recordElem, "SafeguardingIssue", ssSafeguardingIssue, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingIssue");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExternalPerson")) VarValue.AppendAttribute(recordElem, "ExternalPerson", ssExternalPerson, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ExternalPerson");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "staffid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffId")) variable.Value = ssStaffId; else variable.Optimized = true;
			} else if (head == "safeguardingissue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssue")) variable.Value = ssSafeguardingIssue; else variable.Optimized = true;
			} else if (head == "externalperson") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExternalPerson")) variable.Value = ssExternalPerson; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStaffId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdSafeguardingIssue)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdExternalPerson)) {
				return ChangedAttributes[3];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStaffId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdSafeguardingIssue)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdExternalPerson)) {
				return OptimizedAttributes[3];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStaffId) {
				return ssStaffId;
			} else if (key == IdSafeguardingIssue) {
				return ssSafeguardingIssue;
			} else if (key == IdExternalPerson) {
				return ssExternalPerson;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(4);
			OptimizedAttributes = new BitArray(4);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStaffId = (int) other.AttributeGet(IdStaffId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStaffId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStaffId);
			ssSafeguardingIssue = (int) other.AttributeGet(IdSafeguardingIssue);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdSafeguardingIssue);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdSafeguardingIssue);
			ssExternalPerson = (string) other.AttributeGet(IdExternalPerson);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdExternalPerson);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdExternalPerson);
		}
	} // ENSafeguardingPersonsInvolvedEntityRecord
	/// <summary>
	/// Structure <code>RCSafeguardingPersonsInvolvedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSafeguardingPersonsInvolvedRecord: ISerializable, ITypedRecord<RCSafeguardingPersonsInvolvedRecord> {
		private static readonly GlobalObjectKey IdSafeguardingPersonsInvolved = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*xKhFENz1CnMKyTEcWw586A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SafeguardingPersonsInvolved")]
		public ENSafeguardingPersonsInvolvedEntityRecord ssENSafeguardingPersonsInvolved;


		public static implicit operator ENSafeguardingPersonsInvolvedEntityRecord(RCSafeguardingPersonsInvolvedRecord r) {
			return r.ssENSafeguardingPersonsInvolved;
		}

		public static implicit operator RCSafeguardingPersonsInvolvedRecord(ENSafeguardingPersonsInvolvedEntityRecord r) {
			RCSafeguardingPersonsInvolvedRecord res = new RCSafeguardingPersonsInvolvedRecord(null);
			res.ssENSafeguardingPersonsInvolved = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSafeguardingPersonsInvolved.ChangedAttributes = value;
			}
			get {
				return ssENSafeguardingPersonsInvolved.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSafeguardingPersonsInvolvedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSafeguardingPersonsInvolved = new ENSafeguardingPersonsInvolvedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSafeguardingPersonsInvolved.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSafeguardingPersonsInvolved.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSafeguardingPersonsInvolved.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSafeguardingPersonsInvolved.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSafeguardingPersonsInvolvedRecord r) {
			this = r;
		}


		public static bool operator == (RCSafeguardingPersonsInvolvedRecord a, RCSafeguardingPersonsInvolvedRecord b) {
			if (a.ssENSafeguardingPersonsInvolved != b.ssENSafeguardingPersonsInvolved) return false;
			return true;
		}

		public static bool operator != (RCSafeguardingPersonsInvolvedRecord a, RCSafeguardingPersonsInvolvedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSafeguardingPersonsInvolvedRecord)) return false;
			return (this == (RCSafeguardingPersonsInvolvedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSafeguardingPersonsInvolved.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSafeguardingPersonsInvolvedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSafeguardingPersonsInvolved = new ENSafeguardingPersonsInvolvedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSafeguardingPersonsInvolved = (ENSafeguardingPersonsInvolvedEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSafeguardingPersonsInvolved.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSafeguardingPersonsInvolved.InternalRecursiveSave();
		}


		public RCSafeguardingPersonsInvolvedRecord Duplicate() {
			RCSafeguardingPersonsInvolvedRecord t;
			t.ssENSafeguardingPersonsInvolved = (ENSafeguardingPersonsInvolvedEntityRecord) this.ssENSafeguardingPersonsInvolved.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSafeguardingPersonsInvolved.ToXml(this, recordElem, "SafeguardingPersonsInvolved", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "safeguardingpersonsinvolved") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingPersonsInvolved")) variable.Value = ssENSafeguardingPersonsInvolved; else variable.Optimized = true;
				variable.SetFieldName("safeguardingpersonsinvolved");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSafeguardingPersonsInvolved.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSafeguardingPersonsInvolved.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSafeguardingPersonsInvolved) {
				return ssENSafeguardingPersonsInvolved;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSafeguardingPersonsInvolved.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingPersonsInvolved));
		}
	} // RCSafeguardingPersonsInvolvedRecord
	/// <summary>
	/// RecordList type <code>RLSafeguardingPersonsInvolvedRecordList</code> that represents a record list
	///  of <code>SafeguardingPersonsInvolved</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingPersonsInvolvedRecordList: GenericRecordList<RCSafeguardingPersonsInvolvedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSafeguardingPersonsInvolvedRecord GetElementDefaultValue() {
			return new RCSafeguardingPersonsInvolvedRecord("");
		}

		public T[] ToArray<T>(Func<RCSafeguardingPersonsInvolvedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingPersonsInvolvedRecordList recordlist, Func<RCSafeguardingPersonsInvolvedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingPersonsInvolvedRecordList ToList<T>(T[] array, Func <T, RCSafeguardingPersonsInvolvedRecord> converter) {
			RLSafeguardingPersonsInvolvedRecordList result = new RLSafeguardingPersonsInvolvedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingPersonsInvolvedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingPersonsInvolvedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingPersonsInvolvedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingPersonsInvolvedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSafeguardingPersonsInvolvedRecord> NewList() {
			return new RLSafeguardingPersonsInvolvedRecordList();
		}


	} // RLSafeguardingPersonsInvolvedRecordList

	/// <summary>
	/// RecordList type <code>RLSafeguardingPersonsInvolvedList</code> that represents a record list of
	///  <code>StaffIdentifier, Text, Integer, SafeguardingIssueIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingPersonsInvolvedList: GenericRecordList<ENSafeguardingPersonsInvolvedEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSafeguardingPersonsInvolvedEntityRecord GetElementDefaultValue() {
			return new ENSafeguardingPersonsInvolvedEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSafeguardingPersonsInvolvedEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingPersonsInvolvedList recordlist, Func<ENSafeguardingPersonsInvolvedEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingPersonsInvolvedList ToList<T>(T[] array, Func <T, ENSafeguardingPersonsInvolvedEntityRecord> converter) {
			RLSafeguardingPersonsInvolvedList result = new RLSafeguardingPersonsInvolvedList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingPersonsInvolvedList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingPersonsInvolvedList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingPersonsInvolvedList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingPersonsInvolvedList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSafeguardingPersonsInvolvedEntityRecord> NewList() {
			return new RLSafeguardingPersonsInvolvedList();
		}


	} // RLSafeguardingPersonsInvolvedList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateSafeguardingPersonsInvolved
		/// </summary>

		public static void CreateSafeguardingPersonsInvolved(HeContext heContext, RCSafeguardingPersonsInvolvedRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingPersonsInvolvedEntity.eSpaceId;
				ENSafeguardingPersonsInvolvedEntityRecord ssENSafeguardingPersonsInvolved = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENSafeguardingPersonsInvolvedEntity.LocalViewName(null, null) + " (" +
					 " [STAFFID]" +
					 ", [SAFEGUARDINGISSUE]" +
					 ", [EXTERNALPERSON]" +
					 " ) VALUES (" +
					 " @ssStaffId" +
					 ", @ssSafeguardingIssue" +
					 ", @ssExternalPerson" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENSafeguardingPersonsInvolved.ssStaffId==0)) {
						insertSqlCmd.CreateParameter("@ssStaffId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStaffId", DbType.Int32, ssENSafeguardingPersonsInvolved.ssStaffId);
					}
					if ((ssENSafeguardingPersonsInvolved.ssSafeguardingIssue==0)) {
						insertSqlCmd.CreateParameter("@ssSafeguardingIssue", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSafeguardingIssue", DbType.Int32, ssENSafeguardingPersonsInvolved.ssSafeguardingIssue);
					}
					insertSqlCmd.CreateParameter("@ssExternalPerson", DbType.String, ssENSafeguardingPersonsInvolved.ssExternalPerson);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateSafeguardingPersonsInvolved", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateSafeguardingPersonsInvolved
		/// </summary>

		public static void CreateOrUpdateSafeguardingPersonsInvolved(HeContext heContext, BitArray usedFields, RCSafeguardingPersonsInvolvedRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingPersonsInvolvedEntity.eSpaceId;
				ENSafeguardingPersonsInvolvedEntityRecord ssENSafeguardingPersonsInvolved = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(4, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSafeguardingPersonsInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAFFID] = @ssStaffId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGISSUE] = @ssSafeguardingIssue"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXTERNALPERSON] = @ssExternalPerson"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSafeguardingPersonsInvolvedssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSafeguardingPersonsInvolved.ssStaffId==0)) {
							sqlCmd.CreateParameter("@ssStaffId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStaffId", DbType.Int32, ssENSafeguardingPersonsInvolved.ssStaffId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSafeguardingPersonsInvolved.ssSafeguardingIssue==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingIssue", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingIssue", DbType.Int32, ssENSafeguardingPersonsInvolved.ssSafeguardingIssue);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssExternalPerson", DbType.String, ssENSafeguardingPersonsInvolved.ssExternalPerson);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[EXTERNALPERSON] = [EXTERNALPERSON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSafeguardingPersonsInvolvedssId", DbType.Int32, ssENSafeguardingPersonsInvolved.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateSafeguardingPersonsInvolved (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENSafeguardingPersonsInvolvedEntity.LocalViewName(null, null) + " (" +
						 " [STAFFID]" +
						 ", [SAFEGUARDINGISSUE]" +
						 ", [EXTERNALPERSON]" +
						 " ) VALUES (" +
						 " @ssStaffId" +
						 ", @ssSafeguardingIssue" +
						 ", @ssExternalPerson" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENSafeguardingPersonsInvolved.ssStaffId==0)) {
							insertSqlCmd.CreateParameter("@ssStaffId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStaffId", DbType.Int32, ssENSafeguardingPersonsInvolved.ssStaffId);
						}
						if ((ssENSafeguardingPersonsInvolved.ssSafeguardingIssue==0)) {
							insertSqlCmd.CreateParameter("@ssSafeguardingIssue", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSafeguardingIssue", DbType.Int32, ssENSafeguardingPersonsInvolved.ssSafeguardingIssue);
						}
						insertSqlCmd.CreateParameter("@ssExternalPerson", DbType.String, ssENSafeguardingPersonsInvolved.ssExternalPerson);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateSafeguardingPersonsInvolved", true), typeof(int));
					} else {
						outParamId = ssENSafeguardingPersonsInvolved.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteSafeguardingPersonsInvolved
		/// </summary>

		public static void DeleteSafeguardingPersonsInvolved(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingPersonsInvolvedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENSafeguardingPersonsInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteSafeguardingPersonsInvolved", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSafeguardingPersonsInvolved
		/// </summary>

		public static void GetSafeguardingPersonsInvolved(HeContext heContext, int inParamId, out RCSafeguardingPersonsInvolvedRecord outParamRecord) {
			outParamRecord = new RCSafeguardingPersonsInvolvedRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingPersonsInvolvedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STAFFID]" +
					 ", [SAFEGUARDINGISSUE]" +
					 ", [EXTERNALPERSON]" +
					 " FROM " + ENSafeguardingPersonsInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSafeguardingPersonsInvolved", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(4, false)
							}
							;
						} else
						throw new DataBaseException(ENSafeguardingPersonsInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSafeguardingPersonsInvolvedForUpdate
		/// </summary>

		public static void GetSafeguardingPersonsInvolvedForUpdate(HeContext heContext, int inParamId, out RCSafeguardingPersonsInvolvedRecord outParamRecord) {
			outParamRecord = new RCSafeguardingPersonsInvolvedRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingPersonsInvolvedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STAFFID]" +
					 ", [SAFEGUARDINGISSUE]" +
					 ", [EXTERNALPERSON]" +
					 "FROM " + ENSafeguardingPersonsInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSafeguardingPersonsInvolvedForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(4, false)
							}
							;
						} else
						throw new DataBaseException(ENSafeguardingPersonsInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateSafeguardingPersonsInvolved
		/// </summary>

		public static void UpdateSafeguardingPersonsInvolved(HeContext heContext, BitArray usedFields, RCSafeguardingPersonsInvolvedRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingPersonsInvolvedEntity.eSpaceId;
				ENSafeguardingPersonsInvolvedEntityRecord ssENSafeguardingPersonsInvolved = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(4, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSafeguardingPersonsInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAFFID] = @ssStaffId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGISSUE] = @ssSafeguardingIssue"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXTERNALPERSON] = @ssExternalPerson"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSafeguardingPersonsInvolvedssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSafeguardingPersonsInvolved.ssStaffId==0)) {
							sqlCmd.CreateParameter("@ssStaffId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStaffId", DbType.Int32, ssENSafeguardingPersonsInvolved.ssStaffId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSafeguardingPersonsInvolved.ssSafeguardingIssue==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingIssue", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingIssue", DbType.Int32, ssENSafeguardingPersonsInvolved.ssSafeguardingIssue);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssExternalPerson", DbType.String, ssENSafeguardingPersonsInvolved.ssExternalPerson);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[EXTERNALPERSON] = [EXTERNALPERSON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSafeguardingPersonsInvolvedssId", DbType.Int32, ssENSafeguardingPersonsInvolved.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateSafeguardingPersonsInvolved", true) <= 0)
					throw new DataBaseException(ENSafeguardingPersonsInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENSafeguardingPersonsInvolved.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("SafeguardingPersonsInvolved")]
	public class WORCSafeguardingPersonsInvolvedRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StaffId")]
		public int varWSStaffId;

		[System.Xml.Serialization.XmlElement("SafeguardingIssue")]
		public int varWSSafeguardingIssue;

		[System.Xml.Serialization.XmlElement("ExternalPerson")]
		public string varWSExternalPerson;

		public WORCSafeguardingPersonsInvolvedRecord() {
			varWSId = (int) 0;
			varWSStaffId = (int) 0;
			varWSSafeguardingIssue = (int) 0;
			varWSExternalPerson = (string) "";
		}

		public WORCSafeguardingPersonsInvolvedRecord(ENSafeguardingPersonsInvolvedEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStaffId = (int) r.ssStaffId;
			varWSSafeguardingIssue = (int) r.ssSafeguardingIssue;
			varWSExternalPerson = BaseAppUtils.RemoveControlChars(r.ssExternalPerson);
		}

		public static RLSafeguardingPersonsInvolvedList ToRecordList(WORCSafeguardingPersonsInvolvedRecord[] array) {
			RLSafeguardingPersonsInvolvedList rl = new RLSafeguardingPersonsInvolvedList();
			if (array != null) {
				foreach(WORCSafeguardingPersonsInvolvedRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSafeguardingPersonsInvolvedRecord[] FromRecordList(RLSafeguardingPersonsInvolvedList rl) {
			WORCSafeguardingPersonsInvolvedRecord[] array = new WORCSafeguardingPersonsInvolvedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSafeguardingPersonsInvolvedRecord {
		public static implicit operator WORCSafeguardingPersonsInvolvedRecord(RCSafeguardingPersonsInvolvedRecord r) {
			return new WORCSafeguardingPersonsInvolvedRecord(r.ssENSafeguardingPersonsInvolved);
		}

		public static implicit operator RCSafeguardingPersonsInvolvedRecord(WORCSafeguardingPersonsInvolvedRecord w) {
			RCSafeguardingPersonsInvolvedRecord r = new RCSafeguardingPersonsInvolvedRecord("");
			if (w != null) {
				r.ssENSafeguardingPersonsInvolved = w;
			}
			return r;
		}

	}

	partial struct ENSafeguardingPersonsInvolvedEntityRecord {
		public static implicit operator WORCSafeguardingPersonsInvolvedRecord(ENSafeguardingPersonsInvolvedEntityRecord r) {
			return new WORCSafeguardingPersonsInvolvedRecord(r);
		}

		public static implicit operator ENSafeguardingPersonsInvolvedEntityRecord(WORCSafeguardingPersonsInvolvedRecord w) {
			ENSafeguardingPersonsInvolvedEntityRecord r = new ENSafeguardingPersonsInvolvedEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStaffId = (int) w.varWSStaffId;
				r.ssSafeguardingIssue = (int) w.varWSSafeguardingIssue;
				r.ssExternalPerson = ((string) w.varWSExternalPerson ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSafeguardingPersonsInvolvedRecordList {
		public WORCSafeguardingPersonsInvolvedRecord[] Array;


		public WORLSafeguardingPersonsInvolvedRecordList(WORCSafeguardingPersonsInvolvedRecord[] r) {
			if (r == null)
			Array = new WORCSafeguardingPersonsInvolvedRecord[0];
			else
			Array = r;
		}
		public WORLSafeguardingPersonsInvolvedRecordList() {
			Array = new WORCSafeguardingPersonsInvolvedRecord[0];
		}

		public WORLSafeguardingPersonsInvolvedRecordList(RLSafeguardingPersonsInvolvedRecordList rl) {
			rl=(RLSafeguardingPersonsInvolvedRecordList) rl.Duplicate();
			Array = new WORCSafeguardingPersonsInvolvedRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSafeguardingPersonsInvolvedRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSafeguardingPersonsInvolvedRecordList {
		public static implicit operator RLSafeguardingPersonsInvolvedRecordList(WORCSafeguardingPersonsInvolvedRecord[] array) {
			RLSafeguardingPersonsInvolvedRecordList rl = new RLSafeguardingPersonsInvolvedRecordList();
			if (array != null) {
				foreach(WORCSafeguardingPersonsInvolvedRecord val in array) {
					rl.Append((RCSafeguardingPersonsInvolvedRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSafeguardingPersonsInvolvedRecord[](RLSafeguardingPersonsInvolvedRecordList rl) {
			WORCSafeguardingPersonsInvolvedRecord[] array = new WORCSafeguardingPersonsInvolvedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSafeguardingPersonsInvolvedRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSafeguardingPersonsInvolvedRecordList {
		public static implicit operator RLSafeguardingPersonsInvolvedRecordList(WORLSafeguardingPersonsInvolvedRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSafeguardingPersonsInvolvedRecordList(RLSafeguardingPersonsInvolvedRecordList rl) {
			return new WORLSafeguardingPersonsInvolvedRecordList(rl);
		}
		public static implicit operator WORCSafeguardingPersonsInvolvedRecord[](WORLSafeguardingPersonsInvolvedRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSafeguardingPersonsInvolvedRecordList(WORCSafeguardingPersonsInvolvedRecord[] array) {
			return new WORLSafeguardingPersonsInvolvedRecordList(array);
		}
	}
}

