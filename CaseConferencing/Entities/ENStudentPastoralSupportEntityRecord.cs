/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentPastoralSupportEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentPastoralSupportEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentPastoralSupportEntity.eSpaceId;
	} // ENStudentPastoralSupportEntity

	/// <summary>
	/// Entity <code>ENStudentPastoralSupportEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentPastoralSupport</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentPastoralSupport", "KGQb+IRXPEuEY9l+iwg88w", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentPastoralSupport", "")]
	[Serializable()]
	public partial struct ENStudentPastoralSupportEntityRecord: ISerializable, ITypedRecord<ENStudentPastoralSupportEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*YW9tf8rRUkuGm43cx1hB5g");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*t217v2xB0E2i83kyu2G75Q");
		private static readonly GlobalObjectKey IdPastoralSupport = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Xdo1DGGWakqs0pDYS7dS9w");
		private static readonly GlobalObjectKey IdLastUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*PtqcrYgohEmhrlVhe+8www");
		private static readonly GlobalObjectKey IdLastUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*S8KAr2wne0Kwiux0RUZkHg");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(5, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PASTORALSUPPORT", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("PastoralSupport")]
		private string _ssPastoralSupport;
		public string ssPastoralSupport {
			get {
				return _ssPastoralSupport;
			}
			set {
				if ((_ssPastoralSupport!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssPastoralSupport = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		private int _ssLastUpdatedBy;
		public int ssLastUpdatedBy {
			get {
				return _ssLastUpdatedBy;
			}
			set {
				if ((_ssLastUpdatedBy!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssLastUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastUpdatedOn")]
		private DateTime _ssLastUpdatedOn;
		public DateTime ssLastUpdatedOn {
			get {
				return _ssLastUpdatedOn;
			}
			set {
				if ((_ssLastUpdatedOn!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssLastUpdatedOn = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentPastoralSupportEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssPastoralSupport = "";
			_ssLastUpdatedBy = 0;
			_ssLastUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentPastoralSupport.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "StudentPastoralSupport.StudentReference", "");
			ssPastoralSupport = r.ReadText(index++, "StudentPastoralSupport.PastoralSupport", "");
			ssLastUpdatedBy = r.ReadEntityReference(index++, "StudentPastoralSupport.LastUpdatedBy", 0);
			ssLastUpdatedOn = r.ReadDateTime(index++, "StudentPastoralSupport.LastUpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(5, false);
			OptimizedAttributes = new BitArray(5, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentPastoralSupportEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentPastoralSupportEntityRecord a, ENStudentPastoralSupportEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssPastoralSupport != b.ssPastoralSupport) return false;
			if (a.ssLastUpdatedBy != b.ssLastUpdatedBy) return false;
			if (a.ssLastUpdatedOn != b.ssLastUpdatedOn) return false;
			return true;
		}

		public static bool operator != (ENStudentPastoralSupportEntityRecord a, ENStudentPastoralSupportEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentPastoralSupportEntityRecord)) return false;
			return (this == (ENStudentPastoralSupportEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssPastoralSupport.GetHashCode()
				^ ssLastUpdatedBy.GetHashCode()
				^ ssLastUpdatedOn.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentPastoralSupportEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssPastoralSupport = "";
			_ssLastUpdatedBy = 0;
			_ssLastUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssPastoralSupport = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssLastUpdatedBy = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssLastUpdatedOn = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentPastoralSupportEntityRecord Duplicate() {
			ENStudentPastoralSupportEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssPastoralSupport = this._ssPastoralSupport;
			t._ssLastUpdatedBy = this._ssLastUpdatedBy;
			t._ssLastUpdatedOn = this._ssLastUpdatedOn;
			t.ChangedAttributes = new BitArray(5);
			t.OptimizedAttributes = new BitArray(5);
			for (int i = 0; i < 5; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PastoralSupport")) VarValue.AppendAttribute(recordElem, "PastoralSupport", ssPastoralSupport, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PastoralSupport");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedBy")) VarValue.AppendAttribute(recordElem, "LastUpdatedBy", ssLastUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedOn")) VarValue.AppendAttribute(recordElem, "LastUpdatedOn", ssLastUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedOn");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "pastoralsupport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PastoralSupport")) variable.Value = ssPastoralSupport; else variable.Optimized = true;
			} else if (head == "lastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedBy")) variable.Value = ssLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "lastupdatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedOn")) variable.Value = ssLastUpdatedOn; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdPastoralSupport)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdLastUpdatedOn)) {
				return ChangedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdPastoralSupport)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdLastUpdatedOn)) {
				return OptimizedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdPastoralSupport) {
				return ssPastoralSupport;
			} else if (key == IdLastUpdatedBy) {
				return ssLastUpdatedBy;
			} else if (key == IdLastUpdatedOn) {
				return ssLastUpdatedOn;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(5);
			OptimizedAttributes = new BitArray(5);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssPastoralSupport = (string) other.AttributeGet(IdPastoralSupport);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdPastoralSupport);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdPastoralSupport);
			ssLastUpdatedBy = (int) other.AttributeGet(IdLastUpdatedBy);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdLastUpdatedBy);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdLastUpdatedBy);
			ssLastUpdatedOn = (DateTime) other.AttributeGet(IdLastUpdatedOn);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdLastUpdatedOn);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdLastUpdatedOn);
		}
	} // ENStudentPastoralSupportEntityRecord
	/// <summary>
	/// Structure <code>RCStudentPastoralSupportRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentPastoralSupportRecord: ISerializable, ITypedRecord<RCStudentPastoralSupportRecord> {
		private static readonly GlobalObjectKey IdStudentPastoralSupport = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*vpNAHq_yZC6uOTQZQAP58g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentPastoralSupport")]
		public ENStudentPastoralSupportEntityRecord ssENStudentPastoralSupport;


		public static implicit operator ENStudentPastoralSupportEntityRecord(RCStudentPastoralSupportRecord r) {
			return r.ssENStudentPastoralSupport;
		}

		public static implicit operator RCStudentPastoralSupportRecord(ENStudentPastoralSupportEntityRecord r) {
			RCStudentPastoralSupportRecord res = new RCStudentPastoralSupportRecord(null);
			res.ssENStudentPastoralSupport = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentPastoralSupport.ChangedAttributes = value;
			}
			get {
				return ssENStudentPastoralSupport.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentPastoralSupportRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentPastoralSupport = new ENStudentPastoralSupportEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentPastoralSupport.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentPastoralSupport.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentPastoralSupport.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentPastoralSupport.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentPastoralSupportRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentPastoralSupportRecord a, RCStudentPastoralSupportRecord b) {
			if (a.ssENStudentPastoralSupport != b.ssENStudentPastoralSupport) return false;
			return true;
		}

		public static bool operator != (RCStudentPastoralSupportRecord a, RCStudentPastoralSupportRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentPastoralSupportRecord)) return false;
			return (this == (RCStudentPastoralSupportRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentPastoralSupport.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentPastoralSupportRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentPastoralSupport = new ENStudentPastoralSupportEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentPastoralSupport = (ENStudentPastoralSupportEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentPastoralSupport.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentPastoralSupport.InternalRecursiveSave();
		}


		public RCStudentPastoralSupportRecord Duplicate() {
			RCStudentPastoralSupportRecord t;
			t.ssENStudentPastoralSupport = (ENStudentPastoralSupportEntityRecord) this.ssENStudentPastoralSupport.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentPastoralSupport.ToXml(this, recordElem, "StudentPastoralSupport", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentpastoralsupport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentPastoralSupport")) variable.Value = ssENStudentPastoralSupport; else variable.Optimized = true;
				variable.SetFieldName("studentpastoralsupport");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentPastoralSupport.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentPastoralSupport.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentPastoralSupport) {
				return ssENStudentPastoralSupport;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentPastoralSupport.FillFromOther((IRecord) other.AttributeGet(IdStudentPastoralSupport));
		}
	} // RCStudentPastoralSupportRecord
	/// <summary>
	/// RecordList type <code>RLStudentPastoralSupportRecordList</code> that represents a record list of
	///  <code>StudentPastoralSupport</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentPastoralSupportRecordList: GenericRecordList<RCStudentPastoralSupportRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentPastoralSupportRecord GetElementDefaultValue() {
			return new RCStudentPastoralSupportRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentPastoralSupportRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentPastoralSupportRecordList recordlist, Func<RCStudentPastoralSupportRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentPastoralSupportRecordList ToList<T>(T[] array, Func <T, RCStudentPastoralSupportRecord> converter) {
			RLStudentPastoralSupportRecordList result = new RLStudentPastoralSupportRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentPastoralSupportRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentPastoralSupportRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentPastoralSupportRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentPastoralSupportRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentPastoralSupportRecord> NewList() {
			return new RLStudentPastoralSupportRecordList();
		}


	} // RLStudentPastoralSupportRecordList

	/// <summary>
	/// RecordList type <code>RLStudentPastoralSupportList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, DateTime, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentPastoralSupportList: GenericRecordList<ENStudentPastoralSupportEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentPastoralSupportEntityRecord GetElementDefaultValue() {
			return new ENStudentPastoralSupportEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentPastoralSupportEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentPastoralSupportList recordlist, Func<ENStudentPastoralSupportEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentPastoralSupportList ToList<T>(T[] array, Func <T, ENStudentPastoralSupportEntityRecord> converter) {
			RLStudentPastoralSupportList result = new RLStudentPastoralSupportList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentPastoralSupportList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentPastoralSupportList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentPastoralSupportList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentPastoralSupportList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentPastoralSupportEntityRecord> NewList() {
			return new RLStudentPastoralSupportList();
		}


	} // RLStudentPastoralSupportList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentPastoralSupport
		/// </summary>

		public static void CreateStudentPastoralSupport(HeContext heContext, RCStudentPastoralSupportRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPastoralSupportEntity.eSpaceId;
				ENStudentPastoralSupportEntityRecord ssENStudentPastoralSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentPastoralSupportEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [PASTORALSUPPORT]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDON]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssPastoralSupport" +
					 ", @ssLastUpdatedBy" +
					 ", @ssLastUpdatedOn" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudentPastoralSupport.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentPastoralSupport.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssPastoralSupport", DbType.String, ssENStudentPastoralSupport.ssPastoralSupport);
					if ((ssENStudentPastoralSupport.ssLastUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentPastoralSupport.ssLastUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENStudentPastoralSupport.ssLastUpdatedOn);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentPastoralSupport", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentPastoralSupport
		/// </summary>

		public static void CreateOrUpdateStudentPastoralSupport(HeContext heContext, BitArray usedFields, RCStudentPastoralSupportRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPastoralSupportEntity.eSpaceId;
				ENStudentPastoralSupportEntityRecord ssENStudentPastoralSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentPastoralSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PASTORALSUPPORT] = @ssPastoralSupport"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDON] = @ssLastUpdatedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentPastoralSupportssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentPastoralSupport.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentPastoralSupport.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssPastoralSupport", DbType.String, ssENStudentPastoralSupport.ssPastoralSupport);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENStudentPastoralSupport.ssLastUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentPastoralSupport.ssLastUpdatedBy);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENStudentPastoralSupport.ssLastUpdatedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[LASTUPDATEDON] = [LASTUPDATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentPastoralSupportssId", DbType.Int32, ssENStudentPastoralSupport.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentPastoralSupport (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentPastoralSupportEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [PASTORALSUPPORT]" +
						 ", [LASTUPDATEDBY]" +
						 ", [LASTUPDATEDON]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssPastoralSupport" +
						 ", @ssLastUpdatedBy" +
						 ", @ssLastUpdatedOn" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudentPastoralSupport.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentPastoralSupport.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssPastoralSupport", DbType.String, ssENStudentPastoralSupport.ssPastoralSupport);
						if ((ssENStudentPastoralSupport.ssLastUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentPastoralSupport.ssLastUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENStudentPastoralSupport.ssLastUpdatedOn);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentPastoralSupport", true), typeof(int));
					} else {
						outParamId = ssENStudentPastoralSupport.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentPastoralSupport
		/// </summary>

		public static void DeleteStudentPastoralSupport(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPastoralSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentPastoralSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentPastoralSupport", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentPastoralSupport
		/// </summary>

		public static void GetStudentPastoralSupport(HeContext heContext, int inParamId, out RCStudentPastoralSupportRecord outParamRecord) {
			outParamRecord = new RCStudentPastoralSupportRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPastoralSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [PASTORALSUPPORT]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDON]" +
					 " FROM " + ENStudentPastoralSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentPastoralSupport", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentPastoralSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentPastoralSupportForUpdate
		/// </summary>

		public static void GetStudentPastoralSupportForUpdate(HeContext heContext, int inParamId, out RCStudentPastoralSupportRecord outParamRecord) {
			outParamRecord = new RCStudentPastoralSupportRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPastoralSupportEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [PASTORALSUPPORT]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDON]" +
					 "FROM " + ENStudentPastoralSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentPastoralSupportForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentPastoralSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentPastoralSupport
		/// </summary>

		public static void UpdateStudentPastoralSupport(HeContext heContext, BitArray usedFields, RCStudentPastoralSupportRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPastoralSupportEntity.eSpaceId;
				ENStudentPastoralSupportEntityRecord ssENStudentPastoralSupport = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentPastoralSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PASTORALSUPPORT] = @ssPastoralSupport"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDON] = @ssLastUpdatedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentPastoralSupportssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentPastoralSupport.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentPastoralSupport.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssPastoralSupport", DbType.String, ssENStudentPastoralSupport.ssPastoralSupport);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENStudentPastoralSupport.ssLastUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentPastoralSupport.ssLastUpdatedBy);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssLastUpdatedOn", DbType.DateTime, ssENStudentPastoralSupport.ssLastUpdatedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[LASTUPDATEDON] = [LASTUPDATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentPastoralSupportssId", DbType.Int32, ssENStudentPastoralSupport.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentPastoralSupport", true) <= 0)
					throw new DataBaseException(ENStudentPastoralSupportEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentPastoralSupport.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentPastoralSupport")]
	public class WORCStudentPastoralSupportRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("PastoralSupport")]
		public string varWSPastoralSupport;

		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		public int varWSLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("LastUpdatedOn")]
		public DateTime varWSLastUpdatedOn;

		public WORCStudentPastoralSupportRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSPastoralSupport = (string) "";
			varWSLastUpdatedBy = (int) 0;
			varWSLastUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCStudentPastoralSupportRecord(ENStudentPastoralSupportEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSPastoralSupport = BaseAppUtils.RemoveControlChars(r.ssPastoralSupport);
			varWSLastUpdatedBy = (int) r.ssLastUpdatedBy;
			varWSLastUpdatedOn = (DateTime) r.ssLastUpdatedOn;
		}

		public static RLStudentPastoralSupportList ToRecordList(WORCStudentPastoralSupportRecord[] array) {
			RLStudentPastoralSupportList rl = new RLStudentPastoralSupportList();
			if (array != null) {
				foreach(WORCStudentPastoralSupportRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentPastoralSupportRecord[] FromRecordList(RLStudentPastoralSupportList rl) {
			WORCStudentPastoralSupportRecord[] array = new WORCStudentPastoralSupportRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentPastoralSupportRecord {
		public static implicit operator WORCStudentPastoralSupportRecord(RCStudentPastoralSupportRecord r) {
			return new WORCStudentPastoralSupportRecord(r.ssENStudentPastoralSupport);
		}

		public static implicit operator RCStudentPastoralSupportRecord(WORCStudentPastoralSupportRecord w) {
			RCStudentPastoralSupportRecord r = new RCStudentPastoralSupportRecord("");
			if (w != null) {
				r.ssENStudentPastoralSupport = w;
			}
			return r;
		}

	}

	partial struct ENStudentPastoralSupportEntityRecord {
		public static implicit operator WORCStudentPastoralSupportRecord(ENStudentPastoralSupportEntityRecord r) {
			return new WORCStudentPastoralSupportRecord(r);
		}

		public static implicit operator ENStudentPastoralSupportEntityRecord(WORCStudentPastoralSupportRecord w) {
			ENStudentPastoralSupportEntityRecord r = new ENStudentPastoralSupportEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssPastoralSupport = ((string) w.varWSPastoralSupport ?? "");
				r.ssLastUpdatedBy = (int) w.varWSLastUpdatedBy;
				r.ssLastUpdatedOn = (DateTime) w.varWSLastUpdatedOn;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentPastoralSupportRecordList {
		public WORCStudentPastoralSupportRecord[] Array;


		public WORLStudentPastoralSupportRecordList(WORCStudentPastoralSupportRecord[] r) {
			if (r == null)
			Array = new WORCStudentPastoralSupportRecord[0];
			else
			Array = r;
		}
		public WORLStudentPastoralSupportRecordList() {
			Array = new WORCStudentPastoralSupportRecord[0];
		}

		public WORLStudentPastoralSupportRecordList(RLStudentPastoralSupportRecordList rl) {
			rl=(RLStudentPastoralSupportRecordList) rl.Duplicate();
			Array = new WORCStudentPastoralSupportRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentPastoralSupportRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentPastoralSupportRecordList {
		public static implicit operator RLStudentPastoralSupportRecordList(WORCStudentPastoralSupportRecord[] array) {
			RLStudentPastoralSupportRecordList rl = new RLStudentPastoralSupportRecordList();
			if (array != null) {
				foreach(WORCStudentPastoralSupportRecord val in array) {
					rl.Append((RCStudentPastoralSupportRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentPastoralSupportRecord[](RLStudentPastoralSupportRecordList rl) {
			WORCStudentPastoralSupportRecord[] array = new WORCStudentPastoralSupportRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentPastoralSupportRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentPastoralSupportRecordList {
		public static implicit operator RLStudentPastoralSupportRecordList(WORLStudentPastoralSupportRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentPastoralSupportRecordList(RLStudentPastoralSupportRecordList rl) {
			return new WORLStudentPastoralSupportRecordList(rl);
		}
		public static implicit operator WORCStudentPastoralSupportRecord[](WORLStudentPastoralSupportRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentPastoralSupportRecordList(WORCStudentPastoralSupportRecord[] array) {
			return new WORLStudentPastoralSupportRecordList(array);
		}
	}
}

