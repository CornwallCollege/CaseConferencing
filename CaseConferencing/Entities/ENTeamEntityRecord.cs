/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENTeamEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENTeamEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENTeamEntity.eSpaceId;
	} // ENTeamEntity

	/// <summary>
	/// Entity <code>ENTeamEntityRecord</code> that represents the Service Studio entity <code>Team</code>
	///  <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Team", "YU42T98zDk6SpdHm0iveyQ", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Team", "")]
	[Serializable()]
	public partial struct ENTeamEntityRecord: ISerializable, ITypedRecord<ENTeamEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*KmLRL7j8nkGtp06MGryVdw");
		private static readonly GlobalObjectKey IdTeamCode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*LJx1Jv4_KEu+bnJ85G51Eg");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*Aoy_bnaCQ0yCqlYB9El9AA");
		private static readonly GlobalObjectKey IdCurriculumLead = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*CHMX9EfM1UuHids7j88DFQ");
		private static readonly GlobalObjectKey IdProSolutionSID = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*CrKH1oi1OUKYEjku0guUNQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(5, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TEAMCODE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("TeamCode")]
		private string _ssTeamCode;
		public string ssTeamCode {
			get {
				return _ssTeamCode;
			}
			set {
				if ((_ssTeamCode!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssTeamCode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CURRICULUMLEAD", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CurriculumLead")]
		private int _ssCurriculumLead;
		public int ssCurriculumLead {
			get {
				return _ssCurriculumLead;
			}
			set {
				if ((_ssCurriculumLead!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssCurriculumLead = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PROSOLUTIONSID", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("ProSolutionSID")]
		private string _ssProSolutionSID;
		public string ssProSolutionSID {
			get {
				return _ssProSolutionSID;
			}
			set {
				if ((_ssProSolutionSID!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssProSolutionSID = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENTeamEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssTeamCode = "";
			_ssDescription = "";
			_ssCurriculumLead = 0;
			_ssProSolutionSID = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Team.Id", 0);
			ssTeamCode = r.ReadText(index++, "Team.TeamCode", "");
			ssDescription = r.ReadText(index++, "Team.Description", "");
			ssCurriculumLead = r.ReadEntityReference(index++, "Team.CurriculumLead", 0);
			ssProSolutionSID = r.ReadText(index++, "Team.ProSolutionSID", "");
			ChangedAttributes = new BitArray(5, false);
			OptimizedAttributes = new BitArray(5, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENTeamEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENTeamEntityRecord a, ENTeamEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssTeamCode != b.ssTeamCode) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssCurriculumLead != b.ssCurriculumLead) return false;
			if (a.ssProSolutionSID != b.ssProSolutionSID) return false;
			return true;
		}

		public static bool operator != (ENTeamEntityRecord a, ENTeamEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENTeamEntityRecord)) return false;
			return (this == (ENTeamEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssTeamCode.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssCurriculumLead.GetHashCode()
				^ ssProSolutionSID.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENTeamEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssTeamCode = "";
			_ssDescription = "";
			_ssCurriculumLead = 0;
			_ssProSolutionSID = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssTeamCode = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssCurriculumLead = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssProSolutionSID = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENTeamEntityRecord Duplicate() {
			ENTeamEntityRecord t;
			t._ssId = this._ssId;
			t._ssTeamCode = this._ssTeamCode;
			t._ssDescription = this._ssDescription;
			t._ssCurriculumLead = this._ssCurriculumLead;
			t._ssProSolutionSID = this._ssProSolutionSID;
			t.ChangedAttributes = new BitArray(5);
			t.OptimizedAttributes = new BitArray(5);
			for (int i = 0; i < 5; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TeamCode")) VarValue.AppendAttribute(recordElem, "TeamCode", ssTeamCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TeamCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurriculumLead")) VarValue.AppendAttribute(recordElem, "CurriculumLead", ssCurriculumLead, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CurriculumLead");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProSolutionSID")) VarValue.AppendAttribute(recordElem, "ProSolutionSID", ssProSolutionSID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ProSolutionSID");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "teamcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TeamCode")) variable.Value = ssTeamCode; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "curriculumlead") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurriculumLead")) variable.Value = ssCurriculumLead; else variable.Optimized = true;
			} else if (head == "prosolutionsid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProSolutionSID")) variable.Value = ssProSolutionSID; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdTeamCode)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdCurriculumLead)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdProSolutionSID)) {
				return ChangedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdTeamCode)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdCurriculumLead)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdProSolutionSID)) {
				return OptimizedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdTeamCode) {
				return ssTeamCode;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdCurriculumLead) {
				return ssCurriculumLead;
			} else if (key == IdProSolutionSID) {
				return ssProSolutionSID;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(5);
			OptimizedAttributes = new BitArray(5);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssTeamCode = (string) other.AttributeGet(IdTeamCode);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdTeamCode);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdTeamCode);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDescription);
			ssCurriculumLead = (int) other.AttributeGet(IdCurriculumLead);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdCurriculumLead);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdCurriculumLead);
			ssProSolutionSID = (string) other.AttributeGet(IdProSolutionSID);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdProSolutionSID);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdProSolutionSID);
		}
	} // ENTeamEntityRecord
	/// <summary>
	/// Structure <code>RCTeamRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTeamRecord: ISerializable, ITypedRecord<RCTeamRecord> {
		private static readonly GlobalObjectKey IdTeam = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*UrEYi1EXWo8hCJTLLdojJQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Team")]
		public ENTeamEntityRecord ssENTeam;


		public static implicit operator ENTeamEntityRecord(RCTeamRecord r) {
			return r.ssENTeam;
		}

		public static implicit operator RCTeamRecord(ENTeamEntityRecord r) {
			RCTeamRecord res = new RCTeamRecord(null);
			res.ssENTeam = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENTeam.ChangedAttributes = value;
			}
			get {
				return ssENTeam.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCTeamRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENTeam = new ENTeamEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENTeam.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENTeam.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENTeam.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENTeam.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTeamRecord r) {
			this = r;
		}


		public static bool operator == (RCTeamRecord a, RCTeamRecord b) {
			if (a.ssENTeam != b.ssENTeam) return false;
			return true;
		}

		public static bool operator != (RCTeamRecord a, RCTeamRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTeamRecord)) return false;
			return (this == (RCTeamRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENTeam.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTeamRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENTeam = new ENTeamEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENTeam = (ENTeamEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENTeam.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENTeam.InternalRecursiveSave();
		}


		public RCTeamRecord Duplicate() {
			RCTeamRecord t;
			t.ssENTeam = (ENTeamEntityRecord) this.ssENTeam.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENTeam.ToXml(this, recordElem, "Team", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "team") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Team")) variable.Value = ssENTeam; else variable.Optimized = true;
				variable.SetFieldName("team");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENTeam.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENTeam.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTeam) {
				return ssENTeam;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENTeam.FillFromOther((IRecord) other.AttributeGet(IdTeam));
		}
	} // RCTeamRecord
	/// <summary>
	/// RecordList type <code>RLTeamRecordList</code> that represents a record list of <code>Team</code>
	/// </summary>
	[Serializable()]
	public partial class RLTeamRecordList: GenericRecordList<RCTeamRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTeamRecord GetElementDefaultValue() {
			return new RCTeamRecord("");
		}

		public T[] ToArray<T>(Func<RCTeamRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTeamRecordList recordlist, Func<RCTeamRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTeamRecordList ToList<T>(T[] array, Func <T, RCTeamRecord> converter) {
			RLTeamRecordList result = new RLTeamRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTeamRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTeamRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTeamRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTeamRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTeamRecord> NewList() {
			return new RLTeamRecordList();
		}


	} // RLTeamRecordList

	/// <summary>
	/// RecordList type <code>RLTeamList</code> that represents a record list of
	///  <code>CurriculumLeadIdentifier, Text, Text, Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLTeamList: GenericRecordList<ENTeamEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENTeamEntityRecord GetElementDefaultValue() {
			return new ENTeamEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENTeamEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTeamList recordlist, Func<ENTeamEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTeamList ToList<T>(T[] array, Func <T, ENTeamEntityRecord> converter) {
			RLTeamList result = new RLTeamList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTeamList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTeamList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTeamList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTeamList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENTeamEntityRecord> NewList() {
			return new RLTeamList();
		}


	} // RLTeamList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateTeam
		/// </summary>

		public static void CreateTeam(HeContext heContext, RCTeamRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTeamEntity.eSpaceId;
				ENTeamEntityRecord ssENTeam = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENTeamEntity.LocalViewName(null, null) + " (" +
					 " [TEAMCODE]" +
					 ", [DESCRIPTION]" +
					 ", [CURRICULUMLEAD]" +
					 ", [PROSOLUTIONSID]" +
					 " ) VALUES (" +
					 " @ssTeamCode" +
					 ", @ssDescription" +
					 ", @ssCurriculumLead" +
					 ", @ssProSolutionSID" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssTeamCode", DbType.String, ssENTeam.ssTeamCode);
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENTeam.ssDescription);
					if ((ssENTeam.ssCurriculumLead==0)) {
						insertSqlCmd.CreateParameter("@ssCurriculumLead", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCurriculumLead", DbType.Int32, ssENTeam.ssCurriculumLead);
					}
					insertSqlCmd.CreateParameter("@ssProSolutionSID", DbType.String, ssENTeam.ssProSolutionSID);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateTeam", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateTeam
		/// </summary>

		public static void CreateOrUpdateTeam(HeContext heContext, BitArray usedFields, RCTeamRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTeamEntity.eSpaceId;
				ENTeamEntityRecord ssENTeam = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENTeamEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TEAMCODE] = @ssTeamCode"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRICULUMLEAD] = @ssCurriculumLead"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROSOLUTIONSID] = @ssProSolutionSID"): parameters);
					string whereCondition = " WHERE [ID] = @ssENTeamssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssTeamCode", DbType.String, ssENTeam.ssTeamCode);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENTeam.ssDescription);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENTeam.ssCurriculumLead==0)) {
							sqlCmd.CreateParameter("@ssCurriculumLead", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCurriculumLead", DbType.Int32, ssENTeam.ssCurriculumLead);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssProSolutionSID", DbType.String, ssENTeam.ssProSolutionSID);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[TEAMCODE] = [TEAMCODE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENTeamssId", DbType.Int32, ssENTeam.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateTeam (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENTeamEntity.LocalViewName(null, null) + " (" +
						 " [TEAMCODE]" +
						 ", [DESCRIPTION]" +
						 ", [CURRICULUMLEAD]" +
						 ", [PROSOLUTIONSID]" +
						 " ) VALUES (" +
						 " @ssTeamCode" +
						 ", @ssDescription" +
						 ", @ssCurriculumLead" +
						 ", @ssProSolutionSID" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssTeamCode", DbType.String, ssENTeam.ssTeamCode);
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENTeam.ssDescription);
						if ((ssENTeam.ssCurriculumLead==0)) {
							insertSqlCmd.CreateParameter("@ssCurriculumLead", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCurriculumLead", DbType.Int32, ssENTeam.ssCurriculumLead);
						}
						insertSqlCmd.CreateParameter("@ssProSolutionSID", DbType.String, ssENTeam.ssProSolutionSID);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateTeam", true), typeof(int));
					} else {
						outParamId = ssENTeam.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteTeam
		/// </summary>

		public static void DeleteTeam(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTeamEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENTeamEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteTeam", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetTeam
		/// </summary>

		public static void GetTeam(HeContext heContext, int inParamId, out RCTeamRecord outParamRecord) {
			outParamRecord = new RCTeamRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTeamEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [TEAMCODE]" +
					 ", [DESCRIPTION]" +
					 ", [CURRICULUMLEAD]" +
					 ", [PROSOLUTIONSID]" +
					 " FROM " + ENTeamEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetTeam", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENTeamEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetTeamForUpdate
		/// </summary>

		public static void GetTeamForUpdate(HeContext heContext, int inParamId, out RCTeamRecord outParamRecord) {
			outParamRecord = new RCTeamRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTeamEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [TEAMCODE]" +
					 ", [DESCRIPTION]" +
					 ", [CURRICULUMLEAD]" +
					 ", [PROSOLUTIONSID]" +
					 "FROM " + ENTeamEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetTeamForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENTeamEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateTeam
		/// </summary>

		public static void UpdateTeam(HeContext heContext, BitArray usedFields, RCTeamRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTeamEntity.eSpaceId;
				ENTeamEntityRecord ssENTeam = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENTeamEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TEAMCODE] = @ssTeamCode"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRICULUMLEAD] = @ssCurriculumLead"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROSOLUTIONSID] = @ssProSolutionSID"): parameters);
					string whereCondition = " WHERE [ID] = @ssENTeamssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssTeamCode", DbType.String, ssENTeam.ssTeamCode);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENTeam.ssDescription);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENTeam.ssCurriculumLead==0)) {
							sqlCmd.CreateParameter("@ssCurriculumLead", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCurriculumLead", DbType.Int32, ssENTeam.ssCurriculumLead);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssProSolutionSID", DbType.String, ssENTeam.ssProSolutionSID);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[TEAMCODE] = [TEAMCODE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENTeamssId", DbType.Int32, ssENTeam.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateTeam", true) <= 0)
					throw new DataBaseException(ENTeamEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENTeam.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Team")]
	public class WORCTeamRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("TeamCode")]
		public string varWSTeamCode;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		[System.Xml.Serialization.XmlElement("CurriculumLead")]
		public int varWSCurriculumLead;

		[System.Xml.Serialization.XmlElement("ProSolutionSID")]
		public string varWSProSolutionSID;

		public WORCTeamRecord() {
			varWSId = (int) 0;
			varWSTeamCode = (string) "";
			varWSDescription = (string) "";
			varWSCurriculumLead = (int) 0;
			varWSProSolutionSID = (string) "";
		}

		public WORCTeamRecord(ENTeamEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSTeamCode = BaseAppUtils.RemoveControlChars(r.ssTeamCode);
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
			varWSCurriculumLead = (int) r.ssCurriculumLead;
			varWSProSolutionSID = BaseAppUtils.RemoveControlChars(r.ssProSolutionSID);
		}

		public static RLTeamList ToRecordList(WORCTeamRecord[] array) {
			RLTeamList rl = new RLTeamList();
			if (array != null) {
				foreach(WORCTeamRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCTeamRecord[] FromRecordList(RLTeamList rl) {
			WORCTeamRecord[] array = new WORCTeamRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCTeamRecord {
		public static implicit operator WORCTeamRecord(RCTeamRecord r) {
			return new WORCTeamRecord(r.ssENTeam);
		}

		public static implicit operator RCTeamRecord(WORCTeamRecord w) {
			RCTeamRecord r = new RCTeamRecord("");
			if (w != null) {
				r.ssENTeam = w;
			}
			return r;
		}

	}

	partial struct ENTeamEntityRecord {
		public static implicit operator WORCTeamRecord(ENTeamEntityRecord r) {
			return new WORCTeamRecord(r);
		}

		public static implicit operator ENTeamEntityRecord(WORCTeamRecord w) {
			ENTeamEntityRecord r = new ENTeamEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssTeamCode = ((string) w.varWSTeamCode ?? "");
				r.ssDescription = ((string) w.varWSDescription ?? "");
				r.ssCurriculumLead = (int) w.varWSCurriculumLead;
				r.ssProSolutionSID = ((string) w.varWSProSolutionSID ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTeamRecordList {
		public WORCTeamRecord[] Array;


		public WORLTeamRecordList(WORCTeamRecord[] r) {
			if (r == null)
			Array = new WORCTeamRecord[0];
			else
			Array = r;
		}
		public WORLTeamRecordList() {
			Array = new WORCTeamRecord[0];
		}

		public WORLTeamRecordList(RLTeamRecordList rl) {
			rl=(RLTeamRecordList) rl.Duplicate();
			Array = new WORCTeamRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCTeamRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTeamRecordList {
		public static implicit operator RLTeamRecordList(WORCTeamRecord[] array) {
			RLTeamRecordList rl = new RLTeamRecordList();
			if (array != null) {
				foreach(WORCTeamRecord val in array) {
					rl.Append((RCTeamRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTeamRecord[](RLTeamRecordList rl) {
			WORCTeamRecord[] array = new WORCTeamRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCTeamRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTeamRecordList {
		public static implicit operator RLTeamRecordList(WORLTeamRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLTeamRecordList(RLTeamRecordList rl) {
			return new WORLTeamRecordList(rl);
		}
		public static implicit operator WORCTeamRecord[](WORLTeamRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTeamRecordList(WORCTeamRecord[] array) {
			return new WORLTeamRecordList(array);
		}
	}
}

