/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENExamEntryEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENExamEntryEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENExamEntryEntity.eSpaceId;
	} // ENExamEntryEntity

	/// <summary>
	/// Entity <code>ENExamEntryEntityRecord</code> that represents the Service Studio entity
	///  <code>ExamEntry</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("ExamEntry", "tqqJL_ol002MHpzn6rIURw", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_ExamEntry", "")]
	[Serializable()]
	public partial struct ENExamEntryEntityRecord: ISerializable, ITypedRecord<ENExamEntryEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*KGnQ1SPDs0akLhDfuhScNg");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*SiU6p5z5uEy4Ob257i3Oow");
		private static readonly GlobalObjectKey IdExamName = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*osTd9nu5K06YnYCI229O1Q");
		private static readonly GlobalObjectKey IdCandidateNumber = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*c2RvLz0Z+USPSgMAM7YDdA");
		private static readonly GlobalObjectKey IdGrade = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*EY0ds5Ae60iMm15DW1BVyw");
		private static readonly GlobalObjectKey IdPoints = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*oW7JuVMfZkiODasGDDAvYw");
		private static readonly GlobalObjectKey IdExamboardRegistrationDate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*eqA8+NQ1wEeWs_PrqxExeg");
		private static readonly GlobalObjectKey IdExamboardRegistrationNumber = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*XrF5bjGiWUmKJIrBmBcvxA");
		private static readonly GlobalObjectKey IdYear = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*g0NN69L+XkmD5n1OEUPsHg");
		private static readonly GlobalObjectKey IdSeries = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*0+QONhNIWkG4HQdyNvVNIA");
		private static readonly GlobalObjectKey IdMaxMark = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*H39VTotKBkaxo9NuM4rQUw");
		private static readonly GlobalObjectKey IdEntryType = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*2N7h3z8dp0esChl42dqClg");
		private static readonly GlobalObjectKey IdStartDate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*iLy6Wn4KrUW+NdMB8gAzxw");
		private static readonly GlobalObjectKey IdEndDate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*woOWvT7DDEWn8Qf3tCqztA");
		private static readonly GlobalObjectKey IdIsManualEntry = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*gcnFVjFoKEa3Im5lhQJrWg");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*znLgYIuGJEmHW8VaxKuXwA");
		private static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*QcMa3c15DEenfGXwXq8C9Q");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(17, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EXAMNAME", 250, false, false, false)]
		[System.Xml.Serialization.XmlElement("ExamName")]
		private string _ssExamName;
		public string ssExamName {
			get {
				return _ssExamName;
			}
			set {
				if ((_ssExamName!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssExamName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CANDIDATENUMBER", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CandidateNumber")]
		private string _ssCandidateNumber;
		public string ssCandidateNumber {
			get {
				return _ssCandidateNumber;
			}
			set {
				if ((_ssCandidateNumber!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssCandidateNumber = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GRADE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Grade")]
		private string _ssGrade;
		public string ssGrade {
			get {
				return _ssGrade;
			}
			set {
				if ((_ssGrade!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssGrade = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("POINTS", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Points")]
		private string _ssPoints;
		public string ssPoints {
			get {
				return _ssPoints;
			}
			set {
				if ((_ssPoints!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssPoints = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EXAMBOARDREGISTRATIONDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("ExamboardRegistrationDate")]
		private DateTime _ssExamboardRegistrationDate;
		public DateTime ssExamboardRegistrationDate {
			get {
				return _ssExamboardRegistrationDate;
			}
			set {
				if ((_ssExamboardRegistrationDate!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssExamboardRegistrationDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EXAMBOARDREGISTRATIONNUMBER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("ExamboardRegistrationNumber")]
		private int _ssExamboardRegistrationNumber;
		public int ssExamboardRegistrationNumber {
			get {
				return _ssExamboardRegistrationNumber;
			}
			set {
				if ((_ssExamboardRegistrationNumber!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssExamboardRegistrationNumber = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("YEAR", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Year")]
		private int _ssYear;
		public int ssYear {
			get {
				return _ssYear;
			}
			set {
				if ((_ssYear!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssYear = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SERIES", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Series")]
		private string _ssSeries;
		public string ssSeries {
			get {
				return _ssSeries;
			}
			set {
				if ((_ssSeries!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssSeries = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MAXMARK", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("MaxMark")]
		private string _ssMaxMark;
		public string ssMaxMark {
			get {
				return _ssMaxMark;
			}
			set {
				if ((_ssMaxMark!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssMaxMark = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENTRYTYPE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("EntryType")]
		private string _ssEntryType;
		public string ssEntryType {
			get {
				return _ssEntryType;
			}
			set {
				if ((_ssEntryType!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssEntryType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STARTDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("StartDate")]
		private DateTime _ssStartDate;
		public DateTime ssStartDate {
			get {
				return _ssStartDate;
			}
			set {
				if ((_ssStartDate!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssStartDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENDDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("EndDate")]
		private DateTime _ssEndDate;
		public DateTime ssEndDate {
			get {
				return _ssEndDate;
			}
			set {
				if ((_ssEndDate!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssEndDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISMANUALENTRY", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IsManualEntry")]
		private bool _ssIsManualEntry;
		public bool ssIsManualEntry {
			get {
				return _ssIsManualEntry;
			}
			set {
				if ((_ssIsManualEntry!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssIsManualEntry = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedOn")]
		private DateTime _ssCreatedOn;
		public DateTime ssCreatedOn {
			get {
				return _ssCreatedOn;
			}
			set {
				if ((_ssCreatedOn!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssCreatedOn = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENExamEntryEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(17, true);
			OptimizedAttributes = new BitArray(17, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssExamName = "";
			_ssCandidateNumber = "";
			_ssGrade = "";
			_ssPoints = "";
			_ssExamboardRegistrationDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssExamboardRegistrationNumber = 0;
			_ssYear = 0;
			_ssSeries = "";
			_ssMaxMark = "";
			_ssEntryType = "";
			_ssStartDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssEndDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIsManualEntry = false;
			_ssCreatedBy = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "ExamEntry.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "ExamEntry.StudentReference", "");
			ssExamName = r.ReadText(index++, "ExamEntry.ExamName", "");
			ssCandidateNumber = r.ReadText(index++, "ExamEntry.CandidateNumber", "");
			ssGrade = r.ReadText(index++, "ExamEntry.Grade", "");
			ssPoints = r.ReadText(index++, "ExamEntry.Points", "");
			ssExamboardRegistrationDate = r.ReadDate(index++, "ExamEntry.ExamboardRegistrationDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssExamboardRegistrationNumber = r.ReadInteger(index++, "ExamEntry.ExamboardRegistrationNumber", 0);
			ssYear = r.ReadInteger(index++, "ExamEntry.Year", 0);
			ssSeries = r.ReadText(index++, "ExamEntry.Series", "");
			ssMaxMark = r.ReadText(index++, "ExamEntry.MaxMark", "");
			ssEntryType = r.ReadText(index++, "ExamEntry.EntryType", "");
			ssStartDate = r.ReadDate(index++, "ExamEntry.StartDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssEndDate = r.ReadDate(index++, "ExamEntry.EndDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssIsManualEntry = r.ReadBoolean(index++, "ExamEntry.IsManualEntry", false);
			ssCreatedBy = r.ReadEntityReference(index++, "ExamEntry.CreatedBy", 0);
			ssCreatedOn = r.ReadDateTime(index++, "ExamEntry.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(17, false);
			OptimizedAttributes = new BitArray(17, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENExamEntryEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENExamEntryEntityRecord a, ENExamEntryEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssExamName != b.ssExamName) return false;
			if (a.ssCandidateNumber != b.ssCandidateNumber) return false;
			if (a.ssGrade != b.ssGrade) return false;
			if (a.ssPoints != b.ssPoints) return false;
			if (a.ssExamboardRegistrationDate != b.ssExamboardRegistrationDate) return false;
			if (a.ssExamboardRegistrationNumber != b.ssExamboardRegistrationNumber) return false;
			if (a.ssYear != b.ssYear) return false;
			if (a.ssSeries != b.ssSeries) return false;
			if (a.ssMaxMark != b.ssMaxMark) return false;
			if (a.ssEntryType != b.ssEntryType) return false;
			if (a.ssStartDate != b.ssStartDate) return false;
			if (a.ssEndDate != b.ssEndDate) return false;
			if (a.ssIsManualEntry != b.ssIsManualEntry) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			return true;
		}

		public static bool operator != (ENExamEntryEntityRecord a, ENExamEntryEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENExamEntryEntityRecord)) return false;
			return (this == (ENExamEntryEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssExamName.GetHashCode()
				^ ssCandidateNumber.GetHashCode()
				^ ssGrade.GetHashCode()
				^ ssPoints.GetHashCode()
				^ ssExamboardRegistrationDate.GetHashCode()
				^ ssExamboardRegistrationNumber.GetHashCode()
				^ ssYear.GetHashCode()
				^ ssSeries.GetHashCode()
				^ ssMaxMark.GetHashCode()
				^ ssEntryType.GetHashCode()
				^ ssStartDate.GetHashCode()
				^ ssEndDate.GetHashCode()
				^ ssIsManualEntry.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENExamEntryEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(17, true);
			OptimizedAttributes = new BitArray(17, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssExamName = "";
			_ssCandidateNumber = "";
			_ssGrade = "";
			_ssPoints = "";
			_ssExamboardRegistrationDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssExamboardRegistrationNumber = 0;
			_ssYear = 0;
			_ssSeries = "";
			_ssMaxMark = "";
			_ssEntryType = "";
			_ssStartDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssEndDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIsManualEntry = false;
			_ssCreatedBy = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssExamName = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssCandidateNumber = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssGrade = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssPoints = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssExamboardRegistrationDate = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssExamboardRegistrationNumber = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssYear = (int) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssSeries = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssMaxMark = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssEntryType = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssStartDate = (DateTime) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssEndDate = (DateTime) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssIsManualEntry = (bool) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssCreatedOn = (DateTime) info.GetValue(fields[16] .Name, fields[16] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENExamEntryEntityRecord Duplicate() {
			ENExamEntryEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssExamName = this._ssExamName;
			t._ssCandidateNumber = this._ssCandidateNumber;
			t._ssGrade = this._ssGrade;
			t._ssPoints = this._ssPoints;
			t._ssExamboardRegistrationDate = this._ssExamboardRegistrationDate;
			t._ssExamboardRegistrationNumber = this._ssExamboardRegistrationNumber;
			t._ssYear = this._ssYear;
			t._ssSeries = this._ssSeries;
			t._ssMaxMark = this._ssMaxMark;
			t._ssEntryType = this._ssEntryType;
			t._ssStartDate = this._ssStartDate;
			t._ssEndDate = this._ssEndDate;
			t._ssIsManualEntry = this._ssIsManualEntry;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssCreatedOn = this._ssCreatedOn;
			t.ChangedAttributes = new BitArray(17);
			t.OptimizedAttributes = new BitArray(17);
			for (int i = 0; i < 17; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExamName")) VarValue.AppendAttribute(recordElem, "ExamName", ssExamName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ExamName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CandidateNumber")) VarValue.AppendAttribute(recordElem, "CandidateNumber", ssCandidateNumber, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CandidateNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Grade")) VarValue.AppendAttribute(recordElem, "Grade", ssGrade, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Grade");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Points")) VarValue.AppendAttribute(recordElem, "Points", ssPoints, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Points");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExamboardRegistrationDate")) VarValue.AppendAttribute(recordElem, "ExamboardRegistrationDate", ssExamboardRegistrationDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "ExamboardRegistrationDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExamboardRegistrationNumber")) VarValue.AppendAttribute(recordElem, "ExamboardRegistrationNumber", ssExamboardRegistrationNumber, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ExamboardRegistrationNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Year")) VarValue.AppendAttribute(recordElem, "Year", ssYear, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Year");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Series")) VarValue.AppendAttribute(recordElem, "Series", ssSeries, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Series");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MaxMark")) VarValue.AppendAttribute(recordElem, "MaxMark", ssMaxMark, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MaxMark");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EntryType")) VarValue.AppendAttribute(recordElem, "EntryType", ssEntryType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EntryType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StartDate")) VarValue.AppendAttribute(recordElem, "StartDate", ssStartDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StartDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EndDate")) VarValue.AppendAttribute(recordElem, "EndDate", ssEndDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "EndDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsManualEntry")) VarValue.AppendAttribute(recordElem, "IsManualEntry", ssIsManualEntry, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsManualEntry");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "examname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExamName")) variable.Value = ssExamName; else variable.Optimized = true;
			} else if (head == "candidatenumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CandidateNumber")) variable.Value = ssCandidateNumber; else variable.Optimized = true;
			} else if (head == "grade") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Grade")) variable.Value = ssGrade; else variable.Optimized = true;
			} else if (head == "points") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Points")) variable.Value = ssPoints; else variable.Optimized = true;
			} else if (head == "examboardregistrationdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExamboardRegistrationDate")) variable.Value = ssExamboardRegistrationDate; else variable.Optimized = true;
			} else if (head == "examboardregistrationnumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExamboardRegistrationNumber")) variable.Value = ssExamboardRegistrationNumber; else variable.Optimized = true;
			} else if (head == "year") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Year")) variable.Value = ssYear; else variable.Optimized = true;
			} else if (head == "series") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Series")) variable.Value = ssSeries; else variable.Optimized = true;
			} else if (head == "maxmark") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MaxMark")) variable.Value = ssMaxMark; else variable.Optimized = true;
			} else if (head == "entrytype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EntryType")) variable.Value = ssEntryType; else variable.Optimized = true;
			} else if (head == "startdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StartDate")) variable.Value = ssStartDate; else variable.Optimized = true;
			} else if (head == "enddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EndDate")) variable.Value = ssEndDate; else variable.Optimized = true;
			} else if (head == "ismanualentry") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsManualEntry")) variable.Value = ssIsManualEntry; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdExamName)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdCandidateNumber)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdGrade)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdPoints)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdExamboardRegistrationDate)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdExamboardRegistrationNumber)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdYear)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdSeries)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdMaxMark)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdEntryType)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdStartDate)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdEndDate)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdIsManualEntry)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdCreatedOn)) {
				return ChangedAttributes[16];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdExamName)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdCandidateNumber)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdGrade)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdPoints)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdExamboardRegistrationDate)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdExamboardRegistrationNumber)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdYear)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdSeries)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdMaxMark)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdEntryType)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdStartDate)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdEndDate)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdIsManualEntry)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdCreatedOn)) {
				return OptimizedAttributes[16];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdExamName) {
				return ssExamName;
			} else if (key == IdCandidateNumber) {
				return ssCandidateNumber;
			} else if (key == IdGrade) {
				return ssGrade;
			} else if (key == IdPoints) {
				return ssPoints;
			} else if (key == IdExamboardRegistrationDate) {
				return ssExamboardRegistrationDate;
			} else if (key == IdExamboardRegistrationNumber) {
				return ssExamboardRegistrationNumber;
			} else if (key == IdYear) {
				return ssYear;
			} else if (key == IdSeries) {
				return ssSeries;
			} else if (key == IdMaxMark) {
				return ssMaxMark;
			} else if (key == IdEntryType) {
				return ssEntryType;
			} else if (key == IdStartDate) {
				return ssStartDate;
			} else if (key == IdEndDate) {
				return ssEndDate;
			} else if (key == IdIsManualEntry) {
				return ssIsManualEntry;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(17);
			OptimizedAttributes = new BitArray(17);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssExamName = (string) other.AttributeGet(IdExamName);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdExamName);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdExamName);
			ssCandidateNumber = (string) other.AttributeGet(IdCandidateNumber);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdCandidateNumber);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdCandidateNumber);
			ssGrade = (string) other.AttributeGet(IdGrade);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdGrade);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdGrade);
			ssPoints = (string) other.AttributeGet(IdPoints);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdPoints);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdPoints);
			ssExamboardRegistrationDate = (DateTime) other.AttributeGet(IdExamboardRegistrationDate);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdExamboardRegistrationDate);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdExamboardRegistrationDate);
			ssExamboardRegistrationNumber = (int) other.AttributeGet(IdExamboardRegistrationNumber);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdExamboardRegistrationNumber);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdExamboardRegistrationNumber);
			ssYear = (int) other.AttributeGet(IdYear);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdYear);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdYear);
			ssSeries = (string) other.AttributeGet(IdSeries);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdSeries);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdSeries);
			ssMaxMark = (string) other.AttributeGet(IdMaxMark);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdMaxMark);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdMaxMark);
			ssEntryType = (string) other.AttributeGet(IdEntryType);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdEntryType);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdEntryType);
			ssStartDate = (DateTime) other.AttributeGet(IdStartDate);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdStartDate);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdStartDate);
			ssEndDate = (DateTime) other.AttributeGet(IdEndDate);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdEndDate);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdEndDate);
			ssIsManualEntry = (bool) other.AttributeGet(IdIsManualEntry);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdIsManualEntry);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdIsManualEntry);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdCreatedBy);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdCreatedOn);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdCreatedOn);
		}
	} // ENExamEntryEntityRecord
	/// <summary>
	/// Structure <code>RCExamEntryRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCExamEntryRecord: ISerializable, ITypedRecord<RCExamEntryRecord> {
		private static readonly GlobalObjectKey IdExamEntry = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*26hvKJID7JnnCR9kc80bDw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ExamEntry")]
		public ENExamEntryEntityRecord ssENExamEntry;


		public static implicit operator ENExamEntryEntityRecord(RCExamEntryRecord r) {
			return r.ssENExamEntry;
		}

		public static implicit operator RCExamEntryRecord(ENExamEntryEntityRecord r) {
			RCExamEntryRecord res = new RCExamEntryRecord(null);
			res.ssENExamEntry = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENExamEntry.ChangedAttributes = value;
			}
			get {
				return ssENExamEntry.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCExamEntryRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENExamEntry = new ENExamEntryEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(17, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENExamEntry.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENExamEntry.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENExamEntry.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENExamEntry.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCExamEntryRecord r) {
			this = r;
		}


		public static bool operator == (RCExamEntryRecord a, RCExamEntryRecord b) {
			if (a.ssENExamEntry != b.ssENExamEntry) return false;
			return true;
		}

		public static bool operator != (RCExamEntryRecord a, RCExamEntryRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCExamEntryRecord)) return false;
			return (this == (RCExamEntryRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENExamEntry.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCExamEntryRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENExamEntry = new ENExamEntryEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENExamEntry = (ENExamEntryEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENExamEntry.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENExamEntry.InternalRecursiveSave();
		}


		public RCExamEntryRecord Duplicate() {
			RCExamEntryRecord t;
			t.ssENExamEntry = (ENExamEntryEntityRecord) this.ssENExamEntry.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENExamEntry.ToXml(this, recordElem, "ExamEntry", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "examentry") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExamEntry")) variable.Value = ssENExamEntry; else variable.Optimized = true;
				variable.SetFieldName("examentry");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENExamEntry.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENExamEntry.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdExamEntry) {
				return ssENExamEntry;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENExamEntry.FillFromOther((IRecord) other.AttributeGet(IdExamEntry));
		}
	} // RCExamEntryRecord
	/// <summary>
	/// RecordList type <code>RLExamEntryRecordList</code> that represents a record list of
	///  <code>ExamEntry</code>
	/// </summary>
	[Serializable()]
	public partial class RLExamEntryRecordList: GenericRecordList<RCExamEntryRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCExamEntryRecord GetElementDefaultValue() {
			return new RCExamEntryRecord("");
		}

		public T[] ToArray<T>(Func<RCExamEntryRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLExamEntryRecordList recordlist, Func<RCExamEntryRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLExamEntryRecordList ToList<T>(T[] array, Func <T, RCExamEntryRecord> converter) {
			RLExamEntryRecordList result = new RLExamEntryRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLExamEntryRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLExamEntryRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLExamEntryRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLExamEntryRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(17, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCExamEntryRecord> NewList() {
			return new RLExamEntryRecordList();
		}


	} // RLExamEntryRecordList

	/// <summary>
	/// RecordList type <code>RLExamEntryList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, Text, Text, Text, Text, Text, Text, Date, Date
	/// , Date, DateTime, Boolean, Integer, Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLExamEntryList: GenericRecordList<ENExamEntryEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENExamEntryEntityRecord GetElementDefaultValue() {
			return new ENExamEntryEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENExamEntryEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLExamEntryList recordlist, Func<ENExamEntryEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLExamEntryList ToList<T>(T[] array, Func <T, ENExamEntryEntityRecord> converter) {
			RLExamEntryList result = new RLExamEntryList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLExamEntryList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLExamEntryList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLExamEntryList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLExamEntryList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENExamEntryEntityRecord> NewList() {
			return new RLExamEntryList();
		}


	} // RLExamEntryList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateExamEntry
		/// </summary>

		public static void CreateExamEntry(HeContext heContext, RCExamEntryRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENExamEntryEntity.eSpaceId;
				ENExamEntryEntityRecord ssENExamEntry = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENExamEntryEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [EXAMNAME]" +
					 ", [CANDIDATENUMBER]" +
					 ", [GRADE]" +
					 ", [POINTS]" +
					 ", [EXAMBOARDREGISTRATIONDATE]" +
					 ", [EXAMBOARDREGISTRATIONNUMBER]" +
					 ", [YEAR]" +
					 ", [SERIES]" +
					 ", [MAXMARK]" +
					 ", [ENTRYTYPE]" +
					 ", [STARTDATE]" +
					 ", [ENDDATE]" +
					 ", [ISMANUALENTRY]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssExamName" +
					 ", @ssCandidateNumber" +
					 ", @ssGrade" +
					 ", @ssPoints" +
					 ", @ssExamboardRegistrationDate" +
					 ", @ssExamboardRegistrationNumber" +
					 ", @ssYear" +
					 ", @ssSeries" +
					 ", @ssMaxMark" +
					 ", @ssEntryType" +
					 ", @ssStartDate" +
					 ", @ssEndDate" +
					 ", @ssIsManualEntry" +
					 ", @ssCreatedBy" +
					 ", @ssCreatedOn" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENExamEntry.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENExamEntry.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssExamName", DbType.String, ssENExamEntry.ssExamName);
					insertSqlCmd.CreateParameter("@ssCandidateNumber", DbType.String, ssENExamEntry.ssCandidateNumber);
					insertSqlCmd.CreateParameter("@ssGrade", DbType.String, ssENExamEntry.ssGrade);
					insertSqlCmd.CreateParameter("@ssPoints", DbType.String, ssENExamEntry.ssPoints);
					insertSqlCmd.CreateParameter("@ssExamboardRegistrationDate", DbType.DateTime, ssENExamEntry.ssExamboardRegistrationDate);
					insertSqlCmd.CreateParameter("@ssExamboardRegistrationNumber", DbType.Int32, ssENExamEntry.ssExamboardRegistrationNumber);
					insertSqlCmd.CreateParameter("@ssYear", DbType.Int32, ssENExamEntry.ssYear);
					insertSqlCmd.CreateParameter("@ssSeries", DbType.String, ssENExamEntry.ssSeries);
					insertSqlCmd.CreateParameter("@ssMaxMark", DbType.String, ssENExamEntry.ssMaxMark);
					insertSqlCmd.CreateParameter("@ssEntryType", DbType.String, ssENExamEntry.ssEntryType);
					insertSqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENExamEntry.ssStartDate);
					insertSqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENExamEntry.ssEndDate);
					insertSqlCmd.CreateParameter("@ssIsManualEntry", DbType.Boolean, ssENExamEntry.ssIsManualEntry);
					if ((ssENExamEntry.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENExamEntry.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENExamEntry.ssCreatedOn);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateExamEntry", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateExamEntry
		/// </summary>

		public static void CreateOrUpdateExamEntry(HeContext heContext, BitArray usedFields, RCExamEntryRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENExamEntryEntity.eSpaceId;
				ENExamEntryEntityRecord ssENExamEntry = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(17, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENExamEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXAMNAME] = @ssExamName"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CANDIDATENUMBER] = @ssCandidateNumber"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GRADE] = @ssGrade"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[POINTS] = @ssPoints"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXAMBOARDREGISTRATIONDATE] = @ssExamboardRegistrationDate"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXAMBOARDREGISTRATIONNUMBER] = @ssExamboardRegistrationNumber"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[YEAR] = @ssYear"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SERIES] = @ssSeries"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MAXMARK] = @ssMaxMark"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENTRYTYPE] = @ssEntryType"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STARTDATE] = @ssStartDate"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENDDATE] = @ssEndDate"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISMANUALENTRY] = @ssIsManualEntry"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENExamEntryssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENExamEntry.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENExamEntry.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssExamName", DbType.String, ssENExamEntry.ssExamName);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCandidateNumber", DbType.String, ssENExamEntry.ssCandidateNumber);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssGrade", DbType.String, ssENExamEntry.ssGrade);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssPoints", DbType.String, ssENExamEntry.ssPoints);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssExamboardRegistrationDate", DbType.DateTime, ssENExamEntry.ssExamboardRegistrationDate);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssExamboardRegistrationNumber", DbType.Int32, ssENExamEntry.ssExamboardRegistrationNumber);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssYear", DbType.Int32, ssENExamEntry.ssYear);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssSeries", DbType.String, ssENExamEntry.ssSeries);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssMaxMark", DbType.String, ssENExamEntry.ssMaxMark);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssEntryType", DbType.String, ssENExamEntry.ssEntryType);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENExamEntry.ssStartDate);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENExamEntry.ssEndDate);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssIsManualEntry", DbType.Boolean, ssENExamEntry.ssIsManualEntry);
						counter++;
					}
					if (usedFields[15]) {
						if ((ssENExamEntry.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENExamEntry.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENExamEntry.ssCreatedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISMANUALENTRY] = [ISMANUALENTRY]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENExamEntryssId", DbType.Int32, ssENExamEntry.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateExamEntry (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENExamEntryEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [EXAMNAME]" +
						 ", [CANDIDATENUMBER]" +
						 ", [GRADE]" +
						 ", [POINTS]" +
						 ", [EXAMBOARDREGISTRATIONDATE]" +
						 ", [EXAMBOARDREGISTRATIONNUMBER]" +
						 ", [YEAR]" +
						 ", [SERIES]" +
						 ", [MAXMARK]" +
						 ", [ENTRYTYPE]" +
						 ", [STARTDATE]" +
						 ", [ENDDATE]" +
						 ", [ISMANUALENTRY]" +
						 ", [CREATEDBY]" +
						 ", [CREATEDON]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssExamName" +
						 ", @ssCandidateNumber" +
						 ", @ssGrade" +
						 ", @ssPoints" +
						 ", @ssExamboardRegistrationDate" +
						 ", @ssExamboardRegistrationNumber" +
						 ", @ssYear" +
						 ", @ssSeries" +
						 ", @ssMaxMark" +
						 ", @ssEntryType" +
						 ", @ssStartDate" +
						 ", @ssEndDate" +
						 ", @ssIsManualEntry" +
						 ", @ssCreatedBy" +
						 ", @ssCreatedOn" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENExamEntry.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENExamEntry.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssExamName", DbType.String, ssENExamEntry.ssExamName);
						insertSqlCmd.CreateParameter("@ssCandidateNumber", DbType.String, ssENExamEntry.ssCandidateNumber);
						insertSqlCmd.CreateParameter("@ssGrade", DbType.String, ssENExamEntry.ssGrade);
						insertSqlCmd.CreateParameter("@ssPoints", DbType.String, ssENExamEntry.ssPoints);
						insertSqlCmd.CreateParameter("@ssExamboardRegistrationDate", DbType.DateTime, ssENExamEntry.ssExamboardRegistrationDate);
						insertSqlCmd.CreateParameter("@ssExamboardRegistrationNumber", DbType.Int32, ssENExamEntry.ssExamboardRegistrationNumber);
						insertSqlCmd.CreateParameter("@ssYear", DbType.Int32, ssENExamEntry.ssYear);
						insertSqlCmd.CreateParameter("@ssSeries", DbType.String, ssENExamEntry.ssSeries);
						insertSqlCmd.CreateParameter("@ssMaxMark", DbType.String, ssENExamEntry.ssMaxMark);
						insertSqlCmd.CreateParameter("@ssEntryType", DbType.String, ssENExamEntry.ssEntryType);
						insertSqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENExamEntry.ssStartDate);
						insertSqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENExamEntry.ssEndDate);
						insertSqlCmd.CreateParameter("@ssIsManualEntry", DbType.Boolean, ssENExamEntry.ssIsManualEntry);
						if ((ssENExamEntry.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENExamEntry.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENExamEntry.ssCreatedOn);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateExamEntry", true), typeof(int));
					} else {
						outParamId = ssENExamEntry.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteExamEntry
		/// </summary>

		public static void DeleteExamEntry(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENExamEntryEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENExamEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteExamEntry", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetExamEntry
		/// </summary>

		public static void GetExamEntry(HeContext heContext, int inParamId, out RCExamEntryRecord outParamRecord) {
			outParamRecord = new RCExamEntryRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENExamEntryEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [EXAMNAME]" +
					 ", [CANDIDATENUMBER]" +
					 ", [GRADE]" +
					 ", [POINTS]" +
					 ", [EXAMBOARDREGISTRATIONDATE]" +
					 ", [EXAMBOARDREGISTRATIONNUMBER]" +
					 ", [YEAR]" +
					 ", [SERIES]" +
					 ", [MAXMARK]" +
					 ", [ENTRYTYPE]" +
					 ", [STARTDATE]" +
					 ", [ENDDATE]" +
					 ", [ISMANUALENTRY]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 " FROM " + ENExamEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetExamEntry", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(17, false)
							}
							;
						} else
						throw new DataBaseException(ENExamEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetExamEntryForUpdate
		/// </summary>

		public static void GetExamEntryForUpdate(HeContext heContext, int inParamId, out RCExamEntryRecord outParamRecord) {
			outParamRecord = new RCExamEntryRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENExamEntryEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [EXAMNAME]" +
					 ", [CANDIDATENUMBER]" +
					 ", [GRADE]" +
					 ", [POINTS]" +
					 ", [EXAMBOARDREGISTRATIONDATE]" +
					 ", [EXAMBOARDREGISTRATIONNUMBER]" +
					 ", [YEAR]" +
					 ", [SERIES]" +
					 ", [MAXMARK]" +
					 ", [ENTRYTYPE]" +
					 ", [STARTDATE]" +
					 ", [ENDDATE]" +
					 ", [ISMANUALENTRY]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDON]" +
					 "FROM " + ENExamEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetExamEntryForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(17, false)
							}
							;
						} else
						throw new DataBaseException(ENExamEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateExamEntry
		/// </summary>

		public static void UpdateExamEntry(HeContext heContext, BitArray usedFields, RCExamEntryRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENExamEntryEntity.eSpaceId;
				ENExamEntryEntityRecord ssENExamEntry = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(17, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENExamEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXAMNAME] = @ssExamName"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CANDIDATENUMBER] = @ssCandidateNumber"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GRADE] = @ssGrade"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[POINTS] = @ssPoints"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXAMBOARDREGISTRATIONDATE] = @ssExamboardRegistrationDate"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXAMBOARDREGISTRATIONNUMBER] = @ssExamboardRegistrationNumber"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[YEAR] = @ssYear"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SERIES] = @ssSeries"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MAXMARK] = @ssMaxMark"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENTRYTYPE] = @ssEntryType"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STARTDATE] = @ssStartDate"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENDDATE] = @ssEndDate"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISMANUALENTRY] = @ssIsManualEntry"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENExamEntryssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENExamEntry.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENExamEntry.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssExamName", DbType.String, ssENExamEntry.ssExamName);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCandidateNumber", DbType.String, ssENExamEntry.ssCandidateNumber);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssGrade", DbType.String, ssENExamEntry.ssGrade);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssPoints", DbType.String, ssENExamEntry.ssPoints);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssExamboardRegistrationDate", DbType.DateTime, ssENExamEntry.ssExamboardRegistrationDate);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssExamboardRegistrationNumber", DbType.Int32, ssENExamEntry.ssExamboardRegistrationNumber);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssYear", DbType.Int32, ssENExamEntry.ssYear);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssSeries", DbType.String, ssENExamEntry.ssSeries);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssMaxMark", DbType.String, ssENExamEntry.ssMaxMark);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssEntryType", DbType.String, ssENExamEntry.ssEntryType);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENExamEntry.ssStartDate);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENExamEntry.ssEndDate);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssIsManualEntry", DbType.Boolean, ssENExamEntry.ssIsManualEntry);
						counter++;
					}
					if (usedFields[15]) {
						if ((ssENExamEntry.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENExamEntry.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENExamEntry.ssCreatedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISMANUALENTRY] = [ISMANUALENTRY]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENExamEntryssId", DbType.Int32, ssENExamEntry.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateExamEntry", true) <= 0)
					throw new DataBaseException(ENExamEntryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENExamEntry.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("ExamEntry")]
	public class WORCExamEntryRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("ExamName")]
		public string varWSExamName;

		[System.Xml.Serialization.XmlElement("CandidateNumber")]
		public string varWSCandidateNumber;

		[System.Xml.Serialization.XmlElement("Grade")]
		public string varWSGrade;

		[System.Xml.Serialization.XmlElement("Points")]
		public string varWSPoints;

		[System.Xml.Serialization.XmlElement("ExamboardRegistrationDate", DataType= "date")]
		public DateTime varWSExamboardRegistrationDate;

		[System.Xml.Serialization.XmlElement("ExamboardRegistrationNumber")]
		public int varWSExamboardRegistrationNumber;

		[System.Xml.Serialization.XmlElement("Year")]
		public int varWSYear;

		[System.Xml.Serialization.XmlElement("Series")]
		public string varWSSeries;

		[System.Xml.Serialization.XmlElement("MaxMark")]
		public string varWSMaxMark;

		[System.Xml.Serialization.XmlElement("EntryType")]
		public string varWSEntryType;

		[System.Xml.Serialization.XmlElement("StartDate", DataType= "date")]
		public DateTime varWSStartDate;

		[System.Xml.Serialization.XmlElement("EndDate", DataType= "date")]
		public DateTime varWSEndDate;

		[System.Xml.Serialization.XmlElement("IsManualEntry")]
		public bool varWSIsManualEntry;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime varWSCreatedOn;

		public WORCExamEntryRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSExamName = (string) "";
			varWSCandidateNumber = (string) "";
			varWSGrade = (string) "";
			varWSPoints = (string) "";
			varWSExamboardRegistrationDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSExamboardRegistrationNumber = (int) 0;
			varWSYear = (int) 0;
			varWSSeries = (string) "";
			varWSMaxMark = (string) "";
			varWSEntryType = (string) "";
			varWSStartDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSEndDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSIsManualEntry = (bool) false;
			varWSCreatedBy = (int) 0;
			varWSCreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCExamEntryRecord(ENExamEntryEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSExamName = BaseAppUtils.RemoveControlChars(r.ssExamName);
			varWSCandidateNumber = BaseAppUtils.RemoveControlChars(r.ssCandidateNumber);
			varWSGrade = BaseAppUtils.RemoveControlChars(r.ssGrade);
			varWSPoints = BaseAppUtils.RemoveControlChars(r.ssPoints);
			varWSExamboardRegistrationDate = (DateTime) r.ssExamboardRegistrationDate;
			varWSExamboardRegistrationNumber = (int) r.ssExamboardRegistrationNumber;
			varWSYear = (int) r.ssYear;
			varWSSeries = BaseAppUtils.RemoveControlChars(r.ssSeries);
			varWSMaxMark = BaseAppUtils.RemoveControlChars(r.ssMaxMark);
			varWSEntryType = BaseAppUtils.RemoveControlChars(r.ssEntryType);
			varWSStartDate = (DateTime) r.ssStartDate;
			varWSEndDate = (DateTime) r.ssEndDate;
			varWSIsManualEntry = (bool) r.ssIsManualEntry;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSCreatedOn = (DateTime) r.ssCreatedOn;
		}

		public static RLExamEntryList ToRecordList(WORCExamEntryRecord[] array) {
			RLExamEntryList rl = new RLExamEntryList();
			if (array != null) {
				foreach(WORCExamEntryRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCExamEntryRecord[] FromRecordList(RLExamEntryList rl) {
			WORCExamEntryRecord[] array = new WORCExamEntryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCExamEntryRecord {
		public static implicit operator WORCExamEntryRecord(RCExamEntryRecord r) {
			return new WORCExamEntryRecord(r.ssENExamEntry);
		}

		public static implicit operator RCExamEntryRecord(WORCExamEntryRecord w) {
			RCExamEntryRecord r = new RCExamEntryRecord("");
			if (w != null) {
				r.ssENExamEntry = w;
			}
			return r;
		}

	}

	partial struct ENExamEntryEntityRecord {
		public static implicit operator WORCExamEntryRecord(ENExamEntryEntityRecord r) {
			return new WORCExamEntryRecord(r);
		}

		public static implicit operator ENExamEntryEntityRecord(WORCExamEntryRecord w) {
			ENExamEntryEntityRecord r = new ENExamEntryEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssExamName = ((string) w.varWSExamName ?? "");
				r.ssCandidateNumber = ((string) w.varWSCandidateNumber ?? "");
				r.ssGrade = ((string) w.varWSGrade ?? "");
				r.ssPoints = ((string) w.varWSPoints ?? "");
				r.ssExamboardRegistrationDate = (DateTime) w.varWSExamboardRegistrationDate;
				r.ssExamboardRegistrationNumber = (int) w.varWSExamboardRegistrationNumber;
				r.ssYear = (int) w.varWSYear;
				r.ssSeries = ((string) w.varWSSeries ?? "");
				r.ssMaxMark = ((string) w.varWSMaxMark ?? "");
				r.ssEntryType = ((string) w.varWSEntryType ?? "");
				r.ssStartDate = (DateTime) w.varWSStartDate;
				r.ssEndDate = (DateTime) w.varWSEndDate;
				r.ssIsManualEntry = (bool) w.varWSIsManualEntry;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssCreatedOn = (DateTime) w.varWSCreatedOn;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLExamEntryRecordList {
		public WORCExamEntryRecord[] Array;


		public WORLExamEntryRecordList(WORCExamEntryRecord[] r) {
			if (r == null)
			Array = new WORCExamEntryRecord[0];
			else
			Array = r;
		}
		public WORLExamEntryRecordList() {
			Array = new WORCExamEntryRecord[0];
		}

		public WORLExamEntryRecordList(RLExamEntryRecordList rl) {
			rl=(RLExamEntryRecordList) rl.Duplicate();
			Array = new WORCExamEntryRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCExamEntryRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLExamEntryRecordList {
		public static implicit operator RLExamEntryRecordList(WORCExamEntryRecord[] array) {
			RLExamEntryRecordList rl = new RLExamEntryRecordList();
			if (array != null) {
				foreach(WORCExamEntryRecord val in array) {
					rl.Append((RCExamEntryRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCExamEntryRecord[](RLExamEntryRecordList rl) {
			WORCExamEntryRecord[] array = new WORCExamEntryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCExamEntryRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLExamEntryRecordList {
		public static implicit operator RLExamEntryRecordList(WORLExamEntryRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLExamEntryRecordList(RLExamEntryRecordList rl) {
			return new WORLExamEntryRecordList(rl);
		}
		public static implicit operator WORCExamEntryRecord[](WORLExamEntryRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLExamEntryRecordList(WORCExamEntryRecord[] array) {
			return new WORLExamEntryRecordList(array);
		}
	}
}

