/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENCauseOfConcernEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENCauseOfConcernEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENCauseOfConcernEntity.eSpaceId;
	} // ENCauseOfConcernEntity

	/// <summary>
	/// Entity <code>ENCauseOfConcernEntityRecord</code> that represents the Service Studio entity
	///  <code>CauseOfConcern</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("CauseOfConcern", "vCB_JGGDfUqPrzxkBNKZwg", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_CauseOfConcern", "")]
	[Serializable()]
	public partial struct ENCauseOfConcernEntityRecord: ISerializable, ITypedRecord<ENCauseOfConcernEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*koj1rHF8JESjoF0o5saCXQ");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*fINvEFpzIkKjL3XJYF6bkw");
		private static readonly GlobalObjectKey IdRAGStatusId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*9zjvSQKiHEGhYjbhOKvMXw");
		private static readonly GlobalObjectKey IdReasonId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*gdZyD5Myd0WuwebcTp+xHQ");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*96KnN_vib0mHED2zyTp1YA");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*AK_mIRW5VEqqCL_MvUNDvA");
		private static readonly GlobalObjectKey IdCreatedAt = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*XoIsh4RsMEqBG5iIfcDhjA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RAGSTATUSID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RAGStatusId")]
		private string _ssRAGStatusId;
		public string ssRAGStatusId {
			get {
				return _ssRAGStatusId;
			}
			set {
				if ((_ssRAGStatusId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssRAGStatusId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("REASONID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ReasonId")]
		private int _ssReasonId;
		public int ssReasonId {
			get {
				return _ssReasonId;
			}
			set {
				if ((_ssReasonId!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssReasonId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDAT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedAt")]
		private DateTime _ssCreatedAt;
		public DateTime ssCreatedAt {
			get {
				return _ssCreatedAt;
			}
			set {
				if ((_ssCreatedAt!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssCreatedAt = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENCauseOfConcernEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssRAGStatusId = "";
			_ssReasonId = 0;
			_ssDescription = "";
			_ssCreatedBy = 0;
			_ssCreatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "CauseOfConcern.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "CauseOfConcern.StudentReference", "");
			ssRAGStatusId = r.ReadTextEntityReference(index++, "CauseOfConcern.RAGStatusId", "");
			ssReasonId = r.ReadEntityReference(index++, "CauseOfConcern.ReasonId", 0);
			ssDescription = r.ReadText(index++, "CauseOfConcern.Description", "");
			ssCreatedBy = r.ReadEntityReference(index++, "CauseOfConcern.CreatedBy", 0);
			ssCreatedAt = r.ReadDateTime(index++, "CauseOfConcern.CreatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENCauseOfConcernEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENCauseOfConcernEntityRecord a, ENCauseOfConcernEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssRAGStatusId != b.ssRAGStatusId) return false;
			if (a.ssReasonId != b.ssReasonId) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssCreatedAt != b.ssCreatedAt) return false;
			return true;
		}

		public static bool operator != (ENCauseOfConcernEntityRecord a, ENCauseOfConcernEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENCauseOfConcernEntityRecord)) return false;
			return (this == (ENCauseOfConcernEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssRAGStatusId.GetHashCode()
				^ ssReasonId.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssCreatedAt.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENCauseOfConcernEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssRAGStatusId = "";
			_ssReasonId = 0;
			_ssDescription = "";
			_ssCreatedBy = 0;
			_ssCreatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssRAGStatusId = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssReasonId = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssCreatedAt = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENCauseOfConcernEntityRecord Duplicate() {
			ENCauseOfConcernEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssRAGStatusId = this._ssRAGStatusId;
			t._ssReasonId = this._ssReasonId;
			t._ssDescription = this._ssDescription;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssCreatedAt = this._ssCreatedAt;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RAGStatusId")) VarValue.AppendAttribute(recordElem, "RAGStatusId", ssRAGStatusId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RAGStatusId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ReasonId")) VarValue.AppendAttribute(recordElem, "ReasonId", ssReasonId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ReasonId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedAt")) VarValue.AppendAttribute(recordElem, "CreatedAt", ssCreatedAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedAt");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "ragstatusid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatusId")) variable.Value = ssRAGStatusId; else variable.Optimized = true;
			} else if (head == "reasonid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ReasonId")) variable.Value = ssReasonId; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "createdat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedAt")) variable.Value = ssCreatedAt; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdRAGStatusId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdReasonId)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdCreatedAt)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdRAGStatusId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdReasonId)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdCreatedAt)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdRAGStatusId) {
				return ssRAGStatusId;
			} else if (key == IdReasonId) {
				return ssReasonId;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdCreatedAt) {
				return ssCreatedAt;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssRAGStatusId = (string) other.AttributeGet(IdRAGStatusId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdRAGStatusId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdRAGStatusId);
			ssReasonId = (int) other.AttributeGet(IdReasonId);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdReasonId);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdReasonId);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdDescription);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCreatedBy);
			ssCreatedAt = (DateTime) other.AttributeGet(IdCreatedAt);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdCreatedAt);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdCreatedAt);
		}
	} // ENCauseOfConcernEntityRecord
	/// <summary>
	/// Structure <code>RCCauseOfConcernRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCauseOfConcernRecord: ISerializable, ITypedRecord<RCCauseOfConcernRecord> {
		private static readonly GlobalObjectKey IdCauseOfConcern = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*GX7tbyCb6lMzB7EuQfksTQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CauseOfConcern")]
		public ENCauseOfConcernEntityRecord ssENCauseOfConcern;


		public static implicit operator ENCauseOfConcernEntityRecord(RCCauseOfConcernRecord r) {
			return r.ssENCauseOfConcern;
		}

		public static implicit operator RCCauseOfConcernRecord(ENCauseOfConcernEntityRecord r) {
			RCCauseOfConcernRecord res = new RCCauseOfConcernRecord(null);
			res.ssENCauseOfConcern = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENCauseOfConcern.ChangedAttributes = value;
			}
			get {
				return ssENCauseOfConcern.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCCauseOfConcernRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCauseOfConcern.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENCauseOfConcern.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENCauseOfConcern.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCauseOfConcern.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCauseOfConcernRecord r) {
			this = r;
		}


		public static bool operator == (RCCauseOfConcernRecord a, RCCauseOfConcernRecord b) {
			if (a.ssENCauseOfConcern != b.ssENCauseOfConcern) return false;
			return true;
		}

		public static bool operator != (RCCauseOfConcernRecord a, RCCauseOfConcernRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCauseOfConcernRecord)) return false;
			return (this == (RCCauseOfConcernRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCauseOfConcern.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCauseOfConcernRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCauseOfConcern = new ENCauseOfConcernEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENCauseOfConcern.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCauseOfConcern.InternalRecursiveSave();
		}


		public RCCauseOfConcernRecord Duplicate() {
			RCCauseOfConcernRecord t;
			t.ssENCauseOfConcern = (ENCauseOfConcernEntityRecord) this.ssENCauseOfConcern.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCauseOfConcern.ToXml(this, recordElem, "CauseOfConcern", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "causeofconcern") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcern")) variable.Value = ssENCauseOfConcern; else variable.Optimized = true;
				variable.SetFieldName("causeofconcern");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENCauseOfConcern.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENCauseOfConcern.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCauseOfConcern) {
				return ssENCauseOfConcern;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCauseOfConcern.FillFromOther((IRecord) other.AttributeGet(IdCauseOfConcern));
		}
	} // RCCauseOfConcernRecord
	/// <summary>
	/// RecordList type <code>RLCauseOfConcernRecordList</code> that represents a record list of
	///  <code>CauseOfConcern</code>
	/// </summary>
	[Serializable()]
	public partial class RLCauseOfConcernRecordList: GenericRecordList<RCCauseOfConcernRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCauseOfConcernRecord GetElementDefaultValue() {
			return new RCCauseOfConcernRecord("");
		}

		public T[] ToArray<T>(Func<RCCauseOfConcernRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCauseOfConcernRecordList recordlist, Func<RCCauseOfConcernRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCauseOfConcernRecordList ToList<T>(T[] array, Func <T, RCCauseOfConcernRecord> converter) {
			RLCauseOfConcernRecordList result = new RLCauseOfConcernRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCauseOfConcernRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCauseOfConcernRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCauseOfConcernRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCauseOfConcernRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCauseOfConcernRecord> NewList() {
			return new RLCauseOfConcernRecordList();
		}


	} // RLCauseOfConcernRecordList

	/// <summary>
	/// RecordList type <code>RLCauseOfConcernList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, DateTime, Integer, RAGStatusIdentifier
	/// , CauseOfConcernReasonIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLCauseOfConcernList: GenericRecordList<ENCauseOfConcernEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENCauseOfConcernEntityRecord GetElementDefaultValue() {
			return new ENCauseOfConcernEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENCauseOfConcernEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCauseOfConcernList recordlist, Func<ENCauseOfConcernEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCauseOfConcernList ToList<T>(T[] array, Func <T, ENCauseOfConcernEntityRecord> converter) {
			RLCauseOfConcernList result = new RLCauseOfConcernList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCauseOfConcernList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCauseOfConcernList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCauseOfConcernList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCauseOfConcernList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENCauseOfConcernEntityRecord> NewList() {
			return new RLCauseOfConcernList();
		}


	} // RLCauseOfConcernList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateCauseOfConcern
		/// </summary>

		public static void CreateCauseOfConcern(HeContext heContext, RCCauseOfConcernRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernEntity.eSpaceId;
				ENCauseOfConcernEntityRecord ssENCauseOfConcern = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENCauseOfConcernEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [RAGSTATUSID]" +
					 ", [REASONID]" +
					 ", [DESCRIPTION]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDAT]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssRAGStatusId" +
					 ", @ssReasonId" +
					 ", @ssDescription" +
					 ", @ssCreatedBy" +
					 ", @ssCreatedAt" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENCauseOfConcern.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENCauseOfConcern.ssStudentReference);
					}
					if ((ssENCauseOfConcern.ssRAGStatusId== "")) {
						insertSqlCmd.CreateParameter("@ssRAGStatusId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRAGStatusId", DbType.String, ssENCauseOfConcern.ssRAGStatusId);
					}
					if ((ssENCauseOfConcern.ssReasonId==0)) {
						insertSqlCmd.CreateParameter("@ssReasonId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssReasonId", DbType.Int32, ssENCauseOfConcern.ssReasonId);
					}
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCauseOfConcern.ssDescription);
					if ((ssENCauseOfConcern.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCauseOfConcern.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENCauseOfConcern.ssCreatedAt);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateCauseOfConcern", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateCauseOfConcern
		/// </summary>

		public static void CreateOrUpdateCauseOfConcern(HeContext heContext, BitArray usedFields, RCCauseOfConcernRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernEntity.eSpaceId;
				ENCauseOfConcernEntityRecord ssENCauseOfConcern = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCauseOfConcernEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RAGSTATUSID] = @ssRAGStatusId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REASONID] = @ssReasonId"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCauseOfConcernssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCauseOfConcern.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENCauseOfConcern.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCauseOfConcern.ssRAGStatusId== "")) {
							sqlCmd.CreateParameter("@ssRAGStatusId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRAGStatusId", DbType.String, ssENCauseOfConcern.ssRAGStatusId);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENCauseOfConcern.ssReasonId==0)) {
							sqlCmd.CreateParameter("@ssReasonId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssReasonId", DbType.Int32, ssENCauseOfConcern.ssReasonId);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCauseOfConcern.ssDescription);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENCauseOfConcern.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCauseOfConcern.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENCauseOfConcern.ssCreatedAt);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDAT] = [CREATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCauseOfConcernssId", DbType.Int32, ssENCauseOfConcern.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateCauseOfConcern (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENCauseOfConcernEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [RAGSTATUSID]" +
						 ", [REASONID]" +
						 ", [DESCRIPTION]" +
						 ", [CREATEDBY]" +
						 ", [CREATEDAT]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssRAGStatusId" +
						 ", @ssReasonId" +
						 ", @ssDescription" +
						 ", @ssCreatedBy" +
						 ", @ssCreatedAt" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENCauseOfConcern.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENCauseOfConcern.ssStudentReference);
						}
						if ((ssENCauseOfConcern.ssRAGStatusId== "")) {
							insertSqlCmd.CreateParameter("@ssRAGStatusId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRAGStatusId", DbType.String, ssENCauseOfConcern.ssRAGStatusId);
						}
						if ((ssENCauseOfConcern.ssReasonId==0)) {
							insertSqlCmd.CreateParameter("@ssReasonId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssReasonId", DbType.Int32, ssENCauseOfConcern.ssReasonId);
						}
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCauseOfConcern.ssDescription);
						if ((ssENCauseOfConcern.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCauseOfConcern.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENCauseOfConcern.ssCreatedAt);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateCauseOfConcern", true), typeof(int));
					} else {
						outParamId = ssENCauseOfConcern.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteCauseOfConcern
		/// </summary>

		public static void DeleteCauseOfConcern(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENCauseOfConcernEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteCauseOfConcern", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCauseOfConcern
		/// </summary>

		public static void GetCauseOfConcern(HeContext heContext, int inParamId, out RCCauseOfConcernRecord outParamRecord) {
			outParamRecord = new RCCauseOfConcernRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [RAGSTATUSID]" +
					 ", [REASONID]" +
					 ", [DESCRIPTION]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDAT]" +
					 " FROM " + ENCauseOfConcernEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCauseOfConcern", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENCauseOfConcernEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCauseOfConcernForUpdate
		/// </summary>

		public static void GetCauseOfConcernForUpdate(HeContext heContext, int inParamId, out RCCauseOfConcernRecord outParamRecord) {
			outParamRecord = new RCCauseOfConcernRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [RAGSTATUSID]" +
					 ", [REASONID]" +
					 ", [DESCRIPTION]" +
					 ", [CREATEDBY]" +
					 ", [CREATEDAT]" +
					 "FROM " + ENCauseOfConcernEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCauseOfConcernForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENCauseOfConcernEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateCauseOfConcern
		/// </summary>

		public static void UpdateCauseOfConcern(HeContext heContext, BitArray usedFields, RCCauseOfConcernRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCauseOfConcernEntity.eSpaceId;
				ENCauseOfConcernEntityRecord ssENCauseOfConcern = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCauseOfConcernEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RAGSTATUSID] = @ssRAGStatusId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REASONID] = @ssReasonId"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCauseOfConcernssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCauseOfConcern.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENCauseOfConcern.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCauseOfConcern.ssRAGStatusId== "")) {
							sqlCmd.CreateParameter("@ssRAGStatusId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRAGStatusId", DbType.String, ssENCauseOfConcern.ssRAGStatusId);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENCauseOfConcern.ssReasonId==0)) {
							sqlCmd.CreateParameter("@ssReasonId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssReasonId", DbType.Int32, ssENCauseOfConcern.ssReasonId);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENCauseOfConcern.ssDescription);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENCauseOfConcern.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENCauseOfConcern.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENCauseOfConcern.ssCreatedAt);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDAT] = [CREATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCauseOfConcernssId", DbType.Int32, ssENCauseOfConcern.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateCauseOfConcern", true) <= 0)
					throw new DataBaseException(ENCauseOfConcernEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENCauseOfConcern.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("CauseOfConcern")]
	public class WORCCauseOfConcernRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("RAGStatusId")]
		public string varWSRAGStatusId;

		[System.Xml.Serialization.XmlElement("ReasonId")]
		public int varWSReasonId;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("CreatedAt")]
		public DateTime varWSCreatedAt;

		public WORCCauseOfConcernRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSRAGStatusId = (string) "";
			varWSReasonId = (int) 0;
			varWSDescription = (string) "";
			varWSCreatedBy = (int) 0;
			varWSCreatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCCauseOfConcernRecord(ENCauseOfConcernEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSRAGStatusId = BaseAppUtils.RemoveControlChars(r.ssRAGStatusId);
			varWSReasonId = (int) r.ssReasonId;
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSCreatedAt = (DateTime) r.ssCreatedAt;
		}

		public static RLCauseOfConcernList ToRecordList(WORCCauseOfConcernRecord[] array) {
			RLCauseOfConcernList rl = new RLCauseOfConcernList();
			if (array != null) {
				foreach(WORCCauseOfConcernRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCauseOfConcernRecord[] FromRecordList(RLCauseOfConcernList rl) {
			WORCCauseOfConcernRecord[] array = new WORCCauseOfConcernRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCauseOfConcernRecord {
		public static implicit operator WORCCauseOfConcernRecord(RCCauseOfConcernRecord r) {
			return new WORCCauseOfConcernRecord(r.ssENCauseOfConcern);
		}

		public static implicit operator RCCauseOfConcernRecord(WORCCauseOfConcernRecord w) {
			RCCauseOfConcernRecord r = new RCCauseOfConcernRecord("");
			if (w != null) {
				r.ssENCauseOfConcern = w;
			}
			return r;
		}

	}

	partial struct ENCauseOfConcernEntityRecord {
		public static implicit operator WORCCauseOfConcernRecord(ENCauseOfConcernEntityRecord r) {
			return new WORCCauseOfConcernRecord(r);
		}

		public static implicit operator ENCauseOfConcernEntityRecord(WORCCauseOfConcernRecord w) {
			ENCauseOfConcernEntityRecord r = new ENCauseOfConcernEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssRAGStatusId = (string) w.varWSRAGStatusId;
				r.ssReasonId = (int) w.varWSReasonId;
				r.ssDescription = ((string) w.varWSDescription ?? "");
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssCreatedAt = (DateTime) w.varWSCreatedAt;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCauseOfConcernRecordList {
		public WORCCauseOfConcernRecord[] Array;


		public WORLCauseOfConcernRecordList(WORCCauseOfConcernRecord[] r) {
			if (r == null)
			Array = new WORCCauseOfConcernRecord[0];
			else
			Array = r;
		}
		public WORLCauseOfConcernRecordList() {
			Array = new WORCCauseOfConcernRecord[0];
		}

		public WORLCauseOfConcernRecordList(RLCauseOfConcernRecordList rl) {
			rl=(RLCauseOfConcernRecordList) rl.Duplicate();
			Array = new WORCCauseOfConcernRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCauseOfConcernRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCauseOfConcernRecordList {
		public static implicit operator RLCauseOfConcernRecordList(WORCCauseOfConcernRecord[] array) {
			RLCauseOfConcernRecordList rl = new RLCauseOfConcernRecordList();
			if (array != null) {
				foreach(WORCCauseOfConcernRecord val in array) {
					rl.Append((RCCauseOfConcernRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCauseOfConcernRecord[](RLCauseOfConcernRecordList rl) {
			WORCCauseOfConcernRecord[] array = new WORCCauseOfConcernRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCauseOfConcernRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCauseOfConcernRecordList {
		public static implicit operator RLCauseOfConcernRecordList(WORLCauseOfConcernRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCauseOfConcernRecordList(RLCauseOfConcernRecordList rl) {
			return new WORLCauseOfConcernRecordList(rl);
		}
		public static implicit operator WORCCauseOfConcernRecord[](WORLCauseOfConcernRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCauseOfConcernRecordList(WORCCauseOfConcernRecord[] array) {
			return new WORLCauseOfConcernRecordList(array);
		}
	}
}

