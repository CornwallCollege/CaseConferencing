/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENLearningSupportDocumentsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENLearningSupportDocumentsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENLearningSupportDocumentsEntity.eSpaceId;
	} // ENLearningSupportDocumentsEntity

	/// <summary>
	/// Entity <code>ENLearningSupportDocumentsEntityRecord</code> that represents the Service Studio
	///  entity <code>LearningSupportDocuments</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("LearningSupportDocuments", "nOms5Ihc4kGnQdjGm7O60Q", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_LearningSupportDocuments", "")]
	[Serializable()]
	public partial struct ENLearningSupportDocumentsEntityRecord: ISerializable, ITypedRecord<ENLearningSupportDocumentsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*NfNf5WDa7UuqCu3r1kLvDQ");
		private static readonly GlobalObjectKey IdLearningSupportID = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*o62w+bOBzUWjfvJMHL+81A");
		private static readonly GlobalObjectKey IdDocumentID = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*a6QwzuGzZU+T+lgBi4KHpQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNINGSUPPORTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LearningSupportID")]
		private int _ssLearningSupportID;
		public int ssLearningSupportID {
			get {
				return _ssLearningSupportID;
			}
			set {
				if ((_ssLearningSupportID!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssLearningSupportID = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("DocumentID")]
		private int _ssDocumentID;
		public int ssDocumentID {
			get {
				return _ssDocumentID;
			}
			set {
				if ((_ssDocumentID!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDocumentID = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENLearningSupportDocumentsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssLearningSupportID = 0;
			_ssDocumentID = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "LearningSupportDocuments.Id", 0);
			ssLearningSupportID = r.ReadEntityReference(index++, "LearningSupportDocuments.LearningSupportID", 0);
			ssDocumentID = r.ReadEntityReference(index++, "LearningSupportDocuments.DocumentID", 0);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENLearningSupportDocumentsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENLearningSupportDocumentsEntityRecord a, ENLearningSupportDocumentsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssLearningSupportID != b.ssLearningSupportID) return false;
			if (a.ssDocumentID != b.ssDocumentID) return false;
			return true;
		}

		public static bool operator != (ENLearningSupportDocumentsEntityRecord a, ENLearningSupportDocumentsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENLearningSupportDocumentsEntityRecord)) return false;
			return (this == (ENLearningSupportDocumentsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssLearningSupportID.GetHashCode()
				^ ssDocumentID.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENLearningSupportDocumentsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssLearningSupportID = 0;
			_ssDocumentID = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssLearningSupportID = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDocumentID = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENLearningSupportDocumentsEntityRecord Duplicate() {
			ENLearningSupportDocumentsEntityRecord t;
			t._ssId = this._ssId;
			t._ssLearningSupportID = this._ssLearningSupportID;
			t._ssDocumentID = this._ssDocumentID;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearningSupportID")) VarValue.AppendAttribute(recordElem, "LearningSupportID", ssLearningSupportID, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LearningSupportID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocumentID")) VarValue.AppendAttribute(recordElem, "DocumentID", ssDocumentID, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "DocumentID");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "learningsupportid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningSupportID")) variable.Value = ssLearningSupportID; else variable.Optimized = true;
			} else if (head == "documentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocumentID")) variable.Value = ssDocumentID; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdLearningSupportID)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDocumentID)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdLearningSupportID)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDocumentID)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdLearningSupportID) {
				return ssLearningSupportID;
			} else if (key == IdDocumentID) {
				return ssDocumentID;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssLearningSupportID = (int) other.AttributeGet(IdLearningSupportID);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdLearningSupportID);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLearningSupportID);
			ssDocumentID = (int) other.AttributeGet(IdDocumentID);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDocumentID);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDocumentID);
		}
	} // ENLearningSupportDocumentsEntityRecord
	/// <summary>
	/// Structure <code>RCLearningSupportDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCLearningSupportDocumentsRecord: ISerializable, ITypedRecord<RCLearningSupportDocumentsRecord> {
		private static readonly GlobalObjectKey IdLearningSupportDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*g_yrp1IaRD8fubhekIv30w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("LearningSupportDocuments")]
		public ENLearningSupportDocumentsEntityRecord ssENLearningSupportDocuments;


		public static implicit operator ENLearningSupportDocumentsEntityRecord(RCLearningSupportDocumentsRecord r) {
			return r.ssENLearningSupportDocuments;
		}

		public static implicit operator RCLearningSupportDocumentsRecord(ENLearningSupportDocumentsEntityRecord r) {
			RCLearningSupportDocumentsRecord res = new RCLearningSupportDocumentsRecord(null);
			res.ssENLearningSupportDocuments = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENLearningSupportDocuments.ChangedAttributes = value;
			}
			get {
				return ssENLearningSupportDocuments.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCLearningSupportDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENLearningSupportDocuments = new ENLearningSupportDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENLearningSupportDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENLearningSupportDocuments.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENLearningSupportDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENLearningSupportDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCLearningSupportDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCLearningSupportDocumentsRecord a, RCLearningSupportDocumentsRecord b) {
			if (a.ssENLearningSupportDocuments != b.ssENLearningSupportDocuments) return false;
			return true;
		}

		public static bool operator != (RCLearningSupportDocumentsRecord a, RCLearningSupportDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCLearningSupportDocumentsRecord)) return false;
			return (this == (RCLearningSupportDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENLearningSupportDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCLearningSupportDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENLearningSupportDocuments = new ENLearningSupportDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENLearningSupportDocuments = (ENLearningSupportDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENLearningSupportDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENLearningSupportDocuments.InternalRecursiveSave();
		}


		public RCLearningSupportDocumentsRecord Duplicate() {
			RCLearningSupportDocumentsRecord t;
			t.ssENLearningSupportDocuments = (ENLearningSupportDocumentsEntityRecord) this.ssENLearningSupportDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENLearningSupportDocuments.ToXml(this, recordElem, "LearningSupportDocuments", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "learningsupportdocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningSupportDocuments")) variable.Value = ssENLearningSupportDocuments; else variable.Optimized = true;
				variable.SetFieldName("learningsupportdocuments");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENLearningSupportDocuments.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENLearningSupportDocuments.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLearningSupportDocuments) {
				return ssENLearningSupportDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENLearningSupportDocuments.FillFromOther((IRecord) other.AttributeGet(IdLearningSupportDocuments));
		}
	} // RCLearningSupportDocumentsRecord
	/// <summary>
	/// RecordList type <code>RLLearningSupportDocumentsRecordList</code> that represents a record list of
	///  <code>LearningSupportDocuments</code>
	/// </summary>
	[Serializable()]
	public partial class RLLearningSupportDocumentsRecordList: GenericRecordList<RCLearningSupportDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCLearningSupportDocumentsRecord GetElementDefaultValue() {
			return new RCLearningSupportDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCLearningSupportDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLLearningSupportDocumentsRecordList recordlist, Func<RCLearningSupportDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLLearningSupportDocumentsRecordList ToList<T>(T[] array, Func <T, RCLearningSupportDocumentsRecord> converter) {
			RLLearningSupportDocumentsRecordList result = new RLLearningSupportDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLLearningSupportDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearningSupportDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearningSupportDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLLearningSupportDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCLearningSupportDocumentsRecord> NewList() {
			return new RLLearningSupportDocumentsRecordList();
		}


	} // RLLearningSupportDocumentsRecordList

	/// <summary>
	/// RecordList type <code>RLLearningSupportDocumentsList</code> that represents a record list of
	///  <code>Integer, LearningSupportIdentifier, DocumentsIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLLearningSupportDocumentsList: GenericRecordList<ENLearningSupportDocumentsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENLearningSupportDocumentsEntityRecord GetElementDefaultValue() {
			return new ENLearningSupportDocumentsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENLearningSupportDocumentsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLLearningSupportDocumentsList recordlist, Func<ENLearningSupportDocumentsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLLearningSupportDocumentsList ToList<T>(T[] array, Func <T, ENLearningSupportDocumentsEntityRecord> converter) {
			RLLearningSupportDocumentsList result = new RLLearningSupportDocumentsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLLearningSupportDocumentsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearningSupportDocumentsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearningSupportDocumentsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLLearningSupportDocumentsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENLearningSupportDocumentsEntityRecord> NewList() {
			return new RLLearningSupportDocumentsList();
		}


	} // RLLearningSupportDocumentsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateLearningSupportDocuments
		/// </summary>

		public static void CreateLearningSupportDocuments(HeContext heContext, RCLearningSupportDocumentsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportDocumentsEntity.eSpaceId;
				ENLearningSupportDocumentsEntityRecord ssENLearningSupportDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENLearningSupportDocumentsEntity.LocalViewName(null, null) + " (" +
					 " [LEARNINGSUPPORTID]" +
					 ", [DOCUMENTID]" +
					 " ) VALUES (" +
					 " @ssLearningSupportID" +
					 ", @ssDocumentID" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENLearningSupportDocuments.ssLearningSupportID==0)) {
						insertSqlCmd.CreateParameter("@ssLearningSupportID", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLearningSupportID", DbType.Int32, ssENLearningSupportDocuments.ssLearningSupportID);
					}
					if ((ssENLearningSupportDocuments.ssDocumentID==0)) {
						insertSqlCmd.CreateParameter("@ssDocumentID", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDocumentID", DbType.Int32, ssENLearningSupportDocuments.ssDocumentID);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateLearningSupportDocuments", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateLearningSupportDocuments
		/// </summary>

		public static void CreateOrUpdateLearningSupportDocuments(HeContext heContext, BitArray usedFields, RCLearningSupportDocumentsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportDocumentsEntity.eSpaceId;
				ENLearningSupportDocumentsEntityRecord ssENLearningSupportDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENLearningSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNINGSUPPORTID] = @ssLearningSupportID"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentID"): parameters);
					string whereCondition = " WHERE [ID] = @ssENLearningSupportDocumentsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENLearningSupportDocuments.ssLearningSupportID==0)) {
							sqlCmd.CreateParameter("@ssLearningSupportID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLearningSupportID", DbType.Int32, ssENLearningSupportDocuments.ssLearningSupportID);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENLearningSupportDocuments.ssDocumentID==0)) {
							sqlCmd.CreateParameter("@ssDocumentID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentID", DbType.Int32, ssENLearningSupportDocuments.ssDocumentID);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[LEARNINGSUPPORTID] = [LEARNINGSUPPORTID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENLearningSupportDocumentsssId", DbType.Int32, ssENLearningSupportDocuments.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateLearningSupportDocuments (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENLearningSupportDocumentsEntity.LocalViewName(null, null) + " (" +
						 " [LEARNINGSUPPORTID]" +
						 ", [DOCUMENTID]" +
						 " ) VALUES (" +
						 " @ssLearningSupportID" +
						 ", @ssDocumentID" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENLearningSupportDocuments.ssLearningSupportID==0)) {
							insertSqlCmd.CreateParameter("@ssLearningSupportID", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLearningSupportID", DbType.Int32, ssENLearningSupportDocuments.ssLearningSupportID);
						}
						if ((ssENLearningSupportDocuments.ssDocumentID==0)) {
							insertSqlCmd.CreateParameter("@ssDocumentID", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDocumentID", DbType.Int32, ssENLearningSupportDocuments.ssDocumentID);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateLearningSupportDocuments", true), typeof(int));
					} else {
						outParamId = ssENLearningSupportDocuments.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteLearningSupportDocuments
		/// </summary>

		public static void DeleteLearningSupportDocuments(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENLearningSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteLearningSupportDocuments", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetLearningSupportDocuments
		/// </summary>

		public static void GetLearningSupportDocuments(HeContext heContext, int inParamId, out RCLearningSupportDocumentsRecord outParamRecord) {
			outParamRecord = new RCLearningSupportDocumentsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [LEARNINGSUPPORTID]" +
					 ", [DOCUMENTID]" +
					 " FROM " + ENLearningSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetLearningSupportDocuments", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENLearningSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetLearningSupportDocumentsForUpdate
		/// </summary>

		public static void GetLearningSupportDocumentsForUpdate(HeContext heContext, int inParamId, out RCLearningSupportDocumentsRecord outParamRecord) {
			outParamRecord = new RCLearningSupportDocumentsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [LEARNINGSUPPORTID]" +
					 ", [DOCUMENTID]" +
					 "FROM " + ENLearningSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetLearningSupportDocumentsForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENLearningSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateLearningSupportDocuments
		/// </summary>

		public static void UpdateLearningSupportDocuments(HeContext heContext, BitArray usedFields, RCLearningSupportDocumentsRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENLearningSupportDocumentsEntity.eSpaceId;
				ENLearningSupportDocumentsEntityRecord ssENLearningSupportDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENLearningSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNINGSUPPORTID] = @ssLearningSupportID"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentID"): parameters);
					string whereCondition = " WHERE [ID] = @ssENLearningSupportDocumentsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENLearningSupportDocuments.ssLearningSupportID==0)) {
							sqlCmd.CreateParameter("@ssLearningSupportID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLearningSupportID", DbType.Int32, ssENLearningSupportDocuments.ssLearningSupportID);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENLearningSupportDocuments.ssDocumentID==0)) {
							sqlCmd.CreateParameter("@ssDocumentID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentID", DbType.Int32, ssENLearningSupportDocuments.ssDocumentID);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[LEARNINGSUPPORTID] = [LEARNINGSUPPORTID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENLearningSupportDocumentsssId", DbType.Int32, ssENLearningSupportDocuments.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateLearningSupportDocuments", true) <= 0)
					throw new DataBaseException(ENLearningSupportDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENLearningSupportDocuments.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("LearningSupportDocuments")]
	public class WORCLearningSupportDocumentsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("LearningSupportID")]
		public int varWSLearningSupportID;

		[System.Xml.Serialization.XmlElement("DocumentID")]
		public int varWSDocumentID;

		public WORCLearningSupportDocumentsRecord() {
			varWSId = (int) 0;
			varWSLearningSupportID = (int) 0;
			varWSDocumentID = (int) 0;
		}

		public WORCLearningSupportDocumentsRecord(ENLearningSupportDocumentsEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSLearningSupportID = (int) r.ssLearningSupportID;
			varWSDocumentID = (int) r.ssDocumentID;
		}

		public static RLLearningSupportDocumentsList ToRecordList(WORCLearningSupportDocumentsRecord[] array) {
			RLLearningSupportDocumentsList rl = new RLLearningSupportDocumentsList();
			if (array != null) {
				foreach(WORCLearningSupportDocumentsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCLearningSupportDocumentsRecord[] FromRecordList(RLLearningSupportDocumentsList rl) {
			WORCLearningSupportDocumentsRecord[] array = new WORCLearningSupportDocumentsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCLearningSupportDocumentsRecord {
		public static implicit operator WORCLearningSupportDocumentsRecord(RCLearningSupportDocumentsRecord r) {
			return new WORCLearningSupportDocumentsRecord(r.ssENLearningSupportDocuments);
		}

		public static implicit operator RCLearningSupportDocumentsRecord(WORCLearningSupportDocumentsRecord w) {
			RCLearningSupportDocumentsRecord r = new RCLearningSupportDocumentsRecord("");
			if (w != null) {
				r.ssENLearningSupportDocuments = w;
			}
			return r;
		}

	}

	partial struct ENLearningSupportDocumentsEntityRecord {
		public static implicit operator WORCLearningSupportDocumentsRecord(ENLearningSupportDocumentsEntityRecord r) {
			return new WORCLearningSupportDocumentsRecord(r);
		}

		public static implicit operator ENLearningSupportDocumentsEntityRecord(WORCLearningSupportDocumentsRecord w) {
			ENLearningSupportDocumentsEntityRecord r = new ENLearningSupportDocumentsEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssLearningSupportID = (int) w.varWSLearningSupportID;
				r.ssDocumentID = (int) w.varWSDocumentID;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLLearningSupportDocumentsRecordList {
		public WORCLearningSupportDocumentsRecord[] Array;


		public WORLLearningSupportDocumentsRecordList(WORCLearningSupportDocumentsRecord[] r) {
			if (r == null)
			Array = new WORCLearningSupportDocumentsRecord[0];
			else
			Array = r;
		}
		public WORLLearningSupportDocumentsRecordList() {
			Array = new WORCLearningSupportDocumentsRecord[0];
		}

		public WORLLearningSupportDocumentsRecordList(RLLearningSupportDocumentsRecordList rl) {
			rl=(RLLearningSupportDocumentsRecordList) rl.Duplicate();
			Array = new WORCLearningSupportDocumentsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCLearningSupportDocumentsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLLearningSupportDocumentsRecordList {
		public static implicit operator RLLearningSupportDocumentsRecordList(WORCLearningSupportDocumentsRecord[] array) {
			RLLearningSupportDocumentsRecordList rl = new RLLearningSupportDocumentsRecordList();
			if (array != null) {
				foreach(WORCLearningSupportDocumentsRecord val in array) {
					rl.Append((RCLearningSupportDocumentsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCLearningSupportDocumentsRecord[](RLLearningSupportDocumentsRecordList rl) {
			WORCLearningSupportDocumentsRecord[] array = new WORCLearningSupportDocumentsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCLearningSupportDocumentsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLLearningSupportDocumentsRecordList {
		public static implicit operator RLLearningSupportDocumentsRecordList(WORLLearningSupportDocumentsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLLearningSupportDocumentsRecordList(RLLearningSupportDocumentsRecordList rl) {
			return new WORLLearningSupportDocumentsRecordList(rl);
		}
		public static implicit operator WORCLearningSupportDocumentsRecord[](WORLLearningSupportDocumentsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLLearningSupportDocumentsRecordList(WORCLearningSupportDocumentsRecord[] array) {
			return new WORLLearningSupportDocumentsRecordList(array);
		}
	}
}

