/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSafeguardingAgenciesInvolvedEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENSafeguardingAgenciesInvolvedEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENSafeguardingAgenciesInvolvedEntity.eSpaceId;
	} // ENSafeguardingAgenciesInvolvedEntity

	/// <summary>
	/// Entity <code>ENSafeguardingAgenciesInvolvedEntityRecord</code> that represents the Service Studio
	///  entity <code>SafeguardingAgenciesInvolved</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("SafeguardingAgenciesInvolved", "vZhPexYwfUCj9hLhYyCAoQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_SafeguardingAgenciesInvolved", "")]
	[Serializable()]
	public partial struct ENSafeguardingAgenciesInvolvedEntityRecord: ISerializable, ITypedRecord<ENSafeguardingAgenciesInvolvedEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*7elkMszrSEivp5hHpZaSVQ");
		private static readonly GlobalObjectKey IdSafeguardingIssue = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*XUDCCBC0WEmV6qwFc0vxbA");
		private static readonly GlobalObjectKey IdSafeguardingAgency = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*plj929ajN0+co5nKakt1pg");
		private static readonly GlobalObjectKey IdOtherAgency = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*676Sy3boiEKXY_LjZiEuZg");
		private static readonly GlobalObjectKey IdContactName = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ZyIyzXPlbUylhtI096B6Kw");
		private static readonly GlobalObjectKey IdContactNumber = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*g7_nRjAcy0qZrsRiiFS_Yw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(6, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGISSUE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SafeguardingIssue")]
		private int _ssSafeguardingIssue;
		public int ssSafeguardingIssue {
			get {
				return _ssSafeguardingIssue;
			}
			set {
				if ((_ssSafeguardingIssue!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssSafeguardingIssue = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDINGAGENCY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SafeguardingAgency")]
		private string _ssSafeguardingAgency;
		public string ssSafeguardingAgency {
			get {
				return _ssSafeguardingAgency;
			}
			set {
				if ((_ssSafeguardingAgency!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssSafeguardingAgency = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OTHERAGENCY", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("OtherAgency")]
		private string _ssOtherAgency;
		public string ssOtherAgency {
			get {
				return _ssOtherAgency;
			}
			set {
				if ((_ssOtherAgency!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssOtherAgency = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CONTACTNAME", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("ContactName")]
		private string _ssContactName;
		public string ssContactName {
			get {
				return _ssContactName;
			}
			set {
				if ((_ssContactName!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssContactName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CONTACTNUMBER", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("ContactNumber")]
		private string _ssContactNumber;
		public string ssContactNumber {
			get {
				return _ssContactNumber;
			}
			set {
				if ((_ssContactNumber!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssContactNumber = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSafeguardingAgenciesInvolvedEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(6, true);
			OptimizedAttributes = new BitArray(6, false);
			_ssId = 0;
			_ssSafeguardingIssue = 0;
			_ssSafeguardingAgency = "";
			_ssOtherAgency = "";
			_ssContactName = "";
			_ssContactNumber = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "SafeguardingAgenciesInvolved.Id", 0);
			ssSafeguardingIssue = r.ReadEntityReference(index++, "SafeguardingAgenciesInvolved.SafeguardingIssue", 0);
			ssSafeguardingAgency = r.ReadTextEntityReference(index++, "SafeguardingAgenciesInvolved.SafeguardingAgency", "");
			ssOtherAgency = r.ReadText(index++, "SafeguardingAgenciesInvolved.OtherAgency", "");
			ssContactName = r.ReadText(index++, "SafeguardingAgenciesInvolved.ContactName", "");
			ssContactNumber = r.ReadText(index++, "SafeguardingAgenciesInvolved.ContactNumber", "");
			ChangedAttributes = new BitArray(6, false);
			OptimizedAttributes = new BitArray(6, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSafeguardingAgenciesInvolvedEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSafeguardingAgenciesInvolvedEntityRecord a, ENSafeguardingAgenciesInvolvedEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssSafeguardingIssue != b.ssSafeguardingIssue) return false;
			if (a.ssSafeguardingAgency != b.ssSafeguardingAgency) return false;
			if (a.ssOtherAgency != b.ssOtherAgency) return false;
			if (a.ssContactName != b.ssContactName) return false;
			if (a.ssContactNumber != b.ssContactNumber) return false;
			return true;
		}

		public static bool operator != (ENSafeguardingAgenciesInvolvedEntityRecord a, ENSafeguardingAgenciesInvolvedEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSafeguardingAgenciesInvolvedEntityRecord)) return false;
			return (this == (ENSafeguardingAgenciesInvolvedEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssSafeguardingIssue.GetHashCode()
				^ ssSafeguardingAgency.GetHashCode()
				^ ssOtherAgency.GetHashCode()
				^ ssContactName.GetHashCode()
				^ ssContactNumber.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSafeguardingAgenciesInvolvedEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(6, true);
			OptimizedAttributes = new BitArray(6, false);
			_ssId = 0;
			_ssSafeguardingIssue = 0;
			_ssSafeguardingAgency = "";
			_ssOtherAgency = "";
			_ssContactName = "";
			_ssContactNumber = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssSafeguardingIssue = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssSafeguardingAgency = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssOtherAgency = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssContactName = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssContactNumber = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSafeguardingAgenciesInvolvedEntityRecord Duplicate() {
			ENSafeguardingAgenciesInvolvedEntityRecord t;
			t._ssId = this._ssId;
			t._ssSafeguardingIssue = this._ssSafeguardingIssue;
			t._ssSafeguardingAgency = this._ssSafeguardingAgency;
			t._ssOtherAgency = this._ssOtherAgency;
			t._ssContactName = this._ssContactName;
			t._ssContactNumber = this._ssContactNumber;
			t.ChangedAttributes = new BitArray(6);
			t.OptimizedAttributes = new BitArray(6);
			for (int i = 0; i < 6; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingIssue")) VarValue.AppendAttribute(recordElem, "SafeguardingIssue", ssSafeguardingIssue, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingIssue");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingAgency")) VarValue.AppendAttribute(recordElem, "SafeguardingAgency", ssSafeguardingAgency, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingAgency");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OtherAgency")) VarValue.AppendAttribute(recordElem, "OtherAgency", ssOtherAgency, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OtherAgency");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ContactName")) VarValue.AppendAttribute(recordElem, "ContactName", ssContactName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ContactName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ContactNumber")) VarValue.AppendAttribute(recordElem, "ContactNumber", ssContactNumber, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ContactNumber");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "safeguardingissue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssue")) variable.Value = ssSafeguardingIssue; else variable.Optimized = true;
			} else if (head == "safeguardingagency") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingAgency")) variable.Value = ssSafeguardingAgency; else variable.Optimized = true;
			} else if (head == "otheragency") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OtherAgency")) variable.Value = ssOtherAgency; else variable.Optimized = true;
			} else if (head == "contactname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ContactName")) variable.Value = ssContactName; else variable.Optimized = true;
			} else if (head == "contactnumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ContactNumber")) variable.Value = ssContactNumber; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdSafeguardingIssue)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdSafeguardingAgency)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdOtherAgency)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdContactName)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdContactNumber)) {
				return ChangedAttributes[5];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdSafeguardingIssue)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdSafeguardingAgency)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdOtherAgency)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdContactName)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdContactNumber)) {
				return OptimizedAttributes[5];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdSafeguardingIssue) {
				return ssSafeguardingIssue;
			} else if (key == IdSafeguardingAgency) {
				return ssSafeguardingAgency;
			} else if (key == IdOtherAgency) {
				return ssOtherAgency;
			} else if (key == IdContactName) {
				return ssContactName;
			} else if (key == IdContactNumber) {
				return ssContactNumber;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(6);
			OptimizedAttributes = new BitArray(6);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssSafeguardingIssue = (int) other.AttributeGet(IdSafeguardingIssue);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdSafeguardingIssue);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdSafeguardingIssue);
			ssSafeguardingAgency = (string) other.AttributeGet(IdSafeguardingAgency);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdSafeguardingAgency);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdSafeguardingAgency);
			ssOtherAgency = (string) other.AttributeGet(IdOtherAgency);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdOtherAgency);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdOtherAgency);
			ssContactName = (string) other.AttributeGet(IdContactName);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdContactName);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdContactName);
			ssContactNumber = (string) other.AttributeGet(IdContactNumber);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdContactNumber);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdContactNumber);
		}
	} // ENSafeguardingAgenciesInvolvedEntityRecord
	/// <summary>
	/// Structure <code>RCSafeguardingAgenciesInvolvedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSafeguardingAgenciesInvolvedRecord: ISerializable, ITypedRecord<RCSafeguardingAgenciesInvolvedRecord> {
		private static readonly GlobalObjectKey IdSafeguardingAgenciesInvolved = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*8vHf06uSxc9l2ChXFGZkkA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SafeguardingAgenciesInvolved")]
		public ENSafeguardingAgenciesInvolvedEntityRecord ssENSafeguardingAgenciesInvolved;


		public static implicit operator ENSafeguardingAgenciesInvolvedEntityRecord(RCSafeguardingAgenciesInvolvedRecord r) {
			return r.ssENSafeguardingAgenciesInvolved;
		}

		public static implicit operator RCSafeguardingAgenciesInvolvedRecord(ENSafeguardingAgenciesInvolvedEntityRecord r) {
			RCSafeguardingAgenciesInvolvedRecord res = new RCSafeguardingAgenciesInvolvedRecord(null);
			res.ssENSafeguardingAgenciesInvolved = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSafeguardingAgenciesInvolved.ChangedAttributes = value;
			}
			get {
				return ssENSafeguardingAgenciesInvolved.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSafeguardingAgenciesInvolvedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSafeguardingAgenciesInvolved = new ENSafeguardingAgenciesInvolvedEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(6, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSafeguardingAgenciesInvolved.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSafeguardingAgenciesInvolved.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSafeguardingAgenciesInvolved.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSafeguardingAgenciesInvolved.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSafeguardingAgenciesInvolvedRecord r) {
			this = r;
		}


		public static bool operator == (RCSafeguardingAgenciesInvolvedRecord a, RCSafeguardingAgenciesInvolvedRecord b) {
			if (a.ssENSafeguardingAgenciesInvolved != b.ssENSafeguardingAgenciesInvolved) return false;
			return true;
		}

		public static bool operator != (RCSafeguardingAgenciesInvolvedRecord a, RCSafeguardingAgenciesInvolvedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSafeguardingAgenciesInvolvedRecord)) return false;
			return (this == (RCSafeguardingAgenciesInvolvedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSafeguardingAgenciesInvolved.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSafeguardingAgenciesInvolvedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSafeguardingAgenciesInvolved = new ENSafeguardingAgenciesInvolvedEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSafeguardingAgenciesInvolved = (ENSafeguardingAgenciesInvolvedEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSafeguardingAgenciesInvolved.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSafeguardingAgenciesInvolved.InternalRecursiveSave();
		}


		public RCSafeguardingAgenciesInvolvedRecord Duplicate() {
			RCSafeguardingAgenciesInvolvedRecord t;
			t.ssENSafeguardingAgenciesInvolved = (ENSafeguardingAgenciesInvolvedEntityRecord) this.ssENSafeguardingAgenciesInvolved.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSafeguardingAgenciesInvolved.ToXml(this, recordElem, "SafeguardingAgenciesInvolved", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "safeguardingagenciesinvolved") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingAgenciesInvolved")) variable.Value = ssENSafeguardingAgenciesInvolved; else variable.Optimized = true;
				variable.SetFieldName("safeguardingagenciesinvolved");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSafeguardingAgenciesInvolved.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSafeguardingAgenciesInvolved.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSafeguardingAgenciesInvolved) {
				return ssENSafeguardingAgenciesInvolved;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSafeguardingAgenciesInvolved.FillFromOther((IRecord) other.AttributeGet(IdSafeguardingAgenciesInvolved));
		}
	} // RCSafeguardingAgenciesInvolvedRecord
	/// <summary>
	/// RecordList type <code>RLSafeguardingAgenciesInvolvedRecordList</code> that represents a record list
	///  of <code>SafeguardingAgenciesInvolved</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingAgenciesInvolvedRecordList: GenericRecordList<RCSafeguardingAgenciesInvolvedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSafeguardingAgenciesInvolvedRecord GetElementDefaultValue() {
			return new RCSafeguardingAgenciesInvolvedRecord("");
		}

		public T[] ToArray<T>(Func<RCSafeguardingAgenciesInvolvedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingAgenciesInvolvedRecordList recordlist, Func<RCSafeguardingAgenciesInvolvedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingAgenciesInvolvedRecordList ToList<T>(T[] array, Func <T, RCSafeguardingAgenciesInvolvedRecord> converter) {
			RLSafeguardingAgenciesInvolvedRecordList result = new RLSafeguardingAgenciesInvolvedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingAgenciesInvolvedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingAgenciesInvolvedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingAgenciesInvolvedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingAgenciesInvolvedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(6, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSafeguardingAgenciesInvolvedRecord> NewList() {
			return new RLSafeguardingAgenciesInvolvedRecordList();
		}


	} // RLSafeguardingAgenciesInvolvedRecordList

	/// <summary>
	/// RecordList type <code>RLSafeguardingAgenciesInvolvedList</code> that represents a record list of
	///  <code>Text, Text, Text, Integer, SafeguardingIssueIdentifier, SafeguardingAgencyIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLSafeguardingAgenciesInvolvedList: GenericRecordList<ENSafeguardingAgenciesInvolvedEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSafeguardingAgenciesInvolvedEntityRecord GetElementDefaultValue() {
			return new ENSafeguardingAgenciesInvolvedEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSafeguardingAgenciesInvolvedEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSafeguardingAgenciesInvolvedList recordlist, Func<ENSafeguardingAgenciesInvolvedEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSafeguardingAgenciesInvolvedList ToList<T>(T[] array, Func <T, ENSafeguardingAgenciesInvolvedEntityRecord> converter) {
			RLSafeguardingAgenciesInvolvedList result = new RLSafeguardingAgenciesInvolvedList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSafeguardingAgenciesInvolvedList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingAgenciesInvolvedList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSafeguardingAgenciesInvolvedList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSafeguardingAgenciesInvolvedList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSafeguardingAgenciesInvolvedEntityRecord> NewList() {
			return new RLSafeguardingAgenciesInvolvedList();
		}


	} // RLSafeguardingAgenciesInvolvedList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateSafeguardingAgenciesInvolved
		/// </summary>

		public static void CreateSafeguardingAgenciesInvolved(HeContext heContext, RCSafeguardingAgenciesInvolvedRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingAgenciesInvolvedEntity.eSpaceId;
				ENSafeguardingAgenciesInvolvedEntityRecord ssENSafeguardingAgenciesInvolved = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENSafeguardingAgenciesInvolvedEntity.LocalViewName(null, null) + " (" +
					 " [SAFEGUARDINGISSUE]" +
					 ", [SAFEGUARDINGAGENCY]" +
					 ", [OTHERAGENCY]" +
					 ", [CONTACTNAME]" +
					 ", [CONTACTNUMBER]" +
					 " ) VALUES (" +
					 " @ssSafeguardingIssue" +
					 ", @ssSafeguardingAgency" +
					 ", @ssOtherAgency" +
					 ", @ssContactName" +
					 ", @ssContactNumber" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENSafeguardingAgenciesInvolved.ssSafeguardingIssue==0)) {
						insertSqlCmd.CreateParameter("@ssSafeguardingIssue", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSafeguardingIssue", DbType.Int32, ssENSafeguardingAgenciesInvolved.ssSafeguardingIssue);
					}
					if ((ssENSafeguardingAgenciesInvolved.ssSafeguardingAgency== "")) {
						insertSqlCmd.CreateParameter("@ssSafeguardingAgency", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSafeguardingAgency", DbType.String, ssENSafeguardingAgenciesInvolved.ssSafeguardingAgency);
					}
					insertSqlCmd.CreateParameter("@ssOtherAgency", DbType.String, ssENSafeguardingAgenciesInvolved.ssOtherAgency);
					insertSqlCmd.CreateParameter("@ssContactName", DbType.String, ssENSafeguardingAgenciesInvolved.ssContactName);
					insertSqlCmd.CreateParameter("@ssContactNumber", DbType.String, ssENSafeguardingAgenciesInvolved.ssContactNumber);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateSafeguardingAgenciesInvolved", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateSafeguardingAgenciesInvolved
		/// </summary>

		public static void CreateOrUpdateSafeguardingAgenciesInvolved(HeContext heContext, BitArray usedFields, RCSafeguardingAgenciesInvolvedRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingAgenciesInvolvedEntity.eSpaceId;
				ENSafeguardingAgenciesInvolvedEntityRecord ssENSafeguardingAgenciesInvolved = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(6, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSafeguardingAgenciesInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGISSUE] = @ssSafeguardingIssue"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGAGENCY] = @ssSafeguardingAgency"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OTHERAGENCY] = @ssOtherAgency"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CONTACTNAME] = @ssContactName"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CONTACTNUMBER] = @ssContactNumber"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSafeguardingAgenciesInvolvedssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSafeguardingAgenciesInvolved.ssSafeguardingIssue==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingIssue", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingIssue", DbType.Int32, ssENSafeguardingAgenciesInvolved.ssSafeguardingIssue);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSafeguardingAgenciesInvolved.ssSafeguardingAgency== "")) {
							sqlCmd.CreateParameter("@ssSafeguardingAgency", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingAgency", DbType.String, ssENSafeguardingAgenciesInvolved.ssSafeguardingAgency);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssOtherAgency", DbType.String, ssENSafeguardingAgenciesInvolved.ssOtherAgency);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssContactName", DbType.String, ssENSafeguardingAgenciesInvolved.ssContactName);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssContactNumber", DbType.String, ssENSafeguardingAgenciesInvolved.ssContactNumber);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[OTHERAGENCY] = [OTHERAGENCY]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSafeguardingAgenciesInvolvedssId", DbType.Int32, ssENSafeguardingAgenciesInvolved.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateSafeguardingAgenciesInvolved (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENSafeguardingAgenciesInvolvedEntity.LocalViewName(null, null) + " (" +
						 " [SAFEGUARDINGISSUE]" +
						 ", [SAFEGUARDINGAGENCY]" +
						 ", [OTHERAGENCY]" +
						 ", [CONTACTNAME]" +
						 ", [CONTACTNUMBER]" +
						 " ) VALUES (" +
						 " @ssSafeguardingIssue" +
						 ", @ssSafeguardingAgency" +
						 ", @ssOtherAgency" +
						 ", @ssContactName" +
						 ", @ssContactNumber" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENSafeguardingAgenciesInvolved.ssSafeguardingIssue==0)) {
							insertSqlCmd.CreateParameter("@ssSafeguardingIssue", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSafeguardingIssue", DbType.Int32, ssENSafeguardingAgenciesInvolved.ssSafeguardingIssue);
						}
						if ((ssENSafeguardingAgenciesInvolved.ssSafeguardingAgency== "")) {
							insertSqlCmd.CreateParameter("@ssSafeguardingAgency", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSafeguardingAgency", DbType.String, ssENSafeguardingAgenciesInvolved.ssSafeguardingAgency);
						}
						insertSqlCmd.CreateParameter("@ssOtherAgency", DbType.String, ssENSafeguardingAgenciesInvolved.ssOtherAgency);
						insertSqlCmd.CreateParameter("@ssContactName", DbType.String, ssENSafeguardingAgenciesInvolved.ssContactName);
						insertSqlCmd.CreateParameter("@ssContactNumber", DbType.String, ssENSafeguardingAgenciesInvolved.ssContactNumber);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateSafeguardingAgenciesInvolved", true), typeof(int));
					} else {
						outParamId = ssENSafeguardingAgenciesInvolved.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteSafeguardingAgenciesInvolved
		/// </summary>

		public static void DeleteSafeguardingAgenciesInvolved(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingAgenciesInvolvedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENSafeguardingAgenciesInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteSafeguardingAgenciesInvolved", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSafeguardingAgenciesInvolved
		/// </summary>

		public static void GetSafeguardingAgenciesInvolved(HeContext heContext, int inParamId, out RCSafeguardingAgenciesInvolvedRecord outParamRecord) {
			outParamRecord = new RCSafeguardingAgenciesInvolvedRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingAgenciesInvolvedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [SAFEGUARDINGISSUE]" +
					 ", [SAFEGUARDINGAGENCY]" +
					 ", [OTHERAGENCY]" +
					 ", [CONTACTNAME]" +
					 ", [CONTACTNUMBER]" +
					 " FROM " + ENSafeguardingAgenciesInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSafeguardingAgenciesInvolved", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(6, false)
							}
							;
						} else
						throw new DataBaseException(ENSafeguardingAgenciesInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSafeguardingAgenciesInvolvedForUpdate
		/// </summary>

		public static void GetSafeguardingAgenciesInvolvedForUpdate(HeContext heContext, int inParamId, out RCSafeguardingAgenciesInvolvedRecord outParamRecord) {
			outParamRecord = new RCSafeguardingAgenciesInvolvedRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingAgenciesInvolvedEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [SAFEGUARDINGISSUE]" +
					 ", [SAFEGUARDINGAGENCY]" +
					 ", [OTHERAGENCY]" +
					 ", [CONTACTNAME]" +
					 ", [CONTACTNUMBER]" +
					 "FROM " + ENSafeguardingAgenciesInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSafeguardingAgenciesInvolvedForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(6, false)
							}
							;
						} else
						throw new DataBaseException(ENSafeguardingAgenciesInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateSafeguardingAgenciesInvolved
		/// </summary>

		public static void UpdateSafeguardingAgenciesInvolved(HeContext heContext, BitArray usedFields, RCSafeguardingAgenciesInvolvedRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSafeguardingAgenciesInvolvedEntity.eSpaceId;
				ENSafeguardingAgenciesInvolvedEntityRecord ssENSafeguardingAgenciesInvolved = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(6, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSafeguardingAgenciesInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGISSUE] = @ssSafeguardingIssue"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDINGAGENCY] = @ssSafeguardingAgency"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OTHERAGENCY] = @ssOtherAgency"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CONTACTNAME] = @ssContactName"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CONTACTNUMBER] = @ssContactNumber"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSafeguardingAgenciesInvolvedssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSafeguardingAgenciesInvolved.ssSafeguardingIssue==0)) {
							sqlCmd.CreateParameter("@ssSafeguardingIssue", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingIssue", DbType.Int32, ssENSafeguardingAgenciesInvolved.ssSafeguardingIssue);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSafeguardingAgenciesInvolved.ssSafeguardingAgency== "")) {
							sqlCmd.CreateParameter("@ssSafeguardingAgency", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSafeguardingAgency", DbType.String, ssENSafeguardingAgenciesInvolved.ssSafeguardingAgency);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssOtherAgency", DbType.String, ssENSafeguardingAgenciesInvolved.ssOtherAgency);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssContactName", DbType.String, ssENSafeguardingAgenciesInvolved.ssContactName);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssContactNumber", DbType.String, ssENSafeguardingAgenciesInvolved.ssContactNumber);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[OTHERAGENCY] = [OTHERAGENCY]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSafeguardingAgenciesInvolvedssId", DbType.Int32, ssENSafeguardingAgenciesInvolved.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateSafeguardingAgenciesInvolved", true) <= 0)
					throw new DataBaseException(ENSafeguardingAgenciesInvolvedEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENSafeguardingAgenciesInvolved.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("SafeguardingAgenciesInvolved")]
	public class WORCSafeguardingAgenciesInvolvedRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("SafeguardingIssue")]
		public int varWSSafeguardingIssue;

		[System.Xml.Serialization.XmlElement("SafeguardingAgency")]
		public string varWSSafeguardingAgency;

		[System.Xml.Serialization.XmlElement("OtherAgency")]
		public string varWSOtherAgency;

		[System.Xml.Serialization.XmlElement("ContactName")]
		public string varWSContactName;

		[System.Xml.Serialization.XmlElement("ContactNumber")]
		public string varWSContactNumber;

		public WORCSafeguardingAgenciesInvolvedRecord() {
			varWSId = (int) 0;
			varWSSafeguardingIssue = (int) 0;
			varWSSafeguardingAgency = (string) "";
			varWSOtherAgency = (string) "";
			varWSContactName = (string) "";
			varWSContactNumber = (string) "";
		}

		public WORCSafeguardingAgenciesInvolvedRecord(ENSafeguardingAgenciesInvolvedEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSSafeguardingIssue = (int) r.ssSafeguardingIssue;
			varWSSafeguardingAgency = BaseAppUtils.RemoveControlChars(r.ssSafeguardingAgency);
			varWSOtherAgency = BaseAppUtils.RemoveControlChars(r.ssOtherAgency);
			varWSContactName = BaseAppUtils.RemoveControlChars(r.ssContactName);
			varWSContactNumber = BaseAppUtils.RemoveControlChars(r.ssContactNumber);
		}

		public static RLSafeguardingAgenciesInvolvedList ToRecordList(WORCSafeguardingAgenciesInvolvedRecord[] array) {
			RLSafeguardingAgenciesInvolvedList rl = new RLSafeguardingAgenciesInvolvedList();
			if (array != null) {
				foreach(WORCSafeguardingAgenciesInvolvedRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSafeguardingAgenciesInvolvedRecord[] FromRecordList(RLSafeguardingAgenciesInvolvedList rl) {
			WORCSafeguardingAgenciesInvolvedRecord[] array = new WORCSafeguardingAgenciesInvolvedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSafeguardingAgenciesInvolvedRecord {
		public static implicit operator WORCSafeguardingAgenciesInvolvedRecord(RCSafeguardingAgenciesInvolvedRecord r) {
			return new WORCSafeguardingAgenciesInvolvedRecord(r.ssENSafeguardingAgenciesInvolved);
		}

		public static implicit operator RCSafeguardingAgenciesInvolvedRecord(WORCSafeguardingAgenciesInvolvedRecord w) {
			RCSafeguardingAgenciesInvolvedRecord r = new RCSafeguardingAgenciesInvolvedRecord("");
			if (w != null) {
				r.ssENSafeguardingAgenciesInvolved = w;
			}
			return r;
		}

	}

	partial struct ENSafeguardingAgenciesInvolvedEntityRecord {
		public static implicit operator WORCSafeguardingAgenciesInvolvedRecord(ENSafeguardingAgenciesInvolvedEntityRecord r) {
			return new WORCSafeguardingAgenciesInvolvedRecord(r);
		}

		public static implicit operator ENSafeguardingAgenciesInvolvedEntityRecord(WORCSafeguardingAgenciesInvolvedRecord w) {
			ENSafeguardingAgenciesInvolvedEntityRecord r = new ENSafeguardingAgenciesInvolvedEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssSafeguardingIssue = (int) w.varWSSafeguardingIssue;
				r.ssSafeguardingAgency = (string) w.varWSSafeguardingAgency;
				r.ssOtherAgency = ((string) w.varWSOtherAgency ?? "");
				r.ssContactName = ((string) w.varWSContactName ?? "");
				r.ssContactNumber = ((string) w.varWSContactNumber ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSafeguardingAgenciesInvolvedRecordList {
		public WORCSafeguardingAgenciesInvolvedRecord[] Array;


		public WORLSafeguardingAgenciesInvolvedRecordList(WORCSafeguardingAgenciesInvolvedRecord[] r) {
			if (r == null)
			Array = new WORCSafeguardingAgenciesInvolvedRecord[0];
			else
			Array = r;
		}
		public WORLSafeguardingAgenciesInvolvedRecordList() {
			Array = new WORCSafeguardingAgenciesInvolvedRecord[0];
		}

		public WORLSafeguardingAgenciesInvolvedRecordList(RLSafeguardingAgenciesInvolvedRecordList rl) {
			rl=(RLSafeguardingAgenciesInvolvedRecordList) rl.Duplicate();
			Array = new WORCSafeguardingAgenciesInvolvedRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSafeguardingAgenciesInvolvedRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSafeguardingAgenciesInvolvedRecordList {
		public static implicit operator RLSafeguardingAgenciesInvolvedRecordList(WORCSafeguardingAgenciesInvolvedRecord[] array) {
			RLSafeguardingAgenciesInvolvedRecordList rl = new RLSafeguardingAgenciesInvolvedRecordList();
			if (array != null) {
				foreach(WORCSafeguardingAgenciesInvolvedRecord val in array) {
					rl.Append((RCSafeguardingAgenciesInvolvedRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSafeguardingAgenciesInvolvedRecord[](RLSafeguardingAgenciesInvolvedRecordList rl) {
			WORCSafeguardingAgenciesInvolvedRecord[] array = new WORCSafeguardingAgenciesInvolvedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSafeguardingAgenciesInvolvedRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSafeguardingAgenciesInvolvedRecordList {
		public static implicit operator RLSafeguardingAgenciesInvolvedRecordList(WORLSafeguardingAgenciesInvolvedRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSafeguardingAgenciesInvolvedRecordList(RLSafeguardingAgenciesInvolvedRecordList rl) {
			return new WORLSafeguardingAgenciesInvolvedRecordList(rl);
		}
		public static implicit operator WORCSafeguardingAgenciesInvolvedRecord[](WORLSafeguardingAgenciesInvolvedRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSafeguardingAgenciesInvolvedRecordList(WORCSafeguardingAgenciesInvolvedRecord[] array) {
			return new WORLSafeguardingAgenciesInvolvedRecordList(array);
		}
	}
}

