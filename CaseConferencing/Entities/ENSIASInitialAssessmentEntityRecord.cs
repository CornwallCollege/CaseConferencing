/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENSIASInitialAssessmentEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENSIASInitialAssessmentEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENSIASInitialAssessmentEntity.eSpaceId;
	} // ENSIASInitialAssessmentEntity

	/// <summary>
	/// Entity <code>ENSIASInitialAssessmentEntityRecord</code> that represents the Service Studio entity
	///  <code>SIASInitialAssessment</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("SIASInitialAssessment", "LYMPwBpUik+yA7s0GrE5Yw", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_SIASInitialAssessment", "")]
	[Serializable()]
	public partial struct ENSIASInitialAssessmentEntityRecord: ISerializable, ITypedRecord<ENSIASInitialAssessmentEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*epSQyOB1CE2J83DXx4NFsw");
		private static readonly GlobalObjectKey IdStudentId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*S3N+A2GYbUeJBpKcEwSPXg");
		private static readonly GlobalObjectKey IdNumeracyInitialLevel = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*UZg43sM+oEGliNjHALVNpg");
		private static readonly GlobalObjectKey IdNumeracyLevel = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*nqI72S2KvEOX51uaj9NAjg");
		private static readonly GlobalObjectKey IdNumeracyLevelEnrolement = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*RbHw1SJ510+OFsK13jMZTA");
		private static readonly GlobalObjectKey IdLiteracyInitialLevel = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*5q8uiLk0akG4V7THlyj6CA");
		private static readonly GlobalObjectKey IdLiteracyLevel = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*fk281i7T0km8PO5ctFFfsw");
		private static readonly GlobalObjectKey IdLiteracyInitialLevelEnroleme = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*EqxIFc4WYkex85hX0gSzcw");
		private static readonly GlobalObjectKey IdITInitialLevel = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*CL1iChY0ok+av6owWqEjfg");
		private static readonly GlobalObjectKey IdITLevel = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*HtMlDm1AKkeNN5ihTWEzVg");
		private static readonly GlobalObjectKey IdITLevelEnrolement = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*sLLxIE6ER0OczzRy+IT1+Q");
		private static readonly GlobalObjectKey IdESOLInitialLevel = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*f4spOsZ2G0CCP5AyzATSqA");
		private static readonly GlobalObjectKey IdESOLLevel = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*HeIqz_3gDk6fmycYEX685g");
		private static readonly GlobalObjectKey IdESOLLevelEnrolement = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*prAksrJX10WsGRO6bs2wAA");
		private static readonly GlobalObjectKey IdLearningStyleInitial = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*4MBHEpJTDkSFJO9o+YL0EA");
		private static readonly GlobalObjectKey IdLearningStyle = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*HyyhiZ5skUupqcK_PiPq8g");
		private static readonly GlobalObjectKey IdNotes = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*WwkQUytdQkyzDktCOhQ7mw");
		private static readonly GlobalObjectKey IdLastUpdateOn = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*WkeWH8EWJk2JCqj7C0ywRA");
		private static readonly GlobalObjectKey IdLastUpdateBy = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*UnXRh6xdvk2I56_ZgI+9rA");
		private static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*USuVB4t84Eym14JzGwtM4g");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*gJogBx5eREeekuNE5umR4Q");
		private static readonly GlobalObjectKey IdNumeracySource = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*oN8lo2dRtUKxKRsgEVCOkw");
		private static readonly GlobalObjectKey IdLiteracySource = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*Eh8ABU9Is0uQHsypc2zfrA");
		private static readonly GlobalObjectKey IdESOLSource = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*PIPvqbJKAEGvCiAlTxppBA");
		private static readonly GlobalObjectKey IdITSource = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*oyU66nk63Umlo2IZ+vQ1VA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(25, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentId")]
		private string _ssStudentId;
		public string ssStudentId {
			get {
				return _ssStudentId;
			}
			set {
				if ((_ssStudentId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NUMERACYINITIALLEVEL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("NumeracyInitialLevel")]
		private string _ssNumeracyInitialLevel;
		public string ssNumeracyInitialLevel {
			get {
				return _ssNumeracyInitialLevel;
			}
			set {
				if ((_ssNumeracyInitialLevel!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssNumeracyInitialLevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NUMERACYLEVEL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("NumeracyLevel")]
		private string _ssNumeracyLevel;
		public string ssNumeracyLevel {
			get {
				return _ssNumeracyLevel;
			}
			set {
				if ((_ssNumeracyLevel!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssNumeracyLevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NUMERACYLEVELENROLEMENT", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("NumeracyLevelEnrolement")]
		private string _ssNumeracyLevelEnrolement;
		public string ssNumeracyLevelEnrolement {
			get {
				return _ssNumeracyLevelEnrolement;
			}
			set {
				if ((_ssNumeracyLevelEnrolement!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssNumeracyLevelEnrolement = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LITERACYINITIALLEVEL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LiteracyInitialLevel")]
		private string _ssLiteracyInitialLevel;
		public string ssLiteracyInitialLevel {
			get {
				return _ssLiteracyInitialLevel;
			}
			set {
				if ((_ssLiteracyInitialLevel!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssLiteracyInitialLevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LITERACYLEVEL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LiteracyLevel")]
		private string _ssLiteracyLevel;
		public string ssLiteracyLevel {
			get {
				return _ssLiteracyLevel;
			}
			set {
				if ((_ssLiteracyLevel!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssLiteracyLevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LITERACYINITIALLEVELENROLEME", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LiteracyInitialLevelEnroleme")]
		private string _ssLiteracyInitialLevelEnroleme;
		public string ssLiteracyInitialLevelEnroleme {
			get {
				return _ssLiteracyInitialLevelEnroleme;
			}
			set {
				if ((_ssLiteracyInitialLevelEnroleme!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssLiteracyInitialLevelEnroleme = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ITINITIALLEVEL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ITInitialLevel")]
		private string _ssITInitialLevel;
		public string ssITInitialLevel {
			get {
				return _ssITInitialLevel;
			}
			set {
				if ((_ssITInitialLevel!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssITInitialLevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ITLEVEL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ITLevel")]
		private string _ssITLevel;
		public string ssITLevel {
			get {
				return _ssITLevel;
			}
			set {
				if ((_ssITLevel!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssITLevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ITLEVELENROLEMENT", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ITLevelEnrolement")]
		private string _ssITLevelEnrolement;
		public string ssITLevelEnrolement {
			get {
				return _ssITLevelEnrolement;
			}
			set {
				if ((_ssITLevelEnrolement!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssITLevelEnrolement = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ESOLINITIALLEVEL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ESOLInitialLevel")]
		private string _ssESOLInitialLevel;
		public string ssESOLInitialLevel {
			get {
				return _ssESOLInitialLevel;
			}
			set {
				if ((_ssESOLInitialLevel!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssESOLInitialLevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ESOLLEVEL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ESOLLevel")]
		private string _ssESOLLevel;
		public string ssESOLLevel {
			get {
				return _ssESOLLevel;
			}
			set {
				if ((_ssESOLLevel!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssESOLLevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ESOLLEVELENROLEMENT", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ESOLLevelEnrolement")]
		private string _ssESOLLevelEnrolement;
		public string ssESOLLevelEnrolement {
			get {
				return _ssESOLLevelEnrolement;
			}
			set {
				if ((_ssESOLLevelEnrolement!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssESOLLevelEnrolement = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNINGSTYLEINITIAL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LearningStyleInitial")]
		private string _ssLearningStyleInitial;
		public string ssLearningStyleInitial {
			get {
				return _ssLearningStyleInitial;
			}
			set {
				if ((_ssLearningStyleInitial!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssLearningStyleInitial = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNINGSTYLE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LearningStyle")]
		private string _ssLearningStyle;
		public string ssLearningStyle {
			get {
				return _ssLearningStyle;
			}
			set {
				if ((_ssLearningStyle!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssLearningStyle = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NOTES", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Notes")]
		private string _ssNotes;
		public string ssNotes {
			get {
				return _ssNotes;
			}
			set {
				if ((_ssNotes!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssNotes = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastUpdateOn")]
		private DateTime _ssLastUpdateOn;
		public DateTime ssLastUpdateOn {
			get {
				return _ssLastUpdateOn;
			}
			set {
				if ((_ssLastUpdateOn!=value) || OptimizedAttributes[17]) {
					ChangedAttributes[17] = true;
					_ssLastUpdateOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LastUpdateBy")]
		private int _ssLastUpdateBy;
		public int ssLastUpdateBy {
			get {
				return _ssLastUpdateBy;
			}
			set {
				if ((_ssLastUpdateBy!=value) || OptimizedAttributes[18]) {
					ChangedAttributes[18] = true;
					_ssLastUpdateBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedOn")]
		private DateTime _ssCreatedOn;
		public DateTime ssCreatedOn {
			get {
				return _ssCreatedOn;
			}
			set {
				if ((_ssCreatedOn!=value) || OptimizedAttributes[19]) {
					ChangedAttributes[19] = true;
					_ssCreatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[20]) {
					ChangedAttributes[20] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NUMERACYSOURCE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("NumeracySource")]
		private string _ssNumeracySource;
		public string ssNumeracySource {
			get {
				return _ssNumeracySource;
			}
			set {
				if ((_ssNumeracySource!=value) || OptimizedAttributes[21]) {
					ChangedAttributes[21] = true;
					_ssNumeracySource = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LITERACYSOURCE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("LiteracySource")]
		private string _ssLiteracySource;
		public string ssLiteracySource {
			get {
				return _ssLiteracySource;
			}
			set {
				if ((_ssLiteracySource!=value) || OptimizedAttributes[22]) {
					ChangedAttributes[22] = true;
					_ssLiteracySource = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ESOLSOURCE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("ESOLSource")]
		private string _ssESOLSource;
		public string ssESOLSource {
			get {
				return _ssESOLSource;
			}
			set {
				if ((_ssESOLSource!=value) || OptimizedAttributes[23]) {
					ChangedAttributes[23] = true;
					_ssESOLSource = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ITSOURCE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("ITSource")]
		private string _ssITSource;
		public string ssITSource {
			get {
				return _ssITSource;
			}
			set {
				if ((_ssITSource!=value) || OptimizedAttributes[24]) {
					ChangedAttributes[24] = true;
					_ssITSource = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENSIASInitialAssessmentEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(25, true);
			OptimizedAttributes = new BitArray(25, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssNumeracyInitialLevel = "";
			_ssNumeracyLevel = "";
			_ssNumeracyLevelEnrolement = "";
			_ssLiteracyInitialLevel = "";
			_ssLiteracyLevel = "";
			_ssLiteracyInitialLevelEnroleme = "";
			_ssITInitialLevel = "";
			_ssITLevel = "";
			_ssITLevelEnrolement = "";
			_ssESOLInitialLevel = "";
			_ssESOLLevel = "";
			_ssESOLLevelEnrolement = "";
			_ssLearningStyleInitial = "";
			_ssLearningStyle = "";
			_ssNotes = "";
			_ssLastUpdateOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastUpdateBy = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssNumeracySource = "";
			_ssLiteracySource = "";
			_ssESOLSource = "";
			_ssITSource = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "SIASInitialAssessment.Id", 0);
			ssStudentId = r.ReadTextEntityReference(index++, "SIASInitialAssessment.StudentId", "");
			ssNumeracyInitialLevel = r.ReadTextEntityReference(index++, "SIASInitialAssessment.NumeracyInitialLevel", "");
			ssNumeracyLevel = r.ReadTextEntityReference(index++, "SIASInitialAssessment.NumeracyLevel", "");
			ssNumeracyLevelEnrolement = r.ReadTextEntityReference(index++, "SIASInitialAssessment.NumeracyLevelEnrolement", "");
			ssLiteracyInitialLevel = r.ReadTextEntityReference(index++, "SIASInitialAssessment.LiteracyInitialLevel", "");
			ssLiteracyLevel = r.ReadTextEntityReference(index++, "SIASInitialAssessment.LiteracyLevel", "");
			ssLiteracyInitialLevelEnroleme = r.ReadTextEntityReference(index++, "SIASInitialAssessment.LiteracyInitialLevelEnroleme", "");
			ssITInitialLevel = r.ReadTextEntityReference(index++, "SIASInitialAssessment.ITInitialLevel", "");
			ssITLevel = r.ReadTextEntityReference(index++, "SIASInitialAssessment.ITLevel", "");
			ssITLevelEnrolement = r.ReadTextEntityReference(index++, "SIASInitialAssessment.ITLevelEnrolement", "");
			ssESOLInitialLevel = r.ReadTextEntityReference(index++, "SIASInitialAssessment.ESOLInitialLevel", "");
			ssESOLLevel = r.ReadTextEntityReference(index++, "SIASInitialAssessment.ESOLLevel", "");
			ssESOLLevelEnrolement = r.ReadTextEntityReference(index++, "SIASInitialAssessment.ESOLLevelEnrolement", "");
			ssLearningStyleInitial = r.ReadTextEntityReference(index++, "SIASInitialAssessment.LearningStyleInitial", "");
			ssLearningStyle = r.ReadTextEntityReference(index++, "SIASInitialAssessment.LearningStyle", "");
			ssNotes = r.ReadText(index++, "SIASInitialAssessment.Notes", "");
			ssLastUpdateOn = r.ReadDateTime(index++, "SIASInitialAssessment.LastUpdateOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLastUpdateBy = r.ReadEntityReference(index++, "SIASInitialAssessment.LastUpdateBy", 0);
			ssCreatedOn = r.ReadDateTime(index++, "SIASInitialAssessment.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "SIASInitialAssessment.CreatedBy", 0);
			ssNumeracySource = r.ReadText(index++, "SIASInitialAssessment.NumeracySource", "");
			ssLiteracySource = r.ReadText(index++, "SIASInitialAssessment.LiteracySource", "");
			ssESOLSource = r.ReadText(index++, "SIASInitialAssessment.ESOLSource", "");
			ssITSource = r.ReadText(index++, "SIASInitialAssessment.ITSource", "");
			ChangedAttributes = new BitArray(25, false);
			OptimizedAttributes = new BitArray(25, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENSIASInitialAssessmentEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENSIASInitialAssessmentEntityRecord a, ENSIASInitialAssessmentEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentId != b.ssStudentId) return false;
			if (a.ssNumeracyInitialLevel != b.ssNumeracyInitialLevel) return false;
			if (a.ssNumeracyLevel != b.ssNumeracyLevel) return false;
			if (a.ssNumeracyLevelEnrolement != b.ssNumeracyLevelEnrolement) return false;
			if (a.ssLiteracyInitialLevel != b.ssLiteracyInitialLevel) return false;
			if (a.ssLiteracyLevel != b.ssLiteracyLevel) return false;
			if (a.ssLiteracyInitialLevelEnroleme != b.ssLiteracyInitialLevelEnroleme) return false;
			if (a.ssITInitialLevel != b.ssITInitialLevel) return false;
			if (a.ssITLevel != b.ssITLevel) return false;
			if (a.ssITLevelEnrolement != b.ssITLevelEnrolement) return false;
			if (a.ssESOLInitialLevel != b.ssESOLInitialLevel) return false;
			if (a.ssESOLLevel != b.ssESOLLevel) return false;
			if (a.ssESOLLevelEnrolement != b.ssESOLLevelEnrolement) return false;
			if (a.ssLearningStyleInitial != b.ssLearningStyleInitial) return false;
			if (a.ssLearningStyle != b.ssLearningStyle) return false;
			if (a.ssNotes != b.ssNotes) return false;
			if (a.ssLastUpdateOn != b.ssLastUpdateOn) return false;
			if (a.ssLastUpdateBy != b.ssLastUpdateBy) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssNumeracySource != b.ssNumeracySource) return false;
			if (a.ssLiteracySource != b.ssLiteracySource) return false;
			if (a.ssESOLSource != b.ssESOLSource) return false;
			if (a.ssITSource != b.ssITSource) return false;
			return true;
		}

		public static bool operator != (ENSIASInitialAssessmentEntityRecord a, ENSIASInitialAssessmentEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENSIASInitialAssessmentEntityRecord)) return false;
			return (this == (ENSIASInitialAssessmentEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentId.GetHashCode()
				^ ssNumeracyInitialLevel.GetHashCode()
				^ ssNumeracyLevel.GetHashCode()
				^ ssNumeracyLevelEnrolement.GetHashCode()
				^ ssLiteracyInitialLevel.GetHashCode()
				^ ssLiteracyLevel.GetHashCode()
				^ ssLiteracyInitialLevelEnroleme.GetHashCode()
				^ ssITInitialLevel.GetHashCode()
				^ ssITLevel.GetHashCode()
				^ ssITLevelEnrolement.GetHashCode()
				^ ssESOLInitialLevel.GetHashCode()
				^ ssESOLLevel.GetHashCode()
				^ ssESOLLevelEnrolement.GetHashCode()
				^ ssLearningStyleInitial.GetHashCode()
				^ ssLearningStyle.GetHashCode()
				^ ssNotes.GetHashCode()
				^ ssLastUpdateOn.GetHashCode()
				^ ssLastUpdateBy.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssNumeracySource.GetHashCode()
				^ ssLiteracySource.GetHashCode()
				^ ssESOLSource.GetHashCode()
				^ ssITSource.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENSIASInitialAssessmentEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(25, true);
			OptimizedAttributes = new BitArray(25, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssNumeracyInitialLevel = "";
			_ssNumeracyLevel = "";
			_ssNumeracyLevelEnrolement = "";
			_ssLiteracyInitialLevel = "";
			_ssLiteracyLevel = "";
			_ssLiteracyInitialLevelEnroleme = "";
			_ssITInitialLevel = "";
			_ssITLevel = "";
			_ssITLevelEnrolement = "";
			_ssESOLInitialLevel = "";
			_ssESOLLevel = "";
			_ssESOLLevelEnrolement = "";
			_ssLearningStyleInitial = "";
			_ssLearningStyle = "";
			_ssNotes = "";
			_ssLastUpdateOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastUpdateBy = 0;
			_ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssNumeracySource = "";
			_ssLiteracySource = "";
			_ssESOLSource = "";
			_ssITSource = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentId = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssNumeracyInitialLevel = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssNumeracyLevel = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssNumeracyLevelEnrolement = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssLiteracyInitialLevel = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssLiteracyLevel = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssLiteracyInitialLevelEnroleme = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssITInitialLevel = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssITLevel = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssITLevelEnrolement = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssESOLInitialLevel = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssESOLLevel = (string) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssESOLLevelEnrolement = (string) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssLearningStyleInitial = (string) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssLearningStyle = (string) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssNotes = (string) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			_ssLastUpdateOn = (DateTime) info.GetValue(fields[17] .Name, fields[17] .FieldType);
			if (fields[18] .FieldType.IsSerializable)
			_ssLastUpdateBy = (int) info.GetValue(fields[18] .Name, fields[18] .FieldType);
			if (fields[19] .FieldType.IsSerializable)
			_ssCreatedOn = (DateTime) info.GetValue(fields[19] .Name, fields[19] .FieldType);
			if (fields[20] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[20] .Name, fields[20] .FieldType);
			if (fields[21] .FieldType.IsSerializable)
			_ssNumeracySource = (string) info.GetValue(fields[21] .Name, fields[21] .FieldType);
			if (fields[22] .FieldType.IsSerializable)
			_ssLiteracySource = (string) info.GetValue(fields[22] .Name, fields[22] .FieldType);
			if (fields[23] .FieldType.IsSerializable)
			_ssESOLSource = (string) info.GetValue(fields[23] .Name, fields[23] .FieldType);
			if (fields[24] .FieldType.IsSerializable)
			_ssITSource = (string) info.GetValue(fields[24] .Name, fields[24] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENSIASInitialAssessmentEntityRecord Duplicate() {
			ENSIASInitialAssessmentEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentId = this._ssStudentId;
			t._ssNumeracyInitialLevel = this._ssNumeracyInitialLevel;
			t._ssNumeracyLevel = this._ssNumeracyLevel;
			t._ssNumeracyLevelEnrolement = this._ssNumeracyLevelEnrolement;
			t._ssLiteracyInitialLevel = this._ssLiteracyInitialLevel;
			t._ssLiteracyLevel = this._ssLiteracyLevel;
			t._ssLiteracyInitialLevelEnroleme = this._ssLiteracyInitialLevelEnroleme;
			t._ssITInitialLevel = this._ssITInitialLevel;
			t._ssITLevel = this._ssITLevel;
			t._ssITLevelEnrolement = this._ssITLevelEnrolement;
			t._ssESOLInitialLevel = this._ssESOLInitialLevel;
			t._ssESOLLevel = this._ssESOLLevel;
			t._ssESOLLevelEnrolement = this._ssESOLLevelEnrolement;
			t._ssLearningStyleInitial = this._ssLearningStyleInitial;
			t._ssLearningStyle = this._ssLearningStyle;
			t._ssNotes = this._ssNotes;
			t._ssLastUpdateOn = this._ssLastUpdateOn;
			t._ssLastUpdateBy = this._ssLastUpdateBy;
			t._ssCreatedOn = this._ssCreatedOn;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssNumeracySource = this._ssNumeracySource;
			t._ssLiteracySource = this._ssLiteracySource;
			t._ssESOLSource = this._ssESOLSource;
			t._ssITSource = this._ssITSource;
			t.ChangedAttributes = new BitArray(25);
			t.OptimizedAttributes = new BitArray(25);
			for (int i = 0; i < 25; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentId")) VarValue.AppendAttribute(recordElem, "StudentId", ssStudentId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NumeracyInitialLevel")) VarValue.AppendAttribute(recordElem, "NumeracyInitialLevel", ssNumeracyInitialLevel, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "NumeracyInitialLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NumeracyLevel")) VarValue.AppendAttribute(recordElem, "NumeracyLevel", ssNumeracyLevel, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "NumeracyLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NumeracyLevelEnrolement")) VarValue.AppendAttribute(recordElem, "NumeracyLevelEnrolement", ssNumeracyLevelEnrolement, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "NumeracyLevelEnrolement");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LiteracyInitialLevel")) VarValue.AppendAttribute(recordElem, "LiteracyInitialLevel", ssLiteracyInitialLevel, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LiteracyInitialLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LiteracyLevel")) VarValue.AppendAttribute(recordElem, "LiteracyLevel", ssLiteracyLevel, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LiteracyLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LiteracyInitialLevelEnroleme")) VarValue.AppendAttribute(recordElem, "LiteracyInitialLevelEnroleme", ssLiteracyInitialLevelEnroleme, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LiteracyInitialLevelEnroleme");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ITInitialLevel")) VarValue.AppendAttribute(recordElem, "ITInitialLevel", ssITInitialLevel, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ITInitialLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ITLevel")) VarValue.AppendAttribute(recordElem, "ITLevel", ssITLevel, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ITLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ITLevelEnrolement")) VarValue.AppendAttribute(recordElem, "ITLevelEnrolement", ssITLevelEnrolement, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ITLevelEnrolement");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESOLInitialLevel")) VarValue.AppendAttribute(recordElem, "ESOLInitialLevel", ssESOLInitialLevel, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ESOLInitialLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESOLLevel")) VarValue.AppendAttribute(recordElem, "ESOLLevel", ssESOLLevel, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ESOLLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESOLLevelEnrolement")) VarValue.AppendAttribute(recordElem, "ESOLLevelEnrolement", ssESOLLevelEnrolement, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ESOLLevelEnrolement");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearningStyleInitial")) VarValue.AppendAttribute(recordElem, "LearningStyleInitial", ssLearningStyleInitial, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LearningStyleInitial");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearningStyle")) VarValue.AppendAttribute(recordElem, "LearningStyle", ssLearningStyle, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LearningStyle");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Notes")) VarValue.AppendAttribute(recordElem, "Notes", ssNotes, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Notes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdateOn")) VarValue.AppendAttribute(recordElem, "LastUpdateOn", ssLastUpdateOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdateOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdateBy")) VarValue.AppendAttribute(recordElem, "LastUpdateBy", ssLastUpdateBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdateBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NumeracySource")) VarValue.AppendAttribute(recordElem, "NumeracySource", ssNumeracySource, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NumeracySource");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LiteracySource")) VarValue.AppendAttribute(recordElem, "LiteracySource", ssLiteracySource, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LiteracySource");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESOLSource")) VarValue.AppendAttribute(recordElem, "ESOLSource", ssESOLSource, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ESOLSource");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ITSource")) VarValue.AppendAttribute(recordElem, "ITSource", ssITSource, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ITSource");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentId")) variable.Value = ssStudentId; else variable.Optimized = true;
			} else if (head == "numeracyinitiallevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NumeracyInitialLevel")) variable.Value = ssNumeracyInitialLevel; else variable.Optimized = true;
			} else if (head == "numeracylevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NumeracyLevel")) variable.Value = ssNumeracyLevel; else variable.Optimized = true;
			} else if (head == "numeracylevelenrolement") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NumeracyLevelEnrolement")) variable.Value = ssNumeracyLevelEnrolement; else variable.Optimized = true;
			} else if (head == "literacyinitiallevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LiteracyInitialLevel")) variable.Value = ssLiteracyInitialLevel; else variable.Optimized = true;
			} else if (head == "literacylevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LiteracyLevel")) variable.Value = ssLiteracyLevel; else variable.Optimized = true;
			} else if (head == "literacyinitiallevelenroleme") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LiteracyInitialLevelEnroleme")) variable.Value = ssLiteracyInitialLevelEnroleme; else variable.Optimized = true;
			} else if (head == "itinitiallevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ITInitialLevel")) variable.Value = ssITInitialLevel; else variable.Optimized = true;
			} else if (head == "itlevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ITLevel")) variable.Value = ssITLevel; else variable.Optimized = true;
			} else if (head == "itlevelenrolement") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ITLevelEnrolement")) variable.Value = ssITLevelEnrolement; else variable.Optimized = true;
			} else if (head == "esolinitiallevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESOLInitialLevel")) variable.Value = ssESOLInitialLevel; else variable.Optimized = true;
			} else if (head == "esollevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESOLLevel")) variable.Value = ssESOLLevel; else variable.Optimized = true;
			} else if (head == "esollevelenrolement") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESOLLevelEnrolement")) variable.Value = ssESOLLevelEnrolement; else variable.Optimized = true;
			} else if (head == "learningstyleinitial") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningStyleInitial")) variable.Value = ssLearningStyleInitial; else variable.Optimized = true;
			} else if (head == "learningstyle") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningStyle")) variable.Value = ssLearningStyle; else variable.Optimized = true;
			} else if (head == "notes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Notes")) variable.Value = ssNotes; else variable.Optimized = true;
			} else if (head == "lastupdateon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdateOn")) variable.Value = ssLastUpdateOn; else variable.Optimized = true;
			} else if (head == "lastupdateby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdateBy")) variable.Value = ssLastUpdateBy; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "numeracysource") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NumeracySource")) variable.Value = ssNumeracySource; else variable.Optimized = true;
			} else if (head == "literacysource") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LiteracySource")) variable.Value = ssLiteracySource; else variable.Optimized = true;
			} else if (head == "esolsource") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESOLSource")) variable.Value = ssESOLSource; else variable.Optimized = true;
			} else if (head == "itsource") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ITSource")) variable.Value = ssITSource; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdNumeracyInitialLevel)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdNumeracyLevel)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdNumeracyLevelEnrolement)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdLiteracyInitialLevel)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdLiteracyLevel)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdLiteracyInitialLevelEnroleme)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdITInitialLevel)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdITLevel)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdITLevelEnrolement)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdESOLInitialLevel)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdESOLLevel)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdESOLLevelEnrolement)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdLearningStyleInitial)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdLearningStyle)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdNotes)) {
				return ChangedAttributes[16];
			} else if (key.Equals(IdLastUpdateOn)) {
				return ChangedAttributes[17];
			} else if (key.Equals(IdLastUpdateBy)) {
				return ChangedAttributes[18];
			} else if (key.Equals(IdCreatedOn)) {
				return ChangedAttributes[19];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[20];
			} else if (key.Equals(IdNumeracySource)) {
				return ChangedAttributes[21];
			} else if (key.Equals(IdLiteracySource)) {
				return ChangedAttributes[22];
			} else if (key.Equals(IdESOLSource)) {
				return ChangedAttributes[23];
			} else if (key.Equals(IdITSource)) {
				return ChangedAttributes[24];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdNumeracyInitialLevel)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdNumeracyLevel)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdNumeracyLevelEnrolement)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdLiteracyInitialLevel)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdLiteracyLevel)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdLiteracyInitialLevelEnroleme)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdITInitialLevel)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdITLevel)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdITLevelEnrolement)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdESOLInitialLevel)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdESOLLevel)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdESOLLevelEnrolement)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdLearningStyleInitial)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdLearningStyle)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdNotes)) {
				return OptimizedAttributes[16];
			} else if (key.Equals(IdLastUpdateOn)) {
				return OptimizedAttributes[17];
			} else if (key.Equals(IdLastUpdateBy)) {
				return OptimizedAttributes[18];
			} else if (key.Equals(IdCreatedOn)) {
				return OptimizedAttributes[19];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[20];
			} else if (key.Equals(IdNumeracySource)) {
				return OptimizedAttributes[21];
			} else if (key.Equals(IdLiteracySource)) {
				return OptimizedAttributes[22];
			} else if (key.Equals(IdESOLSource)) {
				return OptimizedAttributes[23];
			} else if (key.Equals(IdITSource)) {
				return OptimizedAttributes[24];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentId) {
				return ssStudentId;
			} else if (key == IdNumeracyInitialLevel) {
				return ssNumeracyInitialLevel;
			} else if (key == IdNumeracyLevel) {
				return ssNumeracyLevel;
			} else if (key == IdNumeracyLevelEnrolement) {
				return ssNumeracyLevelEnrolement;
			} else if (key == IdLiteracyInitialLevel) {
				return ssLiteracyInitialLevel;
			} else if (key == IdLiteracyLevel) {
				return ssLiteracyLevel;
			} else if (key == IdLiteracyInitialLevelEnroleme) {
				return ssLiteracyInitialLevelEnroleme;
			} else if (key == IdITInitialLevel) {
				return ssITInitialLevel;
			} else if (key == IdITLevel) {
				return ssITLevel;
			} else if (key == IdITLevelEnrolement) {
				return ssITLevelEnrolement;
			} else if (key == IdESOLInitialLevel) {
				return ssESOLInitialLevel;
			} else if (key == IdESOLLevel) {
				return ssESOLLevel;
			} else if (key == IdESOLLevelEnrolement) {
				return ssESOLLevelEnrolement;
			} else if (key == IdLearningStyleInitial) {
				return ssLearningStyleInitial;
			} else if (key == IdLearningStyle) {
				return ssLearningStyle;
			} else if (key == IdNotes) {
				return ssNotes;
			} else if (key == IdLastUpdateOn) {
				return ssLastUpdateOn;
			} else if (key == IdLastUpdateBy) {
				return ssLastUpdateBy;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdNumeracySource) {
				return ssNumeracySource;
			} else if (key == IdLiteracySource) {
				return ssLiteracySource;
			} else if (key == IdESOLSource) {
				return ssESOLSource;
			} else if (key == IdITSource) {
				return ssITSource;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(25);
			OptimizedAttributes = new BitArray(25);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentId = (string) other.AttributeGet(IdStudentId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentId);
			ssNumeracyInitialLevel = (string) other.AttributeGet(IdNumeracyInitialLevel);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdNumeracyInitialLevel);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdNumeracyInitialLevel);
			ssNumeracyLevel = (string) other.AttributeGet(IdNumeracyLevel);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdNumeracyLevel);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdNumeracyLevel);
			ssNumeracyLevelEnrolement = (string) other.AttributeGet(IdNumeracyLevelEnrolement);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdNumeracyLevelEnrolement);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdNumeracyLevelEnrolement);
			ssLiteracyInitialLevel = (string) other.AttributeGet(IdLiteracyInitialLevel);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdLiteracyInitialLevel);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdLiteracyInitialLevel);
			ssLiteracyLevel = (string) other.AttributeGet(IdLiteracyLevel);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdLiteracyLevel);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdLiteracyLevel);
			ssLiteracyInitialLevelEnroleme = (string) other.AttributeGet(IdLiteracyInitialLevelEnroleme);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdLiteracyInitialLevelEnroleme);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdLiteracyInitialLevelEnroleme);
			ssITInitialLevel = (string) other.AttributeGet(IdITInitialLevel);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdITInitialLevel);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdITInitialLevel);
			ssITLevel = (string) other.AttributeGet(IdITLevel);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdITLevel);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdITLevel);
			ssITLevelEnrolement = (string) other.AttributeGet(IdITLevelEnrolement);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdITLevelEnrolement);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdITLevelEnrolement);
			ssESOLInitialLevel = (string) other.AttributeGet(IdESOLInitialLevel);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdESOLInitialLevel);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdESOLInitialLevel);
			ssESOLLevel = (string) other.AttributeGet(IdESOLLevel);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdESOLLevel);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdESOLLevel);
			ssESOLLevelEnrolement = (string) other.AttributeGet(IdESOLLevelEnrolement);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdESOLLevelEnrolement);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdESOLLevelEnrolement);
			ssLearningStyleInitial = (string) other.AttributeGet(IdLearningStyleInitial);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdLearningStyleInitial);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdLearningStyleInitial);
			ssLearningStyle = (string) other.AttributeGet(IdLearningStyle);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdLearningStyle);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdLearningStyle);
			ssNotes = (string) other.AttributeGet(IdNotes);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdNotes);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdNotes);
			ssLastUpdateOn = (DateTime) other.AttributeGet(IdLastUpdateOn);
			ChangedAttributes[17] = other.ChangedAttributeGet(IdLastUpdateOn);
			OptimizedAttributes[17] = other.OptimizedAttributeGet(IdLastUpdateOn);
			ssLastUpdateBy = (int) other.AttributeGet(IdLastUpdateBy);
			ChangedAttributes[18] = other.ChangedAttributeGet(IdLastUpdateBy);
			OptimizedAttributes[18] = other.OptimizedAttributeGet(IdLastUpdateBy);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ChangedAttributes[19] = other.ChangedAttributeGet(IdCreatedOn);
			OptimizedAttributes[19] = other.OptimizedAttributeGet(IdCreatedOn);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[20] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[20] = other.OptimizedAttributeGet(IdCreatedBy);
			ssNumeracySource = (string) other.AttributeGet(IdNumeracySource);
			ChangedAttributes[21] = other.ChangedAttributeGet(IdNumeracySource);
			OptimizedAttributes[21] = other.OptimizedAttributeGet(IdNumeracySource);
			ssLiteracySource = (string) other.AttributeGet(IdLiteracySource);
			ChangedAttributes[22] = other.ChangedAttributeGet(IdLiteracySource);
			OptimizedAttributes[22] = other.OptimizedAttributeGet(IdLiteracySource);
			ssESOLSource = (string) other.AttributeGet(IdESOLSource);
			ChangedAttributes[23] = other.ChangedAttributeGet(IdESOLSource);
			OptimizedAttributes[23] = other.OptimizedAttributeGet(IdESOLSource);
			ssITSource = (string) other.AttributeGet(IdITSource);
			ChangedAttributes[24] = other.ChangedAttributeGet(IdITSource);
			OptimizedAttributes[24] = other.OptimizedAttributeGet(IdITSource);
		}
	} // ENSIASInitialAssessmentEntityRecord
	/// <summary>
	/// Structure <code>RCSIASInitialAssessmentRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSIASInitialAssessmentRecord: ISerializable, ITypedRecord<RCSIASInitialAssessmentRecord> {
		private static readonly GlobalObjectKey IdSIASInitialAssessment = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*R_fEHsAI8m6NSgQP5o9tTQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SIASInitialAssessment")]
		public ENSIASInitialAssessmentEntityRecord ssENSIASInitialAssessment;


		public static implicit operator ENSIASInitialAssessmentEntityRecord(RCSIASInitialAssessmentRecord r) {
			return r.ssENSIASInitialAssessment;
		}

		public static implicit operator RCSIASInitialAssessmentRecord(ENSIASInitialAssessmentEntityRecord r) {
			RCSIASInitialAssessmentRecord res = new RCSIASInitialAssessmentRecord(null);
			res.ssENSIASInitialAssessment = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENSIASInitialAssessment.ChangedAttributes = value;
			}
			get {
				return ssENSIASInitialAssessment.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCSIASInitialAssessmentRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENSIASInitialAssessment = new ENSIASInitialAssessmentEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(25, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENSIASInitialAssessment.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENSIASInitialAssessment.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENSIASInitialAssessment.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENSIASInitialAssessment.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSIASInitialAssessmentRecord r) {
			this = r;
		}


		public static bool operator == (RCSIASInitialAssessmentRecord a, RCSIASInitialAssessmentRecord b) {
			if (a.ssENSIASInitialAssessment != b.ssENSIASInitialAssessment) return false;
			return true;
		}

		public static bool operator != (RCSIASInitialAssessmentRecord a, RCSIASInitialAssessmentRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSIASInitialAssessmentRecord)) return false;
			return (this == (RCSIASInitialAssessmentRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENSIASInitialAssessment.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSIASInitialAssessmentRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENSIASInitialAssessment = new ENSIASInitialAssessmentEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENSIASInitialAssessment = (ENSIASInitialAssessmentEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENSIASInitialAssessment.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENSIASInitialAssessment.InternalRecursiveSave();
		}


		public RCSIASInitialAssessmentRecord Duplicate() {
			RCSIASInitialAssessmentRecord t;
			t.ssENSIASInitialAssessment = (ENSIASInitialAssessmentEntityRecord) this.ssENSIASInitialAssessment.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENSIASInitialAssessment.ToXml(this, recordElem, "SIASInitialAssessment", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "siasinitialassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SIASInitialAssessment")) variable.Value = ssENSIASInitialAssessment; else variable.Optimized = true;
				variable.SetFieldName("siasinitialassessment");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENSIASInitialAssessment.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENSIASInitialAssessment.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSIASInitialAssessment) {
				return ssENSIASInitialAssessment;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENSIASInitialAssessment.FillFromOther((IRecord) other.AttributeGet(IdSIASInitialAssessment));
		}
	} // RCSIASInitialAssessmentRecord
	/// <summary>
	/// RecordList type <code>RLSIASInitialAssessmentRecordList</code> that represents a record list of
	///  <code>SIASInitialAssessment</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASInitialAssessmentRecordList: GenericRecordList<RCSIASInitialAssessmentRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSIASInitialAssessmentRecord GetElementDefaultValue() {
			return new RCSIASInitialAssessmentRecord("");
		}

		public T[] ToArray<T>(Func<RCSIASInitialAssessmentRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASInitialAssessmentRecordList recordlist, Func<RCSIASInitialAssessmentRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASInitialAssessmentRecordList ToList<T>(T[] array, Func <T, RCSIASInitialAssessmentRecord> converter) {
			RLSIASInitialAssessmentRecordList result = new RLSIASInitialAssessmentRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASInitialAssessmentRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASInitialAssessmentRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASInitialAssessmentRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASInitialAssessmentRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(25, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSIASInitialAssessmentRecord> NewList() {
			return new RLSIASInitialAssessmentRecordList();
		}


	} // RLSIASInitialAssessmentRecordList

	/// <summary>
	/// RecordList type <code>RLSIASInitialAssessmentList</code> that represents a record list of
	///  <code>StudentIdentifier, IALevelsIdentifier, IALevelsIdentifier, IALevelsIdentifier
	/// , IALevelsIdentifier, IALevelsIdentifier, IALevelsIdentifier, IALevelsIdentifier,
	///  IALevelsIdentifier, IALevelsIdentifier, IALevelsIdentifier, IALevelsIdentifier, IALevelsIdentifier
	/// , IALearningStylesIdentifier, IALearningStylesIdentifier, UserIdentifier, UserIdentifier, Text,
	///  Text, Text, Text, Text, DateTime, DateTime, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLSIASInitialAssessmentList: GenericRecordList<ENSIASInitialAssessmentEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENSIASInitialAssessmentEntityRecord GetElementDefaultValue() {
			return new ENSIASInitialAssessmentEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENSIASInitialAssessmentEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSIASInitialAssessmentList recordlist, Func<ENSIASInitialAssessmentEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSIASInitialAssessmentList ToList<T>(T[] array, Func <T, ENSIASInitialAssessmentEntityRecord> converter) {
			RLSIASInitialAssessmentList result = new RLSIASInitialAssessmentList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSIASInitialAssessmentList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASInitialAssessmentList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSIASInitialAssessmentList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSIASInitialAssessmentList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENSIASInitialAssessmentEntityRecord> NewList() {
			return new RLSIASInitialAssessmentList();
		}


	} // RLSIASInitialAssessmentList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateSIASInitialAssessment
		/// </summary>

		public static void CreateSIASInitialAssessment(HeContext heContext, RCSIASInitialAssessmentRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASInitialAssessmentEntity.eSpaceId;
				ENSIASInitialAssessmentEntityRecord ssENSIASInitialAssessment = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENSIASInitialAssessmentEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTID]" +
					 ", [NUMERACYINITIALLEVEL]" +
					 ", [NUMERACYLEVEL]" +
					 ", [NUMERACYLEVELENROLEMENT]" +
					 ", [LITERACYINITIALLEVEL]" +
					 ", [LITERACYLEVEL]" +
					 ", [LITERACYINITIALLEVELENROLEME]" +
					 ", [ITINITIALLEVEL]" +
					 ", [ITLEVEL]" +
					 ", [ITLEVELENROLEMENT]" +
					 ", [ESOLINITIALLEVEL]" +
					 ", [ESOLLEVEL]" +
					 ", [ESOLLEVELENROLEMENT]" +
					 ", [LEARNINGSTYLEINITIAL]" +
					 ", [LEARNINGSTYLE]" +
					 ", [NOTES]" +
					 ", [LASTUPDATEON]" +
					 ", [LASTUPDATEBY]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 ", [NUMERACYSOURCE]" +
					 ", [LITERACYSOURCE]" +
					 ", [ESOLSOURCE]" +
					 ", [ITSOURCE]" +
					 " ) VALUES (" +
					 " @ssStudentId" +
					 ", @ssNumeracyInitialLevel" +
					 ", @ssNumeracyLevel" +
					 ", @ssNumeracyLevelEnrolement" +
					 ", @ssLiteracyInitialLevel" +
					 ", @ssLiteracyLevel" +
					 ", @ssLiteracyInitialLevelEnroleme" +
					 ", @ssITInitialLevel" +
					 ", @ssITLevel" +
					 ", @ssITLevelEnrolement" +
					 ", @ssESOLInitialLevel" +
					 ", @ssESOLLevel" +
					 ", @ssESOLLevelEnrolement" +
					 ", @ssLearningStyleInitial" +
					 ", @ssLearningStyle" +
					 ", @ssNotes" +
					 ", @ssLastUpdateOn" +
					 ", @ssLastUpdateBy" +
					 ", @ssCreatedOn" +
					 ", @ssCreatedBy" +
					 ", @ssNumeracySource" +
					 ", @ssLiteracySource" +
					 ", @ssESOLSource" +
					 ", @ssITSource" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENSIASInitialAssessment.ssStudentId== "")) {
						insertSqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENSIASInitialAssessment.ssStudentId);
					}
					if ((ssENSIASInitialAssessment.ssNumeracyInitialLevel== "")) {
						insertSqlCmd.CreateParameter("@ssNumeracyInitialLevel", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssNumeracyInitialLevel", DbType.String, ssENSIASInitialAssessment.ssNumeracyInitialLevel);
					}
					if ((ssENSIASInitialAssessment.ssNumeracyLevel== "")) {
						insertSqlCmd.CreateParameter("@ssNumeracyLevel", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssNumeracyLevel", DbType.String, ssENSIASInitialAssessment.ssNumeracyLevel);
					}
					if ((ssENSIASInitialAssessment.ssNumeracyLevelEnrolement== "")) {
						insertSqlCmd.CreateParameter("@ssNumeracyLevelEnrolement", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssNumeracyLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssNumeracyLevelEnrolement);
					}
					if ((ssENSIASInitialAssessment.ssLiteracyInitialLevel== "")) {
						insertSqlCmd.CreateParameter("@ssLiteracyInitialLevel", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLiteracyInitialLevel", DbType.String, ssENSIASInitialAssessment.ssLiteracyInitialLevel);
					}
					if ((ssENSIASInitialAssessment.ssLiteracyLevel== "")) {
						insertSqlCmd.CreateParameter("@ssLiteracyLevel", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLiteracyLevel", DbType.String, ssENSIASInitialAssessment.ssLiteracyLevel);
					}
					if ((ssENSIASInitialAssessment.ssLiteracyInitialLevelEnroleme== "")) {
						insertSqlCmd.CreateParameter("@ssLiteracyInitialLevelEnroleme", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLiteracyInitialLevelEnroleme", DbType.String, ssENSIASInitialAssessment.ssLiteracyInitialLevelEnroleme);
					}
					if ((ssENSIASInitialAssessment.ssITInitialLevel== "")) {
						insertSqlCmd.CreateParameter("@ssITInitialLevel", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssITInitialLevel", DbType.String, ssENSIASInitialAssessment.ssITInitialLevel);
					}
					if ((ssENSIASInitialAssessment.ssITLevel== "")) {
						insertSqlCmd.CreateParameter("@ssITLevel", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssITLevel", DbType.String, ssENSIASInitialAssessment.ssITLevel);
					}
					if ((ssENSIASInitialAssessment.ssITLevelEnrolement== "")) {
						insertSqlCmd.CreateParameter("@ssITLevelEnrolement", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssITLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssITLevelEnrolement);
					}
					if ((ssENSIASInitialAssessment.ssESOLInitialLevel== "")) {
						insertSqlCmd.CreateParameter("@ssESOLInitialLevel", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssESOLInitialLevel", DbType.String, ssENSIASInitialAssessment.ssESOLInitialLevel);
					}
					if ((ssENSIASInitialAssessment.ssESOLLevel== "")) {
						insertSqlCmd.CreateParameter("@ssESOLLevel", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssESOLLevel", DbType.String, ssENSIASInitialAssessment.ssESOLLevel);
					}
					if ((ssENSIASInitialAssessment.ssESOLLevelEnrolement== "")) {
						insertSqlCmd.CreateParameter("@ssESOLLevelEnrolement", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssESOLLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssESOLLevelEnrolement);
					}
					if ((ssENSIASInitialAssessment.ssLearningStyleInitial== "")) {
						insertSqlCmd.CreateParameter("@ssLearningStyleInitial", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLearningStyleInitial", DbType.String, ssENSIASInitialAssessment.ssLearningStyleInitial);
					}
					if ((ssENSIASInitialAssessment.ssLearningStyle== "")) {
						insertSqlCmd.CreateParameter("@ssLearningStyle", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLearningStyle", DbType.String, ssENSIASInitialAssessment.ssLearningStyle);
					}
					insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENSIASInitialAssessment.ssNotes);
					insertSqlCmd.CreateParameter("@ssLastUpdateOn", DbType.DateTime, ssENSIASInitialAssessment.ssLastUpdateOn);
					if ((ssENSIASInitialAssessment.ssLastUpdateBy==0)) {
						insertSqlCmd.CreateParameter("@ssLastUpdateBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLastUpdateBy", DbType.Int32, ssENSIASInitialAssessment.ssLastUpdateBy);
					}
					insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASInitialAssessment.ssCreatedOn);
					if ((ssENSIASInitialAssessment.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASInitialAssessment.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssNumeracySource", DbType.String, ssENSIASInitialAssessment.ssNumeracySource);
					insertSqlCmd.CreateParameter("@ssLiteracySource", DbType.String, ssENSIASInitialAssessment.ssLiteracySource);
					insertSqlCmd.CreateParameter("@ssESOLSource", DbType.String, ssENSIASInitialAssessment.ssESOLSource);
					insertSqlCmd.CreateParameter("@ssITSource", DbType.String, ssENSIASInitialAssessment.ssITSource);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateSIASInitialAssessment", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateSIASInitialAssessment
		/// </summary>

		public static void CreateOrUpdateSIASInitialAssessment(HeContext heContext, BitArray usedFields, RCSIASInitialAssessmentRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASInitialAssessmentEntity.eSpaceId;
				ENSIASInitialAssessmentEntityRecord ssENSIASInitialAssessment = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(25, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSIASInitialAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NUMERACYINITIALLEVEL] = @ssNumeracyInitialLevel"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NUMERACYLEVEL] = @ssNumeracyLevel"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NUMERACYLEVELENROLEMENT] = @ssNumeracyLevelEnrolement"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LITERACYINITIALLEVEL] = @ssLiteracyInitialLevel"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LITERACYLEVEL] = @ssLiteracyLevel"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LITERACYINITIALLEVELENROLEME] = @ssLiteracyInitialLevelEnroleme"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ITINITIALLEVEL] = @ssITInitialLevel"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ITLEVEL] = @ssITLevel"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ITLEVELENROLEMENT] = @ssITLevelEnrolement"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ESOLINITIALLEVEL] = @ssESOLInitialLevel"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ESOLLEVEL] = @ssESOLLevel"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ESOLLEVELENROLEMENT] = @ssESOLLevelEnrolement"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNINGSTYLEINITIAL] = @ssLearningStyleInitial"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNINGSTYLE] = @ssLearningStyle"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEON] = @ssLastUpdateOn"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEBY] = @ssLastUpdateBy"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NUMERACYSOURCE] = @ssNumeracySource"): parameters);
					parameters = (usedFields[22] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LITERACYSOURCE] = @ssLiteracySource"): parameters);
					parameters = (usedFields[23] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ESOLSOURCE] = @ssESOLSource"): parameters);
					parameters = (usedFields[24] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ITSOURCE] = @ssITSource"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSIASInitialAssessmentssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSIASInitialAssessment.ssStudentId== "")) {
							sqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENSIASInitialAssessment.ssStudentId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSIASInitialAssessment.ssNumeracyInitialLevel== "")) {
							sqlCmd.CreateParameter("@ssNumeracyInitialLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssNumeracyInitialLevel", DbType.String, ssENSIASInitialAssessment.ssNumeracyInitialLevel);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENSIASInitialAssessment.ssNumeracyLevel== "")) {
							sqlCmd.CreateParameter("@ssNumeracyLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssNumeracyLevel", DbType.String, ssENSIASInitialAssessment.ssNumeracyLevel);
						}
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENSIASInitialAssessment.ssNumeracyLevelEnrolement== "")) {
							sqlCmd.CreateParameter("@ssNumeracyLevelEnrolement", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssNumeracyLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssNumeracyLevelEnrolement);
						}
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENSIASInitialAssessment.ssLiteracyInitialLevel== "")) {
							sqlCmd.CreateParameter("@ssLiteracyInitialLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLiteracyInitialLevel", DbType.String, ssENSIASInitialAssessment.ssLiteracyInitialLevel);
						}
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENSIASInitialAssessment.ssLiteracyLevel== "")) {
							sqlCmd.CreateParameter("@ssLiteracyLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLiteracyLevel", DbType.String, ssENSIASInitialAssessment.ssLiteracyLevel);
						}
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENSIASInitialAssessment.ssLiteracyInitialLevelEnroleme== "")) {
							sqlCmd.CreateParameter("@ssLiteracyInitialLevelEnroleme", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLiteracyInitialLevelEnroleme", DbType.String, ssENSIASInitialAssessment.ssLiteracyInitialLevelEnroleme);
						}
						counter++;
					}
					if (usedFields[8]) {
						if ((ssENSIASInitialAssessment.ssITInitialLevel== "")) {
							sqlCmd.CreateParameter("@ssITInitialLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssITInitialLevel", DbType.String, ssENSIASInitialAssessment.ssITInitialLevel);
						}
						counter++;
					}
					if (usedFields[9]) {
						if ((ssENSIASInitialAssessment.ssITLevel== "")) {
							sqlCmd.CreateParameter("@ssITLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssITLevel", DbType.String, ssENSIASInitialAssessment.ssITLevel);
						}
						counter++;
					}
					if (usedFields[10]) {
						if ((ssENSIASInitialAssessment.ssITLevelEnrolement== "")) {
							sqlCmd.CreateParameter("@ssITLevelEnrolement", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssITLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssITLevelEnrolement);
						}
						counter++;
					}
					if (usedFields[11]) {
						if ((ssENSIASInitialAssessment.ssESOLInitialLevel== "")) {
							sqlCmd.CreateParameter("@ssESOLInitialLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssESOLInitialLevel", DbType.String, ssENSIASInitialAssessment.ssESOLInitialLevel);
						}
						counter++;
					}
					if (usedFields[12]) {
						if ((ssENSIASInitialAssessment.ssESOLLevel== "")) {
							sqlCmd.CreateParameter("@ssESOLLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssESOLLevel", DbType.String, ssENSIASInitialAssessment.ssESOLLevel);
						}
						counter++;
					}
					if (usedFields[13]) {
						if ((ssENSIASInitialAssessment.ssESOLLevelEnrolement== "")) {
							sqlCmd.CreateParameter("@ssESOLLevelEnrolement", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssESOLLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssESOLLevelEnrolement);
						}
						counter++;
					}
					if (usedFields[14]) {
						if ((ssENSIASInitialAssessment.ssLearningStyleInitial== "")) {
							sqlCmd.CreateParameter("@ssLearningStyleInitial", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLearningStyleInitial", DbType.String, ssENSIASInitialAssessment.ssLearningStyleInitial);
						}
						counter++;
					}
					if (usedFields[15]) {
						if ((ssENSIASInitialAssessment.ssLearningStyle== "")) {
							sqlCmd.CreateParameter("@ssLearningStyle", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLearningStyle", DbType.String, ssENSIASInitialAssessment.ssLearningStyle);
						}
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENSIASInitialAssessment.ssNotes);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssLastUpdateOn", DbType.DateTime, ssENSIASInitialAssessment.ssLastUpdateOn);
						counter++;
					}
					if (usedFields[18]) {
						if ((ssENSIASInitialAssessment.ssLastUpdateBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdateBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdateBy", DbType.Int32, ssENSIASInitialAssessment.ssLastUpdateBy);
						}
						counter++;
					}
					if (usedFields[19]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASInitialAssessment.ssCreatedOn);
						counter++;
					}
					if (usedFields[20]) {
						if ((ssENSIASInitialAssessment.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASInitialAssessment.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[21]) {
						sqlCmd.CreateParameter("@ssNumeracySource", DbType.String, ssENSIASInitialAssessment.ssNumeracySource);
						counter++;
					}
					if (usedFields[22]) {
						sqlCmd.CreateParameter("@ssLiteracySource", DbType.String, ssENSIASInitialAssessment.ssLiteracySource);
						counter++;
					}
					if (usedFields[23]) {
						sqlCmd.CreateParameter("@ssESOLSource", DbType.String, ssENSIASInitialAssessment.ssESOLSource);
						counter++;
					}
					if (usedFields[24]) {
						sqlCmd.CreateParameter("@ssITSource", DbType.String, ssENSIASInitialAssessment.ssITSource);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[LASTUPDATEON] = [LASTUPDATEON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSIASInitialAssessmentssId", DbType.Int32, ssENSIASInitialAssessment.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateSIASInitialAssessment (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENSIASInitialAssessmentEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTID]" +
						 ", [NUMERACYINITIALLEVEL]" +
						 ", [NUMERACYLEVEL]" +
						 ", [NUMERACYLEVELENROLEMENT]" +
						 ", [LITERACYINITIALLEVEL]" +
						 ", [LITERACYLEVEL]" +
						 ", [LITERACYINITIALLEVELENROLEME]" +
						 ", [ITINITIALLEVEL]" +
						 ", [ITLEVEL]" +
						 ", [ITLEVELENROLEMENT]" +
						 ", [ESOLINITIALLEVEL]" +
						 ", [ESOLLEVEL]" +
						 ", [ESOLLEVELENROLEMENT]" +
						 ", [LEARNINGSTYLEINITIAL]" +
						 ", [LEARNINGSTYLE]" +
						 ", [NOTES]" +
						 ", [LASTUPDATEON]" +
						 ", [LASTUPDATEBY]" +
						 ", [CREATEDON]" +
						 ", [CREATEDBY]" +
						 ", [NUMERACYSOURCE]" +
						 ", [LITERACYSOURCE]" +
						 ", [ESOLSOURCE]" +
						 ", [ITSOURCE]" +
						 " ) VALUES (" +
						 " @ssStudentId" +
						 ", @ssNumeracyInitialLevel" +
						 ", @ssNumeracyLevel" +
						 ", @ssNumeracyLevelEnrolement" +
						 ", @ssLiteracyInitialLevel" +
						 ", @ssLiteracyLevel" +
						 ", @ssLiteracyInitialLevelEnroleme" +
						 ", @ssITInitialLevel" +
						 ", @ssITLevel" +
						 ", @ssITLevelEnrolement" +
						 ", @ssESOLInitialLevel" +
						 ", @ssESOLLevel" +
						 ", @ssESOLLevelEnrolement" +
						 ", @ssLearningStyleInitial" +
						 ", @ssLearningStyle" +
						 ", @ssNotes" +
						 ", @ssLastUpdateOn" +
						 ", @ssLastUpdateBy" +
						 ", @ssCreatedOn" +
						 ", @ssCreatedBy" +
						 ", @ssNumeracySource" +
						 ", @ssLiteracySource" +
						 ", @ssESOLSource" +
						 ", @ssITSource" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENSIASInitialAssessment.ssStudentId== "")) {
							insertSqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENSIASInitialAssessment.ssStudentId);
						}
						if ((ssENSIASInitialAssessment.ssNumeracyInitialLevel== "")) {
							insertSqlCmd.CreateParameter("@ssNumeracyInitialLevel", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssNumeracyInitialLevel", DbType.String, ssENSIASInitialAssessment.ssNumeracyInitialLevel);
						}
						if ((ssENSIASInitialAssessment.ssNumeracyLevel== "")) {
							insertSqlCmd.CreateParameter("@ssNumeracyLevel", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssNumeracyLevel", DbType.String, ssENSIASInitialAssessment.ssNumeracyLevel);
						}
						if ((ssENSIASInitialAssessment.ssNumeracyLevelEnrolement== "")) {
							insertSqlCmd.CreateParameter("@ssNumeracyLevelEnrolement", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssNumeracyLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssNumeracyLevelEnrolement);
						}
						if ((ssENSIASInitialAssessment.ssLiteracyInitialLevel== "")) {
							insertSqlCmd.CreateParameter("@ssLiteracyInitialLevel", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLiteracyInitialLevel", DbType.String, ssENSIASInitialAssessment.ssLiteracyInitialLevel);
						}
						if ((ssENSIASInitialAssessment.ssLiteracyLevel== "")) {
							insertSqlCmd.CreateParameter("@ssLiteracyLevel", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLiteracyLevel", DbType.String, ssENSIASInitialAssessment.ssLiteracyLevel);
						}
						if ((ssENSIASInitialAssessment.ssLiteracyInitialLevelEnroleme== "")) {
							insertSqlCmd.CreateParameter("@ssLiteracyInitialLevelEnroleme", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLiteracyInitialLevelEnroleme", DbType.String, ssENSIASInitialAssessment.ssLiteracyInitialLevelEnroleme);
						}
						if ((ssENSIASInitialAssessment.ssITInitialLevel== "")) {
							insertSqlCmd.CreateParameter("@ssITInitialLevel", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssITInitialLevel", DbType.String, ssENSIASInitialAssessment.ssITInitialLevel);
						}
						if ((ssENSIASInitialAssessment.ssITLevel== "")) {
							insertSqlCmd.CreateParameter("@ssITLevel", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssITLevel", DbType.String, ssENSIASInitialAssessment.ssITLevel);
						}
						if ((ssENSIASInitialAssessment.ssITLevelEnrolement== "")) {
							insertSqlCmd.CreateParameter("@ssITLevelEnrolement", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssITLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssITLevelEnrolement);
						}
						if ((ssENSIASInitialAssessment.ssESOLInitialLevel== "")) {
							insertSqlCmd.CreateParameter("@ssESOLInitialLevel", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssESOLInitialLevel", DbType.String, ssENSIASInitialAssessment.ssESOLInitialLevel);
						}
						if ((ssENSIASInitialAssessment.ssESOLLevel== "")) {
							insertSqlCmd.CreateParameter("@ssESOLLevel", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssESOLLevel", DbType.String, ssENSIASInitialAssessment.ssESOLLevel);
						}
						if ((ssENSIASInitialAssessment.ssESOLLevelEnrolement== "")) {
							insertSqlCmd.CreateParameter("@ssESOLLevelEnrolement", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssESOLLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssESOLLevelEnrolement);
						}
						if ((ssENSIASInitialAssessment.ssLearningStyleInitial== "")) {
							insertSqlCmd.CreateParameter("@ssLearningStyleInitial", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLearningStyleInitial", DbType.String, ssENSIASInitialAssessment.ssLearningStyleInitial);
						}
						if ((ssENSIASInitialAssessment.ssLearningStyle== "")) {
							insertSqlCmd.CreateParameter("@ssLearningStyle", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLearningStyle", DbType.String, ssENSIASInitialAssessment.ssLearningStyle);
						}
						insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENSIASInitialAssessment.ssNotes);
						insertSqlCmd.CreateParameter("@ssLastUpdateOn", DbType.DateTime, ssENSIASInitialAssessment.ssLastUpdateOn);
						if ((ssENSIASInitialAssessment.ssLastUpdateBy==0)) {
							insertSqlCmd.CreateParameter("@ssLastUpdateBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLastUpdateBy", DbType.Int32, ssENSIASInitialAssessment.ssLastUpdateBy);
						}
						insertSqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASInitialAssessment.ssCreatedOn);
						if ((ssENSIASInitialAssessment.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASInitialAssessment.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssNumeracySource", DbType.String, ssENSIASInitialAssessment.ssNumeracySource);
						insertSqlCmd.CreateParameter("@ssLiteracySource", DbType.String, ssENSIASInitialAssessment.ssLiteracySource);
						insertSqlCmd.CreateParameter("@ssESOLSource", DbType.String, ssENSIASInitialAssessment.ssESOLSource);
						insertSqlCmd.CreateParameter("@ssITSource", DbType.String, ssENSIASInitialAssessment.ssITSource);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateSIASInitialAssessment", true), typeof(int));
					} else {
						outParamId = ssENSIASInitialAssessment.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteSIASInitialAssessment
		/// </summary>

		public static void DeleteSIASInitialAssessment(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASInitialAssessmentEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENSIASInitialAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteSIASInitialAssessment", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSIASInitialAssessment
		/// </summary>

		public static void GetSIASInitialAssessment(HeContext heContext, int inParamId, out RCSIASInitialAssessmentRecord outParamRecord) {
			outParamRecord = new RCSIASInitialAssessmentRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASInitialAssessmentEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [NUMERACYINITIALLEVEL]" +
					 ", [NUMERACYLEVEL]" +
					 ", [NUMERACYLEVELENROLEMENT]" +
					 ", [LITERACYINITIALLEVEL]" +
					 ", [LITERACYLEVEL]" +
					 ", [LITERACYINITIALLEVELENROLEME]" +
					 ", [ITINITIALLEVEL]" +
					 ", [ITLEVEL]" +
					 ", [ITLEVELENROLEMENT]" +
					 ", [ESOLINITIALLEVEL]" +
					 ", [ESOLLEVEL]" +
					 ", [ESOLLEVELENROLEMENT]" +
					 ", [LEARNINGSTYLEINITIAL]" +
					 ", [LEARNINGSTYLE]" +
					 ", [NOTES]" +
					 ", [LASTUPDATEON]" +
					 ", [LASTUPDATEBY]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 ", [NUMERACYSOURCE]" +
					 ", [LITERACYSOURCE]" +
					 ", [ESOLSOURCE]" +
					 ", [ITSOURCE]" +
					 " FROM " + ENSIASInitialAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSIASInitialAssessment", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(25, false)
							}
							;
						} else
						throw new DataBaseException(ENSIASInitialAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetSIASInitialAssessmentForUpdate
		/// </summary>

		public static void GetSIASInitialAssessmentForUpdate(HeContext heContext, int inParamId, out RCSIASInitialAssessmentRecord outParamRecord) {
			outParamRecord = new RCSIASInitialAssessmentRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASInitialAssessmentEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [NUMERACYINITIALLEVEL]" +
					 ", [NUMERACYLEVEL]" +
					 ", [NUMERACYLEVELENROLEMENT]" +
					 ", [LITERACYINITIALLEVEL]" +
					 ", [LITERACYLEVEL]" +
					 ", [LITERACYINITIALLEVELENROLEME]" +
					 ", [ITINITIALLEVEL]" +
					 ", [ITLEVEL]" +
					 ", [ITLEVELENROLEMENT]" +
					 ", [ESOLINITIALLEVEL]" +
					 ", [ESOLLEVEL]" +
					 ", [ESOLLEVELENROLEMENT]" +
					 ", [LEARNINGSTYLEINITIAL]" +
					 ", [LEARNINGSTYLE]" +
					 ", [NOTES]" +
					 ", [LASTUPDATEON]" +
					 ", [LASTUPDATEBY]" +
					 ", [CREATEDON]" +
					 ", [CREATEDBY]" +
					 ", [NUMERACYSOURCE]" +
					 ", [LITERACYSOURCE]" +
					 ", [ESOLSOURCE]" +
					 ", [ITSOURCE]" +
					 "FROM " + ENSIASInitialAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetSIASInitialAssessmentForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(25, false)
							}
							;
						} else
						throw new DataBaseException(ENSIASInitialAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateSIASInitialAssessment
		/// </summary>

		public static void UpdateSIASInitialAssessment(HeContext heContext, BitArray usedFields, RCSIASInitialAssessmentRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENSIASInitialAssessmentEntity.eSpaceId;
				ENSIASInitialAssessmentEntityRecord ssENSIASInitialAssessment = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(25, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENSIASInitialAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NUMERACYINITIALLEVEL] = @ssNumeracyInitialLevel"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NUMERACYLEVEL] = @ssNumeracyLevel"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NUMERACYLEVELENROLEMENT] = @ssNumeracyLevelEnrolement"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LITERACYINITIALLEVEL] = @ssLiteracyInitialLevel"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LITERACYLEVEL] = @ssLiteracyLevel"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LITERACYINITIALLEVELENROLEME] = @ssLiteracyInitialLevelEnroleme"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ITINITIALLEVEL] = @ssITInitialLevel"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ITLEVEL] = @ssITLevel"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ITLEVELENROLEMENT] = @ssITLevelEnrolement"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ESOLINITIALLEVEL] = @ssESOLInitialLevel"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ESOLLEVEL] = @ssESOLLevel"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ESOLLEVELENROLEMENT] = @ssESOLLevelEnrolement"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNINGSTYLEINITIAL] = @ssLearningStyleInitial"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNINGSTYLE] = @ssLearningStyle"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEON] = @ssLastUpdateOn"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEBY] = @ssLastUpdateBy"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDON] = @ssCreatedOn"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NUMERACYSOURCE] = @ssNumeracySource"): parameters);
					parameters = (usedFields[22] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LITERACYSOURCE] = @ssLiteracySource"): parameters);
					parameters = (usedFields[23] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ESOLSOURCE] = @ssESOLSource"): parameters);
					parameters = (usedFields[24] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ITSOURCE] = @ssITSource"): parameters);
					string whereCondition = " WHERE [ID] = @ssENSIASInitialAssessmentssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENSIASInitialAssessment.ssStudentId== "")) {
							sqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENSIASInitialAssessment.ssStudentId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENSIASInitialAssessment.ssNumeracyInitialLevel== "")) {
							sqlCmd.CreateParameter("@ssNumeracyInitialLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssNumeracyInitialLevel", DbType.String, ssENSIASInitialAssessment.ssNumeracyInitialLevel);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENSIASInitialAssessment.ssNumeracyLevel== "")) {
							sqlCmd.CreateParameter("@ssNumeracyLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssNumeracyLevel", DbType.String, ssENSIASInitialAssessment.ssNumeracyLevel);
						}
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENSIASInitialAssessment.ssNumeracyLevelEnrolement== "")) {
							sqlCmd.CreateParameter("@ssNumeracyLevelEnrolement", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssNumeracyLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssNumeracyLevelEnrolement);
						}
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENSIASInitialAssessment.ssLiteracyInitialLevel== "")) {
							sqlCmd.CreateParameter("@ssLiteracyInitialLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLiteracyInitialLevel", DbType.String, ssENSIASInitialAssessment.ssLiteracyInitialLevel);
						}
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENSIASInitialAssessment.ssLiteracyLevel== "")) {
							sqlCmd.CreateParameter("@ssLiteracyLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLiteracyLevel", DbType.String, ssENSIASInitialAssessment.ssLiteracyLevel);
						}
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENSIASInitialAssessment.ssLiteracyInitialLevelEnroleme== "")) {
							sqlCmd.CreateParameter("@ssLiteracyInitialLevelEnroleme", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLiteracyInitialLevelEnroleme", DbType.String, ssENSIASInitialAssessment.ssLiteracyInitialLevelEnroleme);
						}
						counter++;
					}
					if (usedFields[8]) {
						if ((ssENSIASInitialAssessment.ssITInitialLevel== "")) {
							sqlCmd.CreateParameter("@ssITInitialLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssITInitialLevel", DbType.String, ssENSIASInitialAssessment.ssITInitialLevel);
						}
						counter++;
					}
					if (usedFields[9]) {
						if ((ssENSIASInitialAssessment.ssITLevel== "")) {
							sqlCmd.CreateParameter("@ssITLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssITLevel", DbType.String, ssENSIASInitialAssessment.ssITLevel);
						}
						counter++;
					}
					if (usedFields[10]) {
						if ((ssENSIASInitialAssessment.ssITLevelEnrolement== "")) {
							sqlCmd.CreateParameter("@ssITLevelEnrolement", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssITLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssITLevelEnrolement);
						}
						counter++;
					}
					if (usedFields[11]) {
						if ((ssENSIASInitialAssessment.ssESOLInitialLevel== "")) {
							sqlCmd.CreateParameter("@ssESOLInitialLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssESOLInitialLevel", DbType.String, ssENSIASInitialAssessment.ssESOLInitialLevel);
						}
						counter++;
					}
					if (usedFields[12]) {
						if ((ssENSIASInitialAssessment.ssESOLLevel== "")) {
							sqlCmd.CreateParameter("@ssESOLLevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssESOLLevel", DbType.String, ssENSIASInitialAssessment.ssESOLLevel);
						}
						counter++;
					}
					if (usedFields[13]) {
						if ((ssENSIASInitialAssessment.ssESOLLevelEnrolement== "")) {
							sqlCmd.CreateParameter("@ssESOLLevelEnrolement", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssESOLLevelEnrolement", DbType.String, ssENSIASInitialAssessment.ssESOLLevelEnrolement);
						}
						counter++;
					}
					if (usedFields[14]) {
						if ((ssENSIASInitialAssessment.ssLearningStyleInitial== "")) {
							sqlCmd.CreateParameter("@ssLearningStyleInitial", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLearningStyleInitial", DbType.String, ssENSIASInitialAssessment.ssLearningStyleInitial);
						}
						counter++;
					}
					if (usedFields[15]) {
						if ((ssENSIASInitialAssessment.ssLearningStyle== "")) {
							sqlCmd.CreateParameter("@ssLearningStyle", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLearningStyle", DbType.String, ssENSIASInitialAssessment.ssLearningStyle);
						}
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENSIASInitialAssessment.ssNotes);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssLastUpdateOn", DbType.DateTime, ssENSIASInitialAssessment.ssLastUpdateOn);
						counter++;
					}
					if (usedFields[18]) {
						if ((ssENSIASInitialAssessment.ssLastUpdateBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdateBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdateBy", DbType.Int32, ssENSIASInitialAssessment.ssLastUpdateBy);
						}
						counter++;
					}
					if (usedFields[19]) {
						sqlCmd.CreateParameter("@ssCreatedOn", DbType.DateTime, ssENSIASInitialAssessment.ssCreatedOn);
						counter++;
					}
					if (usedFields[20]) {
						if ((ssENSIASInitialAssessment.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENSIASInitialAssessment.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[21]) {
						sqlCmd.CreateParameter("@ssNumeracySource", DbType.String, ssENSIASInitialAssessment.ssNumeracySource);
						counter++;
					}
					if (usedFields[22]) {
						sqlCmd.CreateParameter("@ssLiteracySource", DbType.String, ssENSIASInitialAssessment.ssLiteracySource);
						counter++;
					}
					if (usedFields[23]) {
						sqlCmd.CreateParameter("@ssESOLSource", DbType.String, ssENSIASInitialAssessment.ssESOLSource);
						counter++;
					}
					if (usedFields[24]) {
						sqlCmd.CreateParameter("@ssITSource", DbType.String, ssENSIASInitialAssessment.ssITSource);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[LASTUPDATEON] = [LASTUPDATEON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENSIASInitialAssessmentssId", DbType.Int32, ssENSIASInitialAssessment.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateSIASInitialAssessment", true) <= 0)
					throw new DataBaseException(ENSIASInitialAssessmentEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENSIASInitialAssessment.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("SIASInitialAssessment")]
	public class WORCSIASInitialAssessmentRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentId")]
		public string varWSStudentId;

		[System.Xml.Serialization.XmlElement("NumeracyInitialLevel")]
		public string varWSNumeracyInitialLevel;

		[System.Xml.Serialization.XmlElement("NumeracyLevel")]
		public string varWSNumeracyLevel;

		[System.Xml.Serialization.XmlElement("NumeracyLevelEnrolement")]
		public string varWSNumeracyLevelEnrolement;

		[System.Xml.Serialization.XmlElement("LiteracyInitialLevel")]
		public string varWSLiteracyInitialLevel;

		[System.Xml.Serialization.XmlElement("LiteracyLevel")]
		public string varWSLiteracyLevel;

		[System.Xml.Serialization.XmlElement("LiteracyInitialLevelEnroleme")]
		public string varWSLiteracyInitialLevelEnroleme;

		[System.Xml.Serialization.XmlElement("ITInitialLevel")]
		public string varWSITInitialLevel;

		[System.Xml.Serialization.XmlElement("ITLevel")]
		public string varWSITLevel;

		[System.Xml.Serialization.XmlElement("ITLevelEnrolement")]
		public string varWSITLevelEnrolement;

		[System.Xml.Serialization.XmlElement("ESOLInitialLevel")]
		public string varWSESOLInitialLevel;

		[System.Xml.Serialization.XmlElement("ESOLLevel")]
		public string varWSESOLLevel;

		[System.Xml.Serialization.XmlElement("ESOLLevelEnrolement")]
		public string varWSESOLLevelEnrolement;

		[System.Xml.Serialization.XmlElement("LearningStyleInitial")]
		public string varWSLearningStyleInitial;

		[System.Xml.Serialization.XmlElement("LearningStyle")]
		public string varWSLearningStyle;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string varWSNotes;

		[System.Xml.Serialization.XmlElement("LastUpdateOn")]
		public DateTime varWSLastUpdateOn;

		[System.Xml.Serialization.XmlElement("LastUpdateBy")]
		public int varWSLastUpdateBy;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime varWSCreatedOn;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("NumeracySource")]
		public string varWSNumeracySource;

		[System.Xml.Serialization.XmlElement("LiteracySource")]
		public string varWSLiteracySource;

		[System.Xml.Serialization.XmlElement("ESOLSource")]
		public string varWSESOLSource;

		[System.Xml.Serialization.XmlElement("ITSource")]
		public string varWSITSource;

		public WORCSIASInitialAssessmentRecord() {
			varWSId = (int) 0;
			varWSStudentId = (string) "";
			varWSNumeracyInitialLevel = (string) "";
			varWSNumeracyLevel = (string) "";
			varWSNumeracyLevelEnrolement = (string) "";
			varWSLiteracyInitialLevel = (string) "";
			varWSLiteracyLevel = (string) "";
			varWSLiteracyInitialLevelEnroleme = (string) "";
			varWSITInitialLevel = (string) "";
			varWSITLevel = (string) "";
			varWSITLevelEnrolement = (string) "";
			varWSESOLInitialLevel = (string) "";
			varWSESOLLevel = (string) "";
			varWSESOLLevelEnrolement = (string) "";
			varWSLearningStyleInitial = (string) "";
			varWSLearningStyle = (string) "";
			varWSNotes = (string) "";
			varWSLastUpdateOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLastUpdateBy = (int) 0;
			varWSCreatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
			varWSNumeracySource = (string) "";
			varWSLiteracySource = (string) "";
			varWSESOLSource = (string) "";
			varWSITSource = (string) "";
		}

		public WORCSIASInitialAssessmentRecord(ENSIASInitialAssessmentEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentId = BaseAppUtils.RemoveControlChars(r.ssStudentId);
			varWSNumeracyInitialLevel = BaseAppUtils.RemoveControlChars(r.ssNumeracyInitialLevel);
			varWSNumeracyLevel = BaseAppUtils.RemoveControlChars(r.ssNumeracyLevel);
			varWSNumeracyLevelEnrolement = BaseAppUtils.RemoveControlChars(r.ssNumeracyLevelEnrolement);
			varWSLiteracyInitialLevel = BaseAppUtils.RemoveControlChars(r.ssLiteracyInitialLevel);
			varWSLiteracyLevel = BaseAppUtils.RemoveControlChars(r.ssLiteracyLevel);
			varWSLiteracyInitialLevelEnroleme = BaseAppUtils.RemoveControlChars(r.ssLiteracyInitialLevelEnroleme);
			varWSITInitialLevel = BaseAppUtils.RemoveControlChars(r.ssITInitialLevel);
			varWSITLevel = BaseAppUtils.RemoveControlChars(r.ssITLevel);
			varWSITLevelEnrolement = BaseAppUtils.RemoveControlChars(r.ssITLevelEnrolement);
			varWSESOLInitialLevel = BaseAppUtils.RemoveControlChars(r.ssESOLInitialLevel);
			varWSESOLLevel = BaseAppUtils.RemoveControlChars(r.ssESOLLevel);
			varWSESOLLevelEnrolement = BaseAppUtils.RemoveControlChars(r.ssESOLLevelEnrolement);
			varWSLearningStyleInitial = BaseAppUtils.RemoveControlChars(r.ssLearningStyleInitial);
			varWSLearningStyle = BaseAppUtils.RemoveControlChars(r.ssLearningStyle);
			varWSNotes = BaseAppUtils.RemoveControlChars(r.ssNotes);
			varWSLastUpdateOn = (DateTime) r.ssLastUpdateOn;
			varWSLastUpdateBy = (int) r.ssLastUpdateBy;
			varWSCreatedOn = (DateTime) r.ssCreatedOn;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSNumeracySource = BaseAppUtils.RemoveControlChars(r.ssNumeracySource);
			varWSLiteracySource = BaseAppUtils.RemoveControlChars(r.ssLiteracySource);
			varWSESOLSource = BaseAppUtils.RemoveControlChars(r.ssESOLSource);
			varWSITSource = BaseAppUtils.RemoveControlChars(r.ssITSource);
		}

		public static RLSIASInitialAssessmentList ToRecordList(WORCSIASInitialAssessmentRecord[] array) {
			RLSIASInitialAssessmentList rl = new RLSIASInitialAssessmentList();
			if (array != null) {
				foreach(WORCSIASInitialAssessmentRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSIASInitialAssessmentRecord[] FromRecordList(RLSIASInitialAssessmentList rl) {
			WORCSIASInitialAssessmentRecord[] array = new WORCSIASInitialAssessmentRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSIASInitialAssessmentRecord {
		public static implicit operator WORCSIASInitialAssessmentRecord(RCSIASInitialAssessmentRecord r) {
			return new WORCSIASInitialAssessmentRecord(r.ssENSIASInitialAssessment);
		}

		public static implicit operator RCSIASInitialAssessmentRecord(WORCSIASInitialAssessmentRecord w) {
			RCSIASInitialAssessmentRecord r = new RCSIASInitialAssessmentRecord("");
			if (w != null) {
				r.ssENSIASInitialAssessment = w;
			}
			return r;
		}

	}

	partial struct ENSIASInitialAssessmentEntityRecord {
		public static implicit operator WORCSIASInitialAssessmentRecord(ENSIASInitialAssessmentEntityRecord r) {
			return new WORCSIASInitialAssessmentRecord(r);
		}

		public static implicit operator ENSIASInitialAssessmentEntityRecord(WORCSIASInitialAssessmentRecord w) {
			ENSIASInitialAssessmentEntityRecord r = new ENSIASInitialAssessmentEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentId = (string) w.varWSStudentId;
				r.ssNumeracyInitialLevel = (string) w.varWSNumeracyInitialLevel;
				r.ssNumeracyLevel = (string) w.varWSNumeracyLevel;
				r.ssNumeracyLevelEnrolement = (string) w.varWSNumeracyLevelEnrolement;
				r.ssLiteracyInitialLevel = (string) w.varWSLiteracyInitialLevel;
				r.ssLiteracyLevel = (string) w.varWSLiteracyLevel;
				r.ssLiteracyInitialLevelEnroleme = (string) w.varWSLiteracyInitialLevelEnroleme;
				r.ssITInitialLevel = (string) w.varWSITInitialLevel;
				r.ssITLevel = (string) w.varWSITLevel;
				r.ssITLevelEnrolement = (string) w.varWSITLevelEnrolement;
				r.ssESOLInitialLevel = (string) w.varWSESOLInitialLevel;
				r.ssESOLLevel = (string) w.varWSESOLLevel;
				r.ssESOLLevelEnrolement = (string) w.varWSESOLLevelEnrolement;
				r.ssLearningStyleInitial = (string) w.varWSLearningStyleInitial;
				r.ssLearningStyle = (string) w.varWSLearningStyle;
				r.ssNotes = ((string) w.varWSNotes ?? "");
				r.ssLastUpdateOn = (DateTime) w.varWSLastUpdateOn;
				r.ssLastUpdateBy = (int) w.varWSLastUpdateBy;
				r.ssCreatedOn = (DateTime) w.varWSCreatedOn;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssNumeracySource = ((string) w.varWSNumeracySource ?? "");
				r.ssLiteracySource = ((string) w.varWSLiteracySource ?? "");
				r.ssESOLSource = ((string) w.varWSESOLSource ?? "");
				r.ssITSource = ((string) w.varWSITSource ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSIASInitialAssessmentRecordList {
		public WORCSIASInitialAssessmentRecord[] Array;


		public WORLSIASInitialAssessmentRecordList(WORCSIASInitialAssessmentRecord[] r) {
			if (r == null)
			Array = new WORCSIASInitialAssessmentRecord[0];
			else
			Array = r;
		}
		public WORLSIASInitialAssessmentRecordList() {
			Array = new WORCSIASInitialAssessmentRecord[0];
		}

		public WORLSIASInitialAssessmentRecordList(RLSIASInitialAssessmentRecordList rl) {
			rl=(RLSIASInitialAssessmentRecordList) rl.Duplicate();
			Array = new WORCSIASInitialAssessmentRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSIASInitialAssessmentRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSIASInitialAssessmentRecordList {
		public static implicit operator RLSIASInitialAssessmentRecordList(WORCSIASInitialAssessmentRecord[] array) {
			RLSIASInitialAssessmentRecordList rl = new RLSIASInitialAssessmentRecordList();
			if (array != null) {
				foreach(WORCSIASInitialAssessmentRecord val in array) {
					rl.Append((RCSIASInitialAssessmentRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSIASInitialAssessmentRecord[](RLSIASInitialAssessmentRecordList rl) {
			WORCSIASInitialAssessmentRecord[] array = new WORCSIASInitialAssessmentRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSIASInitialAssessmentRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSIASInitialAssessmentRecordList {
		public static implicit operator RLSIASInitialAssessmentRecordList(WORLSIASInitialAssessmentRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSIASInitialAssessmentRecordList(RLSIASInitialAssessmentRecordList rl) {
			return new WORLSIASInitialAssessmentRecordList(rl);
		}
		public static implicit operator WORCSIASInitialAssessmentRecord[](WORLSIASInitialAssessmentRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSIASInitialAssessmentRecordList(WORCSIASInitialAssessmentRecord[] array) {
			return new WORLSIASInitialAssessmentRecordList(array);
		}
	}
}

