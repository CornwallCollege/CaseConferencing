/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENGroupEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENGroupEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENGroupEntity.eSpaceId;
	} // ENGroupEntity

	/// <summary>
	/// Entity <code>ENGroupEntityRecord</code> that represents the Service Studio entity
	///  <code>Group</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Group", "MabvTe_zy0y41UJ6TH0UFQ", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Group", "")]
	[Serializable()]
	public partial struct ENGroupEntityRecord: ISerializable, ITypedRecord<ENGroupEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*thQjIy5pq0idgQuC2jgzIA");
		private static readonly GlobalObjectKey IdGroupName = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*G9PvFaIr6UCtE1rJVGgMwQ");
		private static readonly GlobalObjectKey IdGroupDescription = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*3XirDmoYmUmTKLoBuoCjeQ");
		private static readonly GlobalObjectKey IdGroupTypeId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*Y7BzOeFFL0y2rT5n1gfA8Q");
		private static readonly GlobalObjectKey IdCourseManager = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*5SIvxS9jqkOZWspjmmmBWg");
		private static readonly GlobalObjectKey IdTeam = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*uYyDQk2SjUmcnmh4HfCQnQ");
		private static readonly GlobalObjectKey IdCategory = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*9R41hUixw0WYD3d0tv4Yog");
		private static readonly GlobalObjectKey IdIALevel = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*pSlOWVXPFkm55ATDEpmqpA");
		private static readonly GlobalObjectKey IdSite = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*R97IM4_jCEaAGJDV4uqhsw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(9, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GROUPNAME", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("GroupName")]
		private string _ssGroupName;
		public string ssGroupName {
			get {
				return _ssGroupName;
			}
			set {
				if ((_ssGroupName!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssGroupName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GROUPDESCRIPTION", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("GroupDescription")]
		private string _ssGroupDescription;
		public string ssGroupDescription {
			get {
				return _ssGroupDescription;
			}
			set {
				if ((_ssGroupDescription!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssGroupDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GROUPTYPEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("GroupTypeId")]
		private int _ssGroupTypeId;
		public int ssGroupTypeId {
			get {
				return _ssGroupTypeId;
			}
			set {
				if ((_ssGroupTypeId!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssGroupTypeId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COURSEMANAGER", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CourseManager")]
		private int _ssCourseManager;
		public int ssCourseManager {
			get {
				return _ssCourseManager;
			}
			set {
				if ((_ssCourseManager!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCourseManager = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TEAM", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Team")]
		private int _ssTeam;
		public int ssTeam {
			get {
				return _ssTeam;
			}
			set {
				if ((_ssTeam!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssTeam = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CATEGORY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Category")]
		private int _ssCategory;
		public int ssCategory {
			get {
				return _ssCategory;
			}
			set {
				if ((_ssCategory!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssCategory = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IALEVEL", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("IALevel")]
		private string _ssIALevel;
		public string ssIALevel {
			get {
				return _ssIALevel;
			}
			set {
				if ((_ssIALevel!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssIALevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SITE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Site")]
		private string _ssSite;
		public string ssSite {
			get {
				return _ssSite;
			}
			set {
				if ((_ssSite!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssSite = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENGroupEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(9, true);
			OptimizedAttributes = new BitArray(9, false);
			_ssId = 0;
			_ssGroupName = "";
			_ssGroupDescription = "";
			_ssGroupTypeId = 0;
			_ssCourseManager = 0;
			_ssTeam = 0;
			_ssCategory = 0;
			_ssIALevel = "";
			_ssSite = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Group.Id", 0);
			ssGroupName = r.ReadText(index++, "Group.GroupName", "");
			ssGroupDescription = r.ReadText(index++, "Group.GroupDescription", "");
			ssGroupTypeId = r.ReadEntityReference(index++, "Group.GroupTypeId", 0);
			ssCourseManager = r.ReadEntityReference(index++, "Group.CourseManager", 0);
			ssTeam = r.ReadEntityReference(index++, "Group.Team", 0);
			ssCategory = r.ReadEntityReference(index++, "Group.Category", 0);
			ssIALevel = r.ReadTextEntityReference(index++, "Group.IALevel", "");
			ssSite = r.ReadText(index++, "Group.Site", "");
			ChangedAttributes = new BitArray(9, false);
			OptimizedAttributes = new BitArray(9, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENGroupEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENGroupEntityRecord a, ENGroupEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssGroupName != b.ssGroupName) return false;
			if (a.ssGroupDescription != b.ssGroupDescription) return false;
			if (a.ssGroupTypeId != b.ssGroupTypeId) return false;
			if (a.ssCourseManager != b.ssCourseManager) return false;
			if (a.ssTeam != b.ssTeam) return false;
			if (a.ssCategory != b.ssCategory) return false;
			if (a.ssIALevel != b.ssIALevel) return false;
			if (a.ssSite != b.ssSite) return false;
			return true;
		}

		public static bool operator != (ENGroupEntityRecord a, ENGroupEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENGroupEntityRecord)) return false;
			return (this == (ENGroupEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssGroupName.GetHashCode()
				^ ssGroupDescription.GetHashCode()
				^ ssGroupTypeId.GetHashCode()
				^ ssCourseManager.GetHashCode()
				^ ssTeam.GetHashCode()
				^ ssCategory.GetHashCode()
				^ ssIALevel.GetHashCode()
				^ ssSite.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENGroupEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(9, true);
			OptimizedAttributes = new BitArray(9, false);
			_ssId = 0;
			_ssGroupName = "";
			_ssGroupDescription = "";
			_ssGroupTypeId = 0;
			_ssCourseManager = 0;
			_ssTeam = 0;
			_ssCategory = 0;
			_ssIALevel = "";
			_ssSite = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssGroupName = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssGroupDescription = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssGroupTypeId = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCourseManager = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssTeam = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssCategory = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssIALevel = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssSite = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENGroupEntityRecord Duplicate() {
			ENGroupEntityRecord t;
			t._ssId = this._ssId;
			t._ssGroupName = this._ssGroupName;
			t._ssGroupDescription = this._ssGroupDescription;
			t._ssGroupTypeId = this._ssGroupTypeId;
			t._ssCourseManager = this._ssCourseManager;
			t._ssTeam = this._ssTeam;
			t._ssCategory = this._ssCategory;
			t._ssIALevel = this._ssIALevel;
			t._ssSite = this._ssSite;
			t.ChangedAttributes = new BitArray(9);
			t.OptimizedAttributes = new BitArray(9);
			for (int i = 0; i < 9; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupName")) VarValue.AppendAttribute(recordElem, "GroupName", ssGroupName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "GroupName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupDescription")) VarValue.AppendAttribute(recordElem, "GroupDescription", ssGroupDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "GroupDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupTypeId")) VarValue.AppendAttribute(recordElem, "GroupTypeId", ssGroupTypeId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "GroupTypeId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseManager")) VarValue.AppendAttribute(recordElem, "CourseManager", ssCourseManager, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CourseManager");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Team")) VarValue.AppendAttribute(recordElem, "Team", ssTeam, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Team");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Category")) VarValue.AppendAttribute(recordElem, "Category", ssCategory, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Category");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IALevel")) VarValue.AppendAttribute(recordElem, "IALevel", ssIALevel, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "IALevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Site")) VarValue.AppendAttribute(recordElem, "Site", ssSite, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Site");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "groupname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupName")) variable.Value = ssGroupName; else variable.Optimized = true;
			} else if (head == "groupdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupDescription")) variable.Value = ssGroupDescription; else variable.Optimized = true;
			} else if (head == "grouptypeid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupTypeId")) variable.Value = ssGroupTypeId; else variable.Optimized = true;
			} else if (head == "coursemanager") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseManager")) variable.Value = ssCourseManager; else variable.Optimized = true;
			} else if (head == "team") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Team")) variable.Value = ssTeam; else variable.Optimized = true;
			} else if (head == "category") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Category")) variable.Value = ssCategory; else variable.Optimized = true;
			} else if (head == "ialevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IALevel")) variable.Value = ssIALevel; else variable.Optimized = true;
			} else if (head == "site") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Site")) variable.Value = ssSite; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdGroupName)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdGroupDescription)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdGroupTypeId)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCourseManager)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdTeam)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdCategory)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdIALevel)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdSite)) {
				return ChangedAttributes[8];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdGroupName)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdGroupDescription)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdGroupTypeId)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCourseManager)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdTeam)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdCategory)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdIALevel)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdSite)) {
				return OptimizedAttributes[8];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdGroupName) {
				return ssGroupName;
			} else if (key == IdGroupDescription) {
				return ssGroupDescription;
			} else if (key == IdGroupTypeId) {
				return ssGroupTypeId;
			} else if (key == IdCourseManager) {
				return ssCourseManager;
			} else if (key == IdTeam) {
				return ssTeam;
			} else if (key == IdCategory) {
				return ssCategory;
			} else if (key == IdIALevel) {
				return ssIALevel;
			} else if (key == IdSite) {
				return ssSite;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(9);
			OptimizedAttributes = new BitArray(9);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssGroupName = (string) other.AttributeGet(IdGroupName);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdGroupName);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdGroupName);
			ssGroupDescription = (string) other.AttributeGet(IdGroupDescription);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdGroupDescription);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdGroupDescription);
			ssGroupTypeId = (int) other.AttributeGet(IdGroupTypeId);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdGroupTypeId);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdGroupTypeId);
			ssCourseManager = (int) other.AttributeGet(IdCourseManager);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCourseManager);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCourseManager);
			ssTeam = (int) other.AttributeGet(IdTeam);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdTeam);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdTeam);
			ssCategory = (int) other.AttributeGet(IdCategory);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdCategory);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdCategory);
			ssIALevel = (string) other.AttributeGet(IdIALevel);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdIALevel);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdIALevel);
			ssSite = (string) other.AttributeGet(IdSite);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdSite);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdSite);
		}
	} // ENGroupEntityRecord
	/// <summary>
	/// Structure <code>RCGroupRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGroupRecord: ISerializable, ITypedRecord<RCGroupRecord> {
		private static readonly GlobalObjectKey IdGroup = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kYatXILvLjLhHZfk_+IcFQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Group")]
		public ENGroupEntityRecord ssENGroup;


		public static implicit operator ENGroupEntityRecord(RCGroupRecord r) {
			return r.ssENGroup;
		}

		public static implicit operator RCGroupRecord(ENGroupEntityRecord r) {
			RCGroupRecord res = new RCGroupRecord(null);
			res.ssENGroup = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENGroup.ChangedAttributes = value;
			}
			get {
				return ssENGroup.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCGroupRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENGroup.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENGroup.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENGroup.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENGroup.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGroupRecord r) {
			this = r;
		}


		public static bool operator == (RCGroupRecord a, RCGroupRecord b) {
			if (a.ssENGroup != b.ssENGroup) return false;
			return true;
		}

		public static bool operator != (RCGroupRecord a, RCGroupRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGroupRecord)) return false;
			return (this == (RCGroupRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENGroup.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGroupRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENGroup = new ENGroupEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENGroup = (ENGroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENGroup.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENGroup.InternalRecursiveSave();
		}


		public RCGroupRecord Duplicate() {
			RCGroupRecord t;
			t.ssENGroup = (ENGroupEntityRecord) this.ssENGroup.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENGroup.ToXml(this, recordElem, "Group", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Group")) variable.Value = ssENGroup; else variable.Optimized = true;
				variable.SetFieldName("group");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENGroup.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENGroup.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGroup) {
				return ssENGroup;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENGroup.FillFromOther((IRecord) other.AttributeGet(IdGroup));
		}
	} // RCGroupRecord
	/// <summary>
	/// RecordList type <code>RLGroupRecordList</code> that represents a record list of <code>Group</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupRecordList: GenericRecordList<RCGroupRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGroupRecord GetElementDefaultValue() {
			return new RCGroupRecord("");
		}

		public T[] ToArray<T>(Func<RCGroupRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupRecordList recordlist, Func<RCGroupRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupRecordList ToList<T>(T[] array, Func <T, RCGroupRecord> converter) {
			RLGroupRecordList result = new RLGroupRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGroupRecord> NewList() {
			return new RLGroupRecordList();
		}


	} // RLGroupRecordList

	/// <summary>
	/// RecordList type <code>RLGroupList</code> that represents a record list of
	///  <code>GroupTypeIdentifier, StaffIdentifier, TeamIdentifier, CategoryIdentifier, IALevelsIdentifier
	/// , Text, Text, Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLGroupList: GenericRecordList<ENGroupEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENGroupEntityRecord GetElementDefaultValue() {
			return new ENGroupEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENGroupEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGroupList recordlist, Func<ENGroupEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGroupList ToList<T>(T[] array, Func <T, ENGroupEntityRecord> converter) {
			RLGroupList result = new RLGroupList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGroupList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGroupList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGroupList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENGroupEntityRecord> NewList() {
			return new RLGroupList();
		}


	} // RLGroupList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateGroup
		/// </summary>

		public static void CreateGroup(HeContext heContext, RCGroupRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENGroupEntity.eSpaceId;
				ENGroupEntityRecord ssENGroup = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENGroupEntity.LocalViewName(null, null) + " (" +
					 " [GROUPNAME]" +
					 ", [GROUPDESCRIPTION]" +
					 ", [GROUPTYPEID]" +
					 ", [COURSEMANAGER]" +
					 ", [TEAM]" +
					 ", [CATEGORY]" +
					 ", [IALEVEL]" +
					 ", [SITE]" +
					 " ) VALUES (" +
					 " @ssGroupName" +
					 ", @ssGroupDescription" +
					 ", @ssGroupTypeId" +
					 ", @ssCourseManager" +
					 ", @ssTeam" +
					 ", @ssCategory" +
					 ", @ssIALevel" +
					 ", @ssSite" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssGroupName", DbType.String, ssENGroup.ssGroupName);
					insertSqlCmd.CreateParameter("@ssGroupDescription", DbType.String, ssENGroup.ssGroupDescription);
					if ((ssENGroup.ssGroupTypeId==0)) {
						insertSqlCmd.CreateParameter("@ssGroupTypeId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssGroupTypeId", DbType.Int32, ssENGroup.ssGroupTypeId);
					}
					if ((ssENGroup.ssCourseManager==0)) {
						insertSqlCmd.CreateParameter("@ssCourseManager", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCourseManager", DbType.Int32, ssENGroup.ssCourseManager);
					}
					if ((ssENGroup.ssTeam==0)) {
						insertSqlCmd.CreateParameter("@ssTeam", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssTeam", DbType.Int32, ssENGroup.ssTeam);
					}
					if ((ssENGroup.ssCategory==0)) {
						insertSqlCmd.CreateParameter("@ssCategory", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCategory", DbType.Int32, ssENGroup.ssCategory);
					}
					if ((ssENGroup.ssIALevel== "")) {
						insertSqlCmd.CreateParameter("@ssIALevel", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssIALevel", DbType.String, ssENGroup.ssIALevel);
					}
					insertSqlCmd.CreateParameter("@ssSite", DbType.String, ssENGroup.ssSite);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateGroup", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateGroup
		/// </summary>

		public static void CreateOrUpdateGroup(HeContext heContext, BitArray usedFields, RCGroupRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENGroupEntity.eSpaceId;
				ENGroupEntityRecord ssENGroup = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(9, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENGroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPNAME] = @ssGroupName"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPDESCRIPTION] = @ssGroupDescription"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPTYPEID] = @ssGroupTypeId"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEMANAGER] = @ssCourseManager"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TEAM] = @ssTeam"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORY] = @ssCategory"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IALEVEL] = @ssIALevel"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SITE] = @ssSite"): parameters);
					string whereCondition = " WHERE [ID] = @ssENGroupssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssGroupName", DbType.String, ssENGroup.ssGroupName);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssGroupDescription", DbType.String, ssENGroup.ssGroupDescription);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENGroup.ssGroupTypeId==0)) {
							sqlCmd.CreateParameter("@ssGroupTypeId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssGroupTypeId", DbType.Int32, ssENGroup.ssGroupTypeId);
						}
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENGroup.ssCourseManager==0)) {
							sqlCmd.CreateParameter("@ssCourseManager", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCourseManager", DbType.Int32, ssENGroup.ssCourseManager);
						}
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENGroup.ssTeam==0)) {
							sqlCmd.CreateParameter("@ssTeam", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssTeam", DbType.Int32, ssENGroup.ssTeam);
						}
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENGroup.ssCategory==0)) {
							sqlCmd.CreateParameter("@ssCategory", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCategory", DbType.Int32, ssENGroup.ssCategory);
						}
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENGroup.ssIALevel== "")) {
							sqlCmd.CreateParameter("@ssIALevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssIALevel", DbType.String, ssENGroup.ssIALevel);
						}
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssSite", DbType.String, ssENGroup.ssSite);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[COURSEMANAGER] = [COURSEMANAGER]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENGroupssId", DbType.Int32, ssENGroup.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateGroup (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENGroupEntity.LocalViewName(null, null) + " (" +
						 " [GROUPNAME]" +
						 ", [GROUPDESCRIPTION]" +
						 ", [GROUPTYPEID]" +
						 ", [COURSEMANAGER]" +
						 ", [TEAM]" +
						 ", [CATEGORY]" +
						 ", [IALEVEL]" +
						 ", [SITE]" +
						 " ) VALUES (" +
						 " @ssGroupName" +
						 ", @ssGroupDescription" +
						 ", @ssGroupTypeId" +
						 ", @ssCourseManager" +
						 ", @ssTeam" +
						 ", @ssCategory" +
						 ", @ssIALevel" +
						 ", @ssSite" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssGroupName", DbType.String, ssENGroup.ssGroupName);
						insertSqlCmd.CreateParameter("@ssGroupDescription", DbType.String, ssENGroup.ssGroupDescription);
						if ((ssENGroup.ssGroupTypeId==0)) {
							insertSqlCmd.CreateParameter("@ssGroupTypeId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssGroupTypeId", DbType.Int32, ssENGroup.ssGroupTypeId);
						}
						if ((ssENGroup.ssCourseManager==0)) {
							insertSqlCmd.CreateParameter("@ssCourseManager", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCourseManager", DbType.Int32, ssENGroup.ssCourseManager);
						}
						if ((ssENGroup.ssTeam==0)) {
							insertSqlCmd.CreateParameter("@ssTeam", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssTeam", DbType.Int32, ssENGroup.ssTeam);
						}
						if ((ssENGroup.ssCategory==0)) {
							insertSqlCmd.CreateParameter("@ssCategory", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCategory", DbType.Int32, ssENGroup.ssCategory);
						}
						if ((ssENGroup.ssIALevel== "")) {
							insertSqlCmd.CreateParameter("@ssIALevel", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssIALevel", DbType.String, ssENGroup.ssIALevel);
						}
						insertSqlCmd.CreateParameter("@ssSite", DbType.String, ssENGroup.ssSite);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateGroup", true), typeof(int));
					} else {
						outParamId = ssENGroup.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteGroup
		/// </summary>

		public static void DeleteGroup(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENGroupEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENGroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteGroup", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetGroup
		/// </summary>

		public static void GetGroup(HeContext heContext, int inParamId, out RCGroupRecord outParamRecord) {
			outParamRecord = new RCGroupRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENGroupEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [GROUPNAME]" +
					 ", [GROUPDESCRIPTION]" +
					 ", [GROUPTYPEID]" +
					 ", [COURSEMANAGER]" +
					 ", [TEAM]" +
					 ", [CATEGORY]" +
					 ", [IALEVEL]" +
					 ", [SITE]" +
					 " FROM " + ENGroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetGroup", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(9, false)
							}
							;
						} else
						throw new DataBaseException(ENGroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetGroupForUpdate
		/// </summary>

		public static void GetGroupForUpdate(HeContext heContext, int inParamId, out RCGroupRecord outParamRecord) {
			outParamRecord = new RCGroupRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENGroupEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [GROUPNAME]" +
					 ", [GROUPDESCRIPTION]" +
					 ", [GROUPTYPEID]" +
					 ", [COURSEMANAGER]" +
					 ", [TEAM]" +
					 ", [CATEGORY]" +
					 ", [IALEVEL]" +
					 ", [SITE]" +
					 "FROM " + ENGroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetGroupForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(9, false)
							}
							;
						} else
						throw new DataBaseException(ENGroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateGroup
		/// </summary>

		public static void UpdateGroup(HeContext heContext, BitArray usedFields, RCGroupRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENGroupEntity.eSpaceId;
				ENGroupEntityRecord ssENGroup = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(9, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENGroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPNAME] = @ssGroupName"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPDESCRIPTION] = @ssGroupDescription"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPTYPEID] = @ssGroupTypeId"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COURSEMANAGER] = @ssCourseManager"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TEAM] = @ssTeam"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORY] = @ssCategory"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IALEVEL] = @ssIALevel"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SITE] = @ssSite"): parameters);
					string whereCondition = " WHERE [ID] = @ssENGroupssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssGroupName", DbType.String, ssENGroup.ssGroupName);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssGroupDescription", DbType.String, ssENGroup.ssGroupDescription);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENGroup.ssGroupTypeId==0)) {
							sqlCmd.CreateParameter("@ssGroupTypeId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssGroupTypeId", DbType.Int32, ssENGroup.ssGroupTypeId);
						}
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENGroup.ssCourseManager==0)) {
							sqlCmd.CreateParameter("@ssCourseManager", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCourseManager", DbType.Int32, ssENGroup.ssCourseManager);
						}
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENGroup.ssTeam==0)) {
							sqlCmd.CreateParameter("@ssTeam", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssTeam", DbType.Int32, ssENGroup.ssTeam);
						}
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENGroup.ssCategory==0)) {
							sqlCmd.CreateParameter("@ssCategory", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCategory", DbType.Int32, ssENGroup.ssCategory);
						}
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENGroup.ssIALevel== "")) {
							sqlCmd.CreateParameter("@ssIALevel", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssIALevel", DbType.String, ssENGroup.ssIALevel);
						}
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssSite", DbType.String, ssENGroup.ssSite);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[COURSEMANAGER] = [COURSEMANAGER]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENGroupssId", DbType.Int32, ssENGroup.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateGroup", true) <= 0)
					throw new DataBaseException(ENGroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENGroup.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Group")]
	public class WORCGroupRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("GroupName")]
		public string varWSGroupName;

		[System.Xml.Serialization.XmlElement("GroupDescription")]
		public string varWSGroupDescription;

		[System.Xml.Serialization.XmlElement("GroupTypeId")]
		public int varWSGroupTypeId;

		[System.Xml.Serialization.XmlElement("CourseManager")]
		public int varWSCourseManager;

		[System.Xml.Serialization.XmlElement("Team")]
		public int varWSTeam;

		[System.Xml.Serialization.XmlElement("Category")]
		public int varWSCategory;

		[System.Xml.Serialization.XmlElement("IALevel")]
		public string varWSIALevel;

		[System.Xml.Serialization.XmlElement("Site")]
		public string varWSSite;

		public WORCGroupRecord() {
			varWSId = (int) 0;
			varWSGroupName = (string) "";
			varWSGroupDescription = (string) "";
			varWSGroupTypeId = (int) 0;
			varWSCourseManager = (int) 0;
			varWSTeam = (int) 0;
			varWSCategory = (int) 0;
			varWSIALevel = (string) "";
			varWSSite = (string) "";
		}

		public WORCGroupRecord(ENGroupEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSGroupName = BaseAppUtils.RemoveControlChars(r.ssGroupName);
			varWSGroupDescription = BaseAppUtils.RemoveControlChars(r.ssGroupDescription);
			varWSGroupTypeId = (int) r.ssGroupTypeId;
			varWSCourseManager = (int) r.ssCourseManager;
			varWSTeam = (int) r.ssTeam;
			varWSCategory = (int) r.ssCategory;
			varWSIALevel = BaseAppUtils.RemoveControlChars(r.ssIALevel);
			varWSSite = BaseAppUtils.RemoveControlChars(r.ssSite);
		}

		public static RLGroupList ToRecordList(WORCGroupRecord[] array) {
			RLGroupList rl = new RLGroupList();
			if (array != null) {
				foreach(WORCGroupRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCGroupRecord[] FromRecordList(RLGroupList rl) {
			WORCGroupRecord[] array = new WORCGroupRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCGroupRecord {
		public static implicit operator WORCGroupRecord(RCGroupRecord r) {
			return new WORCGroupRecord(r.ssENGroup);
		}

		public static implicit operator RCGroupRecord(WORCGroupRecord w) {
			RCGroupRecord r = new RCGroupRecord("");
			if (w != null) {
				r.ssENGroup = w;
			}
			return r;
		}

	}

	partial struct ENGroupEntityRecord {
		public static implicit operator WORCGroupRecord(ENGroupEntityRecord r) {
			return new WORCGroupRecord(r);
		}

		public static implicit operator ENGroupEntityRecord(WORCGroupRecord w) {
			ENGroupEntityRecord r = new ENGroupEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssGroupName = ((string) w.varWSGroupName ?? "");
				r.ssGroupDescription = ((string) w.varWSGroupDescription ?? "");
				r.ssGroupTypeId = (int) w.varWSGroupTypeId;
				r.ssCourseManager = (int) w.varWSCourseManager;
				r.ssTeam = (int) w.varWSTeam;
				r.ssCategory = (int) w.varWSCategory;
				r.ssIALevel = (string) w.varWSIALevel;
				r.ssSite = ((string) w.varWSSite ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLGroupRecordList {
		public WORCGroupRecord[] Array;


		public WORLGroupRecordList(WORCGroupRecord[] r) {
			if (r == null)
			Array = new WORCGroupRecord[0];
			else
			Array = r;
		}
		public WORLGroupRecordList() {
			Array = new WORCGroupRecord[0];
		}

		public WORLGroupRecordList(RLGroupRecordList rl) {
			rl=(RLGroupRecordList) rl.Duplicate();
			Array = new WORCGroupRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCGroupRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLGroupRecordList {
		public static implicit operator RLGroupRecordList(WORCGroupRecord[] array) {
			RLGroupRecordList rl = new RLGroupRecordList();
			if (array != null) {
				foreach(WORCGroupRecord val in array) {
					rl.Append((RCGroupRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCGroupRecord[](RLGroupRecordList rl) {
			WORCGroupRecord[] array = new WORCGroupRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCGroupRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLGroupRecordList {
		public static implicit operator RLGroupRecordList(WORLGroupRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLGroupRecordList(RLGroupRecordList rl) {
			return new WORLGroupRecordList(rl);
		}
		public static implicit operator WORCGroupRecord[](WORLGroupRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLGroupRecordList(WORCGroupRecord[] array) {
			return new WORLGroupRecordList(array);
		}
	}
}

