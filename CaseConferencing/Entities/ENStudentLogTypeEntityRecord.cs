/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentLogTypeEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentLogTypeEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentLogTypeEntity.eSpaceId;
	} // ENStudentLogTypeEntity

	/// <summary>
	/// Entity <code>ENStudentLogTypeEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentLogType</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentLogType", "8DpTLnoj1ECKLYkv_LQ2zw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentLogType", "")]
	[Serializable()]
	public partial struct ENStudentLogTypeEntityRecord: ISerializable, ITypedRecord<ENStudentLogTypeEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdLogType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*07+cZO6BLEK68nUTk4OE2g");
		private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*f4gMhgOhy0+OLrSWLDA4lA");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*C6lO2NQebUCFzYqUzuA9hg");

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LOGTYPE", 50, false, true, false)]
		[System.Xml.Serialization.XmlElement("LogType")]
		private string _ssLogType;
		public string ssLogType {
			get {
				return _ssLogType;
			}
			set {
				if ((_ssLogType!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssLogType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LABEL", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Label")]
		private string _ssLabel;
		public string ssLabel {
			get {
				return _ssLabel;
			}
			set {
				if ((_ssLabel!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssLabel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssOrder = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentLogTypeEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssLogType = "";
			_ssLabel = "";
			_ssOrder = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssLogType = r.ReadText(index++, "StudentLogType.LogType", "");
			ssLabel = r.ReadText(index++, "StudentLogType.Label", "");
			ssOrder = r.ReadInteger(index++, "StudentLogType.Order", 0);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentLogTypeEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentLogTypeEntityRecord a, ENStudentLogTypeEntityRecord b) {
			if (a.ssLogType != b.ssLogType) return false;
			if (a.ssLabel != b.ssLabel) return false;
			if (a.ssOrder != b.ssOrder) return false;
			return true;
		}

		public static bool operator != (ENStudentLogTypeEntityRecord a, ENStudentLogTypeEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentLogTypeEntityRecord)) return false;
			return (this == (ENStudentLogTypeEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssLogType.GetHashCode()
				^ ssLabel.GetHashCode()
				^ ssOrder.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentLogTypeEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssLogType = "";
			_ssLabel = "";
			_ssOrder = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssLogType = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssLabel = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssOrder = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentLogTypeEntityRecord Duplicate() {
			ENStudentLogTypeEntityRecord t;
			t._ssLogType = this._ssLogType;
			t._ssLabel = this._ssLabel;
			t._ssOrder = this._ssOrder;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogType")) VarValue.AppendAttribute(recordElem, "LogType", ssLogType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LogType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "logtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogType")) variable.Value = ssLogType; else variable.Optimized = true;
			} else if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdLogType)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdLogType)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLogType) {
				return ssLogType;
			} else if (key == IdLabel) {
				return ssLabel;
			} else if (key == IdOrder) {
				return ssOrder;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssLogType = (string) other.AttributeGet(IdLogType);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdLogType);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdLogType);
			ssLabel = (string) other.AttributeGet(IdLabel);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdLabel);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLabel);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOrder);
		}
	} // ENStudentLogTypeEntityRecord
	/// <summary>
	/// Static Entity <code>ENStudentLogTypeEntity</code> gets the values for this static entity records in
	///  runtime <code>StudentLogType</code>
	/// </summary>
	partial class ENStudentLogTypeEntity {


		static ENStudentLogTypeEntity() {
			ENStudentLogTypeEntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENStudentLogTypeEntityRecord GetRecordById(string id) {
			return (ENStudentLogTypeEntityRecord) RsseSpaceCaseConferencingCore.ENStudentLogTypeEntity.GetRecordById(id);
		}

		public static ENStudentLogTypeEntityRecord GetRecordByName(string name) {
			return (ENStudentLogTypeEntityRecord) RsseSpaceCaseConferencingCore.ENStudentLogTypeEntity.GetRecordByName(name);
		}

		public static ENStudentLogTypeEntityRecord GetRecordByKey(ObjectKey key) {
			return (ENStudentLogTypeEntityRecord) RsseSpaceCaseConferencingCore.ENStudentLogTypeEntity.GetRecordByKey(key);
		}
	} // ENStudentLogTypeEntity;
	/// <summary>
	/// Structure <code>RCStudentLogTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentLogTypeRecord: ISerializable, ITypedRecord<RCStudentLogTypeRecord> {
		private static readonly GlobalObjectKey IdStudentLogType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*O+r9xki4DgSh6sLDbQOVWg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentLogType")]
		public ENStudentLogTypeEntityRecord ssENStudentLogType;


		public static implicit operator ENStudentLogTypeEntityRecord(RCStudentLogTypeRecord r) {
			return r.ssENStudentLogType;
		}

		public static implicit operator RCStudentLogTypeRecord(ENStudentLogTypeEntityRecord r) {
			RCStudentLogTypeRecord res = new RCStudentLogTypeRecord(null);
			res.ssENStudentLogType = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentLogType.ChangedAttributes = value;
			}
			get {
				return ssENStudentLogType.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentLogTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentLogType = new ENStudentLogTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentLogType.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentLogType.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentLogType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentLogType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentLogTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentLogTypeRecord a, RCStudentLogTypeRecord b) {
			if (a.ssENStudentLogType != b.ssENStudentLogType) return false;
			return true;
		}

		public static bool operator != (RCStudentLogTypeRecord a, RCStudentLogTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentLogTypeRecord)) return false;
			return (this == (RCStudentLogTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentLogType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentLogTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentLogType = new ENStudentLogTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentLogType = (ENStudentLogTypeEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentLogType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentLogType.InternalRecursiveSave();
		}


		public RCStudentLogTypeRecord Duplicate() {
			RCStudentLogTypeRecord t;
			t.ssENStudentLogType = (ENStudentLogTypeEntityRecord) this.ssENStudentLogType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentLogType.ToXml(this, recordElem, "StudentLogType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentlogtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLogType")) variable.Value = ssENStudentLogType; else variable.Optimized = true;
				variable.SetFieldName("studentlogtype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentLogType.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentLogType.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentLogType) {
				return ssENStudentLogType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentLogType.FillFromOther((IRecord) other.AttributeGet(IdStudentLogType));
		}
	} // RCStudentLogTypeRecord
	/// <summary>
	/// RecordList type <code>RLStudentLogTypeRecordList</code> that represents a record list of
	///  <code>StudentLogType</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentLogTypeRecordList: GenericRecordList<RCStudentLogTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentLogTypeRecord GetElementDefaultValue() {
			return new RCStudentLogTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentLogTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentLogTypeRecordList recordlist, Func<RCStudentLogTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentLogTypeRecordList ToList<T>(T[] array, Func <T, RCStudentLogTypeRecord> converter) {
			RLStudentLogTypeRecordList result = new RLStudentLogTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentLogTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentLogTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentLogTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentLogTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentLogTypeRecord> NewList() {
			return new RLStudentLogTypeRecordList();
		}


	} // RLStudentLogTypeRecordList

	/// <summary>
	/// RecordList type <code>RLStudentLogTypeList</code> that represents a record list of <code>Text,
	///  Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentLogTypeList: GenericRecordList<ENStudentLogTypeEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentLogTypeEntityRecord GetElementDefaultValue() {
			return new ENStudentLogTypeEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentLogTypeEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentLogTypeList recordlist, Func<ENStudentLogTypeEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentLogTypeList ToList<T>(T[] array, Func <T, ENStudentLogTypeEntityRecord> converter) {
			RLStudentLogTypeList result = new RLStudentLogTypeList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentLogTypeList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentLogTypeList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentLogTypeList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentLogTypeList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentLogTypeEntityRecord> NewList() {
			return new RLStudentLogTypeList();
		}


	} // RLStudentLogTypeList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetStudentLogType
		/// </summary>

		public static void GetStudentLogType(HeContext heContext, string inParamId, out RCStudentLogTypeRecord outParamRecord) {
			outParamRecord = new RCStudentLogTypeRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentLogTypeEntity.eSpaceId;
				try {
					outParamRecord = ENStudentLogTypeEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [LOGTYPE]" +
						 ", [LABEL]" +
						 ", [ORDER]" +
						 " FROM " + ENStudentLogTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [LOGTYPE] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentLogType", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENStudentLogTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentLogType")]
	public class WORCStudentLogTypeRecord {
		[System.Xml.Serialization.XmlElement("LogType")]
		public string varWSLogType;

		[System.Xml.Serialization.XmlElement("Label")]
		public string varWSLabel;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		public WORCStudentLogTypeRecord() {
			varWSLogType = (string) "";
			varWSLabel = (string) "";
			varWSOrder = (int) 0;
		}

		public WORCStudentLogTypeRecord(ENStudentLogTypeEntityRecord r) {
			varWSLogType = BaseAppUtils.RemoveControlChars(r.ssLogType);
			varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
			varWSOrder = (int) r.ssOrder;
		}

		public static RLStudentLogTypeList ToRecordList(WORCStudentLogTypeRecord[] array) {
			RLStudentLogTypeList rl = new RLStudentLogTypeList();
			if (array != null) {
				foreach(WORCStudentLogTypeRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentLogTypeRecord[] FromRecordList(RLStudentLogTypeList rl) {
			WORCStudentLogTypeRecord[] array = new WORCStudentLogTypeRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentLogTypeRecord {
		public static implicit operator WORCStudentLogTypeRecord(RCStudentLogTypeRecord r) {
			return new WORCStudentLogTypeRecord(r.ssENStudentLogType);
		}

		public static implicit operator RCStudentLogTypeRecord(WORCStudentLogTypeRecord w) {
			RCStudentLogTypeRecord r = new RCStudentLogTypeRecord("");
			if (w != null) {
				r.ssENStudentLogType = w;
			}
			return r;
		}

	}

	partial struct ENStudentLogTypeEntityRecord {
		public static implicit operator WORCStudentLogTypeRecord(ENStudentLogTypeEntityRecord r) {
			return new WORCStudentLogTypeRecord(r);
		}

		public static implicit operator ENStudentLogTypeEntityRecord(WORCStudentLogTypeRecord w) {
			ENStudentLogTypeEntityRecord r = new ENStudentLogTypeEntityRecord("");
			if (w != null) {
				r.ssLogType = ((string) w.varWSLogType ?? "");
				r.ssLabel = ((string) w.varWSLabel ?? "");
				r.ssOrder = (int) w.varWSOrder;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentLogTypeRecordList {
		public WORCStudentLogTypeRecord[] Array;


		public WORLStudentLogTypeRecordList(WORCStudentLogTypeRecord[] r) {
			if (r == null)
			Array = new WORCStudentLogTypeRecord[0];
			else
			Array = r;
		}
		public WORLStudentLogTypeRecordList() {
			Array = new WORCStudentLogTypeRecord[0];
		}

		public WORLStudentLogTypeRecordList(RLStudentLogTypeRecordList rl) {
			rl=(RLStudentLogTypeRecordList) rl.Duplicate();
			Array = new WORCStudentLogTypeRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentLogTypeRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentLogTypeRecordList {
		public static implicit operator RLStudentLogTypeRecordList(WORCStudentLogTypeRecord[] array) {
			RLStudentLogTypeRecordList rl = new RLStudentLogTypeRecordList();
			if (array != null) {
				foreach(WORCStudentLogTypeRecord val in array) {
					rl.Append((RCStudentLogTypeRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentLogTypeRecord[](RLStudentLogTypeRecordList rl) {
			WORCStudentLogTypeRecord[] array = new WORCStudentLogTypeRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentLogTypeRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentLogTypeRecordList {
		public static implicit operator RLStudentLogTypeRecordList(WORLStudentLogTypeRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentLogTypeRecordList(RLStudentLogTypeRecordList rl) {
			return new WORLStudentLogTypeRecordList(rl);
		}
		public static implicit operator WORCStudentLogTypeRecord[](WORLStudentLogTypeRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentLogTypeRecordList(WORCStudentLogTypeRecord[] array) {
			return new WORLStudentLogTypeRecordList(array);
		}
	}
}

