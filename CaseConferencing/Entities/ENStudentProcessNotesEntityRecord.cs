/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentProcessNotesEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentProcessNotesEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentProcessNotesEntity.eSpaceId;
	} // ENStudentProcessNotesEntity

	/// <summary>
	/// Entity <code>ENStudentProcessNotesEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentProcessNotes</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentProcessNotes", "UuDasi4H00yReLZ5Iio0Mg", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentProcessNotes", "")]
	[Serializable()]
	public partial struct ENStudentProcessNotesEntityRecord: ISerializable, ITypedRecord<ENStudentProcessNotesEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*KpGKWg_+KkSWappNyBg20A");
		private static readonly GlobalObjectKey IdStudentMLWProcessId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*vJl6XJQ6wEWGISR7Xp1Qlg");
		private static readonly GlobalObjectKey IdMLWStageId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*fZl9+Eq8pEaxW2AF2tx0Iw");
		private static readonly GlobalObjectKey IdUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*z9bFAScR_keFBh_76sYkpQ");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*kOKsJMKfK0ybRhymHZKbtw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(5, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTMLWPROCESSID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentMLWProcessId")]
		private int _ssStudentMLWProcessId;
		public int ssStudentMLWProcessId {
			get {
				return _ssStudentMLWProcessId;
			}
			set {
				if ((_ssStudentMLWProcessId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentMLWProcessId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MLWSTAGEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("MLWStageId")]
		private string _ssMLWStageId;
		public string ssMLWStageId {
			get {
				return _ssMLWStageId;
			}
			set {
				if ((_ssMLWStageId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssMLWStageId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("UpdatedOn")]
		private DateTime _ssUpdatedOn;
		public DateTime ssUpdatedOn {
			get {
				return _ssUpdatedOn;
			}
			set {
				if ((_ssUpdatedOn!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssDescription = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentProcessNotesEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssStudentMLWProcessId = 0;
			_ssMLWStageId = "";
			_ssUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssDescription = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentProcessNotes.Id", 0);
			ssStudentMLWProcessId = r.ReadEntityReference(index++, "StudentProcessNotes.StudentMLWProcessId", 0);
			ssMLWStageId = r.ReadTextEntityReference(index++, "StudentProcessNotes.MLWStageId", "");
			ssUpdatedOn = r.ReadDateTime(index++, "StudentProcessNotes.UpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssDescription = r.ReadText(index++, "StudentProcessNotes.Description", "");
			ChangedAttributes = new BitArray(5, false);
			OptimizedAttributes = new BitArray(5, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentProcessNotesEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentProcessNotesEntityRecord a, ENStudentProcessNotesEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentMLWProcessId != b.ssStudentMLWProcessId) return false;
			if (a.ssMLWStageId != b.ssMLWStageId) return false;
			if (a.ssUpdatedOn != b.ssUpdatedOn) return false;
			if (a.ssDescription != b.ssDescription) return false;
			return true;
		}

		public static bool operator != (ENStudentProcessNotesEntityRecord a, ENStudentProcessNotesEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentProcessNotesEntityRecord)) return false;
			return (this == (ENStudentProcessNotesEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentMLWProcessId.GetHashCode()
				^ ssMLWStageId.GetHashCode()
				^ ssUpdatedOn.GetHashCode()
				^ ssDescription.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentProcessNotesEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssStudentMLWProcessId = 0;
			_ssMLWStageId = "";
			_ssUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssDescription = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentMLWProcessId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssMLWStageId = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssUpdatedOn = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentProcessNotesEntityRecord Duplicate() {
			ENStudentProcessNotesEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentMLWProcessId = this._ssStudentMLWProcessId;
			t._ssMLWStageId = this._ssMLWStageId;
			t._ssUpdatedOn = this._ssUpdatedOn;
			t._ssDescription = this._ssDescription;
			t.ChangedAttributes = new BitArray(5);
			t.OptimizedAttributes = new BitArray(5);
			for (int i = 0; i < 5; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentMLWProcessId")) VarValue.AppendAttribute(recordElem, "StudentMLWProcessId", ssStudentMLWProcessId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentMLWProcessId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWStageId")) VarValue.AppendAttribute(recordElem, "MLWStageId", ssMLWStageId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MLWStageId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdatedOn")) VarValue.AppendAttribute(recordElem, "UpdatedOn", ssUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "UpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentmlwprocessid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentMLWProcessId")) variable.Value = ssStudentMLWProcessId; else variable.Optimized = true;
			} else if (head == "mlwstageid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWStageId")) variable.Value = ssMLWStageId; else variable.Optimized = true;
			} else if (head == "updatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdatedOn")) variable.Value = ssUpdatedOn; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentMLWProcessId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdMLWStageId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdUpdatedOn)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentMLWProcessId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdMLWStageId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdUpdatedOn)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentMLWProcessId) {
				return ssStudentMLWProcessId;
			} else if (key == IdMLWStageId) {
				return ssMLWStageId;
			} else if (key == IdUpdatedOn) {
				return ssUpdatedOn;
			} else if (key == IdDescription) {
				return ssDescription;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(5);
			OptimizedAttributes = new BitArray(5);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentMLWProcessId = (int) other.AttributeGet(IdStudentMLWProcessId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentMLWProcessId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentMLWProcessId);
			ssMLWStageId = (string) other.AttributeGet(IdMLWStageId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdMLWStageId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdMLWStageId);
			ssUpdatedOn = (DateTime) other.AttributeGet(IdUpdatedOn);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdUpdatedOn);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdUpdatedOn);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdDescription);
		}
	} // ENStudentProcessNotesEntityRecord
	/// <summary>
	/// Structure <code>RCStudentProcessNotesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentProcessNotesRecord: ISerializable, ITypedRecord<RCStudentProcessNotesRecord> {
		private static readonly GlobalObjectKey IdStudentProcessNotes = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ALmJWMdOII9+l6HjQdq+MQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentProcessNotes")]
		public ENStudentProcessNotesEntityRecord ssENStudentProcessNotes;


		public static implicit operator ENStudentProcessNotesEntityRecord(RCStudentProcessNotesRecord r) {
			return r.ssENStudentProcessNotes;
		}

		public static implicit operator RCStudentProcessNotesRecord(ENStudentProcessNotesEntityRecord r) {
			RCStudentProcessNotesRecord res = new RCStudentProcessNotesRecord(null);
			res.ssENStudentProcessNotes = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentProcessNotes.ChangedAttributes = value;
			}
			get {
				return ssENStudentProcessNotes.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentProcessNotesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentProcessNotes = new ENStudentProcessNotesEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentProcessNotes.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentProcessNotes.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentProcessNotes.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentProcessNotes.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentProcessNotesRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentProcessNotesRecord a, RCStudentProcessNotesRecord b) {
			if (a.ssENStudentProcessNotes != b.ssENStudentProcessNotes) return false;
			return true;
		}

		public static bool operator != (RCStudentProcessNotesRecord a, RCStudentProcessNotesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentProcessNotesRecord)) return false;
			return (this == (RCStudentProcessNotesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentProcessNotes.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentProcessNotesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentProcessNotes = new ENStudentProcessNotesEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentProcessNotes = (ENStudentProcessNotesEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentProcessNotes.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentProcessNotes.InternalRecursiveSave();
		}


		public RCStudentProcessNotesRecord Duplicate() {
			RCStudentProcessNotesRecord t;
			t.ssENStudentProcessNotes = (ENStudentProcessNotesEntityRecord) this.ssENStudentProcessNotes.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentProcessNotes.ToXml(this, recordElem, "StudentProcessNotes", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentprocessnotes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentProcessNotes")) variable.Value = ssENStudentProcessNotes; else variable.Optimized = true;
				variable.SetFieldName("studentprocessnotes");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentProcessNotes.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentProcessNotes.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentProcessNotes) {
				return ssENStudentProcessNotes;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentProcessNotes.FillFromOther((IRecord) other.AttributeGet(IdStudentProcessNotes));
		}
	} // RCStudentProcessNotesRecord
	/// <summary>
	/// RecordList type <code>RLStudentProcessNotesRecordList</code> that represents a record list of
	///  <code>StudentProcessNotes</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentProcessNotesRecordList: GenericRecordList<RCStudentProcessNotesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentProcessNotesRecord GetElementDefaultValue() {
			return new RCStudentProcessNotesRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentProcessNotesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentProcessNotesRecordList recordlist, Func<RCStudentProcessNotesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentProcessNotesRecordList ToList<T>(T[] array, Func <T, RCStudentProcessNotesRecord> converter) {
			RLStudentProcessNotesRecordList result = new RLStudentProcessNotesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentProcessNotesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentProcessNotesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentProcessNotesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentProcessNotesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentProcessNotesRecord> NewList() {
			return new RLStudentProcessNotesRecordList();
		}


	} // RLStudentProcessNotesRecordList

	/// <summary>
	/// RecordList type <code>RLStudentProcessNotesList</code> that represents a record list of <code>Text,
	///  DateTime, Integer, StudentMLWProcessIdentifier, MLWStagesIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentProcessNotesList: GenericRecordList<ENStudentProcessNotesEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentProcessNotesEntityRecord GetElementDefaultValue() {
			return new ENStudentProcessNotesEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentProcessNotesEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentProcessNotesList recordlist, Func<ENStudentProcessNotesEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentProcessNotesList ToList<T>(T[] array, Func <T, ENStudentProcessNotesEntityRecord> converter) {
			RLStudentProcessNotesList result = new RLStudentProcessNotesList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentProcessNotesList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentProcessNotesList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentProcessNotesList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentProcessNotesList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentProcessNotesEntityRecord> NewList() {
			return new RLStudentProcessNotesList();
		}


	} // RLStudentProcessNotesList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentProcessNotes
		/// </summary>

		public static void CreateStudentProcessNotes(HeContext heContext, RCStudentProcessNotesRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentProcessNotesEntity.eSpaceId;
				ENStudentProcessNotesEntityRecord ssENStudentProcessNotes = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentProcessNotesEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTMLWPROCESSID]" +
					 ", [MLWSTAGEID]" +
					 ", [UPDATEDON]" +
					 ", [DESCRIPTION]" +
					 " ) VALUES (" +
					 " @ssStudentMLWProcessId" +
					 ", @ssMLWStageId" +
					 ", @ssUpdatedOn" +
					 ", @ssDescription" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudentProcessNotes.ssStudentMLWProcessId==0)) {
						insertSqlCmd.CreateParameter("@ssStudentMLWProcessId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentMLWProcessId", DbType.Int32, ssENStudentProcessNotes.ssStudentMLWProcessId);
					}
					if ((ssENStudentProcessNotes.ssMLWStageId== "")) {
						insertSqlCmd.CreateParameter("@ssMLWStageId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssMLWStageId", DbType.String, ssENStudentProcessNotes.ssMLWStageId);
					}
					insertSqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENStudentProcessNotes.ssUpdatedOn);
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentProcessNotes.ssDescription);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentProcessNotes", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentProcessNotes
		/// </summary>

		public static void CreateOrUpdateStudentProcessNotes(HeContext heContext, BitArray usedFields, RCStudentProcessNotesRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentProcessNotesEntity.eSpaceId;
				ENStudentProcessNotesEntityRecord ssENStudentProcessNotes = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentProcessNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTMLWPROCESSID] = @ssStudentMLWProcessId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWSTAGEID] = @ssMLWStageId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDON] = @ssUpdatedOn"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentProcessNotesssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentProcessNotes.ssStudentMLWProcessId==0)) {
							sqlCmd.CreateParameter("@ssStudentMLWProcessId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentMLWProcessId", DbType.Int32, ssENStudentProcessNotes.ssStudentMLWProcessId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStudentProcessNotes.ssMLWStageId== "")) {
							sqlCmd.CreateParameter("@ssMLWStageId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMLWStageId", DbType.String, ssENStudentProcessNotes.ssMLWStageId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENStudentProcessNotes.ssUpdatedOn);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentProcessNotes.ssDescription);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[UPDATEDON] = [UPDATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentProcessNotesssId", DbType.Int32, ssENStudentProcessNotes.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentProcessNotes (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentProcessNotesEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTMLWPROCESSID]" +
						 ", [MLWSTAGEID]" +
						 ", [UPDATEDON]" +
						 ", [DESCRIPTION]" +
						 " ) VALUES (" +
						 " @ssStudentMLWProcessId" +
						 ", @ssMLWStageId" +
						 ", @ssUpdatedOn" +
						 ", @ssDescription" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudentProcessNotes.ssStudentMLWProcessId==0)) {
							insertSqlCmd.CreateParameter("@ssStudentMLWProcessId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentMLWProcessId", DbType.Int32, ssENStudentProcessNotes.ssStudentMLWProcessId);
						}
						if ((ssENStudentProcessNotes.ssMLWStageId== "")) {
							insertSqlCmd.CreateParameter("@ssMLWStageId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssMLWStageId", DbType.String, ssENStudentProcessNotes.ssMLWStageId);
						}
						insertSqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENStudentProcessNotes.ssUpdatedOn);
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentProcessNotes.ssDescription);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentProcessNotes", true), typeof(int));
					} else {
						outParamId = ssENStudentProcessNotes.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentProcessNotes
		/// </summary>

		public static void DeleteStudentProcessNotes(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentProcessNotesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentProcessNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentProcessNotes", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentProcessNotes
		/// </summary>

		public static void GetStudentProcessNotes(HeContext heContext, int inParamId, out RCStudentProcessNotesRecord outParamRecord) {
			outParamRecord = new RCStudentProcessNotesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentProcessNotesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTMLWPROCESSID]" +
					 ", [MLWSTAGEID]" +
					 ", [UPDATEDON]" +
					 ", [DESCRIPTION]" +
					 " FROM " + ENStudentProcessNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentProcessNotes", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentProcessNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentProcessNotesForUpdate
		/// </summary>

		public static void GetStudentProcessNotesForUpdate(HeContext heContext, int inParamId, out RCStudentProcessNotesRecord outParamRecord) {
			outParamRecord = new RCStudentProcessNotesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentProcessNotesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTMLWPROCESSID]" +
					 ", [MLWSTAGEID]" +
					 ", [UPDATEDON]" +
					 ", [DESCRIPTION]" +
					 "FROM " + ENStudentProcessNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentProcessNotesForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentProcessNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentProcessNotes
		/// </summary>

		public static void UpdateStudentProcessNotes(HeContext heContext, BitArray usedFields, RCStudentProcessNotesRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentProcessNotesEntity.eSpaceId;
				ENStudentProcessNotesEntityRecord ssENStudentProcessNotes = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentProcessNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTMLWPROCESSID] = @ssStudentMLWProcessId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWSTAGEID] = @ssMLWStageId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDON] = @ssUpdatedOn"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentProcessNotesssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentProcessNotes.ssStudentMLWProcessId==0)) {
							sqlCmd.CreateParameter("@ssStudentMLWProcessId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentMLWProcessId", DbType.Int32, ssENStudentProcessNotes.ssStudentMLWProcessId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStudentProcessNotes.ssMLWStageId== "")) {
							sqlCmd.CreateParameter("@ssMLWStageId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMLWStageId", DbType.String, ssENStudentProcessNotes.ssMLWStageId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENStudentProcessNotes.ssUpdatedOn);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentProcessNotes.ssDescription);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[UPDATEDON] = [UPDATEDON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentProcessNotesssId", DbType.Int32, ssENStudentProcessNotes.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentProcessNotes", true) <= 0)
					throw new DataBaseException(ENStudentProcessNotesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentProcessNotes.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentProcessNotes")]
	public class WORCStudentProcessNotesRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentMLWProcessId")]
		public int varWSStudentMLWProcessId;

		[System.Xml.Serialization.XmlElement("MLWStageId")]
		public string varWSMLWStageId;

		[System.Xml.Serialization.XmlElement("UpdatedOn")]
		public DateTime varWSUpdatedOn;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		public WORCStudentProcessNotesRecord() {
			varWSId = (int) 0;
			varWSStudentMLWProcessId = (int) 0;
			varWSMLWStageId = (string) "";
			varWSUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSDescription = (string) "";
		}

		public WORCStudentProcessNotesRecord(ENStudentProcessNotesEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentMLWProcessId = (int) r.ssStudentMLWProcessId;
			varWSMLWStageId = BaseAppUtils.RemoveControlChars(r.ssMLWStageId);
			varWSUpdatedOn = (DateTime) r.ssUpdatedOn;
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
		}

		public static RLStudentProcessNotesList ToRecordList(WORCStudentProcessNotesRecord[] array) {
			RLStudentProcessNotesList rl = new RLStudentProcessNotesList();
			if (array != null) {
				foreach(WORCStudentProcessNotesRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentProcessNotesRecord[] FromRecordList(RLStudentProcessNotesList rl) {
			WORCStudentProcessNotesRecord[] array = new WORCStudentProcessNotesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentProcessNotesRecord {
		public static implicit operator WORCStudentProcessNotesRecord(RCStudentProcessNotesRecord r) {
			return new WORCStudentProcessNotesRecord(r.ssENStudentProcessNotes);
		}

		public static implicit operator RCStudentProcessNotesRecord(WORCStudentProcessNotesRecord w) {
			RCStudentProcessNotesRecord r = new RCStudentProcessNotesRecord("");
			if (w != null) {
				r.ssENStudentProcessNotes = w;
			}
			return r;
		}

	}

	partial struct ENStudentProcessNotesEntityRecord {
		public static implicit operator WORCStudentProcessNotesRecord(ENStudentProcessNotesEntityRecord r) {
			return new WORCStudentProcessNotesRecord(r);
		}

		public static implicit operator ENStudentProcessNotesEntityRecord(WORCStudentProcessNotesRecord w) {
			ENStudentProcessNotesEntityRecord r = new ENStudentProcessNotesEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentMLWProcessId = (int) w.varWSStudentMLWProcessId;
				r.ssMLWStageId = (string) w.varWSMLWStageId;
				r.ssUpdatedOn = (DateTime) w.varWSUpdatedOn;
				r.ssDescription = ((string) w.varWSDescription ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentProcessNotesRecordList {
		public WORCStudentProcessNotesRecord[] Array;


		public WORLStudentProcessNotesRecordList(WORCStudentProcessNotesRecord[] r) {
			if (r == null)
			Array = new WORCStudentProcessNotesRecord[0];
			else
			Array = r;
		}
		public WORLStudentProcessNotesRecordList() {
			Array = new WORCStudentProcessNotesRecord[0];
		}

		public WORLStudentProcessNotesRecordList(RLStudentProcessNotesRecordList rl) {
			rl=(RLStudentProcessNotesRecordList) rl.Duplicate();
			Array = new WORCStudentProcessNotesRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentProcessNotesRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentProcessNotesRecordList {
		public static implicit operator RLStudentProcessNotesRecordList(WORCStudentProcessNotesRecord[] array) {
			RLStudentProcessNotesRecordList rl = new RLStudentProcessNotesRecordList();
			if (array != null) {
				foreach(WORCStudentProcessNotesRecord val in array) {
					rl.Append((RCStudentProcessNotesRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentProcessNotesRecord[](RLStudentProcessNotesRecordList rl) {
			WORCStudentProcessNotesRecord[] array = new WORCStudentProcessNotesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentProcessNotesRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentProcessNotesRecordList {
		public static implicit operator RLStudentProcessNotesRecordList(WORLStudentProcessNotesRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentProcessNotesRecordList(RLStudentProcessNotesRecordList rl) {
			return new WORLStudentProcessNotesRecordList(rl);
		}
		public static implicit operator WORCStudentProcessNotesRecord[](WORLStudentProcessNotesRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentProcessNotesRecordList(WORCStudentProcessNotesRecord[] array) {
			return new WORLStudentProcessNotesRecordList(array);
		}
	}
}

