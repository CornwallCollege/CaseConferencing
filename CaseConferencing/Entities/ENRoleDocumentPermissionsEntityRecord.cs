/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENRoleDocumentPermissionsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENRoleDocumentPermissionsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENRoleDocumentPermissionsEntity.eSpaceId;
	} // ENRoleDocumentPermissionsEntity

	/// <summary>
	/// Entity <code>ENRoleDocumentPermissionsEntityRecord</code> that represents the Service Studio entity
	///  <code>RoleDocumentPermissions</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("RoleDocumentPermissions", "+fy0Fkug2EGwIi2mRJlKAw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_RoleDocumentPermissions", "")]
	[Serializable()]
	public partial struct ENRoleDocumentPermissionsEntityRecord: ISerializable, ITypedRecord<ENRoleDocumentPermissionsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*n0uACfwZGU2vkoqmdAv6mw");
		private static readonly GlobalObjectKey IdDocumentID = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*G+pMWTBw4UWJSOnYN7lWwA");
		private static readonly GlobalObjectKey IdRoleID = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*OVkkBAJdjEOTOZZr8t72AQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("DocumentID")]
		private int _ssDocumentID;
		public int ssDocumentID {
			get {
				return _ssDocumentID;
			}
			set {
				if ((_ssDocumentID!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssDocumentID = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ROLEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RoleID")]
		private int _ssRoleID;
		public int ssRoleID {
			get {
				return _ssRoleID;
			}
			set {
				if ((_ssRoleID!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssRoleID = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENRoleDocumentPermissionsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssDocumentID = 0;
			_ssRoleID = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "RoleDocumentPermissions.Id", 0);
			ssDocumentID = r.ReadEntityReference(index++, "RoleDocumentPermissions.DocumentID", 0);
			ssRoleID = r.ReadEntityReference(index++, "RoleDocumentPermissions.RoleID", 0);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENRoleDocumentPermissionsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENRoleDocumentPermissionsEntityRecord a, ENRoleDocumentPermissionsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssDocumentID != b.ssDocumentID) return false;
			if (a.ssRoleID != b.ssRoleID) return false;
			return true;
		}

		public static bool operator != (ENRoleDocumentPermissionsEntityRecord a, ENRoleDocumentPermissionsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENRoleDocumentPermissionsEntityRecord)) return false;
			return (this == (ENRoleDocumentPermissionsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssDocumentID.GetHashCode()
				^ ssRoleID.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENRoleDocumentPermissionsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssDocumentID = 0;
			_ssRoleID = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssDocumentID = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssRoleID = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENRoleDocumentPermissionsEntityRecord Duplicate() {
			ENRoleDocumentPermissionsEntityRecord t;
			t._ssId = this._ssId;
			t._ssDocumentID = this._ssDocumentID;
			t._ssRoleID = this._ssRoleID;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocumentID")) VarValue.AppendAttribute(recordElem, "DocumentID", ssDocumentID, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "DocumentID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RoleID")) VarValue.AppendAttribute(recordElem, "RoleID", ssRoleID, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RoleID");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "documentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocumentID")) variable.Value = ssDocumentID; else variable.Optimized = true;
			} else if (head == "roleid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RoleID")) variable.Value = ssRoleID; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdDocumentID)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdRoleID)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdDocumentID)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdRoleID)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdDocumentID) {
				return ssDocumentID;
			} else if (key == IdRoleID) {
				return ssRoleID;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssDocumentID = (int) other.AttributeGet(IdDocumentID);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdDocumentID);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdDocumentID);
			ssRoleID = (int) other.AttributeGet(IdRoleID);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdRoleID);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdRoleID);
		}
	} // ENRoleDocumentPermissionsEntityRecord
	/// <summary>
	/// Structure <code>RCRoleDocumentPermissionsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRoleDocumentPermissionsRecord: ISerializable, ITypedRecord<RCRoleDocumentPermissionsRecord> {
		private static readonly GlobalObjectKey IdRoleDocumentPermissions = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*8SHNUTfyjz2B8wlrz+57vA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RoleDocumentPermissions")]
		public ENRoleDocumentPermissionsEntityRecord ssENRoleDocumentPermissions;


		public static implicit operator ENRoleDocumentPermissionsEntityRecord(RCRoleDocumentPermissionsRecord r) {
			return r.ssENRoleDocumentPermissions;
		}

		public static implicit operator RCRoleDocumentPermissionsRecord(ENRoleDocumentPermissionsEntityRecord r) {
			RCRoleDocumentPermissionsRecord res = new RCRoleDocumentPermissionsRecord(null);
			res.ssENRoleDocumentPermissions = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENRoleDocumentPermissions.ChangedAttributes = value;
			}
			get {
				return ssENRoleDocumentPermissions.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCRoleDocumentPermissionsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRoleDocumentPermissions = new ENRoleDocumentPermissionsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRoleDocumentPermissions.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENRoleDocumentPermissions.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENRoleDocumentPermissions.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRoleDocumentPermissions.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRoleDocumentPermissionsRecord r) {
			this = r;
		}


		public static bool operator == (RCRoleDocumentPermissionsRecord a, RCRoleDocumentPermissionsRecord b) {
			if (a.ssENRoleDocumentPermissions != b.ssENRoleDocumentPermissions) return false;
			return true;
		}

		public static bool operator != (RCRoleDocumentPermissionsRecord a, RCRoleDocumentPermissionsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRoleDocumentPermissionsRecord)) return false;
			return (this == (RCRoleDocumentPermissionsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRoleDocumentPermissions.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRoleDocumentPermissionsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRoleDocumentPermissions = new ENRoleDocumentPermissionsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRoleDocumentPermissions = (ENRoleDocumentPermissionsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENRoleDocumentPermissions.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRoleDocumentPermissions.InternalRecursiveSave();
		}


		public RCRoleDocumentPermissionsRecord Duplicate() {
			RCRoleDocumentPermissionsRecord t;
			t.ssENRoleDocumentPermissions = (ENRoleDocumentPermissionsEntityRecord) this.ssENRoleDocumentPermissions.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRoleDocumentPermissions.ToXml(this, recordElem, "RoleDocumentPermissions", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "roledocumentpermissions") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RoleDocumentPermissions")) variable.Value = ssENRoleDocumentPermissions; else variable.Optimized = true;
				variable.SetFieldName("roledocumentpermissions");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENRoleDocumentPermissions.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENRoleDocumentPermissions.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRoleDocumentPermissions) {
				return ssENRoleDocumentPermissions;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRoleDocumentPermissions.FillFromOther((IRecord) other.AttributeGet(IdRoleDocumentPermissions));
		}
	} // RCRoleDocumentPermissionsRecord
	/// <summary>
	/// RecordList type <code>RLRoleDocumentPermissionsRecordList</code> that represents a record list of
	///  <code>RoleDocumentPermissions</code>
	/// </summary>
	[Serializable()]
	public partial class RLRoleDocumentPermissionsRecordList: GenericRecordList<RCRoleDocumentPermissionsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRoleDocumentPermissionsRecord GetElementDefaultValue() {
			return new RCRoleDocumentPermissionsRecord("");
		}

		public T[] ToArray<T>(Func<RCRoleDocumentPermissionsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRoleDocumentPermissionsRecordList recordlist, Func<RCRoleDocumentPermissionsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRoleDocumentPermissionsRecordList ToList<T>(T[] array, Func <T, RCRoleDocumentPermissionsRecord> converter) {
			RLRoleDocumentPermissionsRecordList result = new RLRoleDocumentPermissionsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRoleDocumentPermissionsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleDocumentPermissionsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleDocumentPermissionsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRoleDocumentPermissionsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRoleDocumentPermissionsRecord> NewList() {
			return new RLRoleDocumentPermissionsRecordList();
		}


	} // RLRoleDocumentPermissionsRecordList

	/// <summary>
	/// RecordList type <code>RLRoleDocumentPermissionsList</code> that represents a record list of
	///  <code>RoleIdentifier, Integer, DocumentsIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLRoleDocumentPermissionsList: GenericRecordList<ENRoleDocumentPermissionsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENRoleDocumentPermissionsEntityRecord GetElementDefaultValue() {
			return new ENRoleDocumentPermissionsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENRoleDocumentPermissionsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRoleDocumentPermissionsList recordlist, Func<ENRoleDocumentPermissionsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRoleDocumentPermissionsList ToList<T>(T[] array, Func <T, ENRoleDocumentPermissionsEntityRecord> converter) {
			RLRoleDocumentPermissionsList result = new RLRoleDocumentPermissionsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRoleDocumentPermissionsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleDocumentPermissionsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRoleDocumentPermissionsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRoleDocumentPermissionsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENRoleDocumentPermissionsEntityRecord> NewList() {
			return new RLRoleDocumentPermissionsList();
		}


	} // RLRoleDocumentPermissionsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateRoleDocumentPermissions
		/// </summary>

		public static void CreateRoleDocumentPermissions(HeContext heContext, RCRoleDocumentPermissionsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleDocumentPermissionsEntity.eSpaceId;
				ENRoleDocumentPermissionsEntityRecord ssENRoleDocumentPermissions = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENRoleDocumentPermissionsEntity.LocalViewName(null, null) + " (" +
					 " [DOCUMENTID]" +
					 ", [ROLEID]" +
					 " ) VALUES (" +
					 " @ssDocumentID" +
					 ", @ssRoleID" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENRoleDocumentPermissions.ssDocumentID==0)) {
						insertSqlCmd.CreateParameter("@ssDocumentID", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDocumentID", DbType.Int32, ssENRoleDocumentPermissions.ssDocumentID);
					}
					if ((ssENRoleDocumentPermissions.ssRoleID==0)) {
						insertSqlCmd.CreateParameter("@ssRoleID", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRoleID", DbType.Int32, ssENRoleDocumentPermissions.ssRoleID);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateRoleDocumentPermissions", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateRoleDocumentPermissions
		/// </summary>

		public static void CreateOrUpdateRoleDocumentPermissions(HeContext heContext, BitArray usedFields, RCRoleDocumentPermissionsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleDocumentPermissionsEntity.eSpaceId;
				ENRoleDocumentPermissionsEntityRecord ssENRoleDocumentPermissions = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRoleDocumentPermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentID"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ROLEID] = @ssRoleID"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRoleDocumentPermissionsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENRoleDocumentPermissions.ssDocumentID==0)) {
							sqlCmd.CreateParameter("@ssDocumentID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentID", DbType.Int32, ssENRoleDocumentPermissions.ssDocumentID);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENRoleDocumentPermissions.ssRoleID==0)) {
							sqlCmd.CreateParameter("@ssRoleID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRoleID", DbType.Int32, ssENRoleDocumentPermissions.ssRoleID);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ROLEID] = [ROLEID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRoleDocumentPermissionsssId", DbType.Int32, ssENRoleDocumentPermissions.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateRoleDocumentPermissions (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENRoleDocumentPermissionsEntity.LocalViewName(null, null) + " (" +
						 " [DOCUMENTID]" +
						 ", [ROLEID]" +
						 " ) VALUES (" +
						 " @ssDocumentID" +
						 ", @ssRoleID" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENRoleDocumentPermissions.ssDocumentID==0)) {
							insertSqlCmd.CreateParameter("@ssDocumentID", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDocumentID", DbType.Int32, ssENRoleDocumentPermissions.ssDocumentID);
						}
						if ((ssENRoleDocumentPermissions.ssRoleID==0)) {
							insertSqlCmd.CreateParameter("@ssRoleID", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRoleID", DbType.Int32, ssENRoleDocumentPermissions.ssRoleID);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateRoleDocumentPermissions", true), typeof(int));
					} else {
						outParamId = ssENRoleDocumentPermissions.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteRoleDocumentPermissions
		/// </summary>

		public static void DeleteRoleDocumentPermissions(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleDocumentPermissionsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENRoleDocumentPermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteRoleDocumentPermissions", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRoleDocumentPermissions
		/// </summary>

		public static void GetRoleDocumentPermissions(HeContext heContext, int inParamId, out RCRoleDocumentPermissionsRecord outParamRecord) {
			outParamRecord = new RCRoleDocumentPermissionsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleDocumentPermissionsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [DOCUMENTID]" +
					 ", [ROLEID]" +
					 " FROM " + ENRoleDocumentPermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRoleDocumentPermissions", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENRoleDocumentPermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRoleDocumentPermissionsForUpdate
		/// </summary>

		public static void GetRoleDocumentPermissionsForUpdate(HeContext heContext, int inParamId, out RCRoleDocumentPermissionsRecord outParamRecord) {
			outParamRecord = new RCRoleDocumentPermissionsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleDocumentPermissionsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [DOCUMENTID]" +
					 ", [ROLEID]" +
					 "FROM " + ENRoleDocumentPermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRoleDocumentPermissionsForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENRoleDocumentPermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateRoleDocumentPermissions
		/// </summary>

		public static void UpdateRoleDocumentPermissions(HeContext heContext, BitArray usedFields, RCRoleDocumentPermissionsRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRoleDocumentPermissionsEntity.eSpaceId;
				ENRoleDocumentPermissionsEntityRecord ssENRoleDocumentPermissions = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRoleDocumentPermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentID"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ROLEID] = @ssRoleID"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRoleDocumentPermissionsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENRoleDocumentPermissions.ssDocumentID==0)) {
							sqlCmd.CreateParameter("@ssDocumentID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentID", DbType.Int32, ssENRoleDocumentPermissions.ssDocumentID);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENRoleDocumentPermissions.ssRoleID==0)) {
							sqlCmd.CreateParameter("@ssRoleID", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRoleID", DbType.Int32, ssENRoleDocumentPermissions.ssRoleID);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ROLEID] = [ROLEID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRoleDocumentPermissionsssId", DbType.Int32, ssENRoleDocumentPermissions.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateRoleDocumentPermissions", true) <= 0)
					throw new DataBaseException(ENRoleDocumentPermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENRoleDocumentPermissions.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("RoleDocumentPermissions")]
	public class WORCRoleDocumentPermissionsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("DocumentID")]
		public int varWSDocumentID;

		[System.Xml.Serialization.XmlElement("RoleID")]
		public int varWSRoleID;

		public WORCRoleDocumentPermissionsRecord() {
			varWSId = (int) 0;
			varWSDocumentID = (int) 0;
			varWSRoleID = (int) 0;
		}

		public WORCRoleDocumentPermissionsRecord(ENRoleDocumentPermissionsEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSDocumentID = (int) r.ssDocumentID;
			varWSRoleID = (int) r.ssRoleID;
		}

		public static RLRoleDocumentPermissionsList ToRecordList(WORCRoleDocumentPermissionsRecord[] array) {
			RLRoleDocumentPermissionsList rl = new RLRoleDocumentPermissionsList();
			if (array != null) {
				foreach(WORCRoleDocumentPermissionsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRoleDocumentPermissionsRecord[] FromRecordList(RLRoleDocumentPermissionsList rl) {
			WORCRoleDocumentPermissionsRecord[] array = new WORCRoleDocumentPermissionsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCRoleDocumentPermissionsRecord {
		public static implicit operator WORCRoleDocumentPermissionsRecord(RCRoleDocumentPermissionsRecord r) {
			return new WORCRoleDocumentPermissionsRecord(r.ssENRoleDocumentPermissions);
		}

		public static implicit operator RCRoleDocumentPermissionsRecord(WORCRoleDocumentPermissionsRecord w) {
			RCRoleDocumentPermissionsRecord r = new RCRoleDocumentPermissionsRecord("");
			if (w != null) {
				r.ssENRoleDocumentPermissions = w;
			}
			return r;
		}

	}

	partial struct ENRoleDocumentPermissionsEntityRecord {
		public static implicit operator WORCRoleDocumentPermissionsRecord(ENRoleDocumentPermissionsEntityRecord r) {
			return new WORCRoleDocumentPermissionsRecord(r);
		}

		public static implicit operator ENRoleDocumentPermissionsEntityRecord(WORCRoleDocumentPermissionsRecord w) {
			ENRoleDocumentPermissionsEntityRecord r = new ENRoleDocumentPermissionsEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssDocumentID = (int) w.varWSDocumentID;
				r.ssRoleID = (int) w.varWSRoleID;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRoleDocumentPermissionsRecordList {
		public WORCRoleDocumentPermissionsRecord[] Array;


		public WORLRoleDocumentPermissionsRecordList(WORCRoleDocumentPermissionsRecord[] r) {
			if (r == null)
			Array = new WORCRoleDocumentPermissionsRecord[0];
			else
			Array = r;
		}
		public WORLRoleDocumentPermissionsRecordList() {
			Array = new WORCRoleDocumentPermissionsRecord[0];
		}

		public WORLRoleDocumentPermissionsRecordList(RLRoleDocumentPermissionsRecordList rl) {
			rl=(RLRoleDocumentPermissionsRecordList) rl.Duplicate();
			Array = new WORCRoleDocumentPermissionsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRoleDocumentPermissionsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRoleDocumentPermissionsRecordList {
		public static implicit operator RLRoleDocumentPermissionsRecordList(WORCRoleDocumentPermissionsRecord[] array) {
			RLRoleDocumentPermissionsRecordList rl = new RLRoleDocumentPermissionsRecordList();
			if (array != null) {
				foreach(WORCRoleDocumentPermissionsRecord val in array) {
					rl.Append((RCRoleDocumentPermissionsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRoleDocumentPermissionsRecord[](RLRoleDocumentPermissionsRecordList rl) {
			WORCRoleDocumentPermissionsRecord[] array = new WORCRoleDocumentPermissionsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRoleDocumentPermissionsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRoleDocumentPermissionsRecordList {
		public static implicit operator RLRoleDocumentPermissionsRecordList(WORLRoleDocumentPermissionsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRoleDocumentPermissionsRecordList(RLRoleDocumentPermissionsRecordList rl) {
			return new WORLRoleDocumentPermissionsRecordList(rl);
		}
		public static implicit operator WORCRoleDocumentPermissionsRecord[](WORLRoleDocumentPermissionsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRoleDocumentPermissionsRecordList(WORCRoleDocumentPermissionsRecord[] array) {
			return new WORLRoleDocumentPermissionsRecordList(array);
		}
	}
}

