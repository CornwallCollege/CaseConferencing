/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENUpdatesEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENUpdatesEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENUpdatesEntity.eSpaceId;
	} // ENUpdatesEntity

	/// <summary>
	/// Entity <code>ENUpdatesEntityRecord</code> that represents the Service Studio entity
	///  <code>Updates</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Updates", "JvvUTp8MKUCsMr1ujB1v5g", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_Updates", "")]
	[Serializable()]
	public partial struct ENUpdatesEntityRecord: ISerializable, ITypedRecord<ENUpdatesEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*KUEr41+hXUWCZtShpPcjgQ");
		private static readonly GlobalObjectKey IdUpdateDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*p5nzjIi+9068G5wcqG4qrA");
		private static readonly GlobalObjectKey IdUpdateSubmittedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*mlQsgRR+ck+Vd2pefApLLA");
		private static readonly GlobalObjectKey IdUpdateTitle = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ajGd5JWlSEGpdT85y0w5nw");
		private static readonly GlobalObjectKey IdUpdateHTML = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Pr7r4e8B90emEWbOenmciQ");
		private static readonly GlobalObjectKey IdDocument = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*8wZVBj1EW0++2K3453V6+w");
		private static readonly GlobalObjectKey IdActive = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ANnkiktGr0Kx9w9vjNxT3Q");
		private static readonly GlobalObjectKey IdInternalMessageType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*AtyoKXFabkaRgwEHzBreug");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(8, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATEDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("UpdateDate")]
		private DateTime _ssUpdateDate;
		public DateTime ssUpdateDate {
			get {
				return _ssUpdateDate;
			}
			set {
				if ((_ssUpdateDate!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssUpdateDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATESUBMITTEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("UpdateSubmittedBy")]
		private int _ssUpdateSubmittedBy;
		public int ssUpdateSubmittedBy {
			get {
				return _ssUpdateSubmittedBy;
			}
			set {
				if ((_ssUpdateSubmittedBy!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssUpdateSubmittedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATETITLE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("UpdateTitle")]
		private string _ssUpdateTitle;
		public string ssUpdateTitle {
			get {
				return _ssUpdateTitle;
			}
			set {
				if ((_ssUpdateTitle!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssUpdateTitle = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATEHTML", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("UpdateHTML")]
		private string _ssUpdateHTML;
		public string ssUpdateHTML {
			get {
				return _ssUpdateHTML;
			}
			set {
				if ((_ssUpdateHTML!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssUpdateHTML = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENT", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Document")]
		private int _ssDocument;
		public int ssDocument {
			get {
				return _ssDocument;
			}
			set {
				if ((_ssDocument!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssDocument = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Active")]
		private bool _ssActive;
		public bool ssActive {
			get {
				return _ssActive;
			}
			set {
				if ((_ssActive!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssActive = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("INTERNALMESSAGETYPE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("InternalMessageType")]
		private int _ssInternalMessageType;
		public int ssInternalMessageType {
			get {
				return _ssInternalMessageType;
			}
			set {
				if ((_ssInternalMessageType!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssInternalMessageType = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENUpdatesEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(8, true);
			OptimizedAttributes = new BitArray(8, false);
			_ssId = 0;
			_ssUpdateDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssUpdateSubmittedBy = 0;
			_ssUpdateTitle = "";
			_ssUpdateHTML = "";
			_ssDocument = 0;
			_ssActive = false;
			_ssInternalMessageType = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Updates.Id", 0);
			ssUpdateDate = r.ReadDate(index++, "Updates.UpdateDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssUpdateSubmittedBy = r.ReadEntityReference(index++, "Updates.UpdateSubmittedBy", 0);
			ssUpdateTitle = r.ReadText(index++, "Updates.UpdateTitle", "");
			ssUpdateHTML = r.ReadText(index++, "Updates.UpdateHTML", "");
			ssDocument = r.ReadEntityReference(index++, "Updates.Document", 0);
			ssActive = r.ReadBoolean(index++, "Updates.Active", false);
			ssInternalMessageType = r.ReadEntityReference(index++, "Updates.InternalMessageType", 0);
			ChangedAttributes = new BitArray(8, false);
			OptimizedAttributes = new BitArray(8, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENUpdatesEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENUpdatesEntityRecord a, ENUpdatesEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssUpdateDate != b.ssUpdateDate) return false;
			if (a.ssUpdateSubmittedBy != b.ssUpdateSubmittedBy) return false;
			if (a.ssUpdateTitle != b.ssUpdateTitle) return false;
			if (a.ssUpdateHTML != b.ssUpdateHTML) return false;
			if (a.ssDocument != b.ssDocument) return false;
			if (a.ssActive != b.ssActive) return false;
			if (a.ssInternalMessageType != b.ssInternalMessageType) return false;
			return true;
		}

		public static bool operator != (ENUpdatesEntityRecord a, ENUpdatesEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENUpdatesEntityRecord)) return false;
			return (this == (ENUpdatesEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssUpdateDate.GetHashCode()
				^ ssUpdateSubmittedBy.GetHashCode()
				^ ssUpdateTitle.GetHashCode()
				^ ssUpdateHTML.GetHashCode()
				^ ssDocument.GetHashCode()
				^ ssActive.GetHashCode()
				^ ssInternalMessageType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENUpdatesEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(8, true);
			OptimizedAttributes = new BitArray(8, false);
			_ssId = 0;
			_ssUpdateDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssUpdateSubmittedBy = 0;
			_ssUpdateTitle = "";
			_ssUpdateHTML = "";
			_ssDocument = 0;
			_ssActive = false;
			_ssInternalMessageType = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssUpdateDate = (DateTime) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssUpdateSubmittedBy = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssUpdateTitle = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssUpdateHTML = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssDocument = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssActive = (bool) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssInternalMessageType = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENUpdatesEntityRecord Duplicate() {
			ENUpdatesEntityRecord t;
			t._ssId = this._ssId;
			t._ssUpdateDate = this._ssUpdateDate;
			t._ssUpdateSubmittedBy = this._ssUpdateSubmittedBy;
			t._ssUpdateTitle = this._ssUpdateTitle;
			t._ssUpdateHTML = this._ssUpdateHTML;
			t._ssDocument = this._ssDocument;
			t._ssActive = this._ssActive;
			t._ssInternalMessageType = this._ssInternalMessageType;
			t.ChangedAttributes = new BitArray(8);
			t.OptimizedAttributes = new BitArray(8);
			for (int i = 0; i < 8; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdateDate")) VarValue.AppendAttribute(recordElem, "UpdateDate", ssUpdateDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "UpdateDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdateSubmittedBy")) VarValue.AppendAttribute(recordElem, "UpdateSubmittedBy", ssUpdateSubmittedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "UpdateSubmittedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdateTitle")) VarValue.AppendAttribute(recordElem, "UpdateTitle", ssUpdateTitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UpdateTitle");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdateHTML")) VarValue.AppendAttribute(recordElem, "UpdateHTML", ssUpdateHTML, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UpdateHTML");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Document")) VarValue.AppendAttribute(recordElem, "Document", ssDocument, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Document");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Active")) VarValue.AppendAttribute(recordElem, "Active", ssActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Active");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".InternalMessageType")) VarValue.AppendAttribute(recordElem, "InternalMessageType", ssInternalMessageType, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "InternalMessageType");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "updatedate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdateDate")) variable.Value = ssUpdateDate; else variable.Optimized = true;
			} else if (head == "updatesubmittedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdateSubmittedBy")) variable.Value = ssUpdateSubmittedBy; else variable.Optimized = true;
			} else if (head == "updatetitle") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdateTitle")) variable.Value = ssUpdateTitle; else variable.Optimized = true;
			} else if (head == "updatehtml") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdateHTML")) variable.Value = ssUpdateHTML; else variable.Optimized = true;
			} else if (head == "document") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Document")) variable.Value = ssDocument; else variable.Optimized = true;
			} else if (head == "active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Active")) variable.Value = ssActive; else variable.Optimized = true;
			} else if (head == "internalmessagetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".InternalMessageType")) variable.Value = ssInternalMessageType; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdUpdateDate)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdUpdateSubmittedBy)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdUpdateTitle)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdUpdateHTML)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdDocument)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdActive)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdInternalMessageType)) {
				return ChangedAttributes[7];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdUpdateDate)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdUpdateSubmittedBy)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdUpdateTitle)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdUpdateHTML)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdDocument)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdActive)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdInternalMessageType)) {
				return OptimizedAttributes[7];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdUpdateDate) {
				return ssUpdateDate;
			} else if (key == IdUpdateSubmittedBy) {
				return ssUpdateSubmittedBy;
			} else if (key == IdUpdateTitle) {
				return ssUpdateTitle;
			} else if (key == IdUpdateHTML) {
				return ssUpdateHTML;
			} else if (key == IdDocument) {
				return ssDocument;
			} else if (key == IdActive) {
				return ssActive;
			} else if (key == IdInternalMessageType) {
				return ssInternalMessageType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(8);
			OptimizedAttributes = new BitArray(8);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssUpdateDate = (DateTime) other.AttributeGet(IdUpdateDate);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdUpdateDate);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdUpdateDate);
			ssUpdateSubmittedBy = (int) other.AttributeGet(IdUpdateSubmittedBy);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdUpdateSubmittedBy);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdUpdateSubmittedBy);
			ssUpdateTitle = (string) other.AttributeGet(IdUpdateTitle);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdUpdateTitle);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdUpdateTitle);
			ssUpdateHTML = (string) other.AttributeGet(IdUpdateHTML);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdUpdateHTML);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdUpdateHTML);
			ssDocument = (int) other.AttributeGet(IdDocument);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdDocument);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdDocument);
			ssActive = (bool) other.AttributeGet(IdActive);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdActive);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdActive);
			ssInternalMessageType = (int) other.AttributeGet(IdInternalMessageType);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdInternalMessageType);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdInternalMessageType);
		}
	} // ENUpdatesEntityRecord
	/// <summary>
	/// Structure <code>RCUpdatesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUpdatesRecord: ISerializable, ITypedRecord<RCUpdatesRecord> {
		private static readonly GlobalObjectKey IdUpdates = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*gcqFqeutlV4qQhQ8q0U72A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Updates")]
		public ENUpdatesEntityRecord ssENUpdates;


		public static implicit operator ENUpdatesEntityRecord(RCUpdatesRecord r) {
			return r.ssENUpdates;
		}

		public static implicit operator RCUpdatesRecord(ENUpdatesEntityRecord r) {
			RCUpdatesRecord res = new RCUpdatesRecord(null);
			res.ssENUpdates = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENUpdates.ChangedAttributes = value;
			}
			get {
				return ssENUpdates.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCUpdatesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUpdates = new ENUpdatesEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUpdates.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENUpdates.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENUpdates.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUpdates.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUpdatesRecord r) {
			this = r;
		}


		public static bool operator == (RCUpdatesRecord a, RCUpdatesRecord b) {
			if (a.ssENUpdates != b.ssENUpdates) return false;
			return true;
		}

		public static bool operator != (RCUpdatesRecord a, RCUpdatesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUpdatesRecord)) return false;
			return (this == (RCUpdatesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUpdates.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUpdatesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUpdates = new ENUpdatesEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENUpdates = (ENUpdatesEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENUpdates.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUpdates.InternalRecursiveSave();
		}


		public RCUpdatesRecord Duplicate() {
			RCUpdatesRecord t;
			t.ssENUpdates = (ENUpdatesEntityRecord) this.ssENUpdates.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUpdates.ToXml(this, recordElem, "Updates", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "updates") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Updates")) variable.Value = ssENUpdates; else variable.Optimized = true;
				variable.SetFieldName("updates");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENUpdates.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENUpdates.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUpdates) {
				return ssENUpdates;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUpdates.FillFromOther((IRecord) other.AttributeGet(IdUpdates));
		}
	} // RCUpdatesRecord
	/// <summary>
	/// RecordList type <code>RLUpdatesRecordList</code> that represents a record list of
	///  <code>Updates</code>
	/// </summary>
	[Serializable()]
	public partial class RLUpdatesRecordList: GenericRecordList<RCUpdatesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUpdatesRecord GetElementDefaultValue() {
			return new RCUpdatesRecord("");
		}

		public T[] ToArray<T>(Func<RCUpdatesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUpdatesRecordList recordlist, Func<RCUpdatesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUpdatesRecordList ToList<T>(T[] array, Func <T, RCUpdatesRecord> converter) {
			RLUpdatesRecordList result = new RLUpdatesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUpdatesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUpdatesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUpdatesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUpdatesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUpdatesRecord> NewList() {
			return new RLUpdatesRecordList();
		}


	} // RLUpdatesRecordList

	/// <summary>
	/// RecordList type <code>RLUpdatesList</code> that represents a record list of <code>UserIdentifier,
	///  Text, Text, Date, Boolean, Integer, DocumentsIdentifier, InternalMessageTypeIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLUpdatesList: GenericRecordList<ENUpdatesEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENUpdatesEntityRecord GetElementDefaultValue() {
			return new ENUpdatesEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENUpdatesEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUpdatesList recordlist, Func<ENUpdatesEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUpdatesList ToList<T>(T[] array, Func <T, ENUpdatesEntityRecord> converter) {
			RLUpdatesList result = new RLUpdatesList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUpdatesList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUpdatesList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUpdatesList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUpdatesList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENUpdatesEntityRecord> NewList() {
			return new RLUpdatesList();
		}


	} // RLUpdatesList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateUpdates
		/// </summary>

		public static void CreateUpdates(HeContext heContext, RCUpdatesRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUpdatesEntity.eSpaceId;
				ENUpdatesEntityRecord ssENUpdates = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENUpdatesEntity.LocalViewName(null, null) + " (" +
					 " [UPDATEDATE]" +
					 ", [UPDATESUBMITTEDBY]" +
					 ", [UPDATETITLE]" +
					 ", [UPDATEHTML]" +
					 ", [DOCUMENT]" +
					 ", [ACTIVE]" +
					 ", [INTERNALMESSAGETYPE]" +
					 " ) VALUES (" +
					 " @ssUpdateDate" +
					 ", @ssUpdateSubmittedBy" +
					 ", @ssUpdateTitle" +
					 ", @ssUpdateHTML" +
					 ", @ssDocument" +
					 ", @ssActive" +
					 ", @ssInternalMessageType" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssUpdateDate", DbType.DateTime, ssENUpdates.ssUpdateDate);
					if ((ssENUpdates.ssUpdateSubmittedBy==0)) {
						insertSqlCmd.CreateParameter("@ssUpdateSubmittedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssUpdateSubmittedBy", DbType.Int32, ssENUpdates.ssUpdateSubmittedBy);
					}
					insertSqlCmd.CreateParameter("@ssUpdateTitle", DbType.String, ssENUpdates.ssUpdateTitle);
					insertSqlCmd.CreateParameter("@ssUpdateHTML", DbType.String, ssENUpdates.ssUpdateHTML);
					if ((ssENUpdates.ssDocument==0)) {
						insertSqlCmd.CreateParameter("@ssDocument", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDocument", DbType.Int32, ssENUpdates.ssDocument);
					}
					insertSqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENUpdates.ssActive);
					if ((ssENUpdates.ssInternalMessageType==0)) {
						insertSqlCmd.CreateParameter("@ssInternalMessageType", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssInternalMessageType", DbType.Int32, ssENUpdates.ssInternalMessageType);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateUpdates", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateUpdates
		/// </summary>

		public static void CreateOrUpdateUpdates(HeContext heContext, BitArray usedFields, RCUpdatesRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUpdatesEntity.eSpaceId;
				ENUpdatesEntityRecord ssENUpdates = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(8, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENUpdatesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDATE] = @ssUpdateDate"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATESUBMITTEDBY] = @ssUpdateSubmittedBy"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATETITLE] = @ssUpdateTitle"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEHTML] = @ssUpdateHTML"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENT] = @ssDocument"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACTIVE] = @ssActive"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTERNALMESSAGETYPE] = @ssInternalMessageType"): parameters);
					string whereCondition = " WHERE [ID] = @ssENUpdatesssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssUpdateDate", DbType.DateTime, ssENUpdates.ssUpdateDate);
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENUpdates.ssUpdateSubmittedBy==0)) {
							sqlCmd.CreateParameter("@ssUpdateSubmittedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUpdateSubmittedBy", DbType.Int32, ssENUpdates.ssUpdateSubmittedBy);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssUpdateTitle", DbType.String, ssENUpdates.ssUpdateTitle);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssUpdateHTML", DbType.String, ssENUpdates.ssUpdateHTML);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENUpdates.ssDocument==0)) {
							sqlCmd.CreateParameter("@ssDocument", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocument", DbType.Int32, ssENUpdates.ssDocument);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENUpdates.ssActive);
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENUpdates.ssInternalMessageType==0)) {
							sqlCmd.CreateParameter("@ssInternalMessageType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssInternalMessageType", DbType.Int32, ssENUpdates.ssInternalMessageType);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ACTIVE] = [ACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENUpdatesssId", DbType.Int32, ssENUpdates.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateUpdates (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENUpdatesEntity.LocalViewName(null, null) + " (" +
						 " [UPDATEDATE]" +
						 ", [UPDATESUBMITTEDBY]" +
						 ", [UPDATETITLE]" +
						 ", [UPDATEHTML]" +
						 ", [DOCUMENT]" +
						 ", [ACTIVE]" +
						 ", [INTERNALMESSAGETYPE]" +
						 " ) VALUES (" +
						 " @ssUpdateDate" +
						 ", @ssUpdateSubmittedBy" +
						 ", @ssUpdateTitle" +
						 ", @ssUpdateHTML" +
						 ", @ssDocument" +
						 ", @ssActive" +
						 ", @ssInternalMessageType" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssUpdateDate", DbType.DateTime, ssENUpdates.ssUpdateDate);
						if ((ssENUpdates.ssUpdateSubmittedBy==0)) {
							insertSqlCmd.CreateParameter("@ssUpdateSubmittedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssUpdateSubmittedBy", DbType.Int32, ssENUpdates.ssUpdateSubmittedBy);
						}
						insertSqlCmd.CreateParameter("@ssUpdateTitle", DbType.String, ssENUpdates.ssUpdateTitle);
						insertSqlCmd.CreateParameter("@ssUpdateHTML", DbType.String, ssENUpdates.ssUpdateHTML);
						if ((ssENUpdates.ssDocument==0)) {
							insertSqlCmd.CreateParameter("@ssDocument", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDocument", DbType.Int32, ssENUpdates.ssDocument);
						}
						insertSqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENUpdates.ssActive);
						if ((ssENUpdates.ssInternalMessageType==0)) {
							insertSqlCmd.CreateParameter("@ssInternalMessageType", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssInternalMessageType", DbType.Int32, ssENUpdates.ssInternalMessageType);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateUpdates", true), typeof(int));
					} else {
						outParamId = ssENUpdates.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteUpdates
		/// </summary>

		public static void DeleteUpdates(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUpdatesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENUpdatesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteUpdates", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetUpdates
		/// </summary>

		public static void GetUpdates(HeContext heContext, int inParamId, out RCUpdatesRecord outParamRecord) {
			outParamRecord = new RCUpdatesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUpdatesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [UPDATEDATE]" +
					 ", [UPDATESUBMITTEDBY]" +
					 ", [UPDATETITLE]" +
					 ", [UPDATEHTML]" +
					 ", [DOCUMENT]" +
					 ", [ACTIVE]" +
					 ", [INTERNALMESSAGETYPE]" +
					 " FROM " + ENUpdatesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetUpdates", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(8, false)
							}
							;
						} else
						throw new DataBaseException(ENUpdatesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetUpdatesForUpdate
		/// </summary>

		public static void GetUpdatesForUpdate(HeContext heContext, int inParamId, out RCUpdatesRecord outParamRecord) {
			outParamRecord = new RCUpdatesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUpdatesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [UPDATEDATE]" +
					 ", [UPDATESUBMITTEDBY]" +
					 ", [UPDATETITLE]" +
					 ", [UPDATEHTML]" +
					 ", [DOCUMENT]" +
					 ", [ACTIVE]" +
					 ", [INTERNALMESSAGETYPE]" +
					 "FROM " + ENUpdatesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetUpdatesForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(8, false)
							}
							;
						} else
						throw new DataBaseException(ENUpdatesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateUpdates
		/// </summary>

		public static void UpdateUpdates(HeContext heContext, BitArray usedFields, RCUpdatesRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENUpdatesEntity.eSpaceId;
				ENUpdatesEntityRecord ssENUpdates = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(8, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENUpdatesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDATE] = @ssUpdateDate"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATESUBMITTEDBY] = @ssUpdateSubmittedBy"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATETITLE] = @ssUpdateTitle"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEHTML] = @ssUpdateHTML"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENT] = @ssDocument"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACTIVE] = @ssActive"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INTERNALMESSAGETYPE] = @ssInternalMessageType"): parameters);
					string whereCondition = " WHERE [ID] = @ssENUpdatesssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssUpdateDate", DbType.DateTime, ssENUpdates.ssUpdateDate);
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENUpdates.ssUpdateSubmittedBy==0)) {
							sqlCmd.CreateParameter("@ssUpdateSubmittedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUpdateSubmittedBy", DbType.Int32, ssENUpdates.ssUpdateSubmittedBy);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssUpdateTitle", DbType.String, ssENUpdates.ssUpdateTitle);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssUpdateHTML", DbType.String, ssENUpdates.ssUpdateHTML);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENUpdates.ssDocument==0)) {
							sqlCmd.CreateParameter("@ssDocument", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocument", DbType.Int32, ssENUpdates.ssDocument);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENUpdates.ssActive);
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENUpdates.ssInternalMessageType==0)) {
							sqlCmd.CreateParameter("@ssInternalMessageType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssInternalMessageType", DbType.Int32, ssENUpdates.ssInternalMessageType);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ACTIVE] = [ACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENUpdatesssId", DbType.Int32, ssENUpdates.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateUpdates", true) <= 0)
					throw new DataBaseException(ENUpdatesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENUpdates.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Updates")]
	public class WORCUpdatesRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("UpdateDate", DataType= "date")]
		public DateTime varWSUpdateDate;

		[System.Xml.Serialization.XmlElement("UpdateSubmittedBy")]
		public int varWSUpdateSubmittedBy;

		[System.Xml.Serialization.XmlElement("UpdateTitle")]
		public string varWSUpdateTitle;

		[System.Xml.Serialization.XmlElement("UpdateHTML")]
		public string varWSUpdateHTML;

		[System.Xml.Serialization.XmlElement("Document")]
		public int varWSDocument;

		[System.Xml.Serialization.XmlElement("Active")]
		public bool varWSActive;

		[System.Xml.Serialization.XmlElement("InternalMessageType")]
		public int varWSInternalMessageType;

		public WORCUpdatesRecord() {
			varWSId = (int) 0;
			varWSUpdateDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSUpdateSubmittedBy = (int) 0;
			varWSUpdateTitle = (string) "";
			varWSUpdateHTML = (string) "";
			varWSDocument = (int) 0;
			varWSActive = (bool) false;
			varWSInternalMessageType = (int) 0;
		}

		public WORCUpdatesRecord(ENUpdatesEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSUpdateDate = (DateTime) r.ssUpdateDate;
			varWSUpdateSubmittedBy = (int) r.ssUpdateSubmittedBy;
			varWSUpdateTitle = BaseAppUtils.RemoveControlChars(r.ssUpdateTitle);
			varWSUpdateHTML = BaseAppUtils.RemoveControlChars(r.ssUpdateHTML);
			varWSDocument = (int) r.ssDocument;
			varWSActive = (bool) r.ssActive;
			varWSInternalMessageType = (int) r.ssInternalMessageType;
		}

		public static RLUpdatesList ToRecordList(WORCUpdatesRecord[] array) {
			RLUpdatesList rl = new RLUpdatesList();
			if (array != null) {
				foreach(WORCUpdatesRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCUpdatesRecord[] FromRecordList(RLUpdatesList rl) {
			WORCUpdatesRecord[] array = new WORCUpdatesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCUpdatesRecord {
		public static implicit operator WORCUpdatesRecord(RCUpdatesRecord r) {
			return new WORCUpdatesRecord(r.ssENUpdates);
		}

		public static implicit operator RCUpdatesRecord(WORCUpdatesRecord w) {
			RCUpdatesRecord r = new RCUpdatesRecord("");
			if (w != null) {
				r.ssENUpdates = w;
			}
			return r;
		}

	}

	partial struct ENUpdatesEntityRecord {
		public static implicit operator WORCUpdatesRecord(ENUpdatesEntityRecord r) {
			return new WORCUpdatesRecord(r);
		}

		public static implicit operator ENUpdatesEntityRecord(WORCUpdatesRecord w) {
			ENUpdatesEntityRecord r = new ENUpdatesEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssUpdateDate = (DateTime) w.varWSUpdateDate;
				r.ssUpdateSubmittedBy = (int) w.varWSUpdateSubmittedBy;
				r.ssUpdateTitle = ((string) w.varWSUpdateTitle ?? "");
				r.ssUpdateHTML = ((string) w.varWSUpdateHTML ?? "");
				r.ssDocument = (int) w.varWSDocument;
				r.ssActive = (bool) w.varWSActive;
				r.ssInternalMessageType = (int) w.varWSInternalMessageType;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLUpdatesRecordList {
		public WORCUpdatesRecord[] Array;


		public WORLUpdatesRecordList(WORCUpdatesRecord[] r) {
			if (r == null)
			Array = new WORCUpdatesRecord[0];
			else
			Array = r;
		}
		public WORLUpdatesRecordList() {
			Array = new WORCUpdatesRecord[0];
		}

		public WORLUpdatesRecordList(RLUpdatesRecordList rl) {
			rl=(RLUpdatesRecordList) rl.Duplicate();
			Array = new WORCUpdatesRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCUpdatesRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLUpdatesRecordList {
		public static implicit operator RLUpdatesRecordList(WORCUpdatesRecord[] array) {
			RLUpdatesRecordList rl = new RLUpdatesRecordList();
			if (array != null) {
				foreach(WORCUpdatesRecord val in array) {
					rl.Append((RCUpdatesRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCUpdatesRecord[](RLUpdatesRecordList rl) {
			WORCUpdatesRecord[] array = new WORCUpdatesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCUpdatesRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLUpdatesRecordList {
		public static implicit operator RLUpdatesRecordList(WORLUpdatesRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLUpdatesRecordList(RLUpdatesRecordList rl) {
			return new WORLUpdatesRecordList(rl);
		}
		public static implicit operator WORCUpdatesRecord[](WORLUpdatesRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLUpdatesRecordList(WORCUpdatesRecord[] array) {
			return new WORLUpdatesRecordList(array);
		}
	}
}

