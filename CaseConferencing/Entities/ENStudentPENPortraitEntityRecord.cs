/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentPENPortraitEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentPENPortraitEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentPENPortraitEntity.eSpaceId;
	} // ENStudentPENPortraitEntity

	/// <summary>
	/// Entity <code>ENStudentPENPortraitEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentPENPortrait</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentPENPortrait", "UjZyNt3LukOesRTe+tKUfw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentPENPortrait", "")]
	[Serializable()]
	public partial struct ENStudentPENPortraitEntityRecord: ISerializable, ITypedRecord<ENStudentPENPortraitEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*klqk10CCw0eE7eHzzQG__g");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*oesRGza2L0+sbiZbwFZj8w");
		private static readonly GlobalObjectKey IdPENPortrait = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*oICUOG+D90OnLl8gd88VNw");
		private static readonly GlobalObjectKey IdLastUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*2bwTJlhFQU2JDoLsoEWJ2A");
		private static readonly GlobalObjectKey IdLastUpdatedAt = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*dZeABIinoEeJcvfVvQ1OaA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(5, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PENPORTRAIT", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("PENPortrait")]
		private string _ssPENPortrait;
		public string ssPENPortrait {
			get {
				return _ssPENPortrait;
			}
			set {
				if ((_ssPENPortrait!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssPENPortrait = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		private int _ssLastUpdatedBy;
		public int ssLastUpdatedBy {
			get {
				return _ssLastUpdatedBy;
			}
			set {
				if ((_ssLastUpdatedBy!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssLastUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDAT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastUpdatedAt")]
		private DateTime _ssLastUpdatedAt;
		public DateTime ssLastUpdatedAt {
			get {
				return _ssLastUpdatedAt;
			}
			set {
				if ((_ssLastUpdatedAt!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssLastUpdatedAt = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentPENPortraitEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssPENPortrait = "";
			_ssLastUpdatedBy = 0;
			_ssLastUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentPENPortrait.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "StudentPENPortrait.StudentReference", "");
			ssPENPortrait = r.ReadText(index++, "StudentPENPortrait.PENPortrait", "");
			ssLastUpdatedBy = r.ReadEntityReference(index++, "StudentPENPortrait.LastUpdatedBy", 0);
			ssLastUpdatedAt = r.ReadDateTime(index++, "StudentPENPortrait.LastUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(5, false);
			OptimizedAttributes = new BitArray(5, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentPENPortraitEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentPENPortraitEntityRecord a, ENStudentPENPortraitEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssPENPortrait != b.ssPENPortrait) return false;
			if (a.ssLastUpdatedBy != b.ssLastUpdatedBy) return false;
			if (a.ssLastUpdatedAt != b.ssLastUpdatedAt) return false;
			return true;
		}

		public static bool operator != (ENStudentPENPortraitEntityRecord a, ENStudentPENPortraitEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentPENPortraitEntityRecord)) return false;
			return (this == (ENStudentPENPortraitEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssPENPortrait.GetHashCode()
				^ ssLastUpdatedBy.GetHashCode()
				^ ssLastUpdatedAt.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentPENPortraitEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssPENPortrait = "";
			_ssLastUpdatedBy = 0;
			_ssLastUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssPENPortrait = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssLastUpdatedBy = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssLastUpdatedAt = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentPENPortraitEntityRecord Duplicate() {
			ENStudentPENPortraitEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssPENPortrait = this._ssPENPortrait;
			t._ssLastUpdatedBy = this._ssLastUpdatedBy;
			t._ssLastUpdatedAt = this._ssLastUpdatedAt;
			t.ChangedAttributes = new BitArray(5);
			t.OptimizedAttributes = new BitArray(5);
			for (int i = 0; i < 5; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PENPortrait")) VarValue.AppendAttribute(recordElem, "PENPortrait", ssPENPortrait, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PENPortrait");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedBy")) VarValue.AppendAttribute(recordElem, "LastUpdatedBy", ssLastUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedAt")) VarValue.AppendAttribute(recordElem, "LastUpdatedAt", ssLastUpdatedAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedAt");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "penportrait") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PENPortrait")) variable.Value = ssPENPortrait; else variable.Optimized = true;
			} else if (head == "lastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedBy")) variable.Value = ssLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "lastupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedAt")) variable.Value = ssLastUpdatedAt; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdPENPortrait)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdLastUpdatedAt)) {
				return ChangedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdPENPortrait)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdLastUpdatedAt)) {
				return OptimizedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdPENPortrait) {
				return ssPENPortrait;
			} else if (key == IdLastUpdatedBy) {
				return ssLastUpdatedBy;
			} else if (key == IdLastUpdatedAt) {
				return ssLastUpdatedAt;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(5);
			OptimizedAttributes = new BitArray(5);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssPENPortrait = (string) other.AttributeGet(IdPENPortrait);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdPENPortrait);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdPENPortrait);
			ssLastUpdatedBy = (int) other.AttributeGet(IdLastUpdatedBy);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdLastUpdatedBy);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdLastUpdatedBy);
			ssLastUpdatedAt = (DateTime) other.AttributeGet(IdLastUpdatedAt);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdLastUpdatedAt);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdLastUpdatedAt);
		}
	} // ENStudentPENPortraitEntityRecord
	/// <summary>
	/// Structure <code>RCStudentPENPortraitRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentPENPortraitRecord: ISerializable, ITypedRecord<RCStudentPENPortraitRecord> {
		private static readonly GlobalObjectKey IdStudentPENPortrait = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*h1TXKO+_BNDVxRwTv3P9UQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentPENPortrait")]
		public ENStudentPENPortraitEntityRecord ssENStudentPENPortrait;


		public static implicit operator ENStudentPENPortraitEntityRecord(RCStudentPENPortraitRecord r) {
			return r.ssENStudentPENPortrait;
		}

		public static implicit operator RCStudentPENPortraitRecord(ENStudentPENPortraitEntityRecord r) {
			RCStudentPENPortraitRecord res = new RCStudentPENPortraitRecord(null);
			res.ssENStudentPENPortrait = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentPENPortrait.ChangedAttributes = value;
			}
			get {
				return ssENStudentPENPortrait.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentPENPortraitRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentPENPortrait = new ENStudentPENPortraitEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentPENPortrait.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentPENPortrait.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentPENPortrait.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentPENPortrait.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentPENPortraitRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentPENPortraitRecord a, RCStudentPENPortraitRecord b) {
			if (a.ssENStudentPENPortrait != b.ssENStudentPENPortrait) return false;
			return true;
		}

		public static bool operator != (RCStudentPENPortraitRecord a, RCStudentPENPortraitRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentPENPortraitRecord)) return false;
			return (this == (RCStudentPENPortraitRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentPENPortrait.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentPENPortraitRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentPENPortrait = new ENStudentPENPortraitEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentPENPortrait = (ENStudentPENPortraitEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentPENPortrait.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentPENPortrait.InternalRecursiveSave();
		}


		public RCStudentPENPortraitRecord Duplicate() {
			RCStudentPENPortraitRecord t;
			t.ssENStudentPENPortrait = (ENStudentPENPortraitEntityRecord) this.ssENStudentPENPortrait.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentPENPortrait.ToXml(this, recordElem, "StudentPENPortrait", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentpenportrait") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentPENPortrait")) variable.Value = ssENStudentPENPortrait; else variable.Optimized = true;
				variable.SetFieldName("studentpenportrait");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentPENPortrait.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentPENPortrait.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentPENPortrait) {
				return ssENStudentPENPortrait;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentPENPortrait.FillFromOther((IRecord) other.AttributeGet(IdStudentPENPortrait));
		}
	} // RCStudentPENPortraitRecord
	/// <summary>
	/// RecordList type <code>RLStudentPENPortraitRecordList</code> that represents a record list of
	///  <code>StudentPENPortrait</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentPENPortraitRecordList: GenericRecordList<RCStudentPENPortraitRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentPENPortraitRecord GetElementDefaultValue() {
			return new RCStudentPENPortraitRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentPENPortraitRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentPENPortraitRecordList recordlist, Func<RCStudentPENPortraitRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentPENPortraitRecordList ToList<T>(T[] array, Func <T, RCStudentPENPortraitRecord> converter) {
			RLStudentPENPortraitRecordList result = new RLStudentPENPortraitRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentPENPortraitRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentPENPortraitRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentPENPortraitRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentPENPortraitRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentPENPortraitRecord> NewList() {
			return new RLStudentPENPortraitRecordList();
		}


	} // RLStudentPENPortraitRecordList

	/// <summary>
	/// RecordList type <code>RLStudentPENPortraitList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, DateTime, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentPENPortraitList: GenericRecordList<ENStudentPENPortraitEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentPENPortraitEntityRecord GetElementDefaultValue() {
			return new ENStudentPENPortraitEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentPENPortraitEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentPENPortraitList recordlist, Func<ENStudentPENPortraitEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentPENPortraitList ToList<T>(T[] array, Func <T, ENStudentPENPortraitEntityRecord> converter) {
			RLStudentPENPortraitList result = new RLStudentPENPortraitList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentPENPortraitList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentPENPortraitList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentPENPortraitList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentPENPortraitList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentPENPortraitEntityRecord> NewList() {
			return new RLStudentPENPortraitList();
		}


	} // RLStudentPENPortraitList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentPENPortrait
		/// </summary>

		public static void CreateStudentPENPortrait(HeContext heContext, RCStudentPENPortraitRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPENPortraitEntity.eSpaceId;
				ENStudentPENPortraitEntityRecord ssENStudentPENPortrait = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentPENPortraitEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [PENPORTRAIT]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDAT]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssPENPortrait" +
					 ", @ssLastUpdatedBy" +
					 ", @ssLastUpdatedAt" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudentPENPortrait.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentPENPortrait.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssPENPortrait", DbType.String, ssENStudentPENPortrait.ssPENPortrait);
					if ((ssENStudentPENPortrait.ssLastUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentPENPortrait.ssLastUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssLastUpdatedAt", DbType.DateTime, ssENStudentPENPortrait.ssLastUpdatedAt);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentPENPortrait", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentPENPortrait
		/// </summary>

		public static void CreateOrUpdateStudentPENPortrait(HeContext heContext, BitArray usedFields, RCStudentPENPortraitRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPENPortraitEntity.eSpaceId;
				ENStudentPENPortraitEntityRecord ssENStudentPENPortrait = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentPENPortraitEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PENPORTRAIT] = @ssPENPortrait"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDAT] = @ssLastUpdatedAt"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentPENPortraitssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentPENPortrait.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentPENPortrait.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssPENPortrait", DbType.String, ssENStudentPENPortrait.ssPENPortrait);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENStudentPENPortrait.ssLastUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentPENPortrait.ssLastUpdatedBy);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssLastUpdatedAt", DbType.DateTime, ssENStudentPENPortrait.ssLastUpdatedAt);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[LASTUPDATEDAT] = [LASTUPDATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentPENPortraitssId", DbType.Int32, ssENStudentPENPortrait.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentPENPortrait (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentPENPortraitEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [PENPORTRAIT]" +
						 ", [LASTUPDATEDBY]" +
						 ", [LASTUPDATEDAT]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssPENPortrait" +
						 ", @ssLastUpdatedBy" +
						 ", @ssLastUpdatedAt" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudentPENPortrait.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentPENPortrait.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssPENPortrait", DbType.String, ssENStudentPENPortrait.ssPENPortrait);
						if ((ssENStudentPENPortrait.ssLastUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentPENPortrait.ssLastUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssLastUpdatedAt", DbType.DateTime, ssENStudentPENPortrait.ssLastUpdatedAt);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentPENPortrait", true), typeof(int));
					} else {
						outParamId = ssENStudentPENPortrait.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentPENPortrait
		/// </summary>

		public static void DeleteStudentPENPortrait(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPENPortraitEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentPENPortraitEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentPENPortrait", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentPENPortrait
		/// </summary>

		public static void GetStudentPENPortrait(HeContext heContext, int inParamId, out RCStudentPENPortraitRecord outParamRecord) {
			outParamRecord = new RCStudentPENPortraitRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPENPortraitEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [PENPORTRAIT]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDAT]" +
					 " FROM " + ENStudentPENPortraitEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentPENPortrait", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentPENPortraitEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentPENPortraitForUpdate
		/// </summary>

		public static void GetStudentPENPortraitForUpdate(HeContext heContext, int inParamId, out RCStudentPENPortraitRecord outParamRecord) {
			outParamRecord = new RCStudentPENPortraitRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPENPortraitEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [PENPORTRAIT]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDAT]" +
					 "FROM " + ENStudentPENPortraitEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentPENPortraitForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentPENPortraitEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentPENPortrait
		/// </summary>

		public static void UpdateStudentPENPortrait(HeContext heContext, BitArray usedFields, RCStudentPENPortraitRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentPENPortraitEntity.eSpaceId;
				ENStudentPENPortraitEntityRecord ssENStudentPENPortrait = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentPENPortraitEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PENPORTRAIT] = @ssPENPortrait"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDAT] = @ssLastUpdatedAt"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentPENPortraitssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentPENPortrait.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentPENPortrait.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssPENPortrait", DbType.String, ssENStudentPENPortrait.ssPENPortrait);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENStudentPENPortrait.ssLastUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentPENPortrait.ssLastUpdatedBy);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssLastUpdatedAt", DbType.DateTime, ssENStudentPENPortrait.ssLastUpdatedAt);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[LASTUPDATEDAT] = [LASTUPDATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentPENPortraitssId", DbType.Int32, ssENStudentPENPortrait.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentPENPortrait", true) <= 0)
					throw new DataBaseException(ENStudentPENPortraitEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentPENPortrait.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentPENPortrait")]
	public class WORCStudentPENPortraitRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("PENPortrait")]
		public string varWSPENPortrait;

		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		public int varWSLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("LastUpdatedAt")]
		public DateTime varWSLastUpdatedAt;

		public WORCStudentPENPortraitRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSPENPortrait = (string) "";
			varWSLastUpdatedBy = (int) 0;
			varWSLastUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCStudentPENPortraitRecord(ENStudentPENPortraitEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSPENPortrait = BaseAppUtils.RemoveControlChars(r.ssPENPortrait);
			varWSLastUpdatedBy = (int) r.ssLastUpdatedBy;
			varWSLastUpdatedAt = (DateTime) r.ssLastUpdatedAt;
		}

		public static RLStudentPENPortraitList ToRecordList(WORCStudentPENPortraitRecord[] array) {
			RLStudentPENPortraitList rl = new RLStudentPENPortraitList();
			if (array != null) {
				foreach(WORCStudentPENPortraitRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentPENPortraitRecord[] FromRecordList(RLStudentPENPortraitList rl) {
			WORCStudentPENPortraitRecord[] array = new WORCStudentPENPortraitRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentPENPortraitRecord {
		public static implicit operator WORCStudentPENPortraitRecord(RCStudentPENPortraitRecord r) {
			return new WORCStudentPENPortraitRecord(r.ssENStudentPENPortrait);
		}

		public static implicit operator RCStudentPENPortraitRecord(WORCStudentPENPortraitRecord w) {
			RCStudentPENPortraitRecord r = new RCStudentPENPortraitRecord("");
			if (w != null) {
				r.ssENStudentPENPortrait = w;
			}
			return r;
		}

	}

	partial struct ENStudentPENPortraitEntityRecord {
		public static implicit operator WORCStudentPENPortraitRecord(ENStudentPENPortraitEntityRecord r) {
			return new WORCStudentPENPortraitRecord(r);
		}

		public static implicit operator ENStudentPENPortraitEntityRecord(WORCStudentPENPortraitRecord w) {
			ENStudentPENPortraitEntityRecord r = new ENStudentPENPortraitEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssPENPortrait = ((string) w.varWSPENPortrait ?? "");
				r.ssLastUpdatedBy = (int) w.varWSLastUpdatedBy;
				r.ssLastUpdatedAt = (DateTime) w.varWSLastUpdatedAt;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentPENPortraitRecordList {
		public WORCStudentPENPortraitRecord[] Array;


		public WORLStudentPENPortraitRecordList(WORCStudentPENPortraitRecord[] r) {
			if (r == null)
			Array = new WORCStudentPENPortraitRecord[0];
			else
			Array = r;
		}
		public WORLStudentPENPortraitRecordList() {
			Array = new WORCStudentPENPortraitRecord[0];
		}

		public WORLStudentPENPortraitRecordList(RLStudentPENPortraitRecordList rl) {
			rl=(RLStudentPENPortraitRecordList) rl.Duplicate();
			Array = new WORCStudentPENPortraitRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentPENPortraitRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentPENPortraitRecordList {
		public static implicit operator RLStudentPENPortraitRecordList(WORCStudentPENPortraitRecord[] array) {
			RLStudentPENPortraitRecordList rl = new RLStudentPENPortraitRecordList();
			if (array != null) {
				foreach(WORCStudentPENPortraitRecord val in array) {
					rl.Append((RCStudentPENPortraitRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentPENPortraitRecord[](RLStudentPENPortraitRecordList rl) {
			WORCStudentPENPortraitRecord[] array = new WORCStudentPENPortraitRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentPENPortraitRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentPENPortraitRecordList {
		public static implicit operator RLStudentPENPortraitRecordList(WORLStudentPENPortraitRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentPENPortraitRecordList(RLStudentPENPortraitRecordList rl) {
			return new WORLStudentPENPortraitRecordList(rl);
		}
		public static implicit operator WORCStudentPENPortraitRecord[](WORLStudentPENPortraitRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentPENPortraitRecordList(WORCStudentPENPortraitRecord[] array) {
			return new WORLStudentPENPortraitRecordList(array);
		}
	}
}

