/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentExtraCAEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentExtraCAEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentExtraCAEntity.eSpaceId;
	} // ENStudentExtraCAEntity

	/// <summary>
	/// Entity <code>ENStudentExtraCAEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentExtraCA</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentExtraCA", "iT1Q0qNiokiKmGr+s+P1Xg", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentCCSUInvolment", "")]
	[Serializable()]
	public partial struct ENStudentExtraCAEntityRecord: ISerializable, ITypedRecord<ENStudentExtraCAEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*0G_e3dblO0irBtjHetLULQ");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*h4x4H3O7Zk2TsdlbUZ944w");
		private static readonly GlobalObjectKey IdCCSUInvolment = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*WCa1SpzKrUa8s_quw+2luw");
		private static readonly GlobalObjectKey IdNotes = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*jgrF_qZqaESgRNTswOobtQ");
		private static readonly GlobalObjectKey IdLastUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*IO30e6a4m02KYpj5_czWSA");
		private static readonly GlobalObjectKey IdLastUpdatedAt = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*OZhIM4eYXU2WoOZ14Y5efQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(6, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CCSUINVOLMENT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CCSUInvolment")]
		private bool _ssCCSUInvolment;
		public bool ssCCSUInvolment {
			get {
				return _ssCCSUInvolment;
			}
			set {
				if ((_ssCCSUInvolment!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssCCSUInvolment = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NOTES", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Notes")]
		private string _ssNotes;
		public string ssNotes {
			get {
				return _ssNotes;
			}
			set {
				if ((_ssNotes!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssNotes = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		private int _ssLastUpdatedBy;
		public int ssLastUpdatedBy {
			get {
				return _ssLastUpdatedBy;
			}
			set {
				if ((_ssLastUpdatedBy!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssLastUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDAT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastUpdatedAt")]
		private DateTime _ssLastUpdatedAt;
		public DateTime ssLastUpdatedAt {
			get {
				return _ssLastUpdatedAt;
			}
			set {
				if ((_ssLastUpdatedAt!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssLastUpdatedAt = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentExtraCAEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(6, true);
			OptimizedAttributes = new BitArray(6, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssCCSUInvolment = false;
			_ssNotes = "";
			_ssLastUpdatedBy = 0;
			_ssLastUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentExtraCA.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "StudentExtraCA.StudentReference", "");
			ssCCSUInvolment = r.ReadBoolean(index++, "StudentExtraCA.CCSUInvolment", false);
			ssNotes = r.ReadText(index++, "StudentExtraCA.Notes", "");
			ssLastUpdatedBy = r.ReadEntityReference(index++, "StudentExtraCA.LastUpdatedBy", 0);
			ssLastUpdatedAt = r.ReadDateTime(index++, "StudentExtraCA.LastUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(6, false);
			OptimizedAttributes = new BitArray(6, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentExtraCAEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentExtraCAEntityRecord a, ENStudentExtraCAEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssCCSUInvolment != b.ssCCSUInvolment) return false;
			if (a.ssNotes != b.ssNotes) return false;
			if (a.ssLastUpdatedBy != b.ssLastUpdatedBy) return false;
			if (a.ssLastUpdatedAt != b.ssLastUpdatedAt) return false;
			return true;
		}

		public static bool operator != (ENStudentExtraCAEntityRecord a, ENStudentExtraCAEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentExtraCAEntityRecord)) return false;
			return (this == (ENStudentExtraCAEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssCCSUInvolment.GetHashCode()
				^ ssNotes.GetHashCode()
				^ ssLastUpdatedBy.GetHashCode()
				^ ssLastUpdatedAt.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentExtraCAEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(6, true);
			OptimizedAttributes = new BitArray(6, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssCCSUInvolment = false;
			_ssNotes = "";
			_ssLastUpdatedBy = 0;
			_ssLastUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssCCSUInvolment = (bool) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssNotes = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssLastUpdatedBy = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssLastUpdatedAt = (DateTime) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentExtraCAEntityRecord Duplicate() {
			ENStudentExtraCAEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssCCSUInvolment = this._ssCCSUInvolment;
			t._ssNotes = this._ssNotes;
			t._ssLastUpdatedBy = this._ssLastUpdatedBy;
			t._ssLastUpdatedAt = this._ssLastUpdatedAt;
			t.ChangedAttributes = new BitArray(6);
			t.OptimizedAttributes = new BitArray(6);
			for (int i = 0; i < 6; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CCSUInvolment")) VarValue.AppendAttribute(recordElem, "CCSUInvolment", ssCCSUInvolment, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "CCSUInvolment");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Notes")) VarValue.AppendAttribute(recordElem, "Notes", ssNotes, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Notes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedBy")) VarValue.AppendAttribute(recordElem, "LastUpdatedBy", ssLastUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedAt")) VarValue.AppendAttribute(recordElem, "LastUpdatedAt", ssLastUpdatedAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedAt");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "ccsuinvolment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CCSUInvolment")) variable.Value = ssCCSUInvolment; else variable.Optimized = true;
			} else if (head == "notes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Notes")) variable.Value = ssNotes; else variable.Optimized = true;
			} else if (head == "lastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedBy")) variable.Value = ssLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "lastupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedAt")) variable.Value = ssLastUpdatedAt; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdCCSUInvolment)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdNotes)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdLastUpdatedAt)) {
				return ChangedAttributes[5];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdCCSUInvolment)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdNotes)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdLastUpdatedAt)) {
				return OptimizedAttributes[5];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdCCSUInvolment) {
				return ssCCSUInvolment;
			} else if (key == IdNotes) {
				return ssNotes;
			} else if (key == IdLastUpdatedBy) {
				return ssLastUpdatedBy;
			} else if (key == IdLastUpdatedAt) {
				return ssLastUpdatedAt;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(6);
			OptimizedAttributes = new BitArray(6);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssCCSUInvolment = (bool) other.AttributeGet(IdCCSUInvolment);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdCCSUInvolment);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdCCSUInvolment);
			ssNotes = (string) other.AttributeGet(IdNotes);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdNotes);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdNotes);
			ssLastUpdatedBy = (int) other.AttributeGet(IdLastUpdatedBy);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdLastUpdatedBy);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdLastUpdatedBy);
			ssLastUpdatedAt = (DateTime) other.AttributeGet(IdLastUpdatedAt);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdLastUpdatedAt);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdLastUpdatedAt);
		}
	} // ENStudentExtraCAEntityRecord
	/// <summary>
	/// Structure <code>RCStudentExtraCARecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentExtraCARecord: ISerializable, ITypedRecord<RCStudentExtraCARecord> {
		private static readonly GlobalObjectKey IdStudentExtraCA = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*jKXKEMnrpXGHmE8tOEvS3w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentExtraCA")]
		public ENStudentExtraCAEntityRecord ssENStudentExtraCA;


		public static implicit operator ENStudentExtraCAEntityRecord(RCStudentExtraCARecord r) {
			return r.ssENStudentExtraCA;
		}

		public static implicit operator RCStudentExtraCARecord(ENStudentExtraCAEntityRecord r) {
			RCStudentExtraCARecord res = new RCStudentExtraCARecord(null);
			res.ssENStudentExtraCA = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentExtraCA.ChangedAttributes = value;
			}
			get {
				return ssENStudentExtraCA.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentExtraCARecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentExtraCA = new ENStudentExtraCAEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(6, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentExtraCA.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentExtraCA.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentExtraCA.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentExtraCA.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentExtraCARecord r) {
			this = r;
		}


		public static bool operator == (RCStudentExtraCARecord a, RCStudentExtraCARecord b) {
			if (a.ssENStudentExtraCA != b.ssENStudentExtraCA) return false;
			return true;
		}

		public static bool operator != (RCStudentExtraCARecord a, RCStudentExtraCARecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentExtraCARecord)) return false;
			return (this == (RCStudentExtraCARecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentExtraCA.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentExtraCARecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentExtraCA = new ENStudentExtraCAEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentExtraCA = (ENStudentExtraCAEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentExtraCA.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentExtraCA.InternalRecursiveSave();
		}


		public RCStudentExtraCARecord Duplicate() {
			RCStudentExtraCARecord t;
			t.ssENStudentExtraCA = (ENStudentExtraCAEntityRecord) this.ssENStudentExtraCA.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentExtraCA.ToXml(this, recordElem, "StudentExtraCA", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentextraca") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentExtraCA")) variable.Value = ssENStudentExtraCA; else variable.Optimized = true;
				variable.SetFieldName("studentextraca");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentExtraCA.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentExtraCA.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentExtraCA) {
				return ssENStudentExtraCA;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentExtraCA.FillFromOther((IRecord) other.AttributeGet(IdStudentExtraCA));
		}
	} // RCStudentExtraCARecord
	/// <summary>
	/// RecordList type <code>RLStudentExtraCARecordList</code> that represents a record list of
	///  <code>StudentExtraCA</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentExtraCARecordList: GenericRecordList<RCStudentExtraCARecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentExtraCARecord GetElementDefaultValue() {
			return new RCStudentExtraCARecord("");
		}

		public T[] ToArray<T>(Func<RCStudentExtraCARecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentExtraCARecordList recordlist, Func<RCStudentExtraCARecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentExtraCARecordList ToList<T>(T[] array, Func <T, RCStudentExtraCARecord> converter) {
			RLStudentExtraCARecordList result = new RLStudentExtraCARecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentExtraCARecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentExtraCARecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentExtraCARecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentExtraCARecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(6, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentExtraCARecord> NewList() {
			return new RLStudentExtraCARecordList();
		}


	} // RLStudentExtraCARecordList

	/// <summary>
	/// RecordList type <code>RLStudentExtraCAList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, DateTime, Boolean, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentExtraCAList: GenericRecordList<ENStudentExtraCAEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentExtraCAEntityRecord GetElementDefaultValue() {
			return new ENStudentExtraCAEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentExtraCAEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentExtraCAList recordlist, Func<ENStudentExtraCAEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentExtraCAList ToList<T>(T[] array, Func <T, ENStudentExtraCAEntityRecord> converter) {
			RLStudentExtraCAList result = new RLStudentExtraCAList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentExtraCAList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentExtraCAList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentExtraCAList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentExtraCAList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentExtraCAEntityRecord> NewList() {
			return new RLStudentExtraCAList();
		}


	} // RLStudentExtraCAList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentExtraCA
		/// </summary>

		public static void CreateStudentExtraCA(HeContext heContext, RCStudentExtraCARecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExtraCAEntity.eSpaceId;
				ENStudentExtraCAEntityRecord ssENStudentExtraCA = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentExtraCAEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [CCSUINVOLMENT]" +
					 ", [NOTES]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDAT]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssCCSUInvolment" +
					 ", @ssNotes" +
					 ", @ssLastUpdatedBy" +
					 ", @ssLastUpdatedAt" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudentExtraCA.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentExtraCA.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssCCSUInvolment", DbType.Boolean, ssENStudentExtraCA.ssCCSUInvolment);
					insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENStudentExtraCA.ssNotes);
					if ((ssENStudentExtraCA.ssLastUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentExtraCA.ssLastUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssLastUpdatedAt", DbType.DateTime, ssENStudentExtraCA.ssLastUpdatedAt);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentExtraCA", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentExtraCA
		/// </summary>

		public static void CreateOrUpdateStudentExtraCA(HeContext heContext, BitArray usedFields, RCStudentExtraCARecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExtraCAEntity.eSpaceId;
				ENStudentExtraCAEntityRecord ssENStudentExtraCA = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(6, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentExtraCAEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CCSUINVOLMENT] = @ssCCSUInvolment"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDAT] = @ssLastUpdatedAt"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentExtraCAssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentExtraCA.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentExtraCA.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssCCSUInvolment", DbType.Boolean, ssENStudentExtraCA.ssCCSUInvolment);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENStudentExtraCA.ssNotes);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENStudentExtraCA.ssLastUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentExtraCA.ssLastUpdatedBy);
						}
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssLastUpdatedAt", DbType.DateTime, ssENStudentExtraCA.ssLastUpdatedAt);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CCSUINVOLMENT] = [CCSUINVOLMENT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentExtraCAssId", DbType.Int32, ssENStudentExtraCA.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentExtraCA (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentExtraCAEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [CCSUINVOLMENT]" +
						 ", [NOTES]" +
						 ", [LASTUPDATEDBY]" +
						 ", [LASTUPDATEDAT]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssCCSUInvolment" +
						 ", @ssNotes" +
						 ", @ssLastUpdatedBy" +
						 ", @ssLastUpdatedAt" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudentExtraCA.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentExtraCA.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssCCSUInvolment", DbType.Boolean, ssENStudentExtraCA.ssCCSUInvolment);
						insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENStudentExtraCA.ssNotes);
						if ((ssENStudentExtraCA.ssLastUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentExtraCA.ssLastUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssLastUpdatedAt", DbType.DateTime, ssENStudentExtraCA.ssLastUpdatedAt);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentExtraCA", true), typeof(int));
					} else {
						outParamId = ssENStudentExtraCA.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentExtraCA
		/// </summary>

		public static void DeleteStudentExtraCA(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExtraCAEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentExtraCAEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentExtraCA", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentExtraCA
		/// </summary>

		public static void GetStudentExtraCA(HeContext heContext, int inParamId, out RCStudentExtraCARecord outParamRecord) {
			outParamRecord = new RCStudentExtraCARecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExtraCAEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [CCSUINVOLMENT]" +
					 ", [NOTES]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDAT]" +
					 " FROM " + ENStudentExtraCAEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentExtraCA", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(6, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentExtraCAEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentExtraCAForUpdate
		/// </summary>

		public static void GetStudentExtraCAForUpdate(HeContext heContext, int inParamId, out RCStudentExtraCARecord outParamRecord) {
			outParamRecord = new RCStudentExtraCARecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExtraCAEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [CCSUINVOLMENT]" +
					 ", [NOTES]" +
					 ", [LASTUPDATEDBY]" +
					 ", [LASTUPDATEDAT]" +
					 "FROM " + ENStudentExtraCAEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentExtraCAForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(6, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentExtraCAEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentExtraCA
		/// </summary>

		public static void UpdateStudentExtraCA(HeContext heContext, BitArray usedFields, RCStudentExtraCARecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentExtraCAEntity.eSpaceId;
				ENStudentExtraCAEntityRecord ssENStudentExtraCA = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(6, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentExtraCAEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CCSUINVOLMENT] = @ssCCSUInvolment"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDAT] = @ssLastUpdatedAt"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentExtraCAssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentExtraCA.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentExtraCA.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssCCSUInvolment", DbType.Boolean, ssENStudentExtraCA.ssCCSUInvolment);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENStudentExtraCA.ssNotes);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENStudentExtraCA.ssLastUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENStudentExtraCA.ssLastUpdatedBy);
						}
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssLastUpdatedAt", DbType.DateTime, ssENStudentExtraCA.ssLastUpdatedAt);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CCSUINVOLMENT] = [CCSUINVOLMENT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentExtraCAssId", DbType.Int32, ssENStudentExtraCA.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentExtraCA", true) <= 0)
					throw new DataBaseException(ENStudentExtraCAEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentExtraCA.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentExtraCA")]
	public class WORCStudentExtraCARecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("CCSUInvolment")]
		public bool varWSCCSUInvolment;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string varWSNotes;

		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		public int varWSLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("LastUpdatedAt")]
		public DateTime varWSLastUpdatedAt;

		public WORCStudentExtraCARecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSCCSUInvolment = (bool) false;
			varWSNotes = (string) "";
			varWSLastUpdatedBy = (int) 0;
			varWSLastUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCStudentExtraCARecord(ENStudentExtraCAEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSCCSUInvolment = (bool) r.ssCCSUInvolment;
			varWSNotes = BaseAppUtils.RemoveControlChars(r.ssNotes);
			varWSLastUpdatedBy = (int) r.ssLastUpdatedBy;
			varWSLastUpdatedAt = (DateTime) r.ssLastUpdatedAt;
		}

		public static RLStudentExtraCAList ToRecordList(WORCStudentExtraCARecord[] array) {
			RLStudentExtraCAList rl = new RLStudentExtraCAList();
			if (array != null) {
				foreach(WORCStudentExtraCARecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentExtraCARecord[] FromRecordList(RLStudentExtraCAList rl) {
			WORCStudentExtraCARecord[] array = new WORCStudentExtraCARecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentExtraCARecord {
		public static implicit operator WORCStudentExtraCARecord(RCStudentExtraCARecord r) {
			return new WORCStudentExtraCARecord(r.ssENStudentExtraCA);
		}

		public static implicit operator RCStudentExtraCARecord(WORCStudentExtraCARecord w) {
			RCStudentExtraCARecord r = new RCStudentExtraCARecord("");
			if (w != null) {
				r.ssENStudentExtraCA = w;
			}
			return r;
		}

	}

	partial struct ENStudentExtraCAEntityRecord {
		public static implicit operator WORCStudentExtraCARecord(ENStudentExtraCAEntityRecord r) {
			return new WORCStudentExtraCARecord(r);
		}

		public static implicit operator ENStudentExtraCAEntityRecord(WORCStudentExtraCARecord w) {
			ENStudentExtraCAEntityRecord r = new ENStudentExtraCAEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssCCSUInvolment = (bool) w.varWSCCSUInvolment;
				r.ssNotes = ((string) w.varWSNotes ?? "");
				r.ssLastUpdatedBy = (int) w.varWSLastUpdatedBy;
				r.ssLastUpdatedAt = (DateTime) w.varWSLastUpdatedAt;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentExtraCARecordList {
		public WORCStudentExtraCARecord[] Array;


		public WORLStudentExtraCARecordList(WORCStudentExtraCARecord[] r) {
			if (r == null)
			Array = new WORCStudentExtraCARecord[0];
			else
			Array = r;
		}
		public WORLStudentExtraCARecordList() {
			Array = new WORCStudentExtraCARecord[0];
		}

		public WORLStudentExtraCARecordList(RLStudentExtraCARecordList rl) {
			rl=(RLStudentExtraCARecordList) rl.Duplicate();
			Array = new WORCStudentExtraCARecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentExtraCARecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentExtraCARecordList {
		public static implicit operator RLStudentExtraCARecordList(WORCStudentExtraCARecord[] array) {
			RLStudentExtraCARecordList rl = new RLStudentExtraCARecordList();
			if (array != null) {
				foreach(WORCStudentExtraCARecord val in array) {
					rl.Append((RCStudentExtraCARecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentExtraCARecord[](RLStudentExtraCARecordList rl) {
			WORCStudentExtraCARecord[] array = new WORCStudentExtraCARecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentExtraCARecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentExtraCARecordList {
		public static implicit operator RLStudentExtraCARecordList(WORLStudentExtraCARecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentExtraCARecordList(RLStudentExtraCARecordList rl) {
			return new WORLStudentExtraCARecordList(rl);
		}
		public static implicit operator WORCStudentExtraCARecord[](WORLStudentExtraCARecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentExtraCARecordList(WORCStudentExtraCARecord[] array) {
			return new WORLStudentExtraCARecordList(array);
		}
	}
}

