/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENMenuItem2Entity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceThemeProvider.ENMenuItem2Entity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceThemeProvider.ENMenuItem2Entity.eSpaceId;
	} // ENMenuItem2Entity

	/// <summary>
	/// Entity <code>ENMenuItem2EntityRecord</code> that represents the Service Studio entity
	///  <code>MenuItem2</code> <p> Description: Records in this entity will be automatically created whe
	/// n dragging web screens to the Common\Menu web block. Their labels can later be changed.</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("MenuItem2", "WKgaRQZPskGri4tKMjDcvQ", "VofHcHeK2kSPL0JlVdburg", 0, "OSUSR_o9a_MenuItem", "")]
	[Serializable()]
	public partial struct ENMenuItem2EntityRecord: ISerializable, ITypedRecord<ENMenuItem2EntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("VofHcHeK2kSPL0JlVdburg*R33XWJvSxw4LUkh9JfGD+w");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("VofHcHeK2kSPL0JlVdburg*yjbSVyRHeQj+bINsKjLKzQ");
		private static readonly GlobalObjectKey IdCaption = GlobalObjectKey.Parse("VofHcHeK2kSPL0JlVdburg*h638tE3zOU6SFAHeugbmxQ");
		private static readonly GlobalObjectKey IdIsActive = GlobalObjectKey.Parse("VofHcHeK2kSPL0JlVdburg*75puOZh7wUuwkrTcdKQwJQ");

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(4, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssOrder = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CAPTION", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Caption")]
		private string _ssCaption;
		public string ssCaption {
			get {
				return _ssCaption;
			}
			set {
				if ((_ssCaption!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssCaption = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IsActive")]
		private bool _ssIsActive;
		public bool ssIsActive {
			get {
				return _ssIsActive;
			}
			set {
				if ((_ssIsActive!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssIsActive = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENMenuItem2EntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(4, true);
			OptimizedAttributes = new BitArray(4, false);
			_ssId = 0;
			_ssOrder = 0;
			_ssCaption = "";
			_ssIsActive = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "MenuItem2.Id", 0);
			ssOrder = r.ReadInteger(index++, "MenuItem2.Order", 0);
			ssCaption = r.ReadText(index++, "MenuItem2.Caption", "");
			ssIsActive = r.ReadBoolean(index++, "MenuItem2.IsActive", false);
			ChangedAttributes = new BitArray(4, false);
			OptimizedAttributes = new BitArray(4, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENMenuItem2EntityRecord r) {
			this = r;
		}


		public static bool operator == (ENMenuItem2EntityRecord a, ENMenuItem2EntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssOrder != b.ssOrder) return false;
			if (a.ssCaption != b.ssCaption) return false;
			if (a.ssIsActive != b.ssIsActive) return false;
			return true;
		}

		public static bool operator != (ENMenuItem2EntityRecord a, ENMenuItem2EntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENMenuItem2EntityRecord)) return false;
			return (this == (ENMenuItem2EntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssOrder.GetHashCode()
				^ ssCaption.GetHashCode()
				^ ssIsActive.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENMenuItem2EntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(4, true);
			OptimizedAttributes = new BitArray(4, false);
			_ssId = 0;
			_ssOrder = 0;
			_ssCaption = "";
			_ssIsActive = false;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssOrder = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssCaption = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssIsActive = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENMenuItem2EntityRecord Duplicate() {
			ENMenuItem2EntityRecord t;
			t._ssId = this._ssId;
			t._ssOrder = this._ssOrder;
			t._ssCaption = this._ssCaption;
			t._ssIsActive = this._ssIsActive;
			t.ChangedAttributes = new BitArray(4);
			t.OptimizedAttributes = new BitArray(4);
			for (int i = 0; i < 4; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Caption")) VarValue.AppendAttribute(recordElem, "Caption", ssCaption, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Caption");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsActive")) VarValue.AppendAttribute(recordElem, "IsActive", ssIsActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsActive");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			} else if (head == "caption") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Caption")) variable.Value = ssCaption; else variable.Optimized = true;
			} else if (head == "isactive") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsActive")) variable.Value = ssIsActive; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdCaption)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdIsActive)) {
				return ChangedAttributes[3];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdCaption)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdIsActive)) {
				return OptimizedAttributes[3];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdOrder) {
				return ssOrder;
			} else if (key == IdCaption) {
				return ssCaption;
			} else if (key == IdIsActive) {
				return ssIsActive;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(4);
			OptimizedAttributes = new BitArray(4);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdOrder);
			ssCaption = (string) other.AttributeGet(IdCaption);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdCaption);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdCaption);
			ssIsActive = (bool) other.AttributeGet(IdIsActive);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdIsActive);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdIsActive);
		}
	} // ENMenuItem2EntityRecord
	/// <summary>
	/// Static Entity <code>ENMenuItem2Entity</code> gets the values for this static entity records in
	///  runtime <code>MenuItem2</code>
	/// </summary>
	partial class ENMenuItem2Entity {


		static ENMenuItem2Entity() {
			ENMenuItem2EntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENMenuItem2EntityRecord GetRecordById(int id) {
			return (ENMenuItem2EntityRecord) RsseSpaceThemeProvider.ENMenuItem2Entity.GetRecordById(id);
		}

		public static ENMenuItem2EntityRecord GetRecordByName(string name) {
			return (ENMenuItem2EntityRecord) RsseSpaceThemeProvider.ENMenuItem2Entity.GetRecordByName(name);
		}

		public static ENMenuItem2EntityRecord GetRecordByKey(ObjectKey key) {
			return (ENMenuItem2EntityRecord) RsseSpaceThemeProvider.ENMenuItem2Entity.GetRecordByKey(key);
		}
	} // ENMenuItem2Entity;
	/// <summary>
	/// Structure <code>RCMenuItem2Record</code>
	/// </summary>
	[Serializable()]
	public partial struct RCMenuItem2Record: ISerializable, ITypedRecord<RCMenuItem2Record> {
		private static readonly GlobalObjectKey IdMenuItem2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*qdRITROQnZ154vKyldSLcQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("MenuItem2")]
		public ENMenuItem2EntityRecord ssENMenuItem2;


		public static implicit operator ENMenuItem2EntityRecord(RCMenuItem2Record r) {
			return r.ssENMenuItem2;
		}

		public static implicit operator RCMenuItem2Record(ENMenuItem2EntityRecord r) {
			RCMenuItem2Record res = new RCMenuItem2Record(null);
			res.ssENMenuItem2 = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENMenuItem2.ChangedAttributes = value;
			}
			get {
				return ssENMenuItem2.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCMenuItem2Record(params string[] dummy) {
			OptimizedAttributes = null;
			ssENMenuItem2 = new ENMenuItem2EntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(4, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENMenuItem2.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENMenuItem2.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENMenuItem2.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENMenuItem2.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCMenuItem2Record r) {
			this = r;
		}


		public static bool operator == (RCMenuItem2Record a, RCMenuItem2Record b) {
			if (a.ssENMenuItem2 != b.ssENMenuItem2) return false;
			return true;
		}

		public static bool operator != (RCMenuItem2Record a, RCMenuItem2Record b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCMenuItem2Record)) return false;
			return (this == (RCMenuItem2Record) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENMenuItem2.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCMenuItem2Record(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENMenuItem2 = new ENMenuItem2EntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENMenuItem2 = (ENMenuItem2EntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENMenuItem2.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENMenuItem2.InternalRecursiveSave();
		}


		public RCMenuItem2Record Duplicate() {
			RCMenuItem2Record t;
			t.ssENMenuItem2 = (ENMenuItem2EntityRecord) this.ssENMenuItem2.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENMenuItem2.ToXml(this, recordElem, "MenuItem2", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "menuitem2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MenuItem2")) variable.Value = ssENMenuItem2; else variable.Optimized = true;
				variable.SetFieldName("menuitem2");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENMenuItem2.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENMenuItem2.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdMenuItem2) {
				return ssENMenuItem2;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENMenuItem2.FillFromOther((IRecord) other.AttributeGet(IdMenuItem2));
		}
	} // RCMenuItem2Record
	/// <summary>
	/// RecordList type <code>RLMenuItem2RecordList</code> that represents a record list of
	///  <code>MenuItem2</code>
	/// </summary>
	[Serializable()]
	public partial class RLMenuItem2RecordList: GenericRecordList<RCMenuItem2Record>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCMenuItem2Record GetElementDefaultValue() {
			return new RCMenuItem2Record("");
		}

		public T[] ToArray<T>(Func<RCMenuItem2Record, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMenuItem2RecordList recordlist, Func<RCMenuItem2Record, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLMenuItem2RecordList ToList<T>(T[] array, Func <T, RCMenuItem2Record> converter) {
			RLMenuItem2RecordList result = new RLMenuItem2RecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMenuItem2RecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMenuItem2RecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMenuItem2RecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMenuItem2RecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(4, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCMenuItem2Record> NewList() {
			return new RLMenuItem2RecordList();
		}


	} // RLMenuItem2RecordList

	/// <summary>
	/// RecordList type <code>RLMenuItem2List</code> that represents a record list of <code>Text, Boolean,
	///  Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLMenuItem2List: GenericRecordList<ENMenuItem2EntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENMenuItem2EntityRecord GetElementDefaultValue() {
			return new ENMenuItem2EntityRecord("");
		}

		public T[] ToArray<T>(Func<ENMenuItem2EntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMenuItem2List recordlist, Func<ENMenuItem2EntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLMenuItem2List ToList<T>(T[] array, Func <T, ENMenuItem2EntityRecord> converter) {
			RLMenuItem2List result = new RLMenuItem2List();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMenuItem2List(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMenuItem2List(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMenuItem2List(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMenuItem2List(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENMenuItem2EntityRecord> NewList() {
			return new RLMenuItem2List();
		}


	} // RLMenuItem2List
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetMenuItem2
		/// </summary>

		public static void GetMenuItem2(HeContext heContext, int inParamId, out RCMenuItem2Record outParamRecord) {
			outParamRecord = new RCMenuItem2Record(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENMenuItem2Entity.eSpaceId;
				try {
					outParamRecord = ENMenuItem2Entity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [ID]" +
						 ", [ORDER]" +
						 ", [CAPTION]" +
						 ", [ISACTIVE]" +
						 " FROM " + ENMenuItem2Entity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [ID] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetMenuItem2", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENMenuItem2Entity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("MenuItem")]
	public class WORCMenuItem2Record {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		[System.Xml.Serialization.XmlElement("Caption")]
		public string varWSCaption;

		[System.Xml.Serialization.XmlElement("IsActive")]
		public bool varWSIsActive;

		public WORCMenuItem2Record() {
			varWSId = (int) 0;
			varWSOrder = (int) 0;
			varWSCaption = (string) "";
			varWSIsActive = (bool) false;
		}

		public WORCMenuItem2Record(ENMenuItem2EntityRecord r) {
			varWSId = (int) r.ssId;
			varWSOrder = (int) r.ssOrder;
			varWSCaption = BaseAppUtils.RemoveControlChars(r.ssCaption);
			varWSIsActive = (bool) r.ssIsActive;
		}

		public static RLMenuItem2List ToRecordList(WORCMenuItem2Record[] array) {
			RLMenuItem2List rl = new RLMenuItem2List();
			if (array != null) {
				foreach(WORCMenuItem2Record val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCMenuItem2Record[] FromRecordList(RLMenuItem2List rl) {
			WORCMenuItem2Record[] array = new WORCMenuItem2Record[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCMenuItem2Record {
		public static implicit operator WORCMenuItem2Record(RCMenuItem2Record r) {
			return new WORCMenuItem2Record(r.ssENMenuItem2);
		}

		public static implicit operator RCMenuItem2Record(WORCMenuItem2Record w) {
			RCMenuItem2Record r = new RCMenuItem2Record("");
			if (w != null) {
				r.ssENMenuItem2 = w;
			}
			return r;
		}

	}

	partial struct ENMenuItem2EntityRecord {
		public static implicit operator WORCMenuItem2Record(ENMenuItem2EntityRecord r) {
			return new WORCMenuItem2Record(r);
		}

		public static implicit operator ENMenuItem2EntityRecord(WORCMenuItem2Record w) {
			ENMenuItem2EntityRecord r = new ENMenuItem2EntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssOrder = (int) w.varWSOrder;
				r.ssCaption = ((string) w.varWSCaption ?? "");
				r.ssIsActive = (bool) w.varWSIsActive;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLMenuItem2RecordList {
		public WORCMenuItem2Record[] Array;


		public WORLMenuItem2RecordList(WORCMenuItem2Record[] r) {
			if (r == null)
			Array = new WORCMenuItem2Record[0];
			else
			Array = r;
		}
		public WORLMenuItem2RecordList() {
			Array = new WORCMenuItem2Record[0];
		}

		public WORLMenuItem2RecordList(RLMenuItem2RecordList rl) {
			rl=(RLMenuItem2RecordList) rl.Duplicate();
			Array = new WORCMenuItem2Record[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCMenuItem2Record(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLMenuItem2RecordList {
		public static implicit operator RLMenuItem2RecordList(WORCMenuItem2Record[] array) {
			RLMenuItem2RecordList rl = new RLMenuItem2RecordList();
			if (array != null) {
				foreach(WORCMenuItem2Record val in array) {
					rl.Append((RCMenuItem2Record) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMenuItem2Record[](RLMenuItem2RecordList rl) {
			WORCMenuItem2Record[] array = new WORCMenuItem2Record[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCMenuItem2Record) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLMenuItem2RecordList {
		public static implicit operator RLMenuItem2RecordList(WORLMenuItem2RecordList w) {
			return w.Array;
		}
		public static implicit operator WORLMenuItem2RecordList(RLMenuItem2RecordList rl) {
			return new WORLMenuItem2RecordList(rl);
		}
		public static implicit operator WORCMenuItem2Record[](WORLMenuItem2RecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMenuItem2RecordList(WORCMenuItem2Record[] array) {
			return new WORLMenuItem2RecordList(array);
		}
	}
}

