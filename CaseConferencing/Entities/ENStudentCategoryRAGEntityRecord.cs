/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentCategoryRAGEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentCategoryRAGEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentCategoryRAGEntity.eSpaceId;
	} // ENStudentCategoryRAGEntity

	/// <summary>
	/// Entity <code>ENStudentCategoryRAGEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentCategoryRAG</code> <p> Description: StudentCategoryRAG</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentCategoryRAG", "FDlpdE4J4U2MYprKmWaJuw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentCategoryRAG", "")]
	[Serializable()]
	public partial struct ENStudentCategoryRAGEntityRecord: ISerializable, ITypedRecord<ENStudentCategoryRAGEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*XWJXJ_39NUGQ+RniREX2Ig");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Ru+FzLZ0sES34Anajl3K7w");
		private static readonly GlobalObjectKey IdCategoryId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*_zWU_hZM1UuooJtFLFtT0A");
		private static readonly GlobalObjectKey IdShortTermRAGId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Ie1t7z0J9kWp2iwAdS698w");
		private static readonly GlobalObjectKey IdShortTermDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*41pDZ2+qvEOWDCnog0R_ZA");
		private static readonly GlobalObjectKey IdShortTermUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*N7HlQhliuUCYUGiLds3ByA");
		private static readonly GlobalObjectKey IdShortTermUpdatedAt = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*DVkAZ9+DQkW_fkFhYGOaPw");
		private static readonly GlobalObjectKey IdOverallRAGId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*g1kD_GoEsE266Frq1Y_gPg");
		private static readonly GlobalObjectKey IdOverallDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*7N1Sq+yWeUWNXItoThsAwQ");
		private static readonly GlobalObjectKey IdOverallUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*gzq1squEe06UX0obRPpc1g");
		private static readonly GlobalObjectKey IdOverallUpdatedAt = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*PwhUr9cm70a6w8RrdwiCRw");
		private static readonly GlobalObjectKey IdShortTermRAGStatus = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*usvTOl9NZkOLSpnLhlPANA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(12, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CATEGORYID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CategoryId")]
		private int _ssCategoryId;
		public int ssCategoryId {
			get {
				return _ssCategoryId;
			}
			set {
				if ((_ssCategoryId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssCategoryId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SHORTTERMRAGID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ShortTermRAGId")]
		private string _ssShortTermRAGId;
		public string ssShortTermRAGId {
			get {
				return _ssShortTermRAGId;
			}
			set {
				if ((_ssShortTermRAGId!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssShortTermRAGId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SHORTTERMDESCRIPTION", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("ShortTermDescription")]
		private string _ssShortTermDescription;
		public string ssShortTermDescription {
			get {
				return _ssShortTermDescription;
			}
			set {
				if ((_ssShortTermDescription!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssShortTermDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SHORTTERMUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ShortTermUpdatedBy")]
		private int _ssShortTermUpdatedBy;
		public int ssShortTermUpdatedBy {
			get {
				return _ssShortTermUpdatedBy;
			}
			set {
				if ((_ssShortTermUpdatedBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssShortTermUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SHORTTERMUPDATEDAT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("ShortTermUpdatedAt")]
		private DateTime _ssShortTermUpdatedAt;
		public DateTime ssShortTermUpdatedAt {
			get {
				return _ssShortTermUpdatedAt;
			}
			set {
				if ((_ssShortTermUpdatedAt!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssShortTermUpdatedAt = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLRAGID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("OverallRAGId")]
		private string _ssOverallRAGId;
		public string ssOverallRAGId {
			get {
				return _ssOverallRAGId;
			}
			set {
				if ((_ssOverallRAGId!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssOverallRAGId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLDESCRIPTION", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallDescription")]
		private string _ssOverallDescription;
		public string ssOverallDescription {
			get {
				return _ssOverallDescription;
			}
			set {
				if ((_ssOverallDescription!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssOverallDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLUPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("OverallUpdatedBy")]
		private int _ssOverallUpdatedBy;
		public int ssOverallUpdatedBy {
			get {
				return _ssOverallUpdatedBy;
			}
			set {
				if ((_ssOverallUpdatedBy!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssOverallUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLUPDATEDAT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallUpdatedAt")]
		private DateTime _ssOverallUpdatedAt;
		public DateTime ssOverallUpdatedAt {
			get {
				return _ssOverallUpdatedAt;
			}
			set {
				if ((_ssOverallUpdatedAt!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssOverallUpdatedAt = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SHORTTERMRAGSTATUS", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ShortTermRAGStatus")]
		private int _ssShortTermRAGStatus;
		public int ssShortTermRAGStatus {
			get {
				return _ssShortTermRAGStatus;
			}
			set {
				if ((_ssShortTermRAGStatus!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssShortTermRAGStatus = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentCategoryRAGEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(12, true);
			OptimizedAttributes = new BitArray(12, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssCategoryId = 0;
			_ssShortTermRAGId = "";
			_ssShortTermDescription = "";
			_ssShortTermUpdatedBy = 0;
			_ssShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssOverallRAGId = "";
			_ssOverallDescription = "";
			_ssOverallUpdatedBy = 0;
			_ssOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssShortTermRAGStatus = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentCategoryRAG.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "StudentCategoryRAG.StudentReference", "");
			ssCategoryId = r.ReadEntityReference(index++, "StudentCategoryRAG.CategoryId", 0);
			ssShortTermRAGId = r.ReadTextEntityReference(index++, "StudentCategoryRAG.ShortTermRAGId", "");
			ssShortTermDescription = r.ReadText(index++, "StudentCategoryRAG.ShortTermDescription", "");
			ssShortTermUpdatedBy = r.ReadEntityReference(index++, "StudentCategoryRAG.ShortTermUpdatedBy", 0);
			ssShortTermUpdatedAt = r.ReadDateTime(index++, "StudentCategoryRAG.ShortTermUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssOverallRAGId = r.ReadTextEntityReference(index++, "StudentCategoryRAG.OverallRAGId", "");
			ssOverallDescription = r.ReadText(index++, "StudentCategoryRAG.OverallDescription", "");
			ssOverallUpdatedBy = r.ReadEntityReference(index++, "StudentCategoryRAG.OverallUpdatedBy", 0);
			ssOverallUpdatedAt = r.ReadDateTime(index++, "StudentCategoryRAG.OverallUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssShortTermRAGStatus = r.ReadEntityReference(index++, "StudentCategoryRAG.ShortTermRAGStatus", 0);
			ChangedAttributes = new BitArray(12, false);
			OptimizedAttributes = new BitArray(12, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentCategoryRAGEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentCategoryRAGEntityRecord a, ENStudentCategoryRAGEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssCategoryId != b.ssCategoryId) return false;
			if (a.ssShortTermRAGId != b.ssShortTermRAGId) return false;
			if (a.ssShortTermDescription != b.ssShortTermDescription) return false;
			if (a.ssShortTermUpdatedBy != b.ssShortTermUpdatedBy) return false;
			if (a.ssShortTermUpdatedAt != b.ssShortTermUpdatedAt) return false;
			if (a.ssOverallRAGId != b.ssOverallRAGId) return false;
			if (a.ssOverallDescription != b.ssOverallDescription) return false;
			if (a.ssOverallUpdatedBy != b.ssOverallUpdatedBy) return false;
			if (a.ssOverallUpdatedAt != b.ssOverallUpdatedAt) return false;
			if (a.ssShortTermRAGStatus != b.ssShortTermRAGStatus) return false;
			return true;
		}

		public static bool operator != (ENStudentCategoryRAGEntityRecord a, ENStudentCategoryRAGEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentCategoryRAGEntityRecord)) return false;
			return (this == (ENStudentCategoryRAGEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssCategoryId.GetHashCode()
				^ ssShortTermRAGId.GetHashCode()
				^ ssShortTermDescription.GetHashCode()
				^ ssShortTermUpdatedBy.GetHashCode()
				^ ssShortTermUpdatedAt.GetHashCode()
				^ ssOverallRAGId.GetHashCode()
				^ ssOverallDescription.GetHashCode()
				^ ssOverallUpdatedBy.GetHashCode()
				^ ssOverallUpdatedAt.GetHashCode()
				^ ssShortTermRAGStatus.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentCategoryRAGEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(12, true);
			OptimizedAttributes = new BitArray(12, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssCategoryId = 0;
			_ssShortTermRAGId = "";
			_ssShortTermDescription = "";
			_ssShortTermUpdatedBy = 0;
			_ssShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssOverallRAGId = "";
			_ssOverallDescription = "";
			_ssOverallUpdatedBy = 0;
			_ssOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssShortTermRAGStatus = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssCategoryId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssShortTermRAGId = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssShortTermDescription = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssShortTermUpdatedBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssShortTermUpdatedAt = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssOverallRAGId = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssOverallDescription = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssOverallUpdatedBy = (int) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssOverallUpdatedAt = (DateTime) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssShortTermRAGStatus = (int) info.GetValue(fields[11] .Name, fields[11] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentCategoryRAGEntityRecord Duplicate() {
			ENStudentCategoryRAGEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssCategoryId = this._ssCategoryId;
			t._ssShortTermRAGId = this._ssShortTermRAGId;
			t._ssShortTermDescription = this._ssShortTermDescription;
			t._ssShortTermUpdatedBy = this._ssShortTermUpdatedBy;
			t._ssShortTermUpdatedAt = this._ssShortTermUpdatedAt;
			t._ssOverallRAGId = this._ssOverallRAGId;
			t._ssOverallDescription = this._ssOverallDescription;
			t._ssOverallUpdatedBy = this._ssOverallUpdatedBy;
			t._ssOverallUpdatedAt = this._ssOverallUpdatedAt;
			t._ssShortTermRAGStatus = this._ssShortTermRAGStatus;
			t.ChangedAttributes = new BitArray(12);
			t.OptimizedAttributes = new BitArray(12);
			for (int i = 0; i < 12; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CategoryId")) VarValue.AppendAttribute(recordElem, "CategoryId", ssCategoryId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CategoryId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ShortTermRAGId")) VarValue.AppendAttribute(recordElem, "ShortTermRAGId", ssShortTermRAGId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ShortTermRAGId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ShortTermDescription")) VarValue.AppendAttribute(recordElem, "ShortTermDescription", ssShortTermDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ShortTermDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ShortTermUpdatedBy")) VarValue.AppendAttribute(recordElem, "ShortTermUpdatedBy", ssShortTermUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ShortTermUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ShortTermUpdatedAt")) VarValue.AppendAttribute(recordElem, "ShortTermUpdatedAt", ssShortTermUpdatedAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "ShortTermUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallRAGId")) VarValue.AppendAttribute(recordElem, "OverallRAGId", ssOverallRAGId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "OverallRAGId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallDescription")) VarValue.AppendAttribute(recordElem, "OverallDescription", ssOverallDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OverallDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallUpdatedBy")) VarValue.AppendAttribute(recordElem, "OverallUpdatedBy", ssOverallUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "OverallUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallUpdatedAt")) VarValue.AppendAttribute(recordElem, "OverallUpdatedAt", ssOverallUpdatedAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "OverallUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ShortTermRAGStatus")) VarValue.AppendAttribute(recordElem, "ShortTermRAGStatus", ssShortTermRAGStatus, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ShortTermRAGStatus");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "categoryid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CategoryId")) variable.Value = ssCategoryId; else variable.Optimized = true;
			} else if (head == "shorttermragid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ShortTermRAGId")) variable.Value = ssShortTermRAGId; else variable.Optimized = true;
			} else if (head == "shorttermdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ShortTermDescription")) variable.Value = ssShortTermDescription; else variable.Optimized = true;
			} else if (head == "shorttermupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ShortTermUpdatedBy")) variable.Value = ssShortTermUpdatedBy; else variable.Optimized = true;
			} else if (head == "shorttermupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ShortTermUpdatedAt")) variable.Value = ssShortTermUpdatedAt; else variable.Optimized = true;
			} else if (head == "overallragid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallRAGId")) variable.Value = ssOverallRAGId; else variable.Optimized = true;
			} else if (head == "overalldescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallDescription")) variable.Value = ssOverallDescription; else variable.Optimized = true;
			} else if (head == "overallupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallUpdatedBy")) variable.Value = ssOverallUpdatedBy; else variable.Optimized = true;
			} else if (head == "overallupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallUpdatedAt")) variable.Value = ssOverallUpdatedAt; else variable.Optimized = true;
			} else if (head == "shorttermragstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ShortTermRAGStatus")) variable.Value = ssShortTermRAGStatus; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdCategoryId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdShortTermRAGId)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdShortTermDescription)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdShortTermUpdatedBy)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdShortTermUpdatedAt)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdOverallRAGId)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdOverallDescription)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdOverallUpdatedBy)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdOverallUpdatedAt)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdShortTermRAGStatus)) {
				return ChangedAttributes[11];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdCategoryId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdShortTermRAGId)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdShortTermDescription)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdShortTermUpdatedBy)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdShortTermUpdatedAt)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdOverallRAGId)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdOverallDescription)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdOverallUpdatedBy)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdOverallUpdatedAt)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdShortTermRAGStatus)) {
				return OptimizedAttributes[11];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdCategoryId) {
				return ssCategoryId;
			} else if (key == IdShortTermRAGId) {
				return ssShortTermRAGId;
			} else if (key == IdShortTermDescription) {
				return ssShortTermDescription;
			} else if (key == IdShortTermUpdatedBy) {
				return ssShortTermUpdatedBy;
			} else if (key == IdShortTermUpdatedAt) {
				return ssShortTermUpdatedAt;
			} else if (key == IdOverallRAGId) {
				return ssOverallRAGId;
			} else if (key == IdOverallDescription) {
				return ssOverallDescription;
			} else if (key == IdOverallUpdatedBy) {
				return ssOverallUpdatedBy;
			} else if (key == IdOverallUpdatedAt) {
				return ssOverallUpdatedAt;
			} else if (key == IdShortTermRAGStatus) {
				return ssShortTermRAGStatus;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(12);
			OptimizedAttributes = new BitArray(12);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssCategoryId = (int) other.AttributeGet(IdCategoryId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdCategoryId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdCategoryId);
			ssShortTermRAGId = (string) other.AttributeGet(IdShortTermRAGId);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdShortTermRAGId);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdShortTermRAGId);
			ssShortTermDescription = (string) other.AttributeGet(IdShortTermDescription);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdShortTermDescription);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdShortTermDescription);
			ssShortTermUpdatedBy = (int) other.AttributeGet(IdShortTermUpdatedBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdShortTermUpdatedBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdShortTermUpdatedBy);
			ssShortTermUpdatedAt = (DateTime) other.AttributeGet(IdShortTermUpdatedAt);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdShortTermUpdatedAt);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdShortTermUpdatedAt);
			ssOverallRAGId = (string) other.AttributeGet(IdOverallRAGId);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdOverallRAGId);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdOverallRAGId);
			ssOverallDescription = (string) other.AttributeGet(IdOverallDescription);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdOverallDescription);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdOverallDescription);
			ssOverallUpdatedBy = (int) other.AttributeGet(IdOverallUpdatedBy);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdOverallUpdatedBy);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdOverallUpdatedBy);
			ssOverallUpdatedAt = (DateTime) other.AttributeGet(IdOverallUpdatedAt);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdOverallUpdatedAt);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdOverallUpdatedAt);
			ssShortTermRAGStatus = (int) other.AttributeGet(IdShortTermRAGStatus);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdShortTermRAGStatus);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdShortTermRAGStatus);
		}
	} // ENStudentCategoryRAGEntityRecord
	/// <summary>
	/// Structure <code>RCStudentCategoryRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentCategoryRAGRecord: ISerializable, ITypedRecord<RCStudentCategoryRAGRecord> {
		private static readonly GlobalObjectKey IdStudentCategoryRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ST8QIZ08_7yz1mT7xO_vSw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentCategoryRAG")]
		public ENStudentCategoryRAGEntityRecord ssENStudentCategoryRAG;


		public static implicit operator ENStudentCategoryRAGEntityRecord(RCStudentCategoryRAGRecord r) {
			return r.ssENStudentCategoryRAG;
		}

		public static implicit operator RCStudentCategoryRAGRecord(ENStudentCategoryRAGEntityRecord r) {
			RCStudentCategoryRAGRecord res = new RCStudentCategoryRAGRecord(null);
			res.ssENStudentCategoryRAG = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentCategoryRAG.ChangedAttributes = value;
			}
			get {
				return ssENStudentCategoryRAG.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentCategoryRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentCategoryRAG = new ENStudentCategoryRAGEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(12, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentCategoryRAG.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentCategoryRAG.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentCategoryRAG.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentCategoryRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentCategoryRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentCategoryRAGRecord a, RCStudentCategoryRAGRecord b) {
			if (a.ssENStudentCategoryRAG != b.ssENStudentCategoryRAG) return false;
			return true;
		}

		public static bool operator != (RCStudentCategoryRAGRecord a, RCStudentCategoryRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentCategoryRAGRecord)) return false;
			return (this == (RCStudentCategoryRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentCategoryRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentCategoryRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentCategoryRAG = new ENStudentCategoryRAGEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentCategoryRAG = (ENStudentCategoryRAGEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentCategoryRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentCategoryRAG.InternalRecursiveSave();
		}


		public RCStudentCategoryRAGRecord Duplicate() {
			RCStudentCategoryRAGRecord t;
			t.ssENStudentCategoryRAG = (ENStudentCategoryRAGEntityRecord) this.ssENStudentCategoryRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentCategoryRAG.ToXml(this, recordElem, "StudentCategoryRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentcategoryrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCategoryRAG")) variable.Value = ssENStudentCategoryRAG; else variable.Optimized = true;
				variable.SetFieldName("studentcategoryrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentCategoryRAG.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentCategoryRAG.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentCategoryRAG) {
				return ssENStudentCategoryRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentCategoryRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentCategoryRAG));
		}
	} // RCStudentCategoryRAGRecord
	/// <summary>
	/// RecordList type <code>RLStudentCategoryRAGRecordList</code> that represents a record list of
	///  <code>StudentCategoryRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentCategoryRAGRecordList: GenericRecordList<RCStudentCategoryRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentCategoryRAGRecord GetElementDefaultValue() {
			return new RCStudentCategoryRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentCategoryRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentCategoryRAGRecordList recordlist, Func<RCStudentCategoryRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentCategoryRAGRecordList ToList<T>(T[] array, Func <T, RCStudentCategoryRAGRecord> converter) {
			RLStudentCategoryRAGRecordList result = new RLStudentCategoryRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentCategoryRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentCategoryRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentCategoryRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentCategoryRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(12, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentCategoryRAGRecord> NewList() {
			return new RLStudentCategoryRAGRecordList();
		}


	} // RLStudentCategoryRAGRecordList

	/// <summary>
	/// RecordList type <code>RLStudentCategoryRAGList</code> that represents a record list of
	///  <code>StudentIdentifier, CategoryIdentifier, UserIdentifier, UserIdentifier, Text, Text, DateTime
	/// , DateTime, Integer, RAGStatusIdentifier, RAGStatusIdentifier, ShortTermRAGStatusIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentCategoryRAGList: GenericRecordList<ENStudentCategoryRAGEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentCategoryRAGEntityRecord GetElementDefaultValue() {
			return new ENStudentCategoryRAGEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentCategoryRAGEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentCategoryRAGList recordlist, Func<ENStudentCategoryRAGEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentCategoryRAGList ToList<T>(T[] array, Func <T, ENStudentCategoryRAGEntityRecord> converter) {
			RLStudentCategoryRAGList result = new RLStudentCategoryRAGList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentCategoryRAGList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentCategoryRAGList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentCategoryRAGList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentCategoryRAGList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentCategoryRAGEntityRecord> NewList() {
			return new RLStudentCategoryRAGList();
		}


	} // RLStudentCategoryRAGList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentCategoryRAG
		/// </summary>

		public static void CreateStudentCategoryRAG(HeContext heContext, RCStudentCategoryRAGRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCategoryRAGEntity.eSpaceId;
				ENStudentCategoryRAGEntityRecord ssENStudentCategoryRAG = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentCategoryRAGEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [CATEGORYID]" +
					 ", [SHORTTERMRAGID]" +
					 ", [SHORTTERMDESCRIPTION]" +
					 ", [SHORTTERMUPDATEDBY]" +
					 ", [SHORTTERMUPDATEDAT]" +
					 ", [OVERALLRAGID]" +
					 ", [OVERALLDESCRIPTION]" +
					 ", [OVERALLUPDATEDBY]" +
					 ", [OVERALLUPDATEDAT]" +
					 ", [SHORTTERMRAGSTATUS]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssCategoryId" +
					 ", @ssShortTermRAGId" +
					 ", @ssShortTermDescription" +
					 ", @ssShortTermUpdatedBy" +
					 ", @ssShortTermUpdatedAt" +
					 ", @ssOverallRAGId" +
					 ", @ssOverallDescription" +
					 ", @ssOverallUpdatedBy" +
					 ", @ssOverallUpdatedAt" +
					 ", @ssShortTermRAGStatus" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentCategoryRAG.ssStudentReference);
					insertSqlCmd.CreateParameter("@ssCategoryId", DbType.Int32, ssENStudentCategoryRAG.ssCategoryId);
					if ((ssENStudentCategoryRAG.ssShortTermRAGId== "")) {
						insertSqlCmd.CreateParameter("@ssShortTermRAGId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssShortTermRAGId", DbType.String, ssENStudentCategoryRAG.ssShortTermRAGId);
					}
					insertSqlCmd.CreateParameter("@ssShortTermDescription", DbType.String, ssENStudentCategoryRAG.ssShortTermDescription);
					if ((ssENStudentCategoryRAG.ssShortTermUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssShortTermUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssShortTermUpdatedBy", DbType.Int32, ssENStudentCategoryRAG.ssShortTermUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssShortTermUpdatedAt", DbType.DateTime, ssENStudentCategoryRAG.ssShortTermUpdatedAt);
					if ((ssENStudentCategoryRAG.ssOverallRAGId== "")) {
						insertSqlCmd.CreateParameter("@ssOverallRAGId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssOverallRAGId", DbType.String, ssENStudentCategoryRAG.ssOverallRAGId);
					}
					insertSqlCmd.CreateParameter("@ssOverallDescription", DbType.String, ssENStudentCategoryRAG.ssOverallDescription);
					if ((ssENStudentCategoryRAG.ssOverallUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssOverallUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssOverallUpdatedBy", DbType.Int32, ssENStudentCategoryRAG.ssOverallUpdatedBy);
					}
					insertSqlCmd.CreateParameter("@ssOverallUpdatedAt", DbType.DateTime, ssENStudentCategoryRAG.ssOverallUpdatedAt);
					if ((ssENStudentCategoryRAG.ssShortTermRAGStatus==0)) {
						insertSqlCmd.CreateParameter("@ssShortTermRAGStatus", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssShortTermRAGStatus", DbType.Int32, ssENStudentCategoryRAG.ssShortTermRAGStatus);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentCategoryRAG", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentCategoryRAG
		/// </summary>

		public static void CreateOrUpdateStudentCategoryRAG(HeContext heContext, BitArray usedFields, RCStudentCategoryRAGRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCategoryRAGEntity.eSpaceId;
				ENStudentCategoryRAGEntityRecord ssENStudentCategoryRAG = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(12, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentCategoryRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORYID] = @ssCategoryId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SHORTTERMRAGID] = @ssShortTermRAGId"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SHORTTERMDESCRIPTION] = @ssShortTermDescription"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SHORTTERMUPDATEDBY] = @ssShortTermUpdatedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SHORTTERMUPDATEDAT] = @ssShortTermUpdatedAt"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLRAGID] = @ssOverallRAGId"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLDESCRIPTION] = @ssOverallDescription"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLUPDATEDBY] = @ssOverallUpdatedBy"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLUPDATEDAT] = @ssOverallUpdatedAt"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SHORTTERMRAGSTATUS] = @ssShortTermRAGStatus"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentCategoryRAGssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentCategoryRAG.ssStudentReference);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssCategoryId", DbType.Int32, ssENStudentCategoryRAG.ssCategoryId);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENStudentCategoryRAG.ssShortTermRAGId== "")) {
							sqlCmd.CreateParameter("@ssShortTermRAGId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssShortTermRAGId", DbType.String, ssENStudentCategoryRAG.ssShortTermRAGId);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssShortTermDescription", DbType.String, ssENStudentCategoryRAG.ssShortTermDescription);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENStudentCategoryRAG.ssShortTermUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssShortTermUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssShortTermUpdatedBy", DbType.Int32, ssENStudentCategoryRAG.ssShortTermUpdatedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssShortTermUpdatedAt", DbType.DateTime, ssENStudentCategoryRAG.ssShortTermUpdatedAt);
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENStudentCategoryRAG.ssOverallRAGId== "")) {
							sqlCmd.CreateParameter("@ssOverallRAGId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssOverallRAGId", DbType.String, ssENStudentCategoryRAG.ssOverallRAGId);
						}
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssOverallDescription", DbType.String, ssENStudentCategoryRAG.ssOverallDescription);
						counter++;
					}
					if (usedFields[9]) {
						if ((ssENStudentCategoryRAG.ssOverallUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssOverallUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssOverallUpdatedBy", DbType.Int32, ssENStudentCategoryRAG.ssOverallUpdatedBy);
						}
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssOverallUpdatedAt", DbType.DateTime, ssENStudentCategoryRAG.ssOverallUpdatedAt);
						counter++;
					}
					if (usedFields[11]) {
						if ((ssENStudentCategoryRAG.ssShortTermRAGStatus==0)) {
							sqlCmd.CreateParameter("@ssShortTermRAGStatus", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssShortTermRAGStatus", DbType.Int32, ssENStudentCategoryRAG.ssShortTermRAGStatus);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[SHORTTERMUPDATEDAT] = [SHORTTERMUPDATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentCategoryRAGssId", DbType.Int32, ssENStudentCategoryRAG.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentCategoryRAG (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentCategoryRAGEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [CATEGORYID]" +
						 ", [SHORTTERMRAGID]" +
						 ", [SHORTTERMDESCRIPTION]" +
						 ", [SHORTTERMUPDATEDBY]" +
						 ", [SHORTTERMUPDATEDAT]" +
						 ", [OVERALLRAGID]" +
						 ", [OVERALLDESCRIPTION]" +
						 ", [OVERALLUPDATEDBY]" +
						 ", [OVERALLUPDATEDAT]" +
						 ", [SHORTTERMRAGSTATUS]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssCategoryId" +
						 ", @ssShortTermRAGId" +
						 ", @ssShortTermDescription" +
						 ", @ssShortTermUpdatedBy" +
						 ", @ssShortTermUpdatedAt" +
						 ", @ssOverallRAGId" +
						 ", @ssOverallDescription" +
						 ", @ssOverallUpdatedBy" +
						 ", @ssOverallUpdatedAt" +
						 ", @ssShortTermRAGStatus" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentCategoryRAG.ssStudentReference);
						insertSqlCmd.CreateParameter("@ssCategoryId", DbType.Int32, ssENStudentCategoryRAG.ssCategoryId);
						if ((ssENStudentCategoryRAG.ssShortTermRAGId== "")) {
							insertSqlCmd.CreateParameter("@ssShortTermRAGId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssShortTermRAGId", DbType.String, ssENStudentCategoryRAG.ssShortTermRAGId);
						}
						insertSqlCmd.CreateParameter("@ssShortTermDescription", DbType.String, ssENStudentCategoryRAG.ssShortTermDescription);
						if ((ssENStudentCategoryRAG.ssShortTermUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssShortTermUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssShortTermUpdatedBy", DbType.Int32, ssENStudentCategoryRAG.ssShortTermUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssShortTermUpdatedAt", DbType.DateTime, ssENStudentCategoryRAG.ssShortTermUpdatedAt);
						if ((ssENStudentCategoryRAG.ssOverallRAGId== "")) {
							insertSqlCmd.CreateParameter("@ssOverallRAGId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssOverallRAGId", DbType.String, ssENStudentCategoryRAG.ssOverallRAGId);
						}
						insertSqlCmd.CreateParameter("@ssOverallDescription", DbType.String, ssENStudentCategoryRAG.ssOverallDescription);
						if ((ssENStudentCategoryRAG.ssOverallUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssOverallUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssOverallUpdatedBy", DbType.Int32, ssENStudentCategoryRAG.ssOverallUpdatedBy);
						}
						insertSqlCmd.CreateParameter("@ssOverallUpdatedAt", DbType.DateTime, ssENStudentCategoryRAG.ssOverallUpdatedAt);
						if ((ssENStudentCategoryRAG.ssShortTermRAGStatus==0)) {
							insertSqlCmd.CreateParameter("@ssShortTermRAGStatus", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssShortTermRAGStatus", DbType.Int32, ssENStudentCategoryRAG.ssShortTermRAGStatus);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentCategoryRAG", true), typeof(int));
					} else {
						outParamId = ssENStudentCategoryRAG.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentCategoryRAG
		/// </summary>

		public static void DeleteStudentCategoryRAG(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCategoryRAGEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentCategoryRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentCategoryRAG", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentCategoryRAG
		/// </summary>

		public static void GetStudentCategoryRAG(HeContext heContext, int inParamId, out RCStudentCategoryRAGRecord outParamRecord) {
			outParamRecord = new RCStudentCategoryRAGRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCategoryRAGEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [CATEGORYID]" +
					 ", [SHORTTERMRAGID]" +
					 ", [SHORTTERMDESCRIPTION]" +
					 ", [SHORTTERMUPDATEDBY]" +
					 ", [SHORTTERMUPDATEDAT]" +
					 ", [OVERALLRAGID]" +
					 ", [OVERALLDESCRIPTION]" +
					 ", [OVERALLUPDATEDBY]" +
					 ", [OVERALLUPDATEDAT]" +
					 ", [SHORTTERMRAGSTATUS]" +
					 " FROM " + ENStudentCategoryRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentCategoryRAG", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(12, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentCategoryRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentCategoryRAGForUpdate
		/// </summary>

		public static void GetStudentCategoryRAGForUpdate(HeContext heContext, int inParamId, out RCStudentCategoryRAGRecord outParamRecord) {
			outParamRecord = new RCStudentCategoryRAGRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCategoryRAGEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [CATEGORYID]" +
					 ", [SHORTTERMRAGID]" +
					 ", [SHORTTERMDESCRIPTION]" +
					 ", [SHORTTERMUPDATEDBY]" +
					 ", [SHORTTERMUPDATEDAT]" +
					 ", [OVERALLRAGID]" +
					 ", [OVERALLDESCRIPTION]" +
					 ", [OVERALLUPDATEDBY]" +
					 ", [OVERALLUPDATEDAT]" +
					 ", [SHORTTERMRAGSTATUS]" +
					 "FROM " + ENStudentCategoryRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentCategoryRAGForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(12, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentCategoryRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentCategoryRAG
		/// </summary>

		public static void UpdateStudentCategoryRAG(HeContext heContext, BitArray usedFields, RCStudentCategoryRAGRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentCategoryRAGEntity.eSpaceId;
				ENStudentCategoryRAGEntityRecord ssENStudentCategoryRAG = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(12, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentCategoryRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORYID] = @ssCategoryId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SHORTTERMRAGID] = @ssShortTermRAGId"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SHORTTERMDESCRIPTION] = @ssShortTermDescription"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SHORTTERMUPDATEDBY] = @ssShortTermUpdatedBy"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SHORTTERMUPDATEDAT] = @ssShortTermUpdatedAt"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLRAGID] = @ssOverallRAGId"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLDESCRIPTION] = @ssOverallDescription"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLUPDATEDBY] = @ssOverallUpdatedBy"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLUPDATEDAT] = @ssOverallUpdatedAt"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SHORTTERMRAGSTATUS] = @ssShortTermRAGStatus"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentCategoryRAGssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentCategoryRAG.ssStudentReference);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssCategoryId", DbType.Int32, ssENStudentCategoryRAG.ssCategoryId);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENStudentCategoryRAG.ssShortTermRAGId== "")) {
							sqlCmd.CreateParameter("@ssShortTermRAGId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssShortTermRAGId", DbType.String, ssENStudentCategoryRAG.ssShortTermRAGId);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssShortTermDescription", DbType.String, ssENStudentCategoryRAG.ssShortTermDescription);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENStudentCategoryRAG.ssShortTermUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssShortTermUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssShortTermUpdatedBy", DbType.Int32, ssENStudentCategoryRAG.ssShortTermUpdatedBy);
						}
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssShortTermUpdatedAt", DbType.DateTime, ssENStudentCategoryRAG.ssShortTermUpdatedAt);
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENStudentCategoryRAG.ssOverallRAGId== "")) {
							sqlCmd.CreateParameter("@ssOverallRAGId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssOverallRAGId", DbType.String, ssENStudentCategoryRAG.ssOverallRAGId);
						}
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssOverallDescription", DbType.String, ssENStudentCategoryRAG.ssOverallDescription);
						counter++;
					}
					if (usedFields[9]) {
						if ((ssENStudentCategoryRAG.ssOverallUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssOverallUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssOverallUpdatedBy", DbType.Int32, ssENStudentCategoryRAG.ssOverallUpdatedBy);
						}
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssOverallUpdatedAt", DbType.DateTime, ssENStudentCategoryRAG.ssOverallUpdatedAt);
						counter++;
					}
					if (usedFields[11]) {
						if ((ssENStudentCategoryRAG.ssShortTermRAGStatus==0)) {
							sqlCmd.CreateParameter("@ssShortTermRAGStatus", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssShortTermRAGStatus", DbType.Int32, ssENStudentCategoryRAG.ssShortTermRAGStatus);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[SHORTTERMUPDATEDAT] = [SHORTTERMUPDATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentCategoryRAGssId", DbType.Int32, ssENStudentCategoryRAG.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentCategoryRAG", true) <= 0)
					throw new DataBaseException(ENStudentCategoryRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentCategoryRAG.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentCategoryRAG")]
	public class WORCStudentCategoryRAGRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("CategoryId")]
		public int varWSCategoryId;

		[System.Xml.Serialization.XmlElement("ShortTermRAGId")]
		public string varWSShortTermRAGId;

		[System.Xml.Serialization.XmlElement("ShortTermDescription")]
		public string varWSShortTermDescription;

		[System.Xml.Serialization.XmlElement("ShortTermUpdatedBy")]
		public int varWSShortTermUpdatedBy;

		[System.Xml.Serialization.XmlElement("ShortTermUpdatedAt")]
		public DateTime varWSShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("OverallRAGId")]
		public string varWSOverallRAGId;

		[System.Xml.Serialization.XmlElement("OverallDescription")]
		public string varWSOverallDescription;

		[System.Xml.Serialization.XmlElement("OverallUpdatedBy")]
		public int varWSOverallUpdatedBy;

		[System.Xml.Serialization.XmlElement("OverallUpdatedAt")]
		public DateTime varWSOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("ShortTermRAGStatus")]
		public int varWSShortTermRAGStatus;

		public WORCStudentCategoryRAGRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSCategoryId = (int) 0;
			varWSShortTermRAGId = (string) "";
			varWSShortTermDescription = (string) "";
			varWSShortTermUpdatedBy = (int) 0;
			varWSShortTermUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSOverallRAGId = (string) "";
			varWSOverallDescription = (string) "";
			varWSOverallUpdatedBy = (int) 0;
			varWSOverallUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSShortTermRAGStatus = (int) 0;
		}

		public WORCStudentCategoryRAGRecord(ENStudentCategoryRAGEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSCategoryId = (int) r.ssCategoryId;
			varWSShortTermRAGId = BaseAppUtils.RemoveControlChars(r.ssShortTermRAGId);
			varWSShortTermDescription = BaseAppUtils.RemoveControlChars(r.ssShortTermDescription);
			varWSShortTermUpdatedBy = (int) r.ssShortTermUpdatedBy;
			varWSShortTermUpdatedAt = (DateTime) r.ssShortTermUpdatedAt;
			varWSOverallRAGId = BaseAppUtils.RemoveControlChars(r.ssOverallRAGId);
			varWSOverallDescription = BaseAppUtils.RemoveControlChars(r.ssOverallDescription);
			varWSOverallUpdatedBy = (int) r.ssOverallUpdatedBy;
			varWSOverallUpdatedAt = (DateTime) r.ssOverallUpdatedAt;
			varWSShortTermRAGStatus = (int) r.ssShortTermRAGStatus;
		}

		public static RLStudentCategoryRAGList ToRecordList(WORCStudentCategoryRAGRecord[] array) {
			RLStudentCategoryRAGList rl = new RLStudentCategoryRAGList();
			if (array != null) {
				foreach(WORCStudentCategoryRAGRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentCategoryRAGRecord[] FromRecordList(RLStudentCategoryRAGList rl) {
			WORCStudentCategoryRAGRecord[] array = new WORCStudentCategoryRAGRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentCategoryRAGRecord {
		public static implicit operator WORCStudentCategoryRAGRecord(RCStudentCategoryRAGRecord r) {
			return new WORCStudentCategoryRAGRecord(r.ssENStudentCategoryRAG);
		}

		public static implicit operator RCStudentCategoryRAGRecord(WORCStudentCategoryRAGRecord w) {
			RCStudentCategoryRAGRecord r = new RCStudentCategoryRAGRecord("");
			if (w != null) {
				r.ssENStudentCategoryRAG = w;
			}
			return r;
		}

	}

	partial struct ENStudentCategoryRAGEntityRecord {
		public static implicit operator WORCStudentCategoryRAGRecord(ENStudentCategoryRAGEntityRecord r) {
			return new WORCStudentCategoryRAGRecord(r);
		}

		public static implicit operator ENStudentCategoryRAGEntityRecord(WORCStudentCategoryRAGRecord w) {
			ENStudentCategoryRAGEntityRecord r = new ENStudentCategoryRAGEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssCategoryId = (int) w.varWSCategoryId;
				r.ssShortTermRAGId = (string) w.varWSShortTermRAGId;
				r.ssShortTermDescription = ((string) w.varWSShortTermDescription ?? "");
				r.ssShortTermUpdatedBy = (int) w.varWSShortTermUpdatedBy;
				r.ssShortTermUpdatedAt = (DateTime) w.varWSShortTermUpdatedAt;
				r.ssOverallRAGId = (string) w.varWSOverallRAGId;
				r.ssOverallDescription = ((string) w.varWSOverallDescription ?? "");
				r.ssOverallUpdatedBy = (int) w.varWSOverallUpdatedBy;
				r.ssOverallUpdatedAt = (DateTime) w.varWSOverallUpdatedAt;
				r.ssShortTermRAGStatus = (int) w.varWSShortTermRAGStatus;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentCategoryRAGRecordList {
		public WORCStudentCategoryRAGRecord[] Array;


		public WORLStudentCategoryRAGRecordList(WORCStudentCategoryRAGRecord[] r) {
			if (r == null)
			Array = new WORCStudentCategoryRAGRecord[0];
			else
			Array = r;
		}
		public WORLStudentCategoryRAGRecordList() {
			Array = new WORCStudentCategoryRAGRecord[0];
		}

		public WORLStudentCategoryRAGRecordList(RLStudentCategoryRAGRecordList rl) {
			rl=(RLStudentCategoryRAGRecordList) rl.Duplicate();
			Array = new WORCStudentCategoryRAGRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentCategoryRAGRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentCategoryRAGRecordList {
		public static implicit operator RLStudentCategoryRAGRecordList(WORCStudentCategoryRAGRecord[] array) {
			RLStudentCategoryRAGRecordList rl = new RLStudentCategoryRAGRecordList();
			if (array != null) {
				foreach(WORCStudentCategoryRAGRecord val in array) {
					rl.Append((RCStudentCategoryRAGRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentCategoryRAGRecord[](RLStudentCategoryRAGRecordList rl) {
			WORCStudentCategoryRAGRecord[] array = new WORCStudentCategoryRAGRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentCategoryRAGRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentCategoryRAGRecordList {
		public static implicit operator RLStudentCategoryRAGRecordList(WORLStudentCategoryRAGRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentCategoryRAGRecordList(RLStudentCategoryRAGRecordList rl) {
			return new WORLStudentCategoryRAGRecordList(rl);
		}
		public static implicit operator WORCStudentCategoryRAGRecord[](WORLStudentCategoryRAGRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentCategoryRAGRecordList(WORCStudentCategoryRAGRecord[] array) {
			return new WORLStudentCategoryRAGRecordList(array);
		}
	}
}

