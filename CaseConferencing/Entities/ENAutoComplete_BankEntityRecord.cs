/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENAutoComplete_BankEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENAutoComplete_BankEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENAutoComplete_BankEntity.eSpaceId;
	} // ENAutoComplete_BankEntity

	/// <summary>
	/// Entity <code>ENAutoComplete_BankEntityRecord</code> that represents the Service Studio entity
	///  <code>AutoComplete_Bank</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("AutoComplete_Bank", "T8DatnzY2k+G0vc5ViYEfQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_AutoComplete_Bank", "")]
	[Serializable()]
	public partial struct ENAutoComplete_BankEntityRecord: ISerializable, ITypedRecord<ENAutoComplete_BankEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ZriKD6jSq0uKQ753iACxVQ");
		private static readonly GlobalObjectKey IdTypeId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xeV7_5y3VUepoOERJD8kBw");
		private static readonly GlobalObjectKey IdCategory_1 = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*LltBW9Q3N0eBw+xS8PoNbw");
		private static readonly GlobalObjectKey IdCategory_2 = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*A2I0sGdTgkOnx178vid3EQ");
		private static readonly GlobalObjectKey IdCategory_3 = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*65+W5QBWaEeBZ4qJ9ndhIQ");
		private static readonly GlobalObjectKey IdCategory_4 = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*TpIjJMUsAEaqUmJl_j73jg");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Bw0Io2pNIECn8dHBI39g9g");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TYPEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("TypeId")]
		private int _ssTypeId;
		public int ssTypeId {
			get {
				return _ssTypeId;
			}
			set {
				if ((_ssTypeId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssTypeId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CATEGORY_1", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Category_1")]
		private string _ssCategory_1;
		public string ssCategory_1 {
			get {
				return _ssCategory_1;
			}
			set {
				if ((_ssCategory_1!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssCategory_1 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CATEGORY_2", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Category_2")]
		private string _ssCategory_2;
		public string ssCategory_2 {
			get {
				return _ssCategory_2;
			}
			set {
				if ((_ssCategory_2!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssCategory_2 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CATEGORY_3", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Category_3")]
		private string _ssCategory_3;
		public string ssCategory_3 {
			get {
				return _ssCategory_3;
			}
			set {
				if ((_ssCategory_3!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCategory_3 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CATEGORY_4", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Category_4")]
		private string _ssCategory_4;
		public string ssCategory_4 {
			get {
				return _ssCategory_4;
			}
			set {
				if ((_ssCategory_4!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCategory_4 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssDescription = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENAutoComplete_BankEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssTypeId = 0;
			_ssCategory_1 = "";
			_ssCategory_2 = "";
			_ssCategory_3 = "";
			_ssCategory_4 = "";
			_ssDescription = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "AutoComplete_Bank.Id", 0);
			ssTypeId = r.ReadEntityReference(index++, "AutoComplete_Bank.TypeId", 0);
			ssCategory_1 = r.ReadText(index++, "AutoComplete_Bank.Category_1", "");
			ssCategory_2 = r.ReadText(index++, "AutoComplete_Bank.Category_2", "");
			ssCategory_3 = r.ReadText(index++, "AutoComplete_Bank.Category_3", "");
			ssCategory_4 = r.ReadText(index++, "AutoComplete_Bank.Category_4", "");
			ssDescription = r.ReadText(index++, "AutoComplete_Bank.Description", "");
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENAutoComplete_BankEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENAutoComplete_BankEntityRecord a, ENAutoComplete_BankEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssTypeId != b.ssTypeId) return false;
			if (a.ssCategory_1 != b.ssCategory_1) return false;
			if (a.ssCategory_2 != b.ssCategory_2) return false;
			if (a.ssCategory_3 != b.ssCategory_3) return false;
			if (a.ssCategory_4 != b.ssCategory_4) return false;
			if (a.ssDescription != b.ssDescription) return false;
			return true;
		}

		public static bool operator != (ENAutoComplete_BankEntityRecord a, ENAutoComplete_BankEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENAutoComplete_BankEntityRecord)) return false;
			return (this == (ENAutoComplete_BankEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssTypeId.GetHashCode()
				^ ssCategory_1.GetHashCode()
				^ ssCategory_2.GetHashCode()
				^ ssCategory_3.GetHashCode()
				^ ssCategory_4.GetHashCode()
				^ ssDescription.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENAutoComplete_BankEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssTypeId = 0;
			_ssCategory_1 = "";
			_ssCategory_2 = "";
			_ssCategory_3 = "";
			_ssCategory_4 = "";
			_ssDescription = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssTypeId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssCategory_1 = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssCategory_2 = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCategory_3 = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCategory_4 = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENAutoComplete_BankEntityRecord Duplicate() {
			ENAutoComplete_BankEntityRecord t;
			t._ssId = this._ssId;
			t._ssTypeId = this._ssTypeId;
			t._ssCategory_1 = this._ssCategory_1;
			t._ssCategory_2 = this._ssCategory_2;
			t._ssCategory_3 = this._ssCategory_3;
			t._ssCategory_4 = this._ssCategory_4;
			t._ssDescription = this._ssDescription;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TypeId")) VarValue.AppendAttribute(recordElem, "TypeId", ssTypeId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "TypeId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Category_1")) VarValue.AppendAttribute(recordElem, "Category_1", ssCategory_1, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Category_1");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Category_2")) VarValue.AppendAttribute(recordElem, "Category_2", ssCategory_2, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Category_2");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Category_3")) VarValue.AppendAttribute(recordElem, "Category_3", ssCategory_3, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Category_3");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Category_4")) VarValue.AppendAttribute(recordElem, "Category_4", ssCategory_4, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Category_4");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "typeid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TypeId")) variable.Value = ssTypeId; else variable.Optimized = true;
			} else if (head == "category_1") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Category_1")) variable.Value = ssCategory_1; else variable.Optimized = true;
			} else if (head == "category_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Category_2")) variable.Value = ssCategory_2; else variable.Optimized = true;
			} else if (head == "category_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Category_3")) variable.Value = ssCategory_3; else variable.Optimized = true;
			} else if (head == "category_4") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Category_4")) variable.Value = ssCategory_4; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdTypeId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdCategory_1)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdCategory_2)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCategory_3)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCategory_4)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdTypeId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdCategory_1)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdCategory_2)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCategory_3)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCategory_4)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdTypeId) {
				return ssTypeId;
			} else if (key == IdCategory_1) {
				return ssCategory_1;
			} else if (key == IdCategory_2) {
				return ssCategory_2;
			} else if (key == IdCategory_3) {
				return ssCategory_3;
			} else if (key == IdCategory_4) {
				return ssCategory_4;
			} else if (key == IdDescription) {
				return ssDescription;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssTypeId = (int) other.AttributeGet(IdTypeId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdTypeId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdTypeId);
			ssCategory_1 = (string) other.AttributeGet(IdCategory_1);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdCategory_1);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdCategory_1);
			ssCategory_2 = (string) other.AttributeGet(IdCategory_2);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdCategory_2);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdCategory_2);
			ssCategory_3 = (string) other.AttributeGet(IdCategory_3);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCategory_3);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCategory_3);
			ssCategory_4 = (string) other.AttributeGet(IdCategory_4);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCategory_4);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCategory_4);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdDescription);
		}
	} // ENAutoComplete_BankEntityRecord
	/// <summary>
	/// Structure <code>RCAutoComplete_BankRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAutoComplete_BankRecord: ISerializable, ITypedRecord<RCAutoComplete_BankRecord> {
		private static readonly GlobalObjectKey IdAutoComplete_Bank = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*+c0V1X9OFLPiikvKc4Oj_w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AutoComplete_Bank")]
		public ENAutoComplete_BankEntityRecord ssENAutoComplete_Bank;


		public static implicit operator ENAutoComplete_BankEntityRecord(RCAutoComplete_BankRecord r) {
			return r.ssENAutoComplete_Bank;
		}

		public static implicit operator RCAutoComplete_BankRecord(ENAutoComplete_BankEntityRecord r) {
			RCAutoComplete_BankRecord res = new RCAutoComplete_BankRecord(null);
			res.ssENAutoComplete_Bank = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENAutoComplete_Bank.ChangedAttributes = value;
			}
			get {
				return ssENAutoComplete_Bank.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCAutoComplete_BankRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENAutoComplete_Bank = new ENAutoComplete_BankEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENAutoComplete_Bank.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENAutoComplete_Bank.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENAutoComplete_Bank.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENAutoComplete_Bank.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAutoComplete_BankRecord r) {
			this = r;
		}


		public static bool operator == (RCAutoComplete_BankRecord a, RCAutoComplete_BankRecord b) {
			if (a.ssENAutoComplete_Bank != b.ssENAutoComplete_Bank) return false;
			return true;
		}

		public static bool operator != (RCAutoComplete_BankRecord a, RCAutoComplete_BankRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAutoComplete_BankRecord)) return false;
			return (this == (RCAutoComplete_BankRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENAutoComplete_Bank.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAutoComplete_BankRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENAutoComplete_Bank = new ENAutoComplete_BankEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENAutoComplete_Bank = (ENAutoComplete_BankEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENAutoComplete_Bank.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENAutoComplete_Bank.InternalRecursiveSave();
		}


		public RCAutoComplete_BankRecord Duplicate() {
			RCAutoComplete_BankRecord t;
			t.ssENAutoComplete_Bank = (ENAutoComplete_BankEntityRecord) this.ssENAutoComplete_Bank.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENAutoComplete_Bank.ToXml(this, recordElem, "AutoComplete_Bank", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "autocomplete_bank") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AutoComplete_Bank")) variable.Value = ssENAutoComplete_Bank; else variable.Optimized = true;
				variable.SetFieldName("autocomplete_bank");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENAutoComplete_Bank.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENAutoComplete_Bank.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAutoComplete_Bank) {
				return ssENAutoComplete_Bank;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENAutoComplete_Bank.FillFromOther((IRecord) other.AttributeGet(IdAutoComplete_Bank));
		}
	} // RCAutoComplete_BankRecord
	/// <summary>
	/// RecordList type <code>RLAutoComplete_BankRecordList</code> that represents a record list of
	///  <code>AutoComplete_Bank</code>
	/// </summary>
	[Serializable()]
	public partial class RLAutoComplete_BankRecordList: GenericRecordList<RCAutoComplete_BankRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAutoComplete_BankRecord GetElementDefaultValue() {
			return new RCAutoComplete_BankRecord("");
		}

		public T[] ToArray<T>(Func<RCAutoComplete_BankRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAutoComplete_BankRecordList recordlist, Func<RCAutoComplete_BankRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAutoComplete_BankRecordList ToList<T>(T[] array, Func <T, RCAutoComplete_BankRecord> converter) {
			RLAutoComplete_BankRecordList result = new RLAutoComplete_BankRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAutoComplete_BankRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAutoComplete_BankRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAutoComplete_BankRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAutoComplete_BankRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAutoComplete_BankRecord> NewList() {
			return new RLAutoComplete_BankRecordList();
		}


	} // RLAutoComplete_BankRecordList

	/// <summary>
	/// RecordList type <code>RLAutoComplete_BankList</code> that represents a record list of <code>Text,
	///  Text, Text, Text, Text, Integer, AutoCompleteBankTypeIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLAutoComplete_BankList: GenericRecordList<ENAutoComplete_BankEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENAutoComplete_BankEntityRecord GetElementDefaultValue() {
			return new ENAutoComplete_BankEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENAutoComplete_BankEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAutoComplete_BankList recordlist, Func<ENAutoComplete_BankEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAutoComplete_BankList ToList<T>(T[] array, Func <T, ENAutoComplete_BankEntityRecord> converter) {
			RLAutoComplete_BankList result = new RLAutoComplete_BankList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAutoComplete_BankList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAutoComplete_BankList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAutoComplete_BankList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAutoComplete_BankList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENAutoComplete_BankEntityRecord> NewList() {
			return new RLAutoComplete_BankList();
		}


	} // RLAutoComplete_BankList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateAutoComplete_Bank
		/// </summary>

		public static void CreateAutoComplete_Bank(HeContext heContext, RCAutoComplete_BankRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENAutoComplete_BankEntity.eSpaceId;
				ENAutoComplete_BankEntityRecord ssENAutoComplete_Bank = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENAutoComplete_BankEntity.LocalViewName(null, null) + " (" +
					 " [TYPEID]" +
					 ", [CATEGORY_1]" +
					 ", [CATEGORY_2]" +
					 ", [CATEGORY_3]" +
					 ", [CATEGORY_4]" +
					 ", [DESCRIPTION]" +
					 " ) VALUES (" +
					 " @ssTypeId" +
					 ", @ssCategory_1" +
					 ", @ssCategory_2" +
					 ", @ssCategory_3" +
					 ", @ssCategory_4" +
					 ", @ssDescription" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENAutoComplete_Bank.ssTypeId==0)) {
						insertSqlCmd.CreateParameter("@ssTypeId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssTypeId", DbType.Int32, ssENAutoComplete_Bank.ssTypeId);
					}
					insertSqlCmd.CreateParameter("@ssCategory_1", DbType.String, ssENAutoComplete_Bank.ssCategory_1);
					insertSqlCmd.CreateParameter("@ssCategory_2", DbType.String, ssENAutoComplete_Bank.ssCategory_2);
					insertSqlCmd.CreateParameter("@ssCategory_3", DbType.String, ssENAutoComplete_Bank.ssCategory_3);
					insertSqlCmd.CreateParameter("@ssCategory_4", DbType.String, ssENAutoComplete_Bank.ssCategory_4);
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENAutoComplete_Bank.ssDescription);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateAutoComplete_Bank", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateAutoComplete_Bank
		/// </summary>

		public static void CreateOrUpdateAutoComplete_Bank(HeContext heContext, BitArray usedFields, RCAutoComplete_BankRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENAutoComplete_BankEntity.eSpaceId;
				ENAutoComplete_BankEntityRecord ssENAutoComplete_Bank = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENAutoComplete_BankEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TYPEID] = @ssTypeId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORY_1] = @ssCategory_1"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORY_2] = @ssCategory_2"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORY_3] = @ssCategory_3"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORY_4] = @ssCategory_4"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					string whereCondition = " WHERE [ID] = @ssENAutoComplete_BankssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENAutoComplete_Bank.ssTypeId==0)) {
							sqlCmd.CreateParameter("@ssTypeId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssTypeId", DbType.Int32, ssENAutoComplete_Bank.ssTypeId);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssCategory_1", DbType.String, ssENAutoComplete_Bank.ssCategory_1);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCategory_2", DbType.String, ssENAutoComplete_Bank.ssCategory_2);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssCategory_3", DbType.String, ssENAutoComplete_Bank.ssCategory_3);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssCategory_4", DbType.String, ssENAutoComplete_Bank.ssCategory_4);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENAutoComplete_Bank.ssDescription);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CATEGORY_1] = [CATEGORY_1]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENAutoComplete_BankssId", DbType.Int32, ssENAutoComplete_Bank.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateAutoComplete_Bank (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENAutoComplete_BankEntity.LocalViewName(null, null) + " (" +
						 " [TYPEID]" +
						 ", [CATEGORY_1]" +
						 ", [CATEGORY_2]" +
						 ", [CATEGORY_3]" +
						 ", [CATEGORY_4]" +
						 ", [DESCRIPTION]" +
						 " ) VALUES (" +
						 " @ssTypeId" +
						 ", @ssCategory_1" +
						 ", @ssCategory_2" +
						 ", @ssCategory_3" +
						 ", @ssCategory_4" +
						 ", @ssDescription" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENAutoComplete_Bank.ssTypeId==0)) {
							insertSqlCmd.CreateParameter("@ssTypeId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssTypeId", DbType.Int32, ssENAutoComplete_Bank.ssTypeId);
						}
						insertSqlCmd.CreateParameter("@ssCategory_1", DbType.String, ssENAutoComplete_Bank.ssCategory_1);
						insertSqlCmd.CreateParameter("@ssCategory_2", DbType.String, ssENAutoComplete_Bank.ssCategory_2);
						insertSqlCmd.CreateParameter("@ssCategory_3", DbType.String, ssENAutoComplete_Bank.ssCategory_3);
						insertSqlCmd.CreateParameter("@ssCategory_4", DbType.String, ssENAutoComplete_Bank.ssCategory_4);
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENAutoComplete_Bank.ssDescription);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateAutoComplete_Bank", true), typeof(int));
					} else {
						outParamId = ssENAutoComplete_Bank.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteAutoComplete_Bank
		/// </summary>

		public static void DeleteAutoComplete_Bank(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENAutoComplete_BankEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENAutoComplete_BankEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteAutoComplete_Bank", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetAutoComplete_Bank
		/// </summary>

		public static void GetAutoComplete_Bank(HeContext heContext, int inParamId, out RCAutoComplete_BankRecord outParamRecord) {
			outParamRecord = new RCAutoComplete_BankRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENAutoComplete_BankEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [TYPEID]" +
					 ", [CATEGORY_1]" +
					 ", [CATEGORY_2]" +
					 ", [CATEGORY_3]" +
					 ", [CATEGORY_4]" +
					 ", [DESCRIPTION]" +
					 " FROM " + ENAutoComplete_BankEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetAutoComplete_Bank", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENAutoComplete_BankEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetAutoComplete_BankForUpdate
		/// </summary>

		public static void GetAutoComplete_BankForUpdate(HeContext heContext, int inParamId, out RCAutoComplete_BankRecord outParamRecord) {
			outParamRecord = new RCAutoComplete_BankRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENAutoComplete_BankEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [TYPEID]" +
					 ", [CATEGORY_1]" +
					 ", [CATEGORY_2]" +
					 ", [CATEGORY_3]" +
					 ", [CATEGORY_4]" +
					 ", [DESCRIPTION]" +
					 "FROM " + ENAutoComplete_BankEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetAutoComplete_BankForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENAutoComplete_BankEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateAutoComplete_Bank
		/// </summary>

		public static void UpdateAutoComplete_Bank(HeContext heContext, BitArray usedFields, RCAutoComplete_BankRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENAutoComplete_BankEntity.eSpaceId;
				ENAutoComplete_BankEntityRecord ssENAutoComplete_Bank = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENAutoComplete_BankEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TYPEID] = @ssTypeId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORY_1] = @ssCategory_1"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORY_2] = @ssCategory_2"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORY_3] = @ssCategory_3"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CATEGORY_4] = @ssCategory_4"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					string whereCondition = " WHERE [ID] = @ssENAutoComplete_BankssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENAutoComplete_Bank.ssTypeId==0)) {
							sqlCmd.CreateParameter("@ssTypeId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssTypeId", DbType.Int32, ssENAutoComplete_Bank.ssTypeId);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssCategory_1", DbType.String, ssENAutoComplete_Bank.ssCategory_1);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCategory_2", DbType.String, ssENAutoComplete_Bank.ssCategory_2);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssCategory_3", DbType.String, ssENAutoComplete_Bank.ssCategory_3);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssCategory_4", DbType.String, ssENAutoComplete_Bank.ssCategory_4);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENAutoComplete_Bank.ssDescription);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CATEGORY_1] = [CATEGORY_1]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENAutoComplete_BankssId", DbType.Int32, ssENAutoComplete_Bank.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateAutoComplete_Bank", true) <= 0)
					throw new DataBaseException(ENAutoComplete_BankEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENAutoComplete_Bank.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("AutoComplete_Bank")]
	public class WORCAutoComplete_BankRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("TypeId")]
		public int varWSTypeId;

		[System.Xml.Serialization.XmlElement("Category_1")]
		public string varWSCategory_1;

		[System.Xml.Serialization.XmlElement("Category_2")]
		public string varWSCategory_2;

		[System.Xml.Serialization.XmlElement("Category_3")]
		public string varWSCategory_3;

		[System.Xml.Serialization.XmlElement("Category_4")]
		public string varWSCategory_4;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		public WORCAutoComplete_BankRecord() {
			varWSId = (int) 0;
			varWSTypeId = (int) 0;
			varWSCategory_1 = (string) "";
			varWSCategory_2 = (string) "";
			varWSCategory_3 = (string) "";
			varWSCategory_4 = (string) "";
			varWSDescription = (string) "";
		}

		public WORCAutoComplete_BankRecord(ENAutoComplete_BankEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSTypeId = (int) r.ssTypeId;
			varWSCategory_1 = BaseAppUtils.RemoveControlChars(r.ssCategory_1);
			varWSCategory_2 = BaseAppUtils.RemoveControlChars(r.ssCategory_2);
			varWSCategory_3 = BaseAppUtils.RemoveControlChars(r.ssCategory_3);
			varWSCategory_4 = BaseAppUtils.RemoveControlChars(r.ssCategory_4);
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
		}

		public static RLAutoComplete_BankList ToRecordList(WORCAutoComplete_BankRecord[] array) {
			RLAutoComplete_BankList rl = new RLAutoComplete_BankList();
			if (array != null) {
				foreach(WORCAutoComplete_BankRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAutoComplete_BankRecord[] FromRecordList(RLAutoComplete_BankList rl) {
			WORCAutoComplete_BankRecord[] array = new WORCAutoComplete_BankRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCAutoComplete_BankRecord {
		public static implicit operator WORCAutoComplete_BankRecord(RCAutoComplete_BankRecord r) {
			return new WORCAutoComplete_BankRecord(r.ssENAutoComplete_Bank);
		}

		public static implicit operator RCAutoComplete_BankRecord(WORCAutoComplete_BankRecord w) {
			RCAutoComplete_BankRecord r = new RCAutoComplete_BankRecord("");
			if (w != null) {
				r.ssENAutoComplete_Bank = w;
			}
			return r;
		}

	}

	partial struct ENAutoComplete_BankEntityRecord {
		public static implicit operator WORCAutoComplete_BankRecord(ENAutoComplete_BankEntityRecord r) {
			return new WORCAutoComplete_BankRecord(r);
		}

		public static implicit operator ENAutoComplete_BankEntityRecord(WORCAutoComplete_BankRecord w) {
			ENAutoComplete_BankEntityRecord r = new ENAutoComplete_BankEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssTypeId = (int) w.varWSTypeId;
				r.ssCategory_1 = ((string) w.varWSCategory_1 ?? "");
				r.ssCategory_2 = ((string) w.varWSCategory_2 ?? "");
				r.ssCategory_3 = ((string) w.varWSCategory_3 ?? "");
				r.ssCategory_4 = ((string) w.varWSCategory_4 ?? "");
				r.ssDescription = ((string) w.varWSDescription ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAutoComplete_BankRecordList {
		public WORCAutoComplete_BankRecord[] Array;


		public WORLAutoComplete_BankRecordList(WORCAutoComplete_BankRecord[] r) {
			if (r == null)
			Array = new WORCAutoComplete_BankRecord[0];
			else
			Array = r;
		}
		public WORLAutoComplete_BankRecordList() {
			Array = new WORCAutoComplete_BankRecord[0];
		}

		public WORLAutoComplete_BankRecordList(RLAutoComplete_BankRecordList rl) {
			rl=(RLAutoComplete_BankRecordList) rl.Duplicate();
			Array = new WORCAutoComplete_BankRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAutoComplete_BankRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAutoComplete_BankRecordList {
		public static implicit operator RLAutoComplete_BankRecordList(WORCAutoComplete_BankRecord[] array) {
			RLAutoComplete_BankRecordList rl = new RLAutoComplete_BankRecordList();
			if (array != null) {
				foreach(WORCAutoComplete_BankRecord val in array) {
					rl.Append((RCAutoComplete_BankRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAutoComplete_BankRecord[](RLAutoComplete_BankRecordList rl) {
			WORCAutoComplete_BankRecord[] array = new WORCAutoComplete_BankRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAutoComplete_BankRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAutoComplete_BankRecordList {
		public static implicit operator RLAutoComplete_BankRecordList(WORLAutoComplete_BankRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAutoComplete_BankRecordList(RLAutoComplete_BankRecordList rl) {
			return new WORLAutoComplete_BankRecordList(rl);
		}
		public static implicit operator WORCAutoComplete_BankRecord[](WORLAutoComplete_BankRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAutoComplete_BankRecordList(WORCAutoComplete_BankRecord[] array) {
			return new WORLAutoComplete_BankRecordList(array);
		}
	}
}

