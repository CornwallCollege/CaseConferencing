/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentLogEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentLogEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentLogEntity.eSpaceId;
	} // ENStudentLogEntity

	/// <summary>
	/// Entity <code>ENStudentLogEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentLog</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentLog", "hCmljK1Ic06XPrpQg6p2mw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentLog", "")]
	[Serializable()]
	public partial struct ENStudentLogEntityRecord: ISerializable, ITypedRecord<ENStudentLogEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*qKePI_4AQUSJ7d4n6ggUCA");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Zb4p0+dEFES_Ud2_2S262A");
		private static readonly GlobalObjectKey IdDateTime = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*tQX7iEIo0kapB1CYNIppcQ");
		private static readonly GlobalObjectKey IdEventBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*gx24IeXSHkqnVqDe8QlsHg");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*bWSfLi38OEqYJ_vsF3pVdA");
		private static readonly GlobalObjectKey IdUserDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*1Ng5uXETr0uPQ6CWoxxvmQ");
		private static readonly GlobalObjectKey IdLogRAGId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*hkbOopIDL0WX_V+A4mkhUQ");
		private static readonly GlobalObjectKey IdStudentLogType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ubhV+qP5e0+jIDtGfg_FOw");
		private static readonly GlobalObjectKey IdRAGCategoryId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*qfLMwEKrVEu9Myvuz4R9dw");
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*hQmJZEJPyUeW+TNP4rvKDA");
		private static readonly GlobalObjectKey IdLastWeekPunctuality = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*cYMz92daIUSvqnQQXOb96w");
		private static readonly GlobalObjectKey IdOverallPunctuality = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*LgHFn++vxUqXup8AX2KVFA");
		private static readonly GlobalObjectKey IdLastWeekAttendance = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Wbqm7WI9KUqFt7Uidx1m8A");
		private static readonly GlobalObjectKey IdOverallAttendance = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*5nQ0hTlOPU+ZzxRPuTa_8g");
		private static readonly GlobalObjectKey IdCauseOfConcernRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*cZbCwtfsaEWpp30SvEBDmw");
		private static readonly GlobalObjectKey IdCauseOfConcernNumber = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*8B8xN2iXpUeSNCunmMbOKw");
		private static readonly GlobalObjectKey IdSafeguardIdList = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*CDtUs3gqiUCU7XpZmTIRGQ");
		private static readonly GlobalObjectKey IdSupportIdList = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*HA2DkwCrA0S51Zvrf9YC3A");
		private static readonly GlobalObjectKey IdRewardsGoldNumber = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*5hPcwspKhE+QBb+V1PvJ3w");
		private static readonly GlobalObjectKey IdRewardsGreenNumber = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Y6f_WzZ050iK34u6ilhhcg");
		private static readonly GlobalObjectKey IdVocPeriodRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*TZP0e48YKkSAyD9Jt5ow8A");
		private static readonly GlobalObjectKey IdVocOverallRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*WWFIWIWa4kCjfRC_vDMyQA");
		private static readonly GlobalObjectKey IdVocCompletedUnits = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*dCLSFbzy70qxBZfH9AJ3cQ");
		private static readonly GlobalObjectKey IdVocRegisteredUnits = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*1u_AFbR33U+otDMt3DLEmw");
		private static readonly GlobalObjectKey IdMathPeriodRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*7xsoIzwZPUO8jt7nOQLnWA");
		private static readonly GlobalObjectKey IdMathOverallRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Zobbtu_S0E6jqxCbLNImLg");
		private static readonly GlobalObjectKey IdMathCompletedUnits = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*soVXAGI8KEm3+qKI0Qk4uQ");
		private static readonly GlobalObjectKey IdMathRegisteredUnits = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*I85_2k4qVE2b5eQuw2N7pQ");
		private static readonly GlobalObjectKey IdEngPeriodRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*WMAI+VUDDk+fSItnth0dbw");
		private static readonly GlobalObjectKey IdEngOverallRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xFbN2EaKRE6gF1wb7hkj1w");
		private static readonly GlobalObjectKey IdEngCompletedUnits = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*qlHbJ+kUxEGtF_htAn_Evw");
		private static readonly GlobalObjectKey IdEngRegisteredUnits = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*oCPYfBXzn0KADuiTN92Hlw");
		private static readonly GlobalObjectKey IdMLWPeriodRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*53rbxSgDhkie_1VMIMAJMA");
		private static readonly GlobalObjectKey IdMLWOverallRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*djdTI76EC0SocgHSpG8c2g");
		private static readonly GlobalObjectKey IdMLWCompletedUnits = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*u2rDG6RITU+dbhXDHa+yNw");
		private static readonly GlobalObjectKey IdMLWRegisteredUnits = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*wZptgXdTQE2xiYY8bikqgA");
		private static readonly GlobalObjectKey IdRewardType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*NZSpaG4zMEeZ4JTpxUft8A");
		private static readonly GlobalObjectKey IdDescriptionType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ivHNhSnmx0G1Wo1FTkXXPw");
		private static readonly GlobalObjectKey IdDisciplinaryTypeNumber = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xyEsIHK4I0yQUlXDuTuYFg");
		private static readonly GlobalObjectKey IdDisciplinaryType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*gESnUC5XKEWrPyCO_a+WCA");
		private static readonly GlobalObjectKey IdMLWCompetencieId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*j_7xiw3+n0q7j_PItvuXBg");
		private static readonly GlobalObjectKey IdMLWCompetencieCurrentLevel = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*V7NnZ4dk7ESAafUpGO0rRg");
		private static readonly GlobalObjectKey IdSessionId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ciMCZtCirUitUCGy9Qcqcg");
		private static readonly GlobalObjectKey IdCommunicationId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ScZ12zdKAESy3rDLGnT1Xg");

		public static void EnsureInitialized() {}

		static ENStudentLogEntityRecord() {
			ssCaseConferencing.ENStudentLogEntityRecordTypeFactoryImpl.InitializeFactory();
		}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(44, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DATETIME", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("DateTime")]
		private DateTime _ssDateTime;
		public DateTime ssDateTime {
			get {
				return _ssDateTime;
			}
			set {
				if ((_ssDateTime!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDateTime = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EVENTBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("EventBy")]
		private int _ssEventBy;
		public int ssEventBy {
			get {
				return _ssEventBy;
			}
			set {
				if ((_ssEventBy!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssEventBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 200, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USERDESCRIPTION", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("UserDescription")]
		private string _ssUserDescription;
		public string ssUserDescription {
			get {
				return _ssUserDescription;
			}
			set {
				if ((_ssUserDescription!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssUserDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LOGRAGID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("LogRAGId")]
		private string _ssLogRAGId;
		public string ssLogRAGId {
			get {
				return _ssLogRAGId;
			}
			set {
				if ((_ssLogRAGId!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssLogRAGId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTLOGTYPE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentLogType")]
		private string _ssStudentLogType;
		public string ssStudentLogType {
			get {
				return _ssStudentLogType;
			}
			set {
				if ((_ssStudentLogType!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssStudentLogType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RAGCATEGORYID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RAGCategoryId")]
		private int _ssRAGCategoryId;
		public int ssRAGCategoryId {
			get {
				return _ssRAGCategoryId;
			}
			set {
				if ((_ssRAGCategoryId!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssRAGCategoryId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTRAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentRAG")]
		private string _ssStudentRAG;
		public string ssStudentRAG {
			get {
				return _ssStudentRAG;
			}
			set {
				if ((_ssStudentRAG!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssStudentRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTWEEKPUNCTUALITY", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastWeekPunctuality")]
		private int _ssLastWeekPunctuality;
		public int ssLastWeekPunctuality {
			get {
				return _ssLastWeekPunctuality;
			}
			set {
				if ((_ssLastWeekPunctuality!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssLastWeekPunctuality = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLPUNCTUALITY", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallPunctuality")]
		private int _ssOverallPunctuality;
		public int ssOverallPunctuality {
			get {
				return _ssOverallPunctuality;
			}
			set {
				if ((_ssOverallPunctuality!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssOverallPunctuality = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTWEEKATTENDANCE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastWeekAttendance")]
		private int _ssLastWeekAttendance;
		public int ssLastWeekAttendance {
			get {
				return _ssLastWeekAttendance;
			}
			set {
				if ((_ssLastWeekAttendance!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssLastWeekAttendance = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLATTENDANCE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallAttendance")]
		private int _ssOverallAttendance;
		public int ssOverallAttendance {
			get {
				return _ssOverallAttendance;
			}
			set {
				if ((_ssOverallAttendance!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssOverallAttendance = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CAUSEOFCONCERNRAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CauseOfConcernRAG")]
		private string _ssCauseOfConcernRAG;
		public string ssCauseOfConcernRAG {
			get {
				return _ssCauseOfConcernRAG;
			}
			set {
				if ((_ssCauseOfConcernRAG!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssCauseOfConcernRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CAUSEOFCONCERNNUMBER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CauseOfConcernNumber")]
		private int _ssCauseOfConcernNumber;
		public int ssCauseOfConcernNumber {
			get {
				return _ssCauseOfConcernNumber;
			}
			set {
				if ((_ssCauseOfConcernNumber!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssCauseOfConcernNumber = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SAFEGUARDIDLIST", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("SafeguardIdList")]
		private string _ssSafeguardIdList;
		public string ssSafeguardIdList {
			get {
				return _ssSafeguardIdList;
			}
			set {
				if ((_ssSafeguardIdList!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssSafeguardIdList = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SUPPORTIDLIST", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("SupportIdList")]
		private string _ssSupportIdList;
		public string ssSupportIdList {
			get {
				return _ssSupportIdList;
			}
			set {
				if ((_ssSupportIdList!=value) || OptimizedAttributes[17]) {
					ChangedAttributes[17] = true;
					_ssSupportIdList = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("REWARDSGOLDNUMBER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("RewardsGoldNumber")]
		private int _ssRewardsGoldNumber;
		public int ssRewardsGoldNumber {
			get {
				return _ssRewardsGoldNumber;
			}
			set {
				if ((_ssRewardsGoldNumber!=value) || OptimizedAttributes[18]) {
					ChangedAttributes[18] = true;
					_ssRewardsGoldNumber = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("REWARDSGREENNUMBER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("RewardsGreenNumber")]
		private int _ssRewardsGreenNumber;
		public int ssRewardsGreenNumber {
			get {
				return _ssRewardsGreenNumber;
			}
			set {
				if ((_ssRewardsGreenNumber!=value) || OptimizedAttributes[19]) {
					ChangedAttributes[19] = true;
					_ssRewardsGreenNumber = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("VOCPERIODRAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("VocPeriodRAG")]
		private string _ssVocPeriodRAG;
		public string ssVocPeriodRAG {
			get {
				return _ssVocPeriodRAG;
			}
			set {
				if ((_ssVocPeriodRAG!=value) || OptimizedAttributes[20]) {
					ChangedAttributes[20] = true;
					_ssVocPeriodRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("VOCOVERALLRAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("VocOverallRAG")]
		private string _ssVocOverallRAG;
		public string ssVocOverallRAG {
			get {
				return _ssVocOverallRAG;
			}
			set {
				if ((_ssVocOverallRAG!=value) || OptimizedAttributes[21]) {
					ChangedAttributes[21] = true;
					_ssVocOverallRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("VOCCOMPLETEDUNITS", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("VocCompletedUnits")]
		private int _ssVocCompletedUnits;
		public int ssVocCompletedUnits {
			get {
				return _ssVocCompletedUnits;
			}
			set {
				if ((_ssVocCompletedUnits!=value) || OptimizedAttributes[22]) {
					ChangedAttributes[22] = true;
					_ssVocCompletedUnits = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("VOCREGISTEREDUNITS", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("VocRegisteredUnits")]
		private int _ssVocRegisteredUnits;
		public int ssVocRegisteredUnits {
			get {
				return _ssVocRegisteredUnits;
			}
			set {
				if ((_ssVocRegisteredUnits!=value) || OptimizedAttributes[23]) {
					ChangedAttributes[23] = true;
					_ssVocRegisteredUnits = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MATHPERIODRAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("MathPeriodRAG")]
		private string _ssMathPeriodRAG;
		public string ssMathPeriodRAG {
			get {
				return _ssMathPeriodRAG;
			}
			set {
				if ((_ssMathPeriodRAG!=value) || OptimizedAttributes[24]) {
					ChangedAttributes[24] = true;
					_ssMathPeriodRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MATHOVERALLRAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("MathOverallRAG")]
		private string _ssMathOverallRAG;
		public string ssMathOverallRAG {
			get {
				return _ssMathOverallRAG;
			}
			set {
				if ((_ssMathOverallRAG!=value) || OptimizedAttributes[25]) {
					ChangedAttributes[25] = true;
					_ssMathOverallRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MATHCOMPLETEDUNITS", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("MathCompletedUnits")]
		private int _ssMathCompletedUnits;
		public int ssMathCompletedUnits {
			get {
				return _ssMathCompletedUnits;
			}
			set {
				if ((_ssMathCompletedUnits!=value) || OptimizedAttributes[26]) {
					ChangedAttributes[26] = true;
					_ssMathCompletedUnits = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MATHREGISTEREDUNITS", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("MathRegisteredUnits")]
		private int _ssMathRegisteredUnits;
		public int ssMathRegisteredUnits {
			get {
				return _ssMathRegisteredUnits;
			}
			set {
				if ((_ssMathRegisteredUnits!=value) || OptimizedAttributes[27]) {
					ChangedAttributes[27] = true;
					_ssMathRegisteredUnits = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENGPERIODRAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("EngPeriodRAG")]
		private string _ssEngPeriodRAG;
		public string ssEngPeriodRAG {
			get {
				return _ssEngPeriodRAG;
			}
			set {
				if ((_ssEngPeriodRAG!=value) || OptimizedAttributes[28]) {
					ChangedAttributes[28] = true;
					_ssEngPeriodRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENGOVERALLRAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("EngOverallRAG")]
		private string _ssEngOverallRAG;
		public string ssEngOverallRAG {
			get {
				return _ssEngOverallRAG;
			}
			set {
				if ((_ssEngOverallRAG!=value) || OptimizedAttributes[29]) {
					ChangedAttributes[29] = true;
					_ssEngOverallRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENGCOMPLETEDUNITS", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("EngCompletedUnits")]
		private int _ssEngCompletedUnits;
		public int ssEngCompletedUnits {
			get {
				return _ssEngCompletedUnits;
			}
			set {
				if ((_ssEngCompletedUnits!=value) || OptimizedAttributes[30]) {
					ChangedAttributes[30] = true;
					_ssEngCompletedUnits = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENGREGISTEREDUNITS", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("EngRegisteredUnits")]
		private int _ssEngRegisteredUnits;
		public int ssEngRegisteredUnits {
			get {
				return _ssEngRegisteredUnits;
			}
			set {
				if ((_ssEngRegisteredUnits!=value) || OptimizedAttributes[31]) {
					ChangedAttributes[31] = true;
					_ssEngRegisteredUnits = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MLWPERIODRAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("MLWPeriodRAG")]
		private string _ssMLWPeriodRAG;
		public string ssMLWPeriodRAG {
			get {
				return _ssMLWPeriodRAG;
			}
			set {
				if ((_ssMLWPeriodRAG!=value) || OptimizedAttributes[32]) {
					ChangedAttributes[32] = true;
					_ssMLWPeriodRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MLWOVERALLRAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("MLWOverallRAG")]
		private string _ssMLWOverallRAG;
		public string ssMLWOverallRAG {
			get {
				return _ssMLWOverallRAG;
			}
			set {
				if ((_ssMLWOverallRAG!=value) || OptimizedAttributes[33]) {
					ChangedAttributes[33] = true;
					_ssMLWOverallRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MLWCOMPLETEDUNITS", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("MLWCompletedUnits")]
		private int _ssMLWCompletedUnits;
		public int ssMLWCompletedUnits {
			get {
				return _ssMLWCompletedUnits;
			}
			set {
				if ((_ssMLWCompletedUnits!=value) || OptimizedAttributes[34]) {
					ChangedAttributes[34] = true;
					_ssMLWCompletedUnits = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MLWREGISTEREDUNITS", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("MLWRegisteredUnits")]
		private int _ssMLWRegisteredUnits;
		public int ssMLWRegisteredUnits {
			get {
				return _ssMLWRegisteredUnits;
			}
			set {
				if ((_ssMLWRegisteredUnits!=value) || OptimizedAttributes[35]) {
					ChangedAttributes[35] = true;
					_ssMLWRegisteredUnits = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("REWARDTYPE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("RewardType")]
		private bool _ssRewardType;
		public bool ssRewardType {
			get {
				return _ssRewardType;
			}
			set {
				if ((_ssRewardType!=value) || OptimizedAttributes[36]) {
					ChangedAttributes[36] = true;
					_ssRewardType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTIONTYPE", 100, false, false, false)]
		[System.Xml.Serialization.XmlElement("DescriptionType")]
		private string _ssDescriptionType;
		public string ssDescriptionType {
			get {
				return _ssDescriptionType;
			}
			set {
				if ((_ssDescriptionType!=value) || OptimizedAttributes[37]) {
					ChangedAttributes[37] = true;
					_ssDescriptionType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DISCIPLINARYTYPENUMBER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("DisciplinaryTypeNumber")]
		private int _ssDisciplinaryTypeNumber;
		public int ssDisciplinaryTypeNumber {
			get {
				return _ssDisciplinaryTypeNumber;
			}
			set {
				if ((_ssDisciplinaryTypeNumber!=value) || OptimizedAttributes[38]) {
					ChangedAttributes[38] = true;
					_ssDisciplinaryTypeNumber = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DISCIPLINARYTYPE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("DisciplinaryType")]
		private string _ssDisciplinaryType;
		public string ssDisciplinaryType {
			get {
				return _ssDisciplinaryType;
			}
			set {
				if ((_ssDisciplinaryType!=value) || OptimizedAttributes[39]) {
					ChangedAttributes[39] = true;
					_ssDisciplinaryType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MLWCOMPETENCIEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("MLWCompetencieId")]
		private string _ssMLWCompetencieId;
		public string ssMLWCompetencieId {
			get {
				return _ssMLWCompetencieId;
			}
			set {
				if ((_ssMLWCompetencieId!=value) || OptimizedAttributes[40]) {
					ChangedAttributes[40] = true;
					_ssMLWCompetencieId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MLWCOMPETENCIECURRENTLEVEL", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("MLWCompetencieCurrentLevel")]
		private int _ssMLWCompetencieCurrentLevel;
		public int ssMLWCompetencieCurrentLevel {
			get {
				return _ssMLWCompetencieCurrentLevel;
			}
			set {
				if ((_ssMLWCompetencieCurrentLevel!=value) || OptimizedAttributes[41]) {
					ChangedAttributes[41] = true;
					_ssMLWCompetencieCurrentLevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SESSIONID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SessionId")]
		private int _ssSessionId;
		public int ssSessionId {
			get {
				return _ssSessionId;
			}
			set {
				if ((_ssSessionId!=value) || OptimizedAttributes[42]) {
					ChangedAttributes[42] = true;
					_ssSessionId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMMUNICATIONID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CommunicationId")]
		private int _ssCommunicationId;
		public int ssCommunicationId {
			get {
				return _ssCommunicationId;
			}
			set {
				if ((_ssCommunicationId!=value) || OptimizedAttributes[43]) {
					ChangedAttributes[43] = true;
					_ssCommunicationId = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentLogEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(44, true);
			OptimizedAttributes = new BitArray(44, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssDateTime = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssEventBy = 0;
			_ssDescription = "";
			_ssUserDescription = "";
			_ssLogRAGId = "";
			_ssStudentLogType = "";
			_ssRAGCategoryId = 0;
			_ssStudentRAG = "";
			_ssLastWeekPunctuality = 0;
			_ssOverallPunctuality = 0;
			_ssLastWeekAttendance = 0;
			_ssOverallAttendance = 0;
			_ssCauseOfConcernRAG = "";
			_ssCauseOfConcernNumber = 0;
			_ssSafeguardIdList = "";
			_ssSupportIdList = "";
			_ssRewardsGoldNumber = 0;
			_ssRewardsGreenNumber = 0;
			_ssVocPeriodRAG = "";
			_ssVocOverallRAG = "";
			_ssVocCompletedUnits = 0;
			_ssVocRegisteredUnits = 0;
			_ssMathPeriodRAG = "";
			_ssMathOverallRAG = "";
			_ssMathCompletedUnits = 0;
			_ssMathRegisteredUnits = 0;
			_ssEngPeriodRAG = "";
			_ssEngOverallRAG = "";
			_ssEngCompletedUnits = 0;
			_ssEngRegisteredUnits = 0;
			_ssMLWPeriodRAG = "";
			_ssMLWOverallRAG = "";
			_ssMLWCompletedUnits = 0;
			_ssMLWRegisteredUnits = 0;
			_ssRewardType = false;
			_ssDescriptionType = "";
			_ssDisciplinaryTypeNumber = 0;
			_ssDisciplinaryType = "";
			_ssMLWCompetencieId = "";
			_ssMLWCompetencieCurrentLevel = 0;
			_ssSessionId = 0;
			_ssCommunicationId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentLog.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "StudentLog.StudentReference", "");
			ssDateTime = r.ReadDateTime(index++, "StudentLog.DateTime", new DateTime(1900, 1, 1, 0, 0, 0));
			ssEventBy = r.ReadEntityReference(index++, "StudentLog.EventBy", 0);
			ssDescription = r.ReadText(index++, "StudentLog.Description", "");
			ssUserDescription = r.ReadText(index++, "StudentLog.UserDescription", "");
			ssLogRAGId = r.ReadTextEntityReference(index++, "StudentLog.LogRAGId", "");
			ssStudentLogType = r.ReadTextEntityReference(index++, "StudentLog.StudentLogType", "");
			ssRAGCategoryId = r.ReadEntityReference(index++, "StudentLog.RAGCategoryId", 0);
			ssStudentRAG = r.ReadTextEntityReference(index++, "StudentLog.StudentRAG", "");
			ssLastWeekPunctuality = r.ReadInteger(index++, "StudentLog.LastWeekPunctuality", 0);
			ssOverallPunctuality = r.ReadInteger(index++, "StudentLog.OverallPunctuality", 0);
			ssLastWeekAttendance = r.ReadInteger(index++, "StudentLog.LastWeekAttendance", 0);
			ssOverallAttendance = r.ReadInteger(index++, "StudentLog.OverallAttendance", 0);
			ssCauseOfConcernRAG = r.ReadTextEntityReference(index++, "StudentLog.CauseOfConcernRAG", "");
			ssCauseOfConcernNumber = r.ReadInteger(index++, "StudentLog.CauseOfConcernNumber", 0);
			ssSafeguardIdList = r.ReadText(index++, "StudentLog.SafeguardIdList", "");
			ssSupportIdList = r.ReadText(index++, "StudentLog.SupportIdList", "");
			ssRewardsGoldNumber = r.ReadInteger(index++, "StudentLog.RewardsGoldNumber", 0);
			ssRewardsGreenNumber = r.ReadInteger(index++, "StudentLog.RewardsGreenNumber", 0);
			ssVocPeriodRAG = r.ReadTextEntityReference(index++, "StudentLog.VocPeriodRAG", "");
			ssVocOverallRAG = r.ReadTextEntityReference(index++, "StudentLog.VocOverallRAG", "");
			ssVocCompletedUnits = r.ReadInteger(index++, "StudentLog.VocCompletedUnits", 0);
			ssVocRegisteredUnits = r.ReadInteger(index++, "StudentLog.VocRegisteredUnits", 0);
			ssMathPeriodRAG = r.ReadTextEntityReference(index++, "StudentLog.MathPeriodRAG", "");
			ssMathOverallRAG = r.ReadTextEntityReference(index++, "StudentLog.MathOverallRAG", "");
			ssMathCompletedUnits = r.ReadInteger(index++, "StudentLog.MathCompletedUnits", 0);
			ssMathRegisteredUnits = r.ReadInteger(index++, "StudentLog.MathRegisteredUnits", 0);
			ssEngPeriodRAG = r.ReadTextEntityReference(index++, "StudentLog.EngPeriodRAG", "");
			ssEngOverallRAG = r.ReadTextEntityReference(index++, "StudentLog.EngOverallRAG", "");
			ssEngCompletedUnits = r.ReadInteger(index++, "StudentLog.EngCompletedUnits", 0);
			ssEngRegisteredUnits = r.ReadInteger(index++, "StudentLog.EngRegisteredUnits", 0);
			ssMLWPeriodRAG = r.ReadTextEntityReference(index++, "StudentLog.MLWPeriodRAG", "");
			ssMLWOverallRAG = r.ReadTextEntityReference(index++, "StudentLog.MLWOverallRAG", "");
			ssMLWCompletedUnits = r.ReadInteger(index++, "StudentLog.MLWCompletedUnits", 0);
			ssMLWRegisteredUnits = r.ReadInteger(index++, "StudentLog.MLWRegisteredUnits", 0);
			ssRewardType = r.ReadBoolean(index++, "StudentLog.RewardType", false);
			ssDescriptionType = r.ReadText(index++, "StudentLog.DescriptionType", "");
			ssDisciplinaryTypeNumber = r.ReadInteger(index++, "StudentLog.DisciplinaryTypeNumber", 0);
			ssDisciplinaryType = r.ReadTextEntityReference(index++, "StudentLog.DisciplinaryType", "");
			ssMLWCompetencieId = r.ReadTextEntityReference(index++, "StudentLog.MLWCompetencieId", "");
			ssMLWCompetencieCurrentLevel = r.ReadInteger(index++, "StudentLog.MLWCompetencieCurrentLevel", 0);
			ssSessionId = r.ReadEntityReference(index++, "StudentLog.SessionId", 0);
			ssCommunicationId = r.ReadEntityReference(index++, "StudentLog.CommunicationId", 0);
			ChangedAttributes = new BitArray(44, false);
			OptimizedAttributes = new BitArray(44, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentLogEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentLogEntityRecord a, ENStudentLogEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssDateTime != b.ssDateTime) return false;
			if (a.ssEventBy != b.ssEventBy) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssUserDescription != b.ssUserDescription) return false;
			if (a.ssLogRAGId != b.ssLogRAGId) return false;
			if (a.ssStudentLogType != b.ssStudentLogType) return false;
			if (a.ssRAGCategoryId != b.ssRAGCategoryId) return false;
			if (a.ssStudentRAG != b.ssStudentRAG) return false;
			if (a.ssLastWeekPunctuality != b.ssLastWeekPunctuality) return false;
			if (a.ssOverallPunctuality != b.ssOverallPunctuality) return false;
			if (a.ssLastWeekAttendance != b.ssLastWeekAttendance) return false;
			if (a.ssOverallAttendance != b.ssOverallAttendance) return false;
			if (a.ssCauseOfConcernRAG != b.ssCauseOfConcernRAG) return false;
			if (a.ssCauseOfConcernNumber != b.ssCauseOfConcernNumber) return false;
			if (a.ssSafeguardIdList != b.ssSafeguardIdList) return false;
			if (a.ssSupportIdList != b.ssSupportIdList) return false;
			if (a.ssRewardsGoldNumber != b.ssRewardsGoldNumber) return false;
			if (a.ssRewardsGreenNumber != b.ssRewardsGreenNumber) return false;
			if (a.ssVocPeriodRAG != b.ssVocPeriodRAG) return false;
			if (a.ssVocOverallRAG != b.ssVocOverallRAG) return false;
			if (a.ssVocCompletedUnits != b.ssVocCompletedUnits) return false;
			if (a.ssVocRegisteredUnits != b.ssVocRegisteredUnits) return false;
			if (a.ssMathPeriodRAG != b.ssMathPeriodRAG) return false;
			if (a.ssMathOverallRAG != b.ssMathOverallRAG) return false;
			if (a.ssMathCompletedUnits != b.ssMathCompletedUnits) return false;
			if (a.ssMathRegisteredUnits != b.ssMathRegisteredUnits) return false;
			if (a.ssEngPeriodRAG != b.ssEngPeriodRAG) return false;
			if (a.ssEngOverallRAG != b.ssEngOverallRAG) return false;
			if (a.ssEngCompletedUnits != b.ssEngCompletedUnits) return false;
			if (a.ssEngRegisteredUnits != b.ssEngRegisteredUnits) return false;
			if (a.ssMLWPeriodRAG != b.ssMLWPeriodRAG) return false;
			if (a.ssMLWOverallRAG != b.ssMLWOverallRAG) return false;
			if (a.ssMLWCompletedUnits != b.ssMLWCompletedUnits) return false;
			if (a.ssMLWRegisteredUnits != b.ssMLWRegisteredUnits) return false;
			if (a.ssRewardType != b.ssRewardType) return false;
			if (a.ssDescriptionType != b.ssDescriptionType) return false;
			if (a.ssDisciplinaryTypeNumber != b.ssDisciplinaryTypeNumber) return false;
			if (a.ssDisciplinaryType != b.ssDisciplinaryType) return false;
			if (a.ssMLWCompetencieId != b.ssMLWCompetencieId) return false;
			if (a.ssMLWCompetencieCurrentLevel != b.ssMLWCompetencieCurrentLevel) return false;
			if (a.ssSessionId != b.ssSessionId) return false;
			if (a.ssCommunicationId != b.ssCommunicationId) return false;
			return true;
		}

		public static bool operator != (ENStudentLogEntityRecord a, ENStudentLogEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentLogEntityRecord)) return false;
			return (this == (ENStudentLogEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssDateTime.GetHashCode()
				^ ssEventBy.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssUserDescription.GetHashCode()
				^ ssLogRAGId.GetHashCode()
				^ ssStudentLogType.GetHashCode()
				^ ssRAGCategoryId.GetHashCode()
				^ ssStudentRAG.GetHashCode()
				^ ssLastWeekPunctuality.GetHashCode()
				^ ssOverallPunctuality.GetHashCode()
				^ ssLastWeekAttendance.GetHashCode()
				^ ssOverallAttendance.GetHashCode()
				^ ssCauseOfConcernRAG.GetHashCode()
				^ ssCauseOfConcernNumber.GetHashCode()
				^ ssSafeguardIdList.GetHashCode()
				^ ssSupportIdList.GetHashCode()
				^ ssRewardsGoldNumber.GetHashCode()
				^ ssRewardsGreenNumber.GetHashCode()
				^ ssVocPeriodRAG.GetHashCode()
				^ ssVocOverallRAG.GetHashCode()
				^ ssVocCompletedUnits.GetHashCode()
				^ ssVocRegisteredUnits.GetHashCode()
				^ ssMathPeriodRAG.GetHashCode()
				^ ssMathOverallRAG.GetHashCode()
				^ ssMathCompletedUnits.GetHashCode()
				^ ssMathRegisteredUnits.GetHashCode()
				^ ssEngPeriodRAG.GetHashCode()
				^ ssEngOverallRAG.GetHashCode()
				^ ssEngCompletedUnits.GetHashCode()
				^ ssEngRegisteredUnits.GetHashCode()
				^ ssMLWPeriodRAG.GetHashCode()
				^ ssMLWOverallRAG.GetHashCode()
				^ ssMLWCompletedUnits.GetHashCode()
				^ ssMLWRegisteredUnits.GetHashCode()
				^ ssRewardType.GetHashCode()
				^ ssDescriptionType.GetHashCode()
				^ ssDisciplinaryTypeNumber.GetHashCode()
				^ ssDisciplinaryType.GetHashCode()
				^ ssMLWCompetencieId.GetHashCode()
				^ ssMLWCompetencieCurrentLevel.GetHashCode()
				^ ssSessionId.GetHashCode()
				^ ssCommunicationId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentLogEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(44, true);
			OptimizedAttributes = new BitArray(44, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssDateTime = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssEventBy = 0;
			_ssDescription = "";
			_ssUserDescription = "";
			_ssLogRAGId = "";
			_ssStudentLogType = "";
			_ssRAGCategoryId = 0;
			_ssStudentRAG = "";
			_ssLastWeekPunctuality = 0;
			_ssOverallPunctuality = 0;
			_ssLastWeekAttendance = 0;
			_ssOverallAttendance = 0;
			_ssCauseOfConcernRAG = "";
			_ssCauseOfConcernNumber = 0;
			_ssSafeguardIdList = "";
			_ssSupportIdList = "";
			_ssRewardsGoldNumber = 0;
			_ssRewardsGreenNumber = 0;
			_ssVocPeriodRAG = "";
			_ssVocOverallRAG = "";
			_ssVocCompletedUnits = 0;
			_ssVocRegisteredUnits = 0;
			_ssMathPeriodRAG = "";
			_ssMathOverallRAG = "";
			_ssMathCompletedUnits = 0;
			_ssMathRegisteredUnits = 0;
			_ssEngPeriodRAG = "";
			_ssEngOverallRAG = "";
			_ssEngCompletedUnits = 0;
			_ssEngRegisteredUnits = 0;
			_ssMLWPeriodRAG = "";
			_ssMLWOverallRAG = "";
			_ssMLWCompletedUnits = 0;
			_ssMLWRegisteredUnits = 0;
			_ssRewardType = false;
			_ssDescriptionType = "";
			_ssDisciplinaryTypeNumber = 0;
			_ssDisciplinaryType = "";
			_ssMLWCompetencieId = "";
			_ssMLWCompetencieCurrentLevel = 0;
			_ssSessionId = 0;
			_ssCommunicationId = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDateTime = (DateTime) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssEventBy = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssUserDescription = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssLogRAGId = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssStudentLogType = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssRAGCategoryId = (int) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssStudentRAG = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssLastWeekPunctuality = (int) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssOverallPunctuality = (int) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssLastWeekAttendance = (int) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssOverallAttendance = (int) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssCauseOfConcernRAG = (string) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssCauseOfConcernNumber = (int) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssSafeguardIdList = (string) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			_ssSupportIdList = (string) info.GetValue(fields[17] .Name, fields[17] .FieldType);
			if (fields[18] .FieldType.IsSerializable)
			_ssRewardsGoldNumber = (int) info.GetValue(fields[18] .Name, fields[18] .FieldType);
			if (fields[19] .FieldType.IsSerializable)
			_ssRewardsGreenNumber = (int) info.GetValue(fields[19] .Name, fields[19] .FieldType);
			if (fields[20] .FieldType.IsSerializable)
			_ssVocPeriodRAG = (string) info.GetValue(fields[20] .Name, fields[20] .FieldType);
			if (fields[21] .FieldType.IsSerializable)
			_ssVocOverallRAG = (string) info.GetValue(fields[21] .Name, fields[21] .FieldType);
			if (fields[22] .FieldType.IsSerializable)
			_ssVocCompletedUnits = (int) info.GetValue(fields[22] .Name, fields[22] .FieldType);
			if (fields[23] .FieldType.IsSerializable)
			_ssVocRegisteredUnits = (int) info.GetValue(fields[23] .Name, fields[23] .FieldType);
			if (fields[24] .FieldType.IsSerializable)
			_ssMathPeriodRAG = (string) info.GetValue(fields[24] .Name, fields[24] .FieldType);
			if (fields[25] .FieldType.IsSerializable)
			_ssMathOverallRAG = (string) info.GetValue(fields[25] .Name, fields[25] .FieldType);
			if (fields[26] .FieldType.IsSerializable)
			_ssMathCompletedUnits = (int) info.GetValue(fields[26] .Name, fields[26] .FieldType);
			if (fields[27] .FieldType.IsSerializable)
			_ssMathRegisteredUnits = (int) info.GetValue(fields[27] .Name, fields[27] .FieldType);
			if (fields[28] .FieldType.IsSerializable)
			_ssEngPeriodRAG = (string) info.GetValue(fields[28] .Name, fields[28] .FieldType);
			if (fields[29] .FieldType.IsSerializable)
			_ssEngOverallRAG = (string) info.GetValue(fields[29] .Name, fields[29] .FieldType);
			if (fields[30] .FieldType.IsSerializable)
			_ssEngCompletedUnits = (int) info.GetValue(fields[30] .Name, fields[30] .FieldType);
			if (fields[31] .FieldType.IsSerializable)
			_ssEngRegisteredUnits = (int) info.GetValue(fields[31] .Name, fields[31] .FieldType);
			if (fields[32] .FieldType.IsSerializable)
			_ssMLWPeriodRAG = (string) info.GetValue(fields[32] .Name, fields[32] .FieldType);
			if (fields[33] .FieldType.IsSerializable)
			_ssMLWOverallRAG = (string) info.GetValue(fields[33] .Name, fields[33] .FieldType);
			if (fields[34] .FieldType.IsSerializable)
			_ssMLWCompletedUnits = (int) info.GetValue(fields[34] .Name, fields[34] .FieldType);
			if (fields[35] .FieldType.IsSerializable)
			_ssMLWRegisteredUnits = (int) info.GetValue(fields[35] .Name, fields[35] .FieldType);
			if (fields[36] .FieldType.IsSerializable)
			_ssRewardType = (bool) info.GetValue(fields[36] .Name, fields[36] .FieldType);
			if (fields[37] .FieldType.IsSerializable)
			_ssDescriptionType = (string) info.GetValue(fields[37] .Name, fields[37] .FieldType);
			if (fields[38] .FieldType.IsSerializable)
			_ssDisciplinaryTypeNumber = (int) info.GetValue(fields[38] .Name, fields[38] .FieldType);
			if (fields[39] .FieldType.IsSerializable)
			_ssDisciplinaryType = (string) info.GetValue(fields[39] .Name, fields[39] .FieldType);
			if (fields[40] .FieldType.IsSerializable)
			_ssMLWCompetencieId = (string) info.GetValue(fields[40] .Name, fields[40] .FieldType);
			if (fields[41] .FieldType.IsSerializable)
			_ssMLWCompetencieCurrentLevel = (int) info.GetValue(fields[41] .Name, fields[41] .FieldType);
			if (fields[42] .FieldType.IsSerializable)
			_ssSessionId = (int) info.GetValue(fields[42] .Name, fields[42] .FieldType);
			if (fields[43] .FieldType.IsSerializable)
			_ssCommunicationId = (int) info.GetValue(fields[43] .Name, fields[43] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentLogEntityRecord Duplicate() {
			ENStudentLogEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssDateTime = this._ssDateTime;
			t._ssEventBy = this._ssEventBy;
			t._ssDescription = this._ssDescription;
			t._ssUserDescription = this._ssUserDescription;
			t._ssLogRAGId = this._ssLogRAGId;
			t._ssStudentLogType = this._ssStudentLogType;
			t._ssRAGCategoryId = this._ssRAGCategoryId;
			t._ssStudentRAG = this._ssStudentRAG;
			t._ssLastWeekPunctuality = this._ssLastWeekPunctuality;
			t._ssOverallPunctuality = this._ssOverallPunctuality;
			t._ssLastWeekAttendance = this._ssLastWeekAttendance;
			t._ssOverallAttendance = this._ssOverallAttendance;
			t._ssCauseOfConcernRAG = this._ssCauseOfConcernRAG;
			t._ssCauseOfConcernNumber = this._ssCauseOfConcernNumber;
			t._ssSafeguardIdList = this._ssSafeguardIdList;
			t._ssSupportIdList = this._ssSupportIdList;
			t._ssRewardsGoldNumber = this._ssRewardsGoldNumber;
			t._ssRewardsGreenNumber = this._ssRewardsGreenNumber;
			t._ssVocPeriodRAG = this._ssVocPeriodRAG;
			t._ssVocOverallRAG = this._ssVocOverallRAG;
			t._ssVocCompletedUnits = this._ssVocCompletedUnits;
			t._ssVocRegisteredUnits = this._ssVocRegisteredUnits;
			t._ssMathPeriodRAG = this._ssMathPeriodRAG;
			t._ssMathOverallRAG = this._ssMathOverallRAG;
			t._ssMathCompletedUnits = this._ssMathCompletedUnits;
			t._ssMathRegisteredUnits = this._ssMathRegisteredUnits;
			t._ssEngPeriodRAG = this._ssEngPeriodRAG;
			t._ssEngOverallRAG = this._ssEngOverallRAG;
			t._ssEngCompletedUnits = this._ssEngCompletedUnits;
			t._ssEngRegisteredUnits = this._ssEngRegisteredUnits;
			t._ssMLWPeriodRAG = this._ssMLWPeriodRAG;
			t._ssMLWOverallRAG = this._ssMLWOverallRAG;
			t._ssMLWCompletedUnits = this._ssMLWCompletedUnits;
			t._ssMLWRegisteredUnits = this._ssMLWRegisteredUnits;
			t._ssRewardType = this._ssRewardType;
			t._ssDescriptionType = this._ssDescriptionType;
			t._ssDisciplinaryTypeNumber = this._ssDisciplinaryTypeNumber;
			t._ssDisciplinaryType = this._ssDisciplinaryType;
			t._ssMLWCompetencieId = this._ssMLWCompetencieId;
			t._ssMLWCompetencieCurrentLevel = this._ssMLWCompetencieCurrentLevel;
			t._ssSessionId = this._ssSessionId;
			t._ssCommunicationId = this._ssCommunicationId;
			t.ChangedAttributes = new BitArray(44);
			t.OptimizedAttributes = new BitArray(44);
			for (int i = 0; i < 44; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DateTime")) VarValue.AppendAttribute(recordElem, "DateTime", ssDateTime, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "DateTime");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EventBy")) VarValue.AppendAttribute(recordElem, "EventBy", ssEventBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EventBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserDescription")) VarValue.AppendAttribute(recordElem, "UserDescription", ssUserDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UserDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogRAGId")) VarValue.AppendAttribute(recordElem, "LogRAGId", ssLogRAGId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LogRAGId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentLogType")) VarValue.AppendAttribute(recordElem, "StudentLogType", ssStudentLogType, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentLogType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RAGCategoryId")) VarValue.AppendAttribute(recordElem, "RAGCategoryId", ssRAGCategoryId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RAGCategoryId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentRAG")) VarValue.AppendAttribute(recordElem, "StudentRAG", ssStudentRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekPunctuality")) VarValue.AppendAttribute(recordElem, "LastWeekPunctuality", ssLastWeekPunctuality, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekPunctuality");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallPunctuality")) VarValue.AppendAttribute(recordElem, "OverallPunctuality", ssOverallPunctuality, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallPunctuality");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekAttendance")) VarValue.AppendAttribute(recordElem, "LastWeekAttendance", ssLastWeekAttendance, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekAttendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallAttendance")) VarValue.AppendAttribute(recordElem, "OverallAttendance", ssOverallAttendance, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallAttendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CauseOfConcernRAG")) VarValue.AppendAttribute(recordElem, "CauseOfConcernRAG", ssCauseOfConcernRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CauseOfConcernRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CauseOfConcernNumber")) VarValue.AppendAttribute(recordElem, "CauseOfConcernNumber", ssCauseOfConcernNumber, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CauseOfConcernNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardIdList")) VarValue.AppendAttribute(recordElem, "SafeguardIdList", ssSafeguardIdList, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardIdList");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportIdList")) VarValue.AppendAttribute(recordElem, "SupportIdList", ssSupportIdList, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SupportIdList");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RewardsGoldNumber")) VarValue.AppendAttribute(recordElem, "RewardsGoldNumber", ssRewardsGoldNumber, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "RewardsGoldNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RewardsGreenNumber")) VarValue.AppendAttribute(recordElem, "RewardsGreenNumber", ssRewardsGreenNumber, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "RewardsGreenNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VocPeriodRAG")) VarValue.AppendAttribute(recordElem, "VocPeriodRAG", ssVocPeriodRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "VocPeriodRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VocOverallRAG")) VarValue.AppendAttribute(recordElem, "VocOverallRAG", ssVocOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "VocOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VocCompletedUnits")) VarValue.AppendAttribute(recordElem, "VocCompletedUnits", ssVocCompletedUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "VocCompletedUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VocRegisteredUnits")) VarValue.AppendAttribute(recordElem, "VocRegisteredUnits", ssVocRegisteredUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "VocRegisteredUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathPeriodRAG")) VarValue.AppendAttribute(recordElem, "MathPeriodRAG", ssMathPeriodRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MathPeriodRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathOverallRAG")) VarValue.AppendAttribute(recordElem, "MathOverallRAG", ssMathOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MathOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathCompletedUnits")) VarValue.AppendAttribute(recordElem, "MathCompletedUnits", ssMathCompletedUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "MathCompletedUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathRegisteredUnits")) VarValue.AppendAttribute(recordElem, "MathRegisteredUnits", ssMathRegisteredUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "MathRegisteredUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EngPeriodRAG")) VarValue.AppendAttribute(recordElem, "EngPeriodRAG", ssEngPeriodRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EngPeriodRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EngOverallRAG")) VarValue.AppendAttribute(recordElem, "EngOverallRAG", ssEngOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EngOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EngCompletedUnits")) VarValue.AppendAttribute(recordElem, "EngCompletedUnits", ssEngCompletedUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "EngCompletedUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EngRegisteredUnits")) VarValue.AppendAttribute(recordElem, "EngRegisteredUnits", ssEngRegisteredUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "EngRegisteredUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWPeriodRAG")) VarValue.AppendAttribute(recordElem, "MLWPeriodRAG", ssMLWPeriodRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MLWPeriodRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWOverallRAG")) VarValue.AppendAttribute(recordElem, "MLWOverallRAG", ssMLWOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MLWOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWCompletedUnits")) VarValue.AppendAttribute(recordElem, "MLWCompletedUnits", ssMLWCompletedUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "MLWCompletedUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWRegisteredUnits")) VarValue.AppendAttribute(recordElem, "MLWRegisteredUnits", ssMLWRegisteredUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "MLWRegisteredUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RewardType")) VarValue.AppendAttribute(recordElem, "RewardType", ssRewardType, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "RewardType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DescriptionType")) VarValue.AppendAttribute(recordElem, "DescriptionType", ssDescriptionType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DescriptionType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DisciplinaryTypeNumber")) VarValue.AppendAttribute(recordElem, "DisciplinaryTypeNumber", ssDisciplinaryTypeNumber, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "DisciplinaryTypeNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DisciplinaryType")) VarValue.AppendAttribute(recordElem, "DisciplinaryType", ssDisciplinaryType, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "DisciplinaryType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWCompetencieId")) VarValue.AppendAttribute(recordElem, "MLWCompetencieId", ssMLWCompetencieId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MLWCompetencieId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWCompetencieCurrentLevel")) VarValue.AppendAttribute(recordElem, "MLWCompetencieCurrentLevel", ssMLWCompetencieCurrentLevel, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "MLWCompetencieCurrentLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SessionId")) VarValue.AppendAttribute(recordElem, "SessionId", ssSessionId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SessionId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CommunicationId")) VarValue.AppendAttribute(recordElem, "CommunicationId", ssCommunicationId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CommunicationId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "datetime") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DateTime")) variable.Value = ssDateTime; else variable.Optimized = true;
			} else if (head == "eventby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EventBy")) variable.Value = ssEventBy; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "userdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserDescription")) variable.Value = ssUserDescription; else variable.Optimized = true;
			} else if (head == "logragid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogRAGId")) variable.Value = ssLogRAGId; else variable.Optimized = true;
			} else if (head == "studentlogtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLogType")) variable.Value = ssStudentLogType; else variable.Optimized = true;
			} else if (head == "ragcategoryid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGCategoryId")) variable.Value = ssRAGCategoryId; else variable.Optimized = true;
			} else if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssStudentRAG; else variable.Optimized = true;
			} else if (head == "lastweekpunctuality") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekPunctuality")) variable.Value = ssLastWeekPunctuality; else variable.Optimized = true;
			} else if (head == "overallpunctuality") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallPunctuality")) variable.Value = ssOverallPunctuality; else variable.Optimized = true;
			} else if (head == "lastweekattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekAttendance")) variable.Value = ssLastWeekAttendance; else variable.Optimized = true;
			} else if (head == "overallattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallAttendance")) variable.Value = ssOverallAttendance; else variable.Optimized = true;
			} else if (head == "causeofconcernrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernRAG")) variable.Value = ssCauseOfConcernRAG; else variable.Optimized = true;
			} else if (head == "causeofconcernnumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernNumber")) variable.Value = ssCauseOfConcernNumber; else variable.Optimized = true;
			} else if (head == "safeguardidlist") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardIdList")) variable.Value = ssSafeguardIdList; else variable.Optimized = true;
			} else if (head == "supportidlist") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportIdList")) variable.Value = ssSupportIdList; else variable.Optimized = true;
			} else if (head == "rewardsgoldnumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RewardsGoldNumber")) variable.Value = ssRewardsGoldNumber; else variable.Optimized = true;
			} else if (head == "rewardsgreennumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RewardsGreenNumber")) variable.Value = ssRewardsGreenNumber; else variable.Optimized = true;
			} else if (head == "vocperiodrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VocPeriodRAG")) variable.Value = ssVocPeriodRAG; else variable.Optimized = true;
			} else if (head == "vocoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VocOverallRAG")) variable.Value = ssVocOverallRAG; else variable.Optimized = true;
			} else if (head == "voccompletedunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VocCompletedUnits")) variable.Value = ssVocCompletedUnits; else variable.Optimized = true;
			} else if (head == "vocregisteredunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VocRegisteredUnits")) variable.Value = ssVocRegisteredUnits; else variable.Optimized = true;
			} else if (head == "mathperiodrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathPeriodRAG")) variable.Value = ssMathPeriodRAG; else variable.Optimized = true;
			} else if (head == "mathoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathOverallRAG")) variable.Value = ssMathOverallRAG; else variable.Optimized = true;
			} else if (head == "mathcompletedunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathCompletedUnits")) variable.Value = ssMathCompletedUnits; else variable.Optimized = true;
			} else if (head == "mathregisteredunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathRegisteredUnits")) variable.Value = ssMathRegisteredUnits; else variable.Optimized = true;
			} else if (head == "engperiodrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EngPeriodRAG")) variable.Value = ssEngPeriodRAG; else variable.Optimized = true;
			} else if (head == "engoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EngOverallRAG")) variable.Value = ssEngOverallRAG; else variable.Optimized = true;
			} else if (head == "engcompletedunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EngCompletedUnits")) variable.Value = ssEngCompletedUnits; else variable.Optimized = true;
			} else if (head == "engregisteredunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EngRegisteredUnits")) variable.Value = ssEngRegisteredUnits; else variable.Optimized = true;
			} else if (head == "mlwperiodrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWPeriodRAG")) variable.Value = ssMLWPeriodRAG; else variable.Optimized = true;
			} else if (head == "mlwoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWOverallRAG")) variable.Value = ssMLWOverallRAG; else variable.Optimized = true;
			} else if (head == "mlwcompletedunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWCompletedUnits")) variable.Value = ssMLWCompletedUnits; else variable.Optimized = true;
			} else if (head == "mlwregisteredunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWRegisteredUnits")) variable.Value = ssMLWRegisteredUnits; else variable.Optimized = true;
			} else if (head == "rewardtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RewardType")) variable.Value = ssRewardType; else variable.Optimized = true;
			} else if (head == "descriptiontype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DescriptionType")) variable.Value = ssDescriptionType; else variable.Optimized = true;
			} else if (head == "disciplinarytypenumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DisciplinaryTypeNumber")) variable.Value = ssDisciplinaryTypeNumber; else variable.Optimized = true;
			} else if (head == "disciplinarytype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DisciplinaryType")) variable.Value = ssDisciplinaryType; else variable.Optimized = true;
			} else if (head == "mlwcompetencieid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWCompetencieId")) variable.Value = ssMLWCompetencieId; else variable.Optimized = true;
			} else if (head == "mlwcompetenciecurrentlevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWCompetencieCurrentLevel")) variable.Value = ssMLWCompetencieCurrentLevel; else variable.Optimized = true;
			} else if (head == "sessionid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SessionId")) variable.Value = ssSessionId; else variable.Optimized = true;
			} else if (head == "communicationid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CommunicationId")) variable.Value = ssCommunicationId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDateTime)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdEventBy)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdUserDescription)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdLogRAGId)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdStudentLogType)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdRAGCategoryId)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdStudentRAG)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdLastWeekPunctuality)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdOverallPunctuality)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdLastWeekAttendance)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdOverallAttendance)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdCauseOfConcernRAG)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdCauseOfConcernNumber)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdSafeguardIdList)) {
				return ChangedAttributes[16];
			} else if (key.Equals(IdSupportIdList)) {
				return ChangedAttributes[17];
			} else if (key.Equals(IdRewardsGoldNumber)) {
				return ChangedAttributes[18];
			} else if (key.Equals(IdRewardsGreenNumber)) {
				return ChangedAttributes[19];
			} else if (key.Equals(IdVocPeriodRAG)) {
				return ChangedAttributes[20];
			} else if (key.Equals(IdVocOverallRAG)) {
				return ChangedAttributes[21];
			} else if (key.Equals(IdVocCompletedUnits)) {
				return ChangedAttributes[22];
			} else if (key.Equals(IdVocRegisteredUnits)) {
				return ChangedAttributes[23];
			} else if (key.Equals(IdMathPeriodRAG)) {
				return ChangedAttributes[24];
			} else if (key.Equals(IdMathOverallRAG)) {
				return ChangedAttributes[25];
			} else if (key.Equals(IdMathCompletedUnits)) {
				return ChangedAttributes[26];
			} else if (key.Equals(IdMathRegisteredUnits)) {
				return ChangedAttributes[27];
			} else if (key.Equals(IdEngPeriodRAG)) {
				return ChangedAttributes[28];
			} else if (key.Equals(IdEngOverallRAG)) {
				return ChangedAttributes[29];
			} else if (key.Equals(IdEngCompletedUnits)) {
				return ChangedAttributes[30];
			} else if (key.Equals(IdEngRegisteredUnits)) {
				return ChangedAttributes[31];
			} else if (key.Equals(IdMLWPeriodRAG)) {
				return ChangedAttributes[32];
			} else if (key.Equals(IdMLWOverallRAG)) {
				return ChangedAttributes[33];
			} else if (key.Equals(IdMLWCompletedUnits)) {
				return ChangedAttributes[34];
			} else if (key.Equals(IdMLWRegisteredUnits)) {
				return ChangedAttributes[35];
			} else if (key.Equals(IdRewardType)) {
				return ChangedAttributes[36];
			} else if (key.Equals(IdDescriptionType)) {
				return ChangedAttributes[37];
			} else if (key.Equals(IdDisciplinaryTypeNumber)) {
				return ChangedAttributes[38];
			} else if (key.Equals(IdDisciplinaryType)) {
				return ChangedAttributes[39];
			} else if (key.Equals(IdMLWCompetencieId)) {
				return ChangedAttributes[40];
			} else if (key.Equals(IdMLWCompetencieCurrentLevel)) {
				return ChangedAttributes[41];
			} else if (key.Equals(IdSessionId)) {
				return ChangedAttributes[42];
			} else if (key.Equals(IdCommunicationId)) {
				return ChangedAttributes[43];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDateTime)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdEventBy)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdUserDescription)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdLogRAGId)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdStudentLogType)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdRAGCategoryId)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdStudentRAG)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdLastWeekPunctuality)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdOverallPunctuality)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdLastWeekAttendance)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdOverallAttendance)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdCauseOfConcernRAG)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdCauseOfConcernNumber)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdSafeguardIdList)) {
				return OptimizedAttributes[16];
			} else if (key.Equals(IdSupportIdList)) {
				return OptimizedAttributes[17];
			} else if (key.Equals(IdRewardsGoldNumber)) {
				return OptimizedAttributes[18];
			} else if (key.Equals(IdRewardsGreenNumber)) {
				return OptimizedAttributes[19];
			} else if (key.Equals(IdVocPeriodRAG)) {
				return OptimizedAttributes[20];
			} else if (key.Equals(IdVocOverallRAG)) {
				return OptimizedAttributes[21];
			} else if (key.Equals(IdVocCompletedUnits)) {
				return OptimizedAttributes[22];
			} else if (key.Equals(IdVocRegisteredUnits)) {
				return OptimizedAttributes[23];
			} else if (key.Equals(IdMathPeriodRAG)) {
				return OptimizedAttributes[24];
			} else if (key.Equals(IdMathOverallRAG)) {
				return OptimizedAttributes[25];
			} else if (key.Equals(IdMathCompletedUnits)) {
				return OptimizedAttributes[26];
			} else if (key.Equals(IdMathRegisteredUnits)) {
				return OptimizedAttributes[27];
			} else if (key.Equals(IdEngPeriodRAG)) {
				return OptimizedAttributes[28];
			} else if (key.Equals(IdEngOverallRAG)) {
				return OptimizedAttributes[29];
			} else if (key.Equals(IdEngCompletedUnits)) {
				return OptimizedAttributes[30];
			} else if (key.Equals(IdEngRegisteredUnits)) {
				return OptimizedAttributes[31];
			} else if (key.Equals(IdMLWPeriodRAG)) {
				return OptimizedAttributes[32];
			} else if (key.Equals(IdMLWOverallRAG)) {
				return OptimizedAttributes[33];
			} else if (key.Equals(IdMLWCompletedUnits)) {
				return OptimizedAttributes[34];
			} else if (key.Equals(IdMLWRegisteredUnits)) {
				return OptimizedAttributes[35];
			} else if (key.Equals(IdRewardType)) {
				return OptimizedAttributes[36];
			} else if (key.Equals(IdDescriptionType)) {
				return OptimizedAttributes[37];
			} else if (key.Equals(IdDisciplinaryTypeNumber)) {
				return OptimizedAttributes[38];
			} else if (key.Equals(IdDisciplinaryType)) {
				return OptimizedAttributes[39];
			} else if (key.Equals(IdMLWCompetencieId)) {
				return OptimizedAttributes[40];
			} else if (key.Equals(IdMLWCompetencieCurrentLevel)) {
				return OptimizedAttributes[41];
			} else if (key.Equals(IdSessionId)) {
				return OptimizedAttributes[42];
			} else if (key.Equals(IdCommunicationId)) {
				return OptimizedAttributes[43];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdDateTime) {
				return ssDateTime;
			} else if (key == IdEventBy) {
				return ssEventBy;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdUserDescription) {
				return ssUserDescription;
			} else if (key == IdLogRAGId) {
				return ssLogRAGId;
			} else if (key == IdStudentLogType) {
				return ssStudentLogType;
			} else if (key == IdRAGCategoryId) {
				return ssRAGCategoryId;
			} else if (key == IdStudentRAG) {
				return ssStudentRAG;
			} else if (key == IdLastWeekPunctuality) {
				return ssLastWeekPunctuality;
			} else if (key == IdOverallPunctuality) {
				return ssOverallPunctuality;
			} else if (key == IdLastWeekAttendance) {
				return ssLastWeekAttendance;
			} else if (key == IdOverallAttendance) {
				return ssOverallAttendance;
			} else if (key == IdCauseOfConcernRAG) {
				return ssCauseOfConcernRAG;
			} else if (key == IdCauseOfConcernNumber) {
				return ssCauseOfConcernNumber;
			} else if (key == IdSafeguardIdList) {
				return ssSafeguardIdList;
			} else if (key == IdSupportIdList) {
				return ssSupportIdList;
			} else if (key == IdRewardsGoldNumber) {
				return ssRewardsGoldNumber;
			} else if (key == IdRewardsGreenNumber) {
				return ssRewardsGreenNumber;
			} else if (key == IdVocPeriodRAG) {
				return ssVocPeriodRAG;
			} else if (key == IdVocOverallRAG) {
				return ssVocOverallRAG;
			} else if (key == IdVocCompletedUnits) {
				return ssVocCompletedUnits;
			} else if (key == IdVocRegisteredUnits) {
				return ssVocRegisteredUnits;
			} else if (key == IdMathPeriodRAG) {
				return ssMathPeriodRAG;
			} else if (key == IdMathOverallRAG) {
				return ssMathOverallRAG;
			} else if (key == IdMathCompletedUnits) {
				return ssMathCompletedUnits;
			} else if (key == IdMathRegisteredUnits) {
				return ssMathRegisteredUnits;
			} else if (key == IdEngPeriodRAG) {
				return ssEngPeriodRAG;
			} else if (key == IdEngOverallRAG) {
				return ssEngOverallRAG;
			} else if (key == IdEngCompletedUnits) {
				return ssEngCompletedUnits;
			} else if (key == IdEngRegisteredUnits) {
				return ssEngRegisteredUnits;
			} else if (key == IdMLWPeriodRAG) {
				return ssMLWPeriodRAG;
			} else if (key == IdMLWOverallRAG) {
				return ssMLWOverallRAG;
			} else if (key == IdMLWCompletedUnits) {
				return ssMLWCompletedUnits;
			} else if (key == IdMLWRegisteredUnits) {
				return ssMLWRegisteredUnits;
			} else if (key == IdRewardType) {
				return ssRewardType;
			} else if (key == IdDescriptionType) {
				return ssDescriptionType;
			} else if (key == IdDisciplinaryTypeNumber) {
				return ssDisciplinaryTypeNumber;
			} else if (key == IdDisciplinaryType) {
				return ssDisciplinaryType;
			} else if (key == IdMLWCompetencieId) {
				return ssMLWCompetencieId;
			} else if (key == IdMLWCompetencieCurrentLevel) {
				return ssMLWCompetencieCurrentLevel;
			} else if (key == IdSessionId) {
				return ssSessionId;
			} else if (key == IdCommunicationId) {
				return ssCommunicationId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(44);
			OptimizedAttributes = new BitArray(44);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssDateTime = (DateTime) other.AttributeGet(IdDateTime);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDateTime);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDateTime);
			ssEventBy = (int) other.AttributeGet(IdEventBy);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdEventBy);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdEventBy);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdDescription);
			ssUserDescription = (string) other.AttributeGet(IdUserDescription);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdUserDescription);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdUserDescription);
			ssLogRAGId = (string) other.AttributeGet(IdLogRAGId);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdLogRAGId);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdLogRAGId);
			ssStudentLogType = (string) other.AttributeGet(IdStudentLogType);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdStudentLogType);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdStudentLogType);
			ssRAGCategoryId = (int) other.AttributeGet(IdRAGCategoryId);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdRAGCategoryId);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdRAGCategoryId);
			ssStudentRAG = (string) other.AttributeGet(IdStudentRAG);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdStudentRAG);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdStudentRAG);
			ssLastWeekPunctuality = (int) other.AttributeGet(IdLastWeekPunctuality);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdLastWeekPunctuality);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdLastWeekPunctuality);
			ssOverallPunctuality = (int) other.AttributeGet(IdOverallPunctuality);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdOverallPunctuality);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdOverallPunctuality);
			ssLastWeekAttendance = (int) other.AttributeGet(IdLastWeekAttendance);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdLastWeekAttendance);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdLastWeekAttendance);
			ssOverallAttendance = (int) other.AttributeGet(IdOverallAttendance);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdOverallAttendance);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdOverallAttendance);
			ssCauseOfConcernRAG = (string) other.AttributeGet(IdCauseOfConcernRAG);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdCauseOfConcernRAG);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdCauseOfConcernRAG);
			ssCauseOfConcernNumber = (int) other.AttributeGet(IdCauseOfConcernNumber);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdCauseOfConcernNumber);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdCauseOfConcernNumber);
			ssSafeguardIdList = (string) other.AttributeGet(IdSafeguardIdList);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdSafeguardIdList);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdSafeguardIdList);
			ssSupportIdList = (string) other.AttributeGet(IdSupportIdList);
			ChangedAttributes[17] = other.ChangedAttributeGet(IdSupportIdList);
			OptimizedAttributes[17] = other.OptimizedAttributeGet(IdSupportIdList);
			ssRewardsGoldNumber = (int) other.AttributeGet(IdRewardsGoldNumber);
			ChangedAttributes[18] = other.ChangedAttributeGet(IdRewardsGoldNumber);
			OptimizedAttributes[18] = other.OptimizedAttributeGet(IdRewardsGoldNumber);
			ssRewardsGreenNumber = (int) other.AttributeGet(IdRewardsGreenNumber);
			ChangedAttributes[19] = other.ChangedAttributeGet(IdRewardsGreenNumber);
			OptimizedAttributes[19] = other.OptimizedAttributeGet(IdRewardsGreenNumber);
			ssVocPeriodRAG = (string) other.AttributeGet(IdVocPeriodRAG);
			ChangedAttributes[20] = other.ChangedAttributeGet(IdVocPeriodRAG);
			OptimizedAttributes[20] = other.OptimizedAttributeGet(IdVocPeriodRAG);
			ssVocOverallRAG = (string) other.AttributeGet(IdVocOverallRAG);
			ChangedAttributes[21] = other.ChangedAttributeGet(IdVocOverallRAG);
			OptimizedAttributes[21] = other.OptimizedAttributeGet(IdVocOverallRAG);
			ssVocCompletedUnits = (int) other.AttributeGet(IdVocCompletedUnits);
			ChangedAttributes[22] = other.ChangedAttributeGet(IdVocCompletedUnits);
			OptimizedAttributes[22] = other.OptimizedAttributeGet(IdVocCompletedUnits);
			ssVocRegisteredUnits = (int) other.AttributeGet(IdVocRegisteredUnits);
			ChangedAttributes[23] = other.ChangedAttributeGet(IdVocRegisteredUnits);
			OptimizedAttributes[23] = other.OptimizedAttributeGet(IdVocRegisteredUnits);
			ssMathPeriodRAG = (string) other.AttributeGet(IdMathPeriodRAG);
			ChangedAttributes[24] = other.ChangedAttributeGet(IdMathPeriodRAG);
			OptimizedAttributes[24] = other.OptimizedAttributeGet(IdMathPeriodRAG);
			ssMathOverallRAG = (string) other.AttributeGet(IdMathOverallRAG);
			ChangedAttributes[25] = other.ChangedAttributeGet(IdMathOverallRAG);
			OptimizedAttributes[25] = other.OptimizedAttributeGet(IdMathOverallRAG);
			ssMathCompletedUnits = (int) other.AttributeGet(IdMathCompletedUnits);
			ChangedAttributes[26] = other.ChangedAttributeGet(IdMathCompletedUnits);
			OptimizedAttributes[26] = other.OptimizedAttributeGet(IdMathCompletedUnits);
			ssMathRegisteredUnits = (int) other.AttributeGet(IdMathRegisteredUnits);
			ChangedAttributes[27] = other.ChangedAttributeGet(IdMathRegisteredUnits);
			OptimizedAttributes[27] = other.OptimizedAttributeGet(IdMathRegisteredUnits);
			ssEngPeriodRAG = (string) other.AttributeGet(IdEngPeriodRAG);
			ChangedAttributes[28] = other.ChangedAttributeGet(IdEngPeriodRAG);
			OptimizedAttributes[28] = other.OptimizedAttributeGet(IdEngPeriodRAG);
			ssEngOverallRAG = (string) other.AttributeGet(IdEngOverallRAG);
			ChangedAttributes[29] = other.ChangedAttributeGet(IdEngOverallRAG);
			OptimizedAttributes[29] = other.OptimizedAttributeGet(IdEngOverallRAG);
			ssEngCompletedUnits = (int) other.AttributeGet(IdEngCompletedUnits);
			ChangedAttributes[30] = other.ChangedAttributeGet(IdEngCompletedUnits);
			OptimizedAttributes[30] = other.OptimizedAttributeGet(IdEngCompletedUnits);
			ssEngRegisteredUnits = (int) other.AttributeGet(IdEngRegisteredUnits);
			ChangedAttributes[31] = other.ChangedAttributeGet(IdEngRegisteredUnits);
			OptimizedAttributes[31] = other.OptimizedAttributeGet(IdEngRegisteredUnits);
			ssMLWPeriodRAG = (string) other.AttributeGet(IdMLWPeriodRAG);
			ChangedAttributes[32] = other.ChangedAttributeGet(IdMLWPeriodRAG);
			OptimizedAttributes[32] = other.OptimizedAttributeGet(IdMLWPeriodRAG);
			ssMLWOverallRAG = (string) other.AttributeGet(IdMLWOverallRAG);
			ChangedAttributes[33] = other.ChangedAttributeGet(IdMLWOverallRAG);
			OptimizedAttributes[33] = other.OptimizedAttributeGet(IdMLWOverallRAG);
			ssMLWCompletedUnits = (int) other.AttributeGet(IdMLWCompletedUnits);
			ChangedAttributes[34] = other.ChangedAttributeGet(IdMLWCompletedUnits);
			OptimizedAttributes[34] = other.OptimizedAttributeGet(IdMLWCompletedUnits);
			ssMLWRegisteredUnits = (int) other.AttributeGet(IdMLWRegisteredUnits);
			ChangedAttributes[35] = other.ChangedAttributeGet(IdMLWRegisteredUnits);
			OptimizedAttributes[35] = other.OptimizedAttributeGet(IdMLWRegisteredUnits);
			ssRewardType = (bool) other.AttributeGet(IdRewardType);
			ChangedAttributes[36] = other.ChangedAttributeGet(IdRewardType);
			OptimizedAttributes[36] = other.OptimizedAttributeGet(IdRewardType);
			ssDescriptionType = (string) other.AttributeGet(IdDescriptionType);
			ChangedAttributes[37] = other.ChangedAttributeGet(IdDescriptionType);
			OptimizedAttributes[37] = other.OptimizedAttributeGet(IdDescriptionType);
			ssDisciplinaryTypeNumber = (int) other.AttributeGet(IdDisciplinaryTypeNumber);
			ChangedAttributes[38] = other.ChangedAttributeGet(IdDisciplinaryTypeNumber);
			OptimizedAttributes[38] = other.OptimizedAttributeGet(IdDisciplinaryTypeNumber);
			ssDisciplinaryType = (string) other.AttributeGet(IdDisciplinaryType);
			ChangedAttributes[39] = other.ChangedAttributeGet(IdDisciplinaryType);
			OptimizedAttributes[39] = other.OptimizedAttributeGet(IdDisciplinaryType);
			ssMLWCompetencieId = (string) other.AttributeGet(IdMLWCompetencieId);
			ChangedAttributes[40] = other.ChangedAttributeGet(IdMLWCompetencieId);
			OptimizedAttributes[40] = other.OptimizedAttributeGet(IdMLWCompetencieId);
			ssMLWCompetencieCurrentLevel = (int) other.AttributeGet(IdMLWCompetencieCurrentLevel);
			ChangedAttributes[41] = other.ChangedAttributeGet(IdMLWCompetencieCurrentLevel);
			OptimizedAttributes[41] = other.OptimizedAttributeGet(IdMLWCompetencieCurrentLevel);
			ssSessionId = (int) other.AttributeGet(IdSessionId);
			ChangedAttributes[42] = other.ChangedAttributeGet(IdSessionId);
			OptimizedAttributes[42] = other.OptimizedAttributeGet(IdSessionId);
			ssCommunicationId = (int) other.AttributeGet(IdCommunicationId);
			ChangedAttributes[43] = other.ChangedAttributeGet(IdCommunicationId);
			OptimizedAttributes[43] = other.OptimizedAttributeGet(IdCommunicationId);
		}
	} // ENStudentLogEntityRecord
	/// <summary>
	/// Structure <code>RCStudentLogRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentLogRecord: ISerializable, ITypedRecord<RCStudentLogRecord> {
		private static readonly GlobalObjectKey IdStudentLog = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*a207hFuVwR8WZj05PrSs2A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentLog")]
		public ENStudentLogEntityRecord ssENStudentLog;


		public static implicit operator ENStudentLogEntityRecord(RCStudentLogRecord r) {
			return r.ssENStudentLog;
		}

		public static implicit operator RCStudentLogRecord(ENStudentLogEntityRecord r) {
			RCStudentLogRecord res = new RCStudentLogRecord(null);
			res.ssENStudentLog = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentLog.ChangedAttributes = value;
			}
			get {
				return ssENStudentLog.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentLogRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentLog = new ENStudentLogEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(44, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentLog.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentLog.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentLog.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentLog.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentLogRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentLogRecord a, RCStudentLogRecord b) {
			if (a.ssENStudentLog != b.ssENStudentLog) return false;
			return true;
		}

		public static bool operator != (RCStudentLogRecord a, RCStudentLogRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentLogRecord)) return false;
			return (this == (RCStudentLogRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentLog.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentLogRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentLog = new ENStudentLogEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentLog = (ENStudentLogEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentLog.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentLog.InternalRecursiveSave();
		}


		public RCStudentLogRecord Duplicate() {
			RCStudentLogRecord t;
			t.ssENStudentLog = (ENStudentLogEntityRecord) this.ssENStudentLog.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentLog.ToXml(this, recordElem, "StudentLog", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentlog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentLog")) variable.Value = ssENStudentLog; else variable.Optimized = true;
				variable.SetFieldName("studentlog");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentLog.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentLog.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentLog) {
				return ssENStudentLog;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentLog.FillFromOther((IRecord) other.AttributeGet(IdStudentLog));
		}
	} // RCStudentLogRecord
	/// <summary>
	/// RecordList type <code>RLStudentLogRecordList</code> that represents a record list of
	///  <code>StudentLog</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentLogRecordList: GenericRecordList<RCStudentLogRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentLogRecord GetElementDefaultValue() {
			return new RCStudentLogRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentLogRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentLogRecordList recordlist, Func<RCStudentLogRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentLogRecordList ToList<T>(T[] array, Func <T, RCStudentLogRecord> converter) {
			RLStudentLogRecordList result = new RLStudentLogRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentLogRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentLogRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentLogRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentLogRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(44, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentLogRecord> NewList() {
			return new RLStudentLogRecordList();
		}


	} // RLStudentLogRecordList

	/// <summary>
	/// RecordList type <code>RLStudentLogList</code> that represents a record list of
	///  <code>StudentIdentifier, CategoryIdentifier, UserIdentifier, Text, Text, Text, Text, Text
	/// , DateTime, Boolean, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer,
	///  Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer
	/// , RAGStatusIdentifier, StudentLogTypeIdentifier, RAGStatusIdentifier, RAGStatusIdentifier,
	///  RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier
	/// , RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier,
	///  DisciplinaryTypeIdentifier, MLWCompetenciesIdentifier, CCSessionIdentifier
	/// , CommunicationIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentLogList: GenericRecordList<ENStudentLogEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentLogEntityRecord GetElementDefaultValue() {
			return new ENStudentLogEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentLogEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentLogList recordlist, Func<ENStudentLogEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentLogList ToList<T>(T[] array, Func <T, ENStudentLogEntityRecord> converter) {
			RLStudentLogList result = new RLStudentLogList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentLogList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentLogList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentLogList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentLogList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentLogEntityRecord> NewList() {
			return new RLStudentLogList();
		}


	} // RLStudentLogList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentLog
		/// </summary>

		public static void CreateStudentLog(HeContext heContext, RCStudentLogRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentLogEntity.eSpaceId;
				ENStudentLogEntityRecord ssENStudentLog = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentLogEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [DATETIME]" +
					 ", [EVENTBY]" +
					 ", [DESCRIPTION]" +
					 ", [USERDESCRIPTION]" +
					 ", [LOGRAGID]" +
					 ", [STUDENTLOGTYPE]" +
					 ", [RAGCATEGORYID]" +
					 ", [STUDENTRAG]" +
					 ", [LASTWEEKPUNCTUALITY]" +
					 ", [OVERALLPUNCTUALITY]" +
					 ", [LASTWEEKATTENDANCE]" +
					 ", [OVERALLATTENDANCE]" +
					 ", [CAUSEOFCONCERNRAG]" +
					 ", [CAUSEOFCONCERNNUMBER]" +
					 ", [SAFEGUARDIDLIST]" +
					 ", [SUPPORTIDLIST]" +
					 ", [REWARDSGOLDNUMBER]" +
					 ", [REWARDSGREENNUMBER]" +
					 ", [VOCPERIODRAG]" +
					 ", [VOCOVERALLRAG]" +
					 ", [VOCCOMPLETEDUNITS]" +
					 ", [VOCREGISTEREDUNITS]" +
					 ", [MATHPERIODRAG]" +
					 ", [MATHOVERALLRAG]" +
					 ", [MATHCOMPLETEDUNITS]" +
					 ", [MATHREGISTEREDUNITS]" +
					 ", [ENGPERIODRAG]" +
					 ", [ENGOVERALLRAG]" +
					 ", [ENGCOMPLETEDUNITS]" +
					 ", [ENGREGISTEREDUNITS]" +
					 ", [MLWPERIODRAG]" +
					 ", [MLWOVERALLRAG]" +
					 ", [MLWCOMPLETEDUNITS]" +
					 ", [MLWREGISTEREDUNITS]" +
					 ", [REWARDTYPE]" +
					 ", [DESCRIPTIONTYPE]" +
					 ", [DISCIPLINARYTYPENUMBER]" +
					 ", [DISCIPLINARYTYPE]" +
					 ", [MLWCOMPETENCIEID]" +
					 ", [MLWCOMPETENCIECURRENTLEVEL]" +
					 ", [SESSIONID]" +
					 ", [COMMUNICATIONID]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssDateTime" +
					 ", @ssEventBy" +
					 ", @ssDescription" +
					 ", @ssUserDescription" +
					 ", @ssLogRAGId" +
					 ", @ssStudentLogType" +
					 ", @ssRAGCategoryId" +
					 ", @ssStudentRAG" +
					 ", @ssLastWeekPunctuality" +
					 ", @ssOverallPunctuality" +
					 ", @ssLastWeekAttendance" +
					 ", @ssOverallAttendance" +
					 ", @ssCauseOfConcernRAG" +
					 ", @ssCauseOfConcernNumber" +
					 ", @ssSafeguardIdList" +
					 ", @ssSupportIdList" +
					 ", @ssRewardsGoldNumber" +
					 ", @ssRewardsGreenNumber" +
					 ", @ssVocPeriodRAG" +
					 ", @ssVocOverallRAG" +
					 ", @ssVocCompletedUnits" +
					 ", @ssVocRegisteredUnits" +
					 ", @ssMathPeriodRAG" +
					 ", @ssMathOverallRAG" +
					 ", @ssMathCompletedUnits" +
					 ", @ssMathRegisteredUnits" +
					 ", @ssEngPeriodRAG" +
					 ", @ssEngOverallRAG" +
					 ", @ssEngCompletedUnits" +
					 ", @ssEngRegisteredUnits" +
					 ", @ssMLWPeriodRAG" +
					 ", @ssMLWOverallRAG" +
					 ", @ssMLWCompletedUnits" +
					 ", @ssMLWRegisteredUnits" +
					 ", @ssRewardType" +
					 ", @ssDescriptionType" +
					 ", @ssDisciplinaryTypeNumber" +
					 ", @ssDisciplinaryType" +
					 ", @ssMLWCompetencieId" +
					 ", @ssMLWCompetencieCurrentLevel" +
					 ", @ssSessionId" +
					 ", @ssCommunicationId" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudentLog.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentLog.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssDateTime", DbType.DateTime, ssENStudentLog.ssDateTime);
					if ((ssENStudentLog.ssEventBy==0)) {
						insertSqlCmd.CreateParameter("@ssEventBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssEventBy", DbType.Int32, ssENStudentLog.ssEventBy);
					}
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentLog.ssDescription);
					insertSqlCmd.CreateParameter("@ssUserDescription", DbType.String, ssENStudentLog.ssUserDescription);
					if ((ssENStudentLog.ssLogRAGId== "")) {
						insertSqlCmd.CreateParameter("@ssLogRAGId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLogRAGId", DbType.String, ssENStudentLog.ssLogRAGId);
					}
					if ((ssENStudentLog.ssStudentLogType== "")) {
						insertSqlCmd.CreateParameter("@ssStudentLogType", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentLogType", DbType.String, ssENStudentLog.ssStudentLogType);
					}
					if ((ssENStudentLog.ssRAGCategoryId==0)) {
						insertSqlCmd.CreateParameter("@ssRAGCategoryId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRAGCategoryId", DbType.Int32, ssENStudentLog.ssRAGCategoryId);
					}
					if ((ssENStudentLog.ssStudentRAG== "")) {
						insertSqlCmd.CreateParameter("@ssStudentRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentRAG", DbType.String, ssENStudentLog.ssStudentRAG);
					}
					insertSqlCmd.CreateParameter("@ssLastWeekPunctuality", DbType.Int32, ssENStudentLog.ssLastWeekPunctuality);
					insertSqlCmd.CreateParameter("@ssOverallPunctuality", DbType.Int32, ssENStudentLog.ssOverallPunctuality);
					insertSqlCmd.CreateParameter("@ssLastWeekAttendance", DbType.Int32, ssENStudentLog.ssLastWeekAttendance);
					insertSqlCmd.CreateParameter("@ssOverallAttendance", DbType.Int32, ssENStudentLog.ssOverallAttendance);
					if ((ssENStudentLog.ssCauseOfConcernRAG== "")) {
						insertSqlCmd.CreateParameter("@ssCauseOfConcernRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCauseOfConcernRAG", DbType.String, ssENStudentLog.ssCauseOfConcernRAG);
					}
					insertSqlCmd.CreateParameter("@ssCauseOfConcernNumber", DbType.Int32, ssENStudentLog.ssCauseOfConcernNumber);
					insertSqlCmd.CreateParameter("@ssSafeguardIdList", DbType.String, ssENStudentLog.ssSafeguardIdList);
					insertSqlCmd.CreateParameter("@ssSupportIdList", DbType.String, ssENStudentLog.ssSupportIdList);
					insertSqlCmd.CreateParameter("@ssRewardsGoldNumber", DbType.Int32, ssENStudentLog.ssRewardsGoldNumber);
					insertSqlCmd.CreateParameter("@ssRewardsGreenNumber", DbType.Int32, ssENStudentLog.ssRewardsGreenNumber);
					if ((ssENStudentLog.ssVocPeriodRAG== "")) {
						insertSqlCmd.CreateParameter("@ssVocPeriodRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssVocPeriodRAG", DbType.String, ssENStudentLog.ssVocPeriodRAG);
					}
					if ((ssENStudentLog.ssVocOverallRAG== "")) {
						insertSqlCmd.CreateParameter("@ssVocOverallRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssVocOverallRAG", DbType.String, ssENStudentLog.ssVocOverallRAG);
					}
					insertSqlCmd.CreateParameter("@ssVocCompletedUnits", DbType.Int32, ssENStudentLog.ssVocCompletedUnits);
					insertSqlCmd.CreateParameter("@ssVocRegisteredUnits", DbType.Int32, ssENStudentLog.ssVocRegisteredUnits);
					if ((ssENStudentLog.ssMathPeriodRAG== "")) {
						insertSqlCmd.CreateParameter("@ssMathPeriodRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssMathPeriodRAG", DbType.String, ssENStudentLog.ssMathPeriodRAG);
					}
					if ((ssENStudentLog.ssMathOverallRAG== "")) {
						insertSqlCmd.CreateParameter("@ssMathOverallRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssMathOverallRAG", DbType.String, ssENStudentLog.ssMathOverallRAG);
					}
					insertSqlCmd.CreateParameter("@ssMathCompletedUnits", DbType.Int32, ssENStudentLog.ssMathCompletedUnits);
					insertSqlCmd.CreateParameter("@ssMathRegisteredUnits", DbType.Int32, ssENStudentLog.ssMathRegisteredUnits);
					if ((ssENStudentLog.ssEngPeriodRAG== "")) {
						insertSqlCmd.CreateParameter("@ssEngPeriodRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssEngPeriodRAG", DbType.String, ssENStudentLog.ssEngPeriodRAG);
					}
					if ((ssENStudentLog.ssEngOverallRAG== "")) {
						insertSqlCmd.CreateParameter("@ssEngOverallRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssEngOverallRAG", DbType.String, ssENStudentLog.ssEngOverallRAG);
					}
					insertSqlCmd.CreateParameter("@ssEngCompletedUnits", DbType.Int32, ssENStudentLog.ssEngCompletedUnits);
					insertSqlCmd.CreateParameter("@ssEngRegisteredUnits", DbType.Int32, ssENStudentLog.ssEngRegisteredUnits);
					if ((ssENStudentLog.ssMLWPeriodRAG== "")) {
						insertSqlCmd.CreateParameter("@ssMLWPeriodRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssMLWPeriodRAG", DbType.String, ssENStudentLog.ssMLWPeriodRAG);
					}
					if ((ssENStudentLog.ssMLWOverallRAG== "")) {
						insertSqlCmd.CreateParameter("@ssMLWOverallRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssMLWOverallRAG", DbType.String, ssENStudentLog.ssMLWOverallRAG);
					}
					insertSqlCmd.CreateParameter("@ssMLWCompletedUnits", DbType.Int32, ssENStudentLog.ssMLWCompletedUnits);
					insertSqlCmd.CreateParameter("@ssMLWRegisteredUnits", DbType.Int32, ssENStudentLog.ssMLWRegisteredUnits);
					insertSqlCmd.CreateParameter("@ssRewardType", DbType.Boolean, ssENStudentLog.ssRewardType);
					insertSqlCmd.CreateParameter("@ssDescriptionType", DbType.String, ssENStudentLog.ssDescriptionType);
					insertSqlCmd.CreateParameter("@ssDisciplinaryTypeNumber", DbType.Int32, ssENStudentLog.ssDisciplinaryTypeNumber);
					if ((ssENStudentLog.ssDisciplinaryType== "")) {
						insertSqlCmd.CreateParameter("@ssDisciplinaryType", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDisciplinaryType", DbType.String, ssENStudentLog.ssDisciplinaryType);
					}
					if ((ssENStudentLog.ssMLWCompetencieId== "")) {
						insertSqlCmd.CreateParameter("@ssMLWCompetencieId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssMLWCompetencieId", DbType.String, ssENStudentLog.ssMLWCompetencieId);
					}
					insertSqlCmd.CreateParameter("@ssMLWCompetencieCurrentLevel", DbType.Int32, ssENStudentLog.ssMLWCompetencieCurrentLevel);
					if ((ssENStudentLog.ssSessionId==0)) {
						insertSqlCmd.CreateParameter("@ssSessionId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSessionId", DbType.Int32, ssENStudentLog.ssSessionId);
					}
					if ((ssENStudentLog.ssCommunicationId==0)) {
						insertSqlCmd.CreateParameter("@ssCommunicationId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCommunicationId", DbType.Int32, ssENStudentLog.ssCommunicationId);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentLog", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentLog
		/// </summary>

		public static void CreateOrUpdateStudentLog(HeContext heContext, BitArray usedFields, RCStudentLogRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentLogEntity.eSpaceId;
				ENStudentLogEntityRecord ssENStudentLog = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(44, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentLogEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATETIME] = @ssDateTime"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EVENTBY] = @ssEventBy"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERDESCRIPTION] = @ssUserDescription"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LOGRAGID] = @ssLogRAGId"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTLOGTYPE] = @ssStudentLogType"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RAGCATEGORYID] = @ssRAGCategoryId"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTRAG] = @ssStudentRAG"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKPUNCTUALITY] = @ssLastWeekPunctuality"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLPUNCTUALITY] = @ssOverallPunctuality"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKATTENDANCE] = @ssLastWeekAttendance"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLATTENDANCE] = @ssOverallAttendance"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CAUSEOFCONCERNRAG] = @ssCauseOfConcernRAG"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CAUSEOFCONCERNNUMBER] = @ssCauseOfConcernNumber"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDIDLIST] = @ssSafeguardIdList"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTIDLIST] = @ssSupportIdList"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REWARDSGOLDNUMBER] = @ssRewardsGoldNumber"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REWARDSGREENNUMBER] = @ssRewardsGreenNumber"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[VOCPERIODRAG] = @ssVocPeriodRAG"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[VOCOVERALLRAG] = @ssVocOverallRAG"): parameters);
					parameters = (usedFields[22] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[VOCCOMPLETEDUNITS] = @ssVocCompletedUnits"): parameters);
					parameters = (usedFields[23] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[VOCREGISTEREDUNITS] = @ssVocRegisteredUnits"): parameters);
					parameters = (usedFields[24] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MATHPERIODRAG] = @ssMathPeriodRAG"): parameters);
					parameters = (usedFields[25] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MATHOVERALLRAG] = @ssMathOverallRAG"): parameters);
					parameters = (usedFields[26] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MATHCOMPLETEDUNITS] = @ssMathCompletedUnits"): parameters);
					parameters = (usedFields[27] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MATHREGISTEREDUNITS] = @ssMathRegisteredUnits"): parameters);
					parameters = (usedFields[28] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENGPERIODRAG] = @ssEngPeriodRAG"): parameters);
					parameters = (usedFields[29] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENGOVERALLRAG] = @ssEngOverallRAG"): parameters);
					parameters = (usedFields[30] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENGCOMPLETEDUNITS] = @ssEngCompletedUnits"): parameters);
					parameters = (usedFields[31] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENGREGISTEREDUNITS] = @ssEngRegisteredUnits"): parameters);
					parameters = (usedFields[32] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWPERIODRAG] = @ssMLWPeriodRAG"): parameters);
					parameters = (usedFields[33] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWOVERALLRAG] = @ssMLWOverallRAG"): parameters);
					parameters = (usedFields[34] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWCOMPLETEDUNITS] = @ssMLWCompletedUnits"): parameters);
					parameters = (usedFields[35] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWREGISTEREDUNITS] = @ssMLWRegisteredUnits"): parameters);
					parameters = (usedFields[36] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REWARDTYPE] = @ssRewardType"): parameters);
					parameters = (usedFields[37] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTIONTYPE] = @ssDescriptionType"): parameters);
					parameters = (usedFields[38] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DISCIPLINARYTYPENUMBER] = @ssDisciplinaryTypeNumber"): parameters);
					parameters = (usedFields[39] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DISCIPLINARYTYPE] = @ssDisciplinaryType"): parameters);
					parameters = (usedFields[40] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWCOMPETENCIEID] = @ssMLWCompetencieId"): parameters);
					parameters = (usedFields[41] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWCOMPETENCIECURRENTLEVEL] = @ssMLWCompetencieCurrentLevel"): parameters);
					parameters = (usedFields[42] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SESSIONID] = @ssSessionId"): parameters);
					parameters = (usedFields[43] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMMUNICATIONID] = @ssCommunicationId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentLogssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentLog.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentLog.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDateTime", DbType.DateTime, ssENStudentLog.ssDateTime);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENStudentLog.ssEventBy==0)) {
							sqlCmd.CreateParameter("@ssEventBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssEventBy", DbType.Int32, ssENStudentLog.ssEventBy);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentLog.ssDescription);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssUserDescription", DbType.String, ssENStudentLog.ssUserDescription);
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENStudentLog.ssLogRAGId== "")) {
							sqlCmd.CreateParameter("@ssLogRAGId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLogRAGId", DbType.String, ssENStudentLog.ssLogRAGId);
						}
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENStudentLog.ssStudentLogType== "")) {
							sqlCmd.CreateParameter("@ssStudentLogType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentLogType", DbType.String, ssENStudentLog.ssStudentLogType);
						}
						counter++;
					}
					if (usedFields[8]) {
						if ((ssENStudentLog.ssRAGCategoryId==0)) {
							sqlCmd.CreateParameter("@ssRAGCategoryId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRAGCategoryId", DbType.Int32, ssENStudentLog.ssRAGCategoryId);
						}
						counter++;
					}
					if (usedFields[9]) {
						if ((ssENStudentLog.ssStudentRAG== "")) {
							sqlCmd.CreateParameter("@ssStudentRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentRAG", DbType.String, ssENStudentLog.ssStudentRAG);
						}
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssLastWeekPunctuality", DbType.Int32, ssENStudentLog.ssLastWeekPunctuality);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssOverallPunctuality", DbType.Int32, ssENStudentLog.ssOverallPunctuality);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssLastWeekAttendance", DbType.Int32, ssENStudentLog.ssLastWeekAttendance);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssOverallAttendance", DbType.Int32, ssENStudentLog.ssOverallAttendance);
						counter++;
					}
					if (usedFields[14]) {
						if ((ssENStudentLog.ssCauseOfConcernRAG== "")) {
							sqlCmd.CreateParameter("@ssCauseOfConcernRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCauseOfConcernRAG", DbType.String, ssENStudentLog.ssCauseOfConcernRAG);
						}
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssCauseOfConcernNumber", DbType.Int32, ssENStudentLog.ssCauseOfConcernNumber);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssSafeguardIdList", DbType.String, ssENStudentLog.ssSafeguardIdList);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssSupportIdList", DbType.String, ssENStudentLog.ssSupportIdList);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssRewardsGoldNumber", DbType.Int32, ssENStudentLog.ssRewardsGoldNumber);
						counter++;
					}
					if (usedFields[19]) {
						sqlCmd.CreateParameter("@ssRewardsGreenNumber", DbType.Int32, ssENStudentLog.ssRewardsGreenNumber);
						counter++;
					}
					if (usedFields[20]) {
						if ((ssENStudentLog.ssVocPeriodRAG== "")) {
							sqlCmd.CreateParameter("@ssVocPeriodRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssVocPeriodRAG", DbType.String, ssENStudentLog.ssVocPeriodRAG);
						}
						counter++;
					}
					if (usedFields[21]) {
						if ((ssENStudentLog.ssVocOverallRAG== "")) {
							sqlCmd.CreateParameter("@ssVocOverallRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssVocOverallRAG", DbType.String, ssENStudentLog.ssVocOverallRAG);
						}
						counter++;
					}
					if (usedFields[22]) {
						sqlCmd.CreateParameter("@ssVocCompletedUnits", DbType.Int32, ssENStudentLog.ssVocCompletedUnits);
						counter++;
					}
					if (usedFields[23]) {
						sqlCmd.CreateParameter("@ssVocRegisteredUnits", DbType.Int32, ssENStudentLog.ssVocRegisteredUnits);
						counter++;
					}
					if (usedFields[24]) {
						if ((ssENStudentLog.ssMathPeriodRAG== "")) {
							sqlCmd.CreateParameter("@ssMathPeriodRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMathPeriodRAG", DbType.String, ssENStudentLog.ssMathPeriodRAG);
						}
						counter++;
					}
					if (usedFields[25]) {
						if ((ssENStudentLog.ssMathOverallRAG== "")) {
							sqlCmd.CreateParameter("@ssMathOverallRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMathOverallRAG", DbType.String, ssENStudentLog.ssMathOverallRAG);
						}
						counter++;
					}
					if (usedFields[26]) {
						sqlCmd.CreateParameter("@ssMathCompletedUnits", DbType.Int32, ssENStudentLog.ssMathCompletedUnits);
						counter++;
					}
					if (usedFields[27]) {
						sqlCmd.CreateParameter("@ssMathRegisteredUnits", DbType.Int32, ssENStudentLog.ssMathRegisteredUnits);
						counter++;
					}
					if (usedFields[28]) {
						if ((ssENStudentLog.ssEngPeriodRAG== "")) {
							sqlCmd.CreateParameter("@ssEngPeriodRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssEngPeriodRAG", DbType.String, ssENStudentLog.ssEngPeriodRAG);
						}
						counter++;
					}
					if (usedFields[29]) {
						if ((ssENStudentLog.ssEngOverallRAG== "")) {
							sqlCmd.CreateParameter("@ssEngOverallRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssEngOverallRAG", DbType.String, ssENStudentLog.ssEngOverallRAG);
						}
						counter++;
					}
					if (usedFields[30]) {
						sqlCmd.CreateParameter("@ssEngCompletedUnits", DbType.Int32, ssENStudentLog.ssEngCompletedUnits);
						counter++;
					}
					if (usedFields[31]) {
						sqlCmd.CreateParameter("@ssEngRegisteredUnits", DbType.Int32, ssENStudentLog.ssEngRegisteredUnits);
						counter++;
					}
					if (usedFields[32]) {
						if ((ssENStudentLog.ssMLWPeriodRAG== "")) {
							sqlCmd.CreateParameter("@ssMLWPeriodRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMLWPeriodRAG", DbType.String, ssENStudentLog.ssMLWPeriodRAG);
						}
						counter++;
					}
					if (usedFields[33]) {
						if ((ssENStudentLog.ssMLWOverallRAG== "")) {
							sqlCmd.CreateParameter("@ssMLWOverallRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMLWOverallRAG", DbType.String, ssENStudentLog.ssMLWOverallRAG);
						}
						counter++;
					}
					if (usedFields[34]) {
						sqlCmd.CreateParameter("@ssMLWCompletedUnits", DbType.Int32, ssENStudentLog.ssMLWCompletedUnits);
						counter++;
					}
					if (usedFields[35]) {
						sqlCmd.CreateParameter("@ssMLWRegisteredUnits", DbType.Int32, ssENStudentLog.ssMLWRegisteredUnits);
						counter++;
					}
					if (usedFields[36]) {
						sqlCmd.CreateParameter("@ssRewardType", DbType.Boolean, ssENStudentLog.ssRewardType);
						counter++;
					}
					if (usedFields[37]) {
						sqlCmd.CreateParameter("@ssDescriptionType", DbType.String, ssENStudentLog.ssDescriptionType);
						counter++;
					}
					if (usedFields[38]) {
						sqlCmd.CreateParameter("@ssDisciplinaryTypeNumber", DbType.Int32, ssENStudentLog.ssDisciplinaryTypeNumber);
						counter++;
					}
					if (usedFields[39]) {
						if ((ssENStudentLog.ssDisciplinaryType== "")) {
							sqlCmd.CreateParameter("@ssDisciplinaryType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDisciplinaryType", DbType.String, ssENStudentLog.ssDisciplinaryType);
						}
						counter++;
					}
					if (usedFields[40]) {
						if ((ssENStudentLog.ssMLWCompetencieId== "")) {
							sqlCmd.CreateParameter("@ssMLWCompetencieId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMLWCompetencieId", DbType.String, ssENStudentLog.ssMLWCompetencieId);
						}
						counter++;
					}
					if (usedFields[41]) {
						sqlCmd.CreateParameter("@ssMLWCompetencieCurrentLevel", DbType.Int32, ssENStudentLog.ssMLWCompetencieCurrentLevel);
						counter++;
					}
					if (usedFields[42]) {
						if ((ssENStudentLog.ssSessionId==0)) {
							sqlCmd.CreateParameter("@ssSessionId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSessionId", DbType.Int32, ssENStudentLog.ssSessionId);
						}
						counter++;
					}
					if (usedFields[43]) {
						if ((ssENStudentLog.ssCommunicationId==0)) {
							sqlCmd.CreateParameter("@ssCommunicationId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCommunicationId", DbType.Int32, ssENStudentLog.ssCommunicationId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[REWARDTYPE] = [REWARDTYPE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentLogssId", DbType.Int32, ssENStudentLog.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentLog (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentLogEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [DATETIME]" +
						 ", [EVENTBY]" +
						 ", [DESCRIPTION]" +
						 ", [USERDESCRIPTION]" +
						 ", [LOGRAGID]" +
						 ", [STUDENTLOGTYPE]" +
						 ", [RAGCATEGORYID]" +
						 ", [STUDENTRAG]" +
						 ", [LASTWEEKPUNCTUALITY]" +
						 ", [OVERALLPUNCTUALITY]" +
						 ", [LASTWEEKATTENDANCE]" +
						 ", [OVERALLATTENDANCE]" +
						 ", [CAUSEOFCONCERNRAG]" +
						 ", [CAUSEOFCONCERNNUMBER]" +
						 ", [SAFEGUARDIDLIST]" +
						 ", [SUPPORTIDLIST]" +
						 ", [REWARDSGOLDNUMBER]" +
						 ", [REWARDSGREENNUMBER]" +
						 ", [VOCPERIODRAG]" +
						 ", [VOCOVERALLRAG]" +
						 ", [VOCCOMPLETEDUNITS]" +
						 ", [VOCREGISTEREDUNITS]" +
						 ", [MATHPERIODRAG]" +
						 ", [MATHOVERALLRAG]" +
						 ", [MATHCOMPLETEDUNITS]" +
						 ", [MATHREGISTEREDUNITS]" +
						 ", [ENGPERIODRAG]" +
						 ", [ENGOVERALLRAG]" +
						 ", [ENGCOMPLETEDUNITS]" +
						 ", [ENGREGISTEREDUNITS]" +
						 ", [MLWPERIODRAG]" +
						 ", [MLWOVERALLRAG]" +
						 ", [MLWCOMPLETEDUNITS]" +
						 ", [MLWREGISTEREDUNITS]" +
						 ", [REWARDTYPE]" +
						 ", [DESCRIPTIONTYPE]" +
						 ", [DISCIPLINARYTYPENUMBER]" +
						 ", [DISCIPLINARYTYPE]" +
						 ", [MLWCOMPETENCIEID]" +
						 ", [MLWCOMPETENCIECURRENTLEVEL]" +
						 ", [SESSIONID]" +
						 ", [COMMUNICATIONID]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssDateTime" +
						 ", @ssEventBy" +
						 ", @ssDescription" +
						 ", @ssUserDescription" +
						 ", @ssLogRAGId" +
						 ", @ssStudentLogType" +
						 ", @ssRAGCategoryId" +
						 ", @ssStudentRAG" +
						 ", @ssLastWeekPunctuality" +
						 ", @ssOverallPunctuality" +
						 ", @ssLastWeekAttendance" +
						 ", @ssOverallAttendance" +
						 ", @ssCauseOfConcernRAG" +
						 ", @ssCauseOfConcernNumber" +
						 ", @ssSafeguardIdList" +
						 ", @ssSupportIdList" +
						 ", @ssRewardsGoldNumber" +
						 ", @ssRewardsGreenNumber" +
						 ", @ssVocPeriodRAG" +
						 ", @ssVocOverallRAG" +
						 ", @ssVocCompletedUnits" +
						 ", @ssVocRegisteredUnits" +
						 ", @ssMathPeriodRAG" +
						 ", @ssMathOverallRAG" +
						 ", @ssMathCompletedUnits" +
						 ", @ssMathRegisteredUnits" +
						 ", @ssEngPeriodRAG" +
						 ", @ssEngOverallRAG" +
						 ", @ssEngCompletedUnits" +
						 ", @ssEngRegisteredUnits" +
						 ", @ssMLWPeriodRAG" +
						 ", @ssMLWOverallRAG" +
						 ", @ssMLWCompletedUnits" +
						 ", @ssMLWRegisteredUnits" +
						 ", @ssRewardType" +
						 ", @ssDescriptionType" +
						 ", @ssDisciplinaryTypeNumber" +
						 ", @ssDisciplinaryType" +
						 ", @ssMLWCompetencieId" +
						 ", @ssMLWCompetencieCurrentLevel" +
						 ", @ssSessionId" +
						 ", @ssCommunicationId" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudentLog.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentLog.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssDateTime", DbType.DateTime, ssENStudentLog.ssDateTime);
						if ((ssENStudentLog.ssEventBy==0)) {
							insertSqlCmd.CreateParameter("@ssEventBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssEventBy", DbType.Int32, ssENStudentLog.ssEventBy);
						}
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentLog.ssDescription);
						insertSqlCmd.CreateParameter("@ssUserDescription", DbType.String, ssENStudentLog.ssUserDescription);
						if ((ssENStudentLog.ssLogRAGId== "")) {
							insertSqlCmd.CreateParameter("@ssLogRAGId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssLogRAGId", DbType.String, ssENStudentLog.ssLogRAGId);
						}
						if ((ssENStudentLog.ssStudentLogType== "")) {
							insertSqlCmd.CreateParameter("@ssStudentLogType", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentLogType", DbType.String, ssENStudentLog.ssStudentLogType);
						}
						if ((ssENStudentLog.ssRAGCategoryId==0)) {
							insertSqlCmd.CreateParameter("@ssRAGCategoryId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRAGCategoryId", DbType.Int32, ssENStudentLog.ssRAGCategoryId);
						}
						if ((ssENStudentLog.ssStudentRAG== "")) {
							insertSqlCmd.CreateParameter("@ssStudentRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentRAG", DbType.String, ssENStudentLog.ssStudentRAG);
						}
						insertSqlCmd.CreateParameter("@ssLastWeekPunctuality", DbType.Int32, ssENStudentLog.ssLastWeekPunctuality);
						insertSqlCmd.CreateParameter("@ssOverallPunctuality", DbType.Int32, ssENStudentLog.ssOverallPunctuality);
						insertSqlCmd.CreateParameter("@ssLastWeekAttendance", DbType.Int32, ssENStudentLog.ssLastWeekAttendance);
						insertSqlCmd.CreateParameter("@ssOverallAttendance", DbType.Int32, ssENStudentLog.ssOverallAttendance);
						if ((ssENStudentLog.ssCauseOfConcernRAG== "")) {
							insertSqlCmd.CreateParameter("@ssCauseOfConcernRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCauseOfConcernRAG", DbType.String, ssENStudentLog.ssCauseOfConcernRAG);
						}
						insertSqlCmd.CreateParameter("@ssCauseOfConcernNumber", DbType.Int32, ssENStudentLog.ssCauseOfConcernNumber);
						insertSqlCmd.CreateParameter("@ssSafeguardIdList", DbType.String, ssENStudentLog.ssSafeguardIdList);
						insertSqlCmd.CreateParameter("@ssSupportIdList", DbType.String, ssENStudentLog.ssSupportIdList);
						insertSqlCmd.CreateParameter("@ssRewardsGoldNumber", DbType.Int32, ssENStudentLog.ssRewardsGoldNumber);
						insertSqlCmd.CreateParameter("@ssRewardsGreenNumber", DbType.Int32, ssENStudentLog.ssRewardsGreenNumber);
						if ((ssENStudentLog.ssVocPeriodRAG== "")) {
							insertSqlCmd.CreateParameter("@ssVocPeriodRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssVocPeriodRAG", DbType.String, ssENStudentLog.ssVocPeriodRAG);
						}
						if ((ssENStudentLog.ssVocOverallRAG== "")) {
							insertSqlCmd.CreateParameter("@ssVocOverallRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssVocOverallRAG", DbType.String, ssENStudentLog.ssVocOverallRAG);
						}
						insertSqlCmd.CreateParameter("@ssVocCompletedUnits", DbType.Int32, ssENStudentLog.ssVocCompletedUnits);
						insertSqlCmd.CreateParameter("@ssVocRegisteredUnits", DbType.Int32, ssENStudentLog.ssVocRegisteredUnits);
						if ((ssENStudentLog.ssMathPeriodRAG== "")) {
							insertSqlCmd.CreateParameter("@ssMathPeriodRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssMathPeriodRAG", DbType.String, ssENStudentLog.ssMathPeriodRAG);
						}
						if ((ssENStudentLog.ssMathOverallRAG== "")) {
							insertSqlCmd.CreateParameter("@ssMathOverallRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssMathOverallRAG", DbType.String, ssENStudentLog.ssMathOverallRAG);
						}
						insertSqlCmd.CreateParameter("@ssMathCompletedUnits", DbType.Int32, ssENStudentLog.ssMathCompletedUnits);
						insertSqlCmd.CreateParameter("@ssMathRegisteredUnits", DbType.Int32, ssENStudentLog.ssMathRegisteredUnits);
						if ((ssENStudentLog.ssEngPeriodRAG== "")) {
							insertSqlCmd.CreateParameter("@ssEngPeriodRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssEngPeriodRAG", DbType.String, ssENStudentLog.ssEngPeriodRAG);
						}
						if ((ssENStudentLog.ssEngOverallRAG== "")) {
							insertSqlCmd.CreateParameter("@ssEngOverallRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssEngOverallRAG", DbType.String, ssENStudentLog.ssEngOverallRAG);
						}
						insertSqlCmd.CreateParameter("@ssEngCompletedUnits", DbType.Int32, ssENStudentLog.ssEngCompletedUnits);
						insertSqlCmd.CreateParameter("@ssEngRegisteredUnits", DbType.Int32, ssENStudentLog.ssEngRegisteredUnits);
						if ((ssENStudentLog.ssMLWPeriodRAG== "")) {
							insertSqlCmd.CreateParameter("@ssMLWPeriodRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssMLWPeriodRAG", DbType.String, ssENStudentLog.ssMLWPeriodRAG);
						}
						if ((ssENStudentLog.ssMLWOverallRAG== "")) {
							insertSqlCmd.CreateParameter("@ssMLWOverallRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssMLWOverallRAG", DbType.String, ssENStudentLog.ssMLWOverallRAG);
						}
						insertSqlCmd.CreateParameter("@ssMLWCompletedUnits", DbType.Int32, ssENStudentLog.ssMLWCompletedUnits);
						insertSqlCmd.CreateParameter("@ssMLWRegisteredUnits", DbType.Int32, ssENStudentLog.ssMLWRegisteredUnits);
						insertSqlCmd.CreateParameter("@ssRewardType", DbType.Boolean, ssENStudentLog.ssRewardType);
						insertSqlCmd.CreateParameter("@ssDescriptionType", DbType.String, ssENStudentLog.ssDescriptionType);
						insertSqlCmd.CreateParameter("@ssDisciplinaryTypeNumber", DbType.Int32, ssENStudentLog.ssDisciplinaryTypeNumber);
						if ((ssENStudentLog.ssDisciplinaryType== "")) {
							insertSqlCmd.CreateParameter("@ssDisciplinaryType", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDisciplinaryType", DbType.String, ssENStudentLog.ssDisciplinaryType);
						}
						if ((ssENStudentLog.ssMLWCompetencieId== "")) {
							insertSqlCmd.CreateParameter("@ssMLWCompetencieId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssMLWCompetencieId", DbType.String, ssENStudentLog.ssMLWCompetencieId);
						}
						insertSqlCmd.CreateParameter("@ssMLWCompetencieCurrentLevel", DbType.Int32, ssENStudentLog.ssMLWCompetencieCurrentLevel);
						if ((ssENStudentLog.ssSessionId==0)) {
							insertSqlCmd.CreateParameter("@ssSessionId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSessionId", DbType.Int32, ssENStudentLog.ssSessionId);
						}
						if ((ssENStudentLog.ssCommunicationId==0)) {
							insertSqlCmd.CreateParameter("@ssCommunicationId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCommunicationId", DbType.Int32, ssENStudentLog.ssCommunicationId);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentLog", true), typeof(int));
					} else {
						outParamId = ssENStudentLog.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentLog
		/// </summary>

		public static void DeleteStudentLog(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentLogEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentLogEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentLog", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentLog
		/// </summary>

		public static void GetStudentLog(HeContext heContext, int inParamId, out RCStudentLogRecord outParamRecord) {
			outParamRecord = new RCStudentLogRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentLogEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [DATETIME]" +
					 ", [EVENTBY]" +
					 ", [DESCRIPTION]" +
					 ", [USERDESCRIPTION]" +
					 ", [LOGRAGID]" +
					 ", [STUDENTLOGTYPE]" +
					 ", [RAGCATEGORYID]" +
					 ", [STUDENTRAG]" +
					 ", [LASTWEEKPUNCTUALITY]" +
					 ", [OVERALLPUNCTUALITY]" +
					 ", [LASTWEEKATTENDANCE]" +
					 ", [OVERALLATTENDANCE]" +
					 ", [CAUSEOFCONCERNRAG]" +
					 ", [CAUSEOFCONCERNNUMBER]" +
					 ", [SAFEGUARDIDLIST]" +
					 ", [SUPPORTIDLIST]" +
					 ", [REWARDSGOLDNUMBER]" +
					 ", [REWARDSGREENNUMBER]" +
					 ", [VOCPERIODRAG]" +
					 ", [VOCOVERALLRAG]" +
					 ", [VOCCOMPLETEDUNITS]" +
					 ", [VOCREGISTEREDUNITS]" +
					 ", [MATHPERIODRAG]" +
					 ", [MATHOVERALLRAG]" +
					 ", [MATHCOMPLETEDUNITS]" +
					 ", [MATHREGISTEREDUNITS]" +
					 ", [ENGPERIODRAG]" +
					 ", [ENGOVERALLRAG]" +
					 ", [ENGCOMPLETEDUNITS]" +
					 ", [ENGREGISTEREDUNITS]" +
					 ", [MLWPERIODRAG]" +
					 ", [MLWOVERALLRAG]" +
					 ", [MLWCOMPLETEDUNITS]" +
					 ", [MLWREGISTEREDUNITS]" +
					 ", [REWARDTYPE]" +
					 ", [DESCRIPTIONTYPE]" +
					 ", [DISCIPLINARYTYPENUMBER]" +
					 ", [DISCIPLINARYTYPE]" +
					 ", [MLWCOMPETENCIEID]" +
					 ", [MLWCOMPETENCIECURRENTLEVEL]" +
					 ", [SESSIONID]" +
					 ", [COMMUNICATIONID]" +
					 " FROM " + ENStudentLogEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentLog", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(44, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentLogEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentLogForUpdate
		/// </summary>

		public static void GetStudentLogForUpdate(HeContext heContext, int inParamId, out RCStudentLogRecord outParamRecord) {
			outParamRecord = new RCStudentLogRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentLogEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [DATETIME]" +
					 ", [EVENTBY]" +
					 ", [DESCRIPTION]" +
					 ", [USERDESCRIPTION]" +
					 ", [LOGRAGID]" +
					 ", [STUDENTLOGTYPE]" +
					 ", [RAGCATEGORYID]" +
					 ", [STUDENTRAG]" +
					 ", [LASTWEEKPUNCTUALITY]" +
					 ", [OVERALLPUNCTUALITY]" +
					 ", [LASTWEEKATTENDANCE]" +
					 ", [OVERALLATTENDANCE]" +
					 ", [CAUSEOFCONCERNRAG]" +
					 ", [CAUSEOFCONCERNNUMBER]" +
					 ", [SAFEGUARDIDLIST]" +
					 ", [SUPPORTIDLIST]" +
					 ", [REWARDSGOLDNUMBER]" +
					 ", [REWARDSGREENNUMBER]" +
					 ", [VOCPERIODRAG]" +
					 ", [VOCOVERALLRAG]" +
					 ", [VOCCOMPLETEDUNITS]" +
					 ", [VOCREGISTEREDUNITS]" +
					 ", [MATHPERIODRAG]" +
					 ", [MATHOVERALLRAG]" +
					 ", [MATHCOMPLETEDUNITS]" +
					 ", [MATHREGISTEREDUNITS]" +
					 ", [ENGPERIODRAG]" +
					 ", [ENGOVERALLRAG]" +
					 ", [ENGCOMPLETEDUNITS]" +
					 ", [ENGREGISTEREDUNITS]" +
					 ", [MLWPERIODRAG]" +
					 ", [MLWOVERALLRAG]" +
					 ", [MLWCOMPLETEDUNITS]" +
					 ", [MLWREGISTEREDUNITS]" +
					 ", [REWARDTYPE]" +
					 ", [DESCRIPTIONTYPE]" +
					 ", [DISCIPLINARYTYPENUMBER]" +
					 ", [DISCIPLINARYTYPE]" +
					 ", [MLWCOMPETENCIEID]" +
					 ", [MLWCOMPETENCIECURRENTLEVEL]" +
					 ", [SESSIONID]" +
					 ", [COMMUNICATIONID]" +
					 "FROM " + ENStudentLogEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentLogForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(44, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentLogEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentLog
		/// </summary>

		public static void UpdateStudentLog(HeContext heContext, BitArray usedFields, RCStudentLogRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentLogEntity.eSpaceId;
				ENStudentLogEntityRecord ssENStudentLog = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(44, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentLogEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATETIME] = @ssDateTime"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EVENTBY] = @ssEventBy"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERDESCRIPTION] = @ssUserDescription"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LOGRAGID] = @ssLogRAGId"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTLOGTYPE] = @ssStudentLogType"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RAGCATEGORYID] = @ssRAGCategoryId"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTRAG] = @ssStudentRAG"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKPUNCTUALITY] = @ssLastWeekPunctuality"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLPUNCTUALITY] = @ssOverallPunctuality"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKATTENDANCE] = @ssLastWeekAttendance"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLATTENDANCE] = @ssOverallAttendance"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CAUSEOFCONCERNRAG] = @ssCauseOfConcernRAG"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CAUSEOFCONCERNNUMBER] = @ssCauseOfConcernNumber"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SAFEGUARDIDLIST] = @ssSafeguardIdList"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SUPPORTIDLIST] = @ssSupportIdList"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REWARDSGOLDNUMBER] = @ssRewardsGoldNumber"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REWARDSGREENNUMBER] = @ssRewardsGreenNumber"): parameters);
					parameters = (usedFields[20] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[VOCPERIODRAG] = @ssVocPeriodRAG"): parameters);
					parameters = (usedFields[21] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[VOCOVERALLRAG] = @ssVocOverallRAG"): parameters);
					parameters = (usedFields[22] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[VOCCOMPLETEDUNITS] = @ssVocCompletedUnits"): parameters);
					parameters = (usedFields[23] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[VOCREGISTEREDUNITS] = @ssVocRegisteredUnits"): parameters);
					parameters = (usedFields[24] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MATHPERIODRAG] = @ssMathPeriodRAG"): parameters);
					parameters = (usedFields[25] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MATHOVERALLRAG] = @ssMathOverallRAG"): parameters);
					parameters = (usedFields[26] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MATHCOMPLETEDUNITS] = @ssMathCompletedUnits"): parameters);
					parameters = (usedFields[27] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MATHREGISTEREDUNITS] = @ssMathRegisteredUnits"): parameters);
					parameters = (usedFields[28] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENGPERIODRAG] = @ssEngPeriodRAG"): parameters);
					parameters = (usedFields[29] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENGOVERALLRAG] = @ssEngOverallRAG"): parameters);
					parameters = (usedFields[30] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENGCOMPLETEDUNITS] = @ssEngCompletedUnits"): parameters);
					parameters = (usedFields[31] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENGREGISTEREDUNITS] = @ssEngRegisteredUnits"): parameters);
					parameters = (usedFields[32] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWPERIODRAG] = @ssMLWPeriodRAG"): parameters);
					parameters = (usedFields[33] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWOVERALLRAG] = @ssMLWOverallRAG"): parameters);
					parameters = (usedFields[34] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWCOMPLETEDUNITS] = @ssMLWCompletedUnits"): parameters);
					parameters = (usedFields[35] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWREGISTEREDUNITS] = @ssMLWRegisteredUnits"): parameters);
					parameters = (usedFields[36] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[REWARDTYPE] = @ssRewardType"): parameters);
					parameters = (usedFields[37] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTIONTYPE] = @ssDescriptionType"): parameters);
					parameters = (usedFields[38] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DISCIPLINARYTYPENUMBER] = @ssDisciplinaryTypeNumber"): parameters);
					parameters = (usedFields[39] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DISCIPLINARYTYPE] = @ssDisciplinaryType"): parameters);
					parameters = (usedFields[40] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWCOMPETENCIEID] = @ssMLWCompetencieId"): parameters);
					parameters = (usedFields[41] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWCOMPETENCIECURRENTLEVEL] = @ssMLWCompetencieCurrentLevel"): parameters);
					parameters = (usedFields[42] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SESSIONID] = @ssSessionId"): parameters);
					parameters = (usedFields[43] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMMUNICATIONID] = @ssCommunicationId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentLogssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentLog.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentLog.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDateTime", DbType.DateTime, ssENStudentLog.ssDateTime);
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENStudentLog.ssEventBy==0)) {
							sqlCmd.CreateParameter("@ssEventBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssEventBy", DbType.Int32, ssENStudentLog.ssEventBy);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentLog.ssDescription);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssUserDescription", DbType.String, ssENStudentLog.ssUserDescription);
						counter++;
					}
					if (usedFields[6]) {
						if ((ssENStudentLog.ssLogRAGId== "")) {
							sqlCmd.CreateParameter("@ssLogRAGId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssLogRAGId", DbType.String, ssENStudentLog.ssLogRAGId);
						}
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENStudentLog.ssStudentLogType== "")) {
							sqlCmd.CreateParameter("@ssStudentLogType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentLogType", DbType.String, ssENStudentLog.ssStudentLogType);
						}
						counter++;
					}
					if (usedFields[8]) {
						if ((ssENStudentLog.ssRAGCategoryId==0)) {
							sqlCmd.CreateParameter("@ssRAGCategoryId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRAGCategoryId", DbType.Int32, ssENStudentLog.ssRAGCategoryId);
						}
						counter++;
					}
					if (usedFields[9]) {
						if ((ssENStudentLog.ssStudentRAG== "")) {
							sqlCmd.CreateParameter("@ssStudentRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentRAG", DbType.String, ssENStudentLog.ssStudentRAG);
						}
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssLastWeekPunctuality", DbType.Int32, ssENStudentLog.ssLastWeekPunctuality);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssOverallPunctuality", DbType.Int32, ssENStudentLog.ssOverallPunctuality);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssLastWeekAttendance", DbType.Int32, ssENStudentLog.ssLastWeekAttendance);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssOverallAttendance", DbType.Int32, ssENStudentLog.ssOverallAttendance);
						counter++;
					}
					if (usedFields[14]) {
						if ((ssENStudentLog.ssCauseOfConcernRAG== "")) {
							sqlCmd.CreateParameter("@ssCauseOfConcernRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCauseOfConcernRAG", DbType.String, ssENStudentLog.ssCauseOfConcernRAG);
						}
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssCauseOfConcernNumber", DbType.Int32, ssENStudentLog.ssCauseOfConcernNumber);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssSafeguardIdList", DbType.String, ssENStudentLog.ssSafeguardIdList);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssSupportIdList", DbType.String, ssENStudentLog.ssSupportIdList);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssRewardsGoldNumber", DbType.Int32, ssENStudentLog.ssRewardsGoldNumber);
						counter++;
					}
					if (usedFields[19]) {
						sqlCmd.CreateParameter("@ssRewardsGreenNumber", DbType.Int32, ssENStudentLog.ssRewardsGreenNumber);
						counter++;
					}
					if (usedFields[20]) {
						if ((ssENStudentLog.ssVocPeriodRAG== "")) {
							sqlCmd.CreateParameter("@ssVocPeriodRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssVocPeriodRAG", DbType.String, ssENStudentLog.ssVocPeriodRAG);
						}
						counter++;
					}
					if (usedFields[21]) {
						if ((ssENStudentLog.ssVocOverallRAG== "")) {
							sqlCmd.CreateParameter("@ssVocOverallRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssVocOverallRAG", DbType.String, ssENStudentLog.ssVocOverallRAG);
						}
						counter++;
					}
					if (usedFields[22]) {
						sqlCmd.CreateParameter("@ssVocCompletedUnits", DbType.Int32, ssENStudentLog.ssVocCompletedUnits);
						counter++;
					}
					if (usedFields[23]) {
						sqlCmd.CreateParameter("@ssVocRegisteredUnits", DbType.Int32, ssENStudentLog.ssVocRegisteredUnits);
						counter++;
					}
					if (usedFields[24]) {
						if ((ssENStudentLog.ssMathPeriodRAG== "")) {
							sqlCmd.CreateParameter("@ssMathPeriodRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMathPeriodRAG", DbType.String, ssENStudentLog.ssMathPeriodRAG);
						}
						counter++;
					}
					if (usedFields[25]) {
						if ((ssENStudentLog.ssMathOverallRAG== "")) {
							sqlCmd.CreateParameter("@ssMathOverallRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMathOverallRAG", DbType.String, ssENStudentLog.ssMathOverallRAG);
						}
						counter++;
					}
					if (usedFields[26]) {
						sqlCmd.CreateParameter("@ssMathCompletedUnits", DbType.Int32, ssENStudentLog.ssMathCompletedUnits);
						counter++;
					}
					if (usedFields[27]) {
						sqlCmd.CreateParameter("@ssMathRegisteredUnits", DbType.Int32, ssENStudentLog.ssMathRegisteredUnits);
						counter++;
					}
					if (usedFields[28]) {
						if ((ssENStudentLog.ssEngPeriodRAG== "")) {
							sqlCmd.CreateParameter("@ssEngPeriodRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssEngPeriodRAG", DbType.String, ssENStudentLog.ssEngPeriodRAG);
						}
						counter++;
					}
					if (usedFields[29]) {
						if ((ssENStudentLog.ssEngOverallRAG== "")) {
							sqlCmd.CreateParameter("@ssEngOverallRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssEngOverallRAG", DbType.String, ssENStudentLog.ssEngOverallRAG);
						}
						counter++;
					}
					if (usedFields[30]) {
						sqlCmd.CreateParameter("@ssEngCompletedUnits", DbType.Int32, ssENStudentLog.ssEngCompletedUnits);
						counter++;
					}
					if (usedFields[31]) {
						sqlCmd.CreateParameter("@ssEngRegisteredUnits", DbType.Int32, ssENStudentLog.ssEngRegisteredUnits);
						counter++;
					}
					if (usedFields[32]) {
						if ((ssENStudentLog.ssMLWPeriodRAG== "")) {
							sqlCmd.CreateParameter("@ssMLWPeriodRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMLWPeriodRAG", DbType.String, ssENStudentLog.ssMLWPeriodRAG);
						}
						counter++;
					}
					if (usedFields[33]) {
						if ((ssENStudentLog.ssMLWOverallRAG== "")) {
							sqlCmd.CreateParameter("@ssMLWOverallRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMLWOverallRAG", DbType.String, ssENStudentLog.ssMLWOverallRAG);
						}
						counter++;
					}
					if (usedFields[34]) {
						sqlCmd.CreateParameter("@ssMLWCompletedUnits", DbType.Int32, ssENStudentLog.ssMLWCompletedUnits);
						counter++;
					}
					if (usedFields[35]) {
						sqlCmd.CreateParameter("@ssMLWRegisteredUnits", DbType.Int32, ssENStudentLog.ssMLWRegisteredUnits);
						counter++;
					}
					if (usedFields[36]) {
						sqlCmd.CreateParameter("@ssRewardType", DbType.Boolean, ssENStudentLog.ssRewardType);
						counter++;
					}
					if (usedFields[37]) {
						sqlCmd.CreateParameter("@ssDescriptionType", DbType.String, ssENStudentLog.ssDescriptionType);
						counter++;
					}
					if (usedFields[38]) {
						sqlCmd.CreateParameter("@ssDisciplinaryTypeNumber", DbType.Int32, ssENStudentLog.ssDisciplinaryTypeNumber);
						counter++;
					}
					if (usedFields[39]) {
						if ((ssENStudentLog.ssDisciplinaryType== "")) {
							sqlCmd.CreateParameter("@ssDisciplinaryType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDisciplinaryType", DbType.String, ssENStudentLog.ssDisciplinaryType);
						}
						counter++;
					}
					if (usedFields[40]) {
						if ((ssENStudentLog.ssMLWCompetencieId== "")) {
							sqlCmd.CreateParameter("@ssMLWCompetencieId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMLWCompetencieId", DbType.String, ssENStudentLog.ssMLWCompetencieId);
						}
						counter++;
					}
					if (usedFields[41]) {
						sqlCmd.CreateParameter("@ssMLWCompetencieCurrentLevel", DbType.Int32, ssENStudentLog.ssMLWCompetencieCurrentLevel);
						counter++;
					}
					if (usedFields[42]) {
						if ((ssENStudentLog.ssSessionId==0)) {
							sqlCmd.CreateParameter("@ssSessionId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSessionId", DbType.Int32, ssENStudentLog.ssSessionId);
						}
						counter++;
					}
					if (usedFields[43]) {
						if ((ssENStudentLog.ssCommunicationId==0)) {
							sqlCmd.CreateParameter("@ssCommunicationId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCommunicationId", DbType.Int32, ssENStudentLog.ssCommunicationId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[REWARDTYPE] = [REWARDTYPE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentLogssId", DbType.Int32, ssENStudentLog.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentLog", true) <= 0)
					throw new DataBaseException(ENStudentLogEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentLog.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentLog")]
	public class WORCStudentLogRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("DateTime")]
		public DateTime varWSDateTime;

		[System.Xml.Serialization.XmlElement("EventBy")]
		public int varWSEventBy;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		[System.Xml.Serialization.XmlElement("UserDescription")]
		public string varWSUserDescription;

		[System.Xml.Serialization.XmlElement("LogRAGId")]
		public string varWSLogRAGId;

		[System.Xml.Serialization.XmlElement("StudentLogType")]
		public string varWSStudentLogType;

		[System.Xml.Serialization.XmlElement("RAGCategoryId")]
		public int varWSRAGCategoryId;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public string varWSStudentRAG;

		[System.Xml.Serialization.XmlElement("LastWeekPunctuality")]
		public int varWSLastWeekPunctuality;

		[System.Xml.Serialization.XmlElement("OverallPunctuality")]
		public int varWSOverallPunctuality;

		[System.Xml.Serialization.XmlElement("LastWeekAttendance")]
		public int varWSLastWeekAttendance;

		[System.Xml.Serialization.XmlElement("OverallAttendance")]
		public int varWSOverallAttendance;

		[System.Xml.Serialization.XmlElement("CauseOfConcernRAG")]
		public string varWSCauseOfConcernRAG;

		[System.Xml.Serialization.XmlElement("CauseOfConcernNumber")]
		public int varWSCauseOfConcernNumber;

		[System.Xml.Serialization.XmlElement("SafeguardIdList")]
		public string varWSSafeguardIdList;

		[System.Xml.Serialization.XmlElement("SupportIdList")]
		public string varWSSupportIdList;

		[System.Xml.Serialization.XmlElement("RewardsGoldNumber")]
		public int varWSRewardsGoldNumber;

		[System.Xml.Serialization.XmlElement("RewardsGreenNumber")]
		public int varWSRewardsGreenNumber;

		[System.Xml.Serialization.XmlElement("VocPeriodRAG")]
		public string varWSVocPeriodRAG;

		[System.Xml.Serialization.XmlElement("VocOverallRAG")]
		public string varWSVocOverallRAG;

		[System.Xml.Serialization.XmlElement("VocCompletedUnits")]
		public int varWSVocCompletedUnits;

		[System.Xml.Serialization.XmlElement("VocRegisteredUnits")]
		public int varWSVocRegisteredUnits;

		[System.Xml.Serialization.XmlElement("MathPeriodRAG")]
		public string varWSMathPeriodRAG;

		[System.Xml.Serialization.XmlElement("MathOverallRAG")]
		public string varWSMathOverallRAG;

		[System.Xml.Serialization.XmlElement("MathCompletedUnits")]
		public int varWSMathCompletedUnits;

		[System.Xml.Serialization.XmlElement("MathRegisteredUnits")]
		public int varWSMathRegisteredUnits;

		[System.Xml.Serialization.XmlElement("EngPeriodRAG")]
		public string varWSEngPeriodRAG;

		[System.Xml.Serialization.XmlElement("EngOverallRAG")]
		public string varWSEngOverallRAG;

		[System.Xml.Serialization.XmlElement("EngCompletedUnits")]
		public int varWSEngCompletedUnits;

		[System.Xml.Serialization.XmlElement("EngRegisteredUnits")]
		public int varWSEngRegisteredUnits;

		[System.Xml.Serialization.XmlElement("MLWPeriodRAG")]
		public string varWSMLWPeriodRAG;

		[System.Xml.Serialization.XmlElement("MLWOverallRAG")]
		public string varWSMLWOverallRAG;

		[System.Xml.Serialization.XmlElement("MLWCompletedUnits")]
		public int varWSMLWCompletedUnits;

		[System.Xml.Serialization.XmlElement("MLWRegisteredUnits")]
		public int varWSMLWRegisteredUnits;

		[System.Xml.Serialization.XmlElement("RewardType")]
		public bool varWSRewardType;

		[System.Xml.Serialization.XmlElement("DescriptionType")]
		public string varWSDescriptionType;

		[System.Xml.Serialization.XmlElement("DisciplinaryTypeNumber")]
		public int varWSDisciplinaryTypeNumber;

		[System.Xml.Serialization.XmlElement("DisciplinaryType")]
		public string varWSDisciplinaryType;

		[System.Xml.Serialization.XmlElement("MLWCompetencieId")]
		public string varWSMLWCompetencieId;

		[System.Xml.Serialization.XmlElement("MLWCompetencieCurrentLevel")]
		public int varWSMLWCompetencieCurrentLevel;

		[System.Xml.Serialization.XmlElement("SessionId")]
		public int varWSSessionId;

		[System.Xml.Serialization.XmlElement("CommunicationId")]
		public int varWSCommunicationId;

		public WORCStudentLogRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSDateTime = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSEventBy = (int) 0;
			varWSDescription = (string) "";
			varWSUserDescription = (string) "";
			varWSLogRAGId = (string) "";
			varWSStudentLogType = (string) "";
			varWSRAGCategoryId = (int) 0;
			varWSStudentRAG = (string) "";
			varWSLastWeekPunctuality = (int) 0;
			varWSOverallPunctuality = (int) 0;
			varWSLastWeekAttendance = (int) 0;
			varWSOverallAttendance = (int) 0;
			varWSCauseOfConcernRAG = (string) "";
			varWSCauseOfConcernNumber = (int) 0;
			varWSSafeguardIdList = (string) "";
			varWSSupportIdList = (string) "";
			varWSRewardsGoldNumber = (int) 0;
			varWSRewardsGreenNumber = (int) 0;
			varWSVocPeriodRAG = (string) "";
			varWSVocOverallRAG = (string) "";
			varWSVocCompletedUnits = (int) 0;
			varWSVocRegisteredUnits = (int) 0;
			varWSMathPeriodRAG = (string) "";
			varWSMathOverallRAG = (string) "";
			varWSMathCompletedUnits = (int) 0;
			varWSMathRegisteredUnits = (int) 0;
			varWSEngPeriodRAG = (string) "";
			varWSEngOverallRAG = (string) "";
			varWSEngCompletedUnits = (int) 0;
			varWSEngRegisteredUnits = (int) 0;
			varWSMLWPeriodRAG = (string) "";
			varWSMLWOverallRAG = (string) "";
			varWSMLWCompletedUnits = (int) 0;
			varWSMLWRegisteredUnits = (int) 0;
			varWSRewardType = (bool) false;
			varWSDescriptionType = (string) "";
			varWSDisciplinaryTypeNumber = (int) 0;
			varWSDisciplinaryType = (string) "";
			varWSMLWCompetencieId = (string) "";
			varWSMLWCompetencieCurrentLevel = (int) 0;
			varWSSessionId = (int) 0;
			varWSCommunicationId = (int) 0;
		}

		public WORCStudentLogRecord(ENStudentLogEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSDateTime = (DateTime) r.ssDateTime;
			varWSEventBy = (int) r.ssEventBy;
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
			varWSUserDescription = BaseAppUtils.RemoveControlChars(r.ssUserDescription);
			varWSLogRAGId = BaseAppUtils.RemoveControlChars(r.ssLogRAGId);
			varWSStudentLogType = BaseAppUtils.RemoveControlChars(r.ssStudentLogType);
			varWSRAGCategoryId = (int) r.ssRAGCategoryId;
			varWSStudentRAG = BaseAppUtils.RemoveControlChars(r.ssStudentRAG);
			varWSLastWeekPunctuality = (int) r.ssLastWeekPunctuality;
			varWSOverallPunctuality = (int) r.ssOverallPunctuality;
			varWSLastWeekAttendance = (int) r.ssLastWeekAttendance;
			varWSOverallAttendance = (int) r.ssOverallAttendance;
			varWSCauseOfConcernRAG = BaseAppUtils.RemoveControlChars(r.ssCauseOfConcernRAG);
			varWSCauseOfConcernNumber = (int) r.ssCauseOfConcernNumber;
			varWSSafeguardIdList = BaseAppUtils.RemoveControlChars(r.ssSafeguardIdList);
			varWSSupportIdList = BaseAppUtils.RemoveControlChars(r.ssSupportIdList);
			varWSRewardsGoldNumber = (int) r.ssRewardsGoldNumber;
			varWSRewardsGreenNumber = (int) r.ssRewardsGreenNumber;
			varWSVocPeriodRAG = BaseAppUtils.RemoveControlChars(r.ssVocPeriodRAG);
			varWSVocOverallRAG = BaseAppUtils.RemoveControlChars(r.ssVocOverallRAG);
			varWSVocCompletedUnits = (int) r.ssVocCompletedUnits;
			varWSVocRegisteredUnits = (int) r.ssVocRegisteredUnits;
			varWSMathPeriodRAG = BaseAppUtils.RemoveControlChars(r.ssMathPeriodRAG);
			varWSMathOverallRAG = BaseAppUtils.RemoveControlChars(r.ssMathOverallRAG);
			varWSMathCompletedUnits = (int) r.ssMathCompletedUnits;
			varWSMathRegisteredUnits = (int) r.ssMathRegisteredUnits;
			varWSEngPeriodRAG = BaseAppUtils.RemoveControlChars(r.ssEngPeriodRAG);
			varWSEngOverallRAG = BaseAppUtils.RemoveControlChars(r.ssEngOverallRAG);
			varWSEngCompletedUnits = (int) r.ssEngCompletedUnits;
			varWSEngRegisteredUnits = (int) r.ssEngRegisteredUnits;
			varWSMLWPeriodRAG = BaseAppUtils.RemoveControlChars(r.ssMLWPeriodRAG);
			varWSMLWOverallRAG = BaseAppUtils.RemoveControlChars(r.ssMLWOverallRAG);
			varWSMLWCompletedUnits = (int) r.ssMLWCompletedUnits;
			varWSMLWRegisteredUnits = (int) r.ssMLWRegisteredUnits;
			varWSRewardType = (bool) r.ssRewardType;
			varWSDescriptionType = BaseAppUtils.RemoveControlChars(r.ssDescriptionType);
			varWSDisciplinaryTypeNumber = (int) r.ssDisciplinaryTypeNumber;
			varWSDisciplinaryType = BaseAppUtils.RemoveControlChars(r.ssDisciplinaryType);
			varWSMLWCompetencieId = BaseAppUtils.RemoveControlChars(r.ssMLWCompetencieId);
			varWSMLWCompetencieCurrentLevel = (int) r.ssMLWCompetencieCurrentLevel;
			varWSSessionId = (int) r.ssSessionId;
			varWSCommunicationId = (int) r.ssCommunicationId;
		}

		public static RLStudentLogList ToRecordList(WORCStudentLogRecord[] array) {
			RLStudentLogList rl = new RLStudentLogList();
			if (array != null) {
				foreach(WORCStudentLogRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentLogRecord[] FromRecordList(RLStudentLogList rl) {
			WORCStudentLogRecord[] array = new WORCStudentLogRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentLogRecord {
		public static implicit operator WORCStudentLogRecord(RCStudentLogRecord r) {
			return new WORCStudentLogRecord(r.ssENStudentLog);
		}

		public static implicit operator RCStudentLogRecord(WORCStudentLogRecord w) {
			RCStudentLogRecord r = new RCStudentLogRecord("");
			if (w != null) {
				r.ssENStudentLog = w;
			}
			return r;
		}

	}

	partial struct ENStudentLogEntityRecord {
		public static implicit operator WORCStudentLogRecord(ENStudentLogEntityRecord r) {
			return new WORCStudentLogRecord(r);
		}

		public static implicit operator ENStudentLogEntityRecord(WORCStudentLogRecord w) {
			ENStudentLogEntityRecord r = new ENStudentLogEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssDateTime = (DateTime) w.varWSDateTime;
				r.ssEventBy = (int) w.varWSEventBy;
				r.ssDescription = ((string) w.varWSDescription ?? "");
				r.ssUserDescription = ((string) w.varWSUserDescription ?? "");
				r.ssLogRAGId = (string) w.varWSLogRAGId;
				r.ssStudentLogType = (string) w.varWSStudentLogType;
				r.ssRAGCategoryId = (int) w.varWSRAGCategoryId;
				r.ssStudentRAG = (string) w.varWSStudentRAG;
				r.ssLastWeekPunctuality = (int) w.varWSLastWeekPunctuality;
				r.ssOverallPunctuality = (int) w.varWSOverallPunctuality;
				r.ssLastWeekAttendance = (int) w.varWSLastWeekAttendance;
				r.ssOverallAttendance = (int) w.varWSOverallAttendance;
				r.ssCauseOfConcernRAG = (string) w.varWSCauseOfConcernRAG;
				r.ssCauseOfConcernNumber = (int) w.varWSCauseOfConcernNumber;
				r.ssSafeguardIdList = ((string) w.varWSSafeguardIdList ?? "");
				r.ssSupportIdList = ((string) w.varWSSupportIdList ?? "");
				r.ssRewardsGoldNumber = (int) w.varWSRewardsGoldNumber;
				r.ssRewardsGreenNumber = (int) w.varWSRewardsGreenNumber;
				r.ssVocPeriodRAG = (string) w.varWSVocPeriodRAG;
				r.ssVocOverallRAG = (string) w.varWSVocOverallRAG;
				r.ssVocCompletedUnits = (int) w.varWSVocCompletedUnits;
				r.ssVocRegisteredUnits = (int) w.varWSVocRegisteredUnits;
				r.ssMathPeriodRAG = (string) w.varWSMathPeriodRAG;
				r.ssMathOverallRAG = (string) w.varWSMathOverallRAG;
				r.ssMathCompletedUnits = (int) w.varWSMathCompletedUnits;
				r.ssMathRegisteredUnits = (int) w.varWSMathRegisteredUnits;
				r.ssEngPeriodRAG = (string) w.varWSEngPeriodRAG;
				r.ssEngOverallRAG = (string) w.varWSEngOverallRAG;
				r.ssEngCompletedUnits = (int) w.varWSEngCompletedUnits;
				r.ssEngRegisteredUnits = (int) w.varWSEngRegisteredUnits;
				r.ssMLWPeriodRAG = (string) w.varWSMLWPeriodRAG;
				r.ssMLWOverallRAG = (string) w.varWSMLWOverallRAG;
				r.ssMLWCompletedUnits = (int) w.varWSMLWCompletedUnits;
				r.ssMLWRegisteredUnits = (int) w.varWSMLWRegisteredUnits;
				r.ssRewardType = (bool) w.varWSRewardType;
				r.ssDescriptionType = ((string) w.varWSDescriptionType ?? "");
				r.ssDisciplinaryTypeNumber = (int) w.varWSDisciplinaryTypeNumber;
				r.ssDisciplinaryType = (string) w.varWSDisciplinaryType;
				r.ssMLWCompetencieId = (string) w.varWSMLWCompetencieId;
				r.ssMLWCompetencieCurrentLevel = (int) w.varWSMLWCompetencieCurrentLevel;
				r.ssSessionId = (int) w.varWSSessionId;
				r.ssCommunicationId = (int) w.varWSCommunicationId;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentLogRecordList {
		public WORCStudentLogRecord[] Array;


		public WORLStudentLogRecordList(WORCStudentLogRecord[] r) {
			if (r == null)
			Array = new WORCStudentLogRecord[0];
			else
			Array = r;
		}
		public WORLStudentLogRecordList() {
			Array = new WORCStudentLogRecord[0];
		}

		public WORLStudentLogRecordList(RLStudentLogRecordList rl) {
			rl=(RLStudentLogRecordList) rl.Duplicate();
			Array = new WORCStudentLogRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentLogRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentLogRecordList {
		public static implicit operator RLStudentLogRecordList(WORCStudentLogRecord[] array) {
			RLStudentLogRecordList rl = new RLStudentLogRecordList();
			if (array != null) {
				foreach(WORCStudentLogRecord val in array) {
					rl.Append((RCStudentLogRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentLogRecord[](RLStudentLogRecordList rl) {
			WORCStudentLogRecord[] array = new WORCStudentLogRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentLogRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentLogRecordList {
		public static implicit operator RLStudentLogRecordList(WORLStudentLogRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentLogRecordList(RLStudentLogRecordList rl) {
			return new WORLStudentLogRecordList(rl);
		}
		public static implicit operator WORCStudentLogRecord[](WORLStudentLogRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentLogRecordList(WORCStudentLogRecord[] array) {
			return new WORLStudentLogRecordList(array);
		}
	}
}

