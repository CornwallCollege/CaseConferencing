/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENNoteEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENNoteEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENNoteEntity.eSpaceId;
	} // ENNoteEntity

	/// <summary>
	/// Entity <code>ENNoteEntityRecord</code> that represents the Service Studio entity <code>Note</code>
	///  <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Note", "dnuMRUgYRUGonm76W6GocQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_Note", "")]
	[Serializable()]
	public partial struct ENNoteEntityRecord: ISerializable, ITypedRecord<ENNoteEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*lf0matJTsUe9XXdcVB_kGg");
		private static readonly GlobalObjectKey IdStudentId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*F7tKTscetEGCaOMzeu6IVg");
		private static readonly GlobalObjectKey IdNoteTypeId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*tjOzDJeFI0SnxPaMRgVoeA");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*j5XjTQTiRU6C4Nka1vC1bA");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*LeXksxag0kS57r2e_u7wCA");
		private static readonly GlobalObjectKey IdDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*0acFVlWDTUmezS3scGZlqQ");
		private static readonly GlobalObjectKey IdIsActive = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*zWMbWBA5YEa551rwZqk63w");
		private static readonly GlobalObjectKey IdDocumentId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ItkePCSIq0Oxo9Wq2xmr5A");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(8, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentId")]
		private string _ssStudentId;
		public string ssStudentId {
			get {
				return _ssStudentId;
			}
			set {
				if ((_ssStudentId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NOTETYPEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("NoteTypeId")]
		private string _ssNoteTypeId;
		public string ssNoteTypeId {
			get {
				return _ssNoteTypeId;
			}
			set {
				if ((_ssNoteTypeId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssNoteTypeId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Date")]
		private DateTime _ssDate;
		public DateTime ssDate {
			get {
				return _ssDate;
			}
			set {
				if ((_ssDate!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISACTIVE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("IsActive")]
		private bool _ssIsActive;
		public bool ssIsActive {
			get {
				return _ssIsActive;
			}
			set {
				if ((_ssIsActive!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssIsActive = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("DocumentId")]
		private int _ssDocumentId;
		public int ssDocumentId {
			get {
				return _ssDocumentId;
			}
			set {
				if ((_ssDocumentId!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssDocumentId = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENNoteEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(8, true);
			OptimizedAttributes = new BitArray(8, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssNoteTypeId = "";
			_ssDescription = "";
			_ssCreatedBy = 0;
			_ssDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIsActive = true;
			_ssDocumentId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Note.Id", 0);
			ssStudentId = r.ReadTextEntityReference(index++, "Note.StudentId", "");
			ssNoteTypeId = r.ReadTextEntityReference(index++, "Note.NoteTypeId", "");
			ssDescription = r.ReadText(index++, "Note.Description", "");
			ssCreatedBy = r.ReadEntityReference(index++, "Note.CreatedBy", 0);
			ssDate = r.ReadDateTime(index++, "Note.Date", new DateTime(1900, 1, 1, 0, 0, 0));
			ssIsActive = r.ReadBoolean(index++, "Note.IsActive", false);
			ssDocumentId = r.ReadEntityReference(index++, "Note.DocumentId", 0);
			ChangedAttributes = new BitArray(8, false);
			OptimizedAttributes = new BitArray(8, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENNoteEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENNoteEntityRecord a, ENNoteEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentId != b.ssStudentId) return false;
			if (a.ssNoteTypeId != b.ssNoteTypeId) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssDate != b.ssDate) return false;
			if (a.ssIsActive != b.ssIsActive) return false;
			if (a.ssDocumentId != b.ssDocumentId) return false;
			return true;
		}

		public static bool operator != (ENNoteEntityRecord a, ENNoteEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENNoteEntityRecord)) return false;
			return (this == (ENNoteEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentId.GetHashCode()
				^ ssNoteTypeId.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssDate.GetHashCode()
				^ ssIsActive.GetHashCode()
				^ ssDocumentId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENNoteEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(8, true);
			OptimizedAttributes = new BitArray(8, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssNoteTypeId = "";
			_ssDescription = "";
			_ssCreatedBy = 0;
			_ssDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIsActive = true;
			_ssDocumentId = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentId = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssNoteTypeId = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssDate = (DateTime) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssIsActive = (bool) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssDocumentId = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENNoteEntityRecord Duplicate() {
			ENNoteEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentId = this._ssStudentId;
			t._ssNoteTypeId = this._ssNoteTypeId;
			t._ssDescription = this._ssDescription;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssDate = this._ssDate;
			t._ssIsActive = this._ssIsActive;
			t._ssDocumentId = this._ssDocumentId;
			t.ChangedAttributes = new BitArray(8);
			t.OptimizedAttributes = new BitArray(8);
			for (int i = 0; i < 8; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentId")) VarValue.AppendAttribute(recordElem, "StudentId", ssStudentId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NoteTypeId")) VarValue.AppendAttribute(recordElem, "NoteTypeId", ssNoteTypeId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "NoteTypeId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Date")) VarValue.AppendAttribute(recordElem, "Date", ssDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Date");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsActive")) VarValue.AppendAttribute(recordElem, "IsActive", ssIsActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsActive");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocumentId")) VarValue.AppendAttribute(recordElem, "DocumentId", ssDocumentId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "DocumentId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentId")) variable.Value = ssStudentId; else variable.Optimized = true;
			} else if (head == "notetypeid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NoteTypeId")) variable.Value = ssNoteTypeId; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "date") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Date")) variable.Value = ssDate; else variable.Optimized = true;
			} else if (head == "isactive") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsActive")) variable.Value = ssIsActive; else variable.Optimized = true;
			} else if (head == "documentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocumentId")) variable.Value = ssDocumentId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdNoteTypeId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdDate)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdIsActive)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdDocumentId)) {
				return ChangedAttributes[7];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdNoteTypeId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdDate)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdIsActive)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdDocumentId)) {
				return OptimizedAttributes[7];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentId) {
				return ssStudentId;
			} else if (key == IdNoteTypeId) {
				return ssNoteTypeId;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdDate) {
				return ssDate;
			} else if (key == IdIsActive) {
				return ssIsActive;
			} else if (key == IdDocumentId) {
				return ssDocumentId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(8);
			OptimizedAttributes = new BitArray(8);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentId = (string) other.AttributeGet(IdStudentId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentId);
			ssNoteTypeId = (string) other.AttributeGet(IdNoteTypeId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdNoteTypeId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdNoteTypeId);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdDescription);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCreatedBy);
			ssDate = (DateTime) other.AttributeGet(IdDate);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdDate);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdDate);
			ssIsActive = (bool) other.AttributeGet(IdIsActive);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdIsActive);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdIsActive);
			ssDocumentId = (int) other.AttributeGet(IdDocumentId);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdDocumentId);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdDocumentId);
		}
	} // ENNoteEntityRecord
	/// <summary>
	/// Structure <code>RCNoteRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCNoteRecord: ISerializable, ITypedRecord<RCNoteRecord> {
		private static readonly GlobalObjectKey IdNote = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ew2SfY4g0RdBNomxnNliJg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Note")]
		public ENNoteEntityRecord ssENNote;


		public static implicit operator ENNoteEntityRecord(RCNoteRecord r) {
			return r.ssENNote;
		}

		public static implicit operator RCNoteRecord(ENNoteEntityRecord r) {
			RCNoteRecord res = new RCNoteRecord(null);
			res.ssENNote = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENNote.ChangedAttributes = value;
			}
			get {
				return ssENNote.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCNoteRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENNote = new ENNoteEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENNote.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENNote.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENNote.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENNote.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCNoteRecord r) {
			this = r;
		}


		public static bool operator == (RCNoteRecord a, RCNoteRecord b) {
			if (a.ssENNote != b.ssENNote) return false;
			return true;
		}

		public static bool operator != (RCNoteRecord a, RCNoteRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCNoteRecord)) return false;
			return (this == (RCNoteRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENNote.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCNoteRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENNote = new ENNoteEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENNote = (ENNoteEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENNote.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENNote.InternalRecursiveSave();
		}


		public RCNoteRecord Duplicate() {
			RCNoteRecord t;
			t.ssENNote = (ENNoteEntityRecord) this.ssENNote.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENNote.ToXml(this, recordElem, "Note", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "note") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Note")) variable.Value = ssENNote; else variable.Optimized = true;
				variable.SetFieldName("note");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENNote.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENNote.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdNote) {
				return ssENNote;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENNote.FillFromOther((IRecord) other.AttributeGet(IdNote));
		}
	} // RCNoteRecord
	/// <summary>
	/// RecordList type <code>RLNoteRecordList</code> that represents a record list of <code>Note</code>
	/// </summary>
	[Serializable()]
	public partial class RLNoteRecordList: GenericRecordList<RCNoteRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCNoteRecord GetElementDefaultValue() {
			return new RCNoteRecord("");
		}

		public T[] ToArray<T>(Func<RCNoteRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLNoteRecordList recordlist, Func<RCNoteRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLNoteRecordList ToList<T>(T[] array, Func <T, RCNoteRecord> converter) {
			RLNoteRecordList result = new RLNoteRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLNoteRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLNoteRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLNoteRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLNoteRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCNoteRecord> NewList() {
			return new RLNoteRecordList();
		}


	} // RLNoteRecordList

	/// <summary>
	/// RecordList type <code>RLNoteList</code> that represents a record list of <code>StudentIdentifier,
	///  UserIdentifier, Text, DateTime, Boolean, Integer, NoteTypeIdentifier, DocumentsIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLNoteList: GenericRecordList<ENNoteEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENNoteEntityRecord GetElementDefaultValue() {
			return new ENNoteEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENNoteEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLNoteList recordlist, Func<ENNoteEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLNoteList ToList<T>(T[] array, Func <T, ENNoteEntityRecord> converter) {
			RLNoteList result = new RLNoteList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLNoteList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLNoteList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLNoteList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLNoteList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENNoteEntityRecord> NewList() {
			return new RLNoteList();
		}


	} // RLNoteList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateNote
		/// </summary>

		public static void CreateNote(HeContext heContext, RCNoteRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENNoteEntity.eSpaceId;
				ENNoteEntityRecord ssENNote = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENNoteEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTID]" +
					 ", [NOTETYPEID]" +
					 ", [DESCRIPTION]" +
					 ", [CREATEDBY]" +
					 ", [DATE]" +
					 ", [ISACTIVE]" +
					 ", [DOCUMENTID]" +
					 " ) VALUES (" +
					 " @ssStudentId" +
					 ", @ssNoteTypeId" +
					 ", @ssDescription" +
					 ", @ssCreatedBy" +
					 ", @ssDate" +
					 ", @ssIsActive" +
					 ", @ssDocumentId" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENNote.ssStudentId== "")) {
						insertSqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENNote.ssStudentId);
					}
					insertSqlCmd.CreateParameter("@ssNoteTypeId", DbType.String, ssENNote.ssNoteTypeId);
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENNote.ssDescription);
					if ((ssENNote.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENNote.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENNote.ssDate);
					insertSqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENNote.ssIsActive);
					if ((ssENNote.ssDocumentId==0)) {
						insertSqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENNote.ssDocumentId);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateNote", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateNote
		/// </summary>

		public static void CreateOrUpdateNote(HeContext heContext, BitArray usedFields, RCNoteRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENNoteEntity.eSpaceId;
				ENNoteEntityRecord ssENNote = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(8, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENNoteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTETYPEID] = @ssNoteTypeId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATE] = @ssDate"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISACTIVE] = @ssIsActive"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENNotessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENNote.ssStudentId== "")) {
							sqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENNote.ssStudentId);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssNoteTypeId", DbType.String, ssENNote.ssNoteTypeId);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENNote.ssDescription);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENNote.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENNote.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENNote.ssDate);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENNote.ssIsActive);
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENNote.ssDocumentId==0)) {
							sqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENNote.ssDocumentId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISACTIVE] = [ISACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENNotessId", DbType.Int32, ssENNote.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateNote (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENNoteEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTID]" +
						 ", [NOTETYPEID]" +
						 ", [DESCRIPTION]" +
						 ", [CREATEDBY]" +
						 ", [DATE]" +
						 ", [ISACTIVE]" +
						 ", [DOCUMENTID]" +
						 " ) VALUES (" +
						 " @ssStudentId" +
						 ", @ssNoteTypeId" +
						 ", @ssDescription" +
						 ", @ssCreatedBy" +
						 ", @ssDate" +
						 ", @ssIsActive" +
						 ", @ssDocumentId" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENNote.ssStudentId== "")) {
							insertSqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENNote.ssStudentId);
						}
						insertSqlCmd.CreateParameter("@ssNoteTypeId", DbType.String, ssENNote.ssNoteTypeId);
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENNote.ssDescription);
						if ((ssENNote.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENNote.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENNote.ssDate);
						insertSqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENNote.ssIsActive);
						if ((ssENNote.ssDocumentId==0)) {
							insertSqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENNote.ssDocumentId);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateNote", true), typeof(int));
					} else {
						outParamId = ssENNote.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteNote
		/// </summary>

		public static void DeleteNote(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENNoteEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENNoteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteNote", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetNote
		/// </summary>

		public static void GetNote(HeContext heContext, int inParamId, out RCNoteRecord outParamRecord) {
			outParamRecord = new RCNoteRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENNoteEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [NOTETYPEID]" +
					 ", [DESCRIPTION]" +
					 ", [CREATEDBY]" +
					 ", [DATE]" +
					 ", [ISACTIVE]" +
					 ", [DOCUMENTID]" +
					 " FROM " + ENNoteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetNote", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(8, false)
							}
							;
						} else
						throw new DataBaseException(ENNoteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetNoteForUpdate
		/// </summary>

		public static void GetNoteForUpdate(HeContext heContext, int inParamId, out RCNoteRecord outParamRecord) {
			outParamRecord = new RCNoteRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENNoteEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [NOTETYPEID]" +
					 ", [DESCRIPTION]" +
					 ", [CREATEDBY]" +
					 ", [DATE]" +
					 ", [ISACTIVE]" +
					 ", [DOCUMENTID]" +
					 "FROM " + ENNoteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetNoteForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(8, false)
							}
							;
						} else
						throw new DataBaseException(ENNoteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateNote
		/// </summary>

		public static void UpdateNote(HeContext heContext, BitArray usedFields, RCNoteRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENNoteEntity.eSpaceId;
				ENNoteEntityRecord ssENNote = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(8, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENNoteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTETYPEID] = @ssNoteTypeId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATE] = @ssDate"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ISACTIVE] = @ssIsActive"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENNotessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENNote.ssStudentId== "")) {
							sqlCmd.CreateParameter("@ssStudentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENNote.ssStudentId);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssNoteTypeId", DbType.String, ssENNote.ssNoteTypeId);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENNote.ssDescription);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENNote.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENNote.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENNote.ssDate);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssIsActive", DbType.Boolean, ssENNote.ssIsActive);
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENNote.ssDocumentId==0)) {
							sqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENNote.ssDocumentId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ISACTIVE] = [ISACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENNotessId", DbType.Int32, ssENNote.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateNote", true) <= 0)
					throw new DataBaseException(ENNoteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENNote.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Note")]
	public class WORCNoteRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentId")]
		public string varWSStudentId;

		[System.Xml.Serialization.XmlElement("NoteTypeId")]
		public string varWSNoteTypeId;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("Date")]
		public DateTime varWSDate;

		[System.Xml.Serialization.XmlElement("IsActive")]
		public bool varWSIsActive;

		[System.Xml.Serialization.XmlElement("DocumentId")]
		public int varWSDocumentId;

		public WORCNoteRecord() {
			varWSId = (int) 0;
			varWSStudentId = (string) "";
			varWSNoteTypeId = (string) "";
			varWSDescription = (string) "";
			varWSCreatedBy = (int) 0;
			varWSDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSIsActive = (bool) true;
			varWSDocumentId = (int) 0;
		}

		public WORCNoteRecord(ENNoteEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentId = BaseAppUtils.RemoveControlChars(r.ssStudentId);
			varWSNoteTypeId = BaseAppUtils.RemoveControlChars(r.ssNoteTypeId);
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSDate = (DateTime) r.ssDate;
			varWSIsActive = (bool) r.ssIsActive;
			varWSDocumentId = (int) r.ssDocumentId;
		}

		public static RLNoteList ToRecordList(WORCNoteRecord[] array) {
			RLNoteList rl = new RLNoteList();
			if (array != null) {
				foreach(WORCNoteRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCNoteRecord[] FromRecordList(RLNoteList rl) {
			WORCNoteRecord[] array = new WORCNoteRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCNoteRecord {
		public static implicit operator WORCNoteRecord(RCNoteRecord r) {
			return new WORCNoteRecord(r.ssENNote);
		}

		public static implicit operator RCNoteRecord(WORCNoteRecord w) {
			RCNoteRecord r = new RCNoteRecord("");
			if (w != null) {
				r.ssENNote = w;
			}
			return r;
		}

	}

	partial struct ENNoteEntityRecord {
		public static implicit operator WORCNoteRecord(ENNoteEntityRecord r) {
			return new WORCNoteRecord(r);
		}

		public static implicit operator ENNoteEntityRecord(WORCNoteRecord w) {
			ENNoteEntityRecord r = new ENNoteEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentId = (string) w.varWSStudentId;
				r.ssNoteTypeId = (string) w.varWSNoteTypeId;
				r.ssDescription = ((string) w.varWSDescription ?? "");
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssDate = (DateTime) w.varWSDate;
				r.ssIsActive = (bool) w.varWSIsActive;
				r.ssDocumentId = (int) w.varWSDocumentId;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLNoteRecordList {
		public WORCNoteRecord[] Array;


		public WORLNoteRecordList(WORCNoteRecord[] r) {
			if (r == null)
			Array = new WORCNoteRecord[0];
			else
			Array = r;
		}
		public WORLNoteRecordList() {
			Array = new WORCNoteRecord[0];
		}

		public WORLNoteRecordList(RLNoteRecordList rl) {
			rl=(RLNoteRecordList) rl.Duplicate();
			Array = new WORCNoteRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCNoteRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLNoteRecordList {
		public static implicit operator RLNoteRecordList(WORCNoteRecord[] array) {
			RLNoteRecordList rl = new RLNoteRecordList();
			if (array != null) {
				foreach(WORCNoteRecord val in array) {
					rl.Append((RCNoteRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCNoteRecord[](RLNoteRecordList rl) {
			WORCNoteRecord[] array = new WORCNoteRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCNoteRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLNoteRecordList {
		public static implicit operator RLNoteRecordList(WORLNoteRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLNoteRecordList(RLNoteRecordList rl) {
			return new WORLNoteRecordList(rl);
		}
		public static implicit operator WORCNoteRecord[](WORLNoteRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLNoteRecordList(WORCNoteRecord[] array) {
			return new WORLNoteRecordList(array);
		}
	}
}

