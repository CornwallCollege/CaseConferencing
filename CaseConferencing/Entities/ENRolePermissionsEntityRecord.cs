/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENRolePermissionsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceUserPermissions.ENRolePermissionsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceUserPermissions.ENRolePermissionsEntity.eSpaceId;
	} // ENRolePermissionsEntity

	/// <summary>
	/// Entity <code>ENRolePermissionsEntityRecord</code> that represents the Service Studio entity
	///  <code>RolePermissions</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("RolePermissions", "FBGH4ao_gU2bAo372ZfEXw", "VG7aGSJNbE6NUzd5UwKOWA", 0, "OSUSR_31l_RolePermissions", "")]
	[Serializable()]
	public partial struct ENRolePermissionsEntityRecord: ISerializable, ITypedRecord<ENRolePermissionsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("VG7aGSJNbE6NUzd5UwKOWA*nZA_K6Kny02r0+ygkBexeA");
		private static readonly GlobalObjectKey IdRoleId = GlobalObjectKey.Parse("VG7aGSJNbE6NUzd5UwKOWA*6o6Mx7Nh50OgpqnVQDLt0g");
		private static readonly GlobalObjectKey IdApplicationSection = GlobalObjectKey.Parse("VG7aGSJNbE6NUzd5UwKOWA*LVKiXIbKjkGgRf0WCGkTbA");
		private static readonly GlobalObjectKey IdPermissionType = GlobalObjectKey.Parse("VG7aGSJNbE6NUzd5UwKOWA*Tjuladj23UyxuloTYChYIA");
		private static readonly GlobalObjectKey IdCreatedAt = GlobalObjectKey.Parse("VG7aGSJNbE6NUzd5UwKOWA*m5_pxyFLj0yNiECf8+rnKQ");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("VG7aGSJNbE6NUzd5UwKOWA*lcKqlHoB6UmWxvxZ8lHl8A");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(6, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ROLEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RoleId")]
		private int _ssRoleId;
		public int ssRoleId {
			get {
				return _ssRoleId;
			}
			set {
				if ((_ssRoleId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssRoleId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("APPLICATIONSECTION", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ApplicationSection")]
		private int _ssApplicationSection;
		public int ssApplicationSection {
			get {
				return _ssApplicationSection;
			}
			set {
				if ((_ssApplicationSection!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssApplicationSection = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PERMISSIONTYPE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("PermissionType")]
		private int _ssPermissionType;
		public int ssPermissionType {
			get {
				return _ssPermissionType;
			}
			set {
				if ((_ssPermissionType!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssPermissionType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDAT", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedAt")]
		private string _ssCreatedAt;
		public string ssCreatedAt {
			get {
				return _ssCreatedAt;
			}
			set {
				if ((_ssCreatedAt!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCreatedAt = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCreatedBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENRolePermissionsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(6, true);
			OptimizedAttributes = new BitArray(6, false);
			_ssId = 0;
			_ssRoleId = 0;
			_ssApplicationSection = 0;
			_ssPermissionType = 0;
			_ssCreatedAt = "";
			_ssCreatedBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "RolePermissions.Id", 0);
			ssRoleId = r.ReadEntityReference(index++, "RolePermissions.RoleId", 0);
			ssApplicationSection = r.ReadEntityReference(index++, "RolePermissions.ApplicationSection", 0);
			ssPermissionType = r.ReadEntityReference(index++, "RolePermissions.PermissionType", 0);
			ssCreatedAt = r.ReadText(index++, "RolePermissions.CreatedAt", "");
			ssCreatedBy = r.ReadEntityReference(index++, "RolePermissions.CreatedBy", 0);
			ChangedAttributes = new BitArray(6, false);
			OptimizedAttributes = new BitArray(6, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENRolePermissionsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENRolePermissionsEntityRecord a, ENRolePermissionsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssRoleId != b.ssRoleId) return false;
			if (a.ssApplicationSection != b.ssApplicationSection) return false;
			if (a.ssPermissionType != b.ssPermissionType) return false;
			if (a.ssCreatedAt != b.ssCreatedAt) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			return true;
		}

		public static bool operator != (ENRolePermissionsEntityRecord a, ENRolePermissionsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENRolePermissionsEntityRecord)) return false;
			return (this == (ENRolePermissionsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssRoleId.GetHashCode()
				^ ssApplicationSection.GetHashCode()
				^ ssPermissionType.GetHashCode()
				^ ssCreatedAt.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENRolePermissionsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(6, true);
			OptimizedAttributes = new BitArray(6, false);
			_ssId = 0;
			_ssRoleId = 0;
			_ssApplicationSection = 0;
			_ssPermissionType = 0;
			_ssCreatedAt = "";
			_ssCreatedBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssRoleId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssApplicationSection = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssPermissionType = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCreatedAt = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENRolePermissionsEntityRecord Duplicate() {
			ENRolePermissionsEntityRecord t;
			t._ssId = this._ssId;
			t._ssRoleId = this._ssRoleId;
			t._ssApplicationSection = this._ssApplicationSection;
			t._ssPermissionType = this._ssPermissionType;
			t._ssCreatedAt = this._ssCreatedAt;
			t._ssCreatedBy = this._ssCreatedBy;
			t.ChangedAttributes = new BitArray(6);
			t.OptimizedAttributes = new BitArray(6);
			for (int i = 0; i < 6; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RoleId")) VarValue.AppendAttribute(recordElem, "RoleId", ssRoleId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RoleId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationSection")) VarValue.AppendAttribute(recordElem, "ApplicationSection", ssApplicationSection, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationSection");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PermissionType")) VarValue.AppendAttribute(recordElem, "PermissionType", ssPermissionType, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "PermissionType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedAt")) VarValue.AppendAttribute(recordElem, "CreatedAt", ssCreatedAt, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "roleid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RoleId")) variable.Value = ssRoleId; else variable.Optimized = true;
			} else if (head == "applicationsection") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationSection")) variable.Value = ssApplicationSection; else variable.Optimized = true;
			} else if (head == "permissiontype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PermissionType")) variable.Value = ssPermissionType; else variable.Optimized = true;
			} else if (head == "createdat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedAt")) variable.Value = ssCreatedAt; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdRoleId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdApplicationSection)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdPermissionType)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCreatedAt)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[5];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdRoleId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdApplicationSection)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdPermissionType)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCreatedAt)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[5];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdRoleId) {
				return ssRoleId;
			} else if (key == IdApplicationSection) {
				return ssApplicationSection;
			} else if (key == IdPermissionType) {
				return ssPermissionType;
			} else if (key == IdCreatedAt) {
				return ssCreatedAt;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(6);
			OptimizedAttributes = new BitArray(6);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssRoleId = (int) other.AttributeGet(IdRoleId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdRoleId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdRoleId);
			ssApplicationSection = (int) other.AttributeGet(IdApplicationSection);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdApplicationSection);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdApplicationSection);
			ssPermissionType = (int) other.AttributeGet(IdPermissionType);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdPermissionType);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdPermissionType);
			ssCreatedAt = (string) other.AttributeGet(IdCreatedAt);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCreatedAt);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCreatedAt);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCreatedBy);
		}
	} // ENRolePermissionsEntityRecord
	/// <summary>
	/// Structure <code>RCRolePermissionsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRolePermissionsRecord: ISerializable, ITypedRecord<RCRolePermissionsRecord> {
		private static readonly GlobalObjectKey IdRolePermissions = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*fNFGRBZfUOl6o5NI+lDCoQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RolePermissions")]
		public ENRolePermissionsEntityRecord ssENRolePermissions;


		public static implicit operator ENRolePermissionsEntityRecord(RCRolePermissionsRecord r) {
			return r.ssENRolePermissions;
		}

		public static implicit operator RCRolePermissionsRecord(ENRolePermissionsEntityRecord r) {
			RCRolePermissionsRecord res = new RCRolePermissionsRecord(null);
			res.ssENRolePermissions = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENRolePermissions.ChangedAttributes = value;
			}
			get {
				return ssENRolePermissions.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCRolePermissionsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRolePermissions = new ENRolePermissionsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(6, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRolePermissions.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENRolePermissions.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENRolePermissions.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRolePermissions.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRolePermissionsRecord r) {
			this = r;
		}


		public static bool operator == (RCRolePermissionsRecord a, RCRolePermissionsRecord b) {
			if (a.ssENRolePermissions != b.ssENRolePermissions) return false;
			return true;
		}

		public static bool operator != (RCRolePermissionsRecord a, RCRolePermissionsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRolePermissionsRecord)) return false;
			return (this == (RCRolePermissionsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRolePermissions.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRolePermissionsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRolePermissions = new ENRolePermissionsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRolePermissions = (ENRolePermissionsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENRolePermissions.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRolePermissions.InternalRecursiveSave();
		}


		public RCRolePermissionsRecord Duplicate() {
			RCRolePermissionsRecord t;
			t.ssENRolePermissions = (ENRolePermissionsEntityRecord) this.ssENRolePermissions.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRolePermissions.ToXml(this, recordElem, "RolePermissions", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "rolepermissions") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RolePermissions")) variable.Value = ssENRolePermissions; else variable.Optimized = true;
				variable.SetFieldName("rolepermissions");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENRolePermissions.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENRolePermissions.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRolePermissions) {
				return ssENRolePermissions;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRolePermissions.FillFromOther((IRecord) other.AttributeGet(IdRolePermissions));
		}
	} // RCRolePermissionsRecord
	/// <summary>
	/// RecordList type <code>RLRolePermissionsRecordList</code> that represents a record list of
	///  <code>RolePermissions</code>
	/// </summary>
	[Serializable()]
	public partial class RLRolePermissionsRecordList: GenericRecordList<RCRolePermissionsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRolePermissionsRecord GetElementDefaultValue() {
			return new RCRolePermissionsRecord("");
		}

		public T[] ToArray<T>(Func<RCRolePermissionsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRolePermissionsRecordList recordlist, Func<RCRolePermissionsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRolePermissionsRecordList ToList<T>(T[] array, Func <T, RCRolePermissionsRecord> converter) {
			RLRolePermissionsRecordList result = new RLRolePermissionsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRolePermissionsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRolePermissionsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRolePermissionsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRolePermissionsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(6, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRolePermissionsRecord> NewList() {
			return new RLRolePermissionsRecordList();
		}


	} // RLRolePermissionsRecordList

	/// <summary>
	/// RecordList type <code>RLRolePermissionsList</code> that represents a record list of
	///  <code>ApplicationPermissionIdentifier, PermissionTypeIdentifier, RoleIdentifier, UserIdentifier
	/// , Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLRolePermissionsList: GenericRecordList<ENRolePermissionsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENRolePermissionsEntityRecord GetElementDefaultValue() {
			return new ENRolePermissionsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENRolePermissionsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRolePermissionsList recordlist, Func<ENRolePermissionsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRolePermissionsList ToList<T>(T[] array, Func <T, ENRolePermissionsEntityRecord> converter) {
			RLRolePermissionsList result = new RLRolePermissionsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRolePermissionsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRolePermissionsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRolePermissionsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRolePermissionsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENRolePermissionsEntityRecord> NewList() {
			return new RLRolePermissionsList();
		}


	} // RLRolePermissionsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateRolePermissions
		/// </summary>

		public static void CreateRolePermissions(HeContext heContext, RCRolePermissionsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRolePermissionsEntity.eSpaceId;
				ENRolePermissionsEntityRecord ssENRolePermissions = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENRolePermissionsEntity.LocalViewName(null, null) + " (" +
					 " [ROLEID]" +
					 ", [APPLICATIONSECTION]" +
					 ", [PERMISSIONTYPE]" +
					 ", [CREATEDAT]" +
					 ", [CREATEDBY]" +
					 " ) VALUES (" +
					 " @ssRoleId" +
					 ", @ssApplicationSection" +
					 ", @ssPermissionType" +
					 ", @ssCreatedAt" +
					 ", @ssCreatedBy" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENRolePermissions.ssRoleId==0)) {
						insertSqlCmd.CreateParameter("@ssRoleId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRoleId", DbType.Int32, ssENRolePermissions.ssRoleId);
					}
					if ((ssENRolePermissions.ssApplicationSection==0)) {
						insertSqlCmd.CreateParameter("@ssApplicationSection", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssApplicationSection", DbType.Int32, ssENRolePermissions.ssApplicationSection);
					}
					if ((ssENRolePermissions.ssPermissionType==0)) {
						insertSqlCmd.CreateParameter("@ssPermissionType", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssPermissionType", DbType.Int32, ssENRolePermissions.ssPermissionType);
					}
					insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.String, ssENRolePermissions.ssCreatedAt);
					if ((ssENRolePermissions.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENRolePermissions.ssCreatedBy);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateRolePermissions", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateRolePermissions
		/// </summary>

		public static void CreateOrUpdateRolePermissions(HeContext heContext, BitArray usedFields, RCRolePermissionsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRolePermissionsEntity.eSpaceId;
				ENRolePermissionsEntityRecord ssENRolePermissions = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(6, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRolePermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ROLEID] = @ssRoleId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[APPLICATIONSECTION] = @ssApplicationSection"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PERMISSIONTYPE] = @ssPermissionType"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRolePermissionsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENRolePermissions.ssRoleId==0)) {
							sqlCmd.CreateParameter("@ssRoleId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRoleId", DbType.Int32, ssENRolePermissions.ssRoleId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENRolePermissions.ssApplicationSection==0)) {
							sqlCmd.CreateParameter("@ssApplicationSection", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssApplicationSection", DbType.Int32, ssENRolePermissions.ssApplicationSection);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENRolePermissions.ssPermissionType==0)) {
							sqlCmd.CreateParameter("@ssPermissionType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssPermissionType", DbType.Int32, ssENRolePermissions.ssPermissionType);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.String, ssENRolePermissions.ssCreatedAt);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENRolePermissions.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENRolePermissions.ssCreatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDAT] = [CREATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRolePermissionsssId", DbType.Int32, ssENRolePermissions.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateRolePermissions (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENRolePermissionsEntity.LocalViewName(null, null) + " (" +
						 " [ROLEID]" +
						 ", [APPLICATIONSECTION]" +
						 ", [PERMISSIONTYPE]" +
						 ", [CREATEDAT]" +
						 ", [CREATEDBY]" +
						 " ) VALUES (" +
						 " @ssRoleId" +
						 ", @ssApplicationSection" +
						 ", @ssPermissionType" +
						 ", @ssCreatedAt" +
						 ", @ssCreatedBy" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENRolePermissions.ssRoleId==0)) {
							insertSqlCmd.CreateParameter("@ssRoleId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRoleId", DbType.Int32, ssENRolePermissions.ssRoleId);
						}
						if ((ssENRolePermissions.ssApplicationSection==0)) {
							insertSqlCmd.CreateParameter("@ssApplicationSection", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssApplicationSection", DbType.Int32, ssENRolePermissions.ssApplicationSection);
						}
						if ((ssENRolePermissions.ssPermissionType==0)) {
							insertSqlCmd.CreateParameter("@ssPermissionType", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssPermissionType", DbType.Int32, ssENRolePermissions.ssPermissionType);
						}
						insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.String, ssENRolePermissions.ssCreatedAt);
						if ((ssENRolePermissions.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENRolePermissions.ssCreatedBy);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateRolePermissions", true), typeof(int));
					} else {
						outParamId = ssENRolePermissions.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteRolePermissions
		/// </summary>

		public static void DeleteRolePermissions(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRolePermissionsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENRolePermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteRolePermissions", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRolePermissions
		/// </summary>

		public static void GetRolePermissions(HeContext heContext, int inParamId, out RCRolePermissionsRecord outParamRecord) {
			outParamRecord = new RCRolePermissionsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRolePermissionsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [ROLEID]" +
					 ", [APPLICATIONSECTION]" +
					 ", [PERMISSIONTYPE]" +
					 ", [CREATEDAT]" +
					 ", [CREATEDBY]" +
					 " FROM " + ENRolePermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRolePermissions", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(6, false)
							}
							;
						} else
						throw new DataBaseException(ENRolePermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRolePermissionsForUpdate
		/// </summary>

		public static void GetRolePermissionsForUpdate(HeContext heContext, int inParamId, out RCRolePermissionsRecord outParamRecord) {
			outParamRecord = new RCRolePermissionsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRolePermissionsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [ROLEID]" +
					 ", [APPLICATIONSECTION]" +
					 ", [PERMISSIONTYPE]" +
					 ", [CREATEDAT]" +
					 ", [CREATEDBY]" +
					 "FROM " + ENRolePermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRolePermissionsForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(6, false)
							}
							;
						} else
						throw new DataBaseException(ENRolePermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateRolePermissions
		/// </summary>

		public static void UpdateRolePermissions(HeContext heContext, BitArray usedFields, RCRolePermissionsRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRolePermissionsEntity.eSpaceId;
				ENRolePermissionsEntityRecord ssENRolePermissions = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(6, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRolePermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ROLEID] = @ssRoleId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[APPLICATIONSECTION] = @ssApplicationSection"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PERMISSIONTYPE] = @ssPermissionType"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRolePermissionsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENRolePermissions.ssRoleId==0)) {
							sqlCmd.CreateParameter("@ssRoleId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRoleId", DbType.Int32, ssENRolePermissions.ssRoleId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENRolePermissions.ssApplicationSection==0)) {
							sqlCmd.CreateParameter("@ssApplicationSection", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssApplicationSection", DbType.Int32, ssENRolePermissions.ssApplicationSection);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENRolePermissions.ssPermissionType==0)) {
							sqlCmd.CreateParameter("@ssPermissionType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssPermissionType", DbType.Int32, ssENRolePermissions.ssPermissionType);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.String, ssENRolePermissions.ssCreatedAt);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENRolePermissions.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENRolePermissions.ssCreatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CREATEDAT] = [CREATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRolePermissionsssId", DbType.Int32, ssENRolePermissions.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateRolePermissions", true) <= 0)
					throw new DataBaseException(ENRolePermissionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENRolePermissions.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("RolePermissions")]
	public class WORCRolePermissionsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("RoleId")]
		public int varWSRoleId;

		[System.Xml.Serialization.XmlElement("ApplicationSection")]
		public int varWSApplicationSection;

		[System.Xml.Serialization.XmlElement("PermissionType")]
		public int varWSPermissionType;

		[System.Xml.Serialization.XmlElement("CreatedAt")]
		public string varWSCreatedAt;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		public WORCRolePermissionsRecord() {
			varWSId = (int) 0;
			varWSRoleId = (int) 0;
			varWSApplicationSection = (int) 0;
			varWSPermissionType = (int) 0;
			varWSCreatedAt = (string) "";
			varWSCreatedBy = (int) 0;
		}

		public WORCRolePermissionsRecord(ENRolePermissionsEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSRoleId = (int) r.ssRoleId;
			varWSApplicationSection = (int) r.ssApplicationSection;
			varWSPermissionType = (int) r.ssPermissionType;
			varWSCreatedAt = BaseAppUtils.RemoveControlChars(r.ssCreatedAt);
			varWSCreatedBy = (int) r.ssCreatedBy;
		}

		public static RLRolePermissionsList ToRecordList(WORCRolePermissionsRecord[] array) {
			RLRolePermissionsList rl = new RLRolePermissionsList();
			if (array != null) {
				foreach(WORCRolePermissionsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRolePermissionsRecord[] FromRecordList(RLRolePermissionsList rl) {
			WORCRolePermissionsRecord[] array = new WORCRolePermissionsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCRolePermissionsRecord {
		public static implicit operator WORCRolePermissionsRecord(RCRolePermissionsRecord r) {
			return new WORCRolePermissionsRecord(r.ssENRolePermissions);
		}

		public static implicit operator RCRolePermissionsRecord(WORCRolePermissionsRecord w) {
			RCRolePermissionsRecord r = new RCRolePermissionsRecord("");
			if (w != null) {
				r.ssENRolePermissions = w;
			}
			return r;
		}

	}

	partial struct ENRolePermissionsEntityRecord {
		public static implicit operator WORCRolePermissionsRecord(ENRolePermissionsEntityRecord r) {
			return new WORCRolePermissionsRecord(r);
		}

		public static implicit operator ENRolePermissionsEntityRecord(WORCRolePermissionsRecord w) {
			ENRolePermissionsEntityRecord r = new ENRolePermissionsEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssRoleId = (int) w.varWSRoleId;
				r.ssApplicationSection = (int) w.varWSApplicationSection;
				r.ssPermissionType = (int) w.varWSPermissionType;
				r.ssCreatedAt = ((string) w.varWSCreatedAt ?? "");
				r.ssCreatedBy = (int) w.varWSCreatedBy;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRolePermissionsRecordList {
		public WORCRolePermissionsRecord[] Array;


		public WORLRolePermissionsRecordList(WORCRolePermissionsRecord[] r) {
			if (r == null)
			Array = new WORCRolePermissionsRecord[0];
			else
			Array = r;
		}
		public WORLRolePermissionsRecordList() {
			Array = new WORCRolePermissionsRecord[0];
		}

		public WORLRolePermissionsRecordList(RLRolePermissionsRecordList rl) {
			rl=(RLRolePermissionsRecordList) rl.Duplicate();
			Array = new WORCRolePermissionsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRolePermissionsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRolePermissionsRecordList {
		public static implicit operator RLRolePermissionsRecordList(WORCRolePermissionsRecord[] array) {
			RLRolePermissionsRecordList rl = new RLRolePermissionsRecordList();
			if (array != null) {
				foreach(WORCRolePermissionsRecord val in array) {
					rl.Append((RCRolePermissionsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRolePermissionsRecord[](RLRolePermissionsRecordList rl) {
			WORCRolePermissionsRecord[] array = new WORCRolePermissionsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRolePermissionsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRolePermissionsRecordList {
		public static implicit operator RLRolePermissionsRecordList(WORLRolePermissionsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRolePermissionsRecordList(RLRolePermissionsRecordList rl) {
			return new WORLRolePermissionsRecordList(rl);
		}
		public static implicit operator WORCRolePermissionsRecord[](WORLRolePermissionsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRolePermissionsRecordList(WORCRolePermissionsRecord[] array) {
			return new WORLRolePermissionsRecordList(array);
		}
	}
}

