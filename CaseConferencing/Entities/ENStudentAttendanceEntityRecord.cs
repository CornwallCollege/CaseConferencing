/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentAttendanceEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENStudentAttendanceEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENStudentAttendanceEntity.eSpaceId;
	} // ENStudentAttendanceEntity

	/// <summary>
	/// Entity <code>ENStudentAttendanceEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentAttendance</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentAttendance", "4PwHIWybxEGJ0+CGESqiUg", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_StudentAttendance", "")]
	[Serializable()]
	public partial struct ENStudentAttendanceEntityRecord: ISerializable, ITypedRecord<ENStudentAttendanceEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*1IXE95wcEEG9TTPsac04zg");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*Qh0i74hiH0Cy70BjXN65_g");
		private static readonly GlobalObjectKey IdOfferingCode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*NaZgObcDwESBaf9qrXC2JQ");
		private static readonly GlobalObjectKey IdAcademicYear = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*cN7dNuR+GEyoqearKR6YXg");
		private static readonly GlobalObjectKey IdOverallPossibleAttendance = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*em33T2KBbUSwJ3lZ3YWmZA");
		private static readonly GlobalObjectKey IdOverallActualAttendance = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*uVmjxky0DEGWDFrrqZjroA");
		private static readonly GlobalObjectKey IdOverallTotalLates = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*O6rvGV3TOkisea1Ygp+Jiw");
		private static readonly GlobalObjectKey IdOverallPercentageAttendance = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*qj5YFBhX60Oxy3NRAj6yvA");
		private static readonly GlobalObjectKey IdOverallPercentageLate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*TZTo+Ax02UCNvZKCpiiP6g");
		private static readonly GlobalObjectKey IdOverallActualAttendanceHours = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*lJRwZlrCikmWtKqGbY+07w");
		private static readonly GlobalObjectKey IdOverallPossibleAttendanceHou = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*bPOdldRkz0yfUxMgFiEdYg");
		private static readonly GlobalObjectKey IdOverallTotalMinsLate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*BepHlSHJIkey_+mWTQay7A");
		private static readonly GlobalObjectKey IdLastWeekPossibleAttendance = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*BoV007o58kyMCimU5Q7eVA");
		private static readonly GlobalObjectKey IdLastWeekActualAttendance = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*ygbyA829TEeNDyupclwTyA");
		private static readonly GlobalObjectKey IdLastWeekTotalLates = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*9YgWcMojS0W8t3M2rabhbg");
		private static readonly GlobalObjectKey IdLastWeekPercentageAttendance = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*jlzfmUHYZUi9bBBU4mr6ww");
		private static readonly GlobalObjectKey IdLastWeekPercentageLate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*cST5xe5eokybzmSo2z40VA");
		private static readonly GlobalObjectKey IdLastWeekActualAttendanceHour = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*gAcJGxq8ZkujZfozAGeRDg");
		private static readonly GlobalObjectKey IdLastWeekPossibleAttendanceHo = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*mxhdVvKMRkG_+u60U3d3VA");
		private static readonly GlobalObjectKey IdLastWeekTotalMinsLate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*VPuiwot_Rkqs11qqHLcvEw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(20, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OFFERINGCODE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("OfferingCode")]
		private string _ssOfferingCode;
		public string ssOfferingCode {
			get {
				return _ssOfferingCode;
			}
			set {
				if ((_ssOfferingCode!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssOfferingCode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ACADEMICYEAR", 10, false, false, false)]
		[System.Xml.Serialization.XmlElement("AcademicYear")]
		private string _ssAcademicYear;
		public string ssAcademicYear {
			get {
				return _ssAcademicYear;
			}
			set {
				if ((_ssAcademicYear!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssAcademicYear = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLPOSSIBLEATTENDANCE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallPossibleAttendance")]
		private int _ssOverallPossibleAttendance;
		public int ssOverallPossibleAttendance {
			get {
				return _ssOverallPossibleAttendance;
			}
			set {
				if ((_ssOverallPossibleAttendance!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssOverallPossibleAttendance = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLACTUALATTENDANCE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallActualAttendance")]
		private int _ssOverallActualAttendance;
		public int ssOverallActualAttendance {
			get {
				return _ssOverallActualAttendance;
			}
			set {
				if ((_ssOverallActualAttendance!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssOverallActualAttendance = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLTOTALLATES", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallTotalLates")]
		private int _ssOverallTotalLates;
		public int ssOverallTotalLates {
			get {
				return _ssOverallTotalLates;
			}
			set {
				if ((_ssOverallTotalLates!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssOverallTotalLates = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLPERCENTAGEATTENDANCE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallPercentageAttendance")]
		private int _ssOverallPercentageAttendance;
		public int ssOverallPercentageAttendance {
			get {
				return _ssOverallPercentageAttendance;
			}
			set {
				if ((_ssOverallPercentageAttendance!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssOverallPercentageAttendance = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLPERCENTAGELATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallPercentageLate")]
		private int _ssOverallPercentageLate;
		public int ssOverallPercentageLate {
			get {
				return _ssOverallPercentageLate;
			}
			set {
				if ((_ssOverallPercentageLate!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssOverallPercentageLate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLACTUALATTENDANCEHOURS", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallActualAttendanceHours")]
		private int _ssOverallActualAttendanceHours;
		public int ssOverallActualAttendanceHours {
			get {
				return _ssOverallActualAttendanceHours;
			}
			set {
				if ((_ssOverallActualAttendanceHours!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssOverallActualAttendanceHours = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLPOSSIBLEATTENDANCEHOU", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallPossibleAttendanceHou")]
		private int _ssOverallPossibleAttendanceHou;
		public int ssOverallPossibleAttendanceHou {
			get {
				return _ssOverallPossibleAttendanceHou;
			}
			set {
				if ((_ssOverallPossibleAttendanceHou!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssOverallPossibleAttendanceHou = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OVERALLTOTALMINSLATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("OverallTotalMinsLate")]
		private int _ssOverallTotalMinsLate;
		public int ssOverallTotalMinsLate {
			get {
				return _ssOverallTotalMinsLate;
			}
			set {
				if ((_ssOverallTotalMinsLate!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssOverallTotalMinsLate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTWEEKPOSSIBLEATTENDANCE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastWeekPossibleAttendance")]
		private int _ssLastWeekPossibleAttendance;
		public int ssLastWeekPossibleAttendance {
			get {
				return _ssLastWeekPossibleAttendance;
			}
			set {
				if ((_ssLastWeekPossibleAttendance!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssLastWeekPossibleAttendance = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTWEEKACTUALATTENDANCE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastWeekActualAttendance")]
		private int _ssLastWeekActualAttendance;
		public int ssLastWeekActualAttendance {
			get {
				return _ssLastWeekActualAttendance;
			}
			set {
				if ((_ssLastWeekActualAttendance!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssLastWeekActualAttendance = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTWEEKTOTALLATES", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastWeekTotalLates")]
		private int _ssLastWeekTotalLates;
		public int ssLastWeekTotalLates {
			get {
				return _ssLastWeekTotalLates;
			}
			set {
				if ((_ssLastWeekTotalLates!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssLastWeekTotalLates = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTWEEKPERCENTAGEATTENDANCE", 37, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastWeekPercentageAttendance")]
		private decimal _ssLastWeekPercentageAttendance;
		public decimal ssLastWeekPercentageAttendance {
			get {
				return _ssLastWeekPercentageAttendance;
			}
			set {
				if ((_ssLastWeekPercentageAttendance!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssLastWeekPercentageAttendance = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTWEEKPERCENTAGELATE", 37, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastWeekPercentageLate")]
		private decimal _ssLastWeekPercentageLate;
		public decimal ssLastWeekPercentageLate {
			get {
				return _ssLastWeekPercentageLate;
			}
			set {
				if ((_ssLastWeekPercentageLate!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssLastWeekPercentageLate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTWEEKACTUALATTENDANCEHOUR", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastWeekActualAttendanceHour")]
		private int _ssLastWeekActualAttendanceHour;
		public int ssLastWeekActualAttendanceHour {
			get {
				return _ssLastWeekActualAttendanceHour;
			}
			set {
				if ((_ssLastWeekActualAttendanceHour!=value) || OptimizedAttributes[17]) {
					ChangedAttributes[17] = true;
					_ssLastWeekActualAttendanceHour = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTWEEKPOSSIBLEATTENDANCEHO", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastWeekPossibleAttendanceHo")]
		private int _ssLastWeekPossibleAttendanceHo;
		public int ssLastWeekPossibleAttendanceHo {
			get {
				return _ssLastWeekPossibleAttendanceHo;
			}
			set {
				if ((_ssLastWeekPossibleAttendanceHo!=value) || OptimizedAttributes[18]) {
					ChangedAttributes[18] = true;
					_ssLastWeekPossibleAttendanceHo = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTWEEKTOTALMINSLATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LastWeekTotalMinsLate")]
		private int _ssLastWeekTotalMinsLate;
		public int ssLastWeekTotalMinsLate {
			get {
				return _ssLastWeekTotalMinsLate;
			}
			set {
				if ((_ssLastWeekTotalMinsLate!=value) || OptimizedAttributes[19]) {
					ChangedAttributes[19] = true;
					_ssLastWeekTotalMinsLate = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentAttendanceEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(20, true);
			OptimizedAttributes = new BitArray(20, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssOfferingCode = "";
			_ssAcademicYear = "";
			_ssOverallPossibleAttendance = 0;
			_ssOverallActualAttendance = 0;
			_ssOverallTotalLates = 0;
			_ssOverallPercentageAttendance = 0;
			_ssOverallPercentageLate = 0;
			_ssOverallActualAttendanceHours = 0;
			_ssOverallPossibleAttendanceHou = 0;
			_ssOverallTotalMinsLate = 0;
			_ssLastWeekPossibleAttendance = 0;
			_ssLastWeekActualAttendance = 0;
			_ssLastWeekTotalLates = 0;
			_ssLastWeekPercentageAttendance = 0.0M;
			_ssLastWeekPercentageLate = 0.0M;
			_ssLastWeekActualAttendanceHour = 0;
			_ssLastWeekPossibleAttendanceHo = 0;
			_ssLastWeekTotalMinsLate = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentAttendance.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "StudentAttendance.StudentReference", "");
			ssOfferingCode = r.ReadText(index++, "StudentAttendance.OfferingCode", "");
			ssAcademicYear = r.ReadText(index++, "StudentAttendance.AcademicYear", "");
			ssOverallPossibleAttendance = r.ReadInteger(index++, "StudentAttendance.OverallPossibleAttendance", 0);
			ssOverallActualAttendance = r.ReadInteger(index++, "StudentAttendance.OverallActualAttendance", 0);
			ssOverallTotalLates = r.ReadInteger(index++, "StudentAttendance.OverallTotalLates", 0);
			ssOverallPercentageAttendance = r.ReadInteger(index++, "StudentAttendance.OverallPercentageAttendance", 0);
			ssOverallPercentageLate = r.ReadInteger(index++, "StudentAttendance.OverallPercentageLate", 0);
			ssOverallActualAttendanceHours = r.ReadInteger(index++, "StudentAttendance.OverallActualAttendanceHours", 0);
			ssOverallPossibleAttendanceHou = r.ReadInteger(index++, "StudentAttendance.OverallPossibleAttendanceHou", 0);
			ssOverallTotalMinsLate = r.ReadInteger(index++, "StudentAttendance.OverallTotalMinsLate", 0);
			ssLastWeekPossibleAttendance = r.ReadInteger(index++, "StudentAttendance.LastWeekPossibleAttendance", 0);
			ssLastWeekActualAttendance = r.ReadInteger(index++, "StudentAttendance.LastWeekActualAttendance", 0);
			ssLastWeekTotalLates = r.ReadInteger(index++, "StudentAttendance.LastWeekTotalLates", 0);
			ssLastWeekPercentageAttendance = r.ReadDecimal(index++, "StudentAttendance.LastWeekPercentageAttendance", 0.0M);
			ssLastWeekPercentageLate = r.ReadDecimal(index++, "StudentAttendance.LastWeekPercentageLate", 0.0M);
			ssLastWeekActualAttendanceHour = r.ReadInteger(index++, "StudentAttendance.LastWeekActualAttendanceHour", 0);
			ssLastWeekPossibleAttendanceHo = r.ReadInteger(index++, "StudentAttendance.LastWeekPossibleAttendanceHo", 0);
			ssLastWeekTotalMinsLate = r.ReadInteger(index++, "StudentAttendance.LastWeekTotalMinsLate", 0);
			ChangedAttributes = new BitArray(20, false);
			OptimizedAttributes = new BitArray(20, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentAttendanceEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentAttendanceEntityRecord a, ENStudentAttendanceEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssOfferingCode != b.ssOfferingCode) return false;
			if (a.ssAcademicYear != b.ssAcademicYear) return false;
			if (a.ssOverallPossibleAttendance != b.ssOverallPossibleAttendance) return false;
			if (a.ssOverallActualAttendance != b.ssOverallActualAttendance) return false;
			if (a.ssOverallTotalLates != b.ssOverallTotalLates) return false;
			if (a.ssOverallPercentageAttendance != b.ssOverallPercentageAttendance) return false;
			if (a.ssOverallPercentageLate != b.ssOverallPercentageLate) return false;
			if (a.ssOverallActualAttendanceHours != b.ssOverallActualAttendanceHours) return false;
			if (a.ssOverallPossibleAttendanceHou != b.ssOverallPossibleAttendanceHou) return false;
			if (a.ssOverallTotalMinsLate != b.ssOverallTotalMinsLate) return false;
			if (a.ssLastWeekPossibleAttendance != b.ssLastWeekPossibleAttendance) return false;
			if (a.ssLastWeekActualAttendance != b.ssLastWeekActualAttendance) return false;
			if (a.ssLastWeekTotalLates != b.ssLastWeekTotalLates) return false;
			if (a.ssLastWeekPercentageAttendance != b.ssLastWeekPercentageAttendance) return false;
			if (a.ssLastWeekPercentageLate != b.ssLastWeekPercentageLate) return false;
			if (a.ssLastWeekActualAttendanceHour != b.ssLastWeekActualAttendanceHour) return false;
			if (a.ssLastWeekPossibleAttendanceHo != b.ssLastWeekPossibleAttendanceHo) return false;
			if (a.ssLastWeekTotalMinsLate != b.ssLastWeekTotalMinsLate) return false;
			return true;
		}

		public static bool operator != (ENStudentAttendanceEntityRecord a, ENStudentAttendanceEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentAttendanceEntityRecord)) return false;
			return (this == (ENStudentAttendanceEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssOfferingCode.GetHashCode()
				^ ssAcademicYear.GetHashCode()
				^ ssOverallPossibleAttendance.GetHashCode()
				^ ssOverallActualAttendance.GetHashCode()
				^ ssOverallTotalLates.GetHashCode()
				^ ssOverallPercentageAttendance.GetHashCode()
				^ ssOverallPercentageLate.GetHashCode()
				^ ssOverallActualAttendanceHours.GetHashCode()
				^ ssOverallPossibleAttendanceHou.GetHashCode()
				^ ssOverallTotalMinsLate.GetHashCode()
				^ ssLastWeekPossibleAttendance.GetHashCode()
				^ ssLastWeekActualAttendance.GetHashCode()
				^ ssLastWeekTotalLates.GetHashCode()
				^ ssLastWeekPercentageAttendance.GetHashCode()
				^ ssLastWeekPercentageLate.GetHashCode()
				^ ssLastWeekActualAttendanceHour.GetHashCode()
				^ ssLastWeekPossibleAttendanceHo.GetHashCode()
				^ ssLastWeekTotalMinsLate.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentAttendanceEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(20, true);
			OptimizedAttributes = new BitArray(20, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssOfferingCode = "";
			_ssAcademicYear = "";
			_ssOverallPossibleAttendance = 0;
			_ssOverallActualAttendance = 0;
			_ssOverallTotalLates = 0;
			_ssOverallPercentageAttendance = 0;
			_ssOverallPercentageLate = 0;
			_ssOverallActualAttendanceHours = 0;
			_ssOverallPossibleAttendanceHou = 0;
			_ssOverallTotalMinsLate = 0;
			_ssLastWeekPossibleAttendance = 0;
			_ssLastWeekActualAttendance = 0;
			_ssLastWeekTotalLates = 0;
			_ssLastWeekPercentageAttendance = 0.0M;
			_ssLastWeekPercentageLate = 0.0M;
			_ssLastWeekActualAttendanceHour = 0;
			_ssLastWeekPossibleAttendanceHo = 0;
			_ssLastWeekTotalMinsLate = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssOfferingCode = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssAcademicYear = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssOverallPossibleAttendance = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssOverallActualAttendance = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssOverallTotalLates = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssOverallPercentageAttendance = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssOverallPercentageLate = (int) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssOverallActualAttendanceHours = (int) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssOverallPossibleAttendanceHou = (int) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssOverallTotalMinsLate = (int) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssLastWeekPossibleAttendance = (int) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssLastWeekActualAttendance = (int) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssLastWeekTotalLates = (int) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssLastWeekPercentageAttendance = (decimal) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssLastWeekPercentageLate = (decimal) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			_ssLastWeekActualAttendanceHour = (int) info.GetValue(fields[17] .Name, fields[17] .FieldType);
			if (fields[18] .FieldType.IsSerializable)
			_ssLastWeekPossibleAttendanceHo = (int) info.GetValue(fields[18] .Name, fields[18] .FieldType);
			if (fields[19] .FieldType.IsSerializable)
			_ssLastWeekTotalMinsLate = (int) info.GetValue(fields[19] .Name, fields[19] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentAttendanceEntityRecord Duplicate() {
			ENStudentAttendanceEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssOfferingCode = this._ssOfferingCode;
			t._ssAcademicYear = this._ssAcademicYear;
			t._ssOverallPossibleAttendance = this._ssOverallPossibleAttendance;
			t._ssOverallActualAttendance = this._ssOverallActualAttendance;
			t._ssOverallTotalLates = this._ssOverallTotalLates;
			t._ssOverallPercentageAttendance = this._ssOverallPercentageAttendance;
			t._ssOverallPercentageLate = this._ssOverallPercentageLate;
			t._ssOverallActualAttendanceHours = this._ssOverallActualAttendanceHours;
			t._ssOverallPossibleAttendanceHou = this._ssOverallPossibleAttendanceHou;
			t._ssOverallTotalMinsLate = this._ssOverallTotalMinsLate;
			t._ssLastWeekPossibleAttendance = this._ssLastWeekPossibleAttendance;
			t._ssLastWeekActualAttendance = this._ssLastWeekActualAttendance;
			t._ssLastWeekTotalLates = this._ssLastWeekTotalLates;
			t._ssLastWeekPercentageAttendance = this._ssLastWeekPercentageAttendance;
			t._ssLastWeekPercentageLate = this._ssLastWeekPercentageLate;
			t._ssLastWeekActualAttendanceHour = this._ssLastWeekActualAttendanceHour;
			t._ssLastWeekPossibleAttendanceHo = this._ssLastWeekPossibleAttendanceHo;
			t._ssLastWeekTotalMinsLate = this._ssLastWeekTotalMinsLate;
			t.ChangedAttributes = new BitArray(20);
			t.OptimizedAttributes = new BitArray(20);
			for (int i = 0; i < 20; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCode")) VarValue.AppendAttribute(recordElem, "OfferingCode", ssOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AcademicYear")) VarValue.AppendAttribute(recordElem, "AcademicYear", ssAcademicYear, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AcademicYear");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallPossibleAttendance")) VarValue.AppendAttribute(recordElem, "OverallPossibleAttendance", ssOverallPossibleAttendance, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallPossibleAttendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallActualAttendance")) VarValue.AppendAttribute(recordElem, "OverallActualAttendance", ssOverallActualAttendance, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallActualAttendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallTotalLates")) VarValue.AppendAttribute(recordElem, "OverallTotalLates", ssOverallTotalLates, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallTotalLates");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallPercentageAttendance")) VarValue.AppendAttribute(recordElem, "OverallPercentageAttendance", ssOverallPercentageAttendance, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallPercentageAttendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallPercentageLate")) VarValue.AppendAttribute(recordElem, "OverallPercentageLate", ssOverallPercentageLate, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallPercentageLate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallActualAttendanceHours")) VarValue.AppendAttribute(recordElem, "OverallActualAttendanceHours", ssOverallActualAttendanceHours, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallActualAttendanceHours");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallPossibleAttendanceHou")) VarValue.AppendAttribute(recordElem, "OverallPossibleAttendanceHou", ssOverallPossibleAttendanceHou, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallPossibleAttendanceHou");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallTotalMinsLate")) VarValue.AppendAttribute(recordElem, "OverallTotalMinsLate", ssOverallTotalMinsLate, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallTotalMinsLate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekPossibleAttendance")) VarValue.AppendAttribute(recordElem, "LastWeekPossibleAttendance", ssLastWeekPossibleAttendance, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekPossibleAttendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekActualAttendance")) VarValue.AppendAttribute(recordElem, "LastWeekActualAttendance", ssLastWeekActualAttendance, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekActualAttendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekTotalLates")) VarValue.AppendAttribute(recordElem, "LastWeekTotalLates", ssLastWeekTotalLates, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekTotalLates");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekPercentageAttendance")) VarValue.AppendAttribute(recordElem, "LastWeekPercentageAttendance", ssLastWeekPercentageAttendance, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekPercentageAttendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekPercentageLate")) VarValue.AppendAttribute(recordElem, "LastWeekPercentageLate", ssLastWeekPercentageLate, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekPercentageLate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekActualAttendanceHour")) VarValue.AppendAttribute(recordElem, "LastWeekActualAttendanceHour", ssLastWeekActualAttendanceHour, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekActualAttendanceHour");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekPossibleAttendanceHo")) VarValue.AppendAttribute(recordElem, "LastWeekPossibleAttendanceHo", ssLastWeekPossibleAttendanceHo, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekPossibleAttendanceHo");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekTotalMinsLate")) VarValue.AppendAttribute(recordElem, "LastWeekTotalMinsLate", ssLastWeekTotalMinsLate, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekTotalMinsLate");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "offeringcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCode")) variable.Value = ssOfferingCode; else variable.Optimized = true;
			} else if (head == "academicyear") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYear")) variable.Value = ssAcademicYear; else variable.Optimized = true;
			} else if (head == "overallpossibleattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallPossibleAttendance")) variable.Value = ssOverallPossibleAttendance; else variable.Optimized = true;
			} else if (head == "overallactualattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallActualAttendance")) variable.Value = ssOverallActualAttendance; else variable.Optimized = true;
			} else if (head == "overalltotallates") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallTotalLates")) variable.Value = ssOverallTotalLates; else variable.Optimized = true;
			} else if (head == "overallpercentageattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallPercentageAttendance")) variable.Value = ssOverallPercentageAttendance; else variable.Optimized = true;
			} else if (head == "overallpercentagelate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallPercentageLate")) variable.Value = ssOverallPercentageLate; else variable.Optimized = true;
			} else if (head == "overallactualattendancehours") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallActualAttendanceHours")) variable.Value = ssOverallActualAttendanceHours; else variable.Optimized = true;
			} else if (head == "overallpossibleattendancehou") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallPossibleAttendanceHou")) variable.Value = ssOverallPossibleAttendanceHou; else variable.Optimized = true;
			} else if (head == "overalltotalminslate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallTotalMinsLate")) variable.Value = ssOverallTotalMinsLate; else variable.Optimized = true;
			} else if (head == "lastweekpossibleattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekPossibleAttendance")) variable.Value = ssLastWeekPossibleAttendance; else variable.Optimized = true;
			} else if (head == "lastweekactualattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekActualAttendance")) variable.Value = ssLastWeekActualAttendance; else variable.Optimized = true;
			} else if (head == "lastweektotallates") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekTotalLates")) variable.Value = ssLastWeekTotalLates; else variable.Optimized = true;
			} else if (head == "lastweekpercentageattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekPercentageAttendance")) variable.Value = ssLastWeekPercentageAttendance; else variable.Optimized = true;
			} else if (head == "lastweekpercentagelate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekPercentageLate")) variable.Value = ssLastWeekPercentageLate; else variable.Optimized = true;
			} else if (head == "lastweekactualattendancehour") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekActualAttendanceHour")) variable.Value = ssLastWeekActualAttendanceHour; else variable.Optimized = true;
			} else if (head == "lastweekpossibleattendanceho") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekPossibleAttendanceHo")) variable.Value = ssLastWeekPossibleAttendanceHo; else variable.Optimized = true;
			} else if (head == "lastweektotalminslate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekTotalMinsLate")) variable.Value = ssLastWeekTotalMinsLate; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdOfferingCode)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdAcademicYear)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdOverallPossibleAttendance)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdOverallActualAttendance)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdOverallTotalLates)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdOverallPercentageAttendance)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdOverallPercentageLate)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdOverallActualAttendanceHours)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdOverallPossibleAttendanceHou)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdOverallTotalMinsLate)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdLastWeekPossibleAttendance)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdLastWeekActualAttendance)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdLastWeekTotalLates)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdLastWeekPercentageAttendance)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdLastWeekPercentageLate)) {
				return ChangedAttributes[16];
			} else if (key.Equals(IdLastWeekActualAttendanceHour)) {
				return ChangedAttributes[17];
			} else if (key.Equals(IdLastWeekPossibleAttendanceHo)) {
				return ChangedAttributes[18];
			} else if (key.Equals(IdLastWeekTotalMinsLate)) {
				return ChangedAttributes[19];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdOfferingCode)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdAcademicYear)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdOverallPossibleAttendance)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdOverallActualAttendance)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdOverallTotalLates)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdOverallPercentageAttendance)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdOverallPercentageLate)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdOverallActualAttendanceHours)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdOverallPossibleAttendanceHou)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdOverallTotalMinsLate)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdLastWeekPossibleAttendance)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdLastWeekActualAttendance)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdLastWeekTotalLates)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdLastWeekPercentageAttendance)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdLastWeekPercentageLate)) {
				return OptimizedAttributes[16];
			} else if (key.Equals(IdLastWeekActualAttendanceHour)) {
				return OptimizedAttributes[17];
			} else if (key.Equals(IdLastWeekPossibleAttendanceHo)) {
				return OptimizedAttributes[18];
			} else if (key.Equals(IdLastWeekTotalMinsLate)) {
				return OptimizedAttributes[19];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdOfferingCode) {
				return ssOfferingCode;
			} else if (key == IdAcademicYear) {
				return ssAcademicYear;
			} else if (key == IdOverallPossibleAttendance) {
				return ssOverallPossibleAttendance;
			} else if (key == IdOverallActualAttendance) {
				return ssOverallActualAttendance;
			} else if (key == IdOverallTotalLates) {
				return ssOverallTotalLates;
			} else if (key == IdOverallPercentageAttendance) {
				return ssOverallPercentageAttendance;
			} else if (key == IdOverallPercentageLate) {
				return ssOverallPercentageLate;
			} else if (key == IdOverallActualAttendanceHours) {
				return ssOverallActualAttendanceHours;
			} else if (key == IdOverallPossibleAttendanceHou) {
				return ssOverallPossibleAttendanceHou;
			} else if (key == IdOverallTotalMinsLate) {
				return ssOverallTotalMinsLate;
			} else if (key == IdLastWeekPossibleAttendance) {
				return ssLastWeekPossibleAttendance;
			} else if (key == IdLastWeekActualAttendance) {
				return ssLastWeekActualAttendance;
			} else if (key == IdLastWeekTotalLates) {
				return ssLastWeekTotalLates;
			} else if (key == IdLastWeekPercentageAttendance) {
				return ssLastWeekPercentageAttendance;
			} else if (key == IdLastWeekPercentageLate) {
				return ssLastWeekPercentageLate;
			} else if (key == IdLastWeekActualAttendanceHour) {
				return ssLastWeekActualAttendanceHour;
			} else if (key == IdLastWeekPossibleAttendanceHo) {
				return ssLastWeekPossibleAttendanceHo;
			} else if (key == IdLastWeekTotalMinsLate) {
				return ssLastWeekTotalMinsLate;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(20);
			OptimizedAttributes = new BitArray(20);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssOfferingCode = (string) other.AttributeGet(IdOfferingCode);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdOfferingCode);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOfferingCode);
			ssAcademicYear = (string) other.AttributeGet(IdAcademicYear);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdAcademicYear);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdAcademicYear);
			ssOverallPossibleAttendance = (int) other.AttributeGet(IdOverallPossibleAttendance);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdOverallPossibleAttendance);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdOverallPossibleAttendance);
			ssOverallActualAttendance = (int) other.AttributeGet(IdOverallActualAttendance);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdOverallActualAttendance);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdOverallActualAttendance);
			ssOverallTotalLates = (int) other.AttributeGet(IdOverallTotalLates);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdOverallTotalLates);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdOverallTotalLates);
			ssOverallPercentageAttendance = (int) other.AttributeGet(IdOverallPercentageAttendance);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdOverallPercentageAttendance);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdOverallPercentageAttendance);
			ssOverallPercentageLate = (int) other.AttributeGet(IdOverallPercentageLate);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdOverallPercentageLate);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdOverallPercentageLate);
			ssOverallActualAttendanceHours = (int) other.AttributeGet(IdOverallActualAttendanceHours);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdOverallActualAttendanceHours);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdOverallActualAttendanceHours);
			ssOverallPossibleAttendanceHou = (int) other.AttributeGet(IdOverallPossibleAttendanceHou);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdOverallPossibleAttendanceHou);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdOverallPossibleAttendanceHou);
			ssOverallTotalMinsLate = (int) other.AttributeGet(IdOverallTotalMinsLate);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdOverallTotalMinsLate);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdOverallTotalMinsLate);
			ssLastWeekPossibleAttendance = (int) other.AttributeGet(IdLastWeekPossibleAttendance);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdLastWeekPossibleAttendance);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdLastWeekPossibleAttendance);
			ssLastWeekActualAttendance = (int) other.AttributeGet(IdLastWeekActualAttendance);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdLastWeekActualAttendance);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdLastWeekActualAttendance);
			ssLastWeekTotalLates = (int) other.AttributeGet(IdLastWeekTotalLates);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdLastWeekTotalLates);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdLastWeekTotalLates);
			ssLastWeekPercentageAttendance = (decimal) other.AttributeGet(IdLastWeekPercentageAttendance);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdLastWeekPercentageAttendance);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdLastWeekPercentageAttendance);
			ssLastWeekPercentageLate = (decimal) other.AttributeGet(IdLastWeekPercentageLate);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdLastWeekPercentageLate);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdLastWeekPercentageLate);
			ssLastWeekActualAttendanceHour = (int) other.AttributeGet(IdLastWeekActualAttendanceHour);
			ChangedAttributes[17] = other.ChangedAttributeGet(IdLastWeekActualAttendanceHour);
			OptimizedAttributes[17] = other.OptimizedAttributeGet(IdLastWeekActualAttendanceHour);
			ssLastWeekPossibleAttendanceHo = (int) other.AttributeGet(IdLastWeekPossibleAttendanceHo);
			ChangedAttributes[18] = other.ChangedAttributeGet(IdLastWeekPossibleAttendanceHo);
			OptimizedAttributes[18] = other.OptimizedAttributeGet(IdLastWeekPossibleAttendanceHo);
			ssLastWeekTotalMinsLate = (int) other.AttributeGet(IdLastWeekTotalMinsLate);
			ChangedAttributes[19] = other.ChangedAttributeGet(IdLastWeekTotalMinsLate);
			OptimizedAttributes[19] = other.OptimizedAttributeGet(IdLastWeekTotalMinsLate);
		}
	} // ENStudentAttendanceEntityRecord
	/// <summary>
	/// Structure <code>RCStudentAttendanceRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentAttendanceRecord: ISerializable, ITypedRecord<RCStudentAttendanceRecord> {
		private static readonly GlobalObjectKey IdStudentAttendance = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*szE2L2jlslZT_F0a3B5wyQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentAttendance")]
		public ENStudentAttendanceEntityRecord ssENStudentAttendance;


		public static implicit operator ENStudentAttendanceEntityRecord(RCStudentAttendanceRecord r) {
			return r.ssENStudentAttendance;
		}

		public static implicit operator RCStudentAttendanceRecord(ENStudentAttendanceEntityRecord r) {
			RCStudentAttendanceRecord res = new RCStudentAttendanceRecord(null);
			res.ssENStudentAttendance = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentAttendance.ChangedAttributes = value;
			}
			get {
				return ssENStudentAttendance.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentAttendanceRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentAttendance = new ENStudentAttendanceEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(20, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentAttendance.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentAttendance.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentAttendance.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentAttendance.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentAttendanceRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentAttendanceRecord a, RCStudentAttendanceRecord b) {
			if (a.ssENStudentAttendance != b.ssENStudentAttendance) return false;
			return true;
		}

		public static bool operator != (RCStudentAttendanceRecord a, RCStudentAttendanceRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentAttendanceRecord)) return false;
			return (this == (RCStudentAttendanceRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentAttendance.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentAttendanceRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentAttendance = new ENStudentAttendanceEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentAttendance = (ENStudentAttendanceEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentAttendance.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentAttendance.InternalRecursiveSave();
		}


		public RCStudentAttendanceRecord Duplicate() {
			RCStudentAttendanceRecord t;
			t.ssENStudentAttendance = (ENStudentAttendanceEntityRecord) this.ssENStudentAttendance.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentAttendance.ToXml(this, recordElem, "StudentAttendance", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentAttendance")) variable.Value = ssENStudentAttendance; else variable.Optimized = true;
				variable.SetFieldName("studentattendance");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentAttendance.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentAttendance.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentAttendance) {
				return ssENStudentAttendance;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentAttendance.FillFromOther((IRecord) other.AttributeGet(IdStudentAttendance));
		}
	} // RCStudentAttendanceRecord
	/// <summary>
	/// RecordList type <code>RLStudentAttendanceRecordList</code> that represents a record list of
	///  <code>StudentAttendance</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentAttendanceRecordList: GenericRecordList<RCStudentAttendanceRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentAttendanceRecord GetElementDefaultValue() {
			return new RCStudentAttendanceRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentAttendanceRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentAttendanceRecordList recordlist, Func<RCStudentAttendanceRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentAttendanceRecordList ToList<T>(T[] array, Func <T, RCStudentAttendanceRecord> converter) {
			RLStudentAttendanceRecordList result = new RLStudentAttendanceRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentAttendanceRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentAttendanceRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(20, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentAttendanceRecord> NewList() {
			return new RLStudentAttendanceRecordList();
		}


	} // RLStudentAttendanceRecordList

	/// <summary>
	/// RecordList type <code>RLStudentAttendanceList</code> that represents a record list of
	///  <code>StudentIdentifier, Text, Text, Decimal, Decimal, Integer, Integer, Integer, Integer, Integer
	/// , Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentAttendanceList: GenericRecordList<ENStudentAttendanceEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentAttendanceEntityRecord GetElementDefaultValue() {
			return new ENStudentAttendanceEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentAttendanceEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentAttendanceList recordlist, Func<ENStudentAttendanceEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentAttendanceList ToList<T>(T[] array, Func <T, ENStudentAttendanceEntityRecord> converter) {
			RLStudentAttendanceList result = new RLStudentAttendanceList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentAttendanceList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentAttendanceList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentAttendanceEntityRecord> NewList() {
			return new RLStudentAttendanceList();
		}


	} // RLStudentAttendanceList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentAttendance
		/// </summary>

		public static void CreateStudentAttendance(HeContext heContext, RCStudentAttendanceRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAttendanceEntity.eSpaceId;
				ENStudentAttendanceEntityRecord ssENStudentAttendance = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentAttendanceEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [OFFERINGCODE]" +
					 ", [ACADEMICYEAR]" +
					 ", [OVERALLPOSSIBLEATTENDANCE]" +
					 ", [OVERALLACTUALATTENDANCE]" +
					 ", [OVERALLTOTALLATES]" +
					 ", [OVERALLPERCENTAGEATTENDANCE]" +
					 ", [OVERALLPERCENTAGELATE]" +
					 ", [OVERALLACTUALATTENDANCEHOURS]" +
					 ", [OVERALLPOSSIBLEATTENDANCEHOU]" +
					 ", [OVERALLTOTALMINSLATE]" +
					 ", [LASTWEEKPOSSIBLEATTENDANCE]" +
					 ", [LASTWEEKACTUALATTENDANCE]" +
					 ", [LASTWEEKTOTALLATES]" +
					 ", [LASTWEEKPERCENTAGEATTENDANCE]" +
					 ", [LASTWEEKPERCENTAGELATE]" +
					 ", [LASTWEEKACTUALATTENDANCEHOUR]" +
					 ", [LASTWEEKPOSSIBLEATTENDANCEHO]" +
					 ", [LASTWEEKTOTALMINSLATE]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssOfferingCode" +
					 ", @ssAcademicYear" +
					 ", @ssOverallPossibleAttendance" +
					 ", @ssOverallActualAttendance" +
					 ", @ssOverallTotalLates" +
					 ", @ssOverallPercentageAttendance" +
					 ", @ssOverallPercentageLate" +
					 ", @ssOverallActualAttendanceHours" +
					 ", @ssOverallPossibleAttendanceHou" +
					 ", @ssOverallTotalMinsLate" +
					 ", @ssLastWeekPossibleAttendance" +
					 ", @ssLastWeekActualAttendance" +
					 ", @ssLastWeekTotalLates" +
					 ", @ssLastWeekPercentageAttendance" +
					 ", @ssLastWeekPercentageLate" +
					 ", @ssLastWeekActualAttendanceHour" +
					 ", @ssLastWeekPossibleAttendanceHo" +
					 ", @ssLastWeekTotalMinsLate" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudentAttendance.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentAttendance.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENStudentAttendance.ssOfferingCode);
					insertSqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudentAttendance.ssAcademicYear);
					insertSqlCmd.CreateParameter("@ssOverallPossibleAttendance", DbType.Int32, ssENStudentAttendance.ssOverallPossibleAttendance);
					insertSqlCmd.CreateParameter("@ssOverallActualAttendance", DbType.Int32, ssENStudentAttendance.ssOverallActualAttendance);
					insertSqlCmd.CreateParameter("@ssOverallTotalLates", DbType.Int32, ssENStudentAttendance.ssOverallTotalLates);
					insertSqlCmd.CreateParameter("@ssOverallPercentageAttendance", DbType.Int32, ssENStudentAttendance.ssOverallPercentageAttendance);
					insertSqlCmd.CreateParameter("@ssOverallPercentageLate", DbType.Int32, ssENStudentAttendance.ssOverallPercentageLate);
					insertSqlCmd.CreateParameter("@ssOverallActualAttendanceHours", DbType.Int32, ssENStudentAttendance.ssOverallActualAttendanceHours);
					insertSqlCmd.CreateParameter("@ssOverallPossibleAttendanceHou", DbType.Int32, ssENStudentAttendance.ssOverallPossibleAttendanceHou);
					insertSqlCmd.CreateParameter("@ssOverallTotalMinsLate", DbType.Int32, ssENStudentAttendance.ssOverallTotalMinsLate);
					insertSqlCmd.CreateParameter("@ssLastWeekPossibleAttendance", DbType.Int32, ssENStudentAttendance.ssLastWeekPossibleAttendance);
					insertSqlCmd.CreateParameter("@ssLastWeekActualAttendance", DbType.Int32, ssENStudentAttendance.ssLastWeekActualAttendance);
					insertSqlCmd.CreateParameter("@ssLastWeekTotalLates", DbType.Int32, ssENStudentAttendance.ssLastWeekTotalLates);
					insertSqlCmd.CreateParameter("@ssLastWeekPercentageAttendance", DbType.Decimal, ssENStudentAttendance.ssLastWeekPercentageAttendance);
					insertSqlCmd.CreateParameter("@ssLastWeekPercentageLate", DbType.Decimal, ssENStudentAttendance.ssLastWeekPercentageLate);
					insertSqlCmd.CreateParameter("@ssLastWeekActualAttendanceHour", DbType.Int32, ssENStudentAttendance.ssLastWeekActualAttendanceHour);
					insertSqlCmd.CreateParameter("@ssLastWeekPossibleAttendanceHo", DbType.Int32, ssENStudentAttendance.ssLastWeekPossibleAttendanceHo);
					insertSqlCmd.CreateParameter("@ssLastWeekTotalMinsLate", DbType.Int32, ssENStudentAttendance.ssLastWeekTotalMinsLate);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentAttendance", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentAttendance
		/// </summary>

		public static void CreateOrUpdateStudentAttendance(HeContext heContext, BitArray usedFields, RCStudentAttendanceRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAttendanceEntity.eSpaceId;
				ENStudentAttendanceEntityRecord ssENStudentAttendance = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(20, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentAttendanceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGCODE] = @ssOfferingCode"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACADEMICYEAR] = @ssAcademicYear"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLPOSSIBLEATTENDANCE] = @ssOverallPossibleAttendance"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLACTUALATTENDANCE] = @ssOverallActualAttendance"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLTOTALLATES] = @ssOverallTotalLates"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLPERCENTAGEATTENDANCE] = @ssOverallPercentageAttendance"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLPERCENTAGELATE] = @ssOverallPercentageLate"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLACTUALATTENDANCEHOURS] = @ssOverallActualAttendanceHours"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLPOSSIBLEATTENDANCEHOU] = @ssOverallPossibleAttendanceHou"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLTOTALMINSLATE] = @ssOverallTotalMinsLate"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKPOSSIBLEATTENDANCE] = @ssLastWeekPossibleAttendance"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKACTUALATTENDANCE] = @ssLastWeekActualAttendance"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKTOTALLATES] = @ssLastWeekTotalLates"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKPERCENTAGEATTENDANCE] = @ssLastWeekPercentageAttendance"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKPERCENTAGELATE] = @ssLastWeekPercentageLate"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKACTUALATTENDANCEHOUR] = @ssLastWeekActualAttendanceHour"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKPOSSIBLEATTENDANCEHO] = @ssLastWeekPossibleAttendanceHo"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKTOTALMINSLATE] = @ssLastWeekTotalMinsLate"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentAttendancessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentAttendance.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentAttendance.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENStudentAttendance.ssOfferingCode);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudentAttendance.ssAcademicYear);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssOverallPossibleAttendance", DbType.Int32, ssENStudentAttendance.ssOverallPossibleAttendance);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssOverallActualAttendance", DbType.Int32, ssENStudentAttendance.ssOverallActualAttendance);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssOverallTotalLates", DbType.Int32, ssENStudentAttendance.ssOverallTotalLates);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssOverallPercentageAttendance", DbType.Int32, ssENStudentAttendance.ssOverallPercentageAttendance);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssOverallPercentageLate", DbType.Int32, ssENStudentAttendance.ssOverallPercentageLate);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssOverallActualAttendanceHours", DbType.Int32, ssENStudentAttendance.ssOverallActualAttendanceHours);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssOverallPossibleAttendanceHou", DbType.Int32, ssENStudentAttendance.ssOverallPossibleAttendanceHou);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssOverallTotalMinsLate", DbType.Int32, ssENStudentAttendance.ssOverallTotalMinsLate);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssLastWeekPossibleAttendance", DbType.Int32, ssENStudentAttendance.ssLastWeekPossibleAttendance);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssLastWeekActualAttendance", DbType.Int32, ssENStudentAttendance.ssLastWeekActualAttendance);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssLastWeekTotalLates", DbType.Int32, ssENStudentAttendance.ssLastWeekTotalLates);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssLastWeekPercentageAttendance", DbType.Decimal, ssENStudentAttendance.ssLastWeekPercentageAttendance);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssLastWeekPercentageLate", DbType.Decimal, ssENStudentAttendance.ssLastWeekPercentageLate);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssLastWeekActualAttendanceHour", DbType.Int32, ssENStudentAttendance.ssLastWeekActualAttendanceHour);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssLastWeekPossibleAttendanceHo", DbType.Int32, ssENStudentAttendance.ssLastWeekPossibleAttendanceHo);
						counter++;
					}
					if (usedFields[19]) {
						sqlCmd.CreateParameter("@ssLastWeekTotalMinsLate", DbType.Int32, ssENStudentAttendance.ssLastWeekTotalMinsLate);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[OVERALLPOSSIBLEATTENDANCE] = [OVERALLPOSSIBLEATTENDANCE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentAttendancessId", DbType.Int32, ssENStudentAttendance.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentAttendance (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentAttendanceEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [OFFERINGCODE]" +
						 ", [ACADEMICYEAR]" +
						 ", [OVERALLPOSSIBLEATTENDANCE]" +
						 ", [OVERALLACTUALATTENDANCE]" +
						 ", [OVERALLTOTALLATES]" +
						 ", [OVERALLPERCENTAGEATTENDANCE]" +
						 ", [OVERALLPERCENTAGELATE]" +
						 ", [OVERALLACTUALATTENDANCEHOURS]" +
						 ", [OVERALLPOSSIBLEATTENDANCEHOU]" +
						 ", [OVERALLTOTALMINSLATE]" +
						 ", [LASTWEEKPOSSIBLEATTENDANCE]" +
						 ", [LASTWEEKACTUALATTENDANCE]" +
						 ", [LASTWEEKTOTALLATES]" +
						 ", [LASTWEEKPERCENTAGEATTENDANCE]" +
						 ", [LASTWEEKPERCENTAGELATE]" +
						 ", [LASTWEEKACTUALATTENDANCEHOUR]" +
						 ", [LASTWEEKPOSSIBLEATTENDANCEHO]" +
						 ", [LASTWEEKTOTALMINSLATE]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssOfferingCode" +
						 ", @ssAcademicYear" +
						 ", @ssOverallPossibleAttendance" +
						 ", @ssOverallActualAttendance" +
						 ", @ssOverallTotalLates" +
						 ", @ssOverallPercentageAttendance" +
						 ", @ssOverallPercentageLate" +
						 ", @ssOverallActualAttendanceHours" +
						 ", @ssOverallPossibleAttendanceHou" +
						 ", @ssOverallTotalMinsLate" +
						 ", @ssLastWeekPossibleAttendance" +
						 ", @ssLastWeekActualAttendance" +
						 ", @ssLastWeekTotalLates" +
						 ", @ssLastWeekPercentageAttendance" +
						 ", @ssLastWeekPercentageLate" +
						 ", @ssLastWeekActualAttendanceHour" +
						 ", @ssLastWeekPossibleAttendanceHo" +
						 ", @ssLastWeekTotalMinsLate" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudentAttendance.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentAttendance.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENStudentAttendance.ssOfferingCode);
						insertSqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudentAttendance.ssAcademicYear);
						insertSqlCmd.CreateParameter("@ssOverallPossibleAttendance", DbType.Int32, ssENStudentAttendance.ssOverallPossibleAttendance);
						insertSqlCmd.CreateParameter("@ssOverallActualAttendance", DbType.Int32, ssENStudentAttendance.ssOverallActualAttendance);
						insertSqlCmd.CreateParameter("@ssOverallTotalLates", DbType.Int32, ssENStudentAttendance.ssOverallTotalLates);
						insertSqlCmd.CreateParameter("@ssOverallPercentageAttendance", DbType.Int32, ssENStudentAttendance.ssOverallPercentageAttendance);
						insertSqlCmd.CreateParameter("@ssOverallPercentageLate", DbType.Int32, ssENStudentAttendance.ssOverallPercentageLate);
						insertSqlCmd.CreateParameter("@ssOverallActualAttendanceHours", DbType.Int32, ssENStudentAttendance.ssOverallActualAttendanceHours);
						insertSqlCmd.CreateParameter("@ssOverallPossibleAttendanceHou", DbType.Int32, ssENStudentAttendance.ssOverallPossibleAttendanceHou);
						insertSqlCmd.CreateParameter("@ssOverallTotalMinsLate", DbType.Int32, ssENStudentAttendance.ssOverallTotalMinsLate);
						insertSqlCmd.CreateParameter("@ssLastWeekPossibleAttendance", DbType.Int32, ssENStudentAttendance.ssLastWeekPossibleAttendance);
						insertSqlCmd.CreateParameter("@ssLastWeekActualAttendance", DbType.Int32, ssENStudentAttendance.ssLastWeekActualAttendance);
						insertSqlCmd.CreateParameter("@ssLastWeekTotalLates", DbType.Int32, ssENStudentAttendance.ssLastWeekTotalLates);
						insertSqlCmd.CreateParameter("@ssLastWeekPercentageAttendance", DbType.Decimal, ssENStudentAttendance.ssLastWeekPercentageAttendance);
						insertSqlCmd.CreateParameter("@ssLastWeekPercentageLate", DbType.Decimal, ssENStudentAttendance.ssLastWeekPercentageLate);
						insertSqlCmd.CreateParameter("@ssLastWeekActualAttendanceHour", DbType.Int32, ssENStudentAttendance.ssLastWeekActualAttendanceHour);
						insertSqlCmd.CreateParameter("@ssLastWeekPossibleAttendanceHo", DbType.Int32, ssENStudentAttendance.ssLastWeekPossibleAttendanceHo);
						insertSqlCmd.CreateParameter("@ssLastWeekTotalMinsLate", DbType.Int32, ssENStudentAttendance.ssLastWeekTotalMinsLate);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentAttendance", true), typeof(int));
					} else {
						outParamId = ssENStudentAttendance.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentAttendance
		/// </summary>

		public static void DeleteStudentAttendance(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAttendanceEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentAttendanceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentAttendance", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentAttendance
		/// </summary>

		public static void GetStudentAttendance(HeContext heContext, int inParamId, out RCStudentAttendanceRecord outParamRecord) {
			outParamRecord = new RCStudentAttendanceRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAttendanceEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [OFFERINGCODE]" +
					 ", [ACADEMICYEAR]" +
					 ", [OVERALLPOSSIBLEATTENDANCE]" +
					 ", [OVERALLACTUALATTENDANCE]" +
					 ", [OVERALLTOTALLATES]" +
					 ", [OVERALLPERCENTAGEATTENDANCE]" +
					 ", [OVERALLPERCENTAGELATE]" +
					 ", [OVERALLACTUALATTENDANCEHOURS]" +
					 ", [OVERALLPOSSIBLEATTENDANCEHOU]" +
					 ", [OVERALLTOTALMINSLATE]" +
					 ", [LASTWEEKPOSSIBLEATTENDANCE]" +
					 ", [LASTWEEKACTUALATTENDANCE]" +
					 ", [LASTWEEKTOTALLATES]" +
					 ", [LASTWEEKPERCENTAGEATTENDANCE]" +
					 ", [LASTWEEKPERCENTAGELATE]" +
					 ", [LASTWEEKACTUALATTENDANCEHOUR]" +
					 ", [LASTWEEKPOSSIBLEATTENDANCEHO]" +
					 ", [LASTWEEKTOTALMINSLATE]" +
					 " FROM " + ENStudentAttendanceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentAttendance", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(20, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentAttendanceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentAttendanceForUpdate
		/// </summary>

		public static void GetStudentAttendanceForUpdate(HeContext heContext, int inParamId, out RCStudentAttendanceRecord outParamRecord) {
			outParamRecord = new RCStudentAttendanceRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAttendanceEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [OFFERINGCODE]" +
					 ", [ACADEMICYEAR]" +
					 ", [OVERALLPOSSIBLEATTENDANCE]" +
					 ", [OVERALLACTUALATTENDANCE]" +
					 ", [OVERALLTOTALLATES]" +
					 ", [OVERALLPERCENTAGEATTENDANCE]" +
					 ", [OVERALLPERCENTAGELATE]" +
					 ", [OVERALLACTUALATTENDANCEHOURS]" +
					 ", [OVERALLPOSSIBLEATTENDANCEHOU]" +
					 ", [OVERALLTOTALMINSLATE]" +
					 ", [LASTWEEKPOSSIBLEATTENDANCE]" +
					 ", [LASTWEEKACTUALATTENDANCE]" +
					 ", [LASTWEEKTOTALLATES]" +
					 ", [LASTWEEKPERCENTAGEATTENDANCE]" +
					 ", [LASTWEEKPERCENTAGELATE]" +
					 ", [LASTWEEKACTUALATTENDANCEHOUR]" +
					 ", [LASTWEEKPOSSIBLEATTENDANCEHO]" +
					 ", [LASTWEEKTOTALMINSLATE]" +
					 "FROM " + ENStudentAttendanceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentAttendanceForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(20, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentAttendanceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentAttendance
		/// </summary>

		public static void UpdateStudentAttendance(HeContext heContext, BitArray usedFields, RCStudentAttendanceRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentAttendanceEntity.eSpaceId;
				ENStudentAttendanceEntityRecord ssENStudentAttendance = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(20, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentAttendanceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGCODE] = @ssOfferingCode"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACADEMICYEAR] = @ssAcademicYear"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLPOSSIBLEATTENDANCE] = @ssOverallPossibleAttendance"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLACTUALATTENDANCE] = @ssOverallActualAttendance"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLTOTALLATES] = @ssOverallTotalLates"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLPERCENTAGEATTENDANCE] = @ssOverallPercentageAttendance"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLPERCENTAGELATE] = @ssOverallPercentageLate"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLACTUALATTENDANCEHOURS] = @ssOverallActualAttendanceHours"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLPOSSIBLEATTENDANCEHOU] = @ssOverallPossibleAttendanceHou"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OVERALLTOTALMINSLATE] = @ssOverallTotalMinsLate"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKPOSSIBLEATTENDANCE] = @ssLastWeekPossibleAttendance"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKACTUALATTENDANCE] = @ssLastWeekActualAttendance"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKTOTALLATES] = @ssLastWeekTotalLates"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKPERCENTAGEATTENDANCE] = @ssLastWeekPercentageAttendance"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKPERCENTAGELATE] = @ssLastWeekPercentageLate"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKACTUALATTENDANCEHOUR] = @ssLastWeekActualAttendanceHour"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKPOSSIBLEATTENDANCEHO] = @ssLastWeekPossibleAttendanceHo"): parameters);
					parameters = (usedFields[19] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTWEEKTOTALMINSLATE] = @ssLastWeekTotalMinsLate"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentAttendancessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentAttendance.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentAttendance.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENStudentAttendance.ssOfferingCode);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudentAttendance.ssAcademicYear);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssOverallPossibleAttendance", DbType.Int32, ssENStudentAttendance.ssOverallPossibleAttendance);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssOverallActualAttendance", DbType.Int32, ssENStudentAttendance.ssOverallActualAttendance);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssOverallTotalLates", DbType.Int32, ssENStudentAttendance.ssOverallTotalLates);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssOverallPercentageAttendance", DbType.Int32, ssENStudentAttendance.ssOverallPercentageAttendance);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssOverallPercentageLate", DbType.Int32, ssENStudentAttendance.ssOverallPercentageLate);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssOverallActualAttendanceHours", DbType.Int32, ssENStudentAttendance.ssOverallActualAttendanceHours);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssOverallPossibleAttendanceHou", DbType.Int32, ssENStudentAttendance.ssOverallPossibleAttendanceHou);
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssOverallTotalMinsLate", DbType.Int32, ssENStudentAttendance.ssOverallTotalMinsLate);
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssLastWeekPossibleAttendance", DbType.Int32, ssENStudentAttendance.ssLastWeekPossibleAttendance);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssLastWeekActualAttendance", DbType.Int32, ssENStudentAttendance.ssLastWeekActualAttendance);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssLastWeekTotalLates", DbType.Int32, ssENStudentAttendance.ssLastWeekTotalLates);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssLastWeekPercentageAttendance", DbType.Decimal, ssENStudentAttendance.ssLastWeekPercentageAttendance);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssLastWeekPercentageLate", DbType.Decimal, ssENStudentAttendance.ssLastWeekPercentageLate);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssLastWeekActualAttendanceHour", DbType.Int32, ssENStudentAttendance.ssLastWeekActualAttendanceHour);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssLastWeekPossibleAttendanceHo", DbType.Int32, ssENStudentAttendance.ssLastWeekPossibleAttendanceHo);
						counter++;
					}
					if (usedFields[19]) {
						sqlCmd.CreateParameter("@ssLastWeekTotalMinsLate", DbType.Int32, ssENStudentAttendance.ssLastWeekTotalMinsLate);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[OVERALLPOSSIBLEATTENDANCE] = [OVERALLPOSSIBLEATTENDANCE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentAttendancessId", DbType.Int32, ssENStudentAttendance.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentAttendance", true) <= 0)
					throw new DataBaseException(ENStudentAttendanceEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentAttendance.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentAttendance")]
	public class WORCStudentAttendanceRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string varWSOfferingCode;

		[System.Xml.Serialization.XmlElement("AcademicYear")]
		public string varWSAcademicYear;

		[System.Xml.Serialization.XmlElement("OverallPossibleAttendance")]
		public int varWSOverallPossibleAttendance;

		[System.Xml.Serialization.XmlElement("OverallActualAttendance")]
		public int varWSOverallActualAttendance;

		[System.Xml.Serialization.XmlElement("OverallTotalLates")]
		public int varWSOverallTotalLates;

		[System.Xml.Serialization.XmlElement("OverallPercentageAttendance")]
		public int varWSOverallPercentageAttendance;

		[System.Xml.Serialization.XmlElement("OverallPercentageLate")]
		public int varWSOverallPercentageLate;

		[System.Xml.Serialization.XmlElement("OverallActualAttendanceHours")]
		public int varWSOverallActualAttendanceHours;

		[System.Xml.Serialization.XmlElement("OverallPossibleAttendanceHou")]
		public int varWSOverallPossibleAttendanceHou;

		[System.Xml.Serialization.XmlElement("OverallTotalMinsLate")]
		public int varWSOverallTotalMinsLate;

		[System.Xml.Serialization.XmlElement("LastWeekPossibleAttendance")]
		public int varWSLastWeekPossibleAttendance;

		[System.Xml.Serialization.XmlElement("LastWeekActualAttendance")]
		public int varWSLastWeekActualAttendance;

		[System.Xml.Serialization.XmlElement("LastWeekTotalLates")]
		public int varWSLastWeekTotalLates;

		[System.Xml.Serialization.XmlElement("LastWeekPercentageAttendance")]
		public decimal varWSLastWeekPercentageAttendance;

		[System.Xml.Serialization.XmlElement("LastWeekPercentageLate")]
		public decimal varWSLastWeekPercentageLate;

		[System.Xml.Serialization.XmlElement("LastWeekActualAttendanceHour")]
		public int varWSLastWeekActualAttendanceHour;

		[System.Xml.Serialization.XmlElement("LastWeekPossibleAttendanceHo")]
		public int varWSLastWeekPossibleAttendanceHo;

		[System.Xml.Serialization.XmlElement("LastWeekTotalMinsLate")]
		public int varWSLastWeekTotalMinsLate;

		public WORCStudentAttendanceRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSOfferingCode = (string) "";
			varWSAcademicYear = (string) "";
			varWSOverallPossibleAttendance = (int) 0;
			varWSOverallActualAttendance = (int) 0;
			varWSOverallTotalLates = (int) 0;
			varWSOverallPercentageAttendance = (int) 0;
			varWSOverallPercentageLate = (int) 0;
			varWSOverallActualAttendanceHours = (int) 0;
			varWSOverallPossibleAttendanceHou = (int) 0;
			varWSOverallTotalMinsLate = (int) 0;
			varWSLastWeekPossibleAttendance = (int) 0;
			varWSLastWeekActualAttendance = (int) 0;
			varWSLastWeekTotalLates = (int) 0;
			varWSLastWeekPercentageAttendance = (decimal) 0.0M;
			varWSLastWeekPercentageLate = (decimal) 0.0M;
			varWSLastWeekActualAttendanceHour = (int) 0;
			varWSLastWeekPossibleAttendanceHo = (int) 0;
			varWSLastWeekTotalMinsLate = (int) 0;
		}

		public WORCStudentAttendanceRecord(ENStudentAttendanceEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSOfferingCode = BaseAppUtils.RemoveControlChars(r.ssOfferingCode);
			varWSAcademicYear = BaseAppUtils.RemoveControlChars(r.ssAcademicYear);
			varWSOverallPossibleAttendance = (int) r.ssOverallPossibleAttendance;
			varWSOverallActualAttendance = (int) r.ssOverallActualAttendance;
			varWSOverallTotalLates = (int) r.ssOverallTotalLates;
			varWSOverallPercentageAttendance = (int) r.ssOverallPercentageAttendance;
			varWSOverallPercentageLate = (int) r.ssOverallPercentageLate;
			varWSOverallActualAttendanceHours = (int) r.ssOverallActualAttendanceHours;
			varWSOverallPossibleAttendanceHou = (int) r.ssOverallPossibleAttendanceHou;
			varWSOverallTotalMinsLate = (int) r.ssOverallTotalMinsLate;
			varWSLastWeekPossibleAttendance = (int) r.ssLastWeekPossibleAttendance;
			varWSLastWeekActualAttendance = (int) r.ssLastWeekActualAttendance;
			varWSLastWeekTotalLates = (int) r.ssLastWeekTotalLates;
			varWSLastWeekPercentageAttendance = (decimal) r.ssLastWeekPercentageAttendance;
			varWSLastWeekPercentageLate = (decimal) r.ssLastWeekPercentageLate;
			varWSLastWeekActualAttendanceHour = (int) r.ssLastWeekActualAttendanceHour;
			varWSLastWeekPossibleAttendanceHo = (int) r.ssLastWeekPossibleAttendanceHo;
			varWSLastWeekTotalMinsLate = (int) r.ssLastWeekTotalMinsLate;
		}

		public static RLStudentAttendanceList ToRecordList(WORCStudentAttendanceRecord[] array) {
			RLStudentAttendanceList rl = new RLStudentAttendanceList();
			if (array != null) {
				foreach(WORCStudentAttendanceRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentAttendanceRecord[] FromRecordList(RLStudentAttendanceList rl) {
			WORCStudentAttendanceRecord[] array = new WORCStudentAttendanceRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentAttendanceRecord {
		public static implicit operator WORCStudentAttendanceRecord(RCStudentAttendanceRecord r) {
			return new WORCStudentAttendanceRecord(r.ssENStudentAttendance);
		}

		public static implicit operator RCStudentAttendanceRecord(WORCStudentAttendanceRecord w) {
			RCStudentAttendanceRecord r = new RCStudentAttendanceRecord("");
			if (w != null) {
				r.ssENStudentAttendance = w;
			}
			return r;
		}

	}

	partial struct ENStudentAttendanceEntityRecord {
		public static implicit operator WORCStudentAttendanceRecord(ENStudentAttendanceEntityRecord r) {
			return new WORCStudentAttendanceRecord(r);
		}

		public static implicit operator ENStudentAttendanceEntityRecord(WORCStudentAttendanceRecord w) {
			ENStudentAttendanceEntityRecord r = new ENStudentAttendanceEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssOfferingCode = ((string) w.varWSOfferingCode ?? "");
				r.ssAcademicYear = ((string) w.varWSAcademicYear ?? "");
				r.ssOverallPossibleAttendance = (int) w.varWSOverallPossibleAttendance;
				r.ssOverallActualAttendance = (int) w.varWSOverallActualAttendance;
				r.ssOverallTotalLates = (int) w.varWSOverallTotalLates;
				r.ssOverallPercentageAttendance = (int) w.varWSOverallPercentageAttendance;
				r.ssOverallPercentageLate = (int) w.varWSOverallPercentageLate;
				r.ssOverallActualAttendanceHours = (int) w.varWSOverallActualAttendanceHours;
				r.ssOverallPossibleAttendanceHou = (int) w.varWSOverallPossibleAttendanceHou;
				r.ssOverallTotalMinsLate = (int) w.varWSOverallTotalMinsLate;
				r.ssLastWeekPossibleAttendance = (int) w.varWSLastWeekPossibleAttendance;
				r.ssLastWeekActualAttendance = (int) w.varWSLastWeekActualAttendance;
				r.ssLastWeekTotalLates = (int) w.varWSLastWeekTotalLates;
				r.ssLastWeekPercentageAttendance = (decimal) w.varWSLastWeekPercentageAttendance;
				r.ssLastWeekPercentageLate = (decimal) w.varWSLastWeekPercentageLate;
				r.ssLastWeekActualAttendanceHour = (int) w.varWSLastWeekActualAttendanceHour;
				r.ssLastWeekPossibleAttendanceHo = (int) w.varWSLastWeekPossibleAttendanceHo;
				r.ssLastWeekTotalMinsLate = (int) w.varWSLastWeekTotalMinsLate;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentAttendanceRecordList {
		public WORCStudentAttendanceRecord[] Array;


		public WORLStudentAttendanceRecordList(WORCStudentAttendanceRecord[] r) {
			if (r == null)
			Array = new WORCStudentAttendanceRecord[0];
			else
			Array = r;
		}
		public WORLStudentAttendanceRecordList() {
			Array = new WORCStudentAttendanceRecord[0];
		}

		public WORLStudentAttendanceRecordList(RLStudentAttendanceRecordList rl) {
			rl=(RLStudentAttendanceRecordList) rl.Duplicate();
			Array = new WORCStudentAttendanceRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentAttendanceRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentAttendanceRecordList {
		public static implicit operator RLStudentAttendanceRecordList(WORCStudentAttendanceRecord[] array) {
			RLStudentAttendanceRecordList rl = new RLStudentAttendanceRecordList();
			if (array != null) {
				foreach(WORCStudentAttendanceRecord val in array) {
					rl.Append((RCStudentAttendanceRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentAttendanceRecord[](RLStudentAttendanceRecordList rl) {
			WORCStudentAttendanceRecord[] array = new WORCStudentAttendanceRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentAttendanceRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentAttendanceRecordList {
		public static implicit operator RLStudentAttendanceRecordList(WORLStudentAttendanceRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentAttendanceRecordList(RLStudentAttendanceRecordList rl) {
			return new WORLStudentAttendanceRecordList(rl);
		}
		public static implicit operator WORCStudentAttendanceRecord[](WORLStudentAttendanceRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentAttendanceRecordList(WORCStudentAttendanceRecord[] array) {
			return new WORLStudentAttendanceRecordList(array);
		}
	}
}

