/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENTrackingEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENTrackingEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENTrackingEntity.eSpaceId;
	} // ENTrackingEntity

	/// <summary>
	/// Entity <code>ENTrackingEntityRecord</code> that represents the Service Studio entity
	///  <code>Tracking</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Tracking", "bzE_bKrm5Uief+UMhP75Qg", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Tracking", "")]
	[Serializable()]
	public partial struct ENTrackingEntityRecord: ISerializable, ITypedRecord<ENTrackingEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*ZMI4Bnfkqky6LCdpdx631Q");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*6aA0R+b6uki_6P9yGaL_dA");
		private static readonly GlobalObjectKey IdOfferingCode = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*ibIW+ozTUEOk3Z5jtxvF+A");
		private static readonly GlobalObjectKey IdOfferingName = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*IUVKVIGTW0qfZx5fwSQlxQ");
		private static readonly GlobalObjectKey IdOfferingCategory = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*AulP7m4adki4kTsvwYMsrQ");
		private static readonly GlobalObjectKey IdUnit = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*Abg81173n0yHb+R4xf64ng");
		private static readonly GlobalObjectKey IdUnitOrder = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*68D1JvKT8kqnFs1xCz7jgQ");
		private static readonly GlobalObjectKey IdStatus = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*kmkOVcSktEennZm+CSB0KA");
		private static readonly GlobalObjectKey IdCompletionDate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*rGSXxVnJ7EySRHvTAU3NTw");
		private static readonly GlobalObjectKey IdStudentUnitId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*ZxNJyf3veEWa4lb8H+LoLw");
		private static readonly GlobalObjectKey IdDueDate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*aTewagLERUWMhveYZvYUcQ");
		private static readonly GlobalObjectKey IdTrackingType = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*DvAJGxrpm0yVwGl4rfOvwg");
		private static readonly GlobalObjectKey IdCompletionTpe = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*Y8e246M9q0WcZVnwQkdYLQ");
		private static readonly GlobalObjectKey IdCompletionELE = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*LibA_bUB50u97JxibjaRoA");
		private static readonly GlobalObjectKey IdCompletionTheory = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*ZBDltm+4n0CkoEmyQEGXRw");
		private static readonly GlobalObjectKey IdCompletionPractical = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*IAfsW9nVmUuLAkbgsvxSrA");
		private static readonly GlobalObjectKey IdCompletionExam = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*vRNXY+u39kCR_s+FfGKvsQ");
		private static readonly GlobalObjectKey IdCompletionElements = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*E4qyNbS1q0OJOkqvDbkoWw");
		private static readonly GlobalObjectKey IdCompletionCredit = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*dwlzzEzShESmCIPPA0jIlw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(19, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OFFERINGCODE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("OfferingCode")]
		private string _ssOfferingCode;
		public string ssOfferingCode {
			get {
				return _ssOfferingCode;
			}
			set {
				if ((_ssOfferingCode!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssOfferingCode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OFFERINGNAME", 250, false, false, false)]
		[System.Xml.Serialization.XmlElement("OfferingName")]
		private string _ssOfferingName;
		public string ssOfferingName {
			get {
				return _ssOfferingName;
			}
			set {
				if ((_ssOfferingName!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssOfferingName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("OFFERINGCATEGORY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("OfferingCategory")]
		private int _ssOfferingCategory;
		public int ssOfferingCategory {
			get {
				return _ssOfferingCategory;
			}
			set {
				if ((_ssOfferingCategory!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssOfferingCategory = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UNIT", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("Unit")]
		private string _ssUnit;
		public string ssUnit {
			get {
				return _ssUnit;
			}
			set {
				if ((_ssUnit!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssUnit = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UNITORDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("UnitOrder")]
		private int _ssUnitOrder;
		public int ssUnitOrder {
			get {
				return _ssUnitOrder;
			}
			set {
				if ((_ssUnitOrder!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssUnitOrder = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STATUS", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("Status")]
		private string _ssStatus;
		public string ssStatus {
			get {
				return _ssStatus;
			}
			set {
				if ((_ssStatus!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssStatus = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETIONDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompletionDate")]
		private DateTime _ssCompletionDate;
		public DateTime ssCompletionDate {
			get {
				return _ssCompletionDate;
			}
			set {
				if ((_ssCompletionDate!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssCompletionDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTUNITID", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("StudentUnitId")]
		private int _ssStudentUnitId;
		public int ssStudentUnitId {
			get {
				return _ssStudentUnitId;
			}
			set {
				if ((_ssStudentUnitId!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssStudentUnitId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DUEDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("DueDate")]
		private DateTime _ssDueDate;
		public DateTime ssDueDate {
			get {
				return _ssDueDate;
			}
			set {
				if ((_ssDueDate!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssDueDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TRACKINGTYPE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("TrackingType")]
		private string _ssTrackingType;
		public string ssTrackingType {
			get {
				return _ssTrackingType;
			}
			set {
				if ((_ssTrackingType!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssTrackingType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETIONTPE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompletionTpe")]
		private string _ssCompletionTpe;
		public string ssCompletionTpe {
			get {
				return _ssCompletionTpe;
			}
			set {
				if ((_ssCompletionTpe!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssCompletionTpe = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETIONELE", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompletionELE")]
		private string _ssCompletionELE;
		public string ssCompletionELE {
			get {
				return _ssCompletionELE;
			}
			set {
				if ((_ssCompletionELE!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssCompletionELE = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETIONTHEORY", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompletionTheory")]
		private string _ssCompletionTheory;
		public string ssCompletionTheory {
			get {
				return _ssCompletionTheory;
			}
			set {
				if ((_ssCompletionTheory!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssCompletionTheory = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETIONPRACTICAL", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompletionPractical")]
		private string _ssCompletionPractical;
		public string ssCompletionPractical {
			get {
				return _ssCompletionPractical;
			}
			set {
				if ((_ssCompletionPractical!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssCompletionPractical = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETIONEXAM", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompletionExam")]
		private string _ssCompletionExam;
		public string ssCompletionExam {
			get {
				return _ssCompletionExam;
			}
			set {
				if ((_ssCompletionExam!=value) || OptimizedAttributes[16]) {
					ChangedAttributes[16] = true;
					_ssCompletionExam = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETIONELEMENTS", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompletionElements")]
		private string _ssCompletionElements;
		public string ssCompletionElements {
			get {
				return _ssCompletionElements;
			}
			set {
				if ((_ssCompletionElements!=value) || OptimizedAttributes[17]) {
					ChangedAttributes[17] = true;
					_ssCompletionElements = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMPLETIONCREDIT", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("CompletionCredit")]
		private string _ssCompletionCredit;
		public string ssCompletionCredit {
			get {
				return _ssCompletionCredit;
			}
			set {
				if ((_ssCompletionCredit!=value) || OptimizedAttributes[18]) {
					ChangedAttributes[18] = true;
					_ssCompletionCredit = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENTrackingEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(19, true);
			OptimizedAttributes = new BitArray(19, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssOfferingCode = "";
			_ssOfferingName = "";
			_ssOfferingCategory = 0;
			_ssUnit = "";
			_ssUnitOrder = 0;
			_ssStatus = "";
			_ssCompletionDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStudentUnitId = 0;
			_ssDueDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssTrackingType = "";
			_ssCompletionTpe = "";
			_ssCompletionELE = "";
			_ssCompletionTheory = "";
			_ssCompletionPractical = "";
			_ssCompletionExam = "";
			_ssCompletionElements = "";
			_ssCompletionCredit = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Tracking.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "Tracking.StudentReference", "");
			ssOfferingCode = r.ReadText(index++, "Tracking.OfferingCode", "");
			ssOfferingName = r.ReadText(index++, "Tracking.OfferingName", "");
			ssOfferingCategory = r.ReadEntityReference(index++, "Tracking.OfferingCategory", 0);
			ssUnit = r.ReadText(index++, "Tracking.Unit", "");
			ssUnitOrder = r.ReadInteger(index++, "Tracking.UnitOrder", 0);
			ssStatus = r.ReadText(index++, "Tracking.Status", "");
			ssCompletionDate = r.ReadDate(index++, "Tracking.CompletionDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentUnitId = r.ReadInteger(index++, "Tracking.StudentUnitId", 0);
			ssDueDate = r.ReadDate(index++, "Tracking.DueDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssTrackingType = r.ReadTextEntityReference(index++, "Tracking.TrackingType", "");
			ssCompletionTpe = r.ReadText(index++, "Tracking.CompletionTpe", "");
			ssCompletionELE = r.ReadText(index++, "Tracking.CompletionELE", "");
			ssCompletionTheory = r.ReadText(index++, "Tracking.CompletionTheory", "");
			ssCompletionPractical = r.ReadText(index++, "Tracking.CompletionPractical", "");
			ssCompletionExam = r.ReadText(index++, "Tracking.CompletionExam", "");
			ssCompletionElements = r.ReadText(index++, "Tracking.CompletionElements", "");
			ssCompletionCredit = r.ReadText(index++, "Tracking.CompletionCredit", "");
			ChangedAttributes = new BitArray(19, false);
			OptimizedAttributes = new BitArray(19, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENTrackingEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENTrackingEntityRecord a, ENTrackingEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssOfferingCode != b.ssOfferingCode) return false;
			if (a.ssOfferingName != b.ssOfferingName) return false;
			if (a.ssOfferingCategory != b.ssOfferingCategory) return false;
			if (a.ssUnit != b.ssUnit) return false;
			if (a.ssUnitOrder != b.ssUnitOrder) return false;
			if (a.ssStatus != b.ssStatus) return false;
			if (a.ssCompletionDate != b.ssCompletionDate) return false;
			if (a.ssStudentUnitId != b.ssStudentUnitId) return false;
			if (a.ssDueDate != b.ssDueDate) return false;
			if (a.ssTrackingType != b.ssTrackingType) return false;
			if (a.ssCompletionTpe != b.ssCompletionTpe) return false;
			if (a.ssCompletionELE != b.ssCompletionELE) return false;
			if (a.ssCompletionTheory != b.ssCompletionTheory) return false;
			if (a.ssCompletionPractical != b.ssCompletionPractical) return false;
			if (a.ssCompletionExam != b.ssCompletionExam) return false;
			if (a.ssCompletionElements != b.ssCompletionElements) return false;
			if (a.ssCompletionCredit != b.ssCompletionCredit) return false;
			return true;
		}

		public static bool operator != (ENTrackingEntityRecord a, ENTrackingEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENTrackingEntityRecord)) return false;
			return (this == (ENTrackingEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssOfferingCode.GetHashCode()
				^ ssOfferingName.GetHashCode()
				^ ssOfferingCategory.GetHashCode()
				^ ssUnit.GetHashCode()
				^ ssUnitOrder.GetHashCode()
				^ ssStatus.GetHashCode()
				^ ssCompletionDate.GetHashCode()
				^ ssStudentUnitId.GetHashCode()
				^ ssDueDate.GetHashCode()
				^ ssTrackingType.GetHashCode()
				^ ssCompletionTpe.GetHashCode()
				^ ssCompletionELE.GetHashCode()
				^ ssCompletionTheory.GetHashCode()
				^ ssCompletionPractical.GetHashCode()
				^ ssCompletionExam.GetHashCode()
				^ ssCompletionElements.GetHashCode()
				^ ssCompletionCredit.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENTrackingEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(19, true);
			OptimizedAttributes = new BitArray(19, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssOfferingCode = "";
			_ssOfferingName = "";
			_ssOfferingCategory = 0;
			_ssUnit = "";
			_ssUnitOrder = 0;
			_ssStatus = "";
			_ssCompletionDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStudentUnitId = 0;
			_ssDueDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssTrackingType = "";
			_ssCompletionTpe = "";
			_ssCompletionELE = "";
			_ssCompletionTheory = "";
			_ssCompletionPractical = "";
			_ssCompletionExam = "";
			_ssCompletionElements = "";
			_ssCompletionCredit = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssOfferingCode = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssOfferingName = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssOfferingCategory = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssUnit = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssUnitOrder = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssStatus = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssCompletionDate = (DateTime) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssStudentUnitId = (int) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssDueDate = (DateTime) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssTrackingType = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssCompletionTpe = (string) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssCompletionELE = (string) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssCompletionTheory = (string) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssCompletionPractical = (string) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			_ssCompletionExam = (string) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			_ssCompletionElements = (string) info.GetValue(fields[17] .Name, fields[17] .FieldType);
			if (fields[18] .FieldType.IsSerializable)
			_ssCompletionCredit = (string) info.GetValue(fields[18] .Name, fields[18] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENTrackingEntityRecord Duplicate() {
			ENTrackingEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssOfferingCode = this._ssOfferingCode;
			t._ssOfferingName = this._ssOfferingName;
			t._ssOfferingCategory = this._ssOfferingCategory;
			t._ssUnit = this._ssUnit;
			t._ssUnitOrder = this._ssUnitOrder;
			t._ssStatus = this._ssStatus;
			t._ssCompletionDate = this._ssCompletionDate;
			t._ssStudentUnitId = this._ssStudentUnitId;
			t._ssDueDate = this._ssDueDate;
			t._ssTrackingType = this._ssTrackingType;
			t._ssCompletionTpe = this._ssCompletionTpe;
			t._ssCompletionELE = this._ssCompletionELE;
			t._ssCompletionTheory = this._ssCompletionTheory;
			t._ssCompletionPractical = this._ssCompletionPractical;
			t._ssCompletionExam = this._ssCompletionExam;
			t._ssCompletionElements = this._ssCompletionElements;
			t._ssCompletionCredit = this._ssCompletionCredit;
			t.ChangedAttributes = new BitArray(19);
			t.OptimizedAttributes = new BitArray(19);
			for (int i = 0; i < 19; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCode")) VarValue.AppendAttribute(recordElem, "OfferingCode", ssOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingName")) VarValue.AppendAttribute(recordElem, "OfferingName", ssOfferingName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCategory")) VarValue.AppendAttribute(recordElem, "OfferingCategory", ssOfferingCategory, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCategory");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Unit")) VarValue.AppendAttribute(recordElem, "Unit", ssUnit, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Unit");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UnitOrder")) VarValue.AppendAttribute(recordElem, "UnitOrder", ssUnitOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "UnitOrder");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Status")) VarValue.AppendAttribute(recordElem, "Status", ssStatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Status");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletionDate")) VarValue.AppendAttribute(recordElem, "CompletionDate", ssCompletionDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "CompletionDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentUnitId")) VarValue.AppendAttribute(recordElem, "StudentUnitId", ssStudentUnitId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "StudentUnitId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DueDate")) VarValue.AppendAttribute(recordElem, "DueDate", ssDueDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "DueDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TrackingType")) VarValue.AppendAttribute(recordElem, "TrackingType", ssTrackingType, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "TrackingType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletionTpe")) VarValue.AppendAttribute(recordElem, "CompletionTpe", ssCompletionTpe, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CompletionTpe");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletionELE")) VarValue.AppendAttribute(recordElem, "CompletionELE", ssCompletionELE, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CompletionELE");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletionTheory")) VarValue.AppendAttribute(recordElem, "CompletionTheory", ssCompletionTheory, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CompletionTheory");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletionPractical")) VarValue.AppendAttribute(recordElem, "CompletionPractical", ssCompletionPractical, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CompletionPractical");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletionExam")) VarValue.AppendAttribute(recordElem, "CompletionExam", ssCompletionExam, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CompletionExam");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletionElements")) VarValue.AppendAttribute(recordElem, "CompletionElements", ssCompletionElements, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CompletionElements");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletionCredit")) VarValue.AppendAttribute(recordElem, "CompletionCredit", ssCompletionCredit, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CompletionCredit");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "offeringcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCode")) variable.Value = ssOfferingCode; else variable.Optimized = true;
			} else if (head == "offeringname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingName")) variable.Value = ssOfferingName; else variable.Optimized = true;
			} else if (head == "offeringcategory") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCategory")) variable.Value = ssOfferingCategory; else variable.Optimized = true;
			} else if (head == "unit") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Unit")) variable.Value = ssUnit; else variable.Optimized = true;
			} else if (head == "unitorder") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UnitOrder")) variable.Value = ssUnitOrder; else variable.Optimized = true;
			} else if (head == "status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Status")) variable.Value = ssStatus; else variable.Optimized = true;
			} else if (head == "completiondate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletionDate")) variable.Value = ssCompletionDate; else variable.Optimized = true;
			} else if (head == "studentunitid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentUnitId")) variable.Value = ssStudentUnitId; else variable.Optimized = true;
			} else if (head == "duedate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DueDate")) variable.Value = ssDueDate; else variable.Optimized = true;
			} else if (head == "trackingtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TrackingType")) variable.Value = ssTrackingType; else variable.Optimized = true;
			} else if (head == "completiontpe") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletionTpe")) variable.Value = ssCompletionTpe; else variable.Optimized = true;
			} else if (head == "completionele") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletionELE")) variable.Value = ssCompletionELE; else variable.Optimized = true;
			} else if (head == "completiontheory") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletionTheory")) variable.Value = ssCompletionTheory; else variable.Optimized = true;
			} else if (head == "completionpractical") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletionPractical")) variable.Value = ssCompletionPractical; else variable.Optimized = true;
			} else if (head == "completionexam") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletionExam")) variable.Value = ssCompletionExam; else variable.Optimized = true;
			} else if (head == "completionelements") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletionElements")) variable.Value = ssCompletionElements; else variable.Optimized = true;
			} else if (head == "completioncredit") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletionCredit")) variable.Value = ssCompletionCredit; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdOfferingCode)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdOfferingName)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdOfferingCategory)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdUnit)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdUnitOrder)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdStatus)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdCompletionDate)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdStudentUnitId)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdDueDate)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdTrackingType)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdCompletionTpe)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdCompletionELE)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdCompletionTheory)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdCompletionPractical)) {
				return ChangedAttributes[15];
			} else if (key.Equals(IdCompletionExam)) {
				return ChangedAttributes[16];
			} else if (key.Equals(IdCompletionElements)) {
				return ChangedAttributes[17];
			} else if (key.Equals(IdCompletionCredit)) {
				return ChangedAttributes[18];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdOfferingCode)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdOfferingName)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdOfferingCategory)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdUnit)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdUnitOrder)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdStatus)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdCompletionDate)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdStudentUnitId)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdDueDate)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdTrackingType)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdCompletionTpe)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdCompletionELE)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdCompletionTheory)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdCompletionPractical)) {
				return OptimizedAttributes[15];
			} else if (key.Equals(IdCompletionExam)) {
				return OptimizedAttributes[16];
			} else if (key.Equals(IdCompletionElements)) {
				return OptimizedAttributes[17];
			} else if (key.Equals(IdCompletionCredit)) {
				return OptimizedAttributes[18];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdOfferingCode) {
				return ssOfferingCode;
			} else if (key == IdOfferingName) {
				return ssOfferingName;
			} else if (key == IdOfferingCategory) {
				return ssOfferingCategory;
			} else if (key == IdUnit) {
				return ssUnit;
			} else if (key == IdUnitOrder) {
				return ssUnitOrder;
			} else if (key == IdStatus) {
				return ssStatus;
			} else if (key == IdCompletionDate) {
				return ssCompletionDate;
			} else if (key == IdStudentUnitId) {
				return ssStudentUnitId;
			} else if (key == IdDueDate) {
				return ssDueDate;
			} else if (key == IdTrackingType) {
				return ssTrackingType;
			} else if (key == IdCompletionTpe) {
				return ssCompletionTpe;
			} else if (key == IdCompletionELE) {
				return ssCompletionELE;
			} else if (key == IdCompletionTheory) {
				return ssCompletionTheory;
			} else if (key == IdCompletionPractical) {
				return ssCompletionPractical;
			} else if (key == IdCompletionExam) {
				return ssCompletionExam;
			} else if (key == IdCompletionElements) {
				return ssCompletionElements;
			} else if (key == IdCompletionCredit) {
				return ssCompletionCredit;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(19);
			OptimizedAttributes = new BitArray(19);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssOfferingCode = (string) other.AttributeGet(IdOfferingCode);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdOfferingCode);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOfferingCode);
			ssOfferingName = (string) other.AttributeGet(IdOfferingName);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdOfferingName);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdOfferingName);
			ssOfferingCategory = (int) other.AttributeGet(IdOfferingCategory);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdOfferingCategory);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdOfferingCategory);
			ssUnit = (string) other.AttributeGet(IdUnit);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdUnit);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdUnit);
			ssUnitOrder = (int) other.AttributeGet(IdUnitOrder);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdUnitOrder);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdUnitOrder);
			ssStatus = (string) other.AttributeGet(IdStatus);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdStatus);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdStatus);
			ssCompletionDate = (DateTime) other.AttributeGet(IdCompletionDate);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdCompletionDate);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdCompletionDate);
			ssStudentUnitId = (int) other.AttributeGet(IdStudentUnitId);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdStudentUnitId);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdStudentUnitId);
			ssDueDate = (DateTime) other.AttributeGet(IdDueDate);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdDueDate);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdDueDate);
			ssTrackingType = (string) other.AttributeGet(IdTrackingType);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdTrackingType);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdTrackingType);
			ssCompletionTpe = (string) other.AttributeGet(IdCompletionTpe);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdCompletionTpe);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdCompletionTpe);
			ssCompletionELE = (string) other.AttributeGet(IdCompletionELE);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdCompletionELE);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdCompletionELE);
			ssCompletionTheory = (string) other.AttributeGet(IdCompletionTheory);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdCompletionTheory);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdCompletionTheory);
			ssCompletionPractical = (string) other.AttributeGet(IdCompletionPractical);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdCompletionPractical);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdCompletionPractical);
			ssCompletionExam = (string) other.AttributeGet(IdCompletionExam);
			ChangedAttributes[16] = other.ChangedAttributeGet(IdCompletionExam);
			OptimizedAttributes[16] = other.OptimizedAttributeGet(IdCompletionExam);
			ssCompletionElements = (string) other.AttributeGet(IdCompletionElements);
			ChangedAttributes[17] = other.ChangedAttributeGet(IdCompletionElements);
			OptimizedAttributes[17] = other.OptimizedAttributeGet(IdCompletionElements);
			ssCompletionCredit = (string) other.AttributeGet(IdCompletionCredit);
			ChangedAttributes[18] = other.ChangedAttributeGet(IdCompletionCredit);
			OptimizedAttributes[18] = other.OptimizedAttributeGet(IdCompletionCredit);
		}
	} // ENTrackingEntityRecord
	/// <summary>
	/// Structure <code>RCTrackingRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTrackingRecord: ISerializable, ITypedRecord<RCTrackingRecord> {
		private static readonly GlobalObjectKey IdTracking = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*x0EgDR4QbOH8AiDrcNFBEA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Tracking")]
		public ENTrackingEntityRecord ssENTracking;


		public static implicit operator ENTrackingEntityRecord(RCTrackingRecord r) {
			return r.ssENTracking;
		}

		public static implicit operator RCTrackingRecord(ENTrackingEntityRecord r) {
			RCTrackingRecord res = new RCTrackingRecord(null);
			res.ssENTracking = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENTracking.ChangedAttributes = value;
			}
			get {
				return ssENTracking.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCTrackingRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENTracking = new ENTrackingEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(19, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENTracking.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENTracking.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENTracking.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENTracking.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTrackingRecord r) {
			this = r;
		}


		public static bool operator == (RCTrackingRecord a, RCTrackingRecord b) {
			if (a.ssENTracking != b.ssENTracking) return false;
			return true;
		}

		public static bool operator != (RCTrackingRecord a, RCTrackingRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTrackingRecord)) return false;
			return (this == (RCTrackingRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENTracking.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTrackingRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENTracking = new ENTrackingEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENTracking = (ENTrackingEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENTracking.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENTracking.InternalRecursiveSave();
		}


		public RCTrackingRecord Duplicate() {
			RCTrackingRecord t;
			t.ssENTracking = (ENTrackingEntityRecord) this.ssENTracking.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENTracking.ToXml(this, recordElem, "Tracking", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "tracking") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Tracking")) variable.Value = ssENTracking; else variable.Optimized = true;
				variable.SetFieldName("tracking");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENTracking.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENTracking.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTracking) {
				return ssENTracking;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENTracking.FillFromOther((IRecord) other.AttributeGet(IdTracking));
		}
	} // RCTrackingRecord
	/// <summary>
	/// RecordList type <code>RLTrackingRecordList</code> that represents a record list of
	///  <code>Tracking</code>
	/// </summary>
	[Serializable()]
	public partial class RLTrackingRecordList: GenericRecordList<RCTrackingRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTrackingRecord GetElementDefaultValue() {
			return new RCTrackingRecord("");
		}

		public T[] ToArray<T>(Func<RCTrackingRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTrackingRecordList recordlist, Func<RCTrackingRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTrackingRecordList ToList<T>(T[] array, Func <T, RCTrackingRecord> converter) {
			RLTrackingRecordList result = new RLTrackingRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTrackingRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTrackingRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTrackingRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTrackingRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(19, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTrackingRecord> NewList() {
			return new RLTrackingRecordList();
		}


	} // RLTrackingRecordList

	/// <summary>
	/// RecordList type <code>RLTrackingList</code> that represents a record list of
	///  <code>StudentIdentifier, CategoryIdentifier, TrackingTypeIdentifier, Text, Text, Text, Text, Text
	/// , Text, Text, Text, Text, Text, Text, Date, Date, Integer, Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLTrackingList: GenericRecordList<ENTrackingEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENTrackingEntityRecord GetElementDefaultValue() {
			return new ENTrackingEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENTrackingEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTrackingList recordlist, Func<ENTrackingEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTrackingList ToList<T>(T[] array, Func <T, ENTrackingEntityRecord> converter) {
			RLTrackingList result = new RLTrackingList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTrackingList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTrackingList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTrackingList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTrackingList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENTrackingEntityRecord> NewList() {
			return new RLTrackingList();
		}


	} // RLTrackingList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateTracking
		/// </summary>

		public static void CreateTracking(HeContext heContext, RCTrackingRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTrackingEntity.eSpaceId;
				ENTrackingEntityRecord ssENTracking = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENTrackingEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [OFFERINGCODE]" +
					 ", [OFFERINGNAME]" +
					 ", [OFFERINGCATEGORY]" +
					 ", [UNIT]" +
					 ", [UNITORDER]" +
					 ", [STATUS]" +
					 ", [COMPLETIONDATE]" +
					 ", [STUDENTUNITID]" +
					 ", [DUEDATE]" +
					 ", [TRACKINGTYPE]" +
					 ", [COMPLETIONTPE]" +
					 ", [COMPLETIONELE]" +
					 ", [COMPLETIONTHEORY]" +
					 ", [COMPLETIONPRACTICAL]" +
					 ", [COMPLETIONEXAM]" +
					 ", [COMPLETIONELEMENTS]" +
					 ", [COMPLETIONCREDIT]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssOfferingCode" +
					 ", @ssOfferingName" +
					 ", @ssOfferingCategory" +
					 ", @ssUnit" +
					 ", @ssUnitOrder" +
					 ", @ssStatus" +
					 ", @ssCompletionDate" +
					 ", @ssStudentUnitId" +
					 ", @ssDueDate" +
					 ", @ssTrackingType" +
					 ", @ssCompletionTpe" +
					 ", @ssCompletionELE" +
					 ", @ssCompletionTheory" +
					 ", @ssCompletionPractical" +
					 ", @ssCompletionExam" +
					 ", @ssCompletionElements" +
					 ", @ssCompletionCredit" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENTracking.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENTracking.ssStudentReference);
					}
					insertSqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENTracking.ssOfferingCode);
					insertSqlCmd.CreateParameter("@ssOfferingName", DbType.String, ssENTracking.ssOfferingName);
					if ((ssENTracking.ssOfferingCategory==0)) {
						insertSqlCmd.CreateParameter("@ssOfferingCategory", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssOfferingCategory", DbType.Int32, ssENTracking.ssOfferingCategory);
					}
					insertSqlCmd.CreateParameter("@ssUnit", DbType.String, ssENTracking.ssUnit);
					insertSqlCmd.CreateParameter("@ssUnitOrder", DbType.Int32, ssENTracking.ssUnitOrder);
					insertSqlCmd.CreateParameter("@ssStatus", DbType.String, ssENTracking.ssStatus);
					insertSqlCmd.CreateParameter("@ssCompletionDate", DbType.DateTime, ssENTracking.ssCompletionDate);
					insertSqlCmd.CreateParameter("@ssStudentUnitId", DbType.Int32, ssENTracking.ssStudentUnitId);
					insertSqlCmd.CreateParameter("@ssDueDate", DbType.DateTime, ssENTracking.ssDueDate);
					if ((ssENTracking.ssTrackingType== "")) {
						insertSqlCmd.CreateParameter("@ssTrackingType", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssTrackingType", DbType.String, ssENTracking.ssTrackingType);
					}
					insertSqlCmd.CreateParameter("@ssCompletionTpe", DbType.String, ssENTracking.ssCompletionTpe);
					insertSqlCmd.CreateParameter("@ssCompletionELE", DbType.String, ssENTracking.ssCompletionELE);
					insertSqlCmd.CreateParameter("@ssCompletionTheory", DbType.String, ssENTracking.ssCompletionTheory);
					insertSqlCmd.CreateParameter("@ssCompletionPractical", DbType.String, ssENTracking.ssCompletionPractical);
					insertSqlCmd.CreateParameter("@ssCompletionExam", DbType.String, ssENTracking.ssCompletionExam);
					insertSqlCmd.CreateParameter("@ssCompletionElements", DbType.String, ssENTracking.ssCompletionElements);
					insertSqlCmd.CreateParameter("@ssCompletionCredit", DbType.String, ssENTracking.ssCompletionCredit);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateTracking", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateTracking
		/// </summary>

		public static void CreateOrUpdateTracking(HeContext heContext, BitArray usedFields, RCTrackingRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTrackingEntity.eSpaceId;
				ENTrackingEntityRecord ssENTracking = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(19, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENTrackingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGCODE] = @ssOfferingCode"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGNAME] = @ssOfferingName"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGCATEGORY] = @ssOfferingCategory"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UNIT] = @ssUnit"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UNITORDER] = @ssUnitOrder"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STATUS] = @ssStatus"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONDATE] = @ssCompletionDate"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTUNITID] = @ssStudentUnitId"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DUEDATE] = @ssDueDate"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TRACKINGTYPE] = @ssTrackingType"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONTPE] = @ssCompletionTpe"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONELE] = @ssCompletionELE"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONTHEORY] = @ssCompletionTheory"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONPRACTICAL] = @ssCompletionPractical"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONEXAM] = @ssCompletionExam"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONELEMENTS] = @ssCompletionElements"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONCREDIT] = @ssCompletionCredit"): parameters);
					string whereCondition = " WHERE [ID] = @ssENTrackingssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENTracking.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENTracking.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENTracking.ssOfferingCode);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssOfferingName", DbType.String, ssENTracking.ssOfferingName);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENTracking.ssOfferingCategory==0)) {
							sqlCmd.CreateParameter("@ssOfferingCategory", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssOfferingCategory", DbType.Int32, ssENTracking.ssOfferingCategory);
						}
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssUnit", DbType.String, ssENTracking.ssUnit);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssUnitOrder", DbType.Int32, ssENTracking.ssUnitOrder);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssStatus", DbType.String, ssENTracking.ssStatus);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssCompletionDate", DbType.DateTime, ssENTracking.ssCompletionDate);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssStudentUnitId", DbType.Int32, ssENTracking.ssStudentUnitId);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssDueDate", DbType.DateTime, ssENTracking.ssDueDate);
						counter++;
					}
					if (usedFields[11]) {
						if ((ssENTracking.ssTrackingType== "")) {
							sqlCmd.CreateParameter("@ssTrackingType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssTrackingType", DbType.String, ssENTracking.ssTrackingType);
						}
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssCompletionTpe", DbType.String, ssENTracking.ssCompletionTpe);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssCompletionELE", DbType.String, ssENTracking.ssCompletionELE);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssCompletionTheory", DbType.String, ssENTracking.ssCompletionTheory);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssCompletionPractical", DbType.String, ssENTracking.ssCompletionPractical);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssCompletionExam", DbType.String, ssENTracking.ssCompletionExam);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssCompletionElements", DbType.String, ssENTracking.ssCompletionElements);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssCompletionCredit", DbType.String, ssENTracking.ssCompletionCredit);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[UNITORDER] = [UNITORDER]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENTrackingssId", DbType.Int32, ssENTracking.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateTracking (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENTrackingEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [OFFERINGCODE]" +
						 ", [OFFERINGNAME]" +
						 ", [OFFERINGCATEGORY]" +
						 ", [UNIT]" +
						 ", [UNITORDER]" +
						 ", [STATUS]" +
						 ", [COMPLETIONDATE]" +
						 ", [STUDENTUNITID]" +
						 ", [DUEDATE]" +
						 ", [TRACKINGTYPE]" +
						 ", [COMPLETIONTPE]" +
						 ", [COMPLETIONELE]" +
						 ", [COMPLETIONTHEORY]" +
						 ", [COMPLETIONPRACTICAL]" +
						 ", [COMPLETIONEXAM]" +
						 ", [COMPLETIONELEMENTS]" +
						 ", [COMPLETIONCREDIT]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssOfferingCode" +
						 ", @ssOfferingName" +
						 ", @ssOfferingCategory" +
						 ", @ssUnit" +
						 ", @ssUnitOrder" +
						 ", @ssStatus" +
						 ", @ssCompletionDate" +
						 ", @ssStudentUnitId" +
						 ", @ssDueDate" +
						 ", @ssTrackingType" +
						 ", @ssCompletionTpe" +
						 ", @ssCompletionELE" +
						 ", @ssCompletionTheory" +
						 ", @ssCompletionPractical" +
						 ", @ssCompletionExam" +
						 ", @ssCompletionElements" +
						 ", @ssCompletionCredit" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENTracking.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENTracking.ssStudentReference);
						}
						insertSqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENTracking.ssOfferingCode);
						insertSqlCmd.CreateParameter("@ssOfferingName", DbType.String, ssENTracking.ssOfferingName);
						if ((ssENTracking.ssOfferingCategory==0)) {
							insertSqlCmd.CreateParameter("@ssOfferingCategory", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssOfferingCategory", DbType.Int32, ssENTracking.ssOfferingCategory);
						}
						insertSqlCmd.CreateParameter("@ssUnit", DbType.String, ssENTracking.ssUnit);
						insertSqlCmd.CreateParameter("@ssUnitOrder", DbType.Int32, ssENTracking.ssUnitOrder);
						insertSqlCmd.CreateParameter("@ssStatus", DbType.String, ssENTracking.ssStatus);
						insertSqlCmd.CreateParameter("@ssCompletionDate", DbType.DateTime, ssENTracking.ssCompletionDate);
						insertSqlCmd.CreateParameter("@ssStudentUnitId", DbType.Int32, ssENTracking.ssStudentUnitId);
						insertSqlCmd.CreateParameter("@ssDueDate", DbType.DateTime, ssENTracking.ssDueDate);
						if ((ssENTracking.ssTrackingType== "")) {
							insertSqlCmd.CreateParameter("@ssTrackingType", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssTrackingType", DbType.String, ssENTracking.ssTrackingType);
						}
						insertSqlCmd.CreateParameter("@ssCompletionTpe", DbType.String, ssENTracking.ssCompletionTpe);
						insertSqlCmd.CreateParameter("@ssCompletionELE", DbType.String, ssENTracking.ssCompletionELE);
						insertSqlCmd.CreateParameter("@ssCompletionTheory", DbType.String, ssENTracking.ssCompletionTheory);
						insertSqlCmd.CreateParameter("@ssCompletionPractical", DbType.String, ssENTracking.ssCompletionPractical);
						insertSqlCmd.CreateParameter("@ssCompletionExam", DbType.String, ssENTracking.ssCompletionExam);
						insertSqlCmd.CreateParameter("@ssCompletionElements", DbType.String, ssENTracking.ssCompletionElements);
						insertSqlCmd.CreateParameter("@ssCompletionCredit", DbType.String, ssENTracking.ssCompletionCredit);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateTracking", true), typeof(int));
					} else {
						outParamId = ssENTracking.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteTracking
		/// </summary>

		public static void DeleteTracking(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTrackingEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENTrackingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteTracking", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetTracking
		/// </summary>

		public static void GetTracking(HeContext heContext, int inParamId, out RCTrackingRecord outParamRecord) {
			outParamRecord = new RCTrackingRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTrackingEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [OFFERINGCODE]" +
					 ", [OFFERINGNAME]" +
					 ", [OFFERINGCATEGORY]" +
					 ", [UNIT]" +
					 ", [UNITORDER]" +
					 ", [STATUS]" +
					 ", [COMPLETIONDATE]" +
					 ", [STUDENTUNITID]" +
					 ", [DUEDATE]" +
					 ", [TRACKINGTYPE]" +
					 ", [COMPLETIONTPE]" +
					 ", [COMPLETIONELE]" +
					 ", [COMPLETIONTHEORY]" +
					 ", [COMPLETIONPRACTICAL]" +
					 ", [COMPLETIONEXAM]" +
					 ", [COMPLETIONELEMENTS]" +
					 ", [COMPLETIONCREDIT]" +
					 " FROM " + ENTrackingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetTracking", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(19, false)
							}
							;
						} else
						throw new DataBaseException(ENTrackingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetTrackingForUpdate
		/// </summary>

		public static void GetTrackingForUpdate(HeContext heContext, int inParamId, out RCTrackingRecord outParamRecord) {
			outParamRecord = new RCTrackingRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTrackingEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [OFFERINGCODE]" +
					 ", [OFFERINGNAME]" +
					 ", [OFFERINGCATEGORY]" +
					 ", [UNIT]" +
					 ", [UNITORDER]" +
					 ", [STATUS]" +
					 ", [COMPLETIONDATE]" +
					 ", [STUDENTUNITID]" +
					 ", [DUEDATE]" +
					 ", [TRACKINGTYPE]" +
					 ", [COMPLETIONTPE]" +
					 ", [COMPLETIONELE]" +
					 ", [COMPLETIONTHEORY]" +
					 ", [COMPLETIONPRACTICAL]" +
					 ", [COMPLETIONEXAM]" +
					 ", [COMPLETIONELEMENTS]" +
					 ", [COMPLETIONCREDIT]" +
					 "FROM " + ENTrackingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetTrackingForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(19, false)
							}
							;
						} else
						throw new DataBaseException(ENTrackingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateTracking
		/// </summary>

		public static void UpdateTracking(HeContext heContext, BitArray usedFields, RCTrackingRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTrackingEntity.eSpaceId;
				ENTrackingEntityRecord ssENTracking = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(19, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENTrackingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGCODE] = @ssOfferingCode"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGNAME] = @ssOfferingName"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[OFFERINGCATEGORY] = @ssOfferingCategory"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UNIT] = @ssUnit"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UNITORDER] = @ssUnitOrder"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STATUS] = @ssStatus"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONDATE] = @ssCompletionDate"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTUNITID] = @ssStudentUnitId"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DUEDATE] = @ssDueDate"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TRACKINGTYPE] = @ssTrackingType"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONTPE] = @ssCompletionTpe"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONELE] = @ssCompletionELE"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONTHEORY] = @ssCompletionTheory"): parameters);
					parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONPRACTICAL] = @ssCompletionPractical"): parameters);
					parameters = (usedFields[16] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONEXAM] = @ssCompletionExam"): parameters);
					parameters = (usedFields[17] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONELEMENTS] = @ssCompletionElements"): parameters);
					parameters = (usedFields[18] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMPLETIONCREDIT] = @ssCompletionCredit"): parameters);
					string whereCondition = " WHERE [ID] = @ssENTrackingssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENTracking.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENTracking.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssOfferingCode", DbType.String, ssENTracking.ssOfferingCode);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssOfferingName", DbType.String, ssENTracking.ssOfferingName);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENTracking.ssOfferingCategory==0)) {
							sqlCmd.CreateParameter("@ssOfferingCategory", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssOfferingCategory", DbType.Int32, ssENTracking.ssOfferingCategory);
						}
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssUnit", DbType.String, ssENTracking.ssUnit);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssUnitOrder", DbType.Int32, ssENTracking.ssUnitOrder);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssStatus", DbType.String, ssENTracking.ssStatus);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssCompletionDate", DbType.DateTime, ssENTracking.ssCompletionDate);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssStudentUnitId", DbType.Int32, ssENTracking.ssStudentUnitId);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssDueDate", DbType.DateTime, ssENTracking.ssDueDate);
						counter++;
					}
					if (usedFields[11]) {
						if ((ssENTracking.ssTrackingType== "")) {
							sqlCmd.CreateParameter("@ssTrackingType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssTrackingType", DbType.String, ssENTracking.ssTrackingType);
						}
						counter++;
					}
					if (usedFields[12]) {
						sqlCmd.CreateParameter("@ssCompletionTpe", DbType.String, ssENTracking.ssCompletionTpe);
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssCompletionELE", DbType.String, ssENTracking.ssCompletionELE);
						counter++;
					}
					if (usedFields[14]) {
						sqlCmd.CreateParameter("@ssCompletionTheory", DbType.String, ssENTracking.ssCompletionTheory);
						counter++;
					}
					if (usedFields[15]) {
						sqlCmd.CreateParameter("@ssCompletionPractical", DbType.String, ssENTracking.ssCompletionPractical);
						counter++;
					}
					if (usedFields[16]) {
						sqlCmd.CreateParameter("@ssCompletionExam", DbType.String, ssENTracking.ssCompletionExam);
						counter++;
					}
					if (usedFields[17]) {
						sqlCmd.CreateParameter("@ssCompletionElements", DbType.String, ssENTracking.ssCompletionElements);
						counter++;
					}
					if (usedFields[18]) {
						sqlCmd.CreateParameter("@ssCompletionCredit", DbType.String, ssENTracking.ssCompletionCredit);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[UNITORDER] = [UNITORDER]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENTrackingssId", DbType.Int32, ssENTracking.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateTracking", true) <= 0)
					throw new DataBaseException(ENTrackingEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENTracking.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Tracking")]
	public class WORCTrackingRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string varWSOfferingCode;

		[System.Xml.Serialization.XmlElement("OfferingName")]
		public string varWSOfferingName;

		[System.Xml.Serialization.XmlElement("OfferingCategory")]
		public int varWSOfferingCategory;

		[System.Xml.Serialization.XmlElement("Unit")]
		public string varWSUnit;

		[System.Xml.Serialization.XmlElement("UnitOrder")]
		public int varWSUnitOrder;

		[System.Xml.Serialization.XmlElement("Status")]
		public string varWSStatus;

		[System.Xml.Serialization.XmlElement("CompletionDate", DataType= "date")]
		public DateTime varWSCompletionDate;

		[System.Xml.Serialization.XmlElement("StudentUnitId")]
		public int varWSStudentUnitId;

		[System.Xml.Serialization.XmlElement("DueDate", DataType= "date")]
		public DateTime varWSDueDate;

		[System.Xml.Serialization.XmlElement("TrackingType")]
		public string varWSTrackingType;

		[System.Xml.Serialization.XmlElement("CompletionTpe")]
		public string varWSCompletionTpe;

		[System.Xml.Serialization.XmlElement("CompletionELE")]
		public string varWSCompletionELE;

		[System.Xml.Serialization.XmlElement("CompletionTheory")]
		public string varWSCompletionTheory;

		[System.Xml.Serialization.XmlElement("CompletionPractical")]
		public string varWSCompletionPractical;

		[System.Xml.Serialization.XmlElement("CompletionExam")]
		public string varWSCompletionExam;

		[System.Xml.Serialization.XmlElement("CompletionElements")]
		public string varWSCompletionElements;

		[System.Xml.Serialization.XmlElement("CompletionCredit")]
		public string varWSCompletionCredit;

		public WORCTrackingRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSOfferingCode = (string) "";
			varWSOfferingName = (string) "";
			varWSOfferingCategory = (int) 0;
			varWSUnit = (string) "";
			varWSUnitOrder = (int) 0;
			varWSStatus = (string) "";
			varWSCompletionDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentUnitId = (int) 0;
			varWSDueDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSTrackingType = (string) "";
			varWSCompletionTpe = (string) "";
			varWSCompletionELE = (string) "";
			varWSCompletionTheory = (string) "";
			varWSCompletionPractical = (string) "";
			varWSCompletionExam = (string) "";
			varWSCompletionElements = (string) "";
			varWSCompletionCredit = (string) "";
		}

		public WORCTrackingRecord(ENTrackingEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSOfferingCode = BaseAppUtils.RemoveControlChars(r.ssOfferingCode);
			varWSOfferingName = BaseAppUtils.RemoveControlChars(r.ssOfferingName);
			varWSOfferingCategory = (int) r.ssOfferingCategory;
			varWSUnit = BaseAppUtils.RemoveControlChars(r.ssUnit);
			varWSUnitOrder = (int) r.ssUnitOrder;
			varWSStatus = BaseAppUtils.RemoveControlChars(r.ssStatus);
			varWSCompletionDate = (DateTime) r.ssCompletionDate;
			varWSStudentUnitId = (int) r.ssStudentUnitId;
			varWSDueDate = (DateTime) r.ssDueDate;
			varWSTrackingType = BaseAppUtils.RemoveControlChars(r.ssTrackingType);
			varWSCompletionTpe = BaseAppUtils.RemoveControlChars(r.ssCompletionTpe);
			varWSCompletionELE = BaseAppUtils.RemoveControlChars(r.ssCompletionELE);
			varWSCompletionTheory = BaseAppUtils.RemoveControlChars(r.ssCompletionTheory);
			varWSCompletionPractical = BaseAppUtils.RemoveControlChars(r.ssCompletionPractical);
			varWSCompletionExam = BaseAppUtils.RemoveControlChars(r.ssCompletionExam);
			varWSCompletionElements = BaseAppUtils.RemoveControlChars(r.ssCompletionElements);
			varWSCompletionCredit = BaseAppUtils.RemoveControlChars(r.ssCompletionCredit);
		}

		public static RLTrackingList ToRecordList(WORCTrackingRecord[] array) {
			RLTrackingList rl = new RLTrackingList();
			if (array != null) {
				foreach(WORCTrackingRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCTrackingRecord[] FromRecordList(RLTrackingList rl) {
			WORCTrackingRecord[] array = new WORCTrackingRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCTrackingRecord {
		public static implicit operator WORCTrackingRecord(RCTrackingRecord r) {
			return new WORCTrackingRecord(r.ssENTracking);
		}

		public static implicit operator RCTrackingRecord(WORCTrackingRecord w) {
			RCTrackingRecord r = new RCTrackingRecord("");
			if (w != null) {
				r.ssENTracking = w;
			}
			return r;
		}

	}

	partial struct ENTrackingEntityRecord {
		public static implicit operator WORCTrackingRecord(ENTrackingEntityRecord r) {
			return new WORCTrackingRecord(r);
		}

		public static implicit operator ENTrackingEntityRecord(WORCTrackingRecord w) {
			ENTrackingEntityRecord r = new ENTrackingEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssOfferingCode = ((string) w.varWSOfferingCode ?? "");
				r.ssOfferingName = ((string) w.varWSOfferingName ?? "");
				r.ssOfferingCategory = (int) w.varWSOfferingCategory;
				r.ssUnit = ((string) w.varWSUnit ?? "");
				r.ssUnitOrder = (int) w.varWSUnitOrder;
				r.ssStatus = ((string) w.varWSStatus ?? "");
				r.ssCompletionDate = (DateTime) w.varWSCompletionDate;
				r.ssStudentUnitId = (int) w.varWSStudentUnitId;
				r.ssDueDate = (DateTime) w.varWSDueDate;
				r.ssTrackingType = (string) w.varWSTrackingType;
				r.ssCompletionTpe = ((string) w.varWSCompletionTpe ?? "");
				r.ssCompletionELE = ((string) w.varWSCompletionELE ?? "");
				r.ssCompletionTheory = ((string) w.varWSCompletionTheory ?? "");
				r.ssCompletionPractical = ((string) w.varWSCompletionPractical ?? "");
				r.ssCompletionExam = ((string) w.varWSCompletionExam ?? "");
				r.ssCompletionElements = ((string) w.varWSCompletionElements ?? "");
				r.ssCompletionCredit = ((string) w.varWSCompletionCredit ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTrackingRecordList {
		public WORCTrackingRecord[] Array;


		public WORLTrackingRecordList(WORCTrackingRecord[] r) {
			if (r == null)
			Array = new WORCTrackingRecord[0];
			else
			Array = r;
		}
		public WORLTrackingRecordList() {
			Array = new WORCTrackingRecord[0];
		}

		public WORLTrackingRecordList(RLTrackingRecordList rl) {
			rl=(RLTrackingRecordList) rl.Duplicate();
			Array = new WORCTrackingRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCTrackingRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTrackingRecordList {
		public static implicit operator RLTrackingRecordList(WORCTrackingRecord[] array) {
			RLTrackingRecordList rl = new RLTrackingRecordList();
			if (array != null) {
				foreach(WORCTrackingRecord val in array) {
					rl.Append((RCTrackingRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTrackingRecord[](RLTrackingRecordList rl) {
			WORCTrackingRecord[] array = new WORCTrackingRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCTrackingRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTrackingRecordList {
		public static implicit operator RLTrackingRecordList(WORLTrackingRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLTrackingRecordList(RLTrackingRecordList rl) {
			return new WORLTrackingRecordList(rl);
		}
		public static implicit operator WORCTrackingRecord[](WORLTrackingRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTrackingRecordList(WORCTrackingRecord[] array) {
			return new WORLTrackingRecordList(array);
		}
	}
}

