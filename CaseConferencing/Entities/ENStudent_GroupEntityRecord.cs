/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudent_GroupEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENStudent_GroupEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENStudent_GroupEntity.eSpaceId;
	} // ENStudent_GroupEntity

	/// <summary>
	/// Entity <code>ENStudent_GroupEntityRecord</code> that represents the Service Studio entity
	///  <code>Student_Group</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Student_Group", "fYAfpHu_00GYxPQq3VYRlQ", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Student_Group", "")]
	[Serializable()]
	public partial struct ENStudent_GroupEntityRecord: ISerializable, ITypedRecord<ENStudent_GroupEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*N__l_oDeKk+AAaPXNL3egA");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*GOE1kqw1802hIbsU8i0nuw");
		private static readonly GlobalObjectKey IdGroupId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*2osx+5bJgEabHBUm8sBEWg");
		private static readonly GlobalObjectKey IdEnrolmentStatus = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*WsxjD_Dv2kWcumbIAbKhkg");
		private static readonly GlobalObjectKey IdStartDate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*waGiJKJ8TEu+wahboUhWeg");
		private static readonly GlobalObjectKey IdEndDate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*8hx2uVr6CUeeZ4Qfs2a4Jg");
		private static readonly GlobalObjectKey IdAcademicYear = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*zUVLTbNWRUiWurg1U_GTpg");
		private static readonly GlobalObjectKey IdEnrolmentPlannedLearningHour = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*xRE6wP_vUEufFM8HGE48Vg");
		private static readonly GlobalObjectKey IdTMG = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*4A2I58itIUSQ1ZJ+Yq4IBg");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(9, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GROUPID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("GroupId")]
		private int _ssGroupId;
		public int ssGroupId {
			get {
				return _ssGroupId;
			}
			set {
				if ((_ssGroupId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssGroupId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENROLMENTSTATUS", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("EnrolmentStatus")]
		private string _ssEnrolmentStatus;
		public string ssEnrolmentStatus {
			get {
				return _ssEnrolmentStatus;
			}
			set {
				if ((_ssEnrolmentStatus!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssEnrolmentStatus = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STARTDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("StartDate")]
		private DateTime _ssStartDate;
		public DateTime ssStartDate {
			get {
				return _ssStartDate;
			}
			set {
				if ((_ssStartDate!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssStartDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENDDATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("EndDate")]
		private DateTime _ssEndDate;
		public DateTime ssEndDate {
			get {
				return _ssEndDate;
			}
			set {
				if ((_ssEndDate!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssEndDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ACADEMICYEAR", 4, false, false, false)]
		[System.Xml.Serialization.XmlElement("AcademicYear")]
		private string _ssAcademicYear;
		public string ssAcademicYear {
			get {
				return _ssAcademicYear;
			}
			set {
				if ((_ssAcademicYear!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssAcademicYear = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENROLMENTPLANNEDLEARNINGHOUR", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("EnrolmentPlannedLearningHour")]
		private int _ssEnrolmentPlannedLearningHour;
		public int ssEnrolmentPlannedLearningHour {
			get {
				return _ssEnrolmentPlannedLearningHour;
			}
			set {
				if ((_ssEnrolmentPlannedLearningHour!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssEnrolmentPlannedLearningHour = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TMG", 50, false, false, false)]
		[System.Xml.Serialization.XmlElement("TMG")]
		private string _ssTMG;
		public string ssTMG {
			get {
				return _ssTMG;
			}
			set {
				if ((_ssTMG!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssTMG = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudent_GroupEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(9, true);
			OptimizedAttributes = new BitArray(9, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssGroupId = 0;
			_ssEnrolmentStatus = "";
			_ssStartDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssEndDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssAcademicYear = "";
			_ssEnrolmentPlannedLearningHour = 0;
			_ssTMG = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Student_Group.Id", 0);
			ssStudentReference = r.ReadTextEntityReference(index++, "Student_Group.StudentReference", "");
			ssGroupId = r.ReadEntityReference(index++, "Student_Group.GroupId", 0);
			ssEnrolmentStatus = r.ReadText(index++, "Student_Group.EnrolmentStatus", "");
			ssStartDate = r.ReadDate(index++, "Student_Group.StartDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssEndDate = r.ReadDate(index++, "Student_Group.EndDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssAcademicYear = r.ReadText(index++, "Student_Group.AcademicYear", "");
			ssEnrolmentPlannedLearningHour = r.ReadInteger(index++, "Student_Group.EnrolmentPlannedLearningHour", 0);
			ssTMG = r.ReadText(index++, "Student_Group.TMG", "");
			ChangedAttributes = new BitArray(9, false);
			OptimizedAttributes = new BitArray(9, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudent_GroupEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudent_GroupEntityRecord a, ENStudent_GroupEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssGroupId != b.ssGroupId) return false;
			if (a.ssEnrolmentStatus != b.ssEnrolmentStatus) return false;
			if (a.ssStartDate != b.ssStartDate) return false;
			if (a.ssEndDate != b.ssEndDate) return false;
			if (a.ssAcademicYear != b.ssAcademicYear) return false;
			if (a.ssEnrolmentPlannedLearningHour != b.ssEnrolmentPlannedLearningHour) return false;
			if (a.ssTMG != b.ssTMG) return false;
			return true;
		}

		public static bool operator != (ENStudent_GroupEntityRecord a, ENStudent_GroupEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudent_GroupEntityRecord)) return false;
			return (this == (ENStudent_GroupEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssGroupId.GetHashCode()
				^ ssEnrolmentStatus.GetHashCode()
				^ ssStartDate.GetHashCode()
				^ ssEndDate.GetHashCode()
				^ ssAcademicYear.GetHashCode()
				^ ssEnrolmentPlannedLearningHour.GetHashCode()
				^ ssTMG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudent_GroupEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(9, true);
			OptimizedAttributes = new BitArray(9, false);
			_ssId = 0;
			_ssStudentReference = "";
			_ssGroupId = 0;
			_ssEnrolmentStatus = "";
			_ssStartDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssEndDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssAcademicYear = "";
			_ssEnrolmentPlannedLearningHour = 0;
			_ssTMG = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssGroupId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssEnrolmentStatus = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssStartDate = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssEndDate = (DateTime) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssAcademicYear = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssEnrolmentPlannedLearningHour = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssTMG = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudent_GroupEntityRecord Duplicate() {
			ENStudent_GroupEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentReference = this._ssStudentReference;
			t._ssGroupId = this._ssGroupId;
			t._ssEnrolmentStatus = this._ssEnrolmentStatus;
			t._ssStartDate = this._ssStartDate;
			t._ssEndDate = this._ssEndDate;
			t._ssAcademicYear = this._ssAcademicYear;
			t._ssEnrolmentPlannedLearningHour = this._ssEnrolmentPlannedLearningHour;
			t._ssTMG = this._ssTMG;
			t.ChangedAttributes = new BitArray(9);
			t.OptimizedAttributes = new BitArray(9);
			for (int i = 0; i < 9; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupId")) VarValue.AppendAttribute(recordElem, "GroupId", ssGroupId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "GroupId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EnrolmentStatus")) VarValue.AppendAttribute(recordElem, "EnrolmentStatus", ssEnrolmentStatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EnrolmentStatus");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StartDate")) VarValue.AppendAttribute(recordElem, "StartDate", ssStartDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StartDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EndDate")) VarValue.AppendAttribute(recordElem, "EndDate", ssEndDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "EndDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AcademicYear")) VarValue.AppendAttribute(recordElem, "AcademicYear", ssAcademicYear, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AcademicYear");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EnrolmentPlannedLearningHour")) VarValue.AppendAttribute(recordElem, "EnrolmentPlannedLearningHour", ssEnrolmentPlannedLearningHour, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "EnrolmentPlannedLearningHour");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TMG")) VarValue.AppendAttribute(recordElem, "TMG", ssTMG, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TMG");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "groupid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupId")) variable.Value = ssGroupId; else variable.Optimized = true;
			} else if (head == "enrolmentstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnrolmentStatus")) variable.Value = ssEnrolmentStatus; else variable.Optimized = true;
			} else if (head == "startdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StartDate")) variable.Value = ssStartDate; else variable.Optimized = true;
			} else if (head == "enddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EndDate")) variable.Value = ssEndDate; else variable.Optimized = true;
			} else if (head == "academicyear") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYear")) variable.Value = ssAcademicYear; else variable.Optimized = true;
			} else if (head == "enrolmentplannedlearninghour") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnrolmentPlannedLearningHour")) variable.Value = ssEnrolmentPlannedLearningHour; else variable.Optimized = true;
			} else if (head == "tmg") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TMG")) variable.Value = ssTMG; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdGroupId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdEnrolmentStatus)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdStartDate)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdEndDate)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdAcademicYear)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdEnrolmentPlannedLearningHour)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdTMG)) {
				return ChangedAttributes[8];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdGroupId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdEnrolmentStatus)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdStartDate)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdEndDate)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdAcademicYear)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdEnrolmentPlannedLearningHour)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdTMG)) {
				return OptimizedAttributes[8];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdGroupId) {
				return ssGroupId;
			} else if (key == IdEnrolmentStatus) {
				return ssEnrolmentStatus;
			} else if (key == IdStartDate) {
				return ssStartDate;
			} else if (key == IdEndDate) {
				return ssEndDate;
			} else if (key == IdAcademicYear) {
				return ssAcademicYear;
			} else if (key == IdEnrolmentPlannedLearningHour) {
				return ssEnrolmentPlannedLearningHour;
			} else if (key == IdTMG) {
				return ssTMG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(9);
			OptimizedAttributes = new BitArray(9);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentReference);
			ssGroupId = (int) other.AttributeGet(IdGroupId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdGroupId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdGroupId);
			ssEnrolmentStatus = (string) other.AttributeGet(IdEnrolmentStatus);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdEnrolmentStatus);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdEnrolmentStatus);
			ssStartDate = (DateTime) other.AttributeGet(IdStartDate);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdStartDate);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdStartDate);
			ssEndDate = (DateTime) other.AttributeGet(IdEndDate);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdEndDate);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdEndDate);
			ssAcademicYear = (string) other.AttributeGet(IdAcademicYear);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdAcademicYear);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdAcademicYear);
			ssEnrolmentPlannedLearningHour = (int) other.AttributeGet(IdEnrolmentPlannedLearningHour);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdEnrolmentPlannedLearningHour);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdEnrolmentPlannedLearningHour);
			ssTMG = (string) other.AttributeGet(IdTMG);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdTMG);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdTMG);
		}
	} // ENStudent_GroupEntityRecord
	/// <summary>
	/// Structure <code>RCStudent_GroupRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudent_GroupRecord: ISerializable, ITypedRecord<RCStudent_GroupRecord> {
		private static readonly GlobalObjectKey IdStudent_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y0YgO+CdA+mNBx_jxn8DZw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Student_Group")]
		public ENStudent_GroupEntityRecord ssENStudent_Group;


		public static implicit operator ENStudent_GroupEntityRecord(RCStudent_GroupRecord r) {
			return r.ssENStudent_Group;
		}

		public static implicit operator RCStudent_GroupRecord(ENStudent_GroupEntityRecord r) {
			RCStudent_GroupRecord res = new RCStudent_GroupRecord(null);
			res.ssENStudent_Group = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudent_Group.ChangedAttributes = value;
			}
			get {
				return ssENStudent_Group.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudent_GroupRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudent_Group.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudent_Group.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudent_Group.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudent_Group.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudent_GroupRecord r) {
			this = r;
		}


		public static bool operator == (RCStudent_GroupRecord a, RCStudent_GroupRecord b) {
			if (a.ssENStudent_Group != b.ssENStudent_Group) return false;
			return true;
		}

		public static bool operator != (RCStudent_GroupRecord a, RCStudent_GroupRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudent_GroupRecord)) return false;
			return (this == (RCStudent_GroupRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudent_Group.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudent_GroupRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudent_Group = new ENStudent_GroupEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudent_Group = (ENStudent_GroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudent_Group.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudent_Group.InternalRecursiveSave();
		}


		public RCStudent_GroupRecord Duplicate() {
			RCStudent_GroupRecord t;
			t.ssENStudent_Group = (ENStudent_GroupEntityRecord) this.ssENStudent_Group.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudent_Group.ToXml(this, recordElem, "Student_Group", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "student_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student_Group")) variable.Value = ssENStudent_Group; else variable.Optimized = true;
				variable.SetFieldName("student_group");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudent_Group.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudent_Group.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudent_Group) {
				return ssENStudent_Group;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudent_Group.FillFromOther((IRecord) other.AttributeGet(IdStudent_Group));
		}
	} // RCStudent_GroupRecord
	/// <summary>
	/// RecordList type <code>RLStudent_GroupRecordList</code> that represents a record list of
	///  <code>Student_Group</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudent_GroupRecordList: GenericRecordList<RCStudent_GroupRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudent_GroupRecord GetElementDefaultValue() {
			return new RCStudent_GroupRecord("");
		}

		public T[] ToArray<T>(Func<RCStudent_GroupRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudent_GroupRecordList recordlist, Func<RCStudent_GroupRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudent_GroupRecordList ToList<T>(T[] array, Func <T, RCStudent_GroupRecord> converter) {
			RLStudent_GroupRecordList result = new RLStudent_GroupRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudent_GroupRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudent_GroupRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudent_GroupRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudent_GroupRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudent_GroupRecord> NewList() {
			return new RLStudent_GroupRecordList();
		}


	} // RLStudent_GroupRecordList

	/// <summary>
	/// RecordList type <code>RLStudent_GroupList</code> that represents a record list of
	///  <code>StudentIdentifier, GroupIdentifier, Text, Text, Text, Date, Date, Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudent_GroupList: GenericRecordList<ENStudent_GroupEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudent_GroupEntityRecord GetElementDefaultValue() {
			return new ENStudent_GroupEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudent_GroupEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudent_GroupList recordlist, Func<ENStudent_GroupEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudent_GroupList ToList<T>(T[] array, Func <T, ENStudent_GroupEntityRecord> converter) {
			RLStudent_GroupList result = new RLStudent_GroupList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudent_GroupList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudent_GroupList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudent_GroupList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudent_GroupList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudent_GroupEntityRecord> NewList() {
			return new RLStudent_GroupList();
		}


	} // RLStudent_GroupList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudent_Group
		/// </summary>

		public static void CreateStudent_Group(HeContext heContext, RCStudent_GroupRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudent_GroupEntity.eSpaceId;
				ENStudent_GroupEntityRecord ssENStudent_Group = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudent_GroupEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [GROUPID]" +
					 ", [ENROLMENTSTATUS]" +
					 ", [STARTDATE]" +
					 ", [ENDDATE]" +
					 ", [ACADEMICYEAR]" +
					 ", [ENROLMENTPLANNEDLEARNINGHOUR]" +
					 ", [TMG]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssGroupId" +
					 ", @ssEnrolmentStatus" +
					 ", @ssStartDate" +
					 ", @ssEndDate" +
					 ", @ssAcademicYear" +
					 ", @ssEnrolmentPlannedLearningHour" +
					 ", @ssTMG" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudent_Group.ssStudentReference== "")) {
						insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudent_Group.ssStudentReference);
					}
					if ((ssENStudent_Group.ssGroupId==0)) {
						insertSqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStudent_Group.ssGroupId);
					}
					insertSqlCmd.CreateParameter("@ssEnrolmentStatus", DbType.String, ssENStudent_Group.ssEnrolmentStatus);
					insertSqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENStudent_Group.ssStartDate);
					insertSqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENStudent_Group.ssEndDate);
					insertSqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudent_Group.ssAcademicYear);
					insertSqlCmd.CreateParameter("@ssEnrolmentPlannedLearningHour", DbType.Int32, ssENStudent_Group.ssEnrolmentPlannedLearningHour);
					insertSqlCmd.CreateParameter("@ssTMG", DbType.String, ssENStudent_Group.ssTMG);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudent_Group", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudent_Group
		/// </summary>

		public static void CreateOrUpdateStudent_Group(HeContext heContext, BitArray usedFields, RCStudent_GroupRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudent_GroupEntity.eSpaceId;
				ENStudent_GroupEntityRecord ssENStudent_Group = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(9, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudent_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPID] = @ssGroupId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENROLMENTSTATUS] = @ssEnrolmentStatus"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STARTDATE] = @ssStartDate"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENDDATE] = @ssEndDate"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACADEMICYEAR] = @ssAcademicYear"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENROLMENTPLANNEDLEARNINGHOUR] = @ssEnrolmentPlannedLearningHour"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TMG] = @ssTMG"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudent_GroupssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudent_Group.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudent_Group.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStudent_Group.ssGroupId==0)) {
							sqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStudent_Group.ssGroupId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssEnrolmentStatus", DbType.String, ssENStudent_Group.ssEnrolmentStatus);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENStudent_Group.ssStartDate);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENStudent_Group.ssEndDate);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudent_Group.ssAcademicYear);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssEnrolmentPlannedLearningHour", DbType.Int32, ssENStudent_Group.ssEnrolmentPlannedLearningHour);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssTMG", DbType.String, ssENStudent_Group.ssTMG);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ENROLMENTPLANNEDLEARNINGHOUR] = [ENROLMENTPLANNEDLEARNINGHOUR]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudent_GroupssId", DbType.Int32, ssENStudent_Group.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudent_Group (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudent_GroupEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [GROUPID]" +
						 ", [ENROLMENTSTATUS]" +
						 ", [STARTDATE]" +
						 ", [ENDDATE]" +
						 ", [ACADEMICYEAR]" +
						 ", [ENROLMENTPLANNEDLEARNINGHOUR]" +
						 ", [TMG]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssGroupId" +
						 ", @ssEnrolmentStatus" +
						 ", @ssStartDate" +
						 ", @ssEndDate" +
						 ", @ssAcademicYear" +
						 ", @ssEnrolmentPlannedLearningHour" +
						 ", @ssTMG" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudent_Group.ssStudentReference== "")) {
							insertSqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudent_Group.ssStudentReference);
						}
						if ((ssENStudent_Group.ssGroupId==0)) {
							insertSqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStudent_Group.ssGroupId);
						}
						insertSqlCmd.CreateParameter("@ssEnrolmentStatus", DbType.String, ssENStudent_Group.ssEnrolmentStatus);
						insertSqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENStudent_Group.ssStartDate);
						insertSqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENStudent_Group.ssEndDate);
						insertSqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudent_Group.ssAcademicYear);
						insertSqlCmd.CreateParameter("@ssEnrolmentPlannedLearningHour", DbType.Int32, ssENStudent_Group.ssEnrolmentPlannedLearningHour);
						insertSqlCmd.CreateParameter("@ssTMG", DbType.String, ssENStudent_Group.ssTMG);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudent_Group", true), typeof(int));
					} else {
						outParamId = ssENStudent_Group.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudent_Group
		/// </summary>

		public static void DeleteStudent_Group(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudent_GroupEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudent_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudent_Group", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudent_Group
		/// </summary>

		public static void GetStudent_Group(HeContext heContext, int inParamId, out RCStudent_GroupRecord outParamRecord) {
			outParamRecord = new RCStudent_GroupRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudent_GroupEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [GROUPID]" +
					 ", [ENROLMENTSTATUS]" +
					 ", [STARTDATE]" +
					 ", [ENDDATE]" +
					 ", [ACADEMICYEAR]" +
					 ", [ENROLMENTPLANNEDLEARNINGHOUR]" +
					 ", [TMG]" +
					 " FROM " + ENStudent_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudent_Group", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(9, false)
							}
							;
						} else
						throw new DataBaseException(ENStudent_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudent_GroupForUpdate
		/// </summary>

		public static void GetStudent_GroupForUpdate(HeContext heContext, int inParamId, out RCStudent_GroupRecord outParamRecord) {
			outParamRecord = new RCStudent_GroupRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudent_GroupEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTREFERENCE]" +
					 ", [GROUPID]" +
					 ", [ENROLMENTSTATUS]" +
					 ", [STARTDATE]" +
					 ", [ENDDATE]" +
					 ", [ACADEMICYEAR]" +
					 ", [ENROLMENTPLANNEDLEARNINGHOUR]" +
					 ", [TMG]" +
					 "FROM " + ENStudent_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudent_GroupForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(9, false)
							}
							;
						} else
						throw new DataBaseException(ENStudent_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudent_Group
		/// </summary>

		public static void UpdateStudent_Group(HeContext heContext, BitArray usedFields, RCStudent_GroupRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudent_GroupEntity.eSpaceId;
				ENStudent_GroupEntityRecord ssENStudent_Group = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(9, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudent_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTREFERENCE] = @ssStudentReference"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPID] = @ssGroupId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENROLMENTSTATUS] = @ssEnrolmentStatus"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STARTDATE] = @ssStartDate"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENDDATE] = @ssEndDate"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACADEMICYEAR] = @ssAcademicYear"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ENROLMENTPLANNEDLEARNINGHOUR] = @ssEnrolmentPlannedLearningHour"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TMG] = @ssTMG"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudent_GroupssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudent_Group.ssStudentReference== "")) {
							sqlCmd.CreateParameter("@ssStudentReference", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudent_Group.ssStudentReference);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStudent_Group.ssGroupId==0)) {
							sqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStudent_Group.ssGroupId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssEnrolmentStatus", DbType.String, ssENStudent_Group.ssEnrolmentStatus);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssStartDate", DbType.DateTime, ssENStudent_Group.ssStartDate);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssEndDate", DbType.DateTime, ssENStudent_Group.ssEndDate);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssAcademicYear", DbType.String, ssENStudent_Group.ssAcademicYear);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssEnrolmentPlannedLearningHour", DbType.Int32, ssENStudent_Group.ssEnrolmentPlannedLearningHour);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssTMG", DbType.String, ssENStudent_Group.ssTMG);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[ENROLMENTPLANNEDLEARNINGHOUR] = [ENROLMENTPLANNEDLEARNINGHOUR]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudent_GroupssId", DbType.Int32, ssENStudent_Group.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudent_Group", true) <= 0)
					throw new DataBaseException(ENStudent_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudent_Group.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Student_Group")]
	public class WORCStudent_GroupRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("GroupId")]
		public int varWSGroupId;

		[System.Xml.Serialization.XmlElement("EnrolmentStatus")]
		public string varWSEnrolmentStatus;

		[System.Xml.Serialization.XmlElement("StartDate", DataType= "date")]
		public DateTime varWSStartDate;

		[System.Xml.Serialization.XmlElement("EndDate", DataType= "date")]
		public DateTime varWSEndDate;

		[System.Xml.Serialization.XmlElement("AcademicYear")]
		public string varWSAcademicYear;

		[System.Xml.Serialization.XmlElement("EnrolmentPlannedLearningHour")]
		public int varWSEnrolmentPlannedLearningHour;

		[System.Xml.Serialization.XmlElement("TMG")]
		public string varWSTMG;

		public WORCStudent_GroupRecord() {
			varWSId = (int) 0;
			varWSStudentReference = (string) "";
			varWSGroupId = (int) 0;
			varWSEnrolmentStatus = (string) "";
			varWSStartDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSEndDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSAcademicYear = (string) "";
			varWSEnrolmentPlannedLearningHour = (int) 0;
			varWSTMG = (string) "";
		}

		public WORCStudent_GroupRecord(ENStudent_GroupEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSGroupId = (int) r.ssGroupId;
			varWSEnrolmentStatus = BaseAppUtils.RemoveControlChars(r.ssEnrolmentStatus);
			varWSStartDate = (DateTime) r.ssStartDate;
			varWSEndDate = (DateTime) r.ssEndDate;
			varWSAcademicYear = BaseAppUtils.RemoveControlChars(r.ssAcademicYear);
			varWSEnrolmentPlannedLearningHour = (int) r.ssEnrolmentPlannedLearningHour;
			varWSTMG = BaseAppUtils.RemoveControlChars(r.ssTMG);
		}

		public static RLStudent_GroupList ToRecordList(WORCStudent_GroupRecord[] array) {
			RLStudent_GroupList rl = new RLStudent_GroupList();
			if (array != null) {
				foreach(WORCStudent_GroupRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudent_GroupRecord[] FromRecordList(RLStudent_GroupList rl) {
			WORCStudent_GroupRecord[] array = new WORCStudent_GroupRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudent_GroupRecord {
		public static implicit operator WORCStudent_GroupRecord(RCStudent_GroupRecord r) {
			return new WORCStudent_GroupRecord(r.ssENStudent_Group);
		}

		public static implicit operator RCStudent_GroupRecord(WORCStudent_GroupRecord w) {
			RCStudent_GroupRecord r = new RCStudent_GroupRecord("");
			if (w != null) {
				r.ssENStudent_Group = w;
			}
			return r;
		}

	}

	partial struct ENStudent_GroupEntityRecord {
		public static implicit operator WORCStudent_GroupRecord(ENStudent_GroupEntityRecord r) {
			return new WORCStudent_GroupRecord(r);
		}

		public static implicit operator ENStudent_GroupEntityRecord(WORCStudent_GroupRecord w) {
			ENStudent_GroupEntityRecord r = new ENStudent_GroupEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssGroupId = (int) w.varWSGroupId;
				r.ssEnrolmentStatus = ((string) w.varWSEnrolmentStatus ?? "");
				r.ssStartDate = (DateTime) w.varWSStartDate;
				r.ssEndDate = (DateTime) w.varWSEndDate;
				r.ssAcademicYear = ((string) w.varWSAcademicYear ?? "");
				r.ssEnrolmentPlannedLearningHour = (int) w.varWSEnrolmentPlannedLearningHour;
				r.ssTMG = ((string) w.varWSTMG ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudent_GroupRecordList {
		public WORCStudent_GroupRecord[] Array;


		public WORLStudent_GroupRecordList(WORCStudent_GroupRecord[] r) {
			if (r == null)
			Array = new WORCStudent_GroupRecord[0];
			else
			Array = r;
		}
		public WORLStudent_GroupRecordList() {
			Array = new WORCStudent_GroupRecord[0];
		}

		public WORLStudent_GroupRecordList(RLStudent_GroupRecordList rl) {
			rl=(RLStudent_GroupRecordList) rl.Duplicate();
			Array = new WORCStudent_GroupRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudent_GroupRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudent_GroupRecordList {
		public static implicit operator RLStudent_GroupRecordList(WORCStudent_GroupRecord[] array) {
			RLStudent_GroupRecordList rl = new RLStudent_GroupRecordList();
			if (array != null) {
				foreach(WORCStudent_GroupRecord val in array) {
					rl.Append((RCStudent_GroupRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudent_GroupRecord[](RLStudent_GroupRecordList rl) {
			WORCStudent_GroupRecord[] array = new WORCStudent_GroupRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudent_GroupRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudent_GroupRecordList {
		public static implicit operator RLStudent_GroupRecordList(WORLStudent_GroupRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudent_GroupRecordList(RLStudent_GroupRecordList rl) {
			return new WORLStudent_GroupRecordList(rl);
		}
		public static implicit operator WORCStudent_GroupRecord[](WORLStudent_GroupRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudent_GroupRecordList(WORCStudent_GroupRecord[] array) {
			return new WORLStudent_GroupRecordList(array);
		}
	}
}

