/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENCommunicationDocumentsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENCommunicationDocumentsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENCommunicationDocumentsEntity.eSpaceId;
	} // ENCommunicationDocumentsEntity

	/// <summary>
	/// Entity <code>ENCommunicationDocumentsEntityRecord</code> that represents the Service Studio entity
	///  <code>CommunicationDocuments</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("CommunicationDocuments", "fhgIvdByxk2ELTZNvLFYFw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_CommunicationDocuments", "")]
	[Serializable()]
	public partial struct ENCommunicationDocumentsEntityRecord: ISerializable, ITypedRecord<ENCommunicationDocumentsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*kYFNQ2V0Z0aWYufIdKYmtw");
		private static readonly GlobalObjectKey IdCommunicationId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*oFbcSMEIXkKx2i2bwul2WA");
		private static readonly GlobalObjectKey IdDocumentId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Ilbr_a0K9U2u8Xbjy8572w");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COMMUNICATIONID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CommunicationId")]
		private int _ssCommunicationId;
		public int ssCommunicationId {
			get {
				return _ssCommunicationId;
			}
			set {
				if ((_ssCommunicationId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssCommunicationId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DOCUMENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("DocumentId")]
		private int _ssDocumentId;
		public int ssDocumentId {
			get {
				return _ssDocumentId;
			}
			set {
				if ((_ssDocumentId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDocumentId = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENCommunicationDocumentsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssCommunicationId = 0;
			_ssDocumentId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "CommunicationDocuments.Id", 0);
			ssCommunicationId = r.ReadEntityReference(index++, "CommunicationDocuments.CommunicationId", 0);
			ssDocumentId = r.ReadEntityReference(index++, "CommunicationDocuments.DocumentId", 0);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENCommunicationDocumentsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENCommunicationDocumentsEntityRecord a, ENCommunicationDocumentsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssCommunicationId != b.ssCommunicationId) return false;
			if (a.ssDocumentId != b.ssDocumentId) return false;
			return true;
		}

		public static bool operator != (ENCommunicationDocumentsEntityRecord a, ENCommunicationDocumentsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENCommunicationDocumentsEntityRecord)) return false;
			return (this == (ENCommunicationDocumentsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssCommunicationId.GetHashCode()
				^ ssDocumentId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENCommunicationDocumentsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssCommunicationId = 0;
			_ssDocumentId = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssCommunicationId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDocumentId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENCommunicationDocumentsEntityRecord Duplicate() {
			ENCommunicationDocumentsEntityRecord t;
			t._ssId = this._ssId;
			t._ssCommunicationId = this._ssCommunicationId;
			t._ssDocumentId = this._ssDocumentId;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CommunicationId")) VarValue.AppendAttribute(recordElem, "CommunicationId", ssCommunicationId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CommunicationId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DocumentId")) VarValue.AppendAttribute(recordElem, "DocumentId", ssDocumentId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "DocumentId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "communicationid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CommunicationId")) variable.Value = ssCommunicationId; else variable.Optimized = true;
			} else if (head == "documentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DocumentId")) variable.Value = ssDocumentId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdCommunicationId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDocumentId)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdCommunicationId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDocumentId)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdCommunicationId) {
				return ssCommunicationId;
			} else if (key == IdDocumentId) {
				return ssDocumentId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssCommunicationId = (int) other.AttributeGet(IdCommunicationId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdCommunicationId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdCommunicationId);
			ssDocumentId = (int) other.AttributeGet(IdDocumentId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDocumentId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDocumentId);
		}
	} // ENCommunicationDocumentsEntityRecord
	/// <summary>
	/// Structure <code>RCCommunicationDocumentsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCommunicationDocumentsRecord: ISerializable, ITypedRecord<RCCommunicationDocumentsRecord> {
		private static readonly GlobalObjectKey IdCommunicationDocuments = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*+9HemxKzrnb57b60xwFtHg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CommunicationDocuments")]
		public ENCommunicationDocumentsEntityRecord ssENCommunicationDocuments;


		public static implicit operator ENCommunicationDocumentsEntityRecord(RCCommunicationDocumentsRecord r) {
			return r.ssENCommunicationDocuments;
		}

		public static implicit operator RCCommunicationDocumentsRecord(ENCommunicationDocumentsEntityRecord r) {
			RCCommunicationDocumentsRecord res = new RCCommunicationDocumentsRecord(null);
			res.ssENCommunicationDocuments = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENCommunicationDocuments.ChangedAttributes = value;
			}
			get {
				return ssENCommunicationDocuments.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCCommunicationDocumentsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCommunicationDocuments = new ENCommunicationDocumentsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCommunicationDocuments.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENCommunicationDocuments.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENCommunicationDocuments.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCommunicationDocuments.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCommunicationDocumentsRecord r) {
			this = r;
		}


		public static bool operator == (RCCommunicationDocumentsRecord a, RCCommunicationDocumentsRecord b) {
			if (a.ssENCommunicationDocuments != b.ssENCommunicationDocuments) return false;
			return true;
		}

		public static bool operator != (RCCommunicationDocumentsRecord a, RCCommunicationDocumentsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCommunicationDocumentsRecord)) return false;
			return (this == (RCCommunicationDocumentsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCommunicationDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCommunicationDocumentsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCommunicationDocuments = new ENCommunicationDocumentsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCommunicationDocuments = (ENCommunicationDocumentsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENCommunicationDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCommunicationDocuments.InternalRecursiveSave();
		}


		public RCCommunicationDocumentsRecord Duplicate() {
			RCCommunicationDocumentsRecord t;
			t.ssENCommunicationDocuments = (ENCommunicationDocumentsEntityRecord) this.ssENCommunicationDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCommunicationDocuments.ToXml(this, recordElem, "CommunicationDocuments", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "communicationdocuments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CommunicationDocuments")) variable.Value = ssENCommunicationDocuments; else variable.Optimized = true;
				variable.SetFieldName("communicationdocuments");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENCommunicationDocuments.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENCommunicationDocuments.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCommunicationDocuments) {
				return ssENCommunicationDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCommunicationDocuments.FillFromOther((IRecord) other.AttributeGet(IdCommunicationDocuments));
		}
	} // RCCommunicationDocumentsRecord
	/// <summary>
	/// RecordList type <code>RLCommunicationDocumentsRecordList</code> that represents a record list of
	///  <code>CommunicationDocuments</code>
	/// </summary>
	[Serializable()]
	public partial class RLCommunicationDocumentsRecordList: GenericRecordList<RCCommunicationDocumentsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCommunicationDocumentsRecord GetElementDefaultValue() {
			return new RCCommunicationDocumentsRecord("");
		}

		public T[] ToArray<T>(Func<RCCommunicationDocumentsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCommunicationDocumentsRecordList recordlist, Func<RCCommunicationDocumentsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCommunicationDocumentsRecordList ToList<T>(T[] array, Func <T, RCCommunicationDocumentsRecord> converter) {
			RLCommunicationDocumentsRecordList result = new RLCommunicationDocumentsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCommunicationDocumentsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCommunicationDocumentsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCommunicationDocumentsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCommunicationDocumentsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCommunicationDocumentsRecord> NewList() {
			return new RLCommunicationDocumentsRecordList();
		}


	} // RLCommunicationDocumentsRecordList

	/// <summary>
	/// RecordList type <code>RLCommunicationDocumentsList</code> that represents a record list of
	///  <code>Integer, CommunicationIdentifier, DocumentsIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLCommunicationDocumentsList: GenericRecordList<ENCommunicationDocumentsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENCommunicationDocumentsEntityRecord GetElementDefaultValue() {
			return new ENCommunicationDocumentsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENCommunicationDocumentsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCommunicationDocumentsList recordlist, Func<ENCommunicationDocumentsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCommunicationDocumentsList ToList<T>(T[] array, Func <T, ENCommunicationDocumentsEntityRecord> converter) {
			RLCommunicationDocumentsList result = new RLCommunicationDocumentsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCommunicationDocumentsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCommunicationDocumentsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCommunicationDocumentsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCommunicationDocumentsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENCommunicationDocumentsEntityRecord> NewList() {
			return new RLCommunicationDocumentsList();
		}


	} // RLCommunicationDocumentsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateCommunicationDocuments
		/// </summary>

		public static void CreateCommunicationDocuments(HeContext heContext, RCCommunicationDocumentsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationDocumentsEntity.eSpaceId;
				ENCommunicationDocumentsEntityRecord ssENCommunicationDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENCommunicationDocumentsEntity.LocalViewName(null, null) + " (" +
					 " [COMMUNICATIONID]" +
					 ", [DOCUMENTID]" +
					 " ) VALUES (" +
					 " @ssCommunicationId" +
					 ", @ssDocumentId" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENCommunicationDocuments.ssCommunicationId==0)) {
						insertSqlCmd.CreateParameter("@ssCommunicationId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCommunicationId", DbType.Int32, ssENCommunicationDocuments.ssCommunicationId);
					}
					if ((ssENCommunicationDocuments.ssDocumentId==0)) {
						insertSqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENCommunicationDocuments.ssDocumentId);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateCommunicationDocuments", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateCommunicationDocuments
		/// </summary>

		public static void CreateOrUpdateCommunicationDocuments(HeContext heContext, BitArray usedFields, RCCommunicationDocumentsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationDocumentsEntity.eSpaceId;
				ENCommunicationDocumentsEntityRecord ssENCommunicationDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCommunicationDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMMUNICATIONID] = @ssCommunicationId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCommunicationDocumentsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCommunicationDocuments.ssCommunicationId==0)) {
							sqlCmd.CreateParameter("@ssCommunicationId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCommunicationId", DbType.Int32, ssENCommunicationDocuments.ssCommunicationId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCommunicationDocuments.ssDocumentId==0)) {
							sqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENCommunicationDocuments.ssDocumentId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[COMMUNICATIONID] = [COMMUNICATIONID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCommunicationDocumentsssId", DbType.Int32, ssENCommunicationDocuments.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateCommunicationDocuments (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENCommunicationDocumentsEntity.LocalViewName(null, null) + " (" +
						 " [COMMUNICATIONID]" +
						 ", [DOCUMENTID]" +
						 " ) VALUES (" +
						 " @ssCommunicationId" +
						 ", @ssDocumentId" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENCommunicationDocuments.ssCommunicationId==0)) {
							insertSqlCmd.CreateParameter("@ssCommunicationId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCommunicationId", DbType.Int32, ssENCommunicationDocuments.ssCommunicationId);
						}
						if ((ssENCommunicationDocuments.ssDocumentId==0)) {
							insertSqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENCommunicationDocuments.ssDocumentId);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateCommunicationDocuments", true), typeof(int));
					} else {
						outParamId = ssENCommunicationDocuments.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteCommunicationDocuments
		/// </summary>

		public static void DeleteCommunicationDocuments(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENCommunicationDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteCommunicationDocuments", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCommunicationDocuments
		/// </summary>

		public static void GetCommunicationDocuments(HeContext heContext, int inParamId, out RCCommunicationDocumentsRecord outParamRecord) {
			outParamRecord = new RCCommunicationDocumentsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [COMMUNICATIONID]" +
					 ", [DOCUMENTID]" +
					 " FROM " + ENCommunicationDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCommunicationDocuments", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENCommunicationDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetCommunicationDocumentsForUpdate
		/// </summary>

		public static void GetCommunicationDocumentsForUpdate(HeContext heContext, int inParamId, out RCCommunicationDocumentsRecord outParamRecord) {
			outParamRecord = new RCCommunicationDocumentsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationDocumentsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [COMMUNICATIONID]" +
					 ", [DOCUMENTID]" +
					 "FROM " + ENCommunicationDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCommunicationDocumentsForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENCommunicationDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateCommunicationDocuments
		/// </summary>

		public static void UpdateCommunicationDocuments(HeContext heContext, BitArray usedFields, RCCommunicationDocumentsRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCommunicationDocumentsEntity.eSpaceId;
				ENCommunicationDocumentsEntityRecord ssENCommunicationDocuments = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENCommunicationDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COMMUNICATIONID] = @ssCommunicationId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DOCUMENTID] = @ssDocumentId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENCommunicationDocumentsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENCommunicationDocuments.ssCommunicationId==0)) {
							sqlCmd.CreateParameter("@ssCommunicationId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCommunicationId", DbType.Int32, ssENCommunicationDocuments.ssCommunicationId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENCommunicationDocuments.ssDocumentId==0)) {
							sqlCmd.CreateParameter("@ssDocumentId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssDocumentId", DbType.Int32, ssENCommunicationDocuments.ssDocumentId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[COMMUNICATIONID] = [COMMUNICATIONID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENCommunicationDocumentsssId", DbType.Int32, ssENCommunicationDocuments.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateCommunicationDocuments", true) <= 0)
					throw new DataBaseException(ENCommunicationDocumentsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENCommunicationDocuments.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("CommunicationDocuments")]
	public class WORCCommunicationDocumentsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("CommunicationId")]
		public int varWSCommunicationId;

		[System.Xml.Serialization.XmlElement("DocumentId")]
		public int varWSDocumentId;

		public WORCCommunicationDocumentsRecord() {
			varWSId = (int) 0;
			varWSCommunicationId = (int) 0;
			varWSDocumentId = (int) 0;
		}

		public WORCCommunicationDocumentsRecord(ENCommunicationDocumentsEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSCommunicationId = (int) r.ssCommunicationId;
			varWSDocumentId = (int) r.ssDocumentId;
		}

		public static RLCommunicationDocumentsList ToRecordList(WORCCommunicationDocumentsRecord[] array) {
			RLCommunicationDocumentsList rl = new RLCommunicationDocumentsList();
			if (array != null) {
				foreach(WORCCommunicationDocumentsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCommunicationDocumentsRecord[] FromRecordList(RLCommunicationDocumentsList rl) {
			WORCCommunicationDocumentsRecord[] array = new WORCCommunicationDocumentsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCommunicationDocumentsRecord {
		public static implicit operator WORCCommunicationDocumentsRecord(RCCommunicationDocumentsRecord r) {
			return new WORCCommunicationDocumentsRecord(r.ssENCommunicationDocuments);
		}

		public static implicit operator RCCommunicationDocumentsRecord(WORCCommunicationDocumentsRecord w) {
			RCCommunicationDocumentsRecord r = new RCCommunicationDocumentsRecord("");
			if (w != null) {
				r.ssENCommunicationDocuments = w;
			}
			return r;
		}

	}

	partial struct ENCommunicationDocumentsEntityRecord {
		public static implicit operator WORCCommunicationDocumentsRecord(ENCommunicationDocumentsEntityRecord r) {
			return new WORCCommunicationDocumentsRecord(r);
		}

		public static implicit operator ENCommunicationDocumentsEntityRecord(WORCCommunicationDocumentsRecord w) {
			ENCommunicationDocumentsEntityRecord r = new ENCommunicationDocumentsEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssCommunicationId = (int) w.varWSCommunicationId;
				r.ssDocumentId = (int) w.varWSDocumentId;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCommunicationDocumentsRecordList {
		public WORCCommunicationDocumentsRecord[] Array;


		public WORLCommunicationDocumentsRecordList(WORCCommunicationDocumentsRecord[] r) {
			if (r == null)
			Array = new WORCCommunicationDocumentsRecord[0];
			else
			Array = r;
		}
		public WORLCommunicationDocumentsRecordList() {
			Array = new WORCCommunicationDocumentsRecord[0];
		}

		public WORLCommunicationDocumentsRecordList(RLCommunicationDocumentsRecordList rl) {
			rl=(RLCommunicationDocumentsRecordList) rl.Duplicate();
			Array = new WORCCommunicationDocumentsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCommunicationDocumentsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCommunicationDocumentsRecordList {
		public static implicit operator RLCommunicationDocumentsRecordList(WORCCommunicationDocumentsRecord[] array) {
			RLCommunicationDocumentsRecordList rl = new RLCommunicationDocumentsRecordList();
			if (array != null) {
				foreach(WORCCommunicationDocumentsRecord val in array) {
					rl.Append((RCCommunicationDocumentsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCommunicationDocumentsRecord[](RLCommunicationDocumentsRecordList rl) {
			WORCCommunicationDocumentsRecord[] array = new WORCCommunicationDocumentsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCommunicationDocumentsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCommunicationDocumentsRecordList {
		public static implicit operator RLCommunicationDocumentsRecordList(WORLCommunicationDocumentsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCommunicationDocumentsRecordList(RLCommunicationDocumentsRecordList rl) {
			return new WORLCommunicationDocumentsRecordList(rl);
		}
		public static implicit operator WORCCommunicationDocumentsRecord[](WORLCommunicationDocumentsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCommunicationDocumentsRecordList(WORCCommunicationDocumentsRecord[] array) {
			return new WORLCommunicationDocumentsRecordList(array);
		}
	}
}

