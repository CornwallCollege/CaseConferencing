/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentMLWProcessCompetenciesEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentMLWProcessCompetenciesEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentMLWProcessCompetenciesEntity.eSpaceId;
	} // ENStudentMLWProcessCompetenciesEntity

	/// <summary>
	/// Entity <code>ENStudentMLWProcessCompetenciesEntityRecord</code> that represents the Service Studio
	///  entity <code>StudentMLWProcessCompetencies</code> <p> Description: Employability Competencies</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentMLWProcessCompetencies", "3DHNk6AipEyBPzsLkWJBBw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentMLWProcessCompetencies", "")]
	[Serializable()]
	public partial struct ENStudentMLWProcessCompetenciesEntityRecord: ISerializable, ITypedRecord<ENStudentMLWProcessCompetenciesEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*nM1aOOUPMESKvlmpuo1Aqg");
		private static readonly GlobalObjectKey IdStudentMLWId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*kO96+VTpcU6MMkmZ6WxMjQ");
		private static readonly GlobalObjectKey IdMLWCompetencieId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*GroeDTJhHE2nFQCi7PaivA");
		private static readonly GlobalObjectKey IdCurrentLevel = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*fSIW0ftR0k+v0jz6okFL7Q");
		private static readonly GlobalObjectKey IdUpdatedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*e31NIa_doUCK9oD2KfWZ5g");
		private static readonly GlobalObjectKey IdUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*l_L5KALjHkSsyVBZyvAKPg");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(6, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTMLWID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentMLWId")]
		private int _ssStudentMLWId;
		public int ssStudentMLWId {
			get {
				return _ssStudentMLWId;
			}
			set {
				if ((_ssStudentMLWId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentMLWId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MLWCOMPETENCIEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("MLWCompetencieId")]
		private string _ssMLWCompetencieId;
		public string ssMLWCompetencieId {
			get {
				return _ssMLWCompetencieId;
			}
			set {
				if ((_ssMLWCompetencieId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssMLWCompetencieId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CURRENTLEVEL", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CurrentLevel")]
		private int _ssCurrentLevel;
		public int ssCurrentLevel {
			get {
				return _ssCurrentLevel;
			}
			set {
				if ((_ssCurrentLevel!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssCurrentLevel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("UpdatedOn")]
		private DateTime _ssUpdatedOn;
		public DateTime ssUpdatedOn {
			get {
				return _ssUpdatedOn;
			}
			set {
				if ((_ssUpdatedOn!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssUpdatedOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("UpdatedBy")]
		private int _ssUpdatedBy;
		public int ssUpdatedBy {
			get {
				return _ssUpdatedBy;
			}
			set {
				if ((_ssUpdatedBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssUpdatedBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentMLWProcessCompetenciesEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(6, true);
			OptimizedAttributes = new BitArray(6, false);
			_ssId = 0;
			_ssStudentMLWId = 0;
			_ssMLWCompetencieId = "";
			_ssCurrentLevel = 0;
			_ssUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssUpdatedBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentMLWProcessCompetencies.Id", 0);
			ssStudentMLWId = r.ReadEntityReference(index++, "StudentMLWProcessCompetencies.StudentMLWId", 0);
			ssMLWCompetencieId = r.ReadTextEntityReference(index++, "StudentMLWProcessCompetencies.MLWCompetencieId", "");
			ssCurrentLevel = r.ReadInteger(index++, "StudentMLWProcessCompetencies.CurrentLevel", 0);
			ssUpdatedOn = r.ReadDateTime(index++, "StudentMLWProcessCompetencies.UpdatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssUpdatedBy = r.ReadEntityReference(index++, "StudentMLWProcessCompetencies.UpdatedBy", 0);
			ChangedAttributes = new BitArray(6, false);
			OptimizedAttributes = new BitArray(6, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentMLWProcessCompetenciesEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentMLWProcessCompetenciesEntityRecord a, ENStudentMLWProcessCompetenciesEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentMLWId != b.ssStudentMLWId) return false;
			if (a.ssMLWCompetencieId != b.ssMLWCompetencieId) return false;
			if (a.ssCurrentLevel != b.ssCurrentLevel) return false;
			if (a.ssUpdatedOn != b.ssUpdatedOn) return false;
			if (a.ssUpdatedBy != b.ssUpdatedBy) return false;
			return true;
		}

		public static bool operator != (ENStudentMLWProcessCompetenciesEntityRecord a, ENStudentMLWProcessCompetenciesEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentMLWProcessCompetenciesEntityRecord)) return false;
			return (this == (ENStudentMLWProcessCompetenciesEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentMLWId.GetHashCode()
				^ ssMLWCompetencieId.GetHashCode()
				^ ssCurrentLevel.GetHashCode()
				^ ssUpdatedOn.GetHashCode()
				^ ssUpdatedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentMLWProcessCompetenciesEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(6, true);
			OptimizedAttributes = new BitArray(6, false);
			_ssId = 0;
			_ssStudentMLWId = 0;
			_ssMLWCompetencieId = "";
			_ssCurrentLevel = 0;
			_ssUpdatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssUpdatedBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentMLWId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssMLWCompetencieId = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssCurrentLevel = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssUpdatedOn = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssUpdatedBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentMLWProcessCompetenciesEntityRecord Duplicate() {
			ENStudentMLWProcessCompetenciesEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentMLWId = this._ssStudentMLWId;
			t._ssMLWCompetencieId = this._ssMLWCompetencieId;
			t._ssCurrentLevel = this._ssCurrentLevel;
			t._ssUpdatedOn = this._ssUpdatedOn;
			t._ssUpdatedBy = this._ssUpdatedBy;
			t.ChangedAttributes = new BitArray(6);
			t.OptimizedAttributes = new BitArray(6);
			for (int i = 0; i < 6; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentMLWId")) VarValue.AppendAttribute(recordElem, "StudentMLWId", ssStudentMLWId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentMLWId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWCompetencieId")) VarValue.AppendAttribute(recordElem, "MLWCompetencieId", ssMLWCompetencieId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MLWCompetencieId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurrentLevel")) VarValue.AppendAttribute(recordElem, "CurrentLevel", ssCurrentLevel, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CurrentLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdatedOn")) VarValue.AppendAttribute(recordElem, "UpdatedOn", ssUpdatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "UpdatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdatedBy")) VarValue.AppendAttribute(recordElem, "UpdatedBy", ssUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "UpdatedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentmlwid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentMLWId")) variable.Value = ssStudentMLWId; else variable.Optimized = true;
			} else if (head == "mlwcompetencieid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWCompetencieId")) variable.Value = ssMLWCompetencieId; else variable.Optimized = true;
			} else if (head == "currentlevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurrentLevel")) variable.Value = ssCurrentLevel; else variable.Optimized = true;
			} else if (head == "updatedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdatedOn")) variable.Value = ssUpdatedOn; else variable.Optimized = true;
			} else if (head == "updatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdatedBy")) variable.Value = ssUpdatedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentMLWId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdMLWCompetencieId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdCurrentLevel)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdUpdatedOn)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdUpdatedBy)) {
				return ChangedAttributes[5];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentMLWId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdMLWCompetencieId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdCurrentLevel)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdUpdatedOn)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdUpdatedBy)) {
				return OptimizedAttributes[5];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentMLWId) {
				return ssStudentMLWId;
			} else if (key == IdMLWCompetencieId) {
				return ssMLWCompetencieId;
			} else if (key == IdCurrentLevel) {
				return ssCurrentLevel;
			} else if (key == IdUpdatedOn) {
				return ssUpdatedOn;
			} else if (key == IdUpdatedBy) {
				return ssUpdatedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(6);
			OptimizedAttributes = new BitArray(6);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentMLWId = (int) other.AttributeGet(IdStudentMLWId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentMLWId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentMLWId);
			ssMLWCompetencieId = (string) other.AttributeGet(IdMLWCompetencieId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdMLWCompetencieId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdMLWCompetencieId);
			ssCurrentLevel = (int) other.AttributeGet(IdCurrentLevel);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdCurrentLevel);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdCurrentLevel);
			ssUpdatedOn = (DateTime) other.AttributeGet(IdUpdatedOn);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdUpdatedOn);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdUpdatedOn);
			ssUpdatedBy = (int) other.AttributeGet(IdUpdatedBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdUpdatedBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdUpdatedBy);
		}
	} // ENStudentMLWProcessCompetenciesEntityRecord
	/// <summary>
	/// Structure <code>RCStudentMLWProcessCompetenciesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentMLWProcessCompetenciesRecord: ISerializable, ITypedRecord<RCStudentMLWProcessCompetenciesRecord> {
		private static readonly GlobalObjectKey IdStudentMLWProcessCompetencies = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*f7Y1wT5MqlRVXN0NoUeM8g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentMLWProcessCompetencies")]
		public ENStudentMLWProcessCompetenciesEntityRecord ssENStudentMLWProcessCompetencies;


		public static implicit operator ENStudentMLWProcessCompetenciesEntityRecord(RCStudentMLWProcessCompetenciesRecord r) {
			return r.ssENStudentMLWProcessCompetencies;
		}

		public static implicit operator RCStudentMLWProcessCompetenciesRecord(ENStudentMLWProcessCompetenciesEntityRecord r) {
			RCStudentMLWProcessCompetenciesRecord res = new RCStudentMLWProcessCompetenciesRecord(null);
			res.ssENStudentMLWProcessCompetencies = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentMLWProcessCompetencies.ChangedAttributes = value;
			}
			get {
				return ssENStudentMLWProcessCompetencies.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentMLWProcessCompetenciesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentMLWProcessCompetencies = new ENStudentMLWProcessCompetenciesEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(6, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentMLWProcessCompetencies.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentMLWProcessCompetencies.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentMLWProcessCompetencies.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentMLWProcessCompetencies.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentMLWProcessCompetenciesRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentMLWProcessCompetenciesRecord a, RCStudentMLWProcessCompetenciesRecord b) {
			if (a.ssENStudentMLWProcessCompetencies != b.ssENStudentMLWProcessCompetencies) return false;
			return true;
		}

		public static bool operator != (RCStudentMLWProcessCompetenciesRecord a, RCStudentMLWProcessCompetenciesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentMLWProcessCompetenciesRecord)) return false;
			return (this == (RCStudentMLWProcessCompetenciesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentMLWProcessCompetencies.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentMLWProcessCompetenciesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentMLWProcessCompetencies = new ENStudentMLWProcessCompetenciesEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentMLWProcessCompetencies = (ENStudentMLWProcessCompetenciesEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentMLWProcessCompetencies.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentMLWProcessCompetencies.InternalRecursiveSave();
		}


		public RCStudentMLWProcessCompetenciesRecord Duplicate() {
			RCStudentMLWProcessCompetenciesRecord t;
			t.ssENStudentMLWProcessCompetencies = (ENStudentMLWProcessCompetenciesEntityRecord) this.ssENStudentMLWProcessCompetencies.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentMLWProcessCompetencies.ToXml(this, recordElem, "StudentMLWProcessCompetencies", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentmlwprocesscompetencies") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentMLWProcessCompetencies")) variable.Value = ssENStudentMLWProcessCompetencies; else variable.Optimized = true;
				variable.SetFieldName("studentmlwprocesscompetencies");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentMLWProcessCompetencies.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentMLWProcessCompetencies.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentMLWProcessCompetencies) {
				return ssENStudentMLWProcessCompetencies;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentMLWProcessCompetencies.FillFromOther((IRecord) other.AttributeGet(IdStudentMLWProcessCompetencies));
		}
	} // RCStudentMLWProcessCompetenciesRecord
	/// <summary>
	/// RecordList type <code>RLStudentMLWProcessCompetenciesRecordList</code> that represents a record
	///  list of <code>StudentMLWProcessCompetencies</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentMLWProcessCompetenciesRecordList: GenericRecordList<RCStudentMLWProcessCompetenciesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentMLWProcessCompetenciesRecord GetElementDefaultValue() {
			return new RCStudentMLWProcessCompetenciesRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentMLWProcessCompetenciesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentMLWProcessCompetenciesRecordList recordlist, Func<RCStudentMLWProcessCompetenciesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentMLWProcessCompetenciesRecordList ToList<T>(T[] array, Func <T, RCStudentMLWProcessCompetenciesRecord> converter) {
			RLStudentMLWProcessCompetenciesRecordList result = new RLStudentMLWProcessCompetenciesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentMLWProcessCompetenciesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentMLWProcessCompetenciesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentMLWProcessCompetenciesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentMLWProcessCompetenciesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(6, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentMLWProcessCompetenciesRecord> NewList() {
			return new RLStudentMLWProcessCompetenciesRecordList();
		}


	} // RLStudentMLWProcessCompetenciesRecordList

	/// <summary>
	/// RecordList type <code>RLStudentMLWProcessCompetenciesList</code> that represents a record list of
	///  <code>UserIdentifier, DateTime, Integer, Integer, StudentMLWProcessIdentifier
	/// , MLWCompetenciesIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentMLWProcessCompetenciesList: GenericRecordList<ENStudentMLWProcessCompetenciesEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentMLWProcessCompetenciesEntityRecord GetElementDefaultValue() {
			return new ENStudentMLWProcessCompetenciesEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentMLWProcessCompetenciesEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentMLWProcessCompetenciesList recordlist, Func<ENStudentMLWProcessCompetenciesEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentMLWProcessCompetenciesList ToList<T>(T[] array, Func <T, ENStudentMLWProcessCompetenciesEntityRecord> converter) {
			RLStudentMLWProcessCompetenciesList result = new RLStudentMLWProcessCompetenciesList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentMLWProcessCompetenciesList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentMLWProcessCompetenciesList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentMLWProcessCompetenciesList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentMLWProcessCompetenciesList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentMLWProcessCompetenciesEntityRecord> NewList() {
			return new RLStudentMLWProcessCompetenciesList();
		}


	} // RLStudentMLWProcessCompetenciesList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentMLWProcessCompetencies
		/// </summary>

		public static void CreateStudentMLWProcessCompetencies(HeContext heContext, RCStudentMLWProcessCompetenciesRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessCompetenciesEntity.eSpaceId;
				ENStudentMLWProcessCompetenciesEntityRecord ssENStudentMLWProcessCompetencies = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentMLWProcessCompetenciesEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTMLWID]" +
					 ", [MLWCOMPETENCIEID]" +
					 ", [CURRENTLEVEL]" +
					 ", [UPDATEDON]" +
					 ", [UPDATEDBY]" +
					 " ) VALUES (" +
					 " @ssStudentMLWId" +
					 ", @ssMLWCompetencieId" +
					 ", @ssCurrentLevel" +
					 ", @ssUpdatedOn" +
					 ", @ssUpdatedBy" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStudentMLWProcessCompetencies.ssStudentMLWId==0)) {
						insertSqlCmd.CreateParameter("@ssStudentMLWId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudentMLWId", DbType.Int32, ssENStudentMLWProcessCompetencies.ssStudentMLWId);
					}
					if ((ssENStudentMLWProcessCompetencies.ssMLWCompetencieId== "")) {
						insertSqlCmd.CreateParameter("@ssMLWCompetencieId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssMLWCompetencieId", DbType.String, ssENStudentMLWProcessCompetencies.ssMLWCompetencieId);
					}
					insertSqlCmd.CreateParameter("@ssCurrentLevel", DbType.Int32, ssENStudentMLWProcessCompetencies.ssCurrentLevel);
					insertSqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENStudentMLWProcessCompetencies.ssUpdatedOn);
					if ((ssENStudentMLWProcessCompetencies.ssUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENStudentMLWProcessCompetencies.ssUpdatedBy);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentMLWProcessCompetencies", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentMLWProcessCompetencies
		/// </summary>

		public static void CreateOrUpdateStudentMLWProcessCompetencies(HeContext heContext, BitArray usedFields, RCStudentMLWProcessCompetenciesRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessCompetenciesEntity.eSpaceId;
				ENStudentMLWProcessCompetenciesEntityRecord ssENStudentMLWProcessCompetencies = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(6, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentMLWProcessCompetenciesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTMLWID] = @ssStudentMLWId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWCOMPETENCIEID] = @ssMLWCompetencieId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTLEVEL] = @ssCurrentLevel"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDON] = @ssUpdatedOn"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDBY] = @ssUpdatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentMLWProcessCompetenciesssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentMLWProcessCompetencies.ssStudentMLWId==0)) {
							sqlCmd.CreateParameter("@ssStudentMLWId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentMLWId", DbType.Int32, ssENStudentMLWProcessCompetencies.ssStudentMLWId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStudentMLWProcessCompetencies.ssMLWCompetencieId== "")) {
							sqlCmd.CreateParameter("@ssMLWCompetencieId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMLWCompetencieId", DbType.String, ssENStudentMLWProcessCompetencies.ssMLWCompetencieId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCurrentLevel", DbType.Int32, ssENStudentMLWProcessCompetencies.ssCurrentLevel);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENStudentMLWProcessCompetencies.ssUpdatedOn);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENStudentMLWProcessCompetencies.ssUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENStudentMLWProcessCompetencies.ssUpdatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CURRENTLEVEL] = [CURRENTLEVEL]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentMLWProcessCompetenciesssId", DbType.Int32, ssENStudentMLWProcessCompetencies.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentMLWProcessCompetencies (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentMLWProcessCompetenciesEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTMLWID]" +
						 ", [MLWCOMPETENCIEID]" +
						 ", [CURRENTLEVEL]" +
						 ", [UPDATEDON]" +
						 ", [UPDATEDBY]" +
						 " ) VALUES (" +
						 " @ssStudentMLWId" +
						 ", @ssMLWCompetencieId" +
						 ", @ssCurrentLevel" +
						 ", @ssUpdatedOn" +
						 ", @ssUpdatedBy" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStudentMLWProcessCompetencies.ssStudentMLWId==0)) {
							insertSqlCmd.CreateParameter("@ssStudentMLWId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudentMLWId", DbType.Int32, ssENStudentMLWProcessCompetencies.ssStudentMLWId);
						}
						if ((ssENStudentMLWProcessCompetencies.ssMLWCompetencieId== "")) {
							insertSqlCmd.CreateParameter("@ssMLWCompetencieId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssMLWCompetencieId", DbType.String, ssENStudentMLWProcessCompetencies.ssMLWCompetencieId);
						}
						insertSqlCmd.CreateParameter("@ssCurrentLevel", DbType.Int32, ssENStudentMLWProcessCompetencies.ssCurrentLevel);
						insertSqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENStudentMLWProcessCompetencies.ssUpdatedOn);
						if ((ssENStudentMLWProcessCompetencies.ssUpdatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssUpdatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENStudentMLWProcessCompetencies.ssUpdatedBy);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentMLWProcessCompetencies", true), typeof(int));
					} else {
						outParamId = ssENStudentMLWProcessCompetencies.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentMLWProcessCompetencies
		/// </summary>

		public static void DeleteStudentMLWProcessCompetencies(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessCompetenciesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentMLWProcessCompetenciesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentMLWProcessCompetencies", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentMLWProcessCompetencies
		/// </summary>

		public static void GetStudentMLWProcessCompetencies(HeContext heContext, int inParamId, out RCStudentMLWProcessCompetenciesRecord outParamRecord) {
			outParamRecord = new RCStudentMLWProcessCompetenciesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessCompetenciesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTMLWID]" +
					 ", [MLWCOMPETENCIEID]" +
					 ", [CURRENTLEVEL]" +
					 ", [UPDATEDON]" +
					 ", [UPDATEDBY]" +
					 " FROM " + ENStudentMLWProcessCompetenciesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentMLWProcessCompetencies", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(6, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentMLWProcessCompetenciesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentMLWProcessCompetenciesForUpdate
		/// </summary>

		public static void GetStudentMLWProcessCompetenciesForUpdate(HeContext heContext, int inParamId, out RCStudentMLWProcessCompetenciesRecord outParamRecord) {
			outParamRecord = new RCStudentMLWProcessCompetenciesRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessCompetenciesEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTMLWID]" +
					 ", [MLWCOMPETENCIEID]" +
					 ", [CURRENTLEVEL]" +
					 ", [UPDATEDON]" +
					 ", [UPDATEDBY]" +
					 "FROM " + ENStudentMLWProcessCompetenciesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentMLWProcessCompetenciesForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(6, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentMLWProcessCompetenciesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentMLWProcessCompetencies
		/// </summary>

		public static void UpdateStudentMLWProcessCompetencies(HeContext heContext, BitArray usedFields, RCStudentMLWProcessCompetenciesRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessCompetenciesEntity.eSpaceId;
				ENStudentMLWProcessCompetenciesEntityRecord ssENStudentMLWProcessCompetencies = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(6, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentMLWProcessCompetenciesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTMLWID] = @ssStudentMLWId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MLWCOMPETENCIEID] = @ssMLWCompetencieId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTLEVEL] = @ssCurrentLevel"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDON] = @ssUpdatedOn"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDBY] = @ssUpdatedBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentMLWProcessCompetenciesssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentMLWProcessCompetencies.ssStudentMLWId==0)) {
							sqlCmd.CreateParameter("@ssStudentMLWId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudentMLWId", DbType.Int32, ssENStudentMLWProcessCompetencies.ssStudentMLWId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStudentMLWProcessCompetencies.ssMLWCompetencieId== "")) {
							sqlCmd.CreateParameter("@ssMLWCompetencieId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssMLWCompetencieId", DbType.String, ssENStudentMLWProcessCompetencies.ssMLWCompetencieId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCurrentLevel", DbType.Int32, ssENStudentMLWProcessCompetencies.ssCurrentLevel);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssUpdatedOn", DbType.DateTime, ssENStudentMLWProcessCompetencies.ssUpdatedOn);
						counter++;
					}
					if (usedFields[5]) {
						if ((ssENStudentMLWProcessCompetencies.ssUpdatedBy==0)) {
							sqlCmd.CreateParameter("@ssUpdatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENStudentMLWProcessCompetencies.ssUpdatedBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[CURRENTLEVEL] = [CURRENTLEVEL]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentMLWProcessCompetenciesssId", DbType.Int32, ssENStudentMLWProcessCompetencies.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentMLWProcessCompetencies", true) <= 0)
					throw new DataBaseException(ENStudentMLWProcessCompetenciesEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentMLWProcessCompetencies.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentMLWProcessCompetencies")]
	public class WORCStudentMLWProcessCompetenciesRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentMLWId")]
		public int varWSStudentMLWId;

		[System.Xml.Serialization.XmlElement("MLWCompetencieId")]
		public string varWSMLWCompetencieId;

		[System.Xml.Serialization.XmlElement("CurrentLevel")]
		public int varWSCurrentLevel;

		[System.Xml.Serialization.XmlElement("UpdatedOn")]
		public DateTime varWSUpdatedOn;

		[System.Xml.Serialization.XmlElement("UpdatedBy")]
		public int varWSUpdatedBy;

		public WORCStudentMLWProcessCompetenciesRecord() {
			varWSId = (int) 0;
			varWSStudentMLWId = (int) 0;
			varWSMLWCompetencieId = (string) "";
			varWSCurrentLevel = (int) 0;
			varWSUpdatedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSUpdatedBy = (int) 0;
		}

		public WORCStudentMLWProcessCompetenciesRecord(ENStudentMLWProcessCompetenciesEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentMLWId = (int) r.ssStudentMLWId;
			varWSMLWCompetencieId = BaseAppUtils.RemoveControlChars(r.ssMLWCompetencieId);
			varWSCurrentLevel = (int) r.ssCurrentLevel;
			varWSUpdatedOn = (DateTime) r.ssUpdatedOn;
			varWSUpdatedBy = (int) r.ssUpdatedBy;
		}

		public static RLStudentMLWProcessCompetenciesList ToRecordList(WORCStudentMLWProcessCompetenciesRecord[] array) {
			RLStudentMLWProcessCompetenciesList rl = new RLStudentMLWProcessCompetenciesList();
			if (array != null) {
				foreach(WORCStudentMLWProcessCompetenciesRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentMLWProcessCompetenciesRecord[] FromRecordList(RLStudentMLWProcessCompetenciesList rl) {
			WORCStudentMLWProcessCompetenciesRecord[] array = new WORCStudentMLWProcessCompetenciesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentMLWProcessCompetenciesRecord {
		public static implicit operator WORCStudentMLWProcessCompetenciesRecord(RCStudentMLWProcessCompetenciesRecord r) {
			return new WORCStudentMLWProcessCompetenciesRecord(r.ssENStudentMLWProcessCompetencies);
		}

		public static implicit operator RCStudentMLWProcessCompetenciesRecord(WORCStudentMLWProcessCompetenciesRecord w) {
			RCStudentMLWProcessCompetenciesRecord r = new RCStudentMLWProcessCompetenciesRecord("");
			if (w != null) {
				r.ssENStudentMLWProcessCompetencies = w;
			}
			return r;
		}

	}

	partial struct ENStudentMLWProcessCompetenciesEntityRecord {
		public static implicit operator WORCStudentMLWProcessCompetenciesRecord(ENStudentMLWProcessCompetenciesEntityRecord r) {
			return new WORCStudentMLWProcessCompetenciesRecord(r);
		}

		public static implicit operator ENStudentMLWProcessCompetenciesEntityRecord(WORCStudentMLWProcessCompetenciesRecord w) {
			ENStudentMLWProcessCompetenciesEntityRecord r = new ENStudentMLWProcessCompetenciesEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentMLWId = (int) w.varWSStudentMLWId;
				r.ssMLWCompetencieId = (string) w.varWSMLWCompetencieId;
				r.ssCurrentLevel = (int) w.varWSCurrentLevel;
				r.ssUpdatedOn = (DateTime) w.varWSUpdatedOn;
				r.ssUpdatedBy = (int) w.varWSUpdatedBy;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentMLWProcessCompetenciesRecordList {
		public WORCStudentMLWProcessCompetenciesRecord[] Array;


		public WORLStudentMLWProcessCompetenciesRecordList(WORCStudentMLWProcessCompetenciesRecord[] r) {
			if (r == null)
			Array = new WORCStudentMLWProcessCompetenciesRecord[0];
			else
			Array = r;
		}
		public WORLStudentMLWProcessCompetenciesRecordList() {
			Array = new WORCStudentMLWProcessCompetenciesRecord[0];
		}

		public WORLStudentMLWProcessCompetenciesRecordList(RLStudentMLWProcessCompetenciesRecordList rl) {
			rl=(RLStudentMLWProcessCompetenciesRecordList) rl.Duplicate();
			Array = new WORCStudentMLWProcessCompetenciesRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentMLWProcessCompetenciesRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentMLWProcessCompetenciesRecordList {
		public static implicit operator RLStudentMLWProcessCompetenciesRecordList(WORCStudentMLWProcessCompetenciesRecord[] array) {
			RLStudentMLWProcessCompetenciesRecordList rl = new RLStudentMLWProcessCompetenciesRecordList();
			if (array != null) {
				foreach(WORCStudentMLWProcessCompetenciesRecord val in array) {
					rl.Append((RCStudentMLWProcessCompetenciesRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentMLWProcessCompetenciesRecord[](RLStudentMLWProcessCompetenciesRecordList rl) {
			WORCStudentMLWProcessCompetenciesRecord[] array = new WORCStudentMLWProcessCompetenciesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentMLWProcessCompetenciesRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentMLWProcessCompetenciesRecordList {
		public static implicit operator RLStudentMLWProcessCompetenciesRecordList(WORLStudentMLWProcessCompetenciesRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentMLWProcessCompetenciesRecordList(RLStudentMLWProcessCompetenciesRecordList rl) {
			return new WORLStudentMLWProcessCompetenciesRecordList(rl);
		}
		public static implicit operator WORCStudentMLWProcessCompetenciesRecord[](WORLStudentMLWProcessCompetenciesRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentMLWProcessCompetenciesRecordList(WORCStudentMLWProcessCompetenciesRecord[] array) {
			return new WORLStudentMLWProcessCompetenciesRecordList(array);
		}
	}
}

