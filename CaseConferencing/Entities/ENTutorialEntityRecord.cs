/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENTutorialEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENTutorialEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENTutorialEntity.eSpaceId;
	} // ENTutorialEntity

	/// <summary>
	/// Entity <code>ENTutorialEntityRecord</code> that represents the Service Studio entity
	///  <code>Tutorial</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Tutorial", "npjWMT_VmEuWlBx4WQjr+w", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_Tutorial", "")]
	[Serializable()]
	public partial struct ENTutorialEntityRecord: ISerializable, ITypedRecord<ENTutorialEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*r6TdjX6RNE2EeimkwXk0aw");
		private static readonly GlobalObjectKey IdStudent = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*WojiMvHe4EmCzFoW8_ZGmQ");
		private static readonly GlobalObjectKey IdDate = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Z00YuHxJuk6j1nmZeardrw");
		private static readonly GlobalObjectKey IdCreatedAt = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*95e96qr5EEKZoiFri4TNQw");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*OcACa0GiRE+q8jtv2tHShw");
		private static readonly GlobalObjectKey IdNotes = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*gIQGFJjrBEWd70a5OTAaNQ");
		private static readonly GlobalObjectKey IdImportedFromUNITe = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*WSis_yeh_k+bZpHeKcS3iQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENT", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Student")]
		private string _ssStudent;
		public string ssStudent {
			get {
				return _ssStudent;
			}
			set {
				if ((_ssStudent!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudent = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DATE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Date")]
		private DateTime _ssDate;
		public DateTime ssDate {
			get {
				return _ssDate;
			}
			set {
				if ((_ssDate!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDAT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("CreatedAt")]
		private DateTime _ssCreatedAt;
		public DateTime ssCreatedAt {
			get {
				return _ssCreatedAt;
			}
			set {
				if ((_ssCreatedAt!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssCreatedAt = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NOTES", 4000, false, false, false)]
		[System.Xml.Serialization.XmlElement("Notes")]
		private string _ssNotes;
		public string ssNotes {
			get {
				return _ssNotes;
			}
			set {
				if ((_ssNotes!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssNotes = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IMPORTEDFROMUNITE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("ImportedFromUNITe")]
		private bool _ssImportedFromUNITe;
		public bool ssImportedFromUNITe {
			get {
				return _ssImportedFromUNITe;
			}
			set {
				if ((_ssImportedFromUNITe!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssImportedFromUNITe = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENTutorialEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssStudent = "";
			_ssDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssNotes = "";
			_ssImportedFromUNITe = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Tutorial.Id", 0);
			ssStudent = r.ReadTextEntityReference(index++, "Tutorial.Student", "");
			ssDate = r.ReadDate(index++, "Tutorial.Date", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedAt = r.ReadDateTime(index++, "Tutorial.CreatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "Tutorial.CreatedBy", 0);
			ssNotes = r.ReadText(index++, "Tutorial.Notes", "");
			ssImportedFromUNITe = r.ReadBoolean(index++, "Tutorial.ImportedFromUNITe", false);
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENTutorialEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENTutorialEntityRecord a, ENTutorialEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudent != b.ssStudent) return false;
			if (a.ssDate != b.ssDate) return false;
			if (a.ssCreatedAt != b.ssCreatedAt) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssNotes != b.ssNotes) return false;
			if (a.ssImportedFromUNITe != b.ssImportedFromUNITe) return false;
			return true;
		}

		public static bool operator != (ENTutorialEntityRecord a, ENTutorialEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENTutorialEntityRecord)) return false;
			return (this == (ENTutorialEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudent.GetHashCode()
				^ ssDate.GetHashCode()
				^ ssCreatedAt.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssNotes.GetHashCode()
				^ ssImportedFromUNITe.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENTutorialEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssStudent = "";
			_ssDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssNotes = "";
			_ssImportedFromUNITe = false;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudent = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDate = (DateTime) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssCreatedAt = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssNotes = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssImportedFromUNITe = (bool) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENTutorialEntityRecord Duplicate() {
			ENTutorialEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudent = this._ssStudent;
			t._ssDate = this._ssDate;
			t._ssCreatedAt = this._ssCreatedAt;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssNotes = this._ssNotes;
			t._ssImportedFromUNITe = this._ssImportedFromUNITe;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Student")) VarValue.AppendAttribute(recordElem, "Student", ssStudent, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Student");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Date")) VarValue.AppendAttribute(recordElem, "Date", ssDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "Date");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedAt")) VarValue.AppendAttribute(recordElem, "CreatedAt", ssCreatedAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Notes")) VarValue.AppendAttribute(recordElem, "Notes", ssNotes, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Notes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ImportedFromUNITe")) VarValue.AppendAttribute(recordElem, "ImportedFromUNITe", ssImportedFromUNITe, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "ImportedFromUNITe");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "student") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Student")) variable.Value = ssStudent; else variable.Optimized = true;
			} else if (head == "date") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Date")) variable.Value = ssDate; else variable.Optimized = true;
			} else if (head == "createdat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedAt")) variable.Value = ssCreatedAt; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "notes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Notes")) variable.Value = ssNotes; else variable.Optimized = true;
			} else if (head == "importedfromunite") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ImportedFromUNITe")) variable.Value = ssImportedFromUNITe; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudent)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDate)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdCreatedAt)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdNotes)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdImportedFromUNITe)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudent)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDate)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdCreatedAt)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdNotes)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdImportedFromUNITe)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudent) {
				return ssStudent;
			} else if (key == IdDate) {
				return ssDate;
			} else if (key == IdCreatedAt) {
				return ssCreatedAt;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdNotes) {
				return ssNotes;
			} else if (key == IdImportedFromUNITe) {
				return ssImportedFromUNITe;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudent = (string) other.AttributeGet(IdStudent);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudent);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudent);
			ssDate = (DateTime) other.AttributeGet(IdDate);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDate);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDate);
			ssCreatedAt = (DateTime) other.AttributeGet(IdCreatedAt);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdCreatedAt);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdCreatedAt);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCreatedBy);
			ssNotes = (string) other.AttributeGet(IdNotes);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdNotes);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdNotes);
			ssImportedFromUNITe = (bool) other.AttributeGet(IdImportedFromUNITe);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdImportedFromUNITe);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdImportedFromUNITe);
		}
	} // ENTutorialEntityRecord
	/// <summary>
	/// Structure <code>RCTutorialRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTutorialRecord: ISerializable, ITypedRecord<RCTutorialRecord> {
		private static readonly GlobalObjectKey IdTutorial = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*jjL5qchnHXDZNDKMczAP7w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Tutorial")]
		public ENTutorialEntityRecord ssENTutorial;


		public static implicit operator ENTutorialEntityRecord(RCTutorialRecord r) {
			return r.ssENTutorial;
		}

		public static implicit operator RCTutorialRecord(ENTutorialEntityRecord r) {
			RCTutorialRecord res = new RCTutorialRecord(null);
			res.ssENTutorial = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENTutorial.ChangedAttributes = value;
			}
			get {
				return ssENTutorial.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCTutorialRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENTutorial = new ENTutorialEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENTutorial.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENTutorial.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENTutorial.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENTutorial.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTutorialRecord r) {
			this = r;
		}


		public static bool operator == (RCTutorialRecord a, RCTutorialRecord b) {
			if (a.ssENTutorial != b.ssENTutorial) return false;
			return true;
		}

		public static bool operator != (RCTutorialRecord a, RCTutorialRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTutorialRecord)) return false;
			return (this == (RCTutorialRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENTutorial.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTutorialRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENTutorial = new ENTutorialEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENTutorial = (ENTutorialEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENTutorial.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENTutorial.InternalRecursiveSave();
		}


		public RCTutorialRecord Duplicate() {
			RCTutorialRecord t;
			t.ssENTutorial = (ENTutorialEntityRecord) this.ssENTutorial.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENTutorial.ToXml(this, recordElem, "Tutorial", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "tutorial") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Tutorial")) variable.Value = ssENTutorial; else variable.Optimized = true;
				variable.SetFieldName("tutorial");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENTutorial.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENTutorial.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTutorial) {
				return ssENTutorial;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENTutorial.FillFromOther((IRecord) other.AttributeGet(IdTutorial));
		}
	} // RCTutorialRecord
	/// <summary>
	/// RecordList type <code>RLTutorialRecordList</code> that represents a record list of
	///  <code>Tutorial</code>
	/// </summary>
	[Serializable()]
	public partial class RLTutorialRecordList: GenericRecordList<RCTutorialRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTutorialRecord GetElementDefaultValue() {
			return new RCTutorialRecord("");
		}

		public T[] ToArray<T>(Func<RCTutorialRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTutorialRecordList recordlist, Func<RCTutorialRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTutorialRecordList ToList<T>(T[] array, Func <T, RCTutorialRecord> converter) {
			RLTutorialRecordList result = new RLTutorialRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTutorialRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTutorialRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTutorialRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTutorialRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTutorialRecord> NewList() {
			return new RLTutorialRecordList();
		}


	} // RLTutorialRecordList

	/// <summary>
	/// RecordList type <code>RLTutorialList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, Date, DateTime, Boolean, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLTutorialList: GenericRecordList<ENTutorialEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENTutorialEntityRecord GetElementDefaultValue() {
			return new ENTutorialEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENTutorialEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTutorialList recordlist, Func<ENTutorialEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTutorialList ToList<T>(T[] array, Func <T, ENTutorialEntityRecord> converter) {
			RLTutorialList result = new RLTutorialList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTutorialList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTutorialList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTutorialList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTutorialList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENTutorialEntityRecord> NewList() {
			return new RLTutorialList();
		}


	} // RLTutorialList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateTutorial
		/// </summary>

		public static void CreateTutorial(HeContext heContext, RCTutorialRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTutorialEntity.eSpaceId;
				ENTutorialEntityRecord ssENTutorial = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENTutorialEntity.LocalViewName(null, null) + " (" +
					 " [STUDENT]" +
					 ", [DATE]" +
					 ", [CREATEDAT]" +
					 ", [CREATEDBY]" +
					 ", [NOTES]" +
					 ", [IMPORTEDFROMUNITE]" +
					 " ) VALUES (" +
					 " @ssStudent" +
					 ", @ssDate" +
					 ", @ssCreatedAt" +
					 ", @ssCreatedBy" +
					 ", @ssNotes" +
					 ", @ssImportedFromUNITe" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENTutorial.ssStudent== "")) {
						insertSqlCmd.CreateParameter("@ssStudent", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStudent", DbType.String, ssENTutorial.ssStudent);
					}
					insertSqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENTutorial.ssDate);
					insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENTutorial.ssCreatedAt);
					if ((ssENTutorial.ssCreatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENTutorial.ssCreatedBy);
					}
					insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENTutorial.ssNotes);
					insertSqlCmd.CreateParameter("@ssImportedFromUNITe", DbType.Boolean, ssENTutorial.ssImportedFromUNITe);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateTutorial", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateTutorial
		/// </summary>

		public static void CreateOrUpdateTutorial(HeContext heContext, BitArray usedFields, RCTutorialRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTutorialEntity.eSpaceId;
				ENTutorialEntityRecord ssENTutorial = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENTutorialEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENT] = @ssStudent"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATE] = @ssDate"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IMPORTEDFROMUNITE] = @ssImportedFromUNITe"): parameters);
					string whereCondition = " WHERE [ID] = @ssENTutorialssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENTutorial.ssStudent== "")) {
							sqlCmd.CreateParameter("@ssStudent", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudent", DbType.String, ssENTutorial.ssStudent);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENTutorial.ssDate);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENTutorial.ssCreatedAt);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENTutorial.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENTutorial.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENTutorial.ssNotes);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssImportedFromUNITe", DbType.Boolean, ssENTutorial.ssImportedFromUNITe);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[IMPORTEDFROMUNITE] = [IMPORTEDFROMUNITE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENTutorialssId", DbType.Int32, ssENTutorial.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateTutorial (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENTutorialEntity.LocalViewName(null, null) + " (" +
						 " [STUDENT]" +
						 ", [DATE]" +
						 ", [CREATEDAT]" +
						 ", [CREATEDBY]" +
						 ", [NOTES]" +
						 ", [IMPORTEDFROMUNITE]" +
						 " ) VALUES (" +
						 " @ssStudent" +
						 ", @ssDate" +
						 ", @ssCreatedAt" +
						 ", @ssCreatedBy" +
						 ", @ssNotes" +
						 ", @ssImportedFromUNITe" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENTutorial.ssStudent== "")) {
							insertSqlCmd.CreateParameter("@ssStudent", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStudent", DbType.String, ssENTutorial.ssStudent);
						}
						insertSqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENTutorial.ssDate);
						insertSqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENTutorial.ssCreatedAt);
						if ((ssENTutorial.ssCreatedBy==0)) {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENTutorial.ssCreatedBy);
						}
						insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENTutorial.ssNotes);
						insertSqlCmd.CreateParameter("@ssImportedFromUNITe", DbType.Boolean, ssENTutorial.ssImportedFromUNITe);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateTutorial", true), typeof(int));
					} else {
						outParamId = ssENTutorial.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteTutorial
		/// </summary>

		public static void DeleteTutorial(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTutorialEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENTutorialEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteTutorial", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetTutorial
		/// </summary>

		public static void GetTutorial(HeContext heContext, int inParamId, out RCTutorialRecord outParamRecord) {
			outParamRecord = new RCTutorialRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTutorialEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENT]" +
					 ", [DATE]" +
					 ", [CREATEDAT]" +
					 ", [CREATEDBY]" +
					 ", [NOTES]" +
					 ", [IMPORTEDFROMUNITE]" +
					 " FROM " + ENTutorialEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetTutorial", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENTutorialEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetTutorialForUpdate
		/// </summary>

		public static void GetTutorialForUpdate(HeContext heContext, int inParamId, out RCTutorialRecord outParamRecord) {
			outParamRecord = new RCTutorialRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTutorialEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENT]" +
					 ", [DATE]" +
					 ", [CREATEDAT]" +
					 ", [CREATEDBY]" +
					 ", [NOTES]" +
					 ", [IMPORTEDFROMUNITE]" +
					 "FROM " + ENTutorialEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetTutorialForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(7, false)
							}
							;
						} else
						throw new DataBaseException(ENTutorialEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateTutorial
		/// </summary>

		public static void UpdateTutorial(HeContext heContext, BitArray usedFields, RCTutorialRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENTutorialEntity.eSpaceId;
				ENTutorialEntityRecord ssENTutorial = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(7, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENTutorialEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENT] = @ssStudent"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DATE] = @ssDate"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDAT] = @ssCreatedAt"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IMPORTEDFROMUNITE] = @ssImportedFromUNITe"): parameters);
					string whereCondition = " WHERE [ID] = @ssENTutorialssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENTutorial.ssStudent== "")) {
							sqlCmd.CreateParameter("@ssStudent", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStudent", DbType.String, ssENTutorial.ssStudent);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDate", DbType.DateTime, ssENTutorial.ssDate);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssCreatedAt", DbType.DateTime, ssENTutorial.ssCreatedAt);
						counter++;
					}
					if (usedFields[4]) {
						if ((ssENTutorial.ssCreatedBy==0)) {
							sqlCmd.CreateParameter("@ssCreatedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENTutorial.ssCreatedBy);
						}
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENTutorial.ssNotes);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssImportedFromUNITe", DbType.Boolean, ssENTutorial.ssImportedFromUNITe);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[IMPORTEDFROMUNITE] = [IMPORTEDFROMUNITE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENTutorialssId", DbType.Int32, ssENTutorial.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateTutorial", true) <= 0)
					throw new DataBaseException(ENTutorialEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENTutorial.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Tutorial")]
	public class WORCTutorialRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Student")]
		public string varWSStudent;

		[System.Xml.Serialization.XmlElement("Date", DataType= "date")]
		public DateTime varWSDate;

		[System.Xml.Serialization.XmlElement("CreatedAt")]
		public DateTime varWSCreatedAt;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string varWSNotes;

		[System.Xml.Serialization.XmlElement("ImportedFromUNITe")]
		public bool varWSImportedFromUNITe;

		public WORCTutorialRecord() {
			varWSId = (int) 0;
			varWSStudent = (string) "";
			varWSDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
			varWSNotes = (string) "";
			varWSImportedFromUNITe = (bool) false;
		}

		public WORCTutorialRecord(ENTutorialEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudent = BaseAppUtils.RemoveControlChars(r.ssStudent);
			varWSDate = (DateTime) r.ssDate;
			varWSCreatedAt = (DateTime) r.ssCreatedAt;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSNotes = BaseAppUtils.RemoveControlChars(r.ssNotes);
			varWSImportedFromUNITe = (bool) r.ssImportedFromUNITe;
		}

		public static RLTutorialList ToRecordList(WORCTutorialRecord[] array) {
			RLTutorialList rl = new RLTutorialList();
			if (array != null) {
				foreach(WORCTutorialRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCTutorialRecord[] FromRecordList(RLTutorialList rl) {
			WORCTutorialRecord[] array = new WORCTutorialRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCTutorialRecord {
		public static implicit operator WORCTutorialRecord(RCTutorialRecord r) {
			return new WORCTutorialRecord(r.ssENTutorial);
		}

		public static implicit operator RCTutorialRecord(WORCTutorialRecord w) {
			RCTutorialRecord r = new RCTutorialRecord("");
			if (w != null) {
				r.ssENTutorial = w;
			}
			return r;
		}

	}

	partial struct ENTutorialEntityRecord {
		public static implicit operator WORCTutorialRecord(ENTutorialEntityRecord r) {
			return new WORCTutorialRecord(r);
		}

		public static implicit operator ENTutorialEntityRecord(WORCTutorialRecord w) {
			ENTutorialEntityRecord r = new ENTutorialEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudent = (string) w.varWSStudent;
				r.ssDate = (DateTime) w.varWSDate;
				r.ssCreatedAt = (DateTime) w.varWSCreatedAt;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssNotes = ((string) w.varWSNotes ?? "");
				r.ssImportedFromUNITe = (bool) w.varWSImportedFromUNITe;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTutorialRecordList {
		public WORCTutorialRecord[] Array;


		public WORLTutorialRecordList(WORCTutorialRecord[] r) {
			if (r == null)
			Array = new WORCTutorialRecord[0];
			else
			Array = r;
		}
		public WORLTutorialRecordList() {
			Array = new WORCTutorialRecord[0];
		}

		public WORLTutorialRecordList(RLTutorialRecordList rl) {
			rl=(RLTutorialRecordList) rl.Duplicate();
			Array = new WORCTutorialRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCTutorialRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTutorialRecordList {
		public static implicit operator RLTutorialRecordList(WORCTutorialRecord[] array) {
			RLTutorialRecordList rl = new RLTutorialRecordList();
			if (array != null) {
				foreach(WORCTutorialRecord val in array) {
					rl.Append((RCTutorialRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTutorialRecord[](RLTutorialRecordList rl) {
			WORCTutorialRecord[] array = new WORCTutorialRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCTutorialRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTutorialRecordList {
		public static implicit operator RLTutorialRecordList(WORLTutorialRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLTutorialRecordList(RLTutorialRecordList rl) {
			return new WORLTutorialRecordList(rl);
		}
		public static implicit operator WORCTutorialRecord[](WORLTutorialRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTutorialRecordList(WORCTutorialRecord[] array) {
			return new WORLTutorialRecordList(array);
		}
	}
}

