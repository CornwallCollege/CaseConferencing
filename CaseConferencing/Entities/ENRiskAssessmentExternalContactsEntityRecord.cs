/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENRiskAssessmentExternalContactsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENRiskAssessmentExternalContactsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENRiskAssessmentExternalContactsEntity.eSpaceId;
	} // ENRiskAssessmentExternalContactsEntity

	/// <summary>
	/// Entity <code>ENRiskAssessmentExternalContactsEntityRecord</code> that represents the Service Studio
	///  entity <code>RiskAssessmentExternalContacts</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("RiskAssessmentExternalContacts", "a23ihYJmKEW_4P+D5Tdz8w", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_RiskAssessmentExternalContacts", "")]
	[Serializable()]
	public partial struct ENRiskAssessmentExternalContactsEntityRecord: ISerializable, ITypedRecord<ENRiskAssessmentExternalContactsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*Ud4aBWerIUG+8zndcfKy2Q");
		private static readonly GlobalObjectKey IdRiskAssessment = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*HC1RgeSy_kylip6v2gixUQ");
		private static readonly GlobalObjectKey IdExternalContact = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*WShAtg34KESjp0ndsx4ATA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RISKASSESSMENT", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RiskAssessment")]
		private int _ssRiskAssessment;
		public int ssRiskAssessment {
			get {
				return _ssRiskAssessment;
			}
			set {
				if ((_ssRiskAssessment!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssRiskAssessment = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EXTERNALCONTACT", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("ExternalContact")]
		private string _ssExternalContact;
		public string ssExternalContact {
			get {
				return _ssExternalContact;
			}
			set {
				if ((_ssExternalContact!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssExternalContact = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENRiskAssessmentExternalContactsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssRiskAssessment = 0;
			_ssExternalContact = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "RiskAssessmentExternalContacts.Id", 0);
			ssRiskAssessment = r.ReadEntityReference(index++, "RiskAssessmentExternalContacts.RiskAssessment", 0);
			ssExternalContact = r.ReadText(index++, "RiskAssessmentExternalContacts.ExternalContact", "");
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENRiskAssessmentExternalContactsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENRiskAssessmentExternalContactsEntityRecord a, ENRiskAssessmentExternalContactsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssRiskAssessment != b.ssRiskAssessment) return false;
			if (a.ssExternalContact != b.ssExternalContact) return false;
			return true;
		}

		public static bool operator != (ENRiskAssessmentExternalContactsEntityRecord a, ENRiskAssessmentExternalContactsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENRiskAssessmentExternalContactsEntityRecord)) return false;
			return (this == (ENRiskAssessmentExternalContactsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssRiskAssessment.GetHashCode()
				^ ssExternalContact.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENRiskAssessmentExternalContactsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssRiskAssessment = 0;
			_ssExternalContact = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssRiskAssessment = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssExternalContact = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENRiskAssessmentExternalContactsEntityRecord Duplicate() {
			ENRiskAssessmentExternalContactsEntityRecord t;
			t._ssId = this._ssId;
			t._ssRiskAssessment = this._ssRiskAssessment;
			t._ssExternalContact = this._ssExternalContact;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RiskAssessment")) VarValue.AppendAttribute(recordElem, "RiskAssessment", ssRiskAssessment, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RiskAssessment");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExternalContact")) VarValue.AppendAttribute(recordElem, "ExternalContact", ssExternalContact, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ExternalContact");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "riskassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessment")) variable.Value = ssRiskAssessment; else variable.Optimized = true;
			} else if (head == "externalcontact") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExternalContact")) variable.Value = ssExternalContact; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdRiskAssessment)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdExternalContact)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdRiskAssessment)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdExternalContact)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdRiskAssessment) {
				return ssRiskAssessment;
			} else if (key == IdExternalContact) {
				return ssExternalContact;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssRiskAssessment = (int) other.AttributeGet(IdRiskAssessment);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdRiskAssessment);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdRiskAssessment);
			ssExternalContact = (string) other.AttributeGet(IdExternalContact);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdExternalContact);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdExternalContact);
		}
	} // ENRiskAssessmentExternalContactsEntityRecord
	/// <summary>
	/// Structure <code>RCRiskAssessmentExternalContactsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRiskAssessmentExternalContactsRecord: ISerializable, ITypedRecord<RCRiskAssessmentExternalContactsRecord> {
		private static readonly GlobalObjectKey IdRiskAssessmentExternalContacts = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*_HuJsCY18fLMtIiApAnADQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RiskAssessmentExternalContacts")]
		public ENRiskAssessmentExternalContactsEntityRecord ssENRiskAssessmentExternalContacts;


		public static implicit operator ENRiskAssessmentExternalContactsEntityRecord(RCRiskAssessmentExternalContactsRecord r) {
			return r.ssENRiskAssessmentExternalContacts;
		}

		public static implicit operator RCRiskAssessmentExternalContactsRecord(ENRiskAssessmentExternalContactsEntityRecord r) {
			RCRiskAssessmentExternalContactsRecord res = new RCRiskAssessmentExternalContactsRecord(null);
			res.ssENRiskAssessmentExternalContacts = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENRiskAssessmentExternalContacts.ChangedAttributes = value;
			}
			get {
				return ssENRiskAssessmentExternalContacts.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCRiskAssessmentExternalContactsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRiskAssessmentExternalContacts = new ENRiskAssessmentExternalContactsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRiskAssessmentExternalContacts.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENRiskAssessmentExternalContacts.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENRiskAssessmentExternalContacts.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRiskAssessmentExternalContacts.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRiskAssessmentExternalContactsRecord r) {
			this = r;
		}


		public static bool operator == (RCRiskAssessmentExternalContactsRecord a, RCRiskAssessmentExternalContactsRecord b) {
			if (a.ssENRiskAssessmentExternalContacts != b.ssENRiskAssessmentExternalContacts) return false;
			return true;
		}

		public static bool operator != (RCRiskAssessmentExternalContactsRecord a, RCRiskAssessmentExternalContactsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRiskAssessmentExternalContactsRecord)) return false;
			return (this == (RCRiskAssessmentExternalContactsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRiskAssessmentExternalContacts.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRiskAssessmentExternalContactsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRiskAssessmentExternalContacts = new ENRiskAssessmentExternalContactsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENRiskAssessmentExternalContacts = (ENRiskAssessmentExternalContactsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENRiskAssessmentExternalContacts.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRiskAssessmentExternalContacts.InternalRecursiveSave();
		}


		public RCRiskAssessmentExternalContactsRecord Duplicate() {
			RCRiskAssessmentExternalContactsRecord t;
			t.ssENRiskAssessmentExternalContacts = (ENRiskAssessmentExternalContactsEntityRecord) this.ssENRiskAssessmentExternalContacts.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRiskAssessmentExternalContacts.ToXml(this, recordElem, "RiskAssessmentExternalContacts", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "riskassessmentexternalcontacts") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RiskAssessmentExternalContacts")) variable.Value = ssENRiskAssessmentExternalContacts; else variable.Optimized = true;
				variable.SetFieldName("riskassessmentexternalcontacts");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENRiskAssessmentExternalContacts.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENRiskAssessmentExternalContacts.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRiskAssessmentExternalContacts) {
				return ssENRiskAssessmentExternalContacts;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRiskAssessmentExternalContacts.FillFromOther((IRecord) other.AttributeGet(IdRiskAssessmentExternalContacts));
		}
	} // RCRiskAssessmentExternalContactsRecord
	/// <summary>
	/// RecordList type <code>RLRiskAssessmentExternalContactsRecordList</code> that represents a record
	///  list of <code>RiskAssessmentExternalContacts</code>
	/// </summary>
	[Serializable()]
	public partial class RLRiskAssessmentExternalContactsRecordList: GenericRecordList<RCRiskAssessmentExternalContactsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRiskAssessmentExternalContactsRecord GetElementDefaultValue() {
			return new RCRiskAssessmentExternalContactsRecord("");
		}

		public T[] ToArray<T>(Func<RCRiskAssessmentExternalContactsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRiskAssessmentExternalContactsRecordList recordlist, Func<RCRiskAssessmentExternalContactsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRiskAssessmentExternalContactsRecordList ToList<T>(T[] array, Func <T, RCRiskAssessmentExternalContactsRecord> converter) {
			RLRiskAssessmentExternalContactsRecordList result = new RLRiskAssessmentExternalContactsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRiskAssessmentExternalContactsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentExternalContactsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentExternalContactsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRiskAssessmentExternalContactsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRiskAssessmentExternalContactsRecord> NewList() {
			return new RLRiskAssessmentExternalContactsRecordList();
		}


	} // RLRiskAssessmentExternalContactsRecordList

	/// <summary>
	/// RecordList type <code>RLRiskAssessmentExternalContactsList</code> that represents a record list of
	///  <code>Text, Integer, RiskAssessmentIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLRiskAssessmentExternalContactsList: GenericRecordList<ENRiskAssessmentExternalContactsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENRiskAssessmentExternalContactsEntityRecord GetElementDefaultValue() {
			return new ENRiskAssessmentExternalContactsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENRiskAssessmentExternalContactsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRiskAssessmentExternalContactsList recordlist, Func<ENRiskAssessmentExternalContactsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRiskAssessmentExternalContactsList ToList<T>(T[] array, Func <T, ENRiskAssessmentExternalContactsEntityRecord> converter) {
			RLRiskAssessmentExternalContactsList result = new RLRiskAssessmentExternalContactsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRiskAssessmentExternalContactsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentExternalContactsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRiskAssessmentExternalContactsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRiskAssessmentExternalContactsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENRiskAssessmentExternalContactsEntityRecord> NewList() {
			return new RLRiskAssessmentExternalContactsList();
		}


	} // RLRiskAssessmentExternalContactsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateRiskAssessmentExternalContacts
		/// </summary>

		public static void CreateRiskAssessmentExternalContacts(HeContext heContext, RCRiskAssessmentExternalContactsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentExternalContactsEntity.eSpaceId;
				ENRiskAssessmentExternalContactsEntityRecord ssENRiskAssessmentExternalContacts = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENRiskAssessmentExternalContactsEntity.LocalViewName(null, null) + " (" +
					 " [RISKASSESSMENT]" +
					 ", [EXTERNALCONTACT]" +
					 " ) VALUES (" +
					 " @ssRiskAssessment" +
					 ", @ssExternalContact" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENRiskAssessmentExternalContacts.ssRiskAssessment==0)) {
						insertSqlCmd.CreateParameter("@ssRiskAssessment", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRiskAssessment", DbType.Int32, ssENRiskAssessmentExternalContacts.ssRiskAssessment);
					}
					insertSqlCmd.CreateParameter("@ssExternalContact", DbType.String, ssENRiskAssessmentExternalContacts.ssExternalContact);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateRiskAssessmentExternalContacts", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateRiskAssessmentExternalContacts
		/// </summary>

		public static void CreateOrUpdateRiskAssessmentExternalContacts(HeContext heContext, BitArray usedFields, RCRiskAssessmentExternalContactsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentExternalContactsEntity.eSpaceId;
				ENRiskAssessmentExternalContactsEntityRecord ssENRiskAssessmentExternalContacts = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRiskAssessmentExternalContactsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENT] = @ssRiskAssessment"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXTERNALCONTACT] = @ssExternalContact"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRiskAssessmentExternalContactsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENRiskAssessmentExternalContacts.ssRiskAssessment==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessment", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessment", DbType.Int32, ssENRiskAssessmentExternalContacts.ssRiskAssessment);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssExternalContact", DbType.String, ssENRiskAssessmentExternalContacts.ssExternalContact);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[EXTERNALCONTACT] = [EXTERNALCONTACT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRiskAssessmentExternalContactsssId", DbType.Int32, ssENRiskAssessmentExternalContacts.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateRiskAssessmentExternalContacts (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENRiskAssessmentExternalContactsEntity.LocalViewName(null, null) + " (" +
						 " [RISKASSESSMENT]" +
						 ", [EXTERNALCONTACT]" +
						 " ) VALUES (" +
						 " @ssRiskAssessment" +
						 ", @ssExternalContact" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENRiskAssessmentExternalContacts.ssRiskAssessment==0)) {
							insertSqlCmd.CreateParameter("@ssRiskAssessment", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRiskAssessment", DbType.Int32, ssENRiskAssessmentExternalContacts.ssRiskAssessment);
						}
						insertSqlCmd.CreateParameter("@ssExternalContact", DbType.String, ssENRiskAssessmentExternalContacts.ssExternalContact);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateRiskAssessmentExternalContacts", true), typeof(int));
					} else {
						outParamId = ssENRiskAssessmentExternalContacts.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteRiskAssessmentExternalContacts
		/// </summary>

		public static void DeleteRiskAssessmentExternalContacts(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentExternalContactsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENRiskAssessmentExternalContactsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteRiskAssessmentExternalContacts", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRiskAssessmentExternalContacts
		/// </summary>

		public static void GetRiskAssessmentExternalContacts(HeContext heContext, int inParamId, out RCRiskAssessmentExternalContactsRecord outParamRecord) {
			outParamRecord = new RCRiskAssessmentExternalContactsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentExternalContactsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [RISKASSESSMENT]" +
					 ", [EXTERNALCONTACT]" +
					 " FROM " + ENRiskAssessmentExternalContactsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRiskAssessmentExternalContacts", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENRiskAssessmentExternalContactsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetRiskAssessmentExternalContactsForUpdate
		/// </summary>

		public static void GetRiskAssessmentExternalContactsForUpdate(HeContext heContext, int inParamId, out RCRiskAssessmentExternalContactsRecord outParamRecord) {
			outParamRecord = new RCRiskAssessmentExternalContactsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentExternalContactsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [RISKASSESSMENT]" +
					 ", [EXTERNALCONTACT]" +
					 "FROM " + ENRiskAssessmentExternalContactsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRiskAssessmentExternalContactsForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENRiskAssessmentExternalContactsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateRiskAssessmentExternalContacts
		/// </summary>

		public static void UpdateRiskAssessmentExternalContacts(HeContext heContext, BitArray usedFields, RCRiskAssessmentExternalContactsRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENRiskAssessmentExternalContactsEntity.eSpaceId;
				ENRiskAssessmentExternalContactsEntityRecord ssENRiskAssessmentExternalContacts = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRiskAssessmentExternalContactsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RISKASSESSMENT] = @ssRiskAssessment"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXTERNALCONTACT] = @ssExternalContact"): parameters);
					string whereCondition = " WHERE [ID] = @ssENRiskAssessmentExternalContactsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENRiskAssessmentExternalContacts.ssRiskAssessment==0)) {
							sqlCmd.CreateParameter("@ssRiskAssessment", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRiskAssessment", DbType.Int32, ssENRiskAssessmentExternalContacts.ssRiskAssessment);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssExternalContact", DbType.String, ssENRiskAssessmentExternalContacts.ssExternalContact);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[EXTERNALCONTACT] = [EXTERNALCONTACT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENRiskAssessmentExternalContactsssId", DbType.Int32, ssENRiskAssessmentExternalContacts.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateRiskAssessmentExternalContacts", true) <= 0)
					throw new DataBaseException(ENRiskAssessmentExternalContactsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENRiskAssessmentExternalContacts.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("RiskAssessmentExternalContacts")]
	public class WORCRiskAssessmentExternalContactsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("RiskAssessment")]
		public int varWSRiskAssessment;

		[System.Xml.Serialization.XmlElement("ExternalContact")]
		public string varWSExternalContact;

		public WORCRiskAssessmentExternalContactsRecord() {
			varWSId = (int) 0;
			varWSRiskAssessment = (int) 0;
			varWSExternalContact = (string) "";
		}

		public WORCRiskAssessmentExternalContactsRecord(ENRiskAssessmentExternalContactsEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSRiskAssessment = (int) r.ssRiskAssessment;
			varWSExternalContact = BaseAppUtils.RemoveControlChars(r.ssExternalContact);
		}

		public static RLRiskAssessmentExternalContactsList ToRecordList(WORCRiskAssessmentExternalContactsRecord[] array) {
			RLRiskAssessmentExternalContactsList rl = new RLRiskAssessmentExternalContactsList();
			if (array != null) {
				foreach(WORCRiskAssessmentExternalContactsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRiskAssessmentExternalContactsRecord[] FromRecordList(RLRiskAssessmentExternalContactsList rl) {
			WORCRiskAssessmentExternalContactsRecord[] array = new WORCRiskAssessmentExternalContactsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCRiskAssessmentExternalContactsRecord {
		public static implicit operator WORCRiskAssessmentExternalContactsRecord(RCRiskAssessmentExternalContactsRecord r) {
			return new WORCRiskAssessmentExternalContactsRecord(r.ssENRiskAssessmentExternalContacts);
		}

		public static implicit operator RCRiskAssessmentExternalContactsRecord(WORCRiskAssessmentExternalContactsRecord w) {
			RCRiskAssessmentExternalContactsRecord r = new RCRiskAssessmentExternalContactsRecord("");
			if (w != null) {
				r.ssENRiskAssessmentExternalContacts = w;
			}
			return r;
		}

	}

	partial struct ENRiskAssessmentExternalContactsEntityRecord {
		public static implicit operator WORCRiskAssessmentExternalContactsRecord(ENRiskAssessmentExternalContactsEntityRecord r) {
			return new WORCRiskAssessmentExternalContactsRecord(r);
		}

		public static implicit operator ENRiskAssessmentExternalContactsEntityRecord(WORCRiskAssessmentExternalContactsRecord w) {
			ENRiskAssessmentExternalContactsEntityRecord r = new ENRiskAssessmentExternalContactsEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssRiskAssessment = (int) w.varWSRiskAssessment;
				r.ssExternalContact = ((string) w.varWSExternalContact ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRiskAssessmentExternalContactsRecordList {
		public WORCRiskAssessmentExternalContactsRecord[] Array;


		public WORLRiskAssessmentExternalContactsRecordList(WORCRiskAssessmentExternalContactsRecord[] r) {
			if (r == null)
			Array = new WORCRiskAssessmentExternalContactsRecord[0];
			else
			Array = r;
		}
		public WORLRiskAssessmentExternalContactsRecordList() {
			Array = new WORCRiskAssessmentExternalContactsRecord[0];
		}

		public WORLRiskAssessmentExternalContactsRecordList(RLRiskAssessmentExternalContactsRecordList rl) {
			rl=(RLRiskAssessmentExternalContactsRecordList) rl.Duplicate();
			Array = new WORCRiskAssessmentExternalContactsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRiskAssessmentExternalContactsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRiskAssessmentExternalContactsRecordList {
		public static implicit operator RLRiskAssessmentExternalContactsRecordList(WORCRiskAssessmentExternalContactsRecord[] array) {
			RLRiskAssessmentExternalContactsRecordList rl = new RLRiskAssessmentExternalContactsRecordList();
			if (array != null) {
				foreach(WORCRiskAssessmentExternalContactsRecord val in array) {
					rl.Append((RCRiskAssessmentExternalContactsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRiskAssessmentExternalContactsRecord[](RLRiskAssessmentExternalContactsRecordList rl) {
			WORCRiskAssessmentExternalContactsRecord[] array = new WORCRiskAssessmentExternalContactsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRiskAssessmentExternalContactsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRiskAssessmentExternalContactsRecordList {
		public static implicit operator RLRiskAssessmentExternalContactsRecordList(WORLRiskAssessmentExternalContactsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRiskAssessmentExternalContactsRecordList(RLRiskAssessmentExternalContactsRecordList rl) {
			return new WORLRiskAssessmentExternalContactsRecordList(rl);
		}
		public static implicit operator WORCRiskAssessmentExternalContactsRecord[](WORLRiskAssessmentExternalContactsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRiskAssessmentExternalContactsRecordList(WORCRiskAssessmentExternalContactsRecord[] array) {
			return new WORLRiskAssessmentExternalContactsRecordList(array);
		}
	}
}

