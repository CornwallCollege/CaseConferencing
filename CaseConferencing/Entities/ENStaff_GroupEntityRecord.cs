/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStaff_GroupEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCornwallCollegeData.ENStaff_GroupEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCornwallCollegeData.ENStaff_GroupEntity.eSpaceId;
	} // ENStaff_GroupEntity

	/// <summary>
	/// Entity <code>ENStaff_GroupEntityRecord</code> that represents the Service Studio entity
	///  <code>Staff_Group</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Staff_Group", "0JdpguyTKkSM+mtIlbnUDg", "MHDKEnEy6kO1VcZuY5cJcA", 0, "OSUSR_bd2_Staff_Group", "")]
	[Serializable()]
	public partial struct ENStaff_GroupEntityRecord: ISerializable, ITypedRecord<ENStaff_GroupEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*6sAc7NGXQU6phC3SB3FTHA");
		private static readonly GlobalObjectKey IdStaffId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*t2Ts8NhxbE62aW8woeIGYQ");
		private static readonly GlobalObjectKey IdGroupId = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*49bsTOUiTUGpbYQIsXzE3Q");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STAFFID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StaffId")]
		private int _ssStaffId;
		public int ssStaffId {
			get {
				return _ssStaffId;
			}
			set {
				if ((_ssStaffId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStaffId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GROUPID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("GroupId")]
		private int _ssGroupId;
		public int ssGroupId {
			get {
				return _ssGroupId;
			}
			set {
				if ((_ssGroupId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssGroupId = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStaff_GroupEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssStaffId = 0;
			_ssGroupId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Staff_Group.Id", 0);
			ssStaffId = r.ReadEntityReference(index++, "Staff_Group.StaffId", 0);
			ssGroupId = r.ReadEntityReference(index++, "Staff_Group.GroupId", 0);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStaff_GroupEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStaff_GroupEntityRecord a, ENStaff_GroupEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStaffId != b.ssStaffId) return false;
			if (a.ssGroupId != b.ssGroupId) return false;
			return true;
		}

		public static bool operator != (ENStaff_GroupEntityRecord a, ENStaff_GroupEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStaff_GroupEntityRecord)) return false;
			return (this == (ENStaff_GroupEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStaffId.GetHashCode()
				^ ssGroupId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStaff_GroupEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssStaffId = 0;
			_ssGroupId = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStaffId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssGroupId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStaff_GroupEntityRecord Duplicate() {
			ENStaff_GroupEntityRecord t;
			t._ssId = this._ssId;
			t._ssStaffId = this._ssStaffId;
			t._ssGroupId = this._ssGroupId;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StaffId")) VarValue.AppendAttribute(recordElem, "StaffId", ssStaffId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StaffId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupId")) VarValue.AppendAttribute(recordElem, "GroupId", ssGroupId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "GroupId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "staffid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffId")) variable.Value = ssStaffId; else variable.Optimized = true;
			} else if (head == "groupid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupId")) variable.Value = ssGroupId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStaffId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdGroupId)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStaffId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdGroupId)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStaffId) {
				return ssStaffId;
			} else if (key == IdGroupId) {
				return ssGroupId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStaffId = (int) other.AttributeGet(IdStaffId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStaffId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStaffId);
			ssGroupId = (int) other.AttributeGet(IdGroupId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdGroupId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdGroupId);
		}
	} // ENStaff_GroupEntityRecord
	/// <summary>
	/// Structure <code>RCStaff_GroupRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaff_GroupRecord: ISerializable, ITypedRecord<RCStaff_GroupRecord> {
		private static readonly GlobalObjectKey IdStaff_Group = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*jeo04chz8madtEryMSVShg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Staff_Group")]
		public ENStaff_GroupEntityRecord ssENStaff_Group;


		public static implicit operator ENStaff_GroupEntityRecord(RCStaff_GroupRecord r) {
			return r.ssENStaff_Group;
		}

		public static implicit operator RCStaff_GroupRecord(ENStaff_GroupEntityRecord r) {
			RCStaff_GroupRecord res = new RCStaff_GroupRecord(null);
			res.ssENStaff_Group = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStaff_Group.ChangedAttributes = value;
			}
			get {
				return ssENStaff_Group.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStaff_GroupRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStaff_Group = new ENStaff_GroupEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStaff_Group.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStaff_Group.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStaff_Group.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStaff_Group.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaff_GroupRecord r) {
			this = r;
		}


		public static bool operator == (RCStaff_GroupRecord a, RCStaff_GroupRecord b) {
			if (a.ssENStaff_Group != b.ssENStaff_Group) return false;
			return true;
		}

		public static bool operator != (RCStaff_GroupRecord a, RCStaff_GroupRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaff_GroupRecord)) return false;
			return (this == (RCStaff_GroupRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStaff_Group.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaff_GroupRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStaff_Group = new ENStaff_GroupEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStaff_Group = (ENStaff_GroupEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStaff_Group.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStaff_Group.InternalRecursiveSave();
		}


		public RCStaff_GroupRecord Duplicate() {
			RCStaff_GroupRecord t;
			t.ssENStaff_Group = (ENStaff_GroupEntityRecord) this.ssENStaff_Group.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStaff_Group.ToXml(this, recordElem, "Staff_Group", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staff_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Staff_Group")) variable.Value = ssENStaff_Group; else variable.Optimized = true;
				variable.SetFieldName("staff_group");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStaff_Group.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStaff_Group.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaff_Group) {
				return ssENStaff_Group;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStaff_Group.FillFromOther((IRecord) other.AttributeGet(IdStaff_Group));
		}
	} // RCStaff_GroupRecord
	/// <summary>
	/// RecordList type <code>RLStaff_GroupRecordList</code> that represents a record list of
	///  <code>Staff_Group</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaff_GroupRecordList: GenericRecordList<RCStaff_GroupRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaff_GroupRecord GetElementDefaultValue() {
			return new RCStaff_GroupRecord("");
		}

		public T[] ToArray<T>(Func<RCStaff_GroupRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaff_GroupRecordList recordlist, Func<RCStaff_GroupRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaff_GroupRecordList ToList<T>(T[] array, Func <T, RCStaff_GroupRecord> converter) {
			RLStaff_GroupRecordList result = new RLStaff_GroupRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaff_GroupRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaff_GroupRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaff_GroupRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaff_GroupRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaff_GroupRecord> NewList() {
			return new RLStaff_GroupRecordList();
		}


	} // RLStaff_GroupRecordList

	/// <summary>
	/// RecordList type <code>RLStaff_GroupList</code> that represents a record list of
	///  <code>StaffIdentifier, GroupIdentifier, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaff_GroupList: GenericRecordList<ENStaff_GroupEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStaff_GroupEntityRecord GetElementDefaultValue() {
			return new ENStaff_GroupEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStaff_GroupEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaff_GroupList recordlist, Func<ENStaff_GroupEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaff_GroupList ToList<T>(T[] array, Func <T, ENStaff_GroupEntityRecord> converter) {
			RLStaff_GroupList result = new RLStaff_GroupList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaff_GroupList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaff_GroupList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaff_GroupList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaff_GroupList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStaff_GroupEntityRecord> NewList() {
			return new RLStaff_GroupList();
		}


	} // RLStaff_GroupList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStaff_Group
		/// </summary>

		public static void CreateStaff_Group(HeContext heContext, RCStaff_GroupRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaff_GroupEntity.eSpaceId;
				ENStaff_GroupEntityRecord ssENStaff_Group = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStaff_GroupEntity.LocalViewName(null, null) + " (" +
					 " [STAFFID]" +
					 ", [GROUPID]" +
					 " ) VALUES (" +
					 " @ssStaffId" +
					 ", @ssGroupId" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStaff_Group.ssStaffId==0)) {
						insertSqlCmd.CreateParameter("@ssStaffId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStaffId", DbType.Int32, ssENStaff_Group.ssStaffId);
					}
					if ((ssENStaff_Group.ssGroupId==0)) {
						insertSqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStaff_Group.ssGroupId);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStaff_Group", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStaff_Group
		/// </summary>

		public static void CreateOrUpdateStaff_Group(HeContext heContext, BitArray usedFields, RCStaff_GroupRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaff_GroupEntity.eSpaceId;
				ENStaff_GroupEntityRecord ssENStaff_Group = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStaff_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAFFID] = @ssStaffId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPID] = @ssGroupId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStaff_GroupssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStaff_Group.ssStaffId==0)) {
							sqlCmd.CreateParameter("@ssStaffId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStaffId", DbType.Int32, ssENStaff_Group.ssStaffId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStaff_Group.ssGroupId==0)) {
							sqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStaff_Group.ssGroupId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[STAFFID] = [STAFFID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStaff_GroupssId", DbType.Int32, ssENStaff_Group.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStaff_Group (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStaff_GroupEntity.LocalViewName(null, null) + " (" +
						 " [STAFFID]" +
						 ", [GROUPID]" +
						 " ) VALUES (" +
						 " @ssStaffId" +
						 ", @ssGroupId" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStaff_Group.ssStaffId==0)) {
							insertSqlCmd.CreateParameter("@ssStaffId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStaffId", DbType.Int32, ssENStaff_Group.ssStaffId);
						}
						if ((ssENStaff_Group.ssGroupId==0)) {
							insertSqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStaff_Group.ssGroupId);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStaff_Group", true), typeof(int));
					} else {
						outParamId = ssENStaff_Group.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStaff_Group
		/// </summary>

		public static void DeleteStaff_Group(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaff_GroupEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStaff_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStaff_Group", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStaff_Group
		/// </summary>

		public static void GetStaff_Group(HeContext heContext, int inParamId, out RCStaff_GroupRecord outParamRecord) {
			outParamRecord = new RCStaff_GroupRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaff_GroupEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STAFFID]" +
					 ", [GROUPID]" +
					 " FROM " + ENStaff_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStaff_Group", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENStaff_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStaff_GroupForUpdate
		/// </summary>

		public static void GetStaff_GroupForUpdate(HeContext heContext, int inParamId, out RCStaff_GroupRecord outParamRecord) {
			outParamRecord = new RCStaff_GroupRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaff_GroupEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STAFFID]" +
					 ", [GROUPID]" +
					 "FROM " + ENStaff_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStaff_GroupForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENStaff_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStaff_Group
		/// </summary>

		public static void UpdateStaff_Group(HeContext heContext, BitArray usedFields, RCStaff_GroupRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaff_GroupEntity.eSpaceId;
				ENStaff_GroupEntityRecord ssENStaff_Group = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStaff_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAFFID] = @ssStaffId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPID] = @ssGroupId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStaff_GroupssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStaff_Group.ssStaffId==0)) {
							sqlCmd.CreateParameter("@ssStaffId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStaffId", DbType.Int32, ssENStaff_Group.ssStaffId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStaff_Group.ssGroupId==0)) {
							sqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStaff_Group.ssGroupId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[STAFFID] = [STAFFID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStaff_GroupssId", DbType.Int32, ssENStaff_Group.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStaff_Group", true) <= 0)
					throw new DataBaseException(ENStaff_GroupEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStaff_Group.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("Staff_Group")]
	public class WORCStaff_GroupRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StaffId")]
		public int varWSStaffId;

		[System.Xml.Serialization.XmlElement("GroupId")]
		public int varWSGroupId;

		public WORCStaff_GroupRecord() {
			varWSId = (int) 0;
			varWSStaffId = (int) 0;
			varWSGroupId = (int) 0;
		}

		public WORCStaff_GroupRecord(ENStaff_GroupEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStaffId = (int) r.ssStaffId;
			varWSGroupId = (int) r.ssGroupId;
		}

		public static RLStaff_GroupList ToRecordList(WORCStaff_GroupRecord[] array) {
			RLStaff_GroupList rl = new RLStaff_GroupList();
			if (array != null) {
				foreach(WORCStaff_GroupRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStaff_GroupRecord[] FromRecordList(RLStaff_GroupList rl) {
			WORCStaff_GroupRecord[] array = new WORCStaff_GroupRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStaff_GroupRecord {
		public static implicit operator WORCStaff_GroupRecord(RCStaff_GroupRecord r) {
			return new WORCStaff_GroupRecord(r.ssENStaff_Group);
		}

		public static implicit operator RCStaff_GroupRecord(WORCStaff_GroupRecord w) {
			RCStaff_GroupRecord r = new RCStaff_GroupRecord("");
			if (w != null) {
				r.ssENStaff_Group = w;
			}
			return r;
		}

	}

	partial struct ENStaff_GroupEntityRecord {
		public static implicit operator WORCStaff_GroupRecord(ENStaff_GroupEntityRecord r) {
			return new WORCStaff_GroupRecord(r);
		}

		public static implicit operator ENStaff_GroupEntityRecord(WORCStaff_GroupRecord w) {
			ENStaff_GroupEntityRecord r = new ENStaff_GroupEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStaffId = (int) w.varWSStaffId;
				r.ssGroupId = (int) w.varWSGroupId;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaff_GroupRecordList {
		public WORCStaff_GroupRecord[] Array;


		public WORLStaff_GroupRecordList(WORCStaff_GroupRecord[] r) {
			if (r == null)
			Array = new WORCStaff_GroupRecord[0];
			else
			Array = r;
		}
		public WORLStaff_GroupRecordList() {
			Array = new WORCStaff_GroupRecord[0];
		}

		public WORLStaff_GroupRecordList(RLStaff_GroupRecordList rl) {
			rl=(RLStaff_GroupRecordList) rl.Duplicate();
			Array = new WORCStaff_GroupRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStaff_GroupRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaff_GroupRecordList {
		public static implicit operator RLStaff_GroupRecordList(WORCStaff_GroupRecord[] array) {
			RLStaff_GroupRecordList rl = new RLStaff_GroupRecordList();
			if (array != null) {
				foreach(WORCStaff_GroupRecord val in array) {
					rl.Append((RCStaff_GroupRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaff_GroupRecord[](RLStaff_GroupRecordList rl) {
			WORCStaff_GroupRecord[] array = new WORCStaff_GroupRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStaff_GroupRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaff_GroupRecordList {
		public static implicit operator RLStaff_GroupRecordList(WORLStaff_GroupRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStaff_GroupRecordList(RLStaff_GroupRecordList rl) {
			return new WORLStaff_GroupRecordList(rl);
		}
		public static implicit operator WORCStaff_GroupRecord[](WORLStaff_GroupRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaff_GroupRecordList(WORCStaff_GroupRecord[] array) {
			return new WORLStaff_GroupRecordList(array);
		}
	}
}

