/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENAttendanceViewTypeEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			switch (locale == null ? "":
					locale.ToLowerInvariant()) {
				default:

					int pos;
					if (!string.IsNullOrEmpty(locale) && ((pos = locale.IndexOf('-')) > 0))
					return ViewName(tenant, locale.Substring(0, pos)); // fallback
					else
					return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(10), "OSUSR_pkx_AttendanceViewType");
				}
			}
		} // ENAttendanceViewTypeEntity

		/// <summary>
		/// Entity <code>ENAttendanceViewTypeEntityRecord</code> that represents the Service Studio entity
		///  <code>AttendanceViewType</code> <p> Description: </p>
		/// </summary>
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("AttendanceViewType", "57Chnsu2LUKyz_lCUHQy8Q", "shmcdFKEAEWXZGfrlZEwCQ", 0, "OSUSR_pkx_AttendanceViewType", null)]
		[Serializable()]
		public partial struct ENAttendanceViewTypeEntityRecord: ISerializable, ITypedRecord<ENAttendanceViewTypeEntityRecord>, ISimpleRecord {
			private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*yyAWZT_4FUCpwcrEQV81ew");
			private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*C2U7qT90R0OS8Wj_Zh332Q");
			private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*45G8cswZrkeK9Y583u5v8w");
			private static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*QhVMTCAGsEWHEwl8rVcJNw");

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
			[System.Xml.Serialization.XmlElement("Id")]
			private int _ssId;
			public int ssId {
				get {
					return _ssId;
				}
				set {
					if ((_ssId!=value) || OptimizedAttributes[0]) {
						ChangedAttributes = new BitArray(4, true);
						_ssId = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LABEL", 50, false, false, false)]
			[System.Xml.Serialization.XmlElement("Label")]
			private string _ssLabel;
			public string ssLabel {
				get {
					return _ssLabel;
				}
				set {
					if ((_ssLabel!=value) || OptimizedAttributes[1]) {
						ChangedAttributes[1] = true;
						_ssLabel = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
			[System.Xml.Serialization.XmlElement("Order")]
			private int _ssOrder;
			public int ssOrder {
				get {
					return _ssOrder;
				}
				set {
					if ((_ssOrder!=value) || OptimizedAttributes[2]) {
						ChangedAttributes[2] = true;
						_ssOrder = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false)]
			[System.Xml.Serialization.XmlElement("Is_Active")]
			private bool _ssIs_Active;
			public bool ssIs_Active {
				get {
					return _ssIs_Active;
				}
				set {
					if ((_ssIs_Active!=value) || OptimizedAttributes[3]) {
						ChangedAttributes[3] = true;
						_ssIs_Active = value;
					}
				}
			}


			public BitArray ChangedAttributes;

			public BitArray OptimizedAttributes;

			public ENAttendanceViewTypeEntityRecord(params string[] dummy) {
				ChangedAttributes = new BitArray(4, true);
				OptimizedAttributes = new BitArray(4, false);
				_ssId = 0;
				_ssLabel = "";
				_ssOrder = 0;
				_ssIs_Active = false;
			}

			public BitArray[] GetDefaultOptimizedValues() {
				BitArray[] all = new BitArray[0];
				return all;
			}

			public BitArray[] AllOptimizedAttributes {
				set {
					if (value == null) {
					} else {
					}
				}
				get {
					BitArray[] all = new BitArray[0];
					return all;
				}
			}

			/// <summary>
			/// Read a record from database
			/// </summary>
			/// <param name="r"> Data base reader</param>
			/// <param name="index"> index</param>
			public void Read(IDataReader r, ref int index) {
				ssId = r.ReadInteger(index++, "AttendanceViewType.Id", 0);
				ssLabel = r.ReadText(index++, "AttendanceViewType.Label", "");
				ssOrder = r.ReadInteger(index++, "AttendanceViewType.Order", 0);
				ssIs_Active = r.ReadBoolean(index++, "AttendanceViewType.Is_Active", false);
				ChangedAttributes = new BitArray(4, false);
				OptimizedAttributes = new BitArray(4, false);
			}
			/// <summary>
			/// Read from database
			/// </summary>
			/// <param name="r"> Data reader</param>
			public void ReadDB(IDataReader r) {
				int index = 0;
				Read(r, ref index);
			}

			/// <summary>
			/// Read from record
			/// </summary>
			/// <param name="r"> Record</param>
			public void ReadIM(ENAttendanceViewTypeEntityRecord r) {
				this = r;
			}


			public static bool operator == (ENAttendanceViewTypeEntityRecord a, ENAttendanceViewTypeEntityRecord b) {
				if (a.ssId != b.ssId) return false;
				if (a.ssLabel != b.ssLabel) return false;
				if (a.ssOrder != b.ssOrder) return false;
				if (a.ssIs_Active != b.ssIs_Active) return false;
				return true;
			}

			public static bool operator != (ENAttendanceViewTypeEntityRecord a, ENAttendanceViewTypeEntityRecord b) {
				return !(a==b);
			}

			public override bool Equals(object o) {
				if (o.GetType() != typeof(ENAttendanceViewTypeEntityRecord)) return false;
				return (this == (ENAttendanceViewTypeEntityRecord) o);
			}

			public override int GetHashCode() {
				try {
					return base.GetHashCode()
					^ ssId.GetHashCode()
					^ ssLabel.GetHashCode()
					^ ssOrder.GetHashCode()
					^ ssIs_Active.GetHashCode()
					;
				} catch {
					return base.GetHashCode();
				}
			}

			public void GetObjectData(SerializationInfo info, StreamingContext context) {
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				for (int i = 0; i < fields.Length; i++)
				if (fields[i] .FieldType.IsSerializable)
				info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
			}

			public ENAttendanceViewTypeEntityRecord(SerializationInfo info, StreamingContext context) {
				ChangedAttributes = new BitArray(4, true);
				OptimizedAttributes = new BitArray(4, false);
				_ssId = 0;
				_ssLabel = "";
				_ssOrder = 0;
				_ssIs_Active = false;
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fields[0] .FieldType.IsSerializable)
				_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
				if (fields[1] .FieldType.IsSerializable)
				_ssLabel = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
				if (fields[2] .FieldType.IsSerializable)
				_ssOrder = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
				if (fields[3] .FieldType.IsSerializable)
				_ssIs_Active = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			}

			public void RecursiveReset() {
			}

			public void InternalRecursiveSave() {
			}


			public ENAttendanceViewTypeEntityRecord Duplicate() {
				ENAttendanceViewTypeEntityRecord t;
				t._ssId = this._ssId;
				t._ssLabel = this._ssLabel;
				t._ssOrder = this._ssOrder;
				t._ssIs_Active = this._ssIs_Active;
				t.ChangedAttributes = new BitArray(4);
				t.OptimizedAttributes = new BitArray(4);
				for (int i = 0; i < 4; i++) {
					t.ChangedAttributes[i] = ChangedAttributes[i];
					t.OptimizedAttributes[i] = OptimizedAttributes[i];
				}
				return t;
			}

			IRecord IRecord.Duplicate() {
				return Duplicate();
			}

			public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
				System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
				if (fieldName != null) {
					VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
					fieldName = fieldName.ToLowerInvariant();
				}
				if (detailLevel > 0) {
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
				} else {
					VarValue.AppendDeferredEvaluationElement(recordElem);
				}
			}

			public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
				String head = VarValue.GetHead(fields);
				String tail = VarValue.GetTail(fields);
				variable.Found = false;
				if (head == "id") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
				} else if (head == "label") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
				} else if (head == "order") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
				} else if (head == "is_active") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
				}
				if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
			}

			public bool ChangedAttributeGet(GlobalObjectKey key) {
				if (key.Equals(IdId)) {
					return ChangedAttributes[0];
				} else if (key.Equals(IdLabel)) {
					return ChangedAttributes[1];
				} else if (key.Equals(IdOrder)) {
					return ChangedAttributes[2];
				} else if (key.Equals(IdIs_Active)) {
					return ChangedAttributes[3];
				} else {
					throw new Exception("Invalid key");
				}
			}

			public bool OptimizedAttributeGet(GlobalObjectKey key) {
				if (key.Equals(IdId)) {
					return OptimizedAttributes[0];
				} else if (key.Equals(IdLabel)) {
					return OptimizedAttributes[1];
				} else if (key.Equals(IdOrder)) {
					return OptimizedAttributes[2];
				} else if (key.Equals(IdIs_Active)) {
					return OptimizedAttributes[3];
				} else {
					throw new Exception("Invalid key");
				}
			}

			public object AttributeGet(GlobalObjectKey key) {
				if (key == IdId) {
					return ssId;
				} else if (key == IdLabel) {
					return ssLabel;
				} else if (key == IdOrder) {
					return ssOrder;
				} else if (key == IdIs_Active) {
					return ssIs_Active;
				} else {
					throw new Exception("Invalid key");
				}
			}
			public void FillFromOther(IRecord other) {
				ChangedAttributes = new BitArray(4);
				OptimizedAttributes = new BitArray(4);
				if (other == null) return;
				ssId = (int) other.AttributeGet(IdId);
				ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
				OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
				ssLabel = (string) other.AttributeGet(IdLabel);
				ChangedAttributes[1] = other.ChangedAttributeGet(IdLabel);
				OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLabel);
				ssOrder = (int) other.AttributeGet(IdOrder);
				ChangedAttributes[2] = other.ChangedAttributeGet(IdOrder);
				OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOrder);
				ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
				ChangedAttributes[3] = other.ChangedAttributeGet(IdIs_Active);
				OptimizedAttributes[3] = other.OptimizedAttributeGet(IdIs_Active);
			}
		} // ENAttendanceViewTypeEntityRecord
		partial class ENAttendanceViewTypeEntity: StaticEntityRuntime {


			public class ENAttendanceViewTypeEntityRecordMetadata: StaticEntityRuntime.StaticRecordMetadata {
				public virtual int DataId {
					get {
						return (int) _dataId;
					}
				}

				protected override object IdReader(IDataReader r) {
					Object column = r["Data_Id"];
					return (column != System.DBNull.Value ? Convert.ToInt32(column): 0);
				}
			} // " + DeclStaticMetadataClass);


			private static ENAttendanceViewTypeEntity instance = new ENAttendanceViewTypeEntity(10, ObjectKey.Parse("57Chnsu2LUKyz_lCUHQy8Q"));

			public static ENAttendanceViewTypeEntity GetInstance() {
				return instance;
			}

			private ENAttendanceViewTypeEntity(int espaceId, ObjectKey entityKey): base(espaceId, entityKey) {
			}


			protected override StaticRecordMetadata newStaticRecord() {
				return new ENAttendanceViewTypeEntityRecordMetadata();
			}

			private ENAttendanceViewTypeEntityRecord GetRecord(ENAttendanceViewTypeEntityRecordMetadata meta) {
				return GetRecord(meta.DataId);
			}

			private ENAttendanceViewTypeEntityRecord GetRecord(int id) {
				string locale = BuiltInFunction.GetCurrentLocale();
				Object recordObj = RecordsById(locale)[id];
				if (recordObj != null) {
					return (ENAttendanceViewTypeEntityRecord) recordObj;
				} else {
					using(Transaction tran = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {

						int pos = 0;
						ENAttendanceViewTypeEntityRecord record = new ENAttendanceViewTypeEntityRecord(null);

						string sql= "SELECT TOP (1) " +
						 " [ID]  o1" +
						 ", [LABEL]  o2" +
						 ", [ORDER]  o3" +
						 ", [IS_ACTIVE]  o4" +
						 " FROM " + ENAttendanceViewTypeEntity.LocalViewName(null, locale) + " " +
						 " WHERE [ID] = @DataId";


						Command cmd = tran.CreateCommand(sql);
						cmd.CreateParameter("@DataId", DbType.Int32, id);

						using(IDataReader reader = cmd.ExecuteReader()) {
							if (reader.Read()) {
								record.Read(reader, ref pos);
								RecordsById(locale)[id] = record;
							} else {
								throw new DataBaseException(ViewName(null, "") + " with key " + id + " was not found.");
							}
						}
						return record;
					}

				}
			}

			public static ENAttendanceViewTypeEntityRecord GetRecordById(int id) {
				return instance.GetRecord(id);
			}

			public static ENAttendanceViewTypeEntityRecord GetRecordByName(string name) {
				ENAttendanceViewTypeEntityRecordMetadata meta = (ENAttendanceViewTypeEntityRecordMetadata) instance.GetRecordMetadataByName(name);
				if (meta == null || !meta.Valid) {
					throw new DataBaseException(ViewName(null, "") + ", record with Identifier " + name + " was not found.");
				}
				return instance.GetRecord(meta);
			}

			public static ENAttendanceViewTypeEntityRecord GetRecordByKey(ObjectKey key) {
				ENAttendanceViewTypeEntityRecordMetadata meta = (ENAttendanceViewTypeEntityRecordMetadata) instance.GetRecordMetadataByKey(key);
				if (meta == null || !meta.Valid) {
					throw new DataBaseException(ViewName(null, "") + ", record metadata '" + ObjectKeyUtils.DatabaseValue(key) + "' was " + (meta == null ? "not found": "invalid") + ".");
				}
				return instance.GetRecord(meta);
			}

		} // ENAttendanceViewTypeEntity;

		/// <summary>
		/// Structure <code>RCAttendanceViewTypeRecord</code>
		/// </summary>
		[Serializable()]
		public partial struct RCAttendanceViewTypeRecord: ISerializable, ITypedRecord<RCAttendanceViewTypeRecord> {
			private static readonly GlobalObjectKey IdAttendanceViewType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*OIfY_tFgK6ngD34zY1BoQg");

			public static void EnsureInitialized() {}
			[System.Xml.Serialization.XmlElement("AttendanceViewType")]
			public ENAttendanceViewTypeEntityRecord ssENAttendanceViewType;


			public static implicit operator ENAttendanceViewTypeEntityRecord(RCAttendanceViewTypeRecord r) {
				return r.ssENAttendanceViewType;
			}

			public static implicit operator RCAttendanceViewTypeRecord(ENAttendanceViewTypeEntityRecord r) {
				RCAttendanceViewTypeRecord res = new RCAttendanceViewTypeRecord(null);
				res.ssENAttendanceViewType = r;
				return res;
			}

			public BitArray ChangedAttributes {
				set {
					ssENAttendanceViewType.ChangedAttributes = value;
				}
				get {
					return ssENAttendanceViewType.ChangedAttributes;
				}
			}
			public BitArray OptimizedAttributes;

			public RCAttendanceViewTypeRecord(params string[] dummy) {
				OptimizedAttributes = null;
				ssENAttendanceViewType = new ENAttendanceViewTypeEntityRecord(null);
			}

			public BitArray[] GetDefaultOptimizedValues() {
				BitArray[] all = new BitArray[1];
				all[0] = new BitArray(4, false);
				return all;
			}

			public BitArray[] AllOptimizedAttributes {
				set {
					if (value == null) {
						ssENAttendanceViewType.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					} else {
						ssENAttendanceViewType.OptimizedAttributes = value[0];
					}
				}
				get {
					BitArray[] all = new BitArray[1];
					all[0] = ssENAttendanceViewType.OptimizedAttributes;
					return all;
				}
			}

			/// <summary>
			/// Read a record from database
			/// </summary>
			/// <param name="r"> Data base reader</param>
			/// <param name="index"> index</param>
			public void Read(IDataReader r, ref int index) {
				ssENAttendanceViewType.Read(r, ref index);
			}
			/// <summary>
			/// Read from database
			/// </summary>
			/// <param name="r"> Data reader</param>
			public void ReadDB(IDataReader r) {
				int index = 0;
				Read(r, ref index);
			}

			/// <summary>
			/// Read from record
			/// </summary>
			/// <param name="r"> Record</param>
			public void ReadIM(RCAttendanceViewTypeRecord r) {
				this = r;
			}


			public static bool operator == (RCAttendanceViewTypeRecord a, RCAttendanceViewTypeRecord b) {
				if (a.ssENAttendanceViewType != b.ssENAttendanceViewType) return false;
				return true;
			}

			public static bool operator != (RCAttendanceViewTypeRecord a, RCAttendanceViewTypeRecord b) {
				return !(a==b);
			}

			public override bool Equals(object o) {
				if (o.GetType() != typeof(RCAttendanceViewTypeRecord)) return false;
				return (this == (RCAttendanceViewTypeRecord) o);
			}

			public override int GetHashCode() {
				try {
					return base.GetHashCode()
					^ ssENAttendanceViewType.GetHashCode()
					;
				} catch {
					return base.GetHashCode();
				}
			}

			public void GetObjectData(SerializationInfo info, StreamingContext context) {
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				for (int i = 0; i < fields.Length; i++)
				if (fields[i] .FieldType.IsSerializable)
				info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
			}

			public RCAttendanceViewTypeRecord(SerializationInfo info, StreamingContext context) {
				OptimizedAttributes = null;
				ssENAttendanceViewType = new ENAttendanceViewTypeEntityRecord(null);
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fields[0] .FieldType.IsSerializable)
				ssENAttendanceViewType = (ENAttendanceViewTypeEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			}

			public void RecursiveReset() {
				ssENAttendanceViewType.RecursiveReset();
			}

			public void InternalRecursiveSave() {
				ssENAttendanceViewType.InternalRecursiveSave();
			}


			public RCAttendanceViewTypeRecord Duplicate() {
				RCAttendanceViewTypeRecord t;
				t.ssENAttendanceViewType = (ENAttendanceViewTypeEntityRecord) this.ssENAttendanceViewType.Duplicate();
				t.OptimizedAttributes = null;
				return t;
			}

			IRecord IRecord.Duplicate() {
				return Duplicate();
			}

			public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
				System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
				if (fieldName != null) {
					VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				}
				if (detailLevel > 0) {
					ssENAttendanceViewType.ToXml(this, recordElem, "AttendanceViewType", detailLevel - 1);
				} else {
					VarValue.AppendDeferredEvaluationElement(recordElem);
				}
			}

			public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
				String head = VarValue.GetHead(fields);
				String tail = VarValue.GetTail(fields);
				variable.Found = false;
				if (head == "attendanceviewtype") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendanceViewType")) variable.Value = ssENAttendanceViewType; else variable.Optimized = true;
					variable.SetFieldName("attendanceviewtype");
				}
				if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
			}

			public bool ChangedAttributeGet(GlobalObjectKey key) {
				return ssENAttendanceViewType.ChangedAttributeGet(key);
			}

			public bool OptimizedAttributeGet(GlobalObjectKey key) {
				return ssENAttendanceViewType.OptimizedAttributeGet(key);
			}

			public object AttributeGet(GlobalObjectKey key) {
				if (key == IdAttendanceViewType) {
					return ssENAttendanceViewType;
				} else {
					throw new Exception("Invalid key");
				}
			}
			public void FillFromOther(IRecord other) {
				if (other == null) return;
				ssENAttendanceViewType.FillFromOther((IRecord) other.AttributeGet(IdAttendanceViewType));
			}
		} // RCAttendanceViewTypeRecord
		/// <summary>
		/// RecordList type <code>RLAttendanceViewTypeRecordList</code> that represents a record list of
		///  <code>AttendanceViewType</code>
		/// </summary>
		[Serializable()]
		public partial class RLAttendanceViewTypeRecordList: GenericRecordList<RCAttendanceViewTypeRecord>, IEnumerable, IEnumerator, ISerializable {
			public static void EnsureInitialized() {}

			protected override RCAttendanceViewTypeRecord GetElementDefaultValue() {
				return new RCAttendanceViewTypeRecord("");
			}

			public T[] ToArray<T>(Func<RCAttendanceViewTypeRecord, T> converter) {
				return ToArray(this, converter);
			}

			public static T[] ToArray<T>(RLAttendanceViewTypeRecordList recordlist, Func<RCAttendanceViewTypeRecord, T> converter) {
				T[] result = new T[recordlist.Length];
				recordlist.StartIteration();
				while (!recordlist.Eof) {
					result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
					recordlist.Advance();
				}
				recordlist.EndIteration();
				return result;
			}

			public static RLAttendanceViewTypeRecordList ToList<T>(T[] array, Func <T, RCAttendanceViewTypeRecord> converter) {
				RLAttendanceViewTypeRecordList result = new RLAttendanceViewTypeRecordList();
				if (array != null) {
					foreach(T item in array) {
						result.Append(converter(item));
					}
				}
				return result;
			}
			/// <summary>
			/// Default Constructor
			/// </summary>
			public RLAttendanceViewTypeRecordList(): base() {
			}

			/// <summary>
			/// Constructor with transaction parameter
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLAttendanceViewTypeRecordList(IDbTransaction trans): base(trans) {
			}

			/// <summary>
			/// Constructor with transaction parameter and alternate read method
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLAttendanceViewTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
				this.alternateReadDBMethod = alternateReadDBMethod;
			}

			/// <summary>
			/// Constructor declaration for serialization
			/// </summary>
			/// <param name="info"> SerializationInfo</param>
			/// <param name="context"> StreamingContext</param>
			public RLAttendanceViewTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
			}

			public override BitArray[] GetDefaultOptimizedValues() {
				BitArray[] def = new BitArray[1];
				def[0] = new BitArray(4, false);
				return def;
			}
			/// <summary>
			/// Create as new list
			/// </summary>
			/// <returns>The new record list</returns>
			protected override OSList<RCAttendanceViewTypeRecord> NewList() {
				return new RLAttendanceViewTypeRecordList();
			}


		} // RLAttendanceViewTypeRecordList

		/// <summary>
		/// RecordList type <code>RLAttendanceViewTypeList</code> that represents a record list of <code>Text,
		///  Boolean, Integer, Integer</code>
		/// </summary>
		[Serializable()]
		public partial class RLAttendanceViewTypeList: GenericRecordList<ENAttendanceViewTypeEntityRecord>, IEnumerable, IEnumerator, ISerializable {
			public static void EnsureInitialized() {}

			protected override ENAttendanceViewTypeEntityRecord GetElementDefaultValue() {
				return new ENAttendanceViewTypeEntityRecord("");
			}

			public T[] ToArray<T>(Func<ENAttendanceViewTypeEntityRecord, T> converter) {
				return ToArray(this, converter);
			}

			public static T[] ToArray<T>(RLAttendanceViewTypeList recordlist, Func<ENAttendanceViewTypeEntityRecord, T> converter) {
				T[] result = new T[recordlist.Length];
				recordlist.StartIteration();
				while (!recordlist.Eof) {
					result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
					recordlist.Advance();
				}
				recordlist.EndIteration();
				return result;
			}

			public static RLAttendanceViewTypeList ToList<T>(T[] array, Func <T, ENAttendanceViewTypeEntityRecord> converter) {
				RLAttendanceViewTypeList result = new RLAttendanceViewTypeList();
				if (array != null) {
					foreach(T item in array) {
						result.Append(converter(item));
					}
				}
				return result;
			}
			/// <summary>
			/// Default Constructor
			/// </summary>
			public RLAttendanceViewTypeList(): base() {
			}

			/// <summary>
			/// Constructor with transaction parameter
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLAttendanceViewTypeList(IDbTransaction trans): base(trans) {
			}

			/// <summary>
			/// Constructor with transaction parameter and alternate read method
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLAttendanceViewTypeList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
				this.alternateReadDBMethod = alternateReadDBMethod;
			}

			/// <summary>
			/// Constructor declaration for serialization
			/// </summary>
			/// <param name="info"> SerializationInfo</param>
			/// <param name="context"> StreamingContext</param>
			public RLAttendanceViewTypeList(SerializationInfo info, StreamingContext context): base(info, context) {
			}

			public override BitArray[] GetDefaultOptimizedValues() {
				BitArray[] def = new BitArray[0];
				return def;
			}
			/// <summary>
			/// Create as new list
			/// </summary>
			/// <returns>The new record list</returns>
			protected override OSList<ENAttendanceViewTypeEntityRecord> NewList() {
				return new RLAttendanceViewTypeList();
			}


		} // RLAttendanceViewTypeList
		public partial class ExtendedActions {
			/// <summary>
			/// Action: GetAttendanceViewType
			/// </summary>

			public static void GetAttendanceViewType(HeContext heContext, int inParamId, out RCAttendanceViewTypeRecord outParamRecord) {
				outParamRecord = new RCAttendanceViewTypeRecord(null);

				try {
					outParamRecord = ENAttendanceViewTypeEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [ID]" +
						 ", [LABEL]" +
						 ", [ORDER]" +
						 ", [IS_ACTIVE]" +
						 " FROM " + ENAttendanceViewTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [ID] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetAttendanceViewType", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENAttendanceViewTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			}

		}
	}

	namespace ssCaseConferencing {
		[XmlType("AttendanceViewType")]
		public class WORCAttendanceViewTypeRecord {
			[System.Xml.Serialization.XmlElement("Id")]
			public int varWSId;

			[System.Xml.Serialization.XmlElement("Label")]
			public string varWSLabel;

			[System.Xml.Serialization.XmlElement("Order")]
			public int varWSOrder;

			[System.Xml.Serialization.XmlElement("Is_Active")]
			public bool varWSIs_Active;

			public WORCAttendanceViewTypeRecord() {
				varWSId = (int) 0;
				varWSLabel = (string) "";
				varWSOrder = (int) 0;
				varWSIs_Active = (bool) false;
			}

			public WORCAttendanceViewTypeRecord(ENAttendanceViewTypeEntityRecord r) {
				varWSId = (int) r.ssId;
				varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
				varWSOrder = (int) r.ssOrder;
				varWSIs_Active = (bool) r.ssIs_Active;
			}

			public static RLAttendanceViewTypeList ToRecordList(WORCAttendanceViewTypeRecord[] array) {
				RLAttendanceViewTypeList rl = new RLAttendanceViewTypeList();
				if (array != null) {
					foreach(WORCAttendanceViewTypeRecord val in array) {
						rl.Append(val);
					}
				}
				return rl;
			}

			public static WORCAttendanceViewTypeRecord[] FromRecordList(RLAttendanceViewTypeList rl) {
				WORCAttendanceViewTypeRecord[] array = new WORCAttendanceViewTypeRecord[rl == null ? 0: rl.Length];
				for (int i = 0; i < array.Length; i++) {
					array[i] = rl.Data[i];
				}
				return array;
			}
		}
	}

	namespace ssCaseConferencing {
		partial struct RCAttendanceViewTypeRecord {
			public static implicit operator WORCAttendanceViewTypeRecord(RCAttendanceViewTypeRecord r) {
				return new WORCAttendanceViewTypeRecord(r.ssENAttendanceViewType);
			}

			public static implicit operator RCAttendanceViewTypeRecord(WORCAttendanceViewTypeRecord w) {
				RCAttendanceViewTypeRecord r = new RCAttendanceViewTypeRecord("");
				if (w != null) {
					r.ssENAttendanceViewType = w;
				}
				return r;
			}

		}

		partial struct ENAttendanceViewTypeEntityRecord {
			public static implicit operator WORCAttendanceViewTypeRecord(ENAttendanceViewTypeEntityRecord r) {
				return new WORCAttendanceViewTypeRecord(r);
			}

			public static implicit operator ENAttendanceViewTypeEntityRecord(WORCAttendanceViewTypeRecord w) {
				ENAttendanceViewTypeEntityRecord r = new ENAttendanceViewTypeEntityRecord("");
				if (w != null) {
					r.ssId = (int) w.varWSId;
					r.ssLabel = ((string) w.varWSLabel ?? "");
					r.ssOrder = (int) w.varWSOrder;
					r.ssIs_Active = (bool) w.varWSIs_Active;
				}
				return r;
			}

		}
	}


	namespace ssCaseConferencing {
		[Serializable()]
		public partial class WORLAttendanceViewTypeRecordList {
			public WORCAttendanceViewTypeRecord[] Array;


			public WORLAttendanceViewTypeRecordList(WORCAttendanceViewTypeRecord[] r) {
				if (r == null)
				Array = new WORCAttendanceViewTypeRecord[0];
				else
				Array = r;
			}
			public WORLAttendanceViewTypeRecordList() {
				Array = new WORCAttendanceViewTypeRecord[0];
			}

			public WORLAttendanceViewTypeRecordList(RLAttendanceViewTypeRecordList rl) {
				rl=(RLAttendanceViewTypeRecordList) rl.Duplicate();
				Array = new WORCAttendanceViewTypeRecord[rl.Length];
				while (!rl.Eof) {
					Array[rl.CurrentRowNumber] = new WORCAttendanceViewTypeRecord(rl.CurrentRec);
					rl.Advance();
				}
			}

		}
	}

	namespace ssCaseConferencing {
		partial class RLAttendanceViewTypeRecordList {
			public static implicit operator RLAttendanceViewTypeRecordList(WORCAttendanceViewTypeRecord[] array) {
				RLAttendanceViewTypeRecordList rl = new RLAttendanceViewTypeRecordList();
				if (array != null) {
					foreach(WORCAttendanceViewTypeRecord val in array) {
						rl.Append((RCAttendanceViewTypeRecord) val);
					}
				}
				return rl;
			}
			public static implicit operator WORCAttendanceViewTypeRecord[](RLAttendanceViewTypeRecordList rl) {
				WORCAttendanceViewTypeRecord[] array = new WORCAttendanceViewTypeRecord[rl == null ? 0: rl.Length];
				for (int i = 0; i < array.Length; i++) {
					array[i] = (RCAttendanceViewTypeRecord) rl.Data[i];
				}
				return array;
			}
		}
	}

	namespace ssCaseConferencing {
		partial class WORLAttendanceViewTypeRecordList {
			public static implicit operator RLAttendanceViewTypeRecordList(WORLAttendanceViewTypeRecordList w) {
				return w.Array;
			}
			public static implicit operator WORLAttendanceViewTypeRecordList(RLAttendanceViewTypeRecordList rl) {
				return new WORLAttendanceViewTypeRecordList(rl);
			}
			public static implicit operator WORCAttendanceViewTypeRecord[](WORLAttendanceViewTypeRecordList w) {
				if (w != null) {
					return w.Array;
				}
				return null;
			}
			public static implicit operator WORLAttendanceViewTypeRecordList(WORCAttendanceViewTypeRecord[] array) {
				return new WORLAttendanceViewTypeRecordList(array);
			}
		}
	}

