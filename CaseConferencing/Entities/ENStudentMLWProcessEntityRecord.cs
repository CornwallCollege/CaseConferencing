/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentMLWProcessEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentMLWProcessEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentMLWProcessEntity.eSpaceId;
	} // ENStudentMLWProcessEntity

	/// <summary>
	/// Entity <code>ENStudentMLWProcessEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentMLWProcess</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentMLWProcess", "xnmkFdmA7kWG24oC0ogrTw", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentMLWProcess", "")]
	[Serializable()]
	public partial struct ENStudentMLWProcessEntityRecord: ISerializable, ITypedRecord<ENStudentMLWProcessEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*jyuw8yN8cUC7zvDUa1jYRQ");
		private static readonly GlobalObjectKey IdStudentId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ijdsfUfhKUqsrjrYHKNXRQ");
		private static readonly GlobalObjectKey IdCurrentStageId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*FBOxmqyww0iI9dyn_GxneA");
		private static readonly GlobalObjectKey IdLearnerS1Note = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*i+EVSyv_DkiGem9YyTr5Zg");
		private static readonly GlobalObjectKey IdLearnerS1NoteOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ziWBso5n00GiFd3Xb3Wy1Q");
		private static readonly GlobalObjectKey IdLearnerS2Note = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*jA6OxWkb4ECdotH9ERTGJg");
		private static readonly GlobalObjectKey IdLearnerS2NoteOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*npziG3jBwU6W_4Vt36jZdw");
		private static readonly GlobalObjectKey IdLearnerS3Note = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*xnkt14UrRk6xtdkURZVgNw");
		private static readonly GlobalObjectKey IdLearnerS3NoteOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*qntYbqSJeEyME_pGEA2yuw");
		private static readonly GlobalObjectKey IdStage1StartOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*gTVeJaCmmkGFSkVwfzTx2A");
		private static readonly GlobalObjectKey IdStage1StartBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*nZYoG7Z3GUaVvjzVsMPdRw");
		private static readonly GlobalObjectKey IdStage2StartOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*AJh8Y7TlwE246XTHxpWknw");
		private static readonly GlobalObjectKey IdStage2StartBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*cYSF+REilUOLTRzo748l5Q");
		private static readonly GlobalObjectKey IdStage3StartOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*7fAxjzNzXUKPhEE3MITzqQ");
		private static readonly GlobalObjectKey IdStage3StartBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*4Uv7whFMqEW67hm_ylPxfA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(15, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("StudentId")]
		private string _ssStudentId;
		public string ssStudentId {
			get {
				return _ssStudentId;
			}
			set {
				if ((_ssStudentId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssStudentId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CURRENTSTAGEID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("CurrentStageId")]
		private string _ssCurrentStageId;
		public string ssCurrentStageId {
			get {
				return _ssCurrentStageId;
			}
			set {
				if ((_ssCurrentStageId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssCurrentStageId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNERS1NOTE", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("LearnerS1Note")]
		private string _ssLearnerS1Note;
		public string ssLearnerS1Note {
			get {
				return _ssLearnerS1Note;
			}
			set {
				if ((_ssLearnerS1Note!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssLearnerS1Note = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNERS1NOTEON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LearnerS1NoteOn")]
		private DateTime _ssLearnerS1NoteOn;
		public DateTime ssLearnerS1NoteOn {
			get {
				return _ssLearnerS1NoteOn;
			}
			set {
				if ((_ssLearnerS1NoteOn!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssLearnerS1NoteOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNERS2NOTE", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("LearnerS2Note")]
		private string _ssLearnerS2Note;
		public string ssLearnerS2Note {
			get {
				return _ssLearnerS2Note;
			}
			set {
				if ((_ssLearnerS2Note!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssLearnerS2Note = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNERS2NOTEON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LearnerS2NoteOn")]
		private DateTime _ssLearnerS2NoteOn;
		public DateTime ssLearnerS2NoteOn {
			get {
				return _ssLearnerS2NoteOn;
			}
			set {
				if ((_ssLearnerS2NoteOn!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssLearnerS2NoteOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNERS3NOTE", 2000, false, false, false)]
		[System.Xml.Serialization.XmlElement("LearnerS3Note")]
		private string _ssLearnerS3Note;
		public string ssLearnerS3Note {
			get {
				return _ssLearnerS3Note;
			}
			set {
				if ((_ssLearnerS3Note!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssLearnerS3Note = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LEARNERS3NOTEON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("LearnerS3NoteOn")]
		private DateTime _ssLearnerS3NoteOn;
		public DateTime ssLearnerS3NoteOn {
			get {
				return _ssLearnerS3NoteOn;
			}
			set {
				if ((_ssLearnerS3NoteOn!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssLearnerS3NoteOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STAGE1STARTON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Stage1StartOn")]
		private DateTime _ssStage1StartOn;
		public DateTime ssStage1StartOn {
			get {
				return _ssStage1StartOn;
			}
			set {
				if ((_ssStage1StartOn!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssStage1StartOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STAGE1STARTBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Stage1StartBy")]
		private int _ssStage1StartBy;
		public int ssStage1StartBy {
			get {
				return _ssStage1StartBy;
			}
			set {
				if ((_ssStage1StartBy!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssStage1StartBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STAGE2STARTON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Stage2StartOn")]
		private DateTime _ssStage2StartOn;
		public DateTime ssStage2StartOn {
			get {
				return _ssStage2StartOn;
			}
			set {
				if ((_ssStage2StartOn!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssStage2StartOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STAGE2STARTBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Stage2StartBy")]
		private int _ssStage2StartBy;
		public int ssStage2StartBy {
			get {
				return _ssStage2StartBy;
			}
			set {
				if ((_ssStage2StartBy!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssStage2StartBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STAGE3STARTON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Stage3StartOn")]
		private DateTime _ssStage3StartOn;
		public DateTime ssStage3StartOn {
			get {
				return _ssStage3StartOn;
			}
			set {
				if ((_ssStage3StartOn!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssStage3StartOn = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STAGE3STARTBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("Stage3StartBy")]
		private int _ssStage3StartBy;
		public int ssStage3StartBy {
			get {
				return _ssStage3StartBy;
			}
			set {
				if ((_ssStage3StartBy!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssStage3StartBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentMLWProcessEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(15, true);
			OptimizedAttributes = new BitArray(15, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssCurrentStageId = "";
			_ssLearnerS1Note = "";
			_ssLearnerS1NoteOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLearnerS2Note = "";
			_ssLearnerS2NoteOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLearnerS3Note = "";
			_ssLearnerS3NoteOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStage1StartOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStage1StartBy = 0;
			_ssStage2StartOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStage2StartBy = 0;
			_ssStage3StartOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStage3StartBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StudentMLWProcess.Id", 0);
			ssStudentId = r.ReadTextEntityReference(index++, "StudentMLWProcess.StudentId", "");
			ssCurrentStageId = r.ReadTextEntityReference(index++, "StudentMLWProcess.CurrentStageId", "");
			ssLearnerS1Note = r.ReadText(index++, "StudentMLWProcess.LearnerS1Note", "");
			ssLearnerS1NoteOn = r.ReadDateTime(index++, "StudentMLWProcess.LearnerS1NoteOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLearnerS2Note = r.ReadText(index++, "StudentMLWProcess.LearnerS2Note", "");
			ssLearnerS2NoteOn = r.ReadDateTime(index++, "StudentMLWProcess.LearnerS2NoteOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLearnerS3Note = r.ReadText(index++, "StudentMLWProcess.LearnerS3Note", "");
			ssLearnerS3NoteOn = r.ReadDateTime(index++, "StudentMLWProcess.LearnerS3NoteOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStage1StartOn = r.ReadDateTime(index++, "StudentMLWProcess.Stage1StartOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStage1StartBy = r.ReadEntityReference(index++, "StudentMLWProcess.Stage1StartBy", 0);
			ssStage2StartOn = r.ReadDateTime(index++, "StudentMLWProcess.Stage2StartOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStage2StartBy = r.ReadEntityReference(index++, "StudentMLWProcess.Stage2StartBy", 0);
			ssStage3StartOn = r.ReadDateTime(index++, "StudentMLWProcess.Stage3StartOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStage3StartBy = r.ReadEntityReference(index++, "StudentMLWProcess.Stage3StartBy", 0);
			ChangedAttributes = new BitArray(15, false);
			OptimizedAttributes = new BitArray(15, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentMLWProcessEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentMLWProcessEntityRecord a, ENStudentMLWProcessEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssStudentId != b.ssStudentId) return false;
			if (a.ssCurrentStageId != b.ssCurrentStageId) return false;
			if (a.ssLearnerS1Note != b.ssLearnerS1Note) return false;
			if (a.ssLearnerS1NoteOn != b.ssLearnerS1NoteOn) return false;
			if (a.ssLearnerS2Note != b.ssLearnerS2Note) return false;
			if (a.ssLearnerS2NoteOn != b.ssLearnerS2NoteOn) return false;
			if (a.ssLearnerS3Note != b.ssLearnerS3Note) return false;
			if (a.ssLearnerS3NoteOn != b.ssLearnerS3NoteOn) return false;
			if (a.ssStage1StartOn != b.ssStage1StartOn) return false;
			if (a.ssStage1StartBy != b.ssStage1StartBy) return false;
			if (a.ssStage2StartOn != b.ssStage2StartOn) return false;
			if (a.ssStage2StartBy != b.ssStage2StartBy) return false;
			if (a.ssStage3StartOn != b.ssStage3StartOn) return false;
			if (a.ssStage3StartBy != b.ssStage3StartBy) return false;
			return true;
		}

		public static bool operator != (ENStudentMLWProcessEntityRecord a, ENStudentMLWProcessEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentMLWProcessEntityRecord)) return false;
			return (this == (ENStudentMLWProcessEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssStudentId.GetHashCode()
				^ ssCurrentStageId.GetHashCode()
				^ ssLearnerS1Note.GetHashCode()
				^ ssLearnerS1NoteOn.GetHashCode()
				^ ssLearnerS2Note.GetHashCode()
				^ ssLearnerS2NoteOn.GetHashCode()
				^ ssLearnerS3Note.GetHashCode()
				^ ssLearnerS3NoteOn.GetHashCode()
				^ ssStage1StartOn.GetHashCode()
				^ ssStage1StartBy.GetHashCode()
				^ ssStage2StartOn.GetHashCode()
				^ ssStage2StartBy.GetHashCode()
				^ ssStage3StartOn.GetHashCode()
				^ ssStage3StartBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentMLWProcessEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(15, true);
			OptimizedAttributes = new BitArray(15, false);
			_ssId = 0;
			_ssStudentId = "";
			_ssCurrentStageId = "";
			_ssLearnerS1Note = "";
			_ssLearnerS1NoteOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLearnerS2Note = "";
			_ssLearnerS2NoteOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLearnerS3Note = "";
			_ssLearnerS3NoteOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStage1StartOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStage1StartBy = 0;
			_ssStage2StartOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStage2StartBy = 0;
			_ssStage3StartOn = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssStage3StartBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssStudentId = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssCurrentStageId = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssLearnerS1Note = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssLearnerS1NoteOn = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssLearnerS2Note = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssLearnerS2NoteOn = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssLearnerS3Note = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssLearnerS3NoteOn = (DateTime) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssStage1StartOn = (DateTime) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssStage1StartBy = (int) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssStage2StartOn = (DateTime) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssStage2StartBy = (int) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssStage3StartOn = (DateTime) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssStage3StartBy = (int) info.GetValue(fields[14] .Name, fields[14] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentMLWProcessEntityRecord Duplicate() {
			ENStudentMLWProcessEntityRecord t;
			t._ssId = this._ssId;
			t._ssStudentId = this._ssStudentId;
			t._ssCurrentStageId = this._ssCurrentStageId;
			t._ssLearnerS1Note = this._ssLearnerS1Note;
			t._ssLearnerS1NoteOn = this._ssLearnerS1NoteOn;
			t._ssLearnerS2Note = this._ssLearnerS2Note;
			t._ssLearnerS2NoteOn = this._ssLearnerS2NoteOn;
			t._ssLearnerS3Note = this._ssLearnerS3Note;
			t._ssLearnerS3NoteOn = this._ssLearnerS3NoteOn;
			t._ssStage1StartOn = this._ssStage1StartOn;
			t._ssStage1StartBy = this._ssStage1StartBy;
			t._ssStage2StartOn = this._ssStage2StartOn;
			t._ssStage2StartBy = this._ssStage2StartBy;
			t._ssStage3StartOn = this._ssStage3StartOn;
			t._ssStage3StartBy = this._ssStage3StartBy;
			t.ChangedAttributes = new BitArray(15);
			t.OptimizedAttributes = new BitArray(15);
			for (int i = 0; i < 15; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentId")) VarValue.AppendAttribute(recordElem, "StudentId", ssStudentId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurrentStageId")) VarValue.AppendAttribute(recordElem, "CurrentStageId", ssCurrentStageId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CurrentStageId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearnerS1Note")) VarValue.AppendAttribute(recordElem, "LearnerS1Note", ssLearnerS1Note, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LearnerS1Note");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearnerS1NoteOn")) VarValue.AppendAttribute(recordElem, "LearnerS1NoteOn", ssLearnerS1NoteOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LearnerS1NoteOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearnerS2Note")) VarValue.AppendAttribute(recordElem, "LearnerS2Note", ssLearnerS2Note, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LearnerS2Note");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearnerS2NoteOn")) VarValue.AppendAttribute(recordElem, "LearnerS2NoteOn", ssLearnerS2NoteOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LearnerS2NoteOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearnerS3Note")) VarValue.AppendAttribute(recordElem, "LearnerS3Note", ssLearnerS3Note, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LearnerS3Note");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearnerS3NoteOn")) VarValue.AppendAttribute(recordElem, "LearnerS3NoteOn", ssLearnerS3NoteOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LearnerS3NoteOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Stage1StartOn")) VarValue.AppendAttribute(recordElem, "Stage1StartOn", ssStage1StartOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Stage1StartOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Stage1StartBy")) VarValue.AppendAttribute(recordElem, "Stage1StartBy", ssStage1StartBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Stage1StartBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Stage2StartOn")) VarValue.AppendAttribute(recordElem, "Stage2StartOn", ssStage2StartOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Stage2StartOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Stage2StartBy")) VarValue.AppendAttribute(recordElem, "Stage2StartBy", ssStage2StartBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Stage2StartBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Stage3StartOn")) VarValue.AppendAttribute(recordElem, "Stage3StartOn", ssStage3StartOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Stage3StartOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Stage3StartBy")) VarValue.AppendAttribute(recordElem, "Stage3StartBy", ssStage3StartBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Stage3StartBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "studentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentId")) variable.Value = ssStudentId; else variable.Optimized = true;
			} else if (head == "currentstageid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurrentStageId")) variable.Value = ssCurrentStageId; else variable.Optimized = true;
			} else if (head == "learners1note") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearnerS1Note")) variable.Value = ssLearnerS1Note; else variable.Optimized = true;
			} else if (head == "learners1noteon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearnerS1NoteOn")) variable.Value = ssLearnerS1NoteOn; else variable.Optimized = true;
			} else if (head == "learners2note") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearnerS2Note")) variable.Value = ssLearnerS2Note; else variable.Optimized = true;
			} else if (head == "learners2noteon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearnerS2NoteOn")) variable.Value = ssLearnerS2NoteOn; else variable.Optimized = true;
			} else if (head == "learners3note") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearnerS3Note")) variable.Value = ssLearnerS3Note; else variable.Optimized = true;
			} else if (head == "learners3noteon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearnerS3NoteOn")) variable.Value = ssLearnerS3NoteOn; else variable.Optimized = true;
			} else if (head == "stage1starton") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Stage1StartOn")) variable.Value = ssStage1StartOn; else variable.Optimized = true;
			} else if (head == "stage1startby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Stage1StartBy")) variable.Value = ssStage1StartBy; else variable.Optimized = true;
			} else if (head == "stage2starton") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Stage2StartOn")) variable.Value = ssStage2StartOn; else variable.Optimized = true;
			} else if (head == "stage2startby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Stage2StartBy")) variable.Value = ssStage2StartBy; else variable.Optimized = true;
			} else if (head == "stage3starton") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Stage3StartOn")) variable.Value = ssStage3StartOn; else variable.Optimized = true;
			} else if (head == "stage3startby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Stage3StartBy")) variable.Value = ssStage3StartBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdCurrentStageId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdLearnerS1Note)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdLearnerS1NoteOn)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdLearnerS2Note)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdLearnerS2NoteOn)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdLearnerS3Note)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdLearnerS3NoteOn)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdStage1StartOn)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdStage1StartBy)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdStage2StartOn)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdStage2StartBy)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdStage3StartOn)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdStage3StartBy)) {
				return ChangedAttributes[14];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdStudentId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdCurrentStageId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdLearnerS1Note)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdLearnerS1NoteOn)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdLearnerS2Note)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdLearnerS2NoteOn)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdLearnerS3Note)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdLearnerS3NoteOn)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdStage1StartOn)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdStage1StartBy)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdStage2StartOn)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdStage2StartBy)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdStage3StartOn)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdStage3StartBy)) {
				return OptimizedAttributes[14];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdStudentId) {
				return ssStudentId;
			} else if (key == IdCurrentStageId) {
				return ssCurrentStageId;
			} else if (key == IdLearnerS1Note) {
				return ssLearnerS1Note;
			} else if (key == IdLearnerS1NoteOn) {
				return ssLearnerS1NoteOn;
			} else if (key == IdLearnerS2Note) {
				return ssLearnerS2Note;
			} else if (key == IdLearnerS2NoteOn) {
				return ssLearnerS2NoteOn;
			} else if (key == IdLearnerS3Note) {
				return ssLearnerS3Note;
			} else if (key == IdLearnerS3NoteOn) {
				return ssLearnerS3NoteOn;
			} else if (key == IdStage1StartOn) {
				return ssStage1StartOn;
			} else if (key == IdStage1StartBy) {
				return ssStage1StartBy;
			} else if (key == IdStage2StartOn) {
				return ssStage2StartOn;
			} else if (key == IdStage2StartBy) {
				return ssStage2StartBy;
			} else if (key == IdStage3StartOn) {
				return ssStage3StartOn;
			} else if (key == IdStage3StartBy) {
				return ssStage3StartBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(15);
			OptimizedAttributes = new BitArray(15);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssStudentId = (string) other.AttributeGet(IdStudentId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdStudentId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdStudentId);
			ssCurrentStageId = (string) other.AttributeGet(IdCurrentStageId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdCurrentStageId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdCurrentStageId);
			ssLearnerS1Note = (string) other.AttributeGet(IdLearnerS1Note);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdLearnerS1Note);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdLearnerS1Note);
			ssLearnerS1NoteOn = (DateTime) other.AttributeGet(IdLearnerS1NoteOn);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdLearnerS1NoteOn);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdLearnerS1NoteOn);
			ssLearnerS2Note = (string) other.AttributeGet(IdLearnerS2Note);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdLearnerS2Note);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdLearnerS2Note);
			ssLearnerS2NoteOn = (DateTime) other.AttributeGet(IdLearnerS2NoteOn);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdLearnerS2NoteOn);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdLearnerS2NoteOn);
			ssLearnerS3Note = (string) other.AttributeGet(IdLearnerS3Note);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdLearnerS3Note);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdLearnerS3Note);
			ssLearnerS3NoteOn = (DateTime) other.AttributeGet(IdLearnerS3NoteOn);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdLearnerS3NoteOn);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdLearnerS3NoteOn);
			ssStage1StartOn = (DateTime) other.AttributeGet(IdStage1StartOn);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdStage1StartOn);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdStage1StartOn);
			ssStage1StartBy = (int) other.AttributeGet(IdStage1StartBy);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdStage1StartBy);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdStage1StartBy);
			ssStage2StartOn = (DateTime) other.AttributeGet(IdStage2StartOn);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdStage2StartOn);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdStage2StartOn);
			ssStage2StartBy = (int) other.AttributeGet(IdStage2StartBy);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdStage2StartBy);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdStage2StartBy);
			ssStage3StartOn = (DateTime) other.AttributeGet(IdStage3StartOn);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdStage3StartOn);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdStage3StartOn);
			ssStage3StartBy = (int) other.AttributeGet(IdStage3StartBy);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdStage3StartBy);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdStage3StartBy);
		}
	} // ENStudentMLWProcessEntityRecord
	/// <summary>
	/// Structure <code>RCStudentMLWProcessRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentMLWProcessRecord: ISerializable, ITypedRecord<RCStudentMLWProcessRecord> {
		private static readonly GlobalObjectKey IdStudentMLWProcess = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*3+eVxhsd5S23zvvuOTXhCw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentMLWProcess")]
		public ENStudentMLWProcessEntityRecord ssENStudentMLWProcess;


		public static implicit operator ENStudentMLWProcessEntityRecord(RCStudentMLWProcessRecord r) {
			return r.ssENStudentMLWProcess;
		}

		public static implicit operator RCStudentMLWProcessRecord(ENStudentMLWProcessEntityRecord r) {
			RCStudentMLWProcessRecord res = new RCStudentMLWProcessRecord(null);
			res.ssENStudentMLWProcess = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentMLWProcess.ChangedAttributes = value;
			}
			get {
				return ssENStudentMLWProcess.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentMLWProcessRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentMLWProcess = new ENStudentMLWProcessEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(15, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentMLWProcess.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentMLWProcess.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentMLWProcess.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentMLWProcess.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentMLWProcessRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentMLWProcessRecord a, RCStudentMLWProcessRecord b) {
			if (a.ssENStudentMLWProcess != b.ssENStudentMLWProcess) return false;
			return true;
		}

		public static bool operator != (RCStudentMLWProcessRecord a, RCStudentMLWProcessRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentMLWProcessRecord)) return false;
			return (this == (RCStudentMLWProcessRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentMLWProcess.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentMLWProcessRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentMLWProcess = new ENStudentMLWProcessEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentMLWProcess = (ENStudentMLWProcessEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentMLWProcess.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentMLWProcess.InternalRecursiveSave();
		}


		public RCStudentMLWProcessRecord Duplicate() {
			RCStudentMLWProcessRecord t;
			t.ssENStudentMLWProcess = (ENStudentMLWProcessEntityRecord) this.ssENStudentMLWProcess.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentMLWProcess.ToXml(this, recordElem, "StudentMLWProcess", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentmlwprocess") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentMLWProcess")) variable.Value = ssENStudentMLWProcess; else variable.Optimized = true;
				variable.SetFieldName("studentmlwprocess");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentMLWProcess.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentMLWProcess.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentMLWProcess) {
				return ssENStudentMLWProcess;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentMLWProcess.FillFromOther((IRecord) other.AttributeGet(IdStudentMLWProcess));
		}
	} // RCStudentMLWProcessRecord
	/// <summary>
	/// RecordList type <code>RLStudentMLWProcessRecordList</code> that represents a record list of
	///  <code>StudentMLWProcess</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentMLWProcessRecordList: GenericRecordList<RCStudentMLWProcessRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentMLWProcessRecord GetElementDefaultValue() {
			return new RCStudentMLWProcessRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentMLWProcessRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentMLWProcessRecordList recordlist, Func<RCStudentMLWProcessRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentMLWProcessRecordList ToList<T>(T[] array, Func <T, RCStudentMLWProcessRecord> converter) {
			RLStudentMLWProcessRecordList result = new RLStudentMLWProcessRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentMLWProcessRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentMLWProcessRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentMLWProcessRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentMLWProcessRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(15, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentMLWProcessRecord> NewList() {
			return new RLStudentMLWProcessRecordList();
		}


	} // RLStudentMLWProcessRecordList

	/// <summary>
	/// RecordList type <code>RLStudentMLWProcessList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, UserIdentifier, UserIdentifier, Text, Text, Text
	/// , DateTime, DateTime, DateTime, DateTime, DateTime, DateTime, Integer, MLWStagesIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentMLWProcessList: GenericRecordList<ENStudentMLWProcessEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentMLWProcessEntityRecord GetElementDefaultValue() {
			return new ENStudentMLWProcessEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentMLWProcessEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentMLWProcessList recordlist, Func<ENStudentMLWProcessEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentMLWProcessList ToList<T>(T[] array, Func <T, ENStudentMLWProcessEntityRecord> converter) {
			RLStudentMLWProcessList result = new RLStudentMLWProcessList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentMLWProcessList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentMLWProcessList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentMLWProcessList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentMLWProcessList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentMLWProcessEntityRecord> NewList() {
			return new RLStudentMLWProcessList();
		}


	} // RLStudentMLWProcessList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentMLWProcess
		/// </summary>

		public static void CreateStudentMLWProcess(HeContext heContext, RCStudentMLWProcessRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessEntity.eSpaceId;
				ENStudentMLWProcessEntityRecord ssENStudentMLWProcess = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentMLWProcessEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTID]" +
					 ", [CURRENTSTAGEID]" +
					 ", [LEARNERS1NOTE]" +
					 ", [LEARNERS1NOTEON]" +
					 ", [LEARNERS2NOTE]" +
					 ", [LEARNERS2NOTEON]" +
					 ", [LEARNERS3NOTE]" +
					 ", [LEARNERS3NOTEON]" +
					 ", [STAGE1STARTON]" +
					 ", [STAGE1STARTBY]" +
					 ", [STAGE2STARTON]" +
					 ", [STAGE2STARTBY]" +
					 ", [STAGE3STARTON]" +
					 ", [STAGE3STARTBY]" +
					 " ) VALUES (" +
					 " @ssStudentId" +
					 ", @ssCurrentStageId" +
					 ", @ssLearnerS1Note" +
					 ", @ssLearnerS1NoteOn" +
					 ", @ssLearnerS2Note" +
					 ", @ssLearnerS2NoteOn" +
					 ", @ssLearnerS3Note" +
					 ", @ssLearnerS3NoteOn" +
					 ", @ssStage1StartOn" +
					 ", @ssStage1StartBy" +
					 ", @ssStage2StartOn" +
					 ", @ssStage2StartBy" +
					 ", @ssStage3StartOn" +
					 ", @ssStage3StartBy" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENStudentMLWProcess.ssStudentId);
					if ((ssENStudentMLWProcess.ssCurrentStageId== "")) {
						insertSqlCmd.CreateParameter("@ssCurrentStageId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCurrentStageId", DbType.String, ssENStudentMLWProcess.ssCurrentStageId);
					}
					insertSqlCmd.CreateParameter("@ssLearnerS1Note", DbType.String, ssENStudentMLWProcess.ssLearnerS1Note);
					insertSqlCmd.CreateParameter("@ssLearnerS1NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS1NoteOn);
					insertSqlCmd.CreateParameter("@ssLearnerS2Note", DbType.String, ssENStudentMLWProcess.ssLearnerS2Note);
					insertSqlCmd.CreateParameter("@ssLearnerS2NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS2NoteOn);
					insertSqlCmd.CreateParameter("@ssLearnerS3Note", DbType.String, ssENStudentMLWProcess.ssLearnerS3Note);
					insertSqlCmd.CreateParameter("@ssLearnerS3NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS3NoteOn);
					insertSqlCmd.CreateParameter("@ssStage1StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage1StartOn);
					if ((ssENStudentMLWProcess.ssStage1StartBy==0)) {
						insertSqlCmd.CreateParameter("@ssStage1StartBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStage1StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage1StartBy);
					}
					insertSqlCmd.CreateParameter("@ssStage2StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage2StartOn);
					if ((ssENStudentMLWProcess.ssStage2StartBy==0)) {
						insertSqlCmd.CreateParameter("@ssStage2StartBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStage2StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage2StartBy);
					}
					insertSqlCmd.CreateParameter("@ssStage3StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage3StartOn);
					if ((ssENStudentMLWProcess.ssStage3StartBy==0)) {
						insertSqlCmd.CreateParameter("@ssStage3StartBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssStage3StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage3StartBy);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStudentMLWProcess", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentMLWProcess
		/// </summary>

		public static void CreateOrUpdateStudentMLWProcess(HeContext heContext, BitArray usedFields, RCStudentMLWProcessRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessEntity.eSpaceId;
				ENStudentMLWProcessEntityRecord ssENStudentMLWProcess = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(15, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentMLWProcessEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTSTAGEID] = @ssCurrentStageId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS1NOTE] = @ssLearnerS1Note"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS1NOTEON] = @ssLearnerS1NoteOn"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS2NOTE] = @ssLearnerS2Note"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS2NOTEON] = @ssLearnerS2NoteOn"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS3NOTE] = @ssLearnerS3Note"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS3NOTEON] = @ssLearnerS3NoteOn"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE1STARTON] = @ssStage1StartOn"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE1STARTBY] = @ssStage1StartBy"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE2STARTON] = @ssStage2StartOn"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE2STARTBY] = @ssStage2StartBy"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE3STARTON] = @ssStage3StartOn"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE3STARTBY] = @ssStage3StartBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentMLWProcessssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENStudentMLWProcess.ssStudentId);
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStudentMLWProcess.ssCurrentStageId== "")) {
							sqlCmd.CreateParameter("@ssCurrentStageId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCurrentStageId", DbType.String, ssENStudentMLWProcess.ssCurrentStageId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssLearnerS1Note", DbType.String, ssENStudentMLWProcess.ssLearnerS1Note);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssLearnerS1NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS1NoteOn);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssLearnerS2Note", DbType.String, ssENStudentMLWProcess.ssLearnerS2Note);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssLearnerS2NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS2NoteOn);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssLearnerS3Note", DbType.String, ssENStudentMLWProcess.ssLearnerS3Note);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssLearnerS3NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS3NoteOn);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssStage1StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage1StartOn);
						counter++;
					}
					if (usedFields[10]) {
						if ((ssENStudentMLWProcess.ssStage1StartBy==0)) {
							sqlCmd.CreateParameter("@ssStage1StartBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStage1StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage1StartBy);
						}
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssStage2StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage2StartOn);
						counter++;
					}
					if (usedFields[12]) {
						if ((ssENStudentMLWProcess.ssStage2StartBy==0)) {
							sqlCmd.CreateParameter("@ssStage2StartBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStage2StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage2StartBy);
						}
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssStage3StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage3StartOn);
						counter++;
					}
					if (usedFields[14]) {
						if ((ssENStudentMLWProcess.ssStage3StartBy==0)) {
							sqlCmd.CreateParameter("@ssStage3StartBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStage3StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage3StartBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[LEARNERS1NOTEON] = [LEARNERS1NOTEON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentMLWProcessssId", DbType.Int32, ssENStudentMLWProcess.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentMLWProcess (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentMLWProcessEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTID]" +
						 ", [CURRENTSTAGEID]" +
						 ", [LEARNERS1NOTE]" +
						 ", [LEARNERS1NOTEON]" +
						 ", [LEARNERS2NOTE]" +
						 ", [LEARNERS2NOTEON]" +
						 ", [LEARNERS3NOTE]" +
						 ", [LEARNERS3NOTEON]" +
						 ", [STAGE1STARTON]" +
						 ", [STAGE1STARTBY]" +
						 ", [STAGE2STARTON]" +
						 ", [STAGE2STARTBY]" +
						 ", [STAGE3STARTON]" +
						 ", [STAGE3STARTBY]" +
						 " ) VALUES (" +
						 " @ssStudentId" +
						 ", @ssCurrentStageId" +
						 ", @ssLearnerS1Note" +
						 ", @ssLearnerS1NoteOn" +
						 ", @ssLearnerS2Note" +
						 ", @ssLearnerS2NoteOn" +
						 ", @ssLearnerS3Note" +
						 ", @ssLearnerS3NoteOn" +
						 ", @ssStage1StartOn" +
						 ", @ssStage1StartBy" +
						 ", @ssStage2StartOn" +
						 ", @ssStage2StartBy" +
						 ", @ssStage3StartOn" +
						 ", @ssStage3StartBy" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENStudentMLWProcess.ssStudentId);
						if ((ssENStudentMLWProcess.ssCurrentStageId== "")) {
							insertSqlCmd.CreateParameter("@ssCurrentStageId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssCurrentStageId", DbType.String, ssENStudentMLWProcess.ssCurrentStageId);
						}
						insertSqlCmd.CreateParameter("@ssLearnerS1Note", DbType.String, ssENStudentMLWProcess.ssLearnerS1Note);
						insertSqlCmd.CreateParameter("@ssLearnerS1NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS1NoteOn);
						insertSqlCmd.CreateParameter("@ssLearnerS2Note", DbType.String, ssENStudentMLWProcess.ssLearnerS2Note);
						insertSqlCmd.CreateParameter("@ssLearnerS2NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS2NoteOn);
						insertSqlCmd.CreateParameter("@ssLearnerS3Note", DbType.String, ssENStudentMLWProcess.ssLearnerS3Note);
						insertSqlCmd.CreateParameter("@ssLearnerS3NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS3NoteOn);
						insertSqlCmd.CreateParameter("@ssStage1StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage1StartOn);
						if ((ssENStudentMLWProcess.ssStage1StartBy==0)) {
							insertSqlCmd.CreateParameter("@ssStage1StartBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStage1StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage1StartBy);
						}
						insertSqlCmd.CreateParameter("@ssStage2StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage2StartOn);
						if ((ssENStudentMLWProcess.ssStage2StartBy==0)) {
							insertSqlCmd.CreateParameter("@ssStage2StartBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStage2StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage2StartBy);
						}
						insertSqlCmd.CreateParameter("@ssStage3StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage3StartOn);
						if ((ssENStudentMLWProcess.ssStage3StartBy==0)) {
							insertSqlCmd.CreateParameter("@ssStage3StartBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssStage3StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage3StartBy);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStudentMLWProcess", true), typeof(int));
					} else {
						outParamId = ssENStudentMLWProcess.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentMLWProcess
		/// </summary>

		public static void DeleteStudentMLWProcess(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentMLWProcessEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentMLWProcess", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentMLWProcess
		/// </summary>

		public static void GetStudentMLWProcess(HeContext heContext, int inParamId, out RCStudentMLWProcessRecord outParamRecord) {
			outParamRecord = new RCStudentMLWProcessRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [CURRENTSTAGEID]" +
					 ", [LEARNERS1NOTE]" +
					 ", [LEARNERS1NOTEON]" +
					 ", [LEARNERS2NOTE]" +
					 ", [LEARNERS2NOTEON]" +
					 ", [LEARNERS3NOTE]" +
					 ", [LEARNERS3NOTEON]" +
					 ", [STAGE1STARTON]" +
					 ", [STAGE1STARTBY]" +
					 ", [STAGE2STARTON]" +
					 ", [STAGE2STARTBY]" +
					 ", [STAGE3STARTON]" +
					 ", [STAGE3STARTBY]" +
					 " FROM " + ENStudentMLWProcessEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentMLWProcess", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(15, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentMLWProcessEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentMLWProcessForUpdate
		/// </summary>

		public static void GetStudentMLWProcessForUpdate(HeContext heContext, int inParamId, out RCStudentMLWProcessRecord outParamRecord) {
			outParamRecord = new RCStudentMLWProcessRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [STUDENTID]" +
					 ", [CURRENTSTAGEID]" +
					 ", [LEARNERS1NOTE]" +
					 ", [LEARNERS1NOTEON]" +
					 ", [LEARNERS2NOTE]" +
					 ", [LEARNERS2NOTEON]" +
					 ", [LEARNERS3NOTE]" +
					 ", [LEARNERS3NOTEON]" +
					 ", [STAGE1STARTON]" +
					 ", [STAGE1STARTBY]" +
					 ", [STAGE2STARTON]" +
					 ", [STAGE2STARTBY]" +
					 ", [STAGE3STARTON]" +
					 ", [STAGE3STARTBY]" +
					 "FROM " + ENStudentMLWProcessEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentMLWProcessForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(15, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentMLWProcessEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentMLWProcess
		/// </summary>

		public static void UpdateStudentMLWProcess(HeContext heContext, BitArray usedFields, RCStudentMLWProcessRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentMLWProcessEntity.eSpaceId;
				ENStudentMLWProcessEntityRecord ssENStudentMLWProcess = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(15, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentMLWProcessEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STUDENTID] = @ssStudentId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CURRENTSTAGEID] = @ssCurrentStageId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS1NOTE] = @ssLearnerS1Note"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS1NOTEON] = @ssLearnerS1NoteOn"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS2NOTE] = @ssLearnerS2Note"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS2NOTEON] = @ssLearnerS2NoteOn"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS3NOTE] = @ssLearnerS3Note"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LEARNERS3NOTEON] = @ssLearnerS3NoteOn"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE1STARTON] = @ssStage1StartOn"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE1STARTBY] = @ssStage1StartBy"): parameters);
					parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE2STARTON] = @ssStage2StartOn"): parameters);
					parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE2STARTBY] = @ssStage2StartBy"): parameters);
					parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE3STARTON] = @ssStage3StartOn"): parameters);
					parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[STAGE3STARTBY] = @ssStage3StartBy"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStudentMLWProcessssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						sqlCmd.CreateParameter("@ssStudentId", DbType.String, ssENStudentMLWProcess.ssStudentId);
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStudentMLWProcess.ssCurrentStageId== "")) {
							sqlCmd.CreateParameter("@ssCurrentStageId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssCurrentStageId", DbType.String, ssENStudentMLWProcess.ssCurrentStageId);
						}
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssLearnerS1Note", DbType.String, ssENStudentMLWProcess.ssLearnerS1Note);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssLearnerS1NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS1NoteOn);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssLearnerS2Note", DbType.String, ssENStudentMLWProcess.ssLearnerS2Note);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssLearnerS2NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS2NoteOn);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssLearnerS3Note", DbType.String, ssENStudentMLWProcess.ssLearnerS3Note);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssLearnerS3NoteOn", DbType.DateTime, ssENStudentMLWProcess.ssLearnerS3NoteOn);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssStage1StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage1StartOn);
						counter++;
					}
					if (usedFields[10]) {
						if ((ssENStudentMLWProcess.ssStage1StartBy==0)) {
							sqlCmd.CreateParameter("@ssStage1StartBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStage1StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage1StartBy);
						}
						counter++;
					}
					if (usedFields[11]) {
						sqlCmd.CreateParameter("@ssStage2StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage2StartOn);
						counter++;
					}
					if (usedFields[12]) {
						if ((ssENStudentMLWProcess.ssStage2StartBy==0)) {
							sqlCmd.CreateParameter("@ssStage2StartBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStage2StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage2StartBy);
						}
						counter++;
					}
					if (usedFields[13]) {
						sqlCmd.CreateParameter("@ssStage3StartOn", DbType.DateTime, ssENStudentMLWProcess.ssStage3StartOn);
						counter++;
					}
					if (usedFields[14]) {
						if ((ssENStudentMLWProcess.ssStage3StartBy==0)) {
							sqlCmd.CreateParameter("@ssStage3StartBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssStage3StartBy", DbType.Int32, ssENStudentMLWProcess.ssStage3StartBy);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[LEARNERS1NOTEON] = [LEARNERS1NOTEON]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentMLWProcessssId", DbType.Int32, ssENStudentMLWProcess.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentMLWProcess", true) <= 0)
					throw new DataBaseException(ENStudentMLWProcessEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentMLWProcess.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentMLWProcess")]
	public class WORCStudentMLWProcessRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("StudentId")]
		public string varWSStudentId;

		[System.Xml.Serialization.XmlElement("CurrentStageId")]
		public string varWSCurrentStageId;

		[System.Xml.Serialization.XmlElement("LearnerS1Note")]
		public string varWSLearnerS1Note;

		[System.Xml.Serialization.XmlElement("LearnerS1NoteOn")]
		public DateTime varWSLearnerS1NoteOn;

		[System.Xml.Serialization.XmlElement("LearnerS2Note")]
		public string varWSLearnerS2Note;

		[System.Xml.Serialization.XmlElement("LearnerS2NoteOn")]
		public DateTime varWSLearnerS2NoteOn;

		[System.Xml.Serialization.XmlElement("LearnerS3Note")]
		public string varWSLearnerS3Note;

		[System.Xml.Serialization.XmlElement("LearnerS3NoteOn")]
		public DateTime varWSLearnerS3NoteOn;

		[System.Xml.Serialization.XmlElement("Stage1StartOn")]
		public DateTime varWSStage1StartOn;

		[System.Xml.Serialization.XmlElement("Stage1StartBy")]
		public int varWSStage1StartBy;

		[System.Xml.Serialization.XmlElement("Stage2StartOn")]
		public DateTime varWSStage2StartOn;

		[System.Xml.Serialization.XmlElement("Stage2StartBy")]
		public int varWSStage2StartBy;

		[System.Xml.Serialization.XmlElement("Stage3StartOn")]
		public DateTime varWSStage3StartOn;

		[System.Xml.Serialization.XmlElement("Stage3StartBy")]
		public int varWSStage3StartBy;

		public WORCStudentMLWProcessRecord() {
			varWSId = (int) 0;
			varWSStudentId = (string) "";
			varWSCurrentStageId = (string) "";
			varWSLearnerS1Note = (string) "";
			varWSLearnerS1NoteOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLearnerS2Note = (string) "";
			varWSLearnerS2NoteOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLearnerS3Note = (string) "";
			varWSLearnerS3NoteOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStage1StartOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStage1StartBy = (int) 0;
			varWSStage2StartOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStage2StartBy = (int) 0;
			varWSStage3StartOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStage3StartBy = (int) 0;
		}

		public WORCStudentMLWProcessRecord(ENStudentMLWProcessEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSStudentId = BaseAppUtils.RemoveControlChars(r.ssStudentId);
			varWSCurrentStageId = BaseAppUtils.RemoveControlChars(r.ssCurrentStageId);
			varWSLearnerS1Note = BaseAppUtils.RemoveControlChars(r.ssLearnerS1Note);
			varWSLearnerS1NoteOn = (DateTime) r.ssLearnerS1NoteOn;
			varWSLearnerS2Note = BaseAppUtils.RemoveControlChars(r.ssLearnerS2Note);
			varWSLearnerS2NoteOn = (DateTime) r.ssLearnerS2NoteOn;
			varWSLearnerS3Note = BaseAppUtils.RemoveControlChars(r.ssLearnerS3Note);
			varWSLearnerS3NoteOn = (DateTime) r.ssLearnerS3NoteOn;
			varWSStage1StartOn = (DateTime) r.ssStage1StartOn;
			varWSStage1StartBy = (int) r.ssStage1StartBy;
			varWSStage2StartOn = (DateTime) r.ssStage2StartOn;
			varWSStage2StartBy = (int) r.ssStage2StartBy;
			varWSStage3StartOn = (DateTime) r.ssStage3StartOn;
			varWSStage3StartBy = (int) r.ssStage3StartBy;
		}

		public static RLStudentMLWProcessList ToRecordList(WORCStudentMLWProcessRecord[] array) {
			RLStudentMLWProcessList rl = new RLStudentMLWProcessList();
			if (array != null) {
				foreach(WORCStudentMLWProcessRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentMLWProcessRecord[] FromRecordList(RLStudentMLWProcessList rl) {
			WORCStudentMLWProcessRecord[] array = new WORCStudentMLWProcessRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentMLWProcessRecord {
		public static implicit operator WORCStudentMLWProcessRecord(RCStudentMLWProcessRecord r) {
			return new WORCStudentMLWProcessRecord(r.ssENStudentMLWProcess);
		}

		public static implicit operator RCStudentMLWProcessRecord(WORCStudentMLWProcessRecord w) {
			RCStudentMLWProcessRecord r = new RCStudentMLWProcessRecord("");
			if (w != null) {
				r.ssENStudentMLWProcess = w;
			}
			return r;
		}

	}

	partial struct ENStudentMLWProcessEntityRecord {
		public static implicit operator WORCStudentMLWProcessRecord(ENStudentMLWProcessEntityRecord r) {
			return new WORCStudentMLWProcessRecord(r);
		}

		public static implicit operator ENStudentMLWProcessEntityRecord(WORCStudentMLWProcessRecord w) {
			ENStudentMLWProcessEntityRecord r = new ENStudentMLWProcessEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssStudentId = (string) w.varWSStudentId;
				r.ssCurrentStageId = (string) w.varWSCurrentStageId;
				r.ssLearnerS1Note = ((string) w.varWSLearnerS1Note ?? "");
				r.ssLearnerS1NoteOn = (DateTime) w.varWSLearnerS1NoteOn;
				r.ssLearnerS2Note = ((string) w.varWSLearnerS2Note ?? "");
				r.ssLearnerS2NoteOn = (DateTime) w.varWSLearnerS2NoteOn;
				r.ssLearnerS3Note = ((string) w.varWSLearnerS3Note ?? "");
				r.ssLearnerS3NoteOn = (DateTime) w.varWSLearnerS3NoteOn;
				r.ssStage1StartOn = (DateTime) w.varWSStage1StartOn;
				r.ssStage1StartBy = (int) w.varWSStage1StartBy;
				r.ssStage2StartOn = (DateTime) w.varWSStage2StartOn;
				r.ssStage2StartBy = (int) w.varWSStage2StartBy;
				r.ssStage3StartOn = (DateTime) w.varWSStage3StartOn;
				r.ssStage3StartBy = (int) w.varWSStage3StartBy;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentMLWProcessRecordList {
		public WORCStudentMLWProcessRecord[] Array;


		public WORLStudentMLWProcessRecordList(WORCStudentMLWProcessRecord[] r) {
			if (r == null)
			Array = new WORCStudentMLWProcessRecord[0];
			else
			Array = r;
		}
		public WORLStudentMLWProcessRecordList() {
			Array = new WORCStudentMLWProcessRecord[0];
		}

		public WORLStudentMLWProcessRecordList(RLStudentMLWProcessRecordList rl) {
			rl=(RLStudentMLWProcessRecordList) rl.Duplicate();
			Array = new WORCStudentMLWProcessRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentMLWProcessRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentMLWProcessRecordList {
		public static implicit operator RLStudentMLWProcessRecordList(WORCStudentMLWProcessRecord[] array) {
			RLStudentMLWProcessRecordList rl = new RLStudentMLWProcessRecordList();
			if (array != null) {
				foreach(WORCStudentMLWProcessRecord val in array) {
					rl.Append((RCStudentMLWProcessRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentMLWProcessRecord[](RLStudentMLWProcessRecordList rl) {
			WORCStudentMLWProcessRecord[] array = new WORCStudentMLWProcessRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentMLWProcessRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentMLWProcessRecordList {
		public static implicit operator RLStudentMLWProcessRecordList(WORLStudentMLWProcessRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentMLWProcessRecordList(RLStudentMLWProcessRecordList rl) {
			return new WORLStudentMLWProcessRecordList(rl);
		}
		public static implicit operator WORCStudentMLWProcessRecord[](WORLStudentMLWProcessRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentMLWProcessRecordList(WORCStudentMLWProcessRecord[] array) {
			return new WORLStudentMLWProcessRecordList(array);
		}
	}
}

