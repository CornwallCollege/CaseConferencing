/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStaffCourseFavouriteEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStaffCourseFavouriteEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStaffCourseFavouriteEntity.eSpaceId;
	} // ENStaffCourseFavouriteEntity

	/// <summary>
	/// Entity <code>ENStaffCourseFavouriteEntityRecord</code> that represents the Service Studio entity
	///  <code>StaffCourseFavourite</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StaffCourseFavourite", "cUoj0GVv7km6v1gNHBYuig", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StaffCourseFavourite", "")]
	[Serializable()]
	public partial struct ENStaffCourseFavouriteEntityRecord: ISerializable, ITypedRecord<ENStaffCourseFavouriteEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*k6k53Sz5nEWC09ULfMm5dw");
		private static readonly GlobalObjectKey IdGroupId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*ozaodn8dkEyj5ghF7ogLVA");
		private static readonly GlobalObjectKey IdUserId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*4ozH3KIB40i64aH0FZKRfA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("GROUPID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("GroupId")]
		private int _ssGroupId;
		public int ssGroupId {
			get {
				return _ssGroupId;
			}
			set {
				if ((_ssGroupId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssGroupId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USERID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("UserId")]
		private int _ssUserId;
		public int ssUserId {
			get {
				return _ssUserId;
			}
			set {
				if ((_ssUserId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssUserId = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStaffCourseFavouriteEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssGroupId = 0;
			_ssUserId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "StaffCourseFavourite.Id", 0);
			ssGroupId = r.ReadEntityReference(index++, "StaffCourseFavourite.GroupId", 0);
			ssUserId = r.ReadEntityReference(index++, "StaffCourseFavourite.UserId", 0);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStaffCourseFavouriteEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStaffCourseFavouriteEntityRecord a, ENStaffCourseFavouriteEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssGroupId != b.ssGroupId) return false;
			if (a.ssUserId != b.ssUserId) return false;
			return true;
		}

		public static bool operator != (ENStaffCourseFavouriteEntityRecord a, ENStaffCourseFavouriteEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStaffCourseFavouriteEntityRecord)) return false;
			return (this == (ENStaffCourseFavouriteEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssGroupId.GetHashCode()
				^ ssUserId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStaffCourseFavouriteEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssGroupId = 0;
			_ssUserId = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssGroupId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssUserId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStaffCourseFavouriteEntityRecord Duplicate() {
			ENStaffCourseFavouriteEntityRecord t;
			t._ssId = this._ssId;
			t._ssGroupId = this._ssGroupId;
			t._ssUserId = this._ssUserId;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupId")) VarValue.AppendAttribute(recordElem, "GroupId", ssGroupId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "GroupId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserId")) VarValue.AppendAttribute(recordElem, "UserId", ssUserId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "UserId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "groupid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupId")) variable.Value = ssGroupId; else variable.Optimized = true;
			} else if (head == "userid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserId")) variable.Value = ssUserId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdGroupId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdUserId)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdGroupId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdUserId)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdGroupId) {
				return ssGroupId;
			} else if (key == IdUserId) {
				return ssUserId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssGroupId = (int) other.AttributeGet(IdGroupId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdGroupId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdGroupId);
			ssUserId = (int) other.AttributeGet(IdUserId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdUserId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdUserId);
		}
	} // ENStaffCourseFavouriteEntityRecord
	/// <summary>
	/// Structure <code>RCStaffCourseFavouriteRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffCourseFavouriteRecord: ISerializable, ITypedRecord<RCStaffCourseFavouriteRecord> {
		private static readonly GlobalObjectKey IdStaffCourseFavourite = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*n7iwQiLcEqnR7YBOLpeK1A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StaffCourseFavourite")]
		public ENStaffCourseFavouriteEntityRecord ssENStaffCourseFavourite;


		public static implicit operator ENStaffCourseFavouriteEntityRecord(RCStaffCourseFavouriteRecord r) {
			return r.ssENStaffCourseFavourite;
		}

		public static implicit operator RCStaffCourseFavouriteRecord(ENStaffCourseFavouriteEntityRecord r) {
			RCStaffCourseFavouriteRecord res = new RCStaffCourseFavouriteRecord(null);
			res.ssENStaffCourseFavourite = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStaffCourseFavourite.ChangedAttributes = value;
			}
			get {
				return ssENStaffCourseFavourite.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStaffCourseFavouriteRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStaffCourseFavourite = new ENStaffCourseFavouriteEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStaffCourseFavourite.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStaffCourseFavourite.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStaffCourseFavourite.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStaffCourseFavourite.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffCourseFavouriteRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffCourseFavouriteRecord a, RCStaffCourseFavouriteRecord b) {
			if (a.ssENStaffCourseFavourite != b.ssENStaffCourseFavourite) return false;
			return true;
		}

		public static bool operator != (RCStaffCourseFavouriteRecord a, RCStaffCourseFavouriteRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffCourseFavouriteRecord)) return false;
			return (this == (RCStaffCourseFavouriteRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStaffCourseFavourite.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffCourseFavouriteRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStaffCourseFavourite = new ENStaffCourseFavouriteEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStaffCourseFavourite = (ENStaffCourseFavouriteEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStaffCourseFavourite.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStaffCourseFavourite.InternalRecursiveSave();
		}


		public RCStaffCourseFavouriteRecord Duplicate() {
			RCStaffCourseFavouriteRecord t;
			t.ssENStaffCourseFavourite = (ENStaffCourseFavouriteEntityRecord) this.ssENStaffCourseFavourite.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStaffCourseFavourite.ToXml(this, recordElem, "StaffCourseFavourite", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staffcoursefavourite") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffCourseFavourite")) variable.Value = ssENStaffCourseFavourite; else variable.Optimized = true;
				variable.SetFieldName("staffcoursefavourite");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStaffCourseFavourite.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStaffCourseFavourite.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaffCourseFavourite) {
				return ssENStaffCourseFavourite;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStaffCourseFavourite.FillFromOther((IRecord) other.AttributeGet(IdStaffCourseFavourite));
		}
	} // RCStaffCourseFavouriteRecord
	/// <summary>
	/// RecordList type <code>RLStaffCourseFavouriteRecordList</code> that represents a record list of
	///  <code>StaffCourseFavourite</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffCourseFavouriteRecordList: GenericRecordList<RCStaffCourseFavouriteRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffCourseFavouriteRecord GetElementDefaultValue() {
			return new RCStaffCourseFavouriteRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffCourseFavouriteRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffCourseFavouriteRecordList recordlist, Func<RCStaffCourseFavouriteRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffCourseFavouriteRecordList ToList<T>(T[] array, Func <T, RCStaffCourseFavouriteRecord> converter) {
			RLStaffCourseFavouriteRecordList result = new RLStaffCourseFavouriteRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffCourseFavouriteRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffCourseFavouriteRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffCourseFavouriteRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffCourseFavouriteRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffCourseFavouriteRecord> NewList() {
			return new RLStaffCourseFavouriteRecordList();
		}


	} // RLStaffCourseFavouriteRecordList

	/// <summary>
	/// RecordList type <code>RLStaffCourseFavouriteList</code> that represents a record list of
	///  <code>GroupIdentifier, UserIdentifier, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffCourseFavouriteList: GenericRecordList<ENStaffCourseFavouriteEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStaffCourseFavouriteEntityRecord GetElementDefaultValue() {
			return new ENStaffCourseFavouriteEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStaffCourseFavouriteEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffCourseFavouriteList recordlist, Func<ENStaffCourseFavouriteEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffCourseFavouriteList ToList<T>(T[] array, Func <T, ENStaffCourseFavouriteEntityRecord> converter) {
			RLStaffCourseFavouriteList result = new RLStaffCourseFavouriteList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffCourseFavouriteList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffCourseFavouriteList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffCourseFavouriteList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffCourseFavouriteList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStaffCourseFavouriteEntityRecord> NewList() {
			return new RLStaffCourseFavouriteList();
		}


	} // RLStaffCourseFavouriteList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStaffCourseFavourite
		/// </summary>

		public static void CreateStaffCourseFavourite(HeContext heContext, RCStaffCourseFavouriteRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffCourseFavouriteEntity.eSpaceId;
				ENStaffCourseFavouriteEntityRecord ssENStaffCourseFavourite = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStaffCourseFavouriteEntity.LocalViewName(null, null) + " (" +
					 " [GROUPID]" +
					 ", [USERID]" +
					 " ) VALUES (" +
					 " @ssGroupId" +
					 ", @ssUserId" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENStaffCourseFavourite.ssGroupId==0)) {
						insertSqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStaffCourseFavourite.ssGroupId);
					}
					if ((ssENStaffCourseFavourite.ssUserId==0)) {
						insertSqlCmd.CreateParameter("@ssUserId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENStaffCourseFavourite.ssUserId);
					}
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateStaffCourseFavourite", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStaffCourseFavourite
		/// </summary>

		public static void CreateOrUpdateStaffCourseFavourite(HeContext heContext, BitArray usedFields, RCStaffCourseFavouriteRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffCourseFavouriteEntity.eSpaceId;
				ENStaffCourseFavouriteEntityRecord ssENStaffCourseFavourite = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStaffCourseFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPID] = @ssGroupId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERID] = @ssUserId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStaffCourseFavouritessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStaffCourseFavourite.ssGroupId==0)) {
							sqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStaffCourseFavourite.ssGroupId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStaffCourseFavourite.ssUserId==0)) {
							sqlCmd.CreateParameter("@ssUserId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENStaffCourseFavourite.ssUserId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[GROUPID] = [GROUPID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStaffCourseFavouritessId", DbType.Int32, ssENStaffCourseFavourite.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStaffCourseFavourite (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStaffCourseFavouriteEntity.LocalViewName(null, null) + " (" +
						 " [GROUPID]" +
						 ", [USERID]" +
						 " ) VALUES (" +
						 " @ssGroupId" +
						 ", @ssUserId" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENStaffCourseFavourite.ssGroupId==0)) {
							insertSqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStaffCourseFavourite.ssGroupId);
						}
						if ((ssENStaffCourseFavourite.ssUserId==0)) {
							insertSqlCmd.CreateParameter("@ssUserId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENStaffCourseFavourite.ssUserId);
						}
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateStaffCourseFavourite", true), typeof(int));
					} else {
						outParamId = ssENStaffCourseFavourite.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStaffCourseFavourite
		/// </summary>

		public static void DeleteStaffCourseFavourite(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffCourseFavouriteEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStaffCourseFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStaffCourseFavourite", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStaffCourseFavourite
		/// </summary>

		public static void GetStaffCourseFavourite(HeContext heContext, int inParamId, out RCStaffCourseFavouriteRecord outParamRecord) {
			outParamRecord = new RCStaffCourseFavouriteRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffCourseFavouriteEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [GROUPID]" +
					 ", [USERID]" +
					 " FROM " + ENStaffCourseFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStaffCourseFavourite", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENStaffCourseFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStaffCourseFavouriteForUpdate
		/// </summary>

		public static void GetStaffCourseFavouriteForUpdate(HeContext heContext, int inParamId, out RCStaffCourseFavouriteRecord outParamRecord) {
			outParamRecord = new RCStaffCourseFavouriteRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffCourseFavouriteEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [GROUPID]" +
					 ", [USERID]" +
					 "FROM " + ENStaffCourseFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStaffCourseFavouriteForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(3, false)
							}
							;
						} else
						throw new DataBaseException(ENStaffCourseFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStaffCourseFavourite
		/// </summary>

		public static void UpdateStaffCourseFavourite(HeContext heContext, BitArray usedFields, RCStaffCourseFavouriteRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStaffCourseFavouriteEntity.eSpaceId;
				ENStaffCourseFavouriteEntityRecord ssENStaffCourseFavourite = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(3, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStaffCourseFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[GROUPID] = @ssGroupId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERID] = @ssUserId"): parameters);
					string whereCondition = " WHERE [ID] = @ssENStaffCourseFavouritessId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStaffCourseFavourite.ssGroupId==0)) {
							sqlCmd.CreateParameter("@ssGroupId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssGroupId", DbType.Int32, ssENStaffCourseFavourite.ssGroupId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENStaffCourseFavourite.ssUserId==0)) {
							sqlCmd.CreateParameter("@ssUserId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENStaffCourseFavourite.ssUserId);
						}
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[GROUPID] = [GROUPID]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStaffCourseFavouritessId", DbType.Int32, ssENStaffCourseFavourite.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStaffCourseFavourite", true) <= 0)
					throw new DataBaseException(ENStaffCourseFavouriteEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStaffCourseFavourite.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StaffCourseFavourite")]
	public class WORCStaffCourseFavouriteRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("GroupId")]
		public int varWSGroupId;

		[System.Xml.Serialization.XmlElement("UserId")]
		public int varWSUserId;

		public WORCStaffCourseFavouriteRecord() {
			varWSId = (int) 0;
			varWSGroupId = (int) 0;
			varWSUserId = (int) 0;
		}

		public WORCStaffCourseFavouriteRecord(ENStaffCourseFavouriteEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSGroupId = (int) r.ssGroupId;
			varWSUserId = (int) r.ssUserId;
		}

		public static RLStaffCourseFavouriteList ToRecordList(WORCStaffCourseFavouriteRecord[] array) {
			RLStaffCourseFavouriteList rl = new RLStaffCourseFavouriteList();
			if (array != null) {
				foreach(WORCStaffCourseFavouriteRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStaffCourseFavouriteRecord[] FromRecordList(RLStaffCourseFavouriteList rl) {
			WORCStaffCourseFavouriteRecord[] array = new WORCStaffCourseFavouriteRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStaffCourseFavouriteRecord {
		public static implicit operator WORCStaffCourseFavouriteRecord(RCStaffCourseFavouriteRecord r) {
			return new WORCStaffCourseFavouriteRecord(r.ssENStaffCourseFavourite);
		}

		public static implicit operator RCStaffCourseFavouriteRecord(WORCStaffCourseFavouriteRecord w) {
			RCStaffCourseFavouriteRecord r = new RCStaffCourseFavouriteRecord("");
			if (w != null) {
				r.ssENStaffCourseFavourite = w;
			}
			return r;
		}

	}

	partial struct ENStaffCourseFavouriteEntityRecord {
		public static implicit operator WORCStaffCourseFavouriteRecord(ENStaffCourseFavouriteEntityRecord r) {
			return new WORCStaffCourseFavouriteRecord(r);
		}

		public static implicit operator ENStaffCourseFavouriteEntityRecord(WORCStaffCourseFavouriteRecord w) {
			ENStaffCourseFavouriteEntityRecord r = new ENStaffCourseFavouriteEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssGroupId = (int) w.varWSGroupId;
				r.ssUserId = (int) w.varWSUserId;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffCourseFavouriteRecordList {
		public WORCStaffCourseFavouriteRecord[] Array;


		public WORLStaffCourseFavouriteRecordList(WORCStaffCourseFavouriteRecord[] r) {
			if (r == null)
			Array = new WORCStaffCourseFavouriteRecord[0];
			else
			Array = r;
		}
		public WORLStaffCourseFavouriteRecordList() {
			Array = new WORCStaffCourseFavouriteRecord[0];
		}

		public WORLStaffCourseFavouriteRecordList(RLStaffCourseFavouriteRecordList rl) {
			rl=(RLStaffCourseFavouriteRecordList) rl.Duplicate();
			Array = new WORCStaffCourseFavouriteRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStaffCourseFavouriteRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffCourseFavouriteRecordList {
		public static implicit operator RLStaffCourseFavouriteRecordList(WORCStaffCourseFavouriteRecord[] array) {
			RLStaffCourseFavouriteRecordList rl = new RLStaffCourseFavouriteRecordList();
			if (array != null) {
				foreach(WORCStaffCourseFavouriteRecord val in array) {
					rl.Append((RCStaffCourseFavouriteRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffCourseFavouriteRecord[](RLStaffCourseFavouriteRecordList rl) {
			WORCStaffCourseFavouriteRecord[] array = new WORCStaffCourseFavouriteRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStaffCourseFavouriteRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffCourseFavouriteRecordList {
		public static implicit operator RLStaffCourseFavouriteRecordList(WORLStaffCourseFavouriteRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffCourseFavouriteRecordList(RLStaffCourseFavouriteRecordList rl) {
			return new WORLStaffCourseFavouriteRecordList(rl);
		}
		public static implicit operator WORCStaffCourseFavouriteRecord[](WORLStaffCourseFavouriteRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffCourseFavouriteRecordList(WORCStaffCourseFavouriteRecord[] array) {
			return new WORLStaffCourseFavouriteRecordList(array);
		}
	}
}

