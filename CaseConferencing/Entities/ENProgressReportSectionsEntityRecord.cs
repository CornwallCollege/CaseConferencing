/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENProgressReportSectionsEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENProgressReportSectionsEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENProgressReportSectionsEntity.eSpaceId;
	} // ENProgressReportSectionsEntity

	/// <summary>
	/// Entity <code>ENProgressReportSectionsEntityRecord</code> that represents the Service Studio entity
	///  <code>ProgressReportSections</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("ProgressReportSections", "vx4DTJKheU65yTgT0RA_rg", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_ProgressReportSections", "")]
	[Serializable()]
	public partial struct ENProgressReportSectionsEntityRecord: ISerializable, ITypedRecord<ENProgressReportSectionsEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*LBwbBvB_EEqlkzc2qMIezg");
		private static readonly GlobalObjectKey IdProgressReportId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*jeCT4BjCNUiF_72Os9lGWg");
		private static readonly GlobalObjectKey IdProgressReportSectionId = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*nDfr+W9uAEmp7+E6RPMSJA");
		private static readonly GlobalObjectKey IdProgressReportSectionType = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*CdtbgXzg_0WApMOwOfka0Q");
		private static readonly GlobalObjectKey IdSectionVisible = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*W+TMqeWRWkqJ3zPrCz2CoA");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*UiKeVHsVV0ydxATi8U8vsw");
		private static readonly GlobalObjectKey IdSectionCompleted = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*KvJMVAFiz0yMyN3iEKY8ug");
		private static readonly GlobalObjectKey IdSectionCompletedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*+NQ+rgUvAk6YFEWBTWgHPg");
		private static readonly GlobalObjectKey IdSectionCompletedOn = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*OvNXjK4X9k2ELcq6loy59g");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(9, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PROGRESSREPORTID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ProgressReportId")]
		private int _ssProgressReportId;
		public int ssProgressReportId {
			get {
				return _ssProgressReportId;
			}
			set {
				if ((_ssProgressReportId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssProgressReportId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PROGRESSREPORTSECTIONID", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ProgressReportSectionId")]
		private int _ssProgressReportSectionId;
		public int ssProgressReportSectionId {
			get {
				return _ssProgressReportSectionId;
			}
			set {
				if ((_ssProgressReportSectionId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssProgressReportSectionId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PROGRESSREPORTSECTIONTYPE", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("ProgressReportSectionType")]
		private string _ssProgressReportSectionType;
		public string ssProgressReportSectionType {
			get {
				return _ssProgressReportSectionType;
			}
			set {
				if ((_ssProgressReportSectionType!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssProgressReportSectionType = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SECTIONVISIBLE", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("SectionVisible")]
		private bool _ssSectionVisible;
		public bool ssSectionVisible {
			get {
				return _ssSectionVisible;
			}
			set {
				if ((_ssSectionVisible!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssSectionVisible = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssOrder = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SECTIONCOMPLETED", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("SectionCompleted")]
		private bool _ssSectionCompleted;
		public bool ssSectionCompleted {
			get {
				return _ssSectionCompleted;
			}
			set {
				if ((_ssSectionCompleted!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssSectionCompleted = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SECTIONCOMPLETEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("SectionCompletedBy")]
		private int _ssSectionCompletedBy;
		public int ssSectionCompletedBy {
			get {
				return _ssSectionCompletedBy;
			}
			set {
				if ((_ssSectionCompletedBy!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssSectionCompletedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("SECTIONCOMPLETEDON", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("SectionCompletedOn")]
		private DateTime _ssSectionCompletedOn;
		public DateTime ssSectionCompletedOn {
			get {
				return _ssSectionCompletedOn;
			}
			set {
				if ((_ssSectionCompletedOn!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssSectionCompletedOn = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENProgressReportSectionsEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(9, true);
			OptimizedAttributes = new BitArray(9, false);
			_ssId = 0;
			_ssProgressReportId = 0;
			_ssProgressReportSectionId = 0;
			_ssProgressReportSectionType = "";
			_ssSectionVisible = false;
			_ssOrder = 0;
			_ssSectionCompleted = false;
			_ssSectionCompletedBy = 0;
			_ssSectionCompletedOn = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "ProgressReportSections.Id", 0);
			ssProgressReportId = r.ReadEntityReference(index++, "ProgressReportSections.ProgressReportId", 0);
			ssProgressReportSectionId = r.ReadEntityReference(index++, "ProgressReportSections.ProgressReportSectionId", 0);
			ssProgressReportSectionType = r.ReadTextEntityReference(index++, "ProgressReportSections.ProgressReportSectionType", "");
			ssSectionVisible = r.ReadBoolean(index++, "ProgressReportSections.SectionVisible", false);
			ssOrder = r.ReadInteger(index++, "ProgressReportSections.Order", 0);
			ssSectionCompleted = r.ReadBoolean(index++, "ProgressReportSections.SectionCompleted", false);
			ssSectionCompletedBy = r.ReadEntityReference(index++, "ProgressReportSections.SectionCompletedBy", 0);
			ssSectionCompletedOn = r.ReadDateTime(index++, "ProgressReportSections.SectionCompletedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(9, false);
			OptimizedAttributes = new BitArray(9, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENProgressReportSectionsEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENProgressReportSectionsEntityRecord a, ENProgressReportSectionsEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssProgressReportId != b.ssProgressReportId) return false;
			if (a.ssProgressReportSectionId != b.ssProgressReportSectionId) return false;
			if (a.ssProgressReportSectionType != b.ssProgressReportSectionType) return false;
			if (a.ssSectionVisible != b.ssSectionVisible) return false;
			if (a.ssOrder != b.ssOrder) return false;
			if (a.ssSectionCompleted != b.ssSectionCompleted) return false;
			if (a.ssSectionCompletedBy != b.ssSectionCompletedBy) return false;
			if (a.ssSectionCompletedOn != b.ssSectionCompletedOn) return false;
			return true;
		}

		public static bool operator != (ENProgressReportSectionsEntityRecord a, ENProgressReportSectionsEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENProgressReportSectionsEntityRecord)) return false;
			return (this == (ENProgressReportSectionsEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssProgressReportId.GetHashCode()
				^ ssProgressReportSectionId.GetHashCode()
				^ ssProgressReportSectionType.GetHashCode()
				^ ssSectionVisible.GetHashCode()
				^ ssOrder.GetHashCode()
				^ ssSectionCompleted.GetHashCode()
				^ ssSectionCompletedBy.GetHashCode()
				^ ssSectionCompletedOn.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENProgressReportSectionsEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(9, true);
			OptimizedAttributes = new BitArray(9, false);
			_ssId = 0;
			_ssProgressReportId = 0;
			_ssProgressReportSectionId = 0;
			_ssProgressReportSectionType = "";
			_ssSectionVisible = false;
			_ssOrder = 0;
			_ssSectionCompleted = false;
			_ssSectionCompletedBy = 0;
			_ssSectionCompletedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssProgressReportId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssProgressReportSectionId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssProgressReportSectionType = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssSectionVisible = (bool) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssOrder = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssSectionCompleted = (bool) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssSectionCompletedBy = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssSectionCompletedOn = (DateTime) info.GetValue(fields[8] .Name, fields[8] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENProgressReportSectionsEntityRecord Duplicate() {
			ENProgressReportSectionsEntityRecord t;
			t._ssId = this._ssId;
			t._ssProgressReportId = this._ssProgressReportId;
			t._ssProgressReportSectionId = this._ssProgressReportSectionId;
			t._ssProgressReportSectionType = this._ssProgressReportSectionType;
			t._ssSectionVisible = this._ssSectionVisible;
			t._ssOrder = this._ssOrder;
			t._ssSectionCompleted = this._ssSectionCompleted;
			t._ssSectionCompletedBy = this._ssSectionCompletedBy;
			t._ssSectionCompletedOn = this._ssSectionCompletedOn;
			t.ChangedAttributes = new BitArray(9);
			t.OptimizedAttributes = new BitArray(9);
			for (int i = 0; i < 9; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProgressReportId")) VarValue.AppendAttribute(recordElem, "ProgressReportId", ssProgressReportId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ProgressReportId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProgressReportSectionId")) VarValue.AppendAttribute(recordElem, "ProgressReportSectionId", ssProgressReportSectionId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ProgressReportSectionId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProgressReportSectionType")) VarValue.AppendAttribute(recordElem, "ProgressReportSectionType", ssProgressReportSectionType, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ProgressReportSectionType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SectionVisible")) VarValue.AppendAttribute(recordElem, "SectionVisible", ssSectionVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SectionVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SectionCompleted")) VarValue.AppendAttribute(recordElem, "SectionCompleted", ssSectionCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SectionCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SectionCompletedBy")) VarValue.AppendAttribute(recordElem, "SectionCompletedBy", ssSectionCompletedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SectionCompletedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SectionCompletedOn")) VarValue.AppendAttribute(recordElem, "SectionCompletedOn", ssSectionCompletedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "SectionCompletedOn");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "progressreportid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportId")) variable.Value = ssProgressReportId; else variable.Optimized = true;
			} else if (head == "progressreportsectionid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSectionId")) variable.Value = ssProgressReportSectionId; else variable.Optimized = true;
			} else if (head == "progressreportsectiontype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSectionType")) variable.Value = ssProgressReportSectionType; else variable.Optimized = true;
			} else if (head == "sectionvisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SectionVisible")) variable.Value = ssSectionVisible; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			} else if (head == "sectioncompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SectionCompleted")) variable.Value = ssSectionCompleted; else variable.Optimized = true;
			} else if (head == "sectioncompletedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SectionCompletedBy")) variable.Value = ssSectionCompletedBy; else variable.Optimized = true;
			} else if (head == "sectioncompletedon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SectionCompletedOn")) variable.Value = ssSectionCompletedOn; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdProgressReportId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdProgressReportSectionId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdProgressReportSectionType)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdSectionVisible)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdSectionCompleted)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdSectionCompletedBy)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdSectionCompletedOn)) {
				return ChangedAttributes[8];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdProgressReportId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdProgressReportSectionId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdProgressReportSectionType)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdSectionVisible)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdSectionCompleted)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdSectionCompletedBy)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdSectionCompletedOn)) {
				return OptimizedAttributes[8];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdProgressReportId) {
				return ssProgressReportId;
			} else if (key == IdProgressReportSectionId) {
				return ssProgressReportSectionId;
			} else if (key == IdProgressReportSectionType) {
				return ssProgressReportSectionType;
			} else if (key == IdSectionVisible) {
				return ssSectionVisible;
			} else if (key == IdOrder) {
				return ssOrder;
			} else if (key == IdSectionCompleted) {
				return ssSectionCompleted;
			} else if (key == IdSectionCompletedBy) {
				return ssSectionCompletedBy;
			} else if (key == IdSectionCompletedOn) {
				return ssSectionCompletedOn;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(9);
			OptimizedAttributes = new BitArray(9);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssProgressReportId = (int) other.AttributeGet(IdProgressReportId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdProgressReportId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdProgressReportId);
			ssProgressReportSectionId = (int) other.AttributeGet(IdProgressReportSectionId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdProgressReportSectionId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdProgressReportSectionId);
			ssProgressReportSectionType = (string) other.AttributeGet(IdProgressReportSectionType);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdProgressReportSectionType);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdProgressReportSectionType);
			ssSectionVisible = (bool) other.AttributeGet(IdSectionVisible);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdSectionVisible);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdSectionVisible);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdOrder);
			ssSectionCompleted = (bool) other.AttributeGet(IdSectionCompleted);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdSectionCompleted);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdSectionCompleted);
			ssSectionCompletedBy = (int) other.AttributeGet(IdSectionCompletedBy);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdSectionCompletedBy);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdSectionCompletedBy);
			ssSectionCompletedOn = (DateTime) other.AttributeGet(IdSectionCompletedOn);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdSectionCompletedOn);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdSectionCompletedOn);
		}
	} // ENProgressReportSectionsEntityRecord
	/// <summary>
	/// Structure <code>RCProgressReportSectionsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCProgressReportSectionsRecord: ISerializable, ITypedRecord<RCProgressReportSectionsRecord> {
		private static readonly GlobalObjectKey IdProgressReportSections = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5rigJ8jxOBPww+p4Cyr8Og");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ProgressReportSections")]
		public ENProgressReportSectionsEntityRecord ssENProgressReportSections;


		public static implicit operator ENProgressReportSectionsEntityRecord(RCProgressReportSectionsRecord r) {
			return r.ssENProgressReportSections;
		}

		public static implicit operator RCProgressReportSectionsRecord(ENProgressReportSectionsEntityRecord r) {
			RCProgressReportSectionsRecord res = new RCProgressReportSectionsRecord(null);
			res.ssENProgressReportSections = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENProgressReportSections.ChangedAttributes = value;
			}
			get {
				return ssENProgressReportSections.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCProgressReportSectionsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(9, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENProgressReportSections.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENProgressReportSections.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENProgressReportSections.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENProgressReportSections.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCProgressReportSectionsRecord r) {
			this = r;
		}


		public static bool operator == (RCProgressReportSectionsRecord a, RCProgressReportSectionsRecord b) {
			if (a.ssENProgressReportSections != b.ssENProgressReportSections) return false;
			return true;
		}

		public static bool operator != (RCProgressReportSectionsRecord a, RCProgressReportSectionsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCProgressReportSectionsRecord)) return false;
			return (this == (RCProgressReportSectionsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENProgressReportSections.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCProgressReportSectionsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENProgressReportSections = new ENProgressReportSectionsEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENProgressReportSections.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENProgressReportSections.InternalRecursiveSave();
		}


		public RCProgressReportSectionsRecord Duplicate() {
			RCProgressReportSectionsRecord t;
			t.ssENProgressReportSections = (ENProgressReportSectionsEntityRecord) this.ssENProgressReportSections.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENProgressReportSections.ToXml(this, recordElem, "ProgressReportSections", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "progressreportsections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportSections")) variable.Value = ssENProgressReportSections; else variable.Optimized = true;
				variable.SetFieldName("progressreportsections");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENProgressReportSections.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENProgressReportSections.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdProgressReportSections) {
				return ssENProgressReportSections;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENProgressReportSections.FillFromOther((IRecord) other.AttributeGet(IdProgressReportSections));
		}
	} // RCProgressReportSectionsRecord
	/// <summary>
	/// RecordList type <code>RLProgressReportSectionsRecordList</code> that represents a record list of
	///  <code>ProgressReportSections</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportSectionsRecordList: GenericRecordList<RCProgressReportSectionsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCProgressReportSectionsRecord GetElementDefaultValue() {
			return new RCProgressReportSectionsRecord("");
		}

		public T[] ToArray<T>(Func<RCProgressReportSectionsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportSectionsRecordList recordlist, Func<RCProgressReportSectionsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportSectionsRecordList ToList<T>(T[] array, Func <T, RCProgressReportSectionsRecord> converter) {
			RLProgressReportSectionsRecordList result = new RLProgressReportSectionsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportSectionsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSectionsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSectionsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportSectionsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(9, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCProgressReportSectionsRecord> NewList() {
			return new RLProgressReportSectionsRecordList();
		}


	} // RLProgressReportSectionsRecordList

	/// <summary>
	/// RecordList type <code>RLProgressReportSectionsList</code> that represents a record list of
	///  <code>UserIdentifier, DateTime, Boolean, Boolean, Integer, Integer, ProgressReportIdentifier
	/// , ProgressReportSectionIdentifier, ProgressReportSectionTypeIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLProgressReportSectionsList: GenericRecordList<ENProgressReportSectionsEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENProgressReportSectionsEntityRecord GetElementDefaultValue() {
			return new ENProgressReportSectionsEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENProgressReportSectionsEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLProgressReportSectionsList recordlist, Func<ENProgressReportSectionsEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLProgressReportSectionsList ToList<T>(T[] array, Func <T, ENProgressReportSectionsEntityRecord> converter) {
			RLProgressReportSectionsList result = new RLProgressReportSectionsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLProgressReportSectionsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSectionsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLProgressReportSectionsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLProgressReportSectionsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENProgressReportSectionsEntityRecord> NewList() {
			return new RLProgressReportSectionsList();
		}


	} // RLProgressReportSectionsList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateProgressReportSections
		/// </summary>

		public static void CreateProgressReportSections(HeContext heContext, RCProgressReportSectionsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionsEntity.eSpaceId;
				ENProgressReportSectionsEntityRecord ssENProgressReportSections = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENProgressReportSectionsEntity.LocalViewName(null, null) + " (" +
					 " [PROGRESSREPORTID]" +
					 ", [PROGRESSREPORTSECTIONID]" +
					 ", [PROGRESSREPORTSECTIONTYPE]" +
					 ", [SECTIONVISIBLE]" +
					 ", [ORDER]" +
					 ", [SECTIONCOMPLETED]" +
					 ", [SECTIONCOMPLETEDBY]" +
					 ", [SECTIONCOMPLETEDON]" +
					 " ) VALUES (" +
					 " @ssProgressReportId" +
					 ", @ssProgressReportSectionId" +
					 ", @ssProgressReportSectionType" +
					 ", @ssSectionVisible" +
					 ", @ssOrder" +
					 ", @ssSectionCompleted" +
					 ", @ssSectionCompletedBy" +
					 ", @ssSectionCompletedOn" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENProgressReportSections.ssProgressReportId==0)) {
						insertSqlCmd.CreateParameter("@ssProgressReportId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssProgressReportId", DbType.Int32, ssENProgressReportSections.ssProgressReportId);
					}
					if ((ssENProgressReportSections.ssProgressReportSectionId==0)) {
						insertSqlCmd.CreateParameter("@ssProgressReportSectionId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssProgressReportSectionId", DbType.Int32, ssENProgressReportSections.ssProgressReportSectionId);
					}
					if ((ssENProgressReportSections.ssProgressReportSectionType== "")) {
						insertSqlCmd.CreateParameter("@ssProgressReportSectionType", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssProgressReportSectionType", DbType.String, ssENProgressReportSections.ssProgressReportSectionType);
					}
					insertSqlCmd.CreateParameter("@ssSectionVisible", DbType.Boolean, ssENProgressReportSections.ssSectionVisible);
					insertSqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENProgressReportSections.ssOrder);
					insertSqlCmd.CreateParameter("@ssSectionCompleted", DbType.Boolean, ssENProgressReportSections.ssSectionCompleted);
					if ((ssENProgressReportSections.ssSectionCompletedBy==0)) {
						insertSqlCmd.CreateParameter("@ssSectionCompletedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssSectionCompletedBy", DbType.Int32, ssENProgressReportSections.ssSectionCompletedBy);
					}
					insertSqlCmd.CreateParameter("@ssSectionCompletedOn", DbType.DateTime, ssENProgressReportSections.ssSectionCompletedOn);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateProgressReportSections", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateProgressReportSections
		/// </summary>

		public static void CreateOrUpdateProgressReportSections(HeContext heContext, BitArray usedFields, RCProgressReportSectionsRecord inParamSource, out int outParamId) {
			outParamId = 0;

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionsEntity.eSpaceId;
				ENProgressReportSectionsEntityRecord ssENProgressReportSections = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(9, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENProgressReportSectionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROGRESSREPORTID] = @ssProgressReportId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROGRESSREPORTSECTIONID] = @ssProgressReportSectionId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROGRESSREPORTSECTIONTYPE] = @ssProgressReportSectionType"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SECTIONVISIBLE] = @ssSectionVisible"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ORDER] = @ssOrder"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SECTIONCOMPLETED] = @ssSectionCompleted"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SECTIONCOMPLETEDBY] = @ssSectionCompletedBy"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SECTIONCOMPLETEDON] = @ssSectionCompletedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENProgressReportSectionsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENProgressReportSections.ssProgressReportId==0)) {
							sqlCmd.CreateParameter("@ssProgressReportId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssProgressReportId", DbType.Int32, ssENProgressReportSections.ssProgressReportId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENProgressReportSections.ssProgressReportSectionId==0)) {
							sqlCmd.CreateParameter("@ssProgressReportSectionId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssProgressReportSectionId", DbType.Int32, ssENProgressReportSections.ssProgressReportSectionId);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENProgressReportSections.ssProgressReportSectionType== "")) {
							sqlCmd.CreateParameter("@ssProgressReportSectionType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssProgressReportSectionType", DbType.String, ssENProgressReportSections.ssProgressReportSectionType);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssSectionVisible", DbType.Boolean, ssENProgressReportSections.ssSectionVisible);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENProgressReportSections.ssOrder);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssSectionCompleted", DbType.Boolean, ssENProgressReportSections.ssSectionCompleted);
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENProgressReportSections.ssSectionCompletedBy==0)) {
							sqlCmd.CreateParameter("@ssSectionCompletedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSectionCompletedBy", DbType.Int32, ssENProgressReportSections.ssSectionCompletedBy);
						}
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssSectionCompletedOn", DbType.DateTime, ssENProgressReportSections.ssSectionCompletedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[SECTIONVISIBLE] = [SECTIONVISIBLE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENProgressReportSectionsssId", DbType.Int32, ssENProgressReportSections.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateProgressReportSections (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENProgressReportSectionsEntity.LocalViewName(null, null) + " (" +
						 " [PROGRESSREPORTID]" +
						 ", [PROGRESSREPORTSECTIONID]" +
						 ", [PROGRESSREPORTSECTIONTYPE]" +
						 ", [SECTIONVISIBLE]" +
						 ", [ORDER]" +
						 ", [SECTIONCOMPLETED]" +
						 ", [SECTIONCOMPLETEDBY]" +
						 ", [SECTIONCOMPLETEDON]" +
						 " ) VALUES (" +
						 " @ssProgressReportId" +
						 ", @ssProgressReportSectionId" +
						 ", @ssProgressReportSectionType" +
						 ", @ssSectionVisible" +
						 ", @ssOrder" +
						 ", @ssSectionCompleted" +
						 ", @ssSectionCompletedBy" +
						 ", @ssSectionCompletedOn" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						if ((ssENProgressReportSections.ssProgressReportId==0)) {
							insertSqlCmd.CreateParameter("@ssProgressReportId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssProgressReportId", DbType.Int32, ssENProgressReportSections.ssProgressReportId);
						}
						if ((ssENProgressReportSections.ssProgressReportSectionId==0)) {
							insertSqlCmd.CreateParameter("@ssProgressReportSectionId", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssProgressReportSectionId", DbType.Int32, ssENProgressReportSections.ssProgressReportSectionId);
						}
						if ((ssENProgressReportSections.ssProgressReportSectionType== "")) {
							insertSqlCmd.CreateParameter("@ssProgressReportSectionType", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssProgressReportSectionType", DbType.String, ssENProgressReportSections.ssProgressReportSectionType);
						}
						insertSqlCmd.CreateParameter("@ssSectionVisible", DbType.Boolean, ssENProgressReportSections.ssSectionVisible);
						insertSqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENProgressReportSections.ssOrder);
						insertSqlCmd.CreateParameter("@ssSectionCompleted", DbType.Boolean, ssENProgressReportSections.ssSectionCompleted);
						if ((ssENProgressReportSections.ssSectionCompletedBy==0)) {
							insertSqlCmd.CreateParameter("@ssSectionCompletedBy", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssSectionCompletedBy", DbType.Int32, ssENProgressReportSections.ssSectionCompletedBy);
						}
						insertSqlCmd.CreateParameter("@ssSectionCompletedOn", DbType.DateTime, ssENProgressReportSections.ssSectionCompletedOn);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateProgressReportSections", true), typeof(int));
					} else {
						outParamId = ssENProgressReportSections.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteProgressReportSections
		/// </summary>

		public static void DeleteProgressReportSections(HeContext heContext, int inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENProgressReportSectionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteProgressReportSections", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetProgressReportSections
		/// </summary>

		public static void GetProgressReportSections(HeContext heContext, int inParamId, out RCProgressReportSectionsRecord outParamRecord) {
			outParamRecord = new RCProgressReportSectionsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [PROGRESSREPORTID]" +
					 ", [PROGRESSREPORTSECTIONID]" +
					 ", [PROGRESSREPORTSECTIONTYPE]" +
					 ", [SECTIONVISIBLE]" +
					 ", [ORDER]" +
					 ", [SECTIONCOMPLETED]" +
					 ", [SECTIONCOMPLETEDBY]" +
					 ", [SECTIONCOMPLETEDON]" +
					 " FROM " + ENProgressReportSectionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetProgressReportSections", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(9, false)
							}
							;
						} else
						throw new DataBaseException(ENProgressReportSectionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetProgressReportSectionsForUpdate
		/// </summary>

		public static void GetProgressReportSectionsForUpdate(HeContext heContext, int inParamId, out RCProgressReportSectionsRecord outParamRecord) {
			outParamRecord = new RCProgressReportSectionsRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionsEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [PROGRESSREPORTID]" +
					 ", [PROGRESSREPORTSECTIONID]" +
					 ", [PROGRESSREPORTSECTIONTYPE]" +
					 ", [SECTIONVISIBLE]" +
					 ", [ORDER]" +
					 ", [SECTIONCOMPLETED]" +
					 ", [SECTIONCOMPLETEDBY]" +
					 ", [SECTIONCOMPLETEDON]" +
					 "FROM " + ENProgressReportSectionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetProgressReportSectionsForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(9, false)
							}
							;
						} else
						throw new DataBaseException(ENProgressReportSectionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateProgressReportSections
		/// </summary>

		public static void UpdateProgressReportSections(HeContext heContext, BitArray usedFields, RCProgressReportSectionsRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENProgressReportSectionsEntity.eSpaceId;
				ENProgressReportSectionsEntityRecord ssENProgressReportSections = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(9, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENProgressReportSectionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROGRESSREPORTID] = @ssProgressReportId"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROGRESSREPORTSECTIONID] = @ssProgressReportSectionId"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PROGRESSREPORTSECTIONTYPE] = @ssProgressReportSectionType"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SECTIONVISIBLE] = @ssSectionVisible"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ORDER] = @ssOrder"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SECTIONCOMPLETED] = @ssSectionCompleted"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SECTIONCOMPLETEDBY] = @ssSectionCompletedBy"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[SECTIONCOMPLETEDON] = @ssSectionCompletedOn"): parameters);
					string whereCondition = " WHERE [ID] = @ssENProgressReportSectionsssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENProgressReportSections.ssProgressReportId==0)) {
							sqlCmd.CreateParameter("@ssProgressReportId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssProgressReportId", DbType.Int32, ssENProgressReportSections.ssProgressReportId);
						}
						counter++;
					}
					if (usedFields[2]) {
						if ((ssENProgressReportSections.ssProgressReportSectionId==0)) {
							sqlCmd.CreateParameter("@ssProgressReportSectionId", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssProgressReportSectionId", DbType.Int32, ssENProgressReportSections.ssProgressReportSectionId);
						}
						counter++;
					}
					if (usedFields[3]) {
						if ((ssENProgressReportSections.ssProgressReportSectionType== "")) {
							sqlCmd.CreateParameter("@ssProgressReportSectionType", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssProgressReportSectionType", DbType.String, ssENProgressReportSections.ssProgressReportSectionType);
						}
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssSectionVisible", DbType.Boolean, ssENProgressReportSections.ssSectionVisible);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENProgressReportSections.ssOrder);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssSectionCompleted", DbType.Boolean, ssENProgressReportSections.ssSectionCompleted);
						counter++;
					}
					if (usedFields[7]) {
						if ((ssENProgressReportSections.ssSectionCompletedBy==0)) {
							sqlCmd.CreateParameter("@ssSectionCompletedBy", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssSectionCompletedBy", DbType.Int32, ssENProgressReportSections.ssSectionCompletedBy);
						}
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssSectionCompletedOn", DbType.DateTime, ssENProgressReportSections.ssSectionCompletedOn);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[SECTIONVISIBLE] = [SECTIONVISIBLE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENProgressReportSectionsssId", DbType.Int32, ssENProgressReportSections.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateProgressReportSections", true) <= 0)
					throw new DataBaseException(ENProgressReportSectionsEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENProgressReportSections.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("ProgressReportSections")]
	public class WORCProgressReportSectionsRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("ProgressReportId")]
		public int varWSProgressReportId;

		[System.Xml.Serialization.XmlElement("ProgressReportSectionId")]
		public int varWSProgressReportSectionId;

		[System.Xml.Serialization.XmlElement("ProgressReportSectionType")]
		public string varWSProgressReportSectionType;

		[System.Xml.Serialization.XmlElement("SectionVisible")]
		public bool varWSSectionVisible;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		[System.Xml.Serialization.XmlElement("SectionCompleted")]
		public bool varWSSectionCompleted;

		[System.Xml.Serialization.XmlElement("SectionCompletedBy")]
		public int varWSSectionCompletedBy;

		[System.Xml.Serialization.XmlElement("SectionCompletedOn")]
		public DateTime varWSSectionCompletedOn;

		public WORCProgressReportSectionsRecord() {
			varWSId = (int) 0;
			varWSProgressReportId = (int) 0;
			varWSProgressReportSectionId = (int) 0;
			varWSProgressReportSectionType = (string) "";
			varWSSectionVisible = (bool) false;
			varWSOrder = (int) 0;
			varWSSectionCompleted = (bool) false;
			varWSSectionCompletedBy = (int) 0;
			varWSSectionCompletedOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCProgressReportSectionsRecord(ENProgressReportSectionsEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSProgressReportId = (int) r.ssProgressReportId;
			varWSProgressReportSectionId = (int) r.ssProgressReportSectionId;
			varWSProgressReportSectionType = BaseAppUtils.RemoveControlChars(r.ssProgressReportSectionType);
			varWSSectionVisible = (bool) r.ssSectionVisible;
			varWSOrder = (int) r.ssOrder;
			varWSSectionCompleted = (bool) r.ssSectionCompleted;
			varWSSectionCompletedBy = (int) r.ssSectionCompletedBy;
			varWSSectionCompletedOn = (DateTime) r.ssSectionCompletedOn;
		}

		public static RLProgressReportSectionsList ToRecordList(WORCProgressReportSectionsRecord[] array) {
			RLProgressReportSectionsList rl = new RLProgressReportSectionsList();
			if (array != null) {
				foreach(WORCProgressReportSectionsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCProgressReportSectionsRecord[] FromRecordList(RLProgressReportSectionsList rl) {
			WORCProgressReportSectionsRecord[] array = new WORCProgressReportSectionsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCProgressReportSectionsRecord {
		public static implicit operator WORCProgressReportSectionsRecord(RCProgressReportSectionsRecord r) {
			return new WORCProgressReportSectionsRecord(r.ssENProgressReportSections);
		}

		public static implicit operator RCProgressReportSectionsRecord(WORCProgressReportSectionsRecord w) {
			RCProgressReportSectionsRecord r = new RCProgressReportSectionsRecord("");
			if (w != null) {
				r.ssENProgressReportSections = w;
			}
			return r;
		}

	}

	partial struct ENProgressReportSectionsEntityRecord {
		public static implicit operator WORCProgressReportSectionsRecord(ENProgressReportSectionsEntityRecord r) {
			return new WORCProgressReportSectionsRecord(r);
		}

		public static implicit operator ENProgressReportSectionsEntityRecord(WORCProgressReportSectionsRecord w) {
			ENProgressReportSectionsEntityRecord r = new ENProgressReportSectionsEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssProgressReportId = (int) w.varWSProgressReportId;
				r.ssProgressReportSectionId = (int) w.varWSProgressReportSectionId;
				r.ssProgressReportSectionType = (string) w.varWSProgressReportSectionType;
				r.ssSectionVisible = (bool) w.varWSSectionVisible;
				r.ssOrder = (int) w.varWSOrder;
				r.ssSectionCompleted = (bool) w.varWSSectionCompleted;
				r.ssSectionCompletedBy = (int) w.varWSSectionCompletedBy;
				r.ssSectionCompletedOn = (DateTime) w.varWSSectionCompletedOn;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLProgressReportSectionsRecordList {
		public WORCProgressReportSectionsRecord[] Array;


		public WORLProgressReportSectionsRecordList(WORCProgressReportSectionsRecord[] r) {
			if (r == null)
			Array = new WORCProgressReportSectionsRecord[0];
			else
			Array = r;
		}
		public WORLProgressReportSectionsRecordList() {
			Array = new WORCProgressReportSectionsRecord[0];
		}

		public WORLProgressReportSectionsRecordList(RLProgressReportSectionsRecordList rl) {
			rl=(RLProgressReportSectionsRecordList) rl.Duplicate();
			Array = new WORCProgressReportSectionsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCProgressReportSectionsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLProgressReportSectionsRecordList {
		public static implicit operator RLProgressReportSectionsRecordList(WORCProgressReportSectionsRecord[] array) {
			RLProgressReportSectionsRecordList rl = new RLProgressReportSectionsRecordList();
			if (array != null) {
				foreach(WORCProgressReportSectionsRecord val in array) {
					rl.Append((RCProgressReportSectionsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCProgressReportSectionsRecord[](RLProgressReportSectionsRecordList rl) {
			WORCProgressReportSectionsRecord[] array = new WORCProgressReportSectionsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCProgressReportSectionsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLProgressReportSectionsRecordList {
		public static implicit operator RLProgressReportSectionsRecordList(WORLProgressReportSectionsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLProgressReportSectionsRecordList(RLProgressReportSectionsRecordList rl) {
			return new WORLProgressReportSectionsRecordList(rl);
		}
		public static implicit operator WORCProgressReportSectionsRecord[](WORLProgressReportSectionsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLProgressReportSectionsRecordList(WORCProgressReportSectionsRecord[] array) {
			return new WORLProgressReportSectionsRecordList(array);
		}
	}
}

