/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssCaseConferencing {

	public sealed partial class ENStudentRAGEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCaseConferencingCore.ENStudentRAGEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCaseConferencingCore.ENStudentRAGEntity.eSpaceId;
	} // ENStudentRAGEntity

	/// <summary>
	/// Entity <code>ENStudentRAGEntityRecord</code> that represents the Service Studio entity
	///  <code>StudentRAG</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("StudentRAG", "hr8eSfnWiUadmK8XH9kpQQ", "U4Zx4qCUzUe0A+0C93K3BA", 0, "OSUSR_q0e_StudentRAG", "")]
	[Serializable()]
	public partial struct ENStudentRAGEntityRecord: ISerializable, ITypedRecord<ENStudentRAGEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*TiPLATwG4EG+pZXod7TgYA");
		private static readonly GlobalObjectKey IdRAG = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*2XqpqKnlLU227W2i2jZUjA");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*gHMk3j2oPEOGrA94aAtIJw");
		private static readonly GlobalObjectKey IdUpdatedBy = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*8pWiltcxvkmf8Gvn47RzUQ");
		private static readonly GlobalObjectKey IdUpdatedAt = GlobalObjectKey.Parse("U4Zx4qCUzUe0A+0C93K3BA*yN1+oCH25E2LcaYcL0zmfQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("STUDENTREFERENCE", 0, false, true, true)]
		[System.Xml.Serialization.XmlElement("StudentReference")]
		private string _ssStudentReference;
		public string ssStudentReference {
			get {
				return _ssStudentReference;
			}
			set {
				if ((_ssStudentReference!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(5, true);
					_ssStudentReference = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("RAG", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("RAG")]
		private string _ssRAG;
		public string ssRAG {
			get {
				return _ssRAG;
			}
			set {
				if ((_ssRAG!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssRAG = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 500, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATEDBY", 0, false, false, true)]
		[System.Xml.Serialization.XmlElement("UpdatedBy")]
		private int _ssUpdatedBy;
		public int ssUpdatedBy {
			get {
				return _ssUpdatedBy;
			}
			set {
				if ((_ssUpdatedBy!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssUpdatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("UPDATEDAT", 0, false, false, false)]
		[System.Xml.Serialization.XmlElement("UpdatedAt")]
		private DateTime _ssUpdatedAt;
		public DateTime ssUpdatedAt {
			get {
				return _ssUpdatedAt;
			}
			set {
				if ((_ssUpdatedAt!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssUpdatedAt = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENStudentRAGEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssStudentReference = "";
			_ssRAG = "";
			_ssDescription = "";
			_ssUpdatedBy = 0;
			_ssUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentReference = r.ReadTextEntityReference(index++, "StudentRAG.StudentReference", "");
			ssRAG = r.ReadTextEntityReference(index++, "StudentRAG.RAG", "");
			ssDescription = r.ReadText(index++, "StudentRAG.Description", "");
			ssUpdatedBy = r.ReadEntityReference(index++, "StudentRAG.UpdatedBy", 0);
			ssUpdatedAt = r.ReadDateTime(index++, "StudentRAG.UpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(5, false);
			OptimizedAttributes = new BitArray(5, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENStudentRAGEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENStudentRAGEntityRecord a, ENStudentRAGEntityRecord b) {
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssRAG != b.ssRAG) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssUpdatedBy != b.ssUpdatedBy) return false;
			if (a.ssUpdatedAt != b.ssUpdatedAt) return false;
			return true;
		}

		public static bool operator != (ENStudentRAGEntityRecord a, ENStudentRAGEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENStudentRAGEntityRecord)) return false;
			return (this == (ENStudentRAGEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssRAG.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssUpdatedBy.GetHashCode()
				^ ssUpdatedAt.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENStudentRAGEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(5, true);
			OptimizedAttributes = new BitArray(5, false);
			_ssStudentReference = "";
			_ssRAG = "";
			_ssDescription = "";
			_ssUpdatedBy = 0;
			_ssUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssStudentReference = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssRAG = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssDescription = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssUpdatedBy = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssUpdatedAt = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENStudentRAGEntityRecord Duplicate() {
			ENStudentRAGEntityRecord t;
			t._ssStudentReference = this._ssStudentReference;
			t._ssRAG = this._ssRAG;
			t._ssDescription = this._ssDescription;
			t._ssUpdatedBy = this._ssUpdatedBy;
			t._ssUpdatedAt = this._ssUpdatedAt;
			t.ChangedAttributes = new BitArray(5);
			t.OptimizedAttributes = new BitArray(5);
			for (int i = 0; i < 5; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RAG")) VarValue.AppendAttribute(recordElem, "RAG", ssRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "RAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdatedBy")) VarValue.AppendAttribute(recordElem, "UpdatedBy", ssUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "UpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdatedAt")) VarValue.AppendAttribute(recordElem, "UpdatedAt", ssUpdatedAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "UpdatedAt");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "rag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAG")) variable.Value = ssRAG; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "updatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdatedBy")) variable.Value = ssUpdatedBy; else variable.Optimized = true;
			} else if (head == "updatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdatedAt")) variable.Value = ssUpdatedAt; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdStudentReference)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdRAG)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdUpdatedBy)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdUpdatedAt)) {
				return ChangedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdStudentReference)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdRAG)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdUpdatedBy)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdUpdatedAt)) {
				return OptimizedAttributes[4];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdRAG) {
				return ssRAG;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdUpdatedBy) {
				return ssUpdatedBy;
			} else if (key == IdUpdatedAt) {
				return ssUpdatedAt;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(5);
			OptimizedAttributes = new BitArray(5);
			if (other == null) return;
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdStudentReference);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdStudentReference);
			ssRAG = (string) other.AttributeGet(IdRAG);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdRAG);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdRAG);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDescription);
			ssUpdatedBy = (int) other.AttributeGet(IdUpdatedBy);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdUpdatedBy);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdUpdatedBy);
			ssUpdatedAt = (DateTime) other.AttributeGet(IdUpdatedAt);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdUpdatedAt);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdUpdatedAt);
		}
	} // ENStudentRAGEntityRecord
	/// <summary>
	/// Structure <code>RCStudentRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentRAGRecord: ISerializable, ITypedRecord<RCStudentRAGRecord> {
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*APBh_wXtPfFnwTyOabB9Vg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public ENStudentRAGEntityRecord ssENStudentRAG;


		public static implicit operator ENStudentRAGEntityRecord(RCStudentRAGRecord r) {
			return r.ssENStudentRAG;
		}

		public static implicit operator RCStudentRAGRecord(ENStudentRAGEntityRecord r) {
			RCStudentRAGRecord res = new RCStudentRAGRecord(null);
			res.ssENStudentRAG = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENStudentRAG.ChangedAttributes = value;
			}
			get {
				return ssENStudentRAG.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCStudentRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(5, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENStudentRAG.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENStudentRAG.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENStudentRAG.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENStudentRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentRAGRecord a, RCStudentRAGRecord b) {
			if (a.ssENStudentRAG != b.ssENStudentRAG) return false;
			return true;
		}

		public static bool operator != (RCStudentRAGRecord a, RCStudentRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentRAGRecord)) return false;
			return (this == (RCStudentRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENStudentRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENStudentRAG = new ENStudentRAGEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENStudentRAG = (ENStudentRAGEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENStudentRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENStudentRAG.InternalRecursiveSave();
		}


		public RCStudentRAGRecord Duplicate() {
			RCStudentRAGRecord t;
			t.ssENStudentRAG = (ENStudentRAGEntityRecord) this.ssENStudentRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENStudentRAG.ToXml(this, recordElem, "StudentRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssENStudentRAG; else variable.Optimized = true;
				variable.SetFieldName("studentrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENStudentRAG.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENStudentRAG.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentRAG) {
				return ssENStudentRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENStudentRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentRAG));
		}
	} // RCStudentRAGRecord
	/// <summary>
	/// RecordList type <code>RLStudentRAGRecordList</code> that represents a record list of
	///  <code>StudentRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentRAGRecordList: GenericRecordList<RCStudentRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentRAGRecord GetElementDefaultValue() {
			return new RCStudentRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentRAGRecordList recordlist, Func<RCStudentRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentRAGRecordList ToList<T>(T[] array, Func <T, RCStudentRAGRecord> converter) {
			RLStudentRAGRecordList result = new RLStudentRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(5, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentRAGRecord> NewList() {
			return new RLStudentRAGRecordList();
		}


	} // RLStudentRAGRecordList

	/// <summary>
	/// RecordList type <code>RLStudentRAGList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, DateTime, RAGStatusIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentRAGList: GenericRecordList<ENStudentRAGEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENStudentRAGEntityRecord GetElementDefaultValue() {
			return new ENStudentRAGEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENStudentRAGEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentRAGList recordlist, Func<ENStudentRAGEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentRAGList ToList<T>(T[] array, Func <T, ENStudentRAGEntityRecord> converter) {
			RLStudentRAGList result = new RLStudentRAGList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentRAGList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentRAGList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentRAGList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentRAGList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENStudentRAGEntityRecord> NewList() {
			return new RLStudentRAGList();
		}


	} // RLStudentRAGList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateStudentRAG
		/// </summary>

		public static void CreateStudentRAG(HeContext heContext, RCStudentRAGRecord inParamSource, out string outParamId) {
			outParamId = "";

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentRAGEntity.eSpaceId;
				ENStudentRAGEntityRecord ssENStudentRAG = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENStudentRAGEntity.LocalViewName(null, null) + " (" +
					 " [STUDENTREFERENCE]" +
					 ", [RAG]" +
					 ", [DESCRIPTION]" +
					 ", [UPDATEDBY]" +
					 ", [UPDATEDAT]" +
					 " ) VALUES (" +
					 " @ssStudentReference" +
					 ", @ssRAG" +
					 ", @ssDescription" +
					 ", @ssUpdatedBy" +
					 ", @ssUpdatedAt" +
					 " )";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentRAG.ssStudentReference);
					if ((ssENStudentRAG.ssRAG== "")) {
						insertSqlCmd.CreateParameter("@ssRAG", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssRAG", DbType.String, ssENStudentRAG.ssRAG);
					}
					insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentRAG.ssDescription);
					insertSqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENStudentRAG.ssUpdatedBy);
					insertSqlCmd.CreateParameter("@ssUpdatedAt", DbType.DateTime, ssENStudentRAG.ssUpdatedAt);
					insertSqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateStudentRAG", true);
					outParamId = ssENStudentRAG.ssStudentReference;
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateStudentRAG
		/// </summary>

		public static void CreateOrUpdateStudentRAG(HeContext heContext, BitArray usedFields, RCStudentRAGRecord inParamSource, out string outParamId) {
			outParamId = "";

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentRAGEntity.eSpaceId;
				ENStudentRAGEntityRecord ssENStudentRAG = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RAG] = @ssRAG"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDBY] = @ssUpdatedBy"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDAT] = @ssUpdatedAt"): parameters);
					string whereCondition = " WHERE [STUDENTREFERENCE] = @ssENStudentRAGssStudentReference";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentRAG.ssRAG== "")) {
							sqlCmd.CreateParameter("@ssRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRAG", DbType.String, ssENStudentRAG.ssRAG);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentRAG.ssDescription);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENStudentRAG.ssUpdatedBy);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssUpdatedAt", DbType.DateTime, ssENStudentRAG.ssUpdatedAt);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[UPDATEDAT] = [UPDATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentRAGssStudentReference", DbType.String, ssENStudentRAG.ssStudentReference);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentRAG (update)", true);
					if (counter == 0) {
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENStudentRAGEntity.LocalViewName(null, null) + " (" +
						 " [STUDENTREFERENCE]" +
						 ", [RAG]" +
						 ", [DESCRIPTION]" +
						 ", [UPDATEDBY]" +
						 ", [UPDATEDAT]" +
						 " ) VALUES (" +
						 " @ssStudentReference" +
						 ", @ssRAG" +
						 ", @ssDescription" +
						 ", @ssUpdatedBy" +
						 ", @ssUpdatedAt" +
						 " )";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@ssStudentReference", DbType.String, ssENStudentRAG.ssStudentReference);
						if ((ssENStudentRAG.ssRAG== "")) {
							insertSqlCmd.CreateParameter("@ssRAG", DBNull.Value);
						} else {
							insertSqlCmd.CreateParameter("@ssRAG", DbType.String, ssENStudentRAG.ssRAG);
						}
						insertSqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentRAG.ssDescription);
						insertSqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENStudentRAG.ssUpdatedBy);
						insertSqlCmd.CreateParameter("@ssUpdatedAt", DbType.DateTime, ssENStudentRAG.ssUpdatedAt);
						insertSqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateStudentRAG", true);
						outParamId = ssENStudentRAG.ssStudentReference;
					} else {
						outParamId = ssENStudentRAG.ssStudentReference;
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: DeleteStudentRAG
		/// </summary>

		public static void DeleteStudentRAG(HeContext heContext, string inParamId) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentRAGEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENStudentRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [STUDENTREFERENCE] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteStudentRAG", true);
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentRAG
		/// </summary>

		public static void GetStudentRAG(HeContext heContext, string inParamId, out RCStudentRAGRecord outParamRecord) {
			outParamRecord = new RCStudentRAGRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentRAGEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [STUDENTREFERENCE]" +
					 ", [RAG]" +
					 ", [DESCRIPTION]" +
					 ", [UPDATEDBY]" +
					 ", [UPDATEDAT]" +
					 " FROM " + ENStudentRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [STUDENTREFERENCE] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentRAG", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: GetStudentRAGForUpdate
		/// </summary>

		public static void GetStudentRAGForUpdate(HeContext heContext, string inParamId, out RCStudentRAGRecord outParamRecord) {
			outParamRecord = new RCStudentRAGRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentRAGEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [STUDENTREFERENCE]" +
					 ", [RAG]" +
					 ", [DESCRIPTION]" +
					 ", [UPDATEDBY]" +
					 ", [UPDATEDAT]" +
					 "FROM " + ENStudentRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [STUDENTREFERENCE] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetStudentRAGForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(5, false)
							}
							;
						} else
						throw new DataBaseException(ENStudentRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

		/// <summary>
		/// Action: UpdateStudentRAG
		/// </summary>

		public static void UpdateStudentRAG(HeContext heContext, BitArray usedFields, RCStudentRAGRecord inParamSource) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENStudentRAGEntity.eSpaceId;
				ENStudentRAGEntityRecord ssENStudentRAG = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(5, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENStudentRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[RAG] = @ssRAG"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[DESCRIPTION] = @ssDescription"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDBY] = @ssUpdatedBy"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[UPDATEDAT] = @ssUpdatedAt"): parameters);
					string whereCondition = " WHERE [STUDENTREFERENCE] = @ssENStudentRAGssStudentReference";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[1]) {
						if ((ssENStudentRAG.ssRAG== "")) {
							sqlCmd.CreateParameter("@ssRAG", DBNull.Value);
						} else {
							sqlCmd.CreateParameter("@ssRAG", DbType.String, ssENStudentRAG.ssRAG);
						}
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssDescription", DbType.String, ssENStudentRAG.ssDescription);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssUpdatedBy", DbType.Int32, ssENStudentRAG.ssUpdatedBy);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssUpdatedAt", DbType.DateTime, ssENStudentRAG.ssUpdatedAt);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[UPDATEDAT] = [UPDATEDAT]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENStudentRAGssStudentReference", DbType.String, ssENStudentRAG.ssStudentReference);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateStudentRAG", true) <= 0)
					throw new DataBaseException(ENStudentRAGEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENStudentRAG.ssStudentReference + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssCaseConferencing {
	[XmlType("StudentRAG")]
	public class WORCStudentRAGRecord {
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("RAG")]
		public string varWSRAG;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		[System.Xml.Serialization.XmlElement("UpdatedBy")]
		public int varWSUpdatedBy;

		[System.Xml.Serialization.XmlElement("UpdatedAt")]
		public DateTime varWSUpdatedAt;

		public WORCStudentRAGRecord() {
			varWSStudentReference = (string) "";
			varWSRAG = (string) "";
			varWSDescription = (string) "";
			varWSUpdatedBy = (int) 0;
			varWSUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCStudentRAGRecord(ENStudentRAGEntityRecord r) {
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSRAG = BaseAppUtils.RemoveControlChars(r.ssRAG);
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
			varWSUpdatedBy = (int) r.ssUpdatedBy;
			varWSUpdatedAt = (DateTime) r.ssUpdatedAt;
		}

		public static RLStudentRAGList ToRecordList(WORCStudentRAGRecord[] array) {
			RLStudentRAGList rl = new RLStudentRAGList();
			if (array != null) {
				foreach(WORCStudentRAGRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentRAGRecord[] FromRecordList(RLStudentRAGList rl) {
			WORCStudentRAGRecord[] array = new WORCStudentRAGRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentRAGRecord {
		public static implicit operator WORCStudentRAGRecord(RCStudentRAGRecord r) {
			return new WORCStudentRAGRecord(r.ssENStudentRAG);
		}

		public static implicit operator RCStudentRAGRecord(WORCStudentRAGRecord w) {
			RCStudentRAGRecord r = new RCStudentRAGRecord("");
			if (w != null) {
				r.ssENStudentRAG = w;
			}
			return r;
		}

	}

	partial struct ENStudentRAGEntityRecord {
		public static implicit operator WORCStudentRAGRecord(ENStudentRAGEntityRecord r) {
			return new WORCStudentRAGRecord(r);
		}

		public static implicit operator ENStudentRAGEntityRecord(WORCStudentRAGRecord w) {
			ENStudentRAGEntityRecord r = new ENStudentRAGEntityRecord("");
			if (w != null) {
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssRAG = (string) w.varWSRAG;
				r.ssDescription = ((string) w.varWSDescription ?? "");
				r.ssUpdatedBy = (int) w.varWSUpdatedBy;
				r.ssUpdatedAt = (DateTime) w.varWSUpdatedAt;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentRAGRecordList {
		public WORCStudentRAGRecord[] Array;


		public WORLStudentRAGRecordList(WORCStudentRAGRecord[] r) {
			if (r == null)
			Array = new WORCStudentRAGRecord[0];
			else
			Array = r;
		}
		public WORLStudentRAGRecordList() {
			Array = new WORCStudentRAGRecord[0];
		}

		public WORLStudentRAGRecordList(RLStudentRAGRecordList rl) {
			rl=(RLStudentRAGRecordList) rl.Duplicate();
			Array = new WORCStudentRAGRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentRAGRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentRAGRecordList {
		public static implicit operator RLStudentRAGRecordList(WORCStudentRAGRecord[] array) {
			RLStudentRAGRecordList rl = new RLStudentRAGRecordList();
			if (array != null) {
				foreach(WORCStudentRAGRecord val in array) {
					rl.Append((RCStudentRAGRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentRAGRecord[](RLStudentRAGRecordList rl) {
			WORCStudentRAGRecord[] array = new WORCStudentRAGRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentRAGRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentRAGRecordList {
		public static implicit operator RLStudentRAGRecordList(WORLStudentRAGRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentRAGRecordList(RLStudentRAGRecordList rl) {
			return new WORLStudentRAGRecordList(rl);
		}
		public static implicit operator WORCStudentRAGRecord[](WORLStudentRAGRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentRAGRecordList(WORCStudentRAGRecord[] array) {
			return new WORLStudentRAGRecordList(array);
		}
	}
}

