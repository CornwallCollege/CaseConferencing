/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearner_InitialAssessment {

	public class ScrnSSPChange: OSPageViewStateCompressed, IEmailScreen, IBookmarkableURL {


		public ScrnSSPChange(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamStaffName. Description:
		/// </summary>
		public string inParamStaffName = "";
		/// <summary>
		/// Screen Input Parameter inParamStudentName. Description:
		/// </summary>
		public string inParamStudentName = "";
		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Screen Input Parameter inParamURL. Description:
		/// </summary>
		public string inParamURL = "";
		protected OutSystems.HubEdition.WebWidgets.Container wt_EmailContainer6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_EmailContainer1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_EmailContainer8;
		/// <summary>
		/// Variable (wt_EmailLink3) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_EmailLink3;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}






		protected override string InnerGetStyleSheetIncludes() {


			return GetInlineStyleSheetInclude();

		}




		protected override void WriteBlockJavaScriptIncludes(StringWriter writer) {
			throw new InvalidOperationException();
		}




		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("XURUFnw_W06waIhK7nXxtQ", "SSPChange");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "XURUFnw_W06waIhK7nXxtQ", "SSPChange");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "XURUFnw_W06waIhK7nXxtQ", "SSPChange");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "XURUFnw_W06waIhK7nXxtQ", "SSPChange");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "XURUFnw_W06waIhK7nXxtQ", "SSPChange");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnSSPChange() {
		}




		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamStaffName!= "")) {
				parameters.Add(new Pair<string, string>("StaffName", HttpUtility.UrlEncode(inParamStaffName, Request.ContentEncoding)));
			}
			if ((inParamStudentName!= "")) {
				parameters.Add(new Pair<string, string>("StudentName", HttpUtility.UrlEncode(inParamStudentName, Request.ContentEncoding)));
			}
			if ((inParamStudentReference!= "")) {
				parameters.Add(new Pair<string, string>("StudentReference", HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			}
			if ((inParamURL!= "")) {
				parameters.Add(new Pair<string, string>("URL", HttpUtility.UrlEncode(inParamURL, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "SSPChange", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "SSPChange", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			AppInfo.GetAppInfo().IsLoadingScreen = !IsPostBack;
			heContext = Global.App.OsContext;
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_SSPChange"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamStaffName = (string) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamStudentName = (string) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamStudentReference = (string) paramValue;
							}
						}
						if (screenParameters.Count > 3) {
							object paramValue = screenParameters[3];
							if (paramValue != null) {
								inParamURL = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_SSPChange"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["StaffName"] != null) {
						inParamStaffName = Request.QueryString["StaffName"];
					}
					if (Request.QueryString["StudentName"] != null) {
						inParamStudentName = Request.QueryString["StudentName"];
					}
					if (Request.QueryString["StudentReference"] != null) {
						inParamStudentReference = Request.QueryString["StudentReference"];
					}
					if (Request.QueryString["URL"] != null) {
						inParamURL = Request.QueryString["URL"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["StaffName"] != null) {
						inParamStaffName = Request.Form["StaffName"];
					}
					if (Request.Form["StudentName"] != null) {
						inParamStudentName = Request.Form["StudentName"];
					}
					if (Request.Form["StudentReference"] != null) {
						inParamStudentReference = Request.Form["StudentReference"];
					}
					if (Request.Form["URL"] != null) {
						inParamURL = Request.Form["URL"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			if (!IsPostBack) {
				EmailHost = heContext.AppInfo.Properties.DefaultDnsName;
				CheckPermissions(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "Risk Assessment & Individual Student Support Plan";
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "SSPChange", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				FetchViewState();
			}

		}

		private void Page_PreRender(object sender, System.EventArgs e) {


			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}


		protected override void OnPreRenderComplete(EventArgs e) {
			base.OnPreRenderComplete(e);

			new ControlCss(GetInlineCss(this.EmailHost)).SetStyleFor(this);
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearner_InitialAssessment.ExceptionHandler(this, true).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			// Check if the request is from a valid IP
			if (!NetworkInterfaceUtils.IsLoopbackAddress(HttpContext.Current.Request.UserHostAddress)) {
				ErrorLog.LogApplicationError("Access to timerhandler with invalid IP: " + HttpContext.Current.Request.UserHostAddress,
				 "The email screen can only be accessed by the 127.0.0.1 IP", heContext, "ExecuteTimer");
				throw new Exception("The email screen can only be accessed by the 127.0.0.1 IP");
			}
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("XURUFnw_W06waIhK7nXxtQ"); 
			}
		}

		public bool isSecure {
			get {
				return false; 
			}
		}

		private string emailHost;

		public string EmailHost {
			get {
				return emailHost;
			}
			set {
				emailHost = value;
			}
		}

		/// <summary>
		/// wt_EmailContainer6 Functions
		/// </summary>
		public void cnt_EmailContainer6_onDataBinding(object sender, System.EventArgs e) {
			cnt_EmailContainer6_setInlineAttributes(sender, e);
		}
		public string cnt_EmailContainer6_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_EmailContainer6_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_EmailContainer6)
		/// </summary>
		/// <returns>The Visible State of wt_EmailContainer6</returns>
		public bool cnt_EmailContainer6_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression2 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 6ZpSHTEnF0yIL89fIKp2nw) Expression: "Dear " + StaffName + ","
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression2() {
			return (("Dear " +inParamStaffName) + ",");
		}
		/// <summary>
		/// wt_EmailContainer1 Functions
		/// </summary>
		public void cnt_EmailContainer1_onDataBinding(object sender, System.EventArgs e) {
			cnt_EmailContainer1_setInlineAttributes(sender, e);
		}
		public string cnt_EmailContainer1_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_EmailContainer1_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_EmailContainer1)
		/// </summary>
		/// <returns>The Visible State of wt_EmailContainer1</returns>
		public bool cnt_EmailContainer1_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression5 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = LH_S0FfE5EOkJ+nMk52Nhw) Expression: "A Risk Assessment &
		///  Individual Student Support Plan has been been created/updated for " + StudentName + " ("
		/// + StudentReference + ")."
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression5() {
			return (((("A Risk Assessment & Individual Student Support Plan has been been created/updated for " +inParamStudentName) + " (") +inParamStudentReference) + ").");
		}
		/// <summary>
		/// wt_EmailContainer8 Functions
		/// </summary>
		public void cnt_EmailContainer8_onDataBinding(object sender, System.EventArgs e) {
			cnt_EmailContainer8_setInlineAttributes(sender, e);
		}
		public string cnt_EmailContainer8_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_EmailContainer8_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_EmailContainer8)
		/// </summary>
		/// <returns>The Visible State of wt_EmailContainer8</returns>
		public bool cnt_EmailContainer8_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression7 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 0jYr58VgdkOk+zqLyUtV9Q) Expression: "Please click the following
		///  link to view : "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression7() {
			return "Please click the following link to view : ";
		}
		/// <summary>
		/// wt_EmailLink3 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_EmailLink3)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_EmailLink3)</returns>
		public string lnk_EmailLink3_NavigateUrl() {
			String varLcinParamURL = "";
			varLcinParamURL = inParamURL;
			string sURL = varLcinParamURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the visible state of component (wt_EmailLink3)
		/// </summary>
		/// <returns>The Visible State of wt_EmailLink3</returns>
		public bool lnk_EmailLink3_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression4 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = hrxApMDOl0uzE26X6KVZtA) Expression: URL
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression4() {
			return inParamURL;
		}





		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {

		}

		public void doAJAXRefreshScreen(HeContext heContext) {

		}


		List<EmailProcessor.EmailAttachment> attachments = new List<EmailProcessor.EmailAttachment>();

		Exception preparationException = null;

		protected override void Render(HtmlTextWriter writer) {
			StringWriter stringWriter = new StringWriter();
			// prevent ECT / Taskbox in eMails
			AppInfo.GetAppInfo().OsContext.ResponseDisabledFeedback = true;
			base.Render(new HtmlTextWriter(stringWriter));
			string emailContent = stringWriter.ToString();
			List<String> headers = new List<String>();




			try {
				if (preparationException != null) {
					throw preparationException;
				}
				int emailId = EmailProcessor.CreateEmail(GetBookmarkableURL(),
				emailContent.Replace(Convert.ToString((char) 0xA0), "&nbsp;"),
				Request.Params["_From"],
				Request.Params["_To"],
				Request.Params["_CC"],
				Request.Params["_BCC"],
				Convert.ToInt32(Request.Params["_ActivityId"]),
				Convert.ToInt32(Request.Params["_TenantId"]),
				10,
				 "1654445d-3f7c-4e5b-b068-884aee75f1b5",
				Request.Params["_StoreContent"] == "true",
				headers,
				attachments,
				EmailHost);

				writer.Write("<EmailId>" + emailId + "</EmailId>");
			} catch (Exception e) {
				WriteEmailExceptionInformation(writer, e);
				ErrorLog.LogApplicationError(e, heContext, "");
			}
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
		}




		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();

		}



	}




}
