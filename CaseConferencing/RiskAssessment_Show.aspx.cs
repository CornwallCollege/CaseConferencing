/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowBackofficeFlow {

	public class ScrnRiskAssessment_Show: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnRiskAssessment_Show(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamRiskAssessmentID. Description:
		/// </summary>
		public int inParamRiskAssessmentID = 0;
		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance97
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance97;
		/// <summary>
		/// Show Record widget auxiliar variables
		/// </summary>
		RCRiskAssessmentRecord ssRiskAssessmentShowRecord = new RCRiskAssessmentRecord(null);
		bool ssRiskAssessmentShowRecordDoDataBind;

		/// <summary>
		/// Variable "True" if the Widget wt_If47
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If47T;

		/// <summary>
		/// Variable "True" if the Widget wt_If47
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If47F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container105;
		/// <summary>
		/// Variable "True" if the Widget wt_If51
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If51T;

		/// <summary>
		/// Variable "True" if the Widget wt_If51
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If51F;
		protected OutSystems.HubEdition.WebWidgets.Container wtRiskAssessment_RiskAssessmentKeepInformedTable_Wra;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container104;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container126;
		/// <summary>
		/// Variable (wtNewRiskAssessmentKeepInformedLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtNewRiskAssessmentKeepInformedLink;
		/// <summary>
		/// Variable (wtlnkDeleteSelectedRiskAssessmentKeepInformed) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtlnkDeleteSelectedRiskAssessmentKeepInformed;
		private RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList _ssRiskAssessment_RiskAssessmentKeepInformedTableList = new RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList();
		public RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList ssRiskAssessment_RiskAssessmentKeepInformedTableList {
			get {
				return _ssRiskAssessment_RiskAssessmentKeepInformedTableList; 
			}
			set {
				_ssRiskAssessment_RiskAssessmentKeepInformedTableList = value;
				wtRiskAssessment_RiskAssessmentKeepInformedTable.DataSource = value;
				ssRiskAssessment_RiskAssessmentKeepInformedTableListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.OSDataGrid wtRiskAssessment_RiskAssessmentKeepInformedTable;
		public ArrayList wtRiskAssessment_RiskAssessmentKeepInformedTable_storage = new ArrayList();
		protected bool ssRiskAssessment_RiskAssessmentKeepInformedTableList_notUsedYet = true;
		protected bool ssRiskAssessment_RiskAssessmentKeepInformedTableListDoDataBind;
		protected bool ssRiskAssessment_RiskAssessmentKeepInformedTableListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container27;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container94;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container100;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_BulkSelect.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("xtiYx3JSx0m2RuTJ65a12A", "RiskAssessment_Show");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "xtiYx3JSx0m2RuTJ65a12A", "RiskAssessment_Show");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "xtiYx3JSx0m2RuTJ65a12A", "RiskAssessment_Show");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "xtiYx3JSx0m2RuTJ65a12A", "RiskAssessment_Show");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "xtiYx3JSx0m2RuTJ65a12A", "RiskAssessment_Show");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnRiskAssessment_Show() {
		}


		RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = new RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList();
		int queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount = 0;
		RCRiskAssessmentRecord resGetRiskAssessment_outParamRecord = new RCRiskAssessmentRecord(null);
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// GetRiskAssessment
			ExtendedActions.GetRiskAssessment(heContext, inParamRiskAssessmentID, out resGetRiskAssessment_outParamRecord);
			// Query datasetGetRiskAssessmentKeepInformedsByRiskAssessment
			int datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords = Math.Max(wtRiskAssessment_RiskAssessmentKeepInformedTable.StartIndex + wtRiskAssessment_RiskAssessmentKeepInformedTable.LineCount + 1, 0);
			queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessmentKeepInformedsByRiskAssessment(heContext, datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount, inParamRiskAssessmentID
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamRiskAssessmentID!=0)) {
				parameters.Add(new Pair<string, string>("RiskAssessmentID", HttpUtility.UrlEncode(Convert.ToString(inParamRiskAssessmentID), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "RiskAssessment_Show", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "RiskAssessment_Show", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance97 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance97");
			wt_Container105 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container105");
			wtRiskAssessment_RiskAssessmentKeepInformedTable_Wra = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRiskAssessment_RiskAssessmentKeepInformedTable_Wra");
			wt_Container104 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container104");
			wt_Container126 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container126");
			wtNewRiskAssessmentKeepInformedLink = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wtNewRiskAssessmentKeepInformedLink");
			wtlnkDeleteSelectedRiskAssessmentKeepInformed = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wtlnkDeleteSelectedRiskAssessmentKeepInformed");
			if (this.wtlnkDeleteSelectedRiskAssessmentKeepInformed != null) {
				this.wtlnkDeleteSelectedRiskAssessmentKeepInformed.Click += new System.EventHandler(this.wtlnkDeleteSelectedRiskAssessmentKeepInformed_Click);
			}
			wtRiskAssessment_RiskAssessmentKeepInformedTable = (OutSystems.HubEdition.WebWidgets.OSDataGrid) FindControl("wtRiskAssessment_RiskAssessmentKeepInformedTable");
			wtRiskAssessment_RiskAssessmentKeepInformedTable.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtRiskAssessment_RiskAssessmentKeepInformedTable.ClientID, true, -1);
			wtRiskAssessment_RiskAssessmentKeepInformedTable.LineCountExpression = () => 50;
			wtRiskAssessment_RiskAssessmentKeepInformedTable.EmptyMessageExpression = () => "No risk assessment keep informeds to show...";
			wt_Container27 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container27");
			wt_Container94 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container94");
			wt_Container100 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container100");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wtRiskAssessmentShow") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wtRiskAssessmentShow");
			}
			if (id == "wt_ShowRecordRow96") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow96");
			}
			if (id == "wt_ShowRecordCell130") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell130");
			}
			if (id == "wt_Text57") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text57");
			}
			if (id == "wt_ShowRecordCell136") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell136");
			}
			if (id == "wt_InlineExpression132") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression132");
			}
			if (id == "wt_ShowRecordRow69") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow69");
			}
			if (id == "wt_ShowRecordCell50") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell50");
			}
			if (id == "wt_Text123") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text123");
			}
			if (id == "wt_ShowRecordCell13") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell13");
			}
			if (id == "wt_InlineExpression139") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression139");
			}
			if (id == "wt_ShowRecordRow80") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow80");
			}
			if (id == "wt_ShowRecordCell16") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell16");
			}
			if (id == "wt_Text32") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text32");
			}
			if (id == "wt_ShowRecordCell127") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell127");
			}
			if (id == "wt_InlineExpression74") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression74");
			}
			if (id == "wt_ShowRecordRow64") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow64");
			}
			if (id == "wt_ShowRecordCell61") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell61");
			}
			if (id == "wt_Text77") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text77");
			}
			if (id == "wt_ShowRecordCell10") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell10");
			}
			if (id == "wt_InlineExpression101") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression101");
			}
			if (id == "wt_ShowRecordRow48") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow48");
			}
			if (id == "wt_ShowRecordCell83") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell83");
			}
			if (id == "wt_Text89") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text89");
			}
			if (id == "wt_ShowRecordCell60") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell60");
			}
			if (id == "wt_InlineExpression31") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression31");
			}
			if (id == "wt_ShowRecordRow106") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow106");
			}
			if (id == "wt_ShowRecordCell81") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell81");
			}
			if (id == "wt_Text33") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text33");
			}
			if (id == "wt_ShowRecordCell68") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell68");
			}
			if (id == "wt_InlineExpression119") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression119");
			}
			if (id == "wt_ShowRecordRow116") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow116");
			}
			if (id == "wt_ShowRecordCell49") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell49");
			}
			if (id == "wt_Text20") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text20");
			}
			if (id == "wt_ShowRecordCell75") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell75");
			}
			if (id == "wt_InlineExpression137") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression137");
			}
			if (id == "wt_ShowRecordRow1") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow1");
			}
			if (id == "wt_ShowRecordCell118") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell118");
			}
			if (id == "wt_Text117") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text117");
			}
			if (id == "wt_ShowRecordCell39") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell39");
			}
			if (id == "wt_If47") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_If47");
			}
			if (id == "wt_If47T") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_If47T");
			}
			if (id == "wt_Image67") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Image67");
			}
			if (id == "wt_If47F") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_If47F");
			}
			if (id == "wt_ShowRecordRow36") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow36");
			}
			if (id == "wt_ShowRecordCell70") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell70");
			}
			if (id == "wt_Text30") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text30");
			}
			if (id == "wt_ShowRecordCell38") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell38");
			}
			if (id == "wt_InlineExpression26") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression26");
			}
			if (id == "wt_ShowRecordRow59") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow59");
			}
			if (id == "wt_ShowRecordCell110") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell110");
			}
			if (id == "wt_Text115") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text115");
			}
			if (id == "wt_ShowRecordCell42") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell42");
			}
			if (id == "wt_InlineExpression113") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression113");
			}
			if (id == "wt_ShowRecordRow11") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow11");
			}
			if (id == "wt_ShowRecordCell114") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell114");
			}
			if (id == "wt_Text85") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text85");
			}
			if (id == "wt_ShowRecordCell52") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell52");
			}
			if (id == "wt_InlineExpression91") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression91");
			}
			if (id == "wt_ShowRecordRow65") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow65");
			}
			if (id == "wt_ShowRecordCell133") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell133");
			}
			if (id == "wt_Text79") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text79");
			}
			if (id == "wt_ShowRecordCell78") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell78");
			}
			if (id == "wt_InlineExpression76") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression76");
			}
			if (id == "wt_ShowRecordRow122") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow122");
			}
			if (id == "wt_ShowRecordCell98") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell98");
			}
			if (id == "wt_Text95") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text95");
			}
			if (id == "wt_ShowRecordCell131") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell131");
			}
			if (id == "wt_InlineExpression18") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression18");
			}
			if (id == "wt_ShowRecordRow125") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow125");
			}
			if (id == "wt_ShowRecordCell14") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell14");
			}
			if (id == "wt_Text8") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text8");
			}
			if (id == "wt_ShowRecordCell6") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell6");
			}
			if (id == "wt_InlineExpression66") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression66");
			}
			if (id == "wt_ShowRecordRow2") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow2");
			}
			if (id == "wt_ShowRecordCell87") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell87");
			}
			if (id == "wt_Text99") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text99");
			}
			if (id == "wt_ShowRecordCell93") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell93");
			}
			if (id == "wt_InlineExpression22") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression22");
			}
			if (id == "wt_ShowRecordRow84") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow84");
			}
			if (id == "wt_ShowRecordCell107") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell107");
			}
			if (id == "wt_Text37") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text37");
			}
			if (id == "wt_ShowRecordCell4") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell4");
			}
			if (id == "wt_InlineExpression41") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression41");
			}
			if (id == "wt_ShowRecordRow134") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow134");
			}
			if (id == "wt_ShowRecordCell103") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell103");
			}
			if (id == "wt_Text21") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text21");
			}
			if (id == "wt_ShowRecordCell7") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell7");
			}
			if (id == "wt_InlineExpression102") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression102");
			}
			if (id == "wt_ShowRecordRow128") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow128");
			}
			if (id == "wt_ShowRecordCell62") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell62");
			}
			if (id == "wt_Text92") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text92");
			}
			if (id == "wt_ShowRecordCell109") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell109");
			}
			if (id == "wt_InlineExpression129") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression129");
			}
			if (id == "wt_ShowRecordRow56") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow56");
			}
			if (id == "wt_ShowRecordCell111") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell111");
			}
			if (id == "wt_Text44") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text44");
			}
			if (id == "wt_ShowRecordCell63") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell63");
			}
			if (id == "wt_InlineExpression138") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression138");
			}
			if (id == "wt_ShowRecordRow86") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordRow86");
			}
			if (id == "wt_ShowRecordCell3") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell3");
			}
			if (id == "wt_Text24") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text24");
			}
			if (id == "wt_ShowRecordCell5") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_ShowRecordCell5");
			}
			if (id == "wt_InlineExpression90") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_InlineExpression90");
			}
			if (id == "wt_Container105") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Container105");
			}
			if (id == "wt_If51") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_If51");
			}
			if (id == "wt_If51T") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_If51T");
			}
			if (id == "wtRiskAssessment_RiskAssessmentKeepInformedTable_Wra") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wtRiskAssessment_RiskAssessmentKeepInformedTable_Wra");
			}
			if (id == "wt_Container104") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Container104");
			}
			if (id == "wt_Text124") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text124");
			}
			if (id == "wt_Container126") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Container126");
			}
			if (id == "wtNewRiskAssessmentKeepInformedLink") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wtNewRiskAssessmentKeepInformedLink");
			}
			if (id == "wt_Text35") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text35");
			}
			if (id == "RichWidgets_wt_WebBlockInstance46") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance46");
			}
			if (id == "wt_Text112") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text112");
			}
			if (id == "wtlnkDeleteSelectedRiskAssessmentKeepInformed") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wtlnkDeleteSelectedRiskAssessmentKeepInformed");
			}
			if (id == "wt_Text53") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Text53");
			}
			if (id == "wtRiskAssessment_RiskAssessmentKeepInformedTable") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wtRiskAssessment_RiskAssessmentKeepInformedTable");
			}
			if (id == "wtRiskAssessment_RiskAssessmentKeepInformedTableAjaxRfrsh") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wtRiskAssessment_RiskAssessmentKeepInformedTableAjaxRfrsh");
			}
			if (id == "wt_TableRecordsHeaderRow140") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_TableRecordsHeaderRow140");
			}
			if (id == "wt_Container27") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Container27");
			}
			if (id == "wt_Container94") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Container94");
			}
			if (id == "RichWidgets_wt_WebBlockInstance12") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance12");
			}
			if (id == "wt_Container100") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_Container100");
			}
			if (id == "RichWidgets_wt_WebBlockInstance88") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance88");
			}
			if (id == "wt_If51F") {
				return ThemeProvider_wt_WebBlockInstance97.wtMainContent.FindControl("wt_If51F");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_RiskAssessment_Show"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamRiskAssessmentID = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_RiskAssessment_Show"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["RiskAssessmentID"] != null) {
						inParamRiskAssessmentID = Convert.ToInt32(Request.QueryString["RiskAssessmentID"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["RiskAssessmentID"] != null) {
						inParamRiskAssessmentID = Convert.ToInt32(Request.Form["RiskAssessmentID"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssRiskAssessmentShowRecordDoDataBind = true;
				ssRiskAssessment_RiskAssessmentKeepInformedTableListDoDataBind = true;
				Title = "RiskAssessment Show"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RiskAssessment_Show", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowBackofficeFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotCaseConferencingUser("CaseConferencingUser role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("xtiYx3JSx0m2RuTJ65a12A"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvRefreshRiskAssessmentKeepInformedTable: VarsBag {
			public bool inParamResetFilters;
			public bool inParamResetPagination;
			public lcvRefreshRiskAssessmentKeepInformedTable(bool inParamResetFilters, bool inParamResetPagination) {
				this.inParamResetFilters = inParamResetFilters;
				this.inParamResetPagination = inParamResetPagination;
			}
		}
		/// <summary>
		/// Action <code>CommandRefreshRiskAssessmentKeepInformedTable</code> that represents the Service
		///  Studio screen action <code>RefreshRiskAssessmentKeepInformedTable</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshRiskAssessmentKeepInformedTable(HeContext heContext, bool inParamResetFilters, bool inParamResetPagination) {
			CheckPermissions(heContext);
			lcvRefreshRiskAssessmentKeepInformedTable localVars = new lcvRefreshRiskAssessmentKeepInformedTable(inParamResetFilters, inParamResetPagination);
			try {
				if (localVars.inParamResetPagination) {
					// ResetStartIndex
					Actions.ActionList_Navigation_ResetStartIndex(heContext, wtRiskAssessment_RiskAssessmentKeepInformedTable.ClientID);

				}
				// Query datasetGetRiskAssessmentKeepInformedsByRiskAssessment
				{
					int datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords = Math.Max(wtRiskAssessment_RiskAssessmentKeepInformedTable.StartIndex + wtRiskAssessment_RiskAssessmentKeepInformedTable.LineCount + 1, 0);
					queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessmentKeepInformedsByRiskAssessment(heContext, datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords, IterationMultiplicity.Multiple, out queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount, inParamRiskAssessmentID
					);
				}
				// Refresh Widget (wtRiskAssessment_RiskAssessmentKeepInformedTable_Wra)
				ssRiskAssessment_RiskAssessmentKeepInformedTableListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtRiskAssessment_RiskAssessmentKeepInformedTable_Wra, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvDeleteRiskAssessmentKeepInformeds: VarsBag {
			/// <summary>
			/// Variable <code>varLcCountDeleted</code> that represents the Service Studio local variable
			///  <code>CountDeleted</code> <p>Description: </p>
			/// </summary>
			public int varLcCountDeleted = 0;

			public RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList resListDuplicate_outParamList = new RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList();

			public lcvDeleteRiskAssessmentKeepInformeds() {
			}
		}
		/// <summary>
		/// Action <code>CommandDeleteRiskAssessmentKeepInformeds</code> that represents the Service Studio
		///  screen action <code>DeleteRiskAssessmentKeepInformeds</code> <p> Description: </p>
		/// </summary>
		private bool CommandDeleteRiskAssessmentKeepInformeds(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDeleteRiskAssessmentKeepInformeds localVars = new lcvDeleteRiskAssessmentKeepInformeds();
			try {
				// ListDuplicate
				localVars.resListDuplicate_outParamList = ((RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList) getWtRiskAssessment_RiskAssessmentKeepInformedTableList().Duplicate());
				// Foreach ListDuplicate.List
				localVars.resListDuplicate_outParamList.StartIteration();
				try {
					while (! localVars.resListDuplicate_outParamList.Eof) {
						// Selected?
						if ((localVars.resListDuplicate_outParamList.CurrentRec.ssSTBoolean.ssValue==true)) {
							// DeleteRiskAssessmentKeepInformed
							ExtendedActions.DeleteRiskAssessmentKeepInformed(heContext, localVars.resListDuplicate_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ssId);
							// ListRemove
							if (!IsAjaxRequest) {
								ExtendedActions.ListRemove(heContext, getWtRiskAssessment_RiskAssessmentKeepInformedTableList(), (localVars.resListDuplicate_outParamList.CurrentRowNumber-localVars.varLcCountDeleted));
							} else {
								((OSPageViewState) Page).AjaxRefresh(wtRiskAssessment_RiskAssessmentKeepInformedTable, (localVars.resListDuplicate_outParamList.CurrentRowNumber-localVars.varLcCountDeleted), "None", "Remove", true, null, StoreViewState);
							}
							// CountDeleted+=1
							localVars.varLcCountDeleted = (localVars.varLcCountDeleted+1); // CountDeleted = CountDeleted + 1

						}
						localVars.resListDuplicate_outParamList.Advance();
					}
				} finally {
					localVars.resListDuplicate_outParamList.EndIteration();
				}
				// Feedback_Message
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml((BuiltInFunction.IntegerToText(localVars.varLcCountDeleted) + " selected riskassessmentkeepinformeds were successfully deleted.")), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
				// List_BulkSelectToggleEnabled
				Actions.ActionList_BulkSelectToggleEnabled(heContext, wtRiskAssessment_RiskAssessmentKeepInformedTable.ClientID, wtlnkDeleteSelectedRiskAssessmentKeepInformed.ClientID);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance97 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance97_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wtRiskAssessmentShow Functions
		/// </summary>
		public void wtRiskAssessmentShow_onDataBindingDataSource(object sender, System.EventArgs e) {
			ssRiskAssessmentShowRecord = ((RCRiskAssessmentRecord) resGetRiskAssessment_outParamRecord.ssENRiskAssessment);
			ssRiskAssessmentShowRecordDoDataBind = false;
		}
		/// <summary>
		/// Function that returns the record of the wtRiskAssessmentShow widget
		/// </summary>
		/// <returns>The record associated with the widget</returns>
		public RCRiskAssessmentRecord getWtRiskAssessmentShowRecord() {
			if (ssRiskAssessmentShowRecordDoDataBind) {
				wtRiskAssessmentShow_onDataBindingDataSource(this, null);
			}

			return ssRiskAssessmentShowRecord;
		}
		/// <summary>
		/// Function that initializes the record of the wtRiskAssessmentShow widget if needed
		/// </summary>
		/// <returns>Nothing</returns>
		public void wtRiskAssessmentShow_initializeRecord(object sender, EventArgs e) {
			getWtRiskAssessmentShowRecord();
		}
		/// <summary>
		/// wt_InlineExpression132 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = tRt++zYULE2Y_4+hmvkVWg) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.StudentReference
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression132() {
			return getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssStudentReference;
		}
		/// <summary>
		/// wt_InlineExpression139 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = df5K_8cnfEeDM6A67ewjMA) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.LeadStaffMember
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression139() {
			return getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssLeadStaffMember;
		}
		/// <summary>
		/// wt_InlineExpression74 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = QBIwlF7TlEW5TYGEBv+SdQ) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.RiskAssessmentSSPReason
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression74() {
			return Convert.ToString(getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssRiskAssessmentSSPReason);
		}
		/// <summary>
		/// wt_InlineExpression101 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = MdQVusSyCEW2kXT97STfdw) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.RiskAssessmentSSPReasonOther
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression101() {
			return getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssRiskAssessmentSSPReasonOther;
		}
		/// <summary>
		/// wt_InlineExpression31 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = vAt9PrevqE+WIFH9UfVPWQ) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.RiskAssessmentCompletedBy
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression31() {
			return Convert.ToString(getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssRiskAssessmentCompletedBy);
		}
		/// <summary>
		/// wt_InlineExpression119 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Df693G1C7USHPM5BblBAqQ) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.RiskAssessmentSourceOfEviden
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression119() {
			return Convert.ToString(getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssRiskAssessmentSourceOfEviden);
		}
		/// <summary>
		/// wt_InlineExpression137 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = pRjR_pGfDEeo6zaCod9fFg) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.RiskAssessmentSOEOther
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression137() {
			return getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssRiskAssessmentSOEOther;
		}
		/// <summary>
		/// wt_If47 Functions
		/// </summary>
		bool if_wt_If47_hasRun=false;
		bool if_wt_If47_evalResult;
		public bool if_wt_If47() {
			if (if_wt_If47_hasRun) {
				if_wt_If47_hasRun = false;
				return if_wt_If47_evalResult;
			}
			if_wt_If47_hasRun = true;
			if_wt_If47_evalResult = getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssHasCapacity;
			return if_wt_If47_evalResult;
		}

		/// <summary>
		/// wt_InlineExpression26 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = BDqYNzFAj0GimbcWaaGVNA) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.HasCapacityEvidence
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression26() {
			return getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssHasCapacityEvidence;
		}
		/// <summary>
		/// wt_InlineExpression113 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 0t5z1eT7pk6efjfYLBJtew) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.RiskAssessmentWhoIsAtRisk
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression113() {
			return Convert.ToString(getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk);
		}
		/// <summary>
		/// wt_InlineExpression91 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = keiFrLKrTkiB1on6uJhaTw) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.RiskAssessmentWATOther
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression91() {
			return getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssRiskAssessmentWATOther;
		}
		/// <summary>
		/// wt_InlineExpression76 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = hI4qmG6yzEW+fjDt07T+xw) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.WhatAreTheRisks
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression76() {
			return getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssWhatAreTheRisks;
		}
		/// <summary>
		/// wt_InlineExpression18 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = ePn4IkpiTEuHbtNW70TqRg) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.History
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression18() {
			return getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssHistory;
		}
		/// <summary>
		/// wt_InlineExpression66 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = FZjkgs84NEmA1HG1kI2X2g) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.Monitor
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression66() {
			return getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssMonitor;
		}
		/// <summary>
		/// wt_InlineExpression22 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = +Q6RL3saYUOx8Y495BlQWg) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.WhatHappensRiskIncreases
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression22() {
			return getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssWhatHappensRiskIncreases;
		}
		/// <summary>
		/// wt_InlineExpression41 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = NDZ7UJsU+06nSvHUTV1PUQ) Expression:
		///  Date_PrettyFormat(RiskAssessmentShow.Record.RiskAssessment.AutumnReviewDate)
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression41() {
			return Functions.rssespacerichwidgets_ActionDate_PrettyFormat(heContext, getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssAutumnReviewDate);
		}
		/// <summary>
		/// wt_InlineExpression102 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = z0PBuvuhVUKfj3M9jfrCqA) Expression:
		///  Date_PrettyFormat(RiskAssessmentShow.Record.RiskAssessment.SpringReviewDate)
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression102() {
			return Functions.rssespacerichwidgets_ActionDate_PrettyFormat(heContext, getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssSpringReviewDate);
		}
		/// <summary>
		/// wt_InlineExpression129 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Ei8I9iLraE+Ie2lLnMgieg) Expression:
		///  Date_PrettyFormat(RiskAssessmentShow.Record.RiskAssessment.SummerReviewDate)
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression129() {
			return Functions.rssespacerichwidgets_ActionDate_PrettyFormat(heContext, getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssSummerReviewDate);
		}
		/// <summary>
		/// wt_InlineExpression138 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = gaHg_gLgdUGeXCXQy+x63A) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.CreatedBy
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression138() {
			return Convert.ToString(getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssCreatedBy);
		}
		/// <summary>
		/// wt_InlineExpression90 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = j1bKpqZdFEOjNjQKErB9zw) Expression:
		///  RiskAssessmentShow.Record.RiskAssessment.LastUpdatedBy
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression90() {
			return Convert.ToString(getWtRiskAssessmentShowRecord().ssENRiskAssessment.ssLastUpdatedBy);
		}
		/// <summary>
		/// wt_Container105 Functions
		/// </summary>
		public void cnt_Container105_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container105_setInlineAttributes(sender, e);
		}
		public string cnt_Container105_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container105_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container105)
		/// </summary>
		/// <returns>The Visible State of wt_Container105</returns>
		public bool cnt_Container105_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_If51 Functions
		/// </summary>
		bool if_wt_If51_hasRun=false;
		bool if_wt_If51_evalResult;
		public bool if_wt_If51() {
			if (if_wt_If51_hasRun) {
				if_wt_If51_hasRun = false;
				return if_wt_If51_evalResult;
			}
			if_wt_If51_hasRun = true;
			if_wt_If51_evalResult = (inParamRiskAssessmentID!=BuiltInFunction.NullIdentifier());
			return if_wt_If51_evalResult;
		}

		/// <summary>
		/// wtRiskAssessment_RiskAssessmentKeepInformedTable_Wra Functions
		/// </summary>
		public void cntRiskAssessment_RiskAssessmentKeepInformedTable_Wra_onDataBinding(object sender, System.EventArgs e) {
			cntRiskAssessment_RiskAssessmentKeepInformedTable_Wra_setInlineAttributes(sender, e);
		}
		public string cntRiskAssessment_RiskAssessmentKeepInformedTable_Wra_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntRiskAssessment_RiskAssessmentKeepInformedTable_Wra_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRiskAssessment_RiskAssessmentKeepInformedTable_Wra)
		/// </summary>
		/// <returns>The Visible State of wtRiskAssessment_RiskAssessmentKeepInformedTable_Wra</returns>
		public bool cntRiskAssessment_RiskAssessmentKeepInformedTable_Wra_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container104 Functions
		/// </summary>
		public void cnt_Container104_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container104_setInlineAttributes(sender, e);
		}
		public string cnt_Container104_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container104_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container104)
		/// </summary>
		/// <returns>The Visible State of wt_Container104</returns>
		public bool cnt_Container104_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container126 Functions
		/// </summary>
		public void cnt_Container126_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container126_setInlineAttributes(sender, e);
		}
		public string cnt_Container126_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container126_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container126)
		/// </summary>
		/// <returns>The Visible State of wt_Container126</returns>
		public bool cnt_Container126_isVisible() {
			return true;
		}

		/// <summary>
		/// wtNewRiskAssessmentKeepInformedLink Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtNewRiskAssessmentKeepInformedLink)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtNewRiskAssessmentKeepInformedLink)</returns>
		public string lnkNewRiskAssessmentKeepInformedLink_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("RiskAssessmentKeepInformedId", System.Web.HttpUtility.UrlEncode(Convert.ToString(BuiltInFunction.NullIdentifier()), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("RiskAssessmentId", System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamRiskAssessmentID), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "RiskAssessment_RiskAssessmentKeepInformed_PopupEdi", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtNewRiskAssessmentKeepInformedLink)
		/// </summary>
		/// <returns>title of the Link (wtNewRiskAssessmentKeepInformedLink)</returns>
		public string
		lnkNewRiskAssessmentKeepInformedLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtNewRiskAssessmentKeepInformedLink)
		/// </summary>
		/// <returns>The Visible State of wtNewRiskAssessmentKeepInformedLink</returns>
		public bool lnkNewRiskAssessmentKeepInformedLink_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtNewRiskAssessmentKeepInformedLink)
		/// </summary>
		/// <returns>The Enabled State of wtNewRiskAssessmentKeepInformedLink</returns>
		public bool lnkNewRiskAssessmentKeepInformedLink_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance46 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance46_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
			widget.inParamLinkOrButtonWidgetId = wtNewRiskAssessmentKeepInformedLink.ClientID;
			widget.inParamTitle = "New Risk Assessment Keep Informed";
			widget.inParamWidthPx = -1;
			widget.inParamHeightPx = -1;
			widget.inParamAutoResize = true;
			widget.inParamRecenterOnResize = false;
			widget.inParamHideCloseButton = false;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance46
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance46_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshRiskAssessmentKeepInformedTable(heContext
			, false, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wtlnkDeleteSelectedRiskAssessmentKeepInformed Functions
		/// </summary>
		public void lnklnkDeleteSelectedRiskAssessmentKeepInformed_onDataBinding(object sender, System.EventArgs e) {
			string msg = OutSystems.HubEdition.RuntimePlatform.RuntimePlatformUtils.JavaScriptEscString("This operation can\'t be undone. Are you sure you want to delete these risk assessment keep informeds? Click OK to proceed.");
			((OutSystems.HubEdition.WebWidgets.LinkButton) sender).ConfirmationMessage = msg;
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtlnkDeleteSelectedRiskAssessmentKeepInformed_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandDeleteRiskAssessmentKeepInformeds(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wtlnkDeleteSelectedRiskAssessmentKeepInformed)
		/// </summary>
		/// <returns>title of the Link (wtlnkDeleteSelectedRiskAssessmentKeepInformed)</returns>
		public string
		lnklnkDeleteSelectedRiskAssessmentKeepInformed_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtlnkDeleteSelectedRiskAssessmentKeepInformed)
		/// </summary>
		/// <returns>The Visible State of wtlnkDeleteSelectedRiskAssessmentKeepInformed</returns>
		public bool lnklnkDeleteSelectedRiskAssessmentKeepInformed_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtlnkDeleteSelectedRiskAssessmentKeepInformed)
		/// </summary>
		/// <returns>The Enabled State of wtlnkDeleteSelectedRiskAssessmentKeepInformed</returns>
		public bool lnklnkDeleteSelectedRiskAssessmentKeepInformed_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtRiskAssessment_RiskAssessmentKeepInformedTable Functions
		/// </summary>
		public void recTableRiskAssessment_RiskAssessmentKeepInformedTable_onDataBinding(object sender, System.EventArgs e) {
			// widget wtRiskAssessment_RiskAssessmentKeepInformedTable
			ssRiskAssessment_RiskAssessmentKeepInformedTableList = queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList;
			ssRiskAssessment_RiskAssessmentKeepInformedTableListDoDataBind = false;
			ssRiskAssessment_RiskAssessmentKeepInformedTableListDataBound = true;
			wtRiskAssessment_RiskAssessmentKeepInformedTable.ShowHeader = true;
		}
		public void recTableRiskAssessment_RiskAssessmentKeepInformedTable_Select(object sender, DataGridCommandEventArgs e) {
			if (e.Item.DataSetIndex != -1) {
				if (ssRiskAssessment_RiskAssessmentKeepInformedTableList.Length > 0) {
					ssRiskAssessment_RiskAssessmentKeepInformedTableList.CurrentRec = ssRiskAssessment_RiskAssessmentKeepInformedTableList[ssRiskAssessment_RiskAssessmentKeepInformedTableList.CurrentRowNumber];
				}
				if (ssRiskAssessment_RiskAssessmentKeepInformedTableList.Length > e.Item.DataSetIndex) {
					ssRiskAssessment_RiskAssessmentKeepInformedTableList.CurrentRec = ssRiskAssessment_RiskAssessmentKeepInformedTableList[e.Item.DataSetIndex];
					ssRiskAssessment_RiskAssessmentKeepInformedTableList.CurrentRowNumber = e.Item.DataSetIndex;
				}
			}
			if (e is DataGridCommandAjaxEventArgs) {
				((DataGridCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recTableRiskAssessment_RiskAssessmentKeepInformedTable_Store(object dataItem, int index) {
			RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord tmprec = (RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENUser.ssId == 0?(object) null: tmprec.ssENUser.ssId);
			tmpFields.Add(tmprec.ssENUser.ssName == "" ?(object) null: tmprec.ssENUser.ssName);
			tmpFields.Add(tmprec.ssENUser.ssUsername == "" ?(object) null: tmprec.ssENUser.ssUsername);
			tmpFields.Add(tmprec.ssENUser.ssPassword == "" ?(object) null: tmprec.ssENUser.ssPassword);
			tmpFields.Add(tmprec.ssENUser.ssEmail == "" ?(object) null: tmprec.ssENUser.ssEmail);
			tmpFields.Add(tmprec.ssENUser.ssMobilePhone == "" ?(object) null: tmprec.ssENUser.ssMobilePhone);
			tmpFields.Add(tmprec.ssENUser.ssExternal_Id == "" ?(object) null: tmprec.ssENUser.ssExternal_Id);
			tmpFields.Add(tmprec.ssENUser.ssCreation_Date == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssENUser.ssCreation_Date);
			tmpFields.Add(tmprec.ssENUser.ssLast_Login == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssENUser.ssLast_Login);
			tmpFields.Add(tmprec.ssENUser.ssIs_Active == false?(object) null: tmprec.ssENUser.ssIs_Active);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENUser.ChangedAttributes, new BitArray(new bool[] {
				false, true, true, true, true, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENUser.OptimizedAttributes, new BitArray(new bool[] {
				true, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(tmprec.ssSTBoolean.ssValue == false?(object) null: tmprec.ssSTBoolean.ssValue);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssId == 0?(object) null: tmprec.ssENRiskAssessment.ssId);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssStudentReference == "" ?(object) null: tmprec.ssENRiskAssessment.ssStudentReference);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssLeadStaffMember == "" ?(object) null: tmprec.ssENRiskAssessment.ssLeadStaffMember);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssRiskAssessmentSSPReason == 0?(object) null: tmprec.ssENRiskAssessment.ssRiskAssessmentSSPReason);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther == "" ?(object) null: tmprec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssRiskAssessmentCompletedBy == 0?(object) null: tmprec.ssENRiskAssessment.ssRiskAssessmentCompletedBy);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden == 0?(object) null: tmprec.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssRiskAssessmentSOEOther == "" ?(object) null: tmprec.ssENRiskAssessment.ssRiskAssessmentSOEOther);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssHasCapacity == false?(object) null: tmprec.ssENRiskAssessment.ssHasCapacity);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssHasCapacityEvidence == "" ?(object) null: tmprec.ssENRiskAssessment.ssHasCapacityEvidence);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk == 0?(object) null: tmprec.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssRiskAssessmentWATOther == "" ?(object) null: tmprec.ssENRiskAssessment.ssRiskAssessmentWATOther);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssWhatAreTheRisks == "" ?(object) null: tmprec.ssENRiskAssessment.ssWhatAreTheRisks);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssHistory == "" ?(object) null: tmprec.ssENRiskAssessment.ssHistory);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssMonitor == "" ?(object) null: tmprec.ssENRiskAssessment.ssMonitor);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssWhatHappensRiskIncreases == "" ?(object) null: tmprec.ssENRiskAssessment.ssWhatHappensRiskIncreases);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssAutumnReviewDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssENRiskAssessment.ssAutumnReviewDate);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssSpringReviewDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssENRiskAssessment.ssSpringReviewDate);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssSummerReviewDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssENRiskAssessment.ssSummerReviewDate);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssCreatedBy == 0?(object) null: tmprec.ssENRiskAssessment.ssCreatedBy);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssLastUpdatedBy == 0?(object) null: tmprec.ssENRiskAssessment.ssLastUpdatedBy);
			tmpFields.Add(tmprec.ssENRiskAssessment.ssLastUpdatedOn == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: tmprec.ssENRiskAssessment.ssLastUpdatedOn);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENRiskAssessment.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENRiskAssessment.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(tmprec.ssENRiskAssessmentKeepInformed.ssId == 0?(object) null: tmprec.ssENRiskAssessmentKeepInformed.ssId);
			tmpFields.Add(tmprec.ssENRiskAssessmentKeepInformed.ssRiskAssessment == 0?(object) null: tmprec.ssENRiskAssessmentKeepInformed.ssRiskAssessment);
			tmpFields.Add(tmprec.ssENRiskAssessmentKeepInformed.ssUser == 0?(object) null: tmprec.ssENRiskAssessmentKeepInformed.ssUser);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENRiskAssessmentKeepInformed.ChangedAttributes, new BitArray(new bool[] {
				true, true, true
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENRiskAssessmentKeepInformed.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false
			}
			))));
			if (index < wtRiskAssessment_RiskAssessmentKeepInformedTable_storage.Count) {
				wtRiskAssessment_RiskAssessmentKeepInformedTable_storage[index] = tmpFields;
			} else {
				wtRiskAssessment_RiskAssessmentKeepInformedTable_storage.Add(tmpFields);
			}
			return "";
		}
		public void recTableRiskAssessment_RiskAssessmentKeepInformedTable_Restore() {

			#region fetch ssRiskAssessment_RiskAssessmentKeepInformedTableList.

			// Read the needed fields of ssRiskAssessment_RiskAssessmentKeepInformedTableList from storewtRiskAssessment_RiskAssessmentKeepInformedTable_list
			ssRiskAssessment_RiskAssessmentKeepInformedTableList = new RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList();
			ArrayList storewtRiskAssessment_RiskAssessmentKeepInformedTable_list;
			storewtRiskAssessment_RiskAssessmentKeepInformedTable_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtRiskAssessment_RiskAssessmentKeepInformedTable_list", null);
			if (storewtRiskAssessment_RiskAssessmentKeepInformedTable_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list in storewtRiskAssessment_RiskAssessmentKeepInformedTable_list) {
					if (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list != null) {
						// Aux current record variable
						RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list = new RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord(null);
						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ssId = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[0] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[0]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ssName = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[1] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[1]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ssUsername = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[2] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[2]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ssPassword = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[3] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[3]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ssEmail = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[4] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[4]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ssMobilePhone = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[5] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[5]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ssExternal_Id = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[6] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[6]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ssCreation_Date = (DateTime) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[7] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[7]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ssLast_Login = (DateTime) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[8] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[8]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ssIs_Active = (bool) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[9] == null ? false: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[9]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[10]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENUser.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[11]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssSTBoolean.ssValue = (bool) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[12] == null ? false: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[12]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssId = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[13] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[13]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssStudentReference = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[14] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[14]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssLeadStaffMember = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[15] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[15]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssRiskAssessmentSSPReason = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[16] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[16]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[17] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[17]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssRiskAssessmentCompletedBy = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[18] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[18]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssRiskAssessmentSourceOfEviden = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[19] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[19]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssRiskAssessmentSOEOther = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[20] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[20]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssHasCapacity = (bool) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[21] == null ? false: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[21]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssHasCapacityEvidence = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[22] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[22]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssRiskAssessmentWhoIsAtRisk = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[23] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[23]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssRiskAssessmentWATOther = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[24] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[24]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssWhatAreTheRisks = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[25] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[25]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssHistory = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[26] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[26]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssMonitor = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[27] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[27]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssWhatHappensRiskIncreases = (string) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[28] == null ? "": tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[28]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssAutumnReviewDate = (DateTime) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[29] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[29]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssSpringReviewDate = (DateTime) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[30] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[30]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssSummerReviewDate = (DateTime) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[31] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[31]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssCreatedBy = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[32] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[32]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssLastUpdatedBy = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[33] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[33]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ssLastUpdatedOn = (DateTime) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[34] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[34]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[35]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessment.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[36]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessmentKeepInformed.ssId = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[37] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[37]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessmentKeepInformed.ssRiskAssessment = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[38] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[38]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessmentKeepInformed.ssUser = (int) (tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[39] == null ? 0: tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[39]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessmentKeepInformed.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[40]);

						tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list.ssENRiskAssessmentKeepInformed.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtRiskAssessment_RiskAssessmentKeepInformedTable_list[41]);

						ssRiskAssessment_RiskAssessmentKeepInformedTableList.Append(tmpAuxCurrentRecordwtRiskAssessment_RiskAssessmentKeepInformedTable_list);
					}
				}
			}
			ssRiskAssessment_RiskAssessmentKeepInformedTableList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssRiskAssessment_RiskAssessmentKeepInformedTableList runtime properties state.


			if (storewtRiskAssessment_RiskAssessmentKeepInformedTable_list.Count > 0) {
				ssRiskAssessment_RiskAssessmentKeepInformedTableList.RestoreRecordListState(storewtRiskAssessment_RiskAssessmentKeepInformedTable_list.Count - 1, false);
			} else {
				ssRiskAssessment_RiskAssessmentKeepInformedTableList.CurrentRowNumber = 0;
			}

			#endregion

			wtRiskAssessment_RiskAssessmentKeepInformedTable_storage = storewtRiskAssessment_RiskAssessmentKeepInformedTable_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recTableRiskAssessment_RiskAssessmentKeepInformedTable_Clear(object sender, EventArgs e) {
			wtRiskAssessment_RiskAssessmentKeepInformedTable_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recTableRiskAssessment_RiskAssessmentKeepInformedTable_Rebuild(int startIndex, int lineCount) {
			if (ssRiskAssessment_RiskAssessmentKeepInformedTableList.Length != -1) {
				wtRiskAssessment_RiskAssessmentKeepInformedTable_storage.Clear();
				for (int i=startIndex; i<ssRiskAssessment_RiskAssessmentKeepInformedTableList.Data.Count && i<startIndex+lineCount; i++) {
					recTableRiskAssessment_RiskAssessmentKeepInformedTable_Store(ssRiskAssessment_RiskAssessmentKeepInformedTableList.Data[i], wtRiskAssessment_RiskAssessmentKeepInformedTable_storage.Count);
				}
			}
		}
		public void recTableRiskAssessment_RiskAssessmentKeepInformedTable_ListRefreshDataBind(object sender, EventArgs e) {
			wtRiskAssessment_RiskAssessmentKeepInformedTable.ShowHeader = true;
		}
		/// <summary>
		/// Function that returns the list of the wtRiskAssessment_RiskAssessmentKeepInformedTable widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList getWtRiskAssessment_RiskAssessmentKeepInformedTableList() {
			if (ssRiskAssessment_RiskAssessmentKeepInformedTableListDoDataBind) {
				recTableRiskAssessment_RiskAssessmentKeepInformedTable_onDataBinding(this, null);
			}

			return ssRiskAssessment_RiskAssessmentKeepInformedTableList;
		}
		/// <summary>
		/// wt_TableRecordsHeaderCell45 Functions
		/// </summary>
		public void wt_TableRecordsHeaderCell45_onDataBinding(object sender, System.EventArgs e) {
			wt_TableRecordsHeaderCell45_setInlineAttributes(sender, e);
		}
		public string wt_TableRecordsHeaderCell45_setInlineAttributes(object sender, System.EventArgs e) {
			((WebControl) sender).Width = Unit.Parse("1px");
			return "";
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance43 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance43_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_BulkSelect widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_BulkSelect) sender;
			widget.inParamTableRecordsWidgetId = wtRiskAssessment_RiskAssessmentKeepInformedTable.ClientID;
			widget.inParamAssociatedLinkIds = wtlnkDeleteSelectedRiskAssessmentKeepInformed.ClientID;
			widget.inParamEnabled = true;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance9 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance9_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{User}.[Name]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance9
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance9_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshRiskAssessmentKeepInformedTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_CheckBox15 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 8pFdH4uY6EOHMOO35_ErKQ
		/// </summary>
		/// <returns>The Value of the Check Box 8pFdH4uY6EOHMOO35_ErKQ</returns>
		public bool chk_CheckBox15_checked_value() {
			return getWtRiskAssessment_RiskAssessmentKeepInformedTableList().CurrentRec.ssSTBoolean.ssValue;
		}
		public void chk_CheckBox15_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is DataGridItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((DataGridItem) parentControl).DataSetIndex;
				if (ssRiskAssessment_RiskAssessmentKeepInformedTableList.Length > parentControlIndex && parentControlIndex > -1) {
					ssRiskAssessment_RiskAssessmentKeepInformedTableList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtRiskAssessment_RiskAssessmentKeepInformedTableList().CurrentRec.ssSTBoolean.ssValue = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox15)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox15</returns>
		public bool chk_CheckBox15_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox15)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox15</returns>
		public bool chk_CheckBox15_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression120 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = arom3ukaMUOsjfKR0wpLTw) Expression:
		///  RiskAssessment_RiskAssessmentKeepInformedTable.List.Current.User.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression120() {
			return getWtRiskAssessment_RiskAssessmentKeepInformedTableList().CurrentRec.ssENUser.ssName;
		}
		/// <summary>
		/// wt_Container27 Functions
		/// </summary>
		public void cnt_Container27_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container27_setInlineAttributes(sender, e);
		}
		public string cnt_Container27_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container27_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container27)
		/// </summary>
		/// <returns>The Visible State of wt_Container27</returns>
		public bool cnt_Container27_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container94 Functions
		/// </summary>
		public void cnt_Container94_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container94_setInlineAttributes(sender, e);
		}
		public string cnt_Container94_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container94_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container94)
		/// </summary>
		/// <returns>The Visible State of wt_Container94</returns>
		public bool cnt_Container94_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance12 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance12_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter) sender;
			widget.inParamStartIndex = Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtRiskAssessment_RiskAssessmentKeepInformedTable.ClientID, true, -1);
			widget.inParamTotalRowCount = queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount;
			widget.inParamLineCount = wtRiskAssessment_RiskAssessmentKeepInformedTable.RtWidget.LineCount;
		}
		/// <summary>
		/// wt_Container100 Functions
		/// </summary>
		public void cnt_Container100_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container100_setInlineAttributes(sender, e);
		}
		public string cnt_Container100_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container100_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container100)
		/// </summary>
		/// <returns>The Visible State of wt_Container100</returns>
		public bool cnt_Container100_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance88 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance88_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation) sender;
			widget.inParamListWidgetId = wtRiskAssessment_RiskAssessmentKeepInformedTable.ClientID;
			widget.inParamLineCount = wtRiskAssessment_RiskAssessmentKeepInformedTable.RtWidget.LineCount;
			widget.inParamTotalRowCount = queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount;
			widget.inParamMaxPageNumbers = 5;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance88
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance88_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshRiskAssessmentKeepInformedTable(heContext
			, false, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}


		public static class FuncCommandRefreshRiskAssessmentKeepInformedTable {
		}
		public static class FuncCommandDeleteRiskAssessmentKeepInformeds {
		}
		public static class FuncssPreparation {

			private static void datasetGetRiskAssessmentKeepInformedsByRiskAssessmentReadDB(ref RCUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssENRiskAssessment.Read(r, ref index);
				rec.ssENRiskAssessmentKeepInformed.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetRiskAssessmentKeepInformedsByRiskAssessment" of Action "Preparation"
			/// </summary>
			public static RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList datasetGetRiskAssessmentKeepInformedsByRiskAssessment(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Multiple {RiskAssessment_RiskAssessmentKeepInformedTable}
				// Refresh Query IEj4PnAQlEKzReG9TKke+Q Iterations: Multiple {RiskAssessment_RiskAssessmentKeepInformedTable}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				string sql = "";
				string sqlCount = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, ENRiskAssessment.[ID] o2, ENRiskAssessment.[STUDENTREFERENCE] o3, ENRiskAssessment.[LEADSTAFFMEMBER] o4, ENRiskAssessment.[RISKASSESSMENTSSPREASON] o5, ENRiskAssessment.[RISKASSESSMENTSSPREASONOTHER] o6, ENRiskAssessment.[RISKASSESSMENTCOMPLETEDBY] o7, ENRiskAssessment.[RISKASSESSMENTSOURCEOFEVIDEN] o8, ENRiskAssessment.[RISKASSESSMENTSOEOTHER] o9, ENRiskAssessment.[HASCAPACITY] o10, ENRiskAssessment.[HASCAPACITYEVIDENCE] o11, ENRiskAssessment.[RISKASSESSMENTWHOISATRISK] o12, ENRiskAssessment.[RISKASSESSMENTWATOTHER] o13, ENRiskAssessment.[WHATARETHERISKS] o14, ENRiskAssessment.[HISTORY] o15, ENRiskAssessment.[MONITOR] o16, ENRiskAssessment.[WHATHAPPENSRISKINCREASES] o17, ENRiskAssessment.[AUTUMNREVIEWDATE] o18, ENRiskAssessment.[SPRINGREVIEWDATE] o19, ENRiskAssessment.[SUMMERREVIEWDATE] o20, ENRiskAssessment.[CREATEDBY] o21, ENRiskAssessment.[LASTUPDATEDBY] o22, ENRiskAssessment.[LASTUPDATEDON] o23, ENRiskAssessmentKeepInformed.[ID] o24, ENRiskAssessmentKeepInformed.[RISKASSESSMENT] o25, ENRiskAssessmentKeepInformed.[USER] o26, ENUser.[ID] o27, ENUser.[NAME] o28, ENUser.[USERNAME] o29, ENUser.[PASSWORD] o30, ENUser.[EMAIL] o31, ENUser.[MOBILEPHONE] o32, ENUser.[EXTERNAL_ID] o33, ENUser.[CREATION_DATE] o34, ENUser.[LAST_LOGIN] o35, ENUser.[IS_ACTIVE] o36");
				fromBuilder.Append(" FROM (({RiskAssessmentKeepInformed} ENRiskAssessmentKeepInformed Left JOIN {RiskAssessment} ENRiskAssessment ON (ENRiskAssessmentKeepInformed.[RISKASSESSMENT] = ENRiskAssessment.[ID]))  Left JOIN {User} ENUser ON (ENRiskAssessmentKeepInformed.[USER] = ENUser.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentKeepInformed.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
					sqlCountCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENRiskAssessment.[LASTUPDATEDON] DESC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCount = "SELECT COUNT(1) " + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString();
				sqlCount = AppUtils.Instance.ReplaceEntityReferences(heContext, sqlCount);
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList outParamList = new RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsByRiskAssessmentReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[4];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false
				}
				);
				opt[1] = new BitArray(new bool[] {
					false
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
				}
				);
				opt[3] = new BitArray(new bool[] {
					false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList _tmp = new RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList();
					_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsByRiskAssessmentReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RiskAssessment_Show.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
						outParamList = (RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						if (maxRecords > 0 && outParamList.Length == maxRecords)
						outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.RiskAssessment_Show.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.Count", false));
						else
						outParamCount = outParamList.Length;
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.RiskAssessment_Show.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.Count", false));
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RiskAssessment_Show.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList _tmp = new RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList();
						_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentKeepInformedsByRiskAssessmentReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RiskAssessment_Show.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
							outParamList = (RLUserBooleanRiskAssessmentRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.RiskAssessment_Show.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.RiskAssessment_Show.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RiskAssessment_Show.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "RiskAssessment Show"; ssRiskAssessmentShowRecordDoDataBind = true;
				ssRiskAssessment_RiskAssessmentKeepInformedTableListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RiskAssessment_Show", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RiskAssessment_Show", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamRiskAssessmentID", inParamRiskAssessmentID, 0);
			if (IsAjaxRequest) {
				recTableRiskAssessment_RiskAssessmentKeepInformedTable_Rebuild((ssRiskAssessment_RiskAssessmentKeepInformedTableListDataBound ? wtRiskAssessment_RiskAssessmentKeepInformedTable.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtRiskAssessment_RiskAssessmentKeepInformedTable.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtRiskAssessment_RiskAssessmentKeepInformedTable_list", wtRiskAssessment_RiskAssessmentKeepInformedTable_storage, null);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamRiskAssessmentID = (int) ViewStateAttributes.GetFromViewState("inParamRiskAssessmentID", 0);
				recTableRiskAssessment_RiskAssessmentKeepInformedTable_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
