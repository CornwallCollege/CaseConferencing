/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvGetRAGs_LastUpdatedBySite: VarsBag {
			public int inParamNumberOfDays;
			public RCDataPointRecord resSiteDataPoint_outParamDataPoint = new RCDataPointRecord(null);

			public RLReporting_RAGLastUpdatedGraphPointsRecordList queryResGetRAGsLastUpdatedBySite_outParamList = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
			public int queryResGetRAGsLastUpdatedBySite_outParamCount = 0;

			public lcvGetRAGs_LastUpdatedBySite(int inParamNumberOfDays) {
				this.inParamNumberOfDays = inParamNumberOfDays;
			}
		}
		public class lcoGetRAGs_LastUpdatedBySite: VarsBag {
			public RLDataPointRecordList outParamDataPointRecordList = new RLDataPointRecordList();

			public lcoGetRAGs_LastUpdatedBySite() {
			}
		}
		/// <summary>
		/// Action <code>ActionGetRAGs_LastUpdatedBySite</code> that represents the Service Studio user action
		///  <code>GetRAGs_LastUpdatedBySite</code> <p> Description: </p>
		/// </summary>
		public static void ActionGetRAGs_LastUpdatedBySite(HeContext heContext, int inParamNumberOfDays, out RLDataPointRecordList outParamDataPointRecordList) {
			lcoGetRAGs_LastUpdatedBySite result = new lcoGetRAGs_LastUpdatedBySite();
			lcvGetRAGs_LastUpdatedBySite localVars = new lcvGetRAGs_LastUpdatedBySite(inParamNumberOfDays);
			try {
				// Query QueryGetRAGsLastUpdatedBySite
				int QueryGetRAGsLastUpdatedBySite_maxRecords = 0;
				localVars.queryResGetRAGsLastUpdatedBySite_outParamList = FuncActionGetRAGs_LastUpdatedBySite.QueryGetRAGsLastUpdatedBySite(heContext, QueryGetRAGsLastUpdatedBySite_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetRAGsLastUpdatedBySite_outParamCount, localVars.inParamNumberOfDays
				);
				// Foreach GetRAGsLastUpdatedBySite.List
				localVars.queryResGetRAGsLastUpdatedBySite_outParamList.StartIteration();
				try {
					while (! localVars.queryResGetRAGsLastUpdatedBySite_outParamList.Eof) {
						// SiteDataPoint
						Actions.ActionDataPoint_Init(heContext, localVars.queryResGetRAGsLastUpdatedBySite_outParamList.CurrentRec.ssSTReporting_RAGLastUpdatedGraphPoints.ssLabel, localVars.queryResGetRAGsLastUpdatedBySite_outParamList.CurrentRec.ssSTReporting_RAGLastUpdatedGraphPoints.ssNumberOfLearners, "", "", Functions.ActionGetColour(heContext, ENColourBiasedEntity.GetRecordByKey(ObjectKey.Parse("WOYBP_mttE2Q6DSY0ujc1Q")).ssId, true), out localVars.resSiteDataPoint_outParamDataPoint);
						// AppendSiteDataPoint
						ExtendedActions.ListAppend(heContext, result.outParamDataPointRecordList, localVars.resSiteDataPoint_outParamDataPoint);
						localVars.queryResGetRAGsLastUpdatedBySite_outParamList.Advance();
					}
				} finally {
					localVars.queryResGetRAGsLastUpdatedBySite_outParamList.EndIteration();
				}
			} // try

			finally {
				outParamDataPointRecordList = result.outParamDataPointRecordList;
			}
		}

		public static class FuncActionGetRAGs_LastUpdatedBySite {

			/// <summary>
			/// Query Function "GetRAGsLastUpdatedBySite" of Action "GetRAGs_LastUpdatedBySite"
			/// </summary>
			public static RLReporting_RAGLastUpdatedGraphPointsRecordList QueryGetRAGsLastUpdatedBySite(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinNumberOfDays) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinNumberOfDays", DbType.Int32, qpinNumberOfDays);
				string advSql = "SELECT CASE WHEN  {Group}.[SITE]=''THEN 'Unknown' ELSE  {Group}.[SITE] END, COUNT( {Student}.[STUDENTREFERENCE])  " +
				 "FROM   " +
				 "     {Student}   " +
				 "Inner JOIN  {Group} ON  {Student}.[MAINOFFERINGCODE] =  {Group}.[GROUPNAME]  " +
				 "Left JOIN  {StudentRAG} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "WHERE ((DateDiff( dd,  {StudentRAG}.[UPDATEDAT], convert(datetime, GetDate(), 120)) > @qpinNumberOfDays) OR ( {StudentRAG}.[STUDENTREFERENCE] IS NULL))  " +
				 "AND  {Student}.[HASCURRENTACTIVEENROLMENT] = 1  " +
				 "GROUP BY CASE WHEN  {Group}.[SITE]=''THEN 'Unknown' ELSE  {Group}.[SITE] END  " +
				 "ORDER BY CASE WHEN  {Group}.[SITE]=''THEN 'Unknown' ELSE  {Group}.[SITE] END";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLReporting_RAGLastUpdatedGraphPointsRecordList outParamList = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLReporting_RAGLastUpdatedGraphPointsRecordList _tmp = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reporting.GetRAGs_LastUpdatedBySite.GetRAGsLastUpdatedBySite.List");
							outParamList = (RLReporting_RAGLastUpdatedGraphPointsRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.GetRAGs_LastUpdatedBySite.GetRAGsLastUpdatedBySite.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.GetRAGs_LastUpdatedBySite.GetRAGsLastUpdatedBySite.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetRAGsLastUpdatedBySite in GetRAGs_LastUpdatedBySite in Reporting in CaseConferencing (SELECT CASE WHEN {Group}.[Site]=''THEN 'Unknown' ELSE {Group}.[Site] END, COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY CASE WHEN {Group}.[Site]=''THEN 'Unknown' ELSE {Group}.[Site] END  ORDER BY CASE WHEN {Group}.[Site]=''THEN 'Unknown' ELSE {Group}.[Site] END): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetRAGsLastUpdatedBySite in GetRAGs_LastUpdatedBySite in Reporting in CaseConferencing (SELECT CASE WHEN {Group}.[Site]=''THEN 'Unknown' ELSE {Group}.[Site] END, COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY CASE WHEN {Group}.[Site]=''THEN 'Unknown' ELSE {Group}.[Site] END  ORDER BY CASE WHEN {Group}.[Site]=''THEN 'Unknown' ELSE {Group}.[Site] END): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetRAGsLastUpdatedBySite in GetRAGs_LastUpdatedBySite in Reporting in CaseConferencing (SELECT CASE WHEN {Group}.[Site]=''THEN 'Unknown' ELSE {Group}.[Site] END, COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY CASE WHEN {Group}.[Site]=''THEN 'Unknown' ELSE {Group}.[Site] END  ORDER BY CASE WHEN {Group}.[Site]=''THEN 'Unknown' ELSE {Group}.[Site] END): " + aqExcep.Message);
				}
			}


		}


	}


}