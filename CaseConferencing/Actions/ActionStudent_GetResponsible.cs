/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvStudent_GetResponsible: VarsBag {
			public string inParamStudentId;
			/// <summary>
			/// Variable <code>varLcNameToAdd</code> that represents the Service Studio local variable
			///  <code>NameToAdd</code> <p>Description: </p>
			/// </summary>
			public string varLcNameToAdd = "";

			/// <summary>
			/// Variable <code>varLcEmailToAdd</code> that represents the Service Studio local variable
			///  <code>EmailToAdd</code> <p>Description: </p>
			/// </summary>
			public string varLcEmailToAdd = "";

			public RLUserRecordList queryResGetUsers_outParamList = new RLUserRecordList();
			public int queryResGetUsers_outParamCount = 0;

			public RLStudentRecordList queryResGetStudentByStudentReference_outParamList = new RLStudentRecordList();
			public int queryResGetStudentByStudentReference_outParamCount = 0;

			public lcvStudent_GetResponsible(string inParamStudentId) {
				this.inParamStudentId = inParamStudentId;
			}
		}
		public class lcoStudent_GetResponsible: VarsBag {
			public string outParamResponsibleName = "";

			public string outParamResponsibleEmail = "";

			public lcoStudent_GetResponsible() {
			}
		}
		/// <summary>
		/// Action <code>ActionStudent_GetResponsible</code> that represents the Service Studio user action
		///  <code>Student_GetResponsible</code> <p> Description: </p>
		/// </summary>
		public static void ActionStudent_GetResponsible(HeContext heContext, string inParamStudentId, out string outParamResponsibleName, out string outParamResponsibleEmail) {
			lcoStudent_GetResponsible result = new lcoStudent_GetResponsible();
			lcvStudent_GetResponsible localVars = new lcvStudent_GetResponsible(inParamStudentId);
			try {
				// Query datasetGetStudentByStudentReference
				int datasetGetStudentByStudentReference_maxRecords = 0;
				localVars.queryResGetStudentByStudentReference_outParamList = FuncActionStudent_GetResponsible.datasetGetStudentByStudentReference(heContext, datasetGetStudentByStudentReference_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetStudentByStudentReference_outParamCount, localVars.inParamStudentId
				);
				if ((localVars.queryResGetStudentByStudentReference_outParamList.CurrentRec.ssENStudent.ssPersonalTutor!= "")) {
					// Query datasetGetUsers
					int datasetGetUsers_maxRecords = 0;
					localVars.queryResGetUsers_outParamList = FuncActionStudent_GetResponsible.datasetGetUsers(heContext, datasetGetUsers_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetUsers_outParamCount, localVars.queryResGetStudentByStudentReference_outParamList.CurrentRec.ssENStudent.ssPersonalTutor
					);
					localVars.varLcNameToAdd = BuiltInFunction.Replace(BuiltInFunction.Replace(BuiltInFunction.Trim(localVars.queryResGetStudentByStudentReference_outParamList.CurrentRec.ssENStudent.ssPersonalTutor), ".", " "), "1", ""); // NameToAdd = Replace
					localVars.varLcEmailToAdd = (((localVars.queryResGetUsers_outParamList.CurrentRec.ssENUser.ssEmail!= "")) ?(localVars.queryResGetUsers_outParamList.CurrentRec.ssENUser.ssEmail):((BuiltInFunction.Trim(localVars.queryResGetStudentByStudentReference_outParamList.CurrentRec.ssENStudent.ssPersonalTutor) + "@cornwall.ac.uk"))); // EmailToAdd = internalIf
					result.outParamResponsibleName = (result.outParamResponsibleName+(((BuiltInFunction.Index(result.outParamResponsibleEmail, localVars.varLcEmailToAdd, 0, false, true) >(-1))) ?(""):(localVars.varLcNameToAdd))); // ResponsibleName = ResponsibleName + internalIf
					result.outParamResponsibleEmail = (result.outParamResponsibleEmail+(((BuiltInFunction.Index(result.outParamResponsibleEmail, localVars.varLcEmailToAdd, 0, false, true) >(-1))) ?(""):(localVars.varLcEmailToAdd))); // ResponsibleEmail = ResponsibleEmail + internalIf

				}
				if ((result.outParamResponsibleEmail== "")) {
					result.outParamResponsibleEmail = "simon.davies@cornwall.ac.uk"; // ResponsibleEmail = "simon.davies@cornwall.ac.uk"

				}
			} // try

			finally {
				outParamResponsibleName = result.outParamResponsibleName;
				outParamResponsibleEmail = result.outParamResponsibleEmail;
			}
		}

		public static class FuncActionStudent_GetResponsible {

			/// <summary>
			/// Query Function "GetUsers" of Action "Student_GetResponsible"
			/// </summary>
			public static RLUserRecordList datasetGetUsers(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, ENUser.[EMAIL] o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM {User} ENUser");
				whereBuilder.Append(" WHERE (ENUser.[USERNAME] LIKE (N'OS6166PRD13736\\' + (LTrim(RTrim(@qpstP)))))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserRecordList outParamList = new RLUserRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, false, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserRecordList _tmp = new RLUserRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Student_GetResponsible.GetUsers.List");
						outParamList = (RLUserRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Student_GetResponsible.GetUsers.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserRecordList _tmp = new RLUserRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Student_GetResponsible.GetUsers.List");
							outParamList = (RLUserRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Student_GetResponsible.GetUsers.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetStudentByStudentReference" of Action "Student_GetResponsible"
			/// </summary>
			public static RLStudentRecordList datasetGetStudentByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, ENStudent.[PERSONALTUTOR] o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27");
				fromBuilder.Append(" FROM {Student} ENStudent");
				whereBuilder.Append(" WHERE ");
				if (qpstP.Trim() != "") {
					whereBuilder.Append("((ENStudent.[STUDENTREFERENCE] = @qpstP) AND (ENStudent.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
				} else {
					whereBuilder.Append("(ENStudent.[STUDENTREFERENCE] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentRecordList outParamList = new RLStudentRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentRecordList _tmp = new RLStudentRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Student_GetResponsible.GetStudentByStudentReference.List");
						outParamList = (RLStudentRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Student_GetResponsible.GetStudentByStudentReference.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentRecordList _tmp = new RLStudentRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Student_GetResponsible.GetStudentByStudentReference.List");
							outParamList = (RLStudentRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Student_GetResponsible.GetStudentByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}


		}


	}


}