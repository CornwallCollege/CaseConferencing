/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvGetCurrentAcademicYear2: VarsBag {
			/// <summary>
			/// Variable <code>varLcCurrACYear</code> that represents the Service Studio local variable
			///  <code>CurrACYear</code> <p>Description: </p>
			/// </summary>
			public int varLcCurrACYear = 0;

			public RLAcademicYearsRecordList queryResGetAcademicYears_outParamList = new RLAcademicYearsRecordList();
			public int queryResGetAcademicYears_outParamCount = 0;

			public lcvGetCurrentAcademicYear2() {
			}
		}
		public class lcoGetCurrentAcademicYear2: VarsBag {
			public RCAcademicYearsRecord outParamAcademicYear = new RCAcademicYearsRecord(null);

			public lcoGetCurrentAcademicYear2() {
			}
		}
		/// <summary>
		/// Action <code>ActionGetCurrentAcademicYear2</code> that represents the Service Studio user action
		///  <code>GetCurrentAcademicYear2</code> <p> Description: </p>
		/// </summary>
		public static void ActionGetCurrentAcademicYear2(HeContext heContext, out RCAcademicYearsRecord outParamAcademicYear) {
			lcoGetCurrentAcademicYear2 result = new lcoGetCurrentAcademicYear2();
			lcvGetCurrentAcademicYear2 localVars = new lcvGetCurrentAcademicYear2();
			try {
				if ((BuiltInFunction.Month(BuiltInFunction.CurrDate()) >=8)) {
					localVars.varLcCurrACYear = BuiltInFunction.Year(BuiltInFunction.CurrDate()); // CurrACYear = Year

				} else {
					localVars.varLcCurrACYear = (BuiltInFunction.Year(BuiltInFunction.CurrDate()) -1); // CurrACYear = Year - 1

				}
				// Query datasetGetAcademicYears
				int datasetGetAcademicYears_maxRecords = 0;
				localVars.queryResGetAcademicYears_outParamList = FuncActionGetCurrentAcademicYear2.datasetGetAcademicYears(heContext, datasetGetAcademicYears_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetAcademicYears_outParamCount, localVars.varLcCurrACYear
				);
				result.outParamAcademicYear = ((RCAcademicYearsRecord) localVars.queryResGetAcademicYears_outParamList.CurrentRec.ssENAcademicYears); // AcademicYear = GetAcademicYears.List.Current.AcademicYears
			} // try

			finally {
				outParamAcademicYear = result.outParamAcademicYear;
			}
		}

		public static class FuncActionGetCurrentAcademicYear2 {

			/// <summary>
			/// Query Function "GetAcademicYears" of Action "GetCurrentAcademicYear2"
			/// </summary>
			public static RLAcademicYearsRecordList datasetGetAcademicYears(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENAcademicYears.[ID] o1, ENAcademicYears.[LABEL] o2, ENAcademicYears.[ORDER] o3, ENAcademicYears.[IS_ACTIVE] o4, ENAcademicYears.[FORMATA] o5, ENAcademicYears.[FORMATB] o6, ENAcademicYears.[FORMATC] o7, ENAcademicYears.[FORMATD] o8, ENAcademicYears.[FORMATE] o9, ENAcademicYears.[FORMATF] o10");
				fromBuilder.Append(" FROM {AcademicYears} ENAcademicYears");
				whereBuilder.Append(" WHERE (ENAcademicYears.[FORMATA] = convert(varchar(11), @qpinP))");
				sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLAcademicYearsRecordList outParamList = new RLAcademicYearsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLAcademicYearsRecordList _tmp = new RLAcademicYearsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query GetCurrentAcademicYear2.GetAcademicYears.List");
						outParamList = (RLAcademicYearsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query GetCurrentAcademicYear2.GetAcademicYears.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLAcademicYearsRecordList _tmp = new RLAcademicYearsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query GetCurrentAcademicYear2.GetAcademicYears.List");
							outParamList = (RLAcademicYearsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query GetCurrentAcademicYear2.GetAcademicYears.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}


		}


	}


}