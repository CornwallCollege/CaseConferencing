/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvGetColour: VarsBag {
			public int inParamColourBaised;
			public bool inParamPastelColour;
			/// <summary>
			/// Variable <code>varLcLowerRedColour</code> that represents the Service Studio local variable
			///  <code>LowerRedColour</code> <p>Description: </p>
			/// </summary>
			public int varLcLowerRedColour = 0;

			/// <summary>
			/// Variable <code>varLcLowerGreenColour</code> that represents the Service Studio local variable
			///  <code>LowerGreenColour</code> <p>Description: </p>
			/// </summary>
			public int varLcLowerGreenColour = 0;

			/// <summary>
			/// Variable <code>varLcLowerBlueColour</code> that represents the Service Studio local variable
			///  <code>LowerBlueColour</code> <p>Description: </p>
			/// </summary>
			public int varLcLowerBlueColour = 0;

			/// <summary>
			/// Variable <code>varLcHigherRedColour</code> that represents the Service Studio local variable
			///  <code>HigherRedColour</code> <p>Description: </p>
			/// </summary>
			public int varLcHigherRedColour = 0;

			/// <summary>
			/// Variable <code>varLcHigherBlueColour</code> that represents the Service Studio local variable
			///  <code>HigherBlueColour</code> <p>Description: </p>
			/// </summary>
			public int varLcHigherBlueColour = 0;

			/// <summary>
			/// Variable <code>varLcHigherGreenColour</code> that represents the Service Studio local variable
			///  <code>HigherGreenColour</code> <p>Description: </p>
			/// </summary>
			public int varLcHigherGreenColour = 0;

			public RLRGBColorRecordList queryResGetRandomColour_outParamList = new RLRGBColorRecordList();
			public int queryResGetRandomColour_outParamCount = 0;

			public lcvGetColour(int inParamColourBaised, bool inParamPastelColour) {
				this.inParamColourBaised = inParamColourBaised;
				this.inParamPastelColour = inParamPastelColour;
			}
		}
		public class lcoGetColour: VarsBag {
			public string outParamHexColour = "";

			public lcoGetColour() {
			}
		}
		/// <summary>
		/// Action <code>ActionGetColour</code> that represents the Service Studio user action
		///  <code>GetColour</code> <p> Description: </p>
		/// </summary>
		public static void ActionGetColour(HeContext heContext, int inParamColourBaised, bool inParamPastelColour, out string outParamHexColour) {
			lcoGetColour result = new lcoGetColour();
			lcvGetColour localVars = new lcvGetColour(inParamColourBaised, inParamPastelColour);
			try {
				if ((localVars.inParamColourBaised==ENColourBiasedEntity.GetRecordByKey(ObjectKey.Parse("6xjo4kMla0mLuJGPJejayw")).ssId)) {
					localVars.varLcLowerRedColour = 200; // LowerRedColour = 200
					localVars.varLcHigherRedColour = 255; // HigherRedColour = 255
					localVars.varLcLowerBlueColour = ((localVars.inParamPastelColour) ?(150):(0)); // LowerBlueColour = internalIf
					localVars.varLcHigherBlueColour = 200; // HigherBlueColour = 200
					localVars.varLcLowerGreenColour = ((localVars.inParamPastelColour) ?(150):(0)); // LowerGreenColour = internalIf
					localVars.varLcHigherGreenColour = 200; // HigherGreenColour = 200

				} else {
					if ((localVars.inParamColourBaised==ENColourBiasedEntity.GetRecordByKey(ObjectKey.Parse("WOYBP_mttE2Q6DSY0ujc1Q")).ssId)) {
						localVars.varLcLowerRedColour = ((localVars.inParamPastelColour) ?(150):(0)); // LowerRedColour = internalIf
						localVars.varLcHigherRedColour = 200; // HigherRedColour = 200
						localVars.varLcLowerBlueColour = 200; // LowerBlueColour = 200
						localVars.varLcHigherBlueColour = 255; // HigherBlueColour = 255
						localVars.varLcLowerGreenColour = ((localVars.inParamPastelColour) ?(150):(0)); // LowerGreenColour = internalIf
						localVars.varLcHigherGreenColour = 200; // HigherGreenColour = 200

					} else {
						if ((localVars.inParamColourBaised==ENColourBiasedEntity.GetRecordByKey(ObjectKey.Parse("Rsbdzz6qmkqroPpMnjAgrQ")).ssId)) {
							localVars.varLcLowerRedColour = ((localVars.inParamPastelColour) ?(150):(0)); // LowerRedColour = internalIf
							localVars.varLcHigherRedColour = 200; // HigherRedColour = 200
							localVars.varLcLowerBlueColour = ((localVars.inParamPastelColour) ?(150):(0)); // LowerBlueColour = internalIf
							localVars.varLcHigherBlueColour = 200; // HigherBlueColour = 200
							localVars.varLcLowerGreenColour = 200; // LowerGreenColour = 200
							localVars.varLcHigherGreenColour = 255; // HigherGreenColour = 255

						} else {
							if ((localVars.inParamColourBaised==ENColourBiasedEntity.GetRecordByKey(ObjectKey.Parse("2qjFtUrLxU2adiNcD3nfEw")).ssId)) {
								localVars.varLcLowerRedColour = ((localVars.inParamPastelColour) ?(170):(0)); // LowerRedColour = internalIf
								localVars.varLcHigherRedColour = 255; // HigherRedColour = 255
								localVars.varLcLowerBlueColour = ((localVars.inParamPastelColour) ?(170):(0)); // LowerBlueColour = internalIf
								localVars.varLcHigherBlueColour = 255; // HigherBlueColour = 255
								localVars.varLcLowerGreenColour = ((localVars.inParamPastelColour) ?(170):(0)); // LowerGreenColour = internalIf
								localVars.varLcHigherGreenColour = 255; // HigherGreenColour = 255

							}

						}

					}

				}
				// Query QueryGetRandomColour
				int QueryGetRandomColour_maxRecords = 0;
				localVars.queryResGetRandomColour_outParamList = FuncActionGetColour.QueryGetRandomColour(heContext, QueryGetRandomColour_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetRandomColour_outParamCount, localVars.varLcLowerRedColour
				, localVars.varLcHigherRedColour
				, localVars.varLcLowerGreenColour
				, localVars.varLcHigherGreenColour
				, localVars.varLcLowerBlueColour
				, localVars.varLcHigherBlueColour
				);
				result.outParamHexColour = ((("#" +Functions.ActionConvertToHex(heContext, localVars.queryResGetRandomColour_outParamList.CurrentRec.ssSTRGBColor.ssRed)) +Functions.ActionConvertToHex(heContext, localVars.queryResGetRandomColour_outParamList.CurrentRec.ssSTRGBColor.ssGreen)) +Functions.ActionConvertToHex(heContext, localVars.queryResGetRandomColour_outParamList.CurrentRec.ssSTRGBColor.ssBlue)); // HexColour = "#" + ConvertToHex(GetRandomColour.List.Current.RGBColor.Red) +
				// ConvertToHex(GetRandomColour.List.Current.RGBColor.Green) +
				// ConvertToHex(GetRandomColour.List.Current.RGBColor.Blue)
			} // try

			finally {
				outParamHexColour = result.outParamHexColour;
			}
		}

		public static class FuncActionGetColour {

			/// <summary>
			/// Query Function "GetRandomColour" of Action "GetColour"
			/// </summary>
			public static RLRGBColorRecordList QueryGetRandomColour(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinLowerRedNumber, int qpinHigherRedNumber, int qpinLowerGreenNumber, int qpinHigherGreenNumber, int qpinLowerBlueNumber, int qpinHigherBlueNumber) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinHigherRedNumber", DbType.Int32, qpinHigherRedNumber);
				sqlCmd.CreateParameter("@qpinLowerRedNumber", DbType.Int32, qpinLowerRedNumber);
				sqlCmd.CreateParameter("@qpinHigherGreenNumber", DbType.Int32, qpinHigherGreenNumber);
				sqlCmd.CreateParameter("@qpinLowerGreenNumber", DbType.Int32, qpinLowerGreenNumber);
				sqlCmd.CreateParameter("@qpinHigherBlueNumber", DbType.Int32, qpinHigherBlueNumber);
				sqlCmd.CreateParameter("@qpinLowerBlueNumber", DbType.Int32, qpinLowerBlueNumber);
				string advSql = "SELECT  ROUND(((@qpinHigherRedNumber-@qpinLowerRedNumber)*RAND()+@qpinLowerRedNumber),0),  " +
				 "        ROUND(((@qpinHigherGreenNumber-@qpinLowerGreenNumber)*RAND()+@qpinLowerGreenNumber),0),   " +
				 "        ROUND(((@qpinHigherBlueNumber-@qpinLowerBlueNumber)*RAND()+@qpinLowerBlueNumber),0)";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLRGBColorRecordList outParamList = new RLRGBColorRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLRGBColorRecordList _tmp = new RLRGBColorRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Styles.GetColour.GetRandomColour.List");
							outParamList = (RLRGBColorRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Styles.GetColour.GetRandomColour.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Styles.GetColour.GetRandomColour.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetRandomColour in GetColour in Styles in CaseConferencing (SELECT  ROUND(((@HigherRedNumber-@LowerRedNumber)*RAND()+@LowerRedNumber),0),          ROUND(((@HigherGreenNumber-@LowerGreenNumber)*RAND()+@LowerGreenNumber),0),           ROUND(((@HigherBlueNumber-@LowerBlueNumber)*RAND()+@LowerBlueNumber),0)): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetRandomColour in GetColour in Styles in CaseConferencing (SELECT  ROUND(((@HigherRedNumber-@LowerRedNumber)*RAND()+@LowerRedNumber),0),          ROUND(((@HigherGreenNumber-@LowerGreenNumber)*RAND()+@LowerGreenNumber),0),           ROUND(((@HigherBlueNumber-@LowerBlueNumber)*RAND()+@LowerBlueNumber),0)): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetRandomColour in GetColour in Styles in CaseConferencing (SELECT  ROUND(((@HigherRedNumber-@LowerRedNumber)*RAND()+@LowerRedNumber),0),          ROUND(((@HigherGreenNumber-@LowerGreenNumber)*RAND()+@LowerGreenNumber),0),           ROUND(((@HigherBlueNumber-@LowerBlueNumber)*RAND()+@LowerBlueNumber),0)): " + aqExcep.Message);
				}
			}


		}


	}


}