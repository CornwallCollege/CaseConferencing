/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvCheckRoleCanViewDocument: VarsBag {
			public int inParamDocumentID;
			public RLIntRecordList queryResGetDocumentsRole_outParamList = new RLIntRecordList();
			public int queryResGetDocumentsRole_outParamCount = 0;

			public lcvCheckRoleCanViewDocument(int inParamDocumentID) {
				this.inParamDocumentID = inParamDocumentID;
			}
		}
		public class lcoCheckRoleCanViewDocument: VarsBag {
			public bool outParamCanView = false;

			public lcoCheckRoleCanViewDocument() {
			}
		}
		/// <summary>
		/// Action <code>ActionCheckRoleCanViewDocument</code> that represents the Service Studio user action
		///  <code>CheckRoleCanViewDocument</code> <p> Description: </p>
		/// </summary>
		public static void ActionCheckRoleCanViewDocument(HeContext heContext, int inParamDocumentID, out bool outParamCanView) {
			lcoCheckRoleCanViewDocument result = new lcoCheckRoleCanViewDocument();
			lcvCheckRoleCanViewDocument localVars = new lcvCheckRoleCanViewDocument(inParamDocumentID);
			try {
				// Query QueryGetDocumentsRole
				int QueryGetDocumentsRole_maxRecords = 0;
				localVars.queryResGetDocumentsRole_outParamList = FuncActionCheckRoleCanViewDocument.QueryGetDocumentsRole(heContext, QueryGetDocumentsRole_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetDocumentsRole_outParamCount, localVars.inParamDocumentID
				, ((int) Global.App.OsContext.Session["UserID"])
				);
				if (localVars.queryResGetDocumentsRole_outParamList.Empty) {
					result.outParamCanView = false; // CanView = False

				} else {
					result.outParamCanView = true; // CanView = True

				}
			} // try

			finally {
				outParamCanView = result.outParamCanView;
			}
		}

		public static class FuncActionCheckRoleCanViewDocument {

			/// <summary>
			/// Query Function "GetDocumentsRole" of Action "CheckRoleCanViewDocument"
			/// </summary>
			public static RLIntRecordList QueryGetDocumentsRole(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinDocumentID, int qpinUserID) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinDocumentID", DbType.Int32, qpinDocumentID);
				sqlCmd.CreateParameter("@qpinUserID", DbType.Int32, qpinUserID);
				string advSql = "SELECT  {RoleDocumentPermissions}.[ID]  " +
				 "FROM  {RoleDocumentPermissions}   " +
				 "WHERE  {RoleDocumentPermissions}.[DOCUMENTID] = @qpinDocumentID  " +
				 "AND  {RoleDocumentPermissions}.[ROLEID] IN (SELECT  {User_Role}.[ROLE_ID] FROM  {User_Role} WHERE  {User_Role}.[USER_ID] = @qpinUserID)";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLIntRecordList outParamList = new RLIntRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLIntRecordList _tmp = new RLIntRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CheckRoleCanViewDocument.GetDocumentsRole.List");
							outParamList = (RLIntRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CheckRoleCanViewDocument.GetDocumentsRole.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CheckRoleCanViewDocument.GetDocumentsRole.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetDocumentsRole in CheckRoleCanViewDocument in CaseConferencing (SELECT {RoleDocumentPermissions}.[Id]  FROM {RoleDocumentPermissions}   WHERE {RoleDocumentPermissions}.[DocumentID] = @DocumentID  AND {RoleDocumentPermissions}.[RoleID] IN (SELECT {User_Role}.[Role_Id] FROM {User_Role} WHERE {User_Role}.[User_Id] = @UserID)): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetDocumentsRole in CheckRoleCanViewDocument in CaseConferencing (SELECT {RoleDocumentPermissions}.[Id]  FROM {RoleDocumentPermissions}   WHERE {RoleDocumentPermissions}.[DocumentID] = @DocumentID  AND {RoleDocumentPermissions}.[RoleID] IN (SELECT {User_Role}.[Role_Id] FROM {User_Role} WHERE {User_Role}.[User_Id] = @UserID)): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetDocumentsRole in CheckRoleCanViewDocument in CaseConferencing (SELECT {RoleDocumentPermissions}.[Id]  FROM {RoleDocumentPermissions}   WHERE {RoleDocumentPermissions}.[DocumentID] = @DocumentID  AND {RoleDocumentPermissions}.[RoleID] IN (SELECT {User_Role}.[Role_Id] FROM {User_Role} WHERE {User_Role}.[User_Id] = @UserID)): " + aqExcep.Message);
				}
			}


		}


	}


}