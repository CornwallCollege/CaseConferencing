/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public static partial class WsReports {
			public class lcvReportsGetStudentRAG: VarsBag {
				public string inParamStudentId;
				public RLStudentGlobalRAGRecordList queryResGetStudentLogsByStudentReference_outParamList = new RLStudentGlobalRAGRecordList();
				public int queryResGetStudentLogsByStudentReference_outParamCount = 0;

				public lcvReportsGetStudentRAG(string inParamStudentId) {
					this.inParamStudentId = inParamStudentId;
				}
			}
			public class lcoReportsGetStudentRAG: VarsBag {
				public RCStudentGlobalRAGRecord outParamGetStudentRAGs = new RCStudentGlobalRAGRecord(null);

				public lcoReportsGetStudentRAG() {
				}
			}
			/// <summary>
			/// Action <code>WebSrvcReportsGetStudentRAG</code> that represents the Service Studio user action
			///  <code>GetStudentRAG</code> <p> Description: </p>
			/// </summary>
			public static void WebSrvcReportsGetStudentRAG(HeContext heContext, string inParamStudentId, out RCStudentGlobalRAGRecord outParamGetStudentRAGs) {
				lcoReportsGetStudentRAG result = new lcoReportsGetStudentRAG();
				lcvReportsGetStudentRAG localVars = new lcvReportsGetStudentRAG(inParamStudentId);
				try {
					// Query QueryGetStudentLogsByStudentReference
					int QueryGetStudentLogsByStudentReference_maxRecords = 0;
					localVars.queryResGetStudentLogsByStudentReference_outParamList = FuncssGetStudentRAG.QueryGetStudentLogsByStudentReference(heContext, QueryGetStudentLogsByStudentReference_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetStudentLogsByStudentReference_outParamCount, localVars.inParamStudentId
					);
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssStudentId = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssStudentId; // GetStudentRAGs.StudentGlobalRAG.StudentId =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.StudentId
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssCauseForConcernRAG = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssCauseForConcernRAG; // GetStudentRAGs.StudentGlobalRAG.CauseForConcernRAG =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.CauseForConcernRAG
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssVocShortTermRAG = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssVocShortTermRAG; // GetStudentRAGs.StudentGlobalRAG.VocShortTermRAG =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.VocShortTermRAG
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssVocOverallRAG = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssVocOverallRAG; // GetStudentRAGs.StudentGlobalRAG.VocOverallRAG =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.VocOverallRAG
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssMathShortTermRAG = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssMathShortTermRAG; // GetStudentRAGs.StudentGlobalRAG.MathShortTermRAG =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.MathShortTermRAG
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssMathOverallRAG = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssMathOverallRAG; // GetStudentRAGs.StudentGlobalRAG.MathOverallRAG =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.MathOverallRAG
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssEngShortTermRAG = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssEngShortTermRAG; // GetStudentRAGs.StudentGlobalRAG.EngShortTermRAG =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.EngShortTermRAG
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssEngOverallRAG = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssEngOverallRAG; // GetStudentRAGs.StudentGlobalRAG.EngOverallRAG =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.EngOverallRAG
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssMLWShortTermRAG = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssMLWShortTermRAG; // GetStudentRAGs.StudentGlobalRAG.MLWShortTermRAG =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.MLWShortTermRAG
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssMLWOverallRAG = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssMLWOverallRAG; // GetStudentRAGs.StudentGlobalRAG.MLWOverallRAG =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.MLWOverallRAG
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssLogId = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssLogId; // GetStudentRAGs.StudentGlobalRAG.LogId = GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.LogId
					result.outParamGetStudentRAGs.ssSTStudentGlobalRAG.ssStudentRAG = localVars.queryResGetStudentLogsByStudentReference_outParamList.CurrentRec.ssSTStudentGlobalRAG.ssStudentRAG; // GetStudentRAGs.StudentGlobalRAG.StudentRAG =
					// GetStudentLogsByStudentReference.List.Current.StudentGlobalRAG.StudentRAG
				} // try

				finally {
					outParamGetStudentRAGs = result.outParamGetStudentRAGs;
				}
			}

			public static class FuncssGetStudentRAG {

				/// <summary>
				/// Query Function "GetStudentLogsByStudentReference" of Web Service Action "GetStudentRAG"
				/// </summary>
				public static RLStudentGlobalRAGRecordList QueryGetStudentLogsByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstStudentId) {
					// Query Iterations: Never {-unbound-}
					// Uses binary data: False
					if (multiplicity == IterationMultiplicity.Never) {
						maxRecords = 1;
					}
					outParamCount = -1;
					bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
					Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
					Command sqlCmd = trans.CreateCommand();
					sqlCmd.CreateParameter("@qpstStudentId", DbType.String, qpstStudentId);
					string advSql = "SELECT TOP 1  " +
					 " {StudentLog}.[ID],   " +
					 " {StudentLog}.[STUDENTREFERENCE],  " +
					 " {StudentLog}.[STUDENTRAG],  " +
					 " {StudentLog}.[CAUSEOFCONCERNRAG],  " +
					 " {StudentLog}.[VOCPERIODRAG],  " +
					 " {StudentLog}.[VOCOVERALLRAG],  " +
					 " {StudentLog}.[MATHPERIODRAG],  " +
					 " {StudentLog}.[MATHOVERALLRAG],  " +
					 " {StudentLog}.[ENGPERIODRAG],  " +
					 " {StudentLog}.[ENGOVERALLRAG],  " +
					 " {StudentLog}.[MLWPERIODRAG],  " +
					 " {StudentLog}.[MLWOVERALLRAG]  " +
					 "FROM  {StudentLog}  " +
					 "WHERE  {StudentLog}.[STUDENTREFERENCE] = @qpstStudentId  " +
					 "ORDER BY  {StudentLog}.[DATETIME] DESC";
					string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
					AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
					sqlCmd.CommandText = sql;
					try {
						RLStudentGlobalRAGRecordList outParamList = new RLStudentGlobalRAGRecordList();
						outParamList.Transaction = trans;
						BitArray[] opt = new BitArray[1];
						opt[0] = new BitArray(new bool[] {
							false, false, false, false, false, false, false, false, false, false, false, false
						}
						);
						outParamList.AllOptimizedAttributes = opt;
						if (multiplicity == IterationMultiplicity.Multiple) {
							RLStudentGlobalRAGRecordList _tmp = new RLStudentGlobalRAGRecordList();
							_tmp.Transaction = trans;
							_tmp.AllOptimizedAttributes = opt;
							_tmp.MaxRecords = maxRecords;
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reports.GetStudentRAG.GetStudentLogsByStudentReference.List");
								outParamList = (RLStudentGlobalRAGRecordList) _tmp.Duplicate();
								_tmp.CloseDataReader();
								return outParamList;
							} finally {
								_tmp.CloseDataReader();
							}
						} else if (multiplicity == IterationMultiplicity.Never) {
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reports.GetStudentRAG.GetStudentLogsByStudentReference.List");
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								outParamList.CloseDataReader();
							}
						} else {
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reports.GetStudentRAG.GetStudentLogsByStudentReference.List");
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								if (maxRecords == 1) {
									outParamList.CloseDataReader();
								}
							}
						}
					} catch (System.InvalidOperationException aqExcep) {
						if (aqExcep.Message.StartsWith("Command parameter[")) {
							throw new DataBaseException("Problems accessing parameters in advanced query GetStudentLogsByStudentReference in GetStudentRAG in Reports in CaseConferencing (SELECT TOP 1  {StudentLog}.[Id],   {StudentLog}.[StudentReference],  {StudentLog}.[StudentRAG],  {StudentLog}.[CauseOfConcernRAG],  {StudentLog}.[VocPeriodRAG],  {StudentLog}.[VocOverallRAG],  {StudentLog}.[MathPeriodRAG],  {StudentLog}.[MathOverallRAG],  {StudentLog}.[EngPeriodRAG],  {StudentLog}.[EngOverallRAG],  {StudentLog}.[MLWPeriodRAG],  {StudentLog}.[MLWOverallRAG]  FROM {StudentLog}  WHERE {StudentLog}.[StudentReference] = @StudentId  ORDER BY {StudentLog}.[DateTime] DESC): " + aqExcep.Message);
						}
						throw new DataBaseException("Error in advanced query GetStudentLogsByStudentReference in GetStudentRAG in Reports in CaseConferencing (SELECT TOP 1  {StudentLog}.[Id],   {StudentLog}.[StudentReference],  {StudentLog}.[StudentRAG],  {StudentLog}.[CauseOfConcernRAG],  {StudentLog}.[VocPeriodRAG],  {StudentLog}.[VocOverallRAG],  {StudentLog}.[MathPeriodRAG],  {StudentLog}.[MathOverallRAG],  {StudentLog}.[EngPeriodRAG],  {StudentLog}.[EngOverallRAG],  {StudentLog}.[MLWPeriodRAG],  {StudentLog}.[MLWOverallRAG]  FROM {StudentLog}  WHERE {StudentLog}.[StudentReference] = @StudentId  ORDER BY {StudentLog}.[DateTime] DESC): " + aqExcep.Message);
					} catch (Exception aqExcep) {
						throw new DataBaseException("Error in advanced query GetStudentLogsByStudentReference in GetStudentRAG in Reports in CaseConferencing (SELECT TOP 1  {StudentLog}.[Id],   {StudentLog}.[StudentReference],  {StudentLog}.[StudentRAG],  {StudentLog}.[CauseOfConcernRAG],  {StudentLog}.[VocPeriodRAG],  {StudentLog}.[VocOverallRAG],  {StudentLog}.[MathPeriodRAG],  {StudentLog}.[MathOverallRAG],  {StudentLog}.[EngPeriodRAG],  {StudentLog}.[EngOverallRAG],  {StudentLog}.[MLWPeriodRAG],  {StudentLog}.[MLWOverallRAG]  FROM {StudentLog}  WHERE {StudentLog}.[StudentReference] = @StudentId  ORDER BY {StudentLog}.[DateTime] DESC): " + aqExcep.Message);
					}
				}


			}

		}

	}


}