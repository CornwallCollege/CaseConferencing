/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public static partial class WsReports {
			public class lcvReportsGetCauseForConcern: VarsBag {
				public string inParamStudentId;
				public RLCauseOfConcernReasonCauseOfConcernRecordList queryResGetCauseOfConcernsByStudentReference_outParamList = new RLCauseOfConcernReasonCauseOfConcernRecordList();
				public int queryResGetCauseOfConcernsByStudentReference_outParamCount = 0;

				public lcvReportsGetCauseForConcern(string inParamStudentId) {
					this.inParamStudentId = inParamStudentId;
				}
			}
			public class lcoReportsGetCauseForConcern: VarsBag {
				public RLCauseOfConcernReasonCauseOfConcernRecordList outParamActiveCauseForConcern = new RLCauseOfConcernReasonCauseOfConcernRecordList();

				public lcoReportsGetCauseForConcern() {
				}
			}
			/// <summary>
			/// Action <code>WebSrvcReportsGetCauseForConcern</code> that represents the Service Studio user action
			///  <code>GetCauseForConcern</code> <p> Description: </p>
			/// </summary>
			public static void WebSrvcReportsGetCauseForConcern(HeContext heContext, string inParamStudentId, out RLCauseOfConcernReasonCauseOfConcernRecordList outParamActiveCauseForConcern) {
				lcoReportsGetCauseForConcern result = new lcoReportsGetCauseForConcern();
				lcvReportsGetCauseForConcern localVars = new lcvReportsGetCauseForConcern(inParamStudentId);
				try {
					// Query datasetGetCauseOfConcernsByStudentReference
					int datasetGetCauseOfConcernsByStudentReference_maxRecords = 0;
					localVars.queryResGetCauseOfConcernsByStudentReference_outParamList = FuncssGetCauseForConcern.datasetGetCauseOfConcernsByStudentReference(heContext, datasetGetCauseOfConcernsByStudentReference_maxRecords, IterationMultiplicity.Multiple, out localVars.queryResGetCauseOfConcernsByStudentReference_outParamCount, localVars.inParamStudentId
					);
					result.outParamActiveCauseForConcern = localVars.queryResGetCauseOfConcernsByStudentReference_outParamList; // ActiveCauseForConcern = GetCauseOfConcernsByStudentReference.List
				} // try

				finally {
					outParamActiveCauseForConcern = result.outParamActiveCauseForConcern;
				}
			}

			public static class FuncssGetCauseForConcern {

				private static void datasetGetCauseOfConcernsByStudentReferenceReadDB(ref RCCauseOfConcernReasonCauseOfConcernRecord rec, IDataReader r) {
					int index = 0;
					rec.ssENCauseOfConcern.Read(r, ref index);
					rec.ssENCauseOfConcernReason.Read(r, ref index);
				}
				/// <summary>
				/// Query Function "GetCauseOfConcernsByStudentReference" of Web Service Action "GetCauseForConcern"
				/// </summary>
				public static RLCauseOfConcernReasonCauseOfConcernRecordList datasetGetCauseOfConcernsByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
					// Query Iterations: Multiple {-unbound-}
					// Uses binary data: False
					if (multiplicity == IterationMultiplicity.Never) {
						maxRecords = 1;
					}
					outParamCount = -1;
					bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
					Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
					Command sqlCmd = trans.CreateCommand();
					string sql = "";
					StringBuilder selectBuilder = new StringBuilder();
					StringBuilder fromBuilder = new StringBuilder();
					StringBuilder whereBuilder = new StringBuilder();
					StringBuilder orderByBuilder = new StringBuilder();
					StringBuilder groupByBuilder = new StringBuilder();
					StringBuilder havingBuilder = new StringBuilder();
					selectBuilder.Append("SELECT ");
					if (maxRecords > 0) {
						selectBuilder.Append("TOP (");
						selectBuilder.Append(maxRecords);
						selectBuilder.Append(") ");
					}
					selectBuilder.Append("ENCauseOfConcern.[ID] o1, ENCauseOfConcern.[STUDENTREFERENCE] o2, ENCauseOfConcern.[RAGSTATUSID] o3, ENCauseOfConcern.[REASONID] o4, ENCauseOfConcern.[DESCRIPTION] o5, ENCauseOfConcern.[CREATEDBY] o6, ENCauseOfConcern.[CREATEDAT] o7, ENCauseOfConcernReason.[ID] o8, ENCauseOfConcernReason.[REASON] o9, ENCauseOfConcernReason.[IS_ACTIVE] o10");
					fromBuilder.Append(" FROM ({CauseOfConcern} ENCauseOfConcern Left JOIN {CauseOfConcernReason} ENCauseOfConcernReason ON (ENCauseOfConcern.[REASONID] = ENCauseOfConcernReason.[ID])) ");
					whereBuilder.Append(" WHERE ");
					if (qpstP.Trim() != "") {
						whereBuilder.Append("((ENCauseOfConcern.[STUDENTREFERENCE] = @qpstP) AND (ENCauseOfConcern.[STUDENTREFERENCE] IS NOT NULL))");
						sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
					} else {
						whereBuilder.Append("(ENCauseOfConcern.[STUDENTREFERENCE] IS NULL)");
					}
					whereBuilder.Append(" AND (ENCauseOfConcern.[RAGSTATUSID] <> ");
					whereBuilder.Append("'" + ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId.Replace("'", "''") + "'");
					whereBuilder.Append(")");

					sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
					string advSql = sql;
					sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
					sqlCmd.CommandText = sql;
					RLCauseOfConcernReasonCauseOfConcernRecordList outParamList = new RLCauseOfConcernReasonCauseOfConcernRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = datasetGetCauseOfConcernsByStudentReferenceReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[2];
					opt[0] = new BitArray(new bool[] {
						false, false, false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLCauseOfConcernReasonCauseOfConcernRecordList _tmp = new RLCauseOfConcernReasonCauseOfConcernRecordList();
						_tmp.AlternateReadDBMethod = datasetGetCauseOfConcernsByStudentReferenceReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reports.GetCauseForConcern.GetCauseOfConcernsByStudentReference.List");
							outParamList = (RLCauseOfConcernReasonCauseOfConcernRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reports.GetCauseForConcern.GetCauseOfConcernsByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						if (maxRecords > 0 && maxRecords <= 150) {
							RLCauseOfConcernReasonCauseOfConcernRecordList _tmp = new RLCauseOfConcernReasonCauseOfConcernRecordList();
							_tmp.AlternateReadDBMethod = datasetGetCauseOfConcernsByStudentReferenceReadDB;
							_tmp.Transaction = trans;
							_tmp.AllOptimizedAttributes = opt;
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reports.GetCauseForConcern.GetCauseOfConcernsByStudentReference.List");
								outParamList = (RLCauseOfConcernReasonCauseOfConcernRecordList) _tmp.Duplicate();
								outParamList.AllOptimizedAttributes = opt;
								_tmp.CloseDataReader();
								return outParamList;
							} finally {
								_tmp.CloseDataReader();
							}
						} else {
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reports.GetCauseForConcern.GetCauseOfConcernsByStudentReference.List");
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								if (maxRecords == 1) {
									outParamList.CloseDataReader();
								}
							}
						}
					}
				}


			}

		}

	}


}