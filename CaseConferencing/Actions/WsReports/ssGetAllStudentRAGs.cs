/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public static partial class WsReports {
			public class lcvReportsGetAllStudentRAGs: VarsBag {
				public string inParamAcademicYear;
				public RLAllStudentsAllRAGsRecordList queryResAdvQuery1_outParamList = new RLAllStudentsAllRAGsRecordList();
				public int queryResAdvQuery1_outParamCount = 0;

				public lcoGetCurrentAcademicYear2 resGetCurrentAcademicYear2 = new lcoGetCurrentAcademicYear2();
				public lcvReportsGetAllStudentRAGs(string inParamAcademicYear) {
					this.inParamAcademicYear = inParamAcademicYear;
				}
			}
			public class lcoReportsGetAllStudentRAGs: VarsBag {
				public RLAllStudentsAllRAGsRecordList outParamAllStudentRAGs = new RLAllStudentsAllRAGsRecordList();

				public lcoReportsGetAllStudentRAGs() {
				}
			}
			/// <summary>
			/// Action <code>WebSrvcReportsGetAllStudentRAGs</code> that represents the Service Studio user action
			///  <code>GetAllStudentRAGs</code> <p> Description: Returns the latest RAG set for each learner
			/// s enrolment</p>
			/// </summary>
			public static void WebSrvcReportsGetAllStudentRAGs(HeContext heContext, string inParamAcademicYear, out RLAllStudentsAllRAGsRecordList outParamAllStudentRAGs) {
				lcoReportsGetAllStudentRAGs result = new lcoReportsGetAllStudentRAGs();
				lcvReportsGetAllStudentRAGs localVars = new lcvReportsGetAllStudentRAGs(inParamAcademicYear);
				try {
					if ((localVars.inParamAcademicYear== "")) {
						// GetCurrentAcademicYear2
						Actions.ActionGetCurrentAcademicYear2(heContext, out localVars.resGetCurrentAcademicYear2.outParamAcademicYear);
						localVars.inParamAcademicYear = localVars.resGetCurrentAcademicYear2.outParamAcademicYear.ssENAcademicYears.ssFormatE; // AcademicYear = GetCurrentAcademicYear2.AcademicYear.AcademicYears.FormatE

					}
					// Query QueryAdvQuery1
					int QueryAdvQuery1_maxRecords = 0;
					localVars.queryResAdvQuery1_outParamList = FuncssGetAllStudentRAGs.QueryAdvQuery1(heContext, QueryAdvQuery1_maxRecords, IterationMultiplicity.Multiple, out localVars.queryResAdvQuery1_outParamCount, localVars.inParamAcademicYear
					);
					result.outParamAllStudentRAGs = localVars.queryResAdvQuery1_outParamList; // AllStudentRAGs = AdvQuery1.List
				} // try

				finally {
					outParamAllStudentRAGs = result.outParamAllStudentRAGs;
				}
			}

			public static class FuncssGetAllStudentRAGs {

				/// <summary>
				/// Query Function "AdvQuery1" of Web Service Action "GetAllStudentRAGs"
				/// </summary>
				public static RLAllStudentsAllRAGsRecordList QueryAdvQuery1(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstAcademicYear) {
					// Query Iterations: Multiple {-unbound-}
					// Uses binary data: False
					if (multiplicity == IterationMultiplicity.Never) {
						maxRecords = 1;
					}
					outParamCount = -1;
					bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
					Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
					Command sqlCmd = trans.CreateCommand();
					sqlCmd.CreateParameter("@qpstAcademicYear", DbType.String, qpstAcademicYear);
					string advSql = "SELECT  {Student_Group}.[STUDENTREFERENCE],  " +
					 "        {Group}.[GROUPNAME],  " +
					 "        {Category}.[LABEL],  " +
					 "       CASE  {Category}.[LABEL]  " +
					 "            WHEN 'Specialist Programme' THEN ISNULL((SELECT TOP 1  {StudentLog}.[VOCOVERALLRAG] FROM  {StudentLog} WHERE  {StudentLog}.[STUDENTREFERENCE] =  {Student_Group}.[STUDENTREFERENCE] ORDER BY  {StudentLog}.[DATETIME] DESC),'Green')  " +
					 "            WHEN 'Universal - Math' THEN ISNULL((SELECT TOP 1  {StudentLog}.[MATHOVERALLRAG] FROM  {StudentLog} WHERE  {StudentLog}.[STUDENTREFERENCE] =  {Student_Group}.[STUDENTREFERENCE] ORDER BY  {StudentLog}.[DATETIME] DESC), 'Green')  " +
					 "            WHEN 'Universal - English' THEN ISNULL((SELECT TOP 1  {StudentLog}.[ENGOVERALLRAG] FROM  {StudentLog} WHERE  {StudentLog}.[STUDENTREFERENCE] =  {Student_Group}.[STUDENTREFERENCE] ORDER BY  {StudentLog}.[DATETIME] DESC),'Green')  " +
					 "            WHEN 'Personal - MLW' THEN ISNULL((SELECT TOP 1  {StudentLog}.[MLWOVERALLRAG] FROM  {StudentLog} WHERE  {StudentLog}.[STUDENTREFERENCE] =  {Student_Group}.[STUDENTREFERENCE] ORDER BY  {StudentLog}.[DATETIME] DESC),'Green')  " +
					 "        END  " +
					 "FROM   " +
					 "     {Student_Group}  " +
					 "INNER JOIN  {Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID]  " +
					 "INNER JOIN  {Category} ON  {Group}.[CATEGORY]=  {Category}.[ID]  " +
					 "INNER JOIN  {GroupType} ON  {Group}.[GROUPTYPEID] =  {GroupType}.[ID]  " +
					 "WHERE  " +
					 "     {Student_Group}.[ENROLMENTSTATUS] = 'Active'  " +
					 "AND  {Student_Group}.[ACADEMICYEAR] = @qpstAcademicYear  " +
					 "AND  {GroupType}.[LABEL] = 'Offering'  " +
					 "ORDER BY  {Student_Group}.[STUDENTREFERENCE]";
					string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
					AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
					sqlCmd.CommandText = sql;
					try {
						RLAllStudentsAllRAGsRecordList outParamList = new RLAllStudentsAllRAGsRecordList();
						outParamList.Transaction = trans;
						BitArray[] opt = new BitArray[1];
						opt[0] = new BitArray(new bool[] {
							false, false, false, false
						}
						);
						outParamList.AllOptimizedAttributes = opt;
						if (multiplicity == IterationMultiplicity.Multiple) {
							RLAllStudentsAllRAGsRecordList _tmp = new RLAllStudentsAllRAGsRecordList();
							_tmp.Transaction = trans;
							_tmp.AllOptimizedAttributes = opt;
							_tmp.MaxRecords = maxRecords;
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reports.GetAllStudentRAGs.AdvQuery1.List");
								outParamList = (RLAllStudentsAllRAGsRecordList) _tmp.Duplicate();
								_tmp.CloseDataReader();
								return outParamList;
							} finally {
								_tmp.CloseDataReader();
							}
						} else if (multiplicity == IterationMultiplicity.Never) {
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reports.GetAllStudentRAGs.AdvQuery1.List");
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								outParamList.CloseDataReader();
							}
						} else {
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reports.GetAllStudentRAGs.AdvQuery1.List");
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								if (maxRecords == 1) {
									outParamList.CloseDataReader();
								}
							}
						}
					} catch (System.InvalidOperationException aqExcep) {
						if (aqExcep.Message.StartsWith("Command parameter[")) {
							throw new DataBaseException("Problems accessing parameters in advanced query AdvQuery1 in GetAllStudentRAGs in Reports in CaseConferencing (SELECT {Student_Group}.[StudentReference],         {Group}.[GroupName],         {Category}.[Label],         CASE {Category}.[Label]              WHEN 'Specialist Programme' THEN ISNULL((SELECT TOP 1 {StudentLog}.[VocOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Group}.[StudentReference] ORDER BY {StudentLog}.[DateTime] DESC),'Green')              WHEN 'Universal - Math' THEN ISNULL((SELECT TOP 1 {StudentLog}.[MathOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Group}.[StudentReference] ORDER BY {StudentLog}.[DateTime] DESC), 'Green')              WHEN 'Universal - English' THEN ISNULL((SELECT TOP 1 {StudentLog}.[EngOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Group}.[StudentReference] ORDER BY {StudentLog}.[DateTime] DESC),'Green')              WHEN 'Personal - MLW' THEN ISNULL((SELECT TOP 1 {StudentLog}.[MLWOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Gro ...): " + aqExcep.Message);
						}
						throw new DataBaseException("Error in advanced query AdvQuery1 in GetAllStudentRAGs in Reports in CaseConferencing (SELECT {Student_Group}.[StudentReference],         {Group}.[GroupName],         {Category}.[Label],         CASE {Category}.[Label]              WHEN 'Specialist Programme' THEN ISNULL((SELECT TOP 1 {StudentLog}.[VocOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Group}.[StudentReference] ORDER BY {StudentLog}.[DateTime] DESC),'Green')              WHEN 'Universal - Math' THEN ISNULL((SELECT TOP 1 {StudentLog}.[MathOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Group}.[StudentReference] ORDER BY {StudentLog}.[DateTime] DESC), 'Green')              WHEN 'Universal - English' THEN ISNULL((SELECT TOP 1 {StudentLog}.[EngOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Group}.[StudentReference] ORDER BY {StudentLog}.[DateTime] DESC),'Green')              WHEN 'Personal - MLW' THEN ISNULL((SELECT TOP 1 {StudentLog}.[MLWOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Gro ...): " + aqExcep.Message);
					} catch (Exception aqExcep) {
						throw new DataBaseException("Error in advanced query AdvQuery1 in GetAllStudentRAGs in Reports in CaseConferencing (SELECT {Student_Group}.[StudentReference],         {Group}.[GroupName],         {Category}.[Label],         CASE {Category}.[Label]              WHEN 'Specialist Programme' THEN ISNULL((SELECT TOP 1 {StudentLog}.[VocOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Group}.[StudentReference] ORDER BY {StudentLog}.[DateTime] DESC),'Green')              WHEN 'Universal - Math' THEN ISNULL((SELECT TOP 1 {StudentLog}.[MathOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Group}.[StudentReference] ORDER BY {StudentLog}.[DateTime] DESC), 'Green')              WHEN 'Universal - English' THEN ISNULL((SELECT TOP 1 {StudentLog}.[EngOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Group}.[StudentReference] ORDER BY {StudentLog}.[DateTime] DESC),'Green')              WHEN 'Personal - MLW' THEN ISNULL((SELECT TOP 1 {StudentLog}.[MLWOverallRAG] FROM {StudentLog} WHERE {StudentLog}.[StudentReference] = {Student_Gro ...): " + aqExcep.Message);
					}
				}


			}

		}

	}


}