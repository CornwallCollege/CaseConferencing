/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public static partial class WsReports {
			public class lcvReportsGetAllOverallStudentRAGs: VarsBag {
				public RLAllStudentsOverallRAGRecordList queryResGetAllStudentRAGs_outParamList = new RLAllStudentsOverallRAGRecordList();
				public int queryResGetAllStudentRAGs_outParamCount = 0;

				public lcvReportsGetAllOverallStudentRAGs() {
				}
			}
			public class lcoReportsGetAllOverallStudentRAGs: VarsBag {
				public RLAllStudentsOverallRAGRecordList outParamAllStudentRAGs = new RLAllStudentsOverallRAGRecordList();

				public lcoReportsGetAllOverallStudentRAGs() {
				}
			}
			/// <summary>
			/// Action <code>WebSrvcReportsGetAllOverallStudentRAGs</code> that represents the Service Studio user
			///  action <code>GetAllOverallStudentRAGs</code> <p> Description: </p>
			/// </summary>
			public static void WebSrvcReportsGetAllOverallStudentRAGs(HeContext heContext, out RLAllStudentsOverallRAGRecordList outParamAllStudentRAGs) {
				lcoReportsGetAllOverallStudentRAGs result = new lcoReportsGetAllOverallStudentRAGs();
				lcvReportsGetAllOverallStudentRAGs localVars = new lcvReportsGetAllOverallStudentRAGs();
				try {
					// Query QueryGetAllStudentRAGs
					int QueryGetAllStudentRAGs_maxRecords = 0;
					localVars.queryResGetAllStudentRAGs_outParamList = FuncssGetAllOverallStudentRAGs.QueryGetAllStudentRAGs(heContext, QueryGetAllStudentRAGs_maxRecords, IterationMultiplicity.Multiple, out localVars.queryResGetAllStudentRAGs_outParamCount);
					result.outParamAllStudentRAGs = localVars.queryResGetAllStudentRAGs_outParamList; // AllStudentRAGs = GetAllStudentRAGs.List
				} // try

				finally {
					outParamAllStudentRAGs = result.outParamAllStudentRAGs;
				}
			}

			public static class FuncssGetAllOverallStudentRAGs {

				/// <summary>
				/// Query Function "GetAllStudentRAGs" of Web Service Action "GetAllOverallStudentRAGs"
				/// </summary>
				public static RLAllStudentsOverallRAGRecordList QueryGetAllStudentRAGs(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
					// Query Iterations: Multiple {-unbound-}
					// Uses binary data: False
					if (multiplicity == IterationMultiplicity.Never) {
						maxRecords = 1;
					}
					outParamCount = -1;
					bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
					Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
					Command sqlCmd = trans.CreateCommand();
					string advSql = "SELECT    " +
					 "     {Student}.[STUDENTREFERENCE],  " +
					 "    COALESCE((SELECT TOP 1  " +
					 "            CASE(RTRIM( {StudentLog}.[STUDENTRAG]))  " +
					 "            WHEN '' THEN 'Green'  " +
					 "            ELSE  {StudentLog}.[STUDENTRAG]  " +
					 "            END  " +
					 "  " +
					 "    FROM  {StudentLog}  " +
					 "    WHERE  {StudentLog}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
					 "    ORDER BY  {StudentLog}.[DATETIME] DESC),'Green') AS StudentRAG  " +
					 "FROM  {Student}  " +
					 "ORDER BY StudentRAG";
					string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
					AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
					sqlCmd.CommandText = sql;
					try {
						RLAllStudentsOverallRAGRecordList outParamList = new RLAllStudentsOverallRAGRecordList();
						outParamList.Transaction = trans;
						BitArray[] opt = new BitArray[1];
						opt[0] = new BitArray(new bool[] {
							false, false
						}
						);
						outParamList.AllOptimizedAttributes = opt;
						if (multiplicity == IterationMultiplicity.Multiple) {
							RLAllStudentsOverallRAGRecordList _tmp = new RLAllStudentsOverallRAGRecordList();
							_tmp.Transaction = trans;
							_tmp.AllOptimizedAttributes = opt;
							_tmp.MaxRecords = maxRecords;
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reports.GetAllOverallStudentRAGs.GetAllStudentRAGs.List");
								outParamList = (RLAllStudentsOverallRAGRecordList) _tmp.Duplicate();
								_tmp.CloseDataReader();
								return outParamList;
							} finally {
								_tmp.CloseDataReader();
							}
						} else if (multiplicity == IterationMultiplicity.Never) {
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reports.GetAllOverallStudentRAGs.GetAllStudentRAGs.List");
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								outParamList.CloseDataReader();
							}
						} else {
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reports.GetAllOverallStudentRAGs.GetAllStudentRAGs.List");
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								if (maxRecords == 1) {
									outParamList.CloseDataReader();
								}
							}
						}
					} catch (System.InvalidOperationException aqExcep) {
						if (aqExcep.Message.StartsWith("Command parameter[")) {
							throw new DataBaseException("Problems accessing parameters in advanced query GetAllStudentRAGs in GetAllOverallStudentRAGs in Reports in CaseConferencing (SELECT        {Student}.[StudentReference],      COALESCE((SELECT TOP 1              CASE(RTRIM({StudentLog}.[StudentRAG]))              WHEN '' THEN 'Green'              ELSE {StudentLog}.[StudentRAG]              END        FROM {StudentLog}      WHERE {StudentLog}.[StudentReference] = {Student}.[StudentReference]      ORDER BY {StudentLog}.[DateTime] DESC),'Green') AS StudentRAG  FROM {Student}  ORDER BY StudentRAG): " + aqExcep.Message);
						}
						throw new DataBaseException("Error in advanced query GetAllStudentRAGs in GetAllOverallStudentRAGs in Reports in CaseConferencing (SELECT        {Student}.[StudentReference],      COALESCE((SELECT TOP 1              CASE(RTRIM({StudentLog}.[StudentRAG]))              WHEN '' THEN 'Green'              ELSE {StudentLog}.[StudentRAG]              END        FROM {StudentLog}      WHERE {StudentLog}.[StudentReference] = {Student}.[StudentReference]      ORDER BY {StudentLog}.[DateTime] DESC),'Green') AS StudentRAG  FROM {Student}  ORDER BY StudentRAG): " + aqExcep.Message);
					} catch (Exception aqExcep) {
						throw new DataBaseException("Error in advanced query GetAllStudentRAGs in GetAllOverallStudentRAGs in Reports in CaseConferencing (SELECT        {Student}.[StudentReference],      COALESCE((SELECT TOP 1              CASE(RTRIM({StudentLog}.[StudentRAG]))              WHEN '' THEN 'Green'              ELSE {StudentLog}.[StudentRAG]              END        FROM {StudentLog}      WHERE {StudentLog}.[StudentReference] = {Student}.[StudentReference]      ORDER BY {StudentLog}.[DateTime] DESC),'Green') AS StudentRAG  FROM {Student}  ORDER BY StudentRAG): " + aqExcep.Message);
					}
				}


			}

		}

	}


}