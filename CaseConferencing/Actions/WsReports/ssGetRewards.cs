/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public static partial class WsReports {
			public class lcvReportsGetRewards: VarsBag {
				public string inParamStudentId;
				public RLRewardRewardReasonRecordList queryResGetRewardsByStudentReference_outParamList = new RLRewardRewardReasonRecordList();
				public int queryResGetRewardsByStudentReference_outParamCount = 0;

				public lcvReportsGetRewards(string inParamStudentId) {
					this.inParamStudentId = inParamStudentId;
				}
			}
			public class lcoReportsGetRewards: VarsBag {
				public RLRewardRewardReasonRecordList outParamRewards = new RLRewardRewardReasonRecordList();

				public lcoReportsGetRewards() {
				}
			}
			/// <summary>
			/// Action <code>WebSrvcReportsGetRewards</code> that represents the Service Studio user action
			///  <code>GetRewards</code> <p> Description: </p>
			/// </summary>
			public static void WebSrvcReportsGetRewards(HeContext heContext, string inParamStudentId, out RLRewardRewardReasonRecordList outParamRewards) {
				lcoReportsGetRewards result = new lcoReportsGetRewards();
				lcvReportsGetRewards localVars = new lcvReportsGetRewards(inParamStudentId);
				try {
					// Query datasetGetRewardsByStudentReference
					int datasetGetRewardsByStudentReference_maxRecords = 0;
					localVars.queryResGetRewardsByStudentReference_outParamList = FuncssGetRewards.datasetGetRewardsByStudentReference(heContext, datasetGetRewardsByStudentReference_maxRecords, IterationMultiplicity.Multiple, out localVars.queryResGetRewardsByStudentReference_outParamCount, localVars.inParamStudentId
					);
					result.outParamRewards = localVars.queryResGetRewardsByStudentReference_outParamList; // Rewards = GetRewardsByStudentReference.List
				} // try

				finally {
					outParamRewards = result.outParamRewards;
				}
			}

			public static class FuncssGetRewards {

				private static void datasetGetRewardsByStudentReferenceReadDB(ref RCRewardRewardReasonRecord rec, IDataReader r) {
					int index = 0;
					rec.ssENReward.Read(r, ref index);
					rec.ssENRewardReason.Read(r, ref index);
				}
				/// <summary>
				/// Query Function "GetRewardsByStudentReference" of Web Service Action "GetRewards"
				/// </summary>
				public static RLRewardRewardReasonRecordList datasetGetRewardsByStudentReference(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
					// Query Iterations: Multiple {-unbound-}
					// Uses binary data: False
					if (multiplicity == IterationMultiplicity.Never) {
						maxRecords = 1;
					}
					outParamCount = -1;
					bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
					Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
					Command sqlCmd = trans.CreateCommand();
					string sql = "";
					StringBuilder selectBuilder = new StringBuilder();
					StringBuilder fromBuilder = new StringBuilder();
					StringBuilder whereBuilder = new StringBuilder();
					StringBuilder orderByBuilder = new StringBuilder();
					StringBuilder groupByBuilder = new StringBuilder();
					StringBuilder havingBuilder = new StringBuilder();
					selectBuilder.Append("SELECT ");
					if (maxRecords > 0) {
						selectBuilder.Append("TOP (");
						selectBuilder.Append(maxRecords);
						selectBuilder.Append(") ");
					}
					selectBuilder.Append("ENReward.[ID] o1, ENReward.[STUDENTREFERENCE] o2, ENReward.[REASONID] o3, ENReward.[DESCRIPTION] o4, ENReward.[TYPE] o5, ENReward.[CREATEDBY] o6, ENReward.[CREATEDAT] o7, ENRewardReason.[ID] o8, ENRewardReason.[REASON] o9");
					fromBuilder.Append(" FROM ({RewardReason} ENRewardReason Inner JOIN {Reward} ENReward ON (ENReward.[REASONID] = ENRewardReason.[ID])) ");
					whereBuilder.Append(" WHERE ");
					if (qpstP.Trim() != "") {
						whereBuilder.Append("((ENReward.[STUDENTREFERENCE] = @qpstP) AND (ENReward.[STUDENTREFERENCE] IS NOT NULL))");
						sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);
					} else {
						whereBuilder.Append("(ENReward.[STUDENTREFERENCE] IS NULL)");
					}

					sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
					string advSql = sql;
					sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
					sqlCmd.CommandText = sql;
					RLRewardRewardReasonRecordList outParamList = new RLRewardRewardReasonRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = datasetGetRewardsByStudentReferenceReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[2];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLRewardRewardReasonRecordList _tmp = new RLRewardRewardReasonRecordList();
						_tmp.AlternateReadDBMethod = datasetGetRewardsByStudentReferenceReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reports.GetRewards.GetRewardsByStudentReference.List");
							outParamList = (RLRewardRewardReasonRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reports.GetRewards.GetRewardsByStudentReference.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						if (maxRecords > 0 && maxRecords <= 150) {
							RLRewardRewardReasonRecordList _tmp = new RLRewardRewardReasonRecordList();
							_tmp.AlternateReadDBMethod = datasetGetRewardsByStudentReferenceReadDB;
							_tmp.Transaction = trans;
							_tmp.AllOptimizedAttributes = opt;
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reports.GetRewards.GetRewardsByStudentReference.List");
								outParamList = (RLRewardRewardReasonRecordList) _tmp.Duplicate();
								outParamList.AllOptimizedAttributes = opt;
								_tmp.CloseDataReader();
								return outParamList;
							} finally {
								_tmp.CloseDataReader();
							}
						} else {
							try {
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reports.GetRewards.GetRewardsByStudentReference.List");
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								if (maxRecords == 1) {
									outParamList.CloseDataReader();
								}
							}
						}
					}
				}


			}

		}

	}


}