/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvResetRAGsForStartOfACYear: VarsBag {
			public RLUserRecordList queryResGetUsers_outParamList = new RLUserRecordList();
			public int queryResGetUsers_outParamCount = 0;

			public int resStudentLog_Create_outParamStudentLogId = 0;

			public RLStudent_GroupStudentRAGRecordList queryResGetStudentRAGs_outParamList = new RLStudent_GroupStudentRAGRecordList();
			public int queryResGetStudentRAGs_outParamCount = 0;

			public string resCreateOrUpdateStudentRAG_outParamId = "";

			public RCAcademicYear2Record resGetAcademicYearValues2_outParamAcademicYear = new RCAcademicYear2Record(null);

			public lcvResetRAGsForStartOfACYear() {
			}
		}
		/// <summary>
		/// Action <code>ActionResetRAGsForStartOfACYear</code> that represents the Service Studio user action
		///  <code>ResetRAGsForStartOfACYear</code> <p> Description: </p>
		/// </summary>
		public static void ActionResetRAGsForStartOfACYear(HeContext heContext) {
			lcvResetRAGsForStartOfACYear localVars = new lcvResetRAGsForStartOfACYear();
			// GetAcademicYearValues2
			Actions.ActionGetAcademicYearValues2(heContext, ENAcademicYearType2Entity.GetRecordByKey(ObjectKey.Parse("8ZDe8cEZhk2DF16FIzuk9A")).ssId, "", out localVars.resGetAcademicYearValues2_outParamAcademicYear);
			// Query datasetGetStudentRAGs
			int datasetGetStudentRAGs_maxRecords = 0;
			localVars.queryResGetStudentRAGs_outParamList = FuncActionResetRAGsForStartOfACYear.datasetGetStudentRAGs(heContext, datasetGetStudentRAGs_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetStudentRAGs_outParamCount, localVars.resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.ssYYYY_MM_DD
			);
			// Query datasetGetUsers
			int datasetGetUsers_maxRecords = 0;
			localVars.queryResGetUsers_outParamList = FuncActionResetRAGsForStartOfACYear.datasetGetUsers(heContext, datasetGetUsers_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetUsers_outParamCount);
			// Foreach GetStudentRAGs.List
			localVars.queryResGetStudentRAGs_outParamList.StartIteration();
			try {
				while (! localVars.queryResGetStudentRAGs_outParamList.Eof) {
					localVars.queryResGetStudentRAGs_outParamList.CurrentRec.ssENStudentRAG.ssRAG = BuiltInFunction.NullTextIdentifier(); // GetStudentRAGs.List.Current.StudentRAG.RAG = NullTextIdentifier
					localVars.queryResGetStudentRAGs_outParamList.CurrentRec.ssENStudentRAG.ssDescription = (("RAG reset for start of " +localVars.resGetAcademicYearValues2_outParamAcademicYear.ssENAcademicYear2.ssYY_YY) + " academic year."); // GetStudentRAGs.List.Current.StudentRAG.Description = "RAG reset for start of " +
					// GetAcademicYearValues2.AcademicYear.AcademicYear2.YY_YY + " academic year."
					localVars.queryResGetStudentRAGs_outParamList.CurrentRec.ssENStudentRAG.ssUpdatedAt = BuiltInFunction.CurrDate(); // GetStudentRAGs.List.Current.StudentRAG.UpdatedAt = CurrDate
					localVars.queryResGetStudentRAGs_outParamList.CurrentRec.ssENStudentRAG.ssUpdatedBy = localVars.queryResGetUsers_outParamList.CurrentRec.ssENUser.ssId; // GetStudentRAGs.List.Current.StudentRAG.UpdatedBy = GetUsers.List.Current.User.Id
					// CreateOrUpdateStudentRAG
					ExtendedActions.CreateOrUpdateStudentRAG(heContext, localVars.queryResGetStudentRAGs_outParamList.CurrentRec.ssENStudentRAG.ChangedAttributes, ((RCStudentRAGRecord) localVars.queryResGetStudentRAGs_outParamList.CurrentRec.ssENStudentRAG), out localVars.resCreateOrUpdateStudentRAG_outParamId);
					// StudentLog_Create
					Actions.ActionStudentLog_Create(heContext, localVars.queryResGetStudentRAGs_outParamList.CurrentRec.ssENStudent_Group.ssStudentReference, localVars.queryResGetUsers_outParamList.CurrentRec.ssENUser.ssId, localVars.queryResGetStudentRAGs_outParamList.CurrentRec.ssENStudentRAG.ssDescription, ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("OvSWJ8Xk3UO89FkRkmpfCg")).ssLogType, localVars.queryResGetStudentRAGs_outParamList.CurrentRec.ssENStudentRAG.ssDescription, localVars.queryResGetStudentRAGs_outParamList.CurrentRec.ssENStudentRAG.ssRAG, false, 0, "Student RAG", "", 0, 0, "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
					localVars.queryResGetStudentRAGs_outParamList.Advance();
				}
			} finally {
				localVars.queryResGetStudentRAGs_outParamList.EndIteration();
			}
		}

		public static class FuncActionResetRAGsForStartOfACYear {

			/// <summary>
			/// Query Function "GetUsers" of Action "ResetRAGsForStartOfACYear"
			/// </summary>
			public static RLUserRecordList datasetGetUsers(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENUser.[ID] o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM {User} ENUser");
				whereBuilder.Append(" WHERE (ENUser.[IS_ACTIVE] = 1) AND (ENUser.[USERNAME] LIKE N'admin')");
				orderByBuilder.Append(" ORDER BY ENUser.[NAME] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserRecordList outParamList = new RLUserRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserRecordList _tmp = new RLUserRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query ResetRAGsForStartOfACYear.GetUsers.List");
						outParamList = (RLUserRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query ResetRAGsForStartOfACYear.GetUsers.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserRecordList _tmp = new RLUserRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query ResetRAGsForStartOfACYear.GetUsers.List");
							outParamList = (RLUserRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query ResetRAGsForStartOfACYear.GetUsers.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void datasetGetStudentRAGsReadDB(ref RCStudent_GroupStudentRAGRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENStudent_Group.Read(r, ref index);
				rec.ssENStudentRAG.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudentRAGs" of Action "ResetRAGsForStartOfACYear"
			/// </summary>
			public static RLStudent_GroupStudentRAGRecordList datasetGetStudentRAGs(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, ENStudent_Group.[STUDENTREFERENCE] o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, ENStudentRAG.[STUDENTREFERENCE] o10, ENStudentRAG.[RAG] o11, ENStudentRAG.[DESCRIPTION] o12, ENStudentRAG.[UPDATEDBY] o13, ENStudentRAG.[UPDATEDAT] o14");
				fromBuilder.Append(" FROM ({Student_Group} ENStudent_Group Inner JOIN {StudentRAG} ENStudentRAG ON (ENStudent_Group.[STUDENTREFERENCE] = ENStudentRAG.[STUDENTREFERENCE])) ");
				whereBuilder.Append(" WHERE (ENStudent_Group.[ENDDATE] <= (convert(datetime, substring(@qpstP, 1, 10), 120))) AND (ENStudent_Group.[STUDENTREFERENCE] = (N'30458488'))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudent_GroupStudentRAGRecordList outParamList = new RLStudent_GroupStudentRAGRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetStudentRAGsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true, false, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudent_GroupStudentRAGRecordList _tmp = new RLStudent_GroupStudentRAGRecordList();
					_tmp.AlternateReadDBMethod = datasetGetStudentRAGsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query ResetRAGsForStartOfACYear.GetStudentRAGs.List");
						outParamList = (RLStudent_GroupStudentRAGRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query ResetRAGsForStartOfACYear.GetStudentRAGs.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudent_GroupStudentRAGRecordList _tmp = new RLStudent_GroupStudentRAGRecordList();
						_tmp.AlternateReadDBMethod = datasetGetStudentRAGsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query ResetRAGsForStartOfACYear.GetStudentRAGs.List");
							outParamList = (RLStudent_GroupStudentRAGRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query ResetRAGsForStartOfACYear.GetStudentRAGs.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}


		}


	}


}