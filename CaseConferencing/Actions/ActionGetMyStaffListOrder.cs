/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvGetMyStaffListOrder: VarsBag {
			public string inParamOrderByIn;
			public RLStudentStringStringStringStudentCategoryRAGRecordList queryResAdvQuery1_outParamList = new RLStudentStringStringStringStudentCategoryRAGRecordList();
			public int queryResAdvQuery1_outParamCount = 0;

			public RLCauseOfConcernRecordList queryResGetCauseOfConcerns_outParamList = new RLCauseOfConcernRecordList();
			public int queryResGetCauseOfConcerns_outParamCount = 0;

			public RLStringRecordList queryResAdvQuery2_outParamList = new RLStringRecordList();
			public int queryResAdvQuery2_outParamCount = 0;

			public lcvGetMyStaffListOrder(string inParamOrderByIn) {
				this.inParamOrderByIn = inParamOrderByIn;
			}
		}
		public class lcoGetMyStaffListOrder: VarsBag {
			public string outParamOrderByOut = "";

			public lcoGetMyStaffListOrder() {
			}
		}
		/// <summary>
		/// Action <code>ActionGetMyStaffListOrder</code> that represents the Service Studio user action
		///  <code>GetMyStaffListOrder</code> <p> Description: </p>
		/// </summary>
		public static void ActionGetMyStaffListOrder(HeContext heContext, string inParamOrderByIn, out string outParamOrderByOut) {
			lcoGetMyStaffListOrder result = new lcoGetMyStaffListOrder();
			lcvGetMyStaffListOrder localVars = new lcvGetMyStaffListOrder(inParamOrderByIn);
			try {
				if ((localVars.inParamOrderByIn== "Name")) {
					// Name
					result.outParamOrderByOut = (("ISNULL({RAGStatus}.[Order]," +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + ")"); // OrderByOut = "ISNULL({RAGStatus}.[Order]," + GetRAGStatus(Green).RAGStatus.Order + ")"

				} else {
					if ((localVars.inParamOrderByIn== "Attendance")) {
						// Attendance
						result.outParamOrderByOut = "StudentAttendanceAgg.ATTENDANCEAvg"; // OrderByOut = "StudentAttendanceAgg.ATTENDANCEAvg"

					} else {
						if ((localVars.inParamOrderByIn== "Punctuality")) {
							// Punctuall
							result.outParamOrderByOut = "StudentAttendanceAgg.PUNCTUALITYAvg"; // OrderByOut = "StudentAttendanceAgg.PUNCTUALITYAvg"

						} else {
							if ((localVars.inParamOrderByIn== "VOC")) {
								// VOC
								result.outParamOrderByOut = ((((((((("replace(ISNULL(StudentCatVoc.LongTermOrder, " +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " ), \'\', ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " )") + " , replace(ISNULL(StudentCatVoc.shortTermOrder, ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " ), \'\', ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " )"); // OrderByOut = "replace(ISNULL(StudentCatVoc.LongTermOrder, " + GetRAGStatus(Green).RAGStatus.Order + " ), '', " +
								// GetRAGStatus(Green).RAGStatus.Order + " )" + " , replace(ISNULL(StudentCatVoc.shortTermOrder, " +
								// GetRAGStatus(Green).RAGStatus.Order + " ), '', " + GetRAGStatus(Green).RAGStatus.Order + " )"

							} else {
								if ((localVars.inParamOrderByIn== "Math")) {
									// Math
									result.outParamOrderByOut = ((((((((("replace(ISNULL(StudentCatMath.LongTermOrder, " +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " ), \'\', ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " )") + " , replace(ISNULL(StudentCatMath.shortTermOrder, ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " ), \'\', ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " )"); // OrderByOut = "replace(ISNULL(StudentCatMath.LongTermOrder, " + GetRAGStatus(Green).RAGStatus.Order + " ), '', " +
									// GetRAGStatus(Green).RAGStatus.Order + " )" + " , replace(ISNULL(StudentCatMath.shortTermOrder, " +
									// GetRAGStatus(Green).RAGStatus.Order + " ), '', " + GetRAGStatus(Green).RAGStatus.Order + " )"

								} else {
									if ((localVars.inParamOrderByIn== "English")) {
										// Eng
										result.outParamOrderByOut = ((((((((("replace(ISNULL(StudentCatEng.LongTermOrder, " +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " ), \'\', ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " )") + " , replace(ISNULL(StudentCatEng.shortTermOrder, ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " ), \'\', ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " )"); // OrderByOut = "replace(ISNULL(StudentCatEng.LongTermOrder, " + GetRAGStatus(Green).RAGStatus.Order + " ), '', " +
										// GetRAGStatus(Green).RAGStatus.Order + " )" + " , replace(ISNULL(StudentCatEng.shortTermOrder, " +
										// GetRAGStatus(Green).RAGStatus.Order + " ), '', " + GetRAGStatus(Green).RAGStatus.Order + " )"

									} else {
										if ((localVars.inParamOrderByIn== "MLW")) {
											// MLW
											result.outParamOrderByOut = ((((((((("replace(ISNULL(StudentCatMLW.LongTermOrder, " +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " ), \'\', ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " )") + " , replace(ISNULL(StudentCatMLW.shortTermOrder, ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " ), \'\', ") +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + " )"); // OrderByOut = "replace(ISNULL(StudentCatMLW.LongTermOrder, " + GetRAGStatus(Green).RAGStatus.Order + " ), '', " +
											// GetRAGStatus(Green).RAGStatus.Order + " )" + " , replace(ISNULL(StudentCatMLW.shortTermOrder, " +
											// GetRAGStatus(Green).RAGStatus.Order + " ), '', " + GetRAGStatus(Green).RAGStatus.Order + " )"

										} else {
											if ((localVars.inParamOrderByIn== "Support")) {
												// Support
												result.outParamOrderByOut = "(SELECT count(*) from {Support} with(nolock) WHERE {Support}.[StudentReference] = {Student}.[StudentReference])"; // OrderByOut = "(SELECT count(*) from {Support} with(nolock) WHERE {Support}.[StudentReference] =
												// {Student}.[StudentReference])"

											} else {
												if ((localVars.inParamOrderByIn== "Safe")) {
													// Safe
													result.outParamOrderByOut = "StudentSafeGuarding.SGCount"; // OrderByOut = "StudentSafeGuarding.SGCount"

												} else {
													if ((localVars.inParamOrderByIn== "Concern")) {
														// Concern
														result.outParamOrderByOut = "(SELECT \r\n        SUM(\r\n            case {CauseOfConcern}.[RAGStatusId] \r\n                when  \'Raised\' Then 20 \r\n                when  \'RED\' Then 10 \r\n                when  \'Amber\' Then 3 \r\n                when  \'Green\' Then 1\r\n                ELSE 0\r\n            END\r\n        )\r\nFrom {CauseOfConcern} WHERE {CauseOfConcern}.[StudentReference] = {Student}.[StudentReference] )\r\n"; // OrderByOut = "(SELECT
														//        SUM(
														//            case {CauseOfConcern}.[RAGStatusId]
														//                when
														//  'Raised' Then 20
														//                when  'RED' Then 10
														//                when  'Amber' Then 3
														// 
														//      when  'Green' Then 1
														//                ELSE 0
														//            END
														//        )
														// From {CauseOfConcern}
														// WHERE {CauseOfConcern}.[StudentReference] = {Student}.[StudentReference] )
														// "

													} else {
														if ((localVars.inParamOrderByIn== "Reward")) {
															// Reward
															result.outParamOrderByOut = "(SELECT count(*) FROM {Reward} WHERE {Reward}.[StudentReference] = {Student}.[StudentReference])"; // OrderByOut = "(SELECT count(*) FROM {Reward} WHERE {Reward}.[StudentReference] = {Student}.[StudentReference])"

														} else {
															result.outParamOrderByOut = (("ISNULL({RAGStatus}.[Order]," +Convert.ToString(Functions.ssGetRAGStatus(heContext, ENRAGStatusEntity.GetRecordByKey(ObjectKey.Parse("u0BaxHGj1kKk2eULnLokxA")).ssId).ssENRAGStatus.ssOrder)) + ")"); // OrderByOut = "ISNULL({RAGStatus}.[Order]," + GetRAGStatus(Green).RAGStatus.Order + ")"
															if (false) {
																// Query datasetGetCauseOfConcerns
																int datasetGetCauseOfConcerns_maxRecords = 0;
																localVars.queryResGetCauseOfConcerns_outParamList = FuncActionGetMyStaffListOrder.datasetGetCauseOfConcerns(heContext, datasetGetCauseOfConcerns_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetCauseOfConcerns_outParamCount);
																// Query QueryAdvQuery1
																int QueryAdvQuery1_maxRecords = 0;
																localVars.queryResAdvQuery1_outParamList = FuncActionGetMyStaffListOrder.QueryAdvQuery1(heContext, QueryAdvQuery1_maxRecords, IterationMultiplicity.Never, out localVars.queryResAdvQuery1_outParamCount);
																// Query QueryAdvQuery2
																int QueryAdvQuery2_maxRecords = 0;
																localVars.queryResAdvQuery2_outParamList = FuncActionGetMyStaffListOrder.QueryAdvQuery2(heContext, QueryAdvQuery2_maxRecords, IterationMultiplicity.Never, out localVars.queryResAdvQuery2_outParamCount);

															}

														}

													}

												}

											}

										}

									}

								}

							}

						}

					}

				}
			} // try

			finally {
				outParamOrderByOut = result.outParamOrderByOut;
			}
		}

		public static class FuncActionGetMyStaffListOrder {

			private static void QueryAdvQuery1ReadDB(ref RCStudentStringStringStringStudentCategoryRAGRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENStudent.Read(r, ref index);
				rec.ssENStudentCategoryRAG.Read(r, ref index);
				rec.ssSTString.Read(r, ref index);
				rec.ssSTString_2.Read(r, ref index);
				rec.ssSTString_3.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "AdvQuery1" of Action "GetMyStaffListOrder"
			/// </summary>
			public static RLStudentStringStringStringStudentCategoryRAGRecordList QueryAdvQuery1(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string advSql = "SELECT top 100 *,  replace(ISNULL(StudentCatVoc.ShortTermOrder, 3 ), '', 3 ) from  {Student}   " +
				 "LEFT JOIN (  " +
				 "               SELECT   {StudentCategoryRAG}.[ID], {StudentCategoryRAG}.[STUDENTREFERENCE], {StudentCategoryRAG}.[CATEGORYID], {StudentCategoryRAG}.[SHORTTERMRAGID], {StudentCategoryRAG}.[SHORTTERMDESCRIPTION], {StudentCategoryRAG}.[SHORTTERMUPDATEDBY], {StudentCategoryRAG}.[SHORTTERMUPDATEDAT], {StudentCategoryRAG}.[OVERALLRAGID], {StudentCategoryRAG}.[OVERALLDESCRIPTION], {StudentCategoryRAG}.[OVERALLUPDATEDBY], {StudentCategoryRAG}.[OVERALLUPDATEDAT], {StudentCategoryRAG}.[SHORTTERMRAGSTATUS] ,  ShortTerm.[ORDER]  ShortTermOrder,   LongTerm.[ORDER]  LongTermOrder from   {StudentCategoryRAG}  " +
				 "                LEFT JOIN  {RAGStatus} ShortTerm ON ShortTerm.[ID] =   {StudentCategoryRAG}.[SHORTTERMRAGID]  " +
				 "                LEFT JOIN  {RAGStatus} LongTerm ON  LongTerm.[ID] =   {StudentCategoryRAG}.[OVERALLRAGID]  " +
				 "                WHERE  {StudentCategoryRAG}.[CATEGORYID] = 1  " +
				 "            ) StudentCatVoc ON StudentCatVoc.[STUDENTREFERENCE]= {Student}.[STUDENTREFERENCE]  " +
				 "  " +
				 "order by replace(ISNULL(StudentCatVoc.ShortTermOrder, 3 ), '', 3 ) desc";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStudentStringStringStringStudentCategoryRAGRecordList outParamList = new RLStudentStringStringStringStudentCategoryRAGRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryAdvQuery1ReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[5];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					opt[2] = new BitArray(new bool[] {
						false
					}
					);
					opt[3] = new BitArray(new bool[] {
						false
					}
					);
					opt[4] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudentStringStringStringStudentCategoryRAGRecordList _tmp = new RLStudentStringStringStringStudentCategoryRAGRecordList();
						_tmp.AlternateReadDBMethod = QueryAdvQuery1ReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Student.GetMyStaffListOrder.AdvQuery1.List");
							outParamList = (RLStudentStringStringStringStudentCategoryRAGRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Student.GetMyStaffListOrder.AdvQuery1.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Student.GetMyStaffListOrder.AdvQuery1.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query AdvQuery1 in GetMyStaffListOrder in Student in CaseConferencing (SELECT top 100 *,  replace(ISNULL(StudentCatVoc.ShortTermOrder, 3 ), '', 3 ) from {Student}   LEFT JOIN (                 SELECT  {StudentCategoryRAG}.* ,  ShortTerm.[Order]  ShortTermOrder,   LongTerm.[Order]  LongTermOrder from  {StudentCategoryRAG}                  LEFT JOIN {RAGStatus} ShortTerm ON ShortTerm.[Id] =  {StudentCategoryRAG}.[ShortTermRAGId]                  LEFT JOIN {RAGStatus} LongTerm ON  LongTerm.[Id] =  {StudentCategoryRAG}.[OverallRAGId]                  WHERE {StudentCategoryRAG}.[CategoryId] = 1              ) StudentCatVoc ON StudentCatVoc.[StudentReference]={Student}.[StudentReference]    order by replace(ISNULL(StudentCatVoc.ShortTermOrder, 3 ), '', 3 ) desc    ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query AdvQuery1 in GetMyStaffListOrder in Student in CaseConferencing (SELECT top 100 *,  replace(ISNULL(StudentCatVoc.ShortTermOrder, 3 ), '', 3 ) from {Student}   LEFT JOIN (                 SELECT  {StudentCategoryRAG}.* ,  ShortTerm.[Order]  ShortTermOrder,   LongTerm.[Order]  LongTermOrder from  {StudentCategoryRAG}                  LEFT JOIN {RAGStatus} ShortTerm ON ShortTerm.[Id] =  {StudentCategoryRAG}.[ShortTermRAGId]                  LEFT JOIN {RAGStatus} LongTerm ON  LongTerm.[Id] =  {StudentCategoryRAG}.[OverallRAGId]                  WHERE {StudentCategoryRAG}.[CategoryId] = 1              ) StudentCatVoc ON StudentCatVoc.[StudentReference]={Student}.[StudentReference]    order by replace(ISNULL(StudentCatVoc.ShortTermOrder, 3 ), '', 3 ) desc    ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query AdvQuery1 in GetMyStaffListOrder in Student in CaseConferencing (SELECT top 100 *,  replace(ISNULL(StudentCatVoc.ShortTermOrder, 3 ), '', 3 ) from {Student}   LEFT JOIN (                 SELECT  {StudentCategoryRAG}.* ,  ShortTerm.[Order]  ShortTermOrder,   LongTerm.[Order]  LongTermOrder from  {StudentCategoryRAG}                  LEFT JOIN {RAGStatus} ShortTerm ON ShortTerm.[Id] =  {StudentCategoryRAG}.[ShortTermRAGId]                  LEFT JOIN {RAGStatus} LongTerm ON  LongTerm.[Id] =  {StudentCategoryRAG}.[OverallRAGId]                  WHERE {StudentCategoryRAG}.[CategoryId] = 1              ) StudentCatVoc ON StudentCatVoc.[StudentReference]={Student}.[StudentReference]    order by replace(ISNULL(StudentCatVoc.ShortTermOrder, 3 ), '', 3 ) desc    ): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetCauseOfConcerns" of Action "GetMyStaffListOrder"
			/// </summary>
			public static RLCauseOfConcernRecordList datasetGetCauseOfConcerns(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7");
				fromBuilder.Append(" FROM {CauseOfConcern} ENCauseOfConcern");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCauseOfConcernRecordList outParamList = new RLCauseOfConcernRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCauseOfConcernRecordList _tmp = new RLCauseOfConcernRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Student.GetMyStaffListOrder.GetCauseOfConcerns.List");
						outParamList = (RLCauseOfConcernRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Student.GetMyStaffListOrder.GetCauseOfConcerns.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCauseOfConcernRecordList _tmp = new RLCauseOfConcernRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Student.GetMyStaffListOrder.GetCauseOfConcerns.List");
							outParamList = (RLCauseOfConcernRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Student.GetMyStaffListOrder.GetCauseOfConcerns.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "AdvQuery2" of Action "GetMyStaffListOrder"
			/// </summary>
			public static RLStringRecordList QueryAdvQuery2(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string advSql = "SELECT   " +
				 "        SUM(  " +
				 "            case  {CauseOfConcern}.[RAGSTATUSID]   " +
				 "                when  'Raised' Then 20   " +
				 "                when  'RED' Then 10   " +
				 "                when  'Amber' Then 3   " +
				 "                when  'Green' Then 1  " +
				 "                ELSE 0  " +
				 "            END  " +
				 "        )  " +
				 "From  {CauseOfConcern} WHERE  {CauseOfConcern}.[STUDENTREFERENCE] = '20061004'";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringRecordList outParamList = new RLStringRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringRecordList _tmp = new RLStringRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Student.GetMyStaffListOrder.AdvQuery2.List");
							outParamList = (RLStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Student.GetMyStaffListOrder.AdvQuery2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Student.GetMyStaffListOrder.AdvQuery2.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query AdvQuery2 in GetMyStaffListOrder in Student in CaseConferencing (SELECT           SUM(              case {CauseOfConcern}.[RAGStatusId]                   when  'Raised' Then 20                   when  'RED' Then 10                   when  'Amber' Then 3                   when  'Green' Then 1                  ELSE 0              END          )  From {CauseOfConcern} WHERE {CauseOfConcern}.[StudentReference] = '20061004'): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query AdvQuery2 in GetMyStaffListOrder in Student in CaseConferencing (SELECT           SUM(              case {CauseOfConcern}.[RAGStatusId]                   when  'Raised' Then 20                   when  'RED' Then 10                   when  'Amber' Then 3                   when  'Green' Then 1                  ELSE 0              END          )  From {CauseOfConcern} WHERE {CauseOfConcern}.[StudentReference] = '20061004'): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query AdvQuery2 in GetMyStaffListOrder in Student in CaseConferencing (SELECT           SUM(              case {CauseOfConcern}.[RAGStatusId]                   when  'Raised' Then 20                   when  'RED' Then 10                   when  'Amber' Then 3                   when  'Green' Then 1                  ELSE 0              END          )  From {CauseOfConcern} WHERE {CauseOfConcern}.[StudentReference] = '20061004'): " + aqExcep.Message);
				}
			}


		}


	}


}