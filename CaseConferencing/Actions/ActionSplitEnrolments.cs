/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvSplitEnrolments: VarsBag {
			public RLStaffViewRecordRecordList inParamStaffViewRecordsList;
			public RLStudent_GroupRecordList inParamStudentGroups;
			public lcoGetStudentEnrolmentStatus resGetStudentEnrolmentStatus = new lcoGetStudentEnrolmentStatus();
			public lcvSplitEnrolments(RLStaffViewRecordRecordList inParamStaffViewRecordsList, RLStudent_GroupRecordList inParamStudentGroups) {
				this.inParamStaffViewRecordsList = inParamStaffViewRecordsList;
				this.inParamStudentGroups = inParamStudentGroups;
			}
		}
		public class lcoSplitEnrolments: VarsBag {
			public RLStaffViewRecordRecordList outParamActiveEnrolments = new RLStaffViewRecordRecordList();

			public RLStaffViewRecordRecordList outParamCompletedEnrolments = new RLStaffViewRecordRecordList();

			public RLStaffViewRecordRecordList outParamTransferredEnrolments = new RLStaffViewRecordRecordList();

			public RLStaffViewRecordRecordList outParamWithdrawnEnrolments = new RLStaffViewRecordRecordList();

			public lcoSplitEnrolments() {
			}
		}
		/// <summary>
		/// Action <code>ActionSplitEnrolments</code> that represents the Service Studio user action
		///  <code>SplitEnrolments</code> <p> Description: </p>
		/// </summary>
		public static void ActionSplitEnrolments(HeContext heContext, RLStaffViewRecordRecordList inParamStaffViewRecordsList, RLStudent_GroupRecordList inParamStudentGroups, out RLStaffViewRecordRecordList outParamActiveEnrolments, out RLStaffViewRecordRecordList outParamCompletedEnrolments, out RLStaffViewRecordRecordList outParamTransferredEnrolments, out RLStaffViewRecordRecordList outParamWithdrawnEnrolments) {
			lcoSplitEnrolments result = new lcoSplitEnrolments();
			lcvSplitEnrolments localVars = new lcvSplitEnrolments(inParamStaffViewRecordsList, inParamStudentGroups);
			try {
				// Foreach StaffViewRecordsList
				localVars.inParamStaffViewRecordsList.StartIteration();
				try {
					while (! localVars.inParamStaffViewRecordsList.Eof) {
						// GetStudentEnrolmentStatus
						Actions.ActionGetStudentEnrolmentStatus(heContext, localVars.inParamStaffViewRecordsList.CurrentRec.ssSTStaffViewRecord.ssStudentReference, localVars.inParamStudentGroups, out localVars.resGetStudentEnrolmentStatus.outParamEnrolmentStatus);
						if ((localVars.resGetStudentEnrolmentStatus.outParamEnrolmentStatus== "Active")) {
							// AppendActive
							ExtendedActions.ListAppend(heContext, result.outParamActiveEnrolments, localVars.inParamStaffViewRecordsList.CurrentRec);

						} else {
							if ((localVars.resGetStudentEnrolmentStatus.outParamEnrolmentStatus== "Completed")) {
								// AppendCompleted
								ExtendedActions.ListAppend(heContext, result.outParamCompletedEnrolments, localVars.inParamStaffViewRecordsList.CurrentRec);

							} else {
								if ((localVars.resGetStudentEnrolmentStatus.outParamEnrolmentStatus== "Transferred")) {
									// AppendTransferred
									ExtendedActions.ListAppend(heContext, result.outParamTransferredEnrolments, localVars.inParamStaffViewRecordsList.CurrentRec);

								} else {
									if ((localVars.resGetStudentEnrolmentStatus.outParamEnrolmentStatus== "Withdrawn")) {
										// AppendWithdrawn
										ExtendedActions.ListAppend(heContext, result.outParamWithdrawnEnrolments, localVars.inParamStaffViewRecordsList.CurrentRec);

									} else {
										// DefaultAppendActive
										ExtendedActions.ListAppend(heContext, result.outParamActiveEnrolments, localVars.inParamStaffViewRecordsList.CurrentRec);

									}

								}

							}

						}
						localVars.inParamStaffViewRecordsList.Advance();
					}
				} finally {
					localVars.inParamStaffViewRecordsList.EndIteration();
				}
			} // try

			finally {
				outParamActiveEnrolments = result.outParamActiveEnrolments;
				outParamCompletedEnrolments = result.outParamCompletedEnrolments;
				outParamTransferredEnrolments = result.outParamTransferredEnrolments;
				outParamWithdrawnEnrolments = result.outParamWithdrawnEnrolments;
			}
		}

		public static class FuncActionSplitEnrolments {


		}


	}


}