/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvGetLearnerListString: VarsBag {
			public bool inParamIsFavourites;
			public bool inParamOnlyActive;
			/// <summary>
			/// Variable <code>varLcStringRecordList</code> that represents the Service Studio local variable
			///  <code>StringRecordList</code> <p>Description: </p>
			/// </summary>
			public RLStringRecordList varLcStringRecordList = new RLStringRecordList();

			public RLStringRecordList queryResGetMyFavourites_outParamList = new RLStringRecordList();
			public int queryResGetMyFavourites_outParamCount = 0;

			public string resSplitDomainAndUser_outParamDomain = "";
			public string resSplitDomainAndUser_outParamUsername = "";

			public RLStringRecordList queryResGetMyTimeTabledStudents_outParamList = new RLStringRecordList();
			public int queryResGetMyTimeTabledStudents_outParamCount = 0;

			public RLStringRecordList queryResGetMyPLAStudents_outParamList = new RLStringRecordList();
			public int queryResGetMyPLAStudents_outParamCount = 0;

			public lcvGetLearnerListString(bool inParamIsFavourites, bool inParamOnlyActive) {
				this.inParamIsFavourites = inParamIsFavourites;
				this.inParamOnlyActive = inParamOnlyActive;
			}
		}
		public class lcoGetLearnerListString: VarsBag {
			public string outParamStudentListString = "";

			public int outParamStudentCount = 0;

			public lcoGetLearnerListString() {
			}
		}
		/// <summary>
		/// Action <code>ActionGetLearnerListString</code> that represents the Service Studio user action
		///  <code>GetLearnerListString</code> <p> Description: </p>
		/// </summary>
		public static void ActionGetLearnerListString(HeContext heContext, bool inParamIsFavourites, bool inParamOnlyActive, out string outParamStudentListString, out int outParamStudentCount) {
			lcoGetLearnerListString result = new lcoGetLearnerListString();
			lcvGetLearnerListString localVars = new lcvGetLearnerListString(inParamIsFavourites, inParamOnlyActive);
			try {
				// SplitDomainAndUser
				Actions.ActionSplitDomainAndUser(heContext, ((string) Global.App.OsContext.Session["UserName"]), ".", out localVars.resSplitDomainAndUser_outParamDomain, out localVars.resSplitDomainAndUser_outParamUsername);
				if (localVars.inParamIsFavourites) {
					// Query QueryGetMyFavourites
					int QueryGetMyFavourites_maxRecords = 0;
					localVars.queryResGetMyFavourites_outParamList = FuncActionGetLearnerListString.QueryGetMyFavourites(heContext, QueryGetMyFavourites_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetMyFavourites_outParamCount, ((int) Global.App.OsContext.Session["UserID"])
					, localVars.inParamOnlyActive
					);
					localVars.varLcStringRecordList = localVars.queryResGetMyFavourites_outParamList; // StringRecordList = GetMyFavourites.List

				} else {
					if (Functions.ssCheckPLARole(heContext, ((int) Global.App.OsContext.Session["UserID"]))) {
						// Query QueryGetMyPLAStudents
						int QueryGetMyPLAStudents_maxRecords = 0;
						localVars.queryResGetMyPLAStudents_outParamList = FuncActionGetLearnerListString.QueryGetMyPLAStudents(heContext, QueryGetMyPLAStudents_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetMyPLAStudents_outParamCount, localVars.resSplitDomainAndUser_outParamUsername
						, localVars.inParamOnlyActive
						);
						localVars.varLcStringRecordList = localVars.queryResGetMyPLAStudents_outParamList; // StringRecordList = GetMyPLAStudents.List

					} else {
						// Query QueryGetMyTimeTabledStudents
						int QueryGetMyTimeTabledStudents_maxRecords = 0;
						localVars.queryResGetMyTimeTabledStudents_outParamList = FuncActionGetLearnerListString.QueryGetMyTimeTabledStudents(heContext, QueryGetMyTimeTabledStudents_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetMyTimeTabledStudents_outParamCount, localVars.resSplitDomainAndUser_outParamUsername
						, localVars.inParamOnlyActive
						);
						localVars.varLcStringRecordList = localVars.queryResGetMyTimeTabledStudents_outParamList; // StringRecordList = GetMyTimeTabledStudents.List

					}

				}
				// Foreach StringRecordList
				localVars.varLcStringRecordList.StartIteration();
				try {
					while (! localVars.varLcStringRecordList.Eof) {
						result.outParamStudentListString = (result.outParamStudentListString+localVars.varLcStringRecordList.CurrentRec.ssSTString.ssValue); // StudentListString = StudentListString + StringRecordList.Current.String.Value
						result.outParamStudentCount = (result.outParamStudentCount+1); // StudentCount = StudentCount + 1
						localVars.varLcStringRecordList.Advance();
					}
				} finally {
					localVars.varLcStringRecordList.EndIteration();
				}
				result.outParamStudentListString = (("(" +BuiltInFunction.Substr(result.outParamStudentListString, 0, (BuiltInFunction.Length(result.outParamStudentListString) -1))) + ")"); // StudentListString = "(" + Substr + ")"
			} // try

			finally {
				outParamStudentListString = result.outParamStudentListString;
				outParamStudentCount = result.outParamStudentCount;
			}
		}

		public static class FuncActionGetLearnerListString {

			/// <summary>
			/// Query Function "GetMyFavourites" of Action "GetLearnerListString"
			/// </summary>
			public static RLStringRecordList QueryGetMyFavourites(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinUserID, bool qpboOnlyActive) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinUserID", DbType.Int32, qpinUserID);
				sqlCmd.CreateParameter("@qpboOnlyActive", DbType.Boolean, qpboOnlyActive);
				string advSql = "SELECT DISTINCT '''' +  {StaffStudentFavourite}.[STUDENTREFERENCE] + ''',' FROM  {StaffStudentFavourite}   " +
				 "INNER JOIN  {Student} ON  {StaffStudentFavourite}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "WHERE  {StaffStudentFavourite}.[USERID] = @qpinUserID  " +
				 "AND (@qpboOnlyActive = 0 OR  {Student}.[HASCURRENTACTIVEENROLMENT] = 1)";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringRecordList outParamList = new RLStringRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringRecordList _tmp = new RLStringRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Dashboard.GetLearnerListString.GetMyFavourites.List");
							outParamList = (RLStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.GetLearnerListString.GetMyFavourites.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.GetLearnerListString.GetMyFavourites.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetMyFavourites in GetLearnerListString in Dashboard in CaseConferencing (SELECT DISTINCT '''' + {StaffStudentFavourite}.[StudentReference] + ''',' FROM {StaffStudentFavourite}   INNER JOIN {Student} ON {StaffStudentFavourite}.[StudentReference] = {Student}.[StudentReference]  WHERE {StaffStudentFavourite}.[UserId] = @UserID  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetMyFavourites in GetLearnerListString in Dashboard in CaseConferencing (SELECT DISTINCT '''' + {StaffStudentFavourite}.[StudentReference] + ''',' FROM {StaffStudentFavourite}   INNER JOIN {Student} ON {StaffStudentFavourite}.[StudentReference] = {Student}.[StudentReference]  WHERE {StaffStudentFavourite}.[UserId] = @UserID  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetMyFavourites in GetLearnerListString in Dashboard in CaseConferencing (SELECT DISTINCT '''' + {StaffStudentFavourite}.[StudentReference] + ''',' FROM {StaffStudentFavourite}   INNER JOIN {Student} ON {StaffStudentFavourite}.[StudentReference] = {Student}.[StudentReference]  WHERE {StaffStudentFavourite}.[UserId] = @UserID  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] = 1)): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetMyTimeTabledStudents" of Action "GetLearnerListString"
			/// </summary>
			public static RLStringRecordList QueryGetMyTimeTabledStudents(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstADName, bool qpboOnlyActive) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstADName", DbType.String, qpstADName);
				sqlCmd.CreateParameter("@qpboOnlyActive", DbType.Boolean, qpboOnlyActive);
				string advSql = "SELECT DISTINCT '''' +  {Student_Group}.[STUDENTREFERENCE] + ''','   " +
				 "FROM  {Student_Group}  " +
				 "INNER JOIN  {Staff_Group} ON  {Student_Group}.[GROUPID] =  {Staff_Group}.[GROUPID]  " +
				 "INNER JOIN  {Staff} ON  {Staff_Group}.[STAFFID] =  {Staff}.[ID]  " +
				 "INNER JOIN  {Student} ON  {Student_Group}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "WHERE  {Staff}.[ADNAME] = @qpstADName  " +
				 "AND (@qpboOnlyActive = 0 OR  {Student}.[HASCURRENTACTIVEENROLMENT] =1)";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringRecordList outParamList = new RLStringRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringRecordList _tmp = new RLStringRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Dashboard.GetLearnerListString.GetMyTimeTabledStudents.List");
							outParamList = (RLStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.GetLearnerListString.GetMyTimeTabledStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.GetLearnerListString.GetMyTimeTabledStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetMyTimeTabledStudents in GetLearnerListString in Dashboard in CaseConferencing (SELECT DISTINCT '''' + {Student_Group}.[StudentReference] + ''','   FROM {Student_Group}  INNER JOIN {Staff_Group} ON {Student_Group}.[GroupId] = {Staff_Group}.[GroupId]  INNER JOIN {Staff} ON {Staff_Group}.[StaffId] = {Staff}.[Id]  INNER JOIN {Student} ON {Student_Group}.[StudentReference] = {Student}.[StudentReference]  WHERE {Staff}.[ADName] = @ADName  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] =1)): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetMyTimeTabledStudents in GetLearnerListString in Dashboard in CaseConferencing (SELECT DISTINCT '''' + {Student_Group}.[StudentReference] + ''','   FROM {Student_Group}  INNER JOIN {Staff_Group} ON {Student_Group}.[GroupId] = {Staff_Group}.[GroupId]  INNER JOIN {Staff} ON {Staff_Group}.[StaffId] = {Staff}.[Id]  INNER JOIN {Student} ON {Student_Group}.[StudentReference] = {Student}.[StudentReference]  WHERE {Staff}.[ADName] = @ADName  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] =1)): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetMyTimeTabledStudents in GetLearnerListString in Dashboard in CaseConferencing (SELECT DISTINCT '''' + {Student_Group}.[StudentReference] + ''','   FROM {Student_Group}  INNER JOIN {Staff_Group} ON {Student_Group}.[GroupId] = {Staff_Group}.[GroupId]  INNER JOIN {Staff} ON {Staff_Group}.[StaffId] = {Staff}.[Id]  INNER JOIN {Student} ON {Student_Group}.[StudentReference] = {Student}.[StudentReference]  WHERE {Staff}.[ADName] = @ADName  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] =1)): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetMyPLAStudents" of Action "GetLearnerListString"
			/// </summary>
			public static RLStringRecordList QueryGetMyPLAStudents(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstADName, bool qpboOnlyActive) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstADName", DbType.String, qpstADName);
				sqlCmd.CreateParameter("@qpboOnlyActive", DbType.Boolean, qpboOnlyActive);
				string advSql = "SELECT DISTINCT '''' +  {Student}.[STUDENTREFERENCE] + ''','   " +
				 "FROM  {Student}   " +
				 "WHERE RTrim( {Student}.[PERSONALTUTOR]) = @qpstADName  " +
				 "AND (@qpboOnlyActive = 0 OR  {Student}.[HASCURRENTACTIVEENROLMENT] =1)";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringRecordList outParamList = new RLStringRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringRecordList _tmp = new RLStringRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Dashboard.GetLearnerListString.GetMyPLAStudents.List");
							outParamList = (RLStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.GetLearnerListString.GetMyPLAStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.GetLearnerListString.GetMyPLAStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetMyPLAStudents in GetLearnerListString in Dashboard in CaseConferencing (SELECT DISTINCT '''' + {Student}.[StudentReference] + ''','   FROM {Student}   WHERE RTrim({Student}.[PersonalTutor]) = @ADName  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] =1)): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetMyPLAStudents in GetLearnerListString in Dashboard in CaseConferencing (SELECT DISTINCT '''' + {Student}.[StudentReference] + ''','   FROM {Student}   WHERE RTrim({Student}.[PersonalTutor]) = @ADName  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] =1)): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetMyPLAStudents in GetLearnerListString in Dashboard in CaseConferencing (SELECT DISTINCT '''' + {Student}.[StudentReference] + ''','   FROM {Student}   WHERE RTrim({Student}.[PersonalTutor]) = @ADName  AND (@OnlyActive = 0 OR {Student}.[HasCurrentActiveEnrolment] =1)): " + aqExcep.Message);
				}
			}


		}


	}


}