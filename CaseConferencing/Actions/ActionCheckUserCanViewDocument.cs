/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvCheckUserCanViewDocument: VarsBag {
			public int inParamDocumentID;
			public RLUserDocumentPermissionsRecordList queryResGetUserDocumentPermissionsByUserId_outParamList = new RLUserDocumentPermissionsRecordList();
			public int queryResGetUserDocumentPermissionsByUserId_outParamCount = 0;

			public lcvCheckUserCanViewDocument(int inParamDocumentID) {
				this.inParamDocumentID = inParamDocumentID;
			}
		}
		public class lcoCheckUserCanViewDocument: VarsBag {
			public bool outParamCanView = false;

			public lcoCheckUserCanViewDocument() {
			}
		}
		/// <summary>
		/// Action <code>ActionCheckUserCanViewDocument</code> that represents the Service Studio user action
		///  <code>CheckUserCanViewDocument</code> <p> Description: </p>
		/// </summary>
		public static void ActionCheckUserCanViewDocument(HeContext heContext, int inParamDocumentID, out bool outParamCanView) {
			lcoCheckUserCanViewDocument result = new lcoCheckUserCanViewDocument();
			lcvCheckUserCanViewDocument localVars = new lcvCheckUserCanViewDocument(inParamDocumentID);
			try {
				// Query datasetGetUserDocumentPermissionsByUserId
				int datasetGetUserDocumentPermissionsByUserId_maxRecords = 0;
				localVars.queryResGetUserDocumentPermissionsByUserId_outParamList = FuncActionCheckUserCanViewDocument.datasetGetUserDocumentPermissionsByUserId(heContext, datasetGetUserDocumentPermissionsByUserId_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetUserDocumentPermissionsByUserId_outParamCount, localVars.inParamDocumentID
				, ((int) Global.App.OsContext.Session["UserID"])
				);
				if (localVars.queryResGetUserDocumentPermissionsByUserId_outParamList.Empty) {
					result.outParamCanView = false; // CanView = False

				} else {
					result.outParamCanView = true; // CanView = True

				}
			} // try

			finally {
				outParamCanView = result.outParamCanView;
			}
		}

		public static class FuncActionCheckUserCanViewDocument {

			/// <summary>
			/// Query Function "GetUserDocumentPermissionsByUserId" of Action "CheckUserCanViewDocument"
			/// </summary>
			public static RLUserDocumentPermissionsRecordList datasetGetUserDocumentPermissionsByUserId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3");
				fromBuilder.Append(" FROM {UserDocumentPermissions} ENUserDocumentPermissions");
				whereBuilder.Append(" WHERE ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENUserDocumentPermissions.[USERID] = @qpinP1) AND (ENUserDocumentPermissions.[USERID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENUserDocumentPermissions.[USERID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENUserDocumentPermissions.[DOCUMENTID] = @qpinP) AND (ENUserDocumentPermissions.[DOCUMENTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENUserDocumentPermissions.[DOCUMENTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserDocumentPermissionsRecordList outParamList = new RLUserDocumentPermissionsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserDocumentPermissionsRecordList _tmp = new RLUserDocumentPermissionsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CheckUserCanViewDocument.GetUserDocumentPermissionsByUserId.List");
						outParamList = (RLUserDocumentPermissionsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CheckUserCanViewDocument.GetUserDocumentPermissionsByUserId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserDocumentPermissionsRecordList _tmp = new RLUserDocumentPermissionsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CheckUserCanViewDocument.GetUserDocumentPermissionsByUserId.List");
							outParamList = (RLUserDocumentPermissionsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CheckUserCanViewDocument.GetUserDocumentPermissionsByUserId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}


		}


	}


}