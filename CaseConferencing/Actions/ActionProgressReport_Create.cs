/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvProgressReport_Create: VarsBag {
			public RCProgressReportRecord inParamProgressReport;
			public string inParamStudentId;
			public string inParamAcademicYearId;
			/// <summary>
			/// Variable <code>varLcProgressReportSection</code> that represents the Service Studio local variable
			///  <code>ProgressReportSection</code> <p>Description: </p>
			/// </summary>
			public RCProgressReportSectionRecord varLcProgressReportSection = new RCProgressReportSectionRecord(null);

			/// <summary>
			/// Variable <code>varLcProgressReportSections</code> that represents the Service Studio local variable
			///  <code>ProgressReportSections</code> <p>Description: </p>
			/// </summary>
			public RCProgressReportSectionsRecord varLcProgressReportSections = new RCProgressReportSectionsRecord(null);

			public int resCreateProgressReportSections2_outParamId = 0;

			public int resCreateUniveralSection_outParamId = 0;

			public int resCreateSpecialistSection_outParamId = 0;

			public int resCreateProgressReportSections3_outParamId = 0;

			public int resCreatePersonalSection_outParamId = 0;

			public RLGroupStudent_GroupStudentStudentAttendanceRecordList queryResGetStudents_outParamList = new RLGroupStudent_GroupStudentStudentAttendanceRecordList();
			public int queryResGetStudents_outParamCount = 0;

			public int resCreateOrUpdateProgressReport_outParamId = 0;

			public int resCreateProgressReportSections_outParamId = 0;

			public lcvProgressReport_Create(RCProgressReportRecord inParamProgressReport, string inParamStudentId, string inParamAcademicYearId) {
				this.inParamProgressReport = inParamProgressReport;
				this.inParamStudentId = inParamStudentId;
				this.inParamAcademicYearId = inParamAcademicYearId;
			}
		}
		public class lcoProgressReport_Create: VarsBag {
			public int outParamProgressReportNEwId = 0;

			public lcoProgressReport_Create() {
			}
		}
		/// <summary>
		/// Action <code>ActionProgressReport_Create</code> that represents the Service Studio user action
		///  <code>ProgressReport_Create</code> <p> Description: </p>
		/// </summary>
		public static void ActionProgressReport_Create(HeContext heContext, RCProgressReportRecord inParamProgressReport, string inParamStudentId, string inParamAcademicYearId, out int outParamProgressReportNEwId) {
			lcoProgressReport_Create result = new lcoProgressReport_Create();
			lcvProgressReport_Create localVars = new lcvProgressReport_Create(inParamProgressReport, inParamStudentId, inParamAcademicYearId);
			try {
				if (localVars.inParamProgressReport.ssENProgressReport.ssIsComplete) {
					localVars.inParamProgressReport.ssENProgressReport.ssIsComplete = true; // ProgressReport.ProgressReport.IsComplete = True
					localVars.inParamProgressReport.ssENProgressReport.ssCompleteDate = BuiltInFunction.CurrDate(); // ProgressReport.ProgressReport.CompleteDate = CurrDate
					localVars.inParamProgressReport.ssENProgressReport.ssCompleteBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReport.ProgressReport.CompleteBy = UserID

				}
				if ((localVars.inParamProgressReport.ssENProgressReport.ssId==BuiltInFunction.NullIdentifier())) {
					localVars.inParamProgressReport.ssENProgressReport.ssCreatedOn = BuiltInFunction.CurrDateTime(); // ProgressReport.ProgressReport.CreatedOn = CurrDateTime
					localVars.inParamProgressReport.ssENProgressReport.ssStudent = localVars.inParamStudentId; // ProgressReport.ProgressReport.Student = StudentId
					localVars.inParamProgressReport.ssENProgressReport.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // ProgressReport.ProgressReport.CreatedBy = UserID
					localVars.inParamProgressReport.ssENProgressReport.ssIntroductionVisible = true; // ProgressReport.ProgressReport.IntroductionVisible = True
					localVars.inParamProgressReport.ssENProgressReport.ssSignOffVisible = true; // ProgressReport.ProgressReport.SignOffVisible = True
					localVars.inParamProgressReport.ssENProgressReport.ssIntroduction = "Please find detailed below a Progress Review for your son/daughter covering the Autumn Term and early part of the Spring Term.  In line with Government requirements to all education providers, all students under the age of 19 at the start of their 16-18 education phase now complete a “study programme” framework. We call this their USP; in addition to their Specialist Curriculum (e.g. engineering, hairdressing or A levels), our students will complete Universal courses to ensure that they are working towards achievement of a minimum of GCSE grade C in English and maths (as required by Government policy) and develop their knowledge and Personal skills through Employability and Tutorial sessions that will equip them to be employable and effective citizens. Our Progress Review template reflects all components of their study programme/USP, as appropriate to each individual learner. Each learner will have a Personal Learning Adviser or Course Tutor who is the first point of contact for parents/guardians; this is yo" +
					 "ur central point of contact should you have any queries or comments. We very much value the support you can provide."; // ProgressReport.ProgressReport.Introduction = "Please find detailed below a Progress Review for your son/daughter
					// covering the Autumn Term and early part of the Spring Term.  In line with Government requirements to all
					// education providers, all students under the age of 19 at the start of their 16-18 education phase now complete a
					// “study programme” framework. We call this their USP; in addition to their Specialist Curriculum (e.g.
					// engineering, hairdressing or A levels), our students will complete Universal courses to ensure that they are
					// working towards achievement of a minimum of GCSE grade C in English and maths (as required by Government policy)
					// and develop their knowledge and Personal skills through Employability and Tutorial sessions that will equip them
					// to be employable and effective citizens. Our Progress Review template reflects all components of their study
					// programme/USP, as appropriate to each individual learner. Each learner will have a Personal Learning Adviser or
					// Course Tutor who is the first point of contact for parents/guardians; this is your central point of contact
					// should you have any queries or comments. We very much value the support you can provide."

				}
				// CreateOrUpdateProgressReport
				ExtendedActions.CreateOrUpdateProgressReport(heContext, localVars.inParamProgressReport.ssENProgressReport.ChangedAttributes, ((RCProgressReportRecord) localVars.inParamProgressReport.ssENProgressReport), out localVars.resCreateOrUpdateProgressReport_outParamId);
				// Query datasetGetStudents
				int datasetGetStudents_maxRecords = 0;
				localVars.queryResGetStudents_outParamList = FuncActionProgressReport_Create.datasetGetStudents(heContext, datasetGetStudents_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetStudents_outParamCount, localVars.inParamAcademicYearId
				, localVars.inParamStudentId
				);
				if ((localVars.inParamProgressReport.ssENProgressReport.ssId==BuiltInFunction.NullIdentifier())) {
					// Foreach GetStudents.List
					localVars.queryResGetStudents_outParamList.StartIteration();
					try {
						while (!localVars.queryResGetStudents_outParamList.Eof) {
							localVars.varLcProgressReportSections.ssENProgressReportSections.ssSectionVisible = true; // ProgressReportSections.ProgressReportSections.SectionVisible = True
							localVars.varLcProgressReportSections.ssENProgressReportSections.ssProgressReportId = localVars.resCreateOrUpdateProgressReport_outParamId; // ProgressReportSections.ProgressReportSections.ProgressReportId = CreateOrUpdateProgressReport.Id
							localVars.varLcProgressReportSection.ssENProgressReportSection.ssGroup = localVars.queryResGetStudents_outParamList.CurrentRec.ssENGroup.ssId; // ProgressReportSection.ProgressReportSection.Group = GetStudents.List.Current.Group.Id
							localVars.varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcome = (((localVars.queryResGetStudents_outParamList.CurrentRec.ssENStudent_Group.ssTMG!= "")) ?(((localVars.queryResGetStudents_outParamList.CurrentRec.ssENStudent.ssForenames+ "\'s target minimum grade for this qualification is ") +localVars.queryResGetStudents_outParamList.CurrentRec.ssENStudent_Group.ssTMG)):("")); // ProgressReportSection.ProgressReportSection.PredictedOutcome = internalIf
							localVars.varLcProgressReportSection.ssENProgressReportSection.ssAttendance = (((localVars.queryResGetStudents_outParamList.CurrentRec.ssENStudentAttendance.ssOverallPercentageAttendance>0)) ?((((localVars.queryResGetStudents_outParamList.CurrentRec.ssENStudentAttendance.ssOverallPercentageAttendance>0)) ?((((localVars.queryResGetStudents_outParamList.CurrentRec.ssENStudent.ssForenames+ "\'s attendance for this qualification so far is ") +OutSystems.HubEdition.RuntimePlatform.RuntimePlatformUtils.RemoveTrailingZeros(Convert.ToString(BuiltInFunction.Round(localVars.queryResGetStudents_outParamList.CurrentRec.ssENStudentAttendance.ssOverallPercentageAttendance, 0), FormatInfo.Number), FormatInfo.Number)) + "%")):(""))):("")); // ProgressReportSection.ProgressReportSection.Attendance = internalIf
							if (((localVars.queryResGetStudents_outParamList.CurrentRec.ssENGroup.ssCategory==ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("9J+4M6ZeU0+g4qKAzSFbVg")).ssId) || (localVars.queryResGetStudents_outParamList.CurrentRec.ssENGroup.ssCategory==ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("hh0WWQ2FF0acLTzRV4EL3Q")).ssId))) {
								localVars.varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineVisible = true; // ProgressReportSection.ProgressReportSection.CourseOutlineVisible = True
								localVars.varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsVisible = true; // ProgressReportSection.ProgressReportSection.KeyStrengthsVisible = True
								localVars.varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentVisible = true; // ProgressReportSection.ProgressReportSection.AreasForDevelopmentVisible = True
								localVars.varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeVisible = true; // ProgressReportSection.ProgressReportSection.PredictedOutcomeVisible = True
								localVars.varLcProgressReportSection.ssENProgressReportSection.ssAttendanceVisible = true; // ProgressReportSection.ProgressReportSection.AttendanceVisible = True
								localVars.varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi = false; // ProgressReportSection.ProgressReportSection.CourseCoordinatorSummaryVisi = False
								localVars.varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeOverviewVisibl = false; // ProgressReportSection.ProgressReportSection.StudyProgrammeOverviewVisibl = False
								localVars.varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityVisible = false; // ProgressReportSection.ProgressReportSection.EmployabilityVisible = False
								localVars.varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceVisible = false; // ProgressReportSection.ProgressReportSection.WorkExperienceVisible = False
								// CreateUniveralSection
								ExtendedActions.CreateOrUpdateProgressReportSection(heContext, localVars.varLcProgressReportSection.ChangedAttributes, localVars.varLcProgressReportSection, out localVars.resCreateUniveralSection_outParamId);
								localVars.varLcProgressReportSections.ssENProgressReportSections.ssProgressReportSectionId = localVars.resCreateUniveralSection_outParamId; // ProgressReportSections.ProgressReportSections.ProgressReportSectionId = CreateUniveralSection.Id
								localVars.varLcProgressReportSections.ssENProgressReportSections.ssProgressReportSectionType = ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("XB+m9GjXJ0qMg2YRsbvmGg")).ssId; // ProgressReportSections.ProgressReportSections.ProgressReportSectionType = Universal
								// CreateProgressReportSections
								ExtendedActions.CreateProgressReportSections(heContext, localVars.varLcProgressReportSections, out localVars.resCreateProgressReportSections_outParamId);

							} else {
								if ((localVars.queryResGetStudents_outParamList.CurrentRec.ssENGroup.ssCategory==ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("I5ItVHe6+E69W5co5NxJ0g")).ssId)) {
									localVars.varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineVisible = true; // ProgressReportSection.ProgressReportSection.CourseOutlineVisible = True
									localVars.varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsVisible = true; // ProgressReportSection.ProgressReportSection.KeyStrengthsVisible = True
									localVars.varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentVisible = true; // ProgressReportSection.ProgressReportSection.AreasForDevelopmentVisible = True
									localVars.varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeVisible = true; // ProgressReportSection.ProgressReportSection.PredictedOutcomeVisible = True
									localVars.varLcProgressReportSection.ssENProgressReportSection.ssAttendanceVisible = true; // ProgressReportSection.ProgressReportSection.AttendanceVisible = True
									localVars.varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi = true; // ProgressReportSection.ProgressReportSection.CourseCoordinatorSummaryVisi = True
									localVars.varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeOverviewVisibl = false; // ProgressReportSection.ProgressReportSection.StudyProgrammeOverviewVisibl = False
									localVars.varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityVisible = false; // ProgressReportSection.ProgressReportSection.EmployabilityVisible = False
									localVars.varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceVisible = false; // ProgressReportSection.ProgressReportSection.WorkExperienceVisible = False
									// CreateSpecialistSection
									ExtendedActions.CreateOrUpdateProgressReportSection(heContext, localVars.varLcProgressReportSection.ChangedAttributes, localVars.varLcProgressReportSection, out localVars.resCreateSpecialistSection_outParamId);
									localVars.varLcProgressReportSections.ssENProgressReportSections.ssProgressReportSectionId = localVars.resCreateSpecialistSection_outParamId; // ProgressReportSections.ProgressReportSections.ProgressReportSectionId = CreateSpecialistSection.Id
									localVars.varLcProgressReportSections.ssENProgressReportSections.ssProgressReportSectionType = ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("fFloxfgF1Em7zQJ43bgF4g")).ssId; // ProgressReportSections.ProgressReportSections.ProgressReportSectionType = Specialist
									// CreateProgressReportSections2
									ExtendedActions.CreateProgressReportSections(heContext, localVars.varLcProgressReportSections, out localVars.resCreateProgressReportSections2_outParamId);

								} else {
									if ((localVars.queryResGetStudents_outParamList.CurrentRec.ssENGroup.ssCategory==ENCategoryEntity.GetRecordByKey(ObjectKey.Parse("iy5u49fNYkGR3K77QLSz4g")).ssId)) {
										localVars.varLcProgressReportSection.ssENProgressReportSection.ssCourseOutlineVisible = false; // ProgressReportSection.ProgressReportSection.CourseOutlineVisible = False
										localVars.varLcProgressReportSection.ssENProgressReportSection.ssKeyStrengthsVisible = false; // ProgressReportSection.ProgressReportSection.KeyStrengthsVisible = False
										localVars.varLcProgressReportSection.ssENProgressReportSection.ssAreasForDevelopmentVisible = false; // ProgressReportSection.ProgressReportSection.AreasForDevelopmentVisible = False
										localVars.varLcProgressReportSection.ssENProgressReportSection.ssPredictedOutcomeVisible = false; // ProgressReportSection.ProgressReportSection.PredictedOutcomeVisible = False
										localVars.varLcProgressReportSection.ssENProgressReportSection.ssAttendanceVisible = true; // ProgressReportSection.ProgressReportSection.AttendanceVisible = True
										localVars.varLcProgressReportSection.ssENProgressReportSection.ssCourseCoordinatorSummaryVisi = false; // ProgressReportSection.ProgressReportSection.CourseCoordinatorSummaryVisi = False
										localVars.varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeOverviewVisibl = true; // ProgressReportSection.ProgressReportSection.StudyProgrammeOverviewVisibl = True
										localVars.varLcProgressReportSection.ssENProgressReportSection.ssEmployabilityVisible = true; // ProgressReportSection.ProgressReportSection.EmployabilityVisible = True
										localVars.varLcProgressReportSection.ssENProgressReportSection.ssWorkExperienceVisible = true; // ProgressReportSection.ProgressReportSection.WorkExperienceVisible = True
										localVars.varLcProgressReportSection.ssENProgressReportSection.ssStudyProgrammeOverview = ((((((((((("As the “Career College” for Cornwall and the South West, it is a high priority for us to encourage the development our students’ employability skills so they can get ahead of the field in finding great careers, university or training places and building fulfilling futures." + "\r\n") + "\r\n") + "National and local employers stress the importance of their new recruits having the right personal skills, in addition to their specialist abilities e.g. hairdressing, catering, law, engineering.  All students aged 16-18 years will have the support of Employability Advisers and vocational specialists to work through our unique “work-ready competency framework”, giving them the chance to develop essential skills needed for their future.") + "\r\n") + "\r\n") + "The three stages of the framework are:") + "\r\n") + "Stage 1 – Work Ready;   Stage 2 – Operational & Supervisory;    Stage 3 – Management & Strategic") + "\r\n") + "\r\n") + "Once a student has completed the first stage of the framework, they will be supported in finding work experience with local employers or engaging in work-related projects and through this they will be able to work towards achieving stages 2/3. These achievements will add to their CV or personal statement and help them progress to their next steps in learning or at work.");
										// ProgressReportSection.ProgressReportSection.StudyProgrammeOverview = "As the “Career College” for Cornwall and the
										// South West, it is a high priority for us to encourage the development our students’ employability skills so they
										// can get ahead of the field in finding great careers, university or training places and building fulfilling
										// futures." + NewLine + NewLine + "National and local employers stress the importance of their new recruits having
										// the right personal skills, in addition to their specialist abilities e.g. hairdressing, catering, law,
										// engineering.  All students aged 16-18 years will have the support of Employability Advisers and vocational
										// specialists to work through our unique “work-ready competency framework”, giving them the chance to develop
										// essential skills needed for their future." + NewLine + NewLine + "The three stages of the framework are:" +
										// NewLine + "Stage 1 – Work Ready;   Stage 2 – Operational & Supervisory;    Stage 3 – Management & Strategic" +
										// NewLine + NewLine + "Once a student has completed the first stage of the framework, they will be supported in
										// finding work experience with local employers or engaging in work-related projects and through this they will be
										// able to work towards achieving stages 2/3. These achievements will add to their CV or personal statement and help
										// them progress to their next steps in learning or at work."
										// CreatePersonalSection
										ExtendedActions.CreateOrUpdateProgressReportSection(heContext, localVars.varLcProgressReportSection.ChangedAttributes, localVars.varLcProgressReportSection, out localVars.resCreatePersonalSection_outParamId);
										localVars.varLcProgressReportSections.ssENProgressReportSections.ssProgressReportSectionId = localVars.resCreatePersonalSection_outParamId; // ProgressReportSections.ProgressReportSections.ProgressReportSectionId = CreatePersonalSection.Id
										localVars.varLcProgressReportSections.ssENProgressReportSections.ssProgressReportSectionType = ENProgressReportSectionTypeEntity.GetRecordByKey(ObjectKey.Parse("T5cjSpNDb06Xftq9ynq4mQ")).ssId; // ProgressReportSections.ProgressReportSections.ProgressReportSectionType = Personal
										// CreateProgressReportSections3
										ExtendedActions.CreateProgressReportSections(heContext, localVars.varLcProgressReportSections, out localVars.resCreateProgressReportSections3_outParamId);

									}

								}

							}
							localVars.queryResGetStudents_outParamList.Advance();
						}
					} finally {
						localVars.queryResGetStudents_outParamList.EndIteration();
					}

				}
				result.outParamProgressReportNEwId = localVars.resCreateOrUpdateProgressReport_outParamId; // ProgressReportNEwId = CreateOrUpdateProgressReport.Id
			} // try

			finally {
				outParamProgressReportNEwId = result.outParamProgressReportNEwId;
			}
		}

		public static class FuncActionProgressReport_Create {

			private static void datasetGetStudentsReadDB(ref RCGroupStudent_GroupStudentStudentAttendanceRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENGroup.Read(r, ref index);
				rec.ssENStudent.Read(r, ref index);
				rec.ssENStudent_Group.Read(r, ref index);
				rec.ssENStudentAttendance.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudents" of Action "ProgressReport_Create"
			/// </summary>
			public static RLGroupStudent_GroupStudentStudentAttendanceRecordList datasetGetStudents(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP, string qpstP1) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENGroup.[ID] o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, ENGroup.[CATEGORY] o7, NULL o8, NULL o9, NULL o10, ENStudent.[FORENAMES] o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23, NULL o24, NULL o25, NULL o26, NULL o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, ENStudent_Group.[TMG] o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, ENStudentAttendance.[OVERALLPERCENTAGEATTENDANCE] o53, NULL o54, NULL o55, NULL o56, NULL o57, NULL o58, NULL o59, NULL o60, NULL o61, NULL o62, NULL o63, NULL o64, NULL o65");
				fromBuilder.Append(" FROM ((({Student_Group} ENStudent_Group Left JOIN {Group} ENGroup ON (ENStudent_Group.[GROUPID] = ENGroup.[ID]))  Left JOIN {Student} ENStudent ON (ENStudent_Group.[STUDENTREFERENCE] = ENStudent.[STUDENTREFERENCE]))  Left JOIN {StudentAttendance} ENStudentAttendance ON (ENStudentAttendance.[STUDENTREFERENCE] = ENStudent.[STUDENTREFERENCE]) AND (ENStudentAttendance.[OFFERINGCODE] = ENGroup.[GROUPNAME])) ");
				whereBuilder.Append(" WHERE ");
				if (qpstP1.Trim() != "") {
					whereBuilder.Append("((ENStudent_Group.[STUDENTREFERENCE] = @qpstP1) AND (ENStudent_Group.[STUDENTREFERENCE] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpstP1", DbType.String, qpstP1);
				} else {
					whereBuilder.Append("(ENStudent_Group.[STUDENTREFERENCE] IS NULL)");
				}
				whereBuilder.Append(" AND (ENGroup.[GROUPTYPEID] = ");
				whereBuilder.Append(ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId);
				whereBuilder.Append(") AND (ENStudent_Group.[ENROLMENTSTATUS] = N'Active') AND (ENStudent_Group.[ACADEMICYEAR] = @qpstP)");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupStudent_GroupStudentStudentAttendanceRecordList outParamList = new RLGroupStudent_GroupStudentStudentAttendanceRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetStudentsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[4];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, false, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, true, false
				}
				);
				opt[2] = new BitArray(new bool[] {
					true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupStudent_GroupStudentStudentAttendanceRecordList _tmp = new RLGroupStudent_GroupStudentStudentAttendanceRecordList();
					_tmp.AlternateReadDBMethod = datasetGetStudentsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query ProgressReport.ProgressReport_Create.GetStudents.List");
						outParamList = (RLGroupStudent_GroupStudentStudentAttendanceRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query ProgressReport.ProgressReport_Create.GetStudents.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupStudent_GroupStudentStudentAttendanceRecordList _tmp = new RLGroupStudent_GroupStudentStudentAttendanceRecordList();
						_tmp.AlternateReadDBMethod = datasetGetStudentsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query ProgressReport.ProgressReport_Create.GetStudents.List");
							outParamList = (RLGroupStudent_GroupStudentStudentAttendanceRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query ProgressReport.ProgressReport_Create.GetStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}


		}


	}


}