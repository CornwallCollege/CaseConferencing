/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvGetLastViewedDate: VarsBag {
			public int resCreateOrUpdateDashboardLastViewed_outParamId = 0;

			public RLDashboardLastViewedRecordList queryResGetDashboardLastViewedsByUserID_outParamList = new RLDashboardLastViewedRecordList();
			public int queryResGetDashboardLastViewedsByUserID_outParamCount = 0;

			public int resCreateDashboardLastViewed_outParamId = 0;

			public lcvGetLastViewedDate() {
			}
		}
		public class lcoGetLastViewedDate: VarsBag {
			public DateTime outParamLastViewedDate = new DateTime(1900, 1, 1, 0, 0, 0);

			public lcoGetLastViewedDate() {
			}
		}
		/// <summary>
		/// Action <code>ActionGetLastViewedDate</code> that represents the Service Studio user action
		///  <code>GetLastViewedDate</code> <p> Description: </p>
		/// </summary>
		public static void ActionGetLastViewedDate(HeContext heContext, out DateTime outParamLastViewedDate) {
			lcoGetLastViewedDate result = new lcoGetLastViewedDate();
			lcvGetLastViewedDate localVars = new lcvGetLastViewedDate();
			try {
				// Query datasetGetDashboardLastViewedsByUserID
				int datasetGetDashboardLastViewedsByUserID_maxRecords = 0;
				localVars.queryResGetDashboardLastViewedsByUserID_outParamList = FuncActionGetLastViewedDate.datasetGetDashboardLastViewedsByUserID(heContext, datasetGetDashboardLastViewedsByUserID_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetDashboardLastViewedsByUserID_outParamCount, ((int) Global.App.OsContext.Session["UserID"])
				);
				// UserNeverViewedScreenBefore?
				if (localVars.queryResGetDashboardLastViewedsByUserID_outParamList.Empty) {
					localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec.ssENDashboardLastViewed.ssUserID = ((int) Global.App.OsContext.Session["UserID"]); // GetDashboardLastViewedsByUserID.List.Current.DashboardLastViewed.UserID = UserID
					localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec.ssENDashboardLastViewed.ssGetUpdatesFromDateTime = Convert.ToDateTime(BuiltInFunction.AddDays(BuiltInFunction.CurrDate(), (-7)).ToString("yyyy-M-d")); // GetDashboardLastViewedsByUserID.List.Current.DashboardLastViewed.GetUpdatesFromDateTime = AddDays
					localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec.ssENDashboardLastViewed.ssLastViewedDate = BuiltInFunction.CurrDate(); // GetDashboardLastViewedsByUserID.List.Current.DashboardLastViewed.LastViewedDate = CurrDate
					// CreateDashboardLastViewed
					ExtendedActions.CreateDashboardLastViewed(heContext, localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec, out localVars.resCreateDashboardLastViewed_outParamId);

				} else {
					// LastDateViewedNotToday
					if ((localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec.ssENDashboardLastViewed.ssLastViewedDate<BuiltInFunction.CurrDate())) {
						localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec.ssENDashboardLastViewed.ssGetUpdatesFromDateTime = localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec.ssENDashboardLastViewed.ssLastViewedDate; // GetDashboardLastViewedsByUserID.List.Current.DashboardLastViewed.GetUpdatesFromDateTime =
						// GetDashboardLastViewedsByUserID.List.Current.DashboardLastViewed.LastViewedDate
						localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec.ssENDashboardLastViewed.ssLastViewedDate = BuiltInFunction.CurrDate(); // GetDashboardLastViewedsByUserID.List.Current.DashboardLastViewed.LastViewedDate = CurrDate
						// CreateOrUpdateDashboardLastViewed
						ExtendedActions.CreateOrUpdateDashboardLastViewed(heContext, localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec, out localVars.resCreateOrUpdateDashboardLastViewed_outParamId);

					}

				}
				result.outParamLastViewedDate = localVars.queryResGetDashboardLastViewedsByUserID_outParamList.CurrentRec.ssENDashboardLastViewed.ssGetUpdatesFromDateTime; // LastViewedDate = GetDashboardLastViewedsByUserID.List.Current.DashboardLastViewed.GetUpdatesFromDateTime
			} // try

			finally {
				outParamLastViewedDate = result.outParamLastViewedDate;
			}
		}

		public static class FuncActionGetLastViewedDate {

			/// <summary>
			/// Query Function "GetDashboardLastViewedsByUserID" of Action "GetLastViewedDate"
			/// </summary>
			public static RLDashboardLastViewedRecordList datasetGetDashboardLastViewedsByUserID(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENDashboardLastViewed.[ID] o1, ENDashboardLastViewed.[USERID] o2, ENDashboardLastViewed.[GETUPDATESFROMDATETIME] o3, ENDashboardLastViewed.[LASTVIEWEDDATE] o4");
				fromBuilder.Append(" FROM {DashboardLastViewed} ENDashboardLastViewed");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENDashboardLastViewed.[USERID] = @qpinP) AND (ENDashboardLastViewed.[USERID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENDashboardLastViewed.[USERID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLDashboardLastViewedRecordList outParamList = new RLDashboardLastViewedRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLDashboardLastViewedRecordList _tmp = new RLDashboardLastViewedRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Dashboard.GetLastViewedDate.GetDashboardLastViewedsByUserID.List");
						outParamList = (RLDashboardLastViewedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.GetLastViewedDate.GetDashboardLastViewedsByUserID.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLDashboardLastViewedRecordList _tmp = new RLDashboardLastViewedRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Dashboard.GetLastViewedDate.GetDashboardLastViewedsByUserID.List");
							outParamList = (RLDashboardLastViewedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Dashboard.GetLastViewedDate.GetDashboardLastViewedsByUserID.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}


		}


	}


}