/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvGetStudentAttendanceColumnsAndRows: VarsBag {
			public RLStudentAttendanceForCourseRecordList inParamStudentAttendanceForCourse;
			/// <summary>
			/// Variable <code>varLcCurrentColCount</code> that represents the Service Studio local variable
			///  <code>CurrentColCount</code> <p>Description: </p>
			/// </summary>
			public int varLcCurrentColCount = 1;

			/// <summary>
			/// Variable <code>varLcCurrentRowCount</code> that represents the Service Studio local variable
			///  <code>CurrentRowCount</code> <p>Description: </p>
			/// </summary>
			public int varLcCurrentRowCount = 1;

			/// <summary>
			/// Variable <code>varLcAttendanceColumn</code> that represents the Service Studio local variable
			///  <code>AttendanceColumn</code> <p>Description: </p>
			/// </summary>
			public RCAttendanceOVLayoutColumnsRecord varLcAttendanceColumn = new RCAttendanceOVLayoutColumnsRecord(null);

			/// <summary>
			/// Variable <code>varLcAttendanceRow</code> that represents the Service Studio local variable
			///  <code>AttendanceRow</code> <p>Description: </p>
			/// </summary>
			public RCAttendanceOVLayoutRowsRecord varLcAttendanceRow = new RCAttendanceOVLayoutRowsRecord(null);

			/// <summary>
			/// Variable <code>varLcColumnAdded</code> that represents the Service Studio local variable
			///  <code>ColumnAdded</code> <p>Description: </p>
			/// </summary>
			public bool varLcColumnAdded = false;

			/// <summary>
			/// Variable <code>varLcRowAdded</code> that represents the Service Studio local variable
			///  <code>RowAdded</code> <p>Description: </p>
			/// </summary>
			public bool varLcRowAdded = false;

			public lcvGetStudentAttendanceColumnsAndRows(RLStudentAttendanceForCourseRecordList inParamStudentAttendanceForCourse) {
				this.inParamStudentAttendanceForCourse = inParamStudentAttendanceForCourse;
			}
		}
		public class lcoGetStudentAttendanceColumnsAndRows: VarsBag {
			public RLAttendanceOVLayoutColumnsRecordList outParamAttendanceColumns = new RLAttendanceOVLayoutColumnsRecordList();

			public RLAttendanceOVLayoutRowsRecordList outParamAttendanceRows = new RLAttendanceOVLayoutRowsRecordList();

			public lcoGetStudentAttendanceColumnsAndRows() {
			}
		}
		/// <summary>
		/// Action <code>ActionGetStudentAttendanceColumnsAndRows</code> that represents the Service Studio
		///  user action <code>GetStudentAttendanceColumnsAndRows</code> <p> Description: </p>
		/// </summary>
		public static void ActionGetStudentAttendanceColumnsAndRows(HeContext heContext, RLStudentAttendanceForCourseRecordList inParamStudentAttendanceForCourse, out RLAttendanceOVLayoutColumnsRecordList outParamAttendanceColumns, out RLAttendanceOVLayoutRowsRecordList outParamAttendanceRows) {
			lcoGetStudentAttendanceColumnsAndRows result = new lcoGetStudentAttendanceColumnsAndRows();
			lcvGetStudentAttendanceColumnsAndRows localVars = new lcvGetStudentAttendanceColumnsAndRows(inParamStudentAttendanceForCourse);
			try {
				localVars.varLcAttendanceColumn.ssSTAttendanceOVLayoutColumns.ssColumnNumber = 1; // AttendanceColumn.AttendanceOVLayoutColumns.ColumnNumber = 1
				localVars.varLcAttendanceColumn.ssSTAttendanceOVLayoutColumns.ssColumnDate = BuiltInFunction.NullDate(); // AttendanceColumn.AttendanceOVLayoutColumns.ColumnDate = NullDate
				localVars.varLcAttendanceRow.ssSTAttendanceOVLayoutRows.ssRowNumber = 1; // AttendanceRow.AttendanceOVLayoutRows.RowNumber = 1
				localVars.varLcAttendanceRow.ssSTAttendanceOVLayoutRows.ssRowHeader = ""; // AttendanceRow.AttendanceOVLayoutRows.RowHeader = ""
				localVars.varLcCurrentColCount = 2; // CurrentColCount = 2
				localVars.varLcCurrentRowCount = 2; // CurrentRowCount = 2
				// ListAppend
				ExtendedActions.ListAppend(heContext, result.outParamAttendanceColumns, localVars.varLcAttendanceColumn);
				// ListAppend2
				ExtendedActions.ListAppend(heContext, result.outParamAttendanceRows, localVars.varLcAttendanceRow);
				// Foreach StudentAttendanceForCourse
				localVars.inParamStudentAttendanceForCourse.StartIteration();
				try {
					while (! localVars.inParamStudentAttendanceForCourse.Eof) {
						// Foreach AttendanceColumns
						result.outParamAttendanceColumns.StartIteration();
						try {
							while (! result.outParamAttendanceColumns.Eof) {
								if ((localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssEventDate==result.outParamAttendanceColumns.CurrentRec.ssSTAttendanceOVLayoutColumns.ssColumnDate)) {
									localVars.varLcColumnAdded = true; // ColumnAdded = True

								}
								result.outParamAttendanceColumns.Advance();
							}
						} finally {
							result.outParamAttendanceColumns.EndIteration();
						}
						if ((localVars.varLcColumnAdded==false)) {
							localVars.varLcAttendanceColumn.ssSTAttendanceOVLayoutColumns.ssColumnNumber = localVars.varLcCurrentColCount; // AttendanceColumn.AttendanceOVLayoutColumns.ColumnNumber = CurrentColCount
							localVars.varLcCurrentColCount = (localVars.varLcCurrentColCount+1); // CurrentColCount = CurrentColCount + 1
							localVars.varLcAttendanceColumn.ssSTAttendanceOVLayoutColumns.ssColumnDate = localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssEventDate; // AttendanceColumn.AttendanceOVLayoutColumns.ColumnDate =
							// StudentAttendanceForCourse.Current.StudentAttendanceForCourse.EventDate
							// AppendColumn
							ExtendedActions.ListAppend(heContext, result.outParamAttendanceColumns, localVars.varLcAttendanceColumn);

						}
						// Foreach AttendanceRows
						result.outParamAttendanceRows.StartIteration();
						try {
							while (! result.outParamAttendanceRows.Eof) {
								if ((BuiltInFunction.Substr(localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssEventWeekKey, 0, BuiltInFunction.Index(localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssEventWeekKey, "-", 0, false, false)) ==result.outParamAttendanceRows.CurrentRec.ssSTAttendanceOVLayoutRows.ssEvent)) {
									localVars.varLcRowAdded = true; // RowAdded = True

								}
								result.outParamAttendanceRows.Advance();
							}
						} finally {
							result.outParamAttendanceRows.EndIteration();
						}
						if ((localVars.varLcRowAdded==false)) {
							localVars.varLcAttendanceRow.ssSTAttendanceOVLayoutRows.ssRowNumber = localVars.varLcCurrentRowCount; // AttendanceRow.AttendanceOVLayoutRows.RowNumber = CurrentRowCount
							localVars.varLcCurrentRowCount = (localVars.varLcCurrentRowCount+1); // CurrentRowCount = CurrentRowCount + 1
							localVars.varLcAttendanceRow.ssSTAttendanceOVLayoutRows.ssRowHeader = localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssTitle; // AttendanceRow.AttendanceOVLayoutRows.RowHeader =
							// StudentAttendanceForCourse.Current.StudentAttendanceForCourse.Title
							localVars.varLcAttendanceRow.ssSTAttendanceOVLayoutRows.ssEvent = BuiltInFunction.Substr(localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssEventWeekKey, 0, BuiltInFunction.Index(localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssEventWeekKey, "-", 0, false, false)); // AttendanceRow.AttendanceOVLayoutRows.Event = Substr
							localVars.varLcAttendanceRow.ssSTAttendanceOVLayoutRows.ssRowHeaderTooltip = ((((((((((((((localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssDay+ " (") +localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssStart) + " - ") +localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssFinish) + ")") + "\r\n") + "Rooms : ") +localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssRooms) + "\r\n") + "Staff : ") +localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssStaff) + "\r\n") + "Offerings : ") +localVars.inParamStudentAttendanceForCourse.CurrentRec.ssSTStudentAttendanceForCourse.ssOfferings); // AttendanceRow.AttendanceOVLayoutRows.RowHeaderTooltip =
							// StudentAttendanceForCourse.Current.StudentAttendanceForCourse.Day + " (" +
							// StudentAttendanceForCourse.Current.StudentAttendanceForCourse.Start + " - " +
							// StudentAttendanceForCourse.Current.StudentAttendanceForCourse.Finish + ")" + NewLine + "Rooms : " +
							// StudentAttendanceForCourse.Current.StudentAttendanceForCourse.Rooms + NewLine + "Staff : " +
							// StudentAttendanceForCourse.Current.StudentAttendanceForCourse.Staff + NewLine + "Offerings : " +
							// StudentAttendanceForCourse.Current.StudentAttendanceForCourse.Offerings
							// AppendRow
							ExtendedActions.ListAppend(heContext, result.outParamAttendanceRows, localVars.varLcAttendanceRow);

						}
						localVars.varLcColumnAdded = false; // ColumnAdded = False
						localVars.varLcRowAdded = false; // RowAdded = False
						localVars.inParamStudentAttendanceForCourse.Advance();
					}
				} finally {
					localVars.inParamStudentAttendanceForCourse.EndIteration();
				}
			} // try

			finally {
				outParamAttendanceColumns = result.outParamAttendanceColumns;
				outParamAttendanceRows = result.outParamAttendanceRows;
			}
		}

		public static class FuncActionGetStudentAttendanceColumnsAndRows {


		}


	}


}