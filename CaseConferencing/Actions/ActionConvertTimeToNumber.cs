/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvConvertTimeToNumber: VarsBag {
			public DateTime inParamTimeToConvert;
			/// <summary>
			/// Variable <code>varLcDecimalValue</code> that represents the Service Studio local variable
			///  <code>DecimalValue</code> <p>Description: </p>
			/// </summary>
			public decimal varLcDecimalValue = 0.0M;

			public lcvConvertTimeToNumber(DateTime inParamTimeToConvert) {
				this.inParamTimeToConvert = inParamTimeToConvert;
			}
		}
		public class lcoConvertTimeToNumber: VarsBag {
			public int outParamConvertedTime = 0;

			public lcoConvertTimeToNumber() {
			}
		}
		/// <summary>
		/// Action <code>ActionConvertTimeToNumber</code> that represents the Service Studio user action
		///  <code>ConvertTimeToNumber</code> <p> Description: </p>
		/// </summary>
		public static void ActionConvertTimeToNumber(HeContext heContext, DateTime inParamTimeToConvert, out int outParamConvertedTime) {
			lcoConvertTimeToNumber result = new lcoConvertTimeToNumber();
			lcvConvertTimeToNumber localVars = new lcvConvertTimeToNumber(inParamTimeToConvert);
			try {
				if (((BuiltInFunction.Hour(localVars.inParamTimeToConvert) <8) || ((BuiltInFunction.Hour(localVars.inParamTimeToConvert) ==8) && (BuiltInFunction.Minute(localVars.inParamTimeToConvert) <30)))) {
					localVars.inParamTimeToConvert = BuiltInFunction.TextToTime("08:30"); // TimeToConvert = TextToTime

				} else {
					if (((BuiltInFunction.Hour(localVars.inParamTimeToConvert) >17) || ((BuiltInFunction.Hour(localVars.inParamTimeToConvert) ==17) && (BuiltInFunction.Minute(localVars.inParamTimeToConvert) >0)))) {
						localVars.inParamTimeToConvert = BuiltInFunction.TextToTime("17:00"); // TimeToConvert = TextToTime

					}

				}
				if ((BuiltInFunction.Minute(localVars.inParamTimeToConvert) <15)) {
					localVars.varLcDecimalValue = BuiltInFunction.Hour(localVars.inParamTimeToConvert); // DecimalValue = Hour

				} else {
					if ((BuiltInFunction.Minute(localVars.inParamTimeToConvert) <30)) {
						localVars.varLcDecimalValue = (BuiltInFunction.Hour(localVars.inParamTimeToConvert) + (new Decimal(0.25))); // DecimalValue = Hour + 0.25

					} else {
						if ((BuiltInFunction.Minute(localVars.inParamTimeToConvert) <45)) {
							localVars.varLcDecimalValue = (BuiltInFunction.Hour(localVars.inParamTimeToConvert) + (new Decimal(0.5))); // DecimalValue = Hour + 0.5

						} else {
							if ((BuiltInFunction.Minute(localVars.inParamTimeToConvert) <=59)) {
								localVars.varLcDecimalValue = (BuiltInFunction.Hour(localVars.inParamTimeToConvert) + (new Decimal(0.75))); // DecimalValue = Hour + 0.75

							} else {
								return;

							}

						}

					}

				}
				result.outParamConvertedTime = ((int) (((decimal) localVars.varLcDecimalValue/
				(decimal) (new Decimal(0.25))) -34M)); // ConvertedTime = DecimalValue / 0.25 - 34
			} // try

			finally {
				outParamConvertedTime = result.outParamConvertedTime;
			}
		}

		public static class FuncActionConvertTimeToNumber {


		}


	}


}