/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvGetAgeOnDate: VarsBag {
			public DateTime inParamDateOfBirth;
			public DateTime inParamCheckDate;
			public lcvGetAgeOnDate(DateTime inParamDateOfBirth, DateTime inParamCheckDate) {
				this.inParamDateOfBirth = inParamDateOfBirth;
				this.inParamCheckDate = inParamCheckDate;
			}
		}
		public class lcoGetAgeOnDate: VarsBag {
			public int outParamAge = 0;

			public lcoGetAgeOnDate() {
			}
		}
		/// <summary>
		/// Action <code>ActionGetAgeOnDate</code> that represents the Service Studio user action
		///  <code>GetAgeOnDate</code> <p> Description: </p>
		/// </summary>
		public static void ActionGetAgeOnDate(HeContext heContext, DateTime inParamDateOfBirth, DateTime inParamCheckDate, out int outParamAge) {
			lcoGetAgeOnDate result = new lcoGetAgeOnDate();
			lcvGetAgeOnDate localVars = new lcvGetAgeOnDate(inParamDateOfBirth, inParamCheckDate);
			try {
				if (((BuiltInFunction.Month(localVars.inParamCheckDate) >BuiltInFunction.Month(localVars.inParamDateOfBirth)) || ((BuiltInFunction.Month(localVars.inParamCheckDate) ==BuiltInFunction.Month(localVars.inParamDateOfBirth)) && (BuiltInFunction.Day(localVars.inParamCheckDate) >=BuiltInFunction.Day(localVars.inParamDateOfBirth))))) {
					result.outParamAge = (BuiltInFunction.Year(localVars.inParamCheckDate) -BuiltInFunction.Year(localVars.inParamDateOfBirth)); // Age = Year - Year

				} else {
					result.outParamAge = ((BuiltInFunction.Year(localVars.inParamCheckDate) -BuiltInFunction.Year(localVars.inParamDateOfBirth)) -1); // Age = Year - Year - 1

				}
			} // try

			finally {
				outParamAge = result.outParamAge;
			}
		}

		public static class FuncActionGetAgeOnDate {


		}


	}


}