/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssCaseConferencing {

	public partial class Actions {
		public class lcvGetRAGs_LastUpdatedByCluster: VarsBag {
			public int inParamNumberOfDays;
			public string inParamDrilldownLevel;
			public string inParamLabelClicked;
			/// <summary>
			/// Variable <code>varLcGetNulls</code> that represents the Service Studio local variable
			///  <code>GetNulls</code> <p>Description: </p>
			/// </summary>
			public bool varLcGetNulls = false;

			public RLReporting_RAGLastUpdatedGraphPointsRecordList queryResGetRAGsLastUpdatedByTeam_outParamList = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
			public int queryResGetRAGsLastUpdatedByTeam_outParamCount = 0;

			public RLReporting_RAGLastUpdatedGraphPointsRecordList queryResGetRAGsLastUpdatedByCurriculumLead_outParamList = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
			public int queryResGetRAGsLastUpdatedByCurriculumLead_outParamCount = 0;

			public RCDataPointRecord resClusterDataPoint_outParamDataPoint = new RCDataPointRecord(null);

			public RLReporting_RAGLastUpdatedGraphPointsRecordList queryResGetRAGsLastUpdatedByCluster_outParamList = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
			public int queryResGetRAGsLastUpdatedByCluster_outParamCount = 0;

			public RCDataPointRecord resCurriculumLeadDataPoint_outParamDataPoint = new RCDataPointRecord(null);

			public RCDataPointRecord resTeamDataPoint_outParamDataPoint = new RCDataPointRecord(null);

			public lcvGetRAGs_LastUpdatedByCluster(int inParamNumberOfDays, string inParamDrilldownLevel, string inParamLabelClicked) {
				this.inParamNumberOfDays = inParamNumberOfDays;
				this.inParamDrilldownLevel = inParamDrilldownLevel;
				this.inParamLabelClicked = inParamLabelClicked;
			}
		}
		public class lcoGetRAGs_LastUpdatedByCluster: VarsBag {
			public RLDataPointRecordList outParamDataPointRecordList = new RLDataPointRecordList();

			public string outParamSelectedArea = "";

			public lcoGetRAGs_LastUpdatedByCluster() {
			}
		}
		/// <summary>
		/// Action <code>ActionGetRAGs_LastUpdatedByCluster</code> that represents the Service Studio user
		///  action <code>GetRAGs_LastUpdatedByCluster</code> <p> Description: </p>
		/// </summary>
		public static void ActionGetRAGs_LastUpdatedByCluster(HeContext heContext, int inParamNumberOfDays, string inParamDrilldownLevel, string inParamLabelClicked, out RLDataPointRecordList outParamDataPointRecordList, out string outParamSelectedArea) {
			lcoGetRAGs_LastUpdatedByCluster result = new lcoGetRAGs_LastUpdatedByCluster();
			lcvGetRAGs_LastUpdatedByCluster localVars = new lcvGetRAGs_LastUpdatedByCluster(inParamNumberOfDays, inParamDrilldownLevel, inParamLabelClicked);
			try {
				if (((localVars.inParamLabelClicked== "Cluster not set") || (localVars.inParamLabelClicked== "Curriculum Lead Not set"))) {
					localVars.varLcGetNulls = true; // GetNulls = True

				}
				if ((localVars.inParamDrilldownLevel== "Cluster")) {
					// Query QueryGetRAGsLastUpdatedByCluster
					int QueryGetRAGsLastUpdatedByCluster_maxRecords = 0;
					localVars.queryResGetRAGsLastUpdatedByCluster_outParamList = FuncActionGetRAGs_LastUpdatedByCluster.QueryGetRAGsLastUpdatedByCluster(heContext, QueryGetRAGsLastUpdatedByCluster_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetRAGsLastUpdatedByCluster_outParamCount, localVars.inParamNumberOfDays
					);
					result.outParamSelectedArea = ""; // SelectedArea = ""
					// Foreach GetRAGsLastUpdatedByCluster.List
					localVars.queryResGetRAGsLastUpdatedByCluster_outParamList.StartIteration();
					try {
						while (!localVars.queryResGetRAGsLastUpdatedByCluster_outParamList.Eof) {
							// ClusterDataPoint
							Actions.ActionDataPoint_Init(heContext, localVars.queryResGetRAGsLastUpdatedByCluster_outParamList.CurrentRec.ssSTReporting_RAGLastUpdatedGraphPoints.ssLabel, localVars.queryResGetRAGsLastUpdatedByCluster_outParamList.CurrentRec.ssSTReporting_RAGLastUpdatedGraphPoints.ssNumberOfLearners, "", "", Functions.ActionGetColour(heContext, ENColourBiasedEntity.GetRecordByKey(ObjectKey.Parse("WOYBP_mttE2Q6DSY0ujc1Q")).ssId, true), out localVars.resClusterDataPoint_outParamDataPoint);
							// AppendClusterDataPoint
							ExtendedActions.ListAppend(heContext, result.outParamDataPointRecordList, localVars.resClusterDataPoint_outParamDataPoint);
							localVars.queryResGetRAGsLastUpdatedByCluster_outParamList.Advance();
						}
					} finally {
						localVars.queryResGetRAGsLastUpdatedByCluster_outParamList.EndIteration();
					}

				} else {
					if ((localVars.inParamDrilldownLevel== "CurriculumLead")) {
						// Query QueryGetRAGsLastUpdatedByCurriculumLead
						int QueryGetRAGsLastUpdatedByCurriculumLead_maxRecords = 0;
						localVars.queryResGetRAGsLastUpdatedByCurriculumLead_outParamList = FuncActionGetRAGs_LastUpdatedByCluster.QueryGetRAGsLastUpdatedByCurriculumLead(heContext, QueryGetRAGsLastUpdatedByCurriculumLead_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetRAGsLastUpdatedByCurriculumLead_outParamCount, localVars.inParamNumberOfDays
						, localVars.inParamLabelClicked
						, true
						);
						result.outParamSelectedArea = ("Cluster : " +localVars.inParamLabelClicked); // SelectedArea = "Cluster : " + LabelClicked
						// Foreach GetRAGsLastUpdatedByCurriculumLead.List
						localVars.queryResGetRAGsLastUpdatedByCurriculumLead_outParamList.StartIteration();
						try {
							while (!localVars.queryResGetRAGsLastUpdatedByCurriculumLead_outParamList.Eof) {
								// CurriculumLeadDataPoint
								Actions.ActionDataPoint_Init(heContext, localVars.queryResGetRAGsLastUpdatedByCurriculumLead_outParamList.CurrentRec.ssSTReporting_RAGLastUpdatedGraphPoints.ssLabel, localVars.queryResGetRAGsLastUpdatedByCurriculumLead_outParamList.CurrentRec.ssSTReporting_RAGLastUpdatedGraphPoints.ssNumberOfLearners, "", "", Functions.ActionGetColour(heContext, ENColourBiasedEntity.GetRecordByKey(ObjectKey.Parse("6xjo4kMla0mLuJGPJejayw")).ssId, false), out localVars.resCurriculumLeadDataPoint_outParamDataPoint);
								// AppendCuuriculumLeadDatapoint
								ExtendedActions.ListAppend(heContext, result.outParamDataPointRecordList, localVars.resCurriculumLeadDataPoint_outParamDataPoint);
								localVars.queryResGetRAGsLastUpdatedByCurriculumLead_outParamList.Advance();
							}
						} finally {
							localVars.queryResGetRAGsLastUpdatedByCurriculumLead_outParamList.EndIteration();
						}

					} else {
						if ((localVars.inParamDrilldownLevel== "Team")) {
							// Query QueryGetRAGsLastUpdatedByTeam
							int QueryGetRAGsLastUpdatedByTeam_maxRecords = 0;
							localVars.queryResGetRAGsLastUpdatedByTeam_outParamList = FuncActionGetRAGs_LastUpdatedByCluster.QueryGetRAGsLastUpdatedByTeam(heContext, QueryGetRAGsLastUpdatedByTeam_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetRAGsLastUpdatedByTeam_outParamCount, localVars.inParamNumberOfDays
							, localVars.inParamLabelClicked
							, localVars.varLcGetNulls
							);
							result.outParamSelectedArea = ("Curriculum Lead : " +localVars.inParamLabelClicked); // SelectedArea = "Curriculum Lead : " + LabelClicked
							// Foreach GetRAGsLastUpdatedByTeam.List
							localVars.queryResGetRAGsLastUpdatedByTeam_outParamList.StartIteration();
							try {
								while (!localVars.queryResGetRAGsLastUpdatedByTeam_outParamList.Eof) {
									// TeamDataPoint
									Actions.ActionDataPoint_Init(heContext, localVars.queryResGetRAGsLastUpdatedByTeam_outParamList.CurrentRec.ssSTReporting_RAGLastUpdatedGraphPoints.ssLabel, localVars.queryResGetRAGsLastUpdatedByTeam_outParamList.CurrentRec.ssSTReporting_RAGLastUpdatedGraphPoints.ssNumberOfLearners, "", "", Functions.ActionGetColour(heContext, ENColourBiasedEntity.GetRecordByKey(ObjectKey.Parse("Rsbdzz6qmkqroPpMnjAgrQ")).ssId, false), out localVars.resTeamDataPoint_outParamDataPoint);
									// AppendTeamDataPoint
									ExtendedActions.ListAppend(heContext, result.outParamDataPointRecordList, localVars.resTeamDataPoint_outParamDataPoint);
									localVars.queryResGetRAGsLastUpdatedByTeam_outParamList.Advance();
								}
							} finally {
								localVars.queryResGetRAGsLastUpdatedByTeam_outParamList.EndIteration();
							}

						}

					}

				}
			} // try

			finally {
				outParamDataPointRecordList = result.outParamDataPointRecordList;
				outParamSelectedArea = result.outParamSelectedArea;
			}
		}

		public static class FuncActionGetRAGs_LastUpdatedByCluster {

			/// <summary>
			/// Query Function "GetRAGsLastUpdatedByTeam" of Action "GetRAGs_LastUpdatedByCluster"
			/// </summary>
			public static RLReporting_RAGLastUpdatedGraphPointsRecordList QueryGetRAGsLastUpdatedByTeam(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinNumberOfDays, string qpstIDClicked, bool qpboGetNulls) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinNumberOfDays", DbType.Int32, qpinNumberOfDays);
				sqlCmd.CreateParameter("@qpstIDClicked", DbType.String, qpstIDClicked);
				sqlCmd.CreateParameter("@qpboGetNulls", DbType.Boolean, qpboGetNulls);
				string advSql = "SELECT ISNULL( {Team}.[DESCRIPTION],'Team not set'), COUNT( {Student}.[STUDENTREFERENCE])  " +
				 "FROM   " +
				 "     {Student}   " +
				 "Inner JOIN  {Group} ON  {Student}.[MAINOFFERINGCODE] =  {Group}.[GROUPNAME]  " +
				 "Left JOIN  {StudentRAG} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "Left JOIN  {Team} ON  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "Left JOIN  {CurriculumLead} ON  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "WHERE ((DateDiff( dd,  {StudentRAG}.[UPDATEDAT], convert(datetime, GetDate(), 120)) > @qpinNumberOfDays) OR ( {StudentRAG}.[STUDENTREFERENCE] IS NULL))  " +
				 "AND (( {CurriculumLead}.[DESCRIPTION] = @qpstIDClicked) OR (@qpboGetNulls =1 AND  {CurriculumLead}.[DESCRIPTION] IS NULL))  " +
				 "AND  {Student}.[HASCURRENTACTIVEENROLMENT] = 1  " +
				 "GROUP BY  {Team}.[DESCRIPTION]  " +
				 "ORDER BY  {Team}.[DESCRIPTION]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLReporting_RAGLastUpdatedGraphPointsRecordList outParamList = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLReporting_RAGLastUpdatedGraphPointsRecordList _tmp = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reporting.GetRAGs_LastUpdatedByCluster.GetRAGsLastUpdatedByTeam.List");
							outParamList = (RLReporting_RAGLastUpdatedGraphPointsRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.GetRAGs_LastUpdatedByCluster.GetRAGsLastUpdatedByTeam.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.GetRAGs_LastUpdatedByCluster.GetRAGsLastUpdatedByTeam.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetRAGsLastUpdatedByTeam in GetRAGs_LastUpdatedByCluster in Reporting in CaseConferencing (SELECT ISNULL({Team}.[Description],'Team not set'), COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND (({CurriculumLead}.[Description] = @IDClicked) OR (@GetNulls =1 AND {CurriculumLead}.[Description] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY {Team}.[Description]  ORDER BY {Team}.[Description]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetRAGsLastUpdatedByTeam in GetRAGs_LastUpdatedByCluster in Reporting in CaseConferencing (SELECT ISNULL({Team}.[Description],'Team not set'), COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND (({CurriculumLead}.[Description] = @IDClicked) OR (@GetNulls =1 AND {CurriculumLead}.[Description] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY {Team}.[Description]  ORDER BY {Team}.[Description]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetRAGsLastUpdatedByTeam in GetRAGs_LastUpdatedByCluster in Reporting in CaseConferencing (SELECT ISNULL({Team}.[Description],'Team not set'), COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND (({CurriculumLead}.[Description] = @IDClicked) OR (@GetNulls =1 AND {CurriculumLead}.[Description] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY {Team}.[Description]  ORDER BY {Team}.[Description]): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetRAGsLastUpdatedByCurriculumLead" of Action "GetRAGs_LastUpdatedByCluster"
			/// </summary>
			public static RLReporting_RAGLastUpdatedGraphPointsRecordList QueryGetRAGsLastUpdatedByCurriculumLead(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinNumberOfDays, string qpstIDClicked, bool qpboGetNulls) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinNumberOfDays", DbType.Int32, qpinNumberOfDays);
				sqlCmd.CreateParameter("@qpstIDClicked", DbType.String, qpstIDClicked);
				sqlCmd.CreateParameter("@qpboGetNulls", DbType.Boolean, qpboGetNulls);
				string advSql = "SELECT ISNULL( {CurriculumLead}.[DESCRIPTION],'Curriculum Lead Not set'), COUNT( {Student}.[STUDENTREFERENCE])  " +
				 "FROM   " +
				 "     {Student}   " +
				 "Inner JOIN  {Group} ON  {Student}.[MAINOFFERINGCODE] =  {Group}.[GROUPNAME]  " +
				 "Left JOIN  {StudentRAG} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "Left JOIN  {Team} ON  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "Left JOIN  {CurriculumLead} ON  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "Left JOIN  {Cluster} ON  {CurriculumLead}.[CLUSTER] =  {Cluster}.[ID]  " +
				 "WHERE ((DateDiff( dd,  {StudentRAG}.[UPDATEDAT], convert(datetime, GetDate(), 120)) > @qpinNumberOfDays) OR ( {StudentRAG}.[STUDENTREFERENCE] IS NULL))  " +
				 "AND (( {Cluster}.[CLUSTERDESCRIPTION] = @qpstIDClicked) OR (@qpboGetNulls =1 AND  {Cluster}.[CLUSTERDESCRIPTION] IS NULL))  " +
				 "AND  {Student}.[HASCURRENTACTIVEENROLMENT] = 1  " +
				 "GROUP BY  {CurriculumLead}.[DESCRIPTION]  " +
				 "ORDER BY  {CurriculumLead}.[DESCRIPTION]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLReporting_RAGLastUpdatedGraphPointsRecordList outParamList = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLReporting_RAGLastUpdatedGraphPointsRecordList _tmp = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reporting.GetRAGs_LastUpdatedByCluster.GetRAGsLastUpdatedByCurriculumLead.List");
							outParamList = (RLReporting_RAGLastUpdatedGraphPointsRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.GetRAGs_LastUpdatedByCluster.GetRAGsLastUpdatedByCurriculumLead.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.GetRAGs_LastUpdatedByCluster.GetRAGsLastUpdatedByCurriculumLead.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetRAGsLastUpdatedByCurriculumLead in GetRAGs_LastUpdatedByCluster in Reporting in CaseConferencing (SELECT ISNULL({CurriculumLead}.[Description],'Curriculum Lead Not set'), COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  Left JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND (({Cluster}.[ClusterDescription] = @IDClicked) OR (@GetNulls =1 AND {Cluster}.[ClusterDescription] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY {CurriculumLead}.[Description]  ORDER BY {CurriculumLead}.[Description]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetRAGsLastUpdatedByCurriculumLead in GetRAGs_LastUpdatedByCluster in Reporting in CaseConferencing (SELECT ISNULL({CurriculumLead}.[Description],'Curriculum Lead Not set'), COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  Left JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND (({Cluster}.[ClusterDescription] = @IDClicked) OR (@GetNulls =1 AND {Cluster}.[ClusterDescription] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY {CurriculumLead}.[Description]  ORDER BY {CurriculumLead}.[Description]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetRAGsLastUpdatedByCurriculumLead in GetRAGs_LastUpdatedByCluster in Reporting in CaseConferencing (SELECT ISNULL({CurriculumLead}.[Description],'Curriculum Lead Not set'), COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  Left JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND (({Cluster}.[ClusterDescription] = @IDClicked) OR (@GetNulls =1 AND {Cluster}.[ClusterDescription] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY {CurriculumLead}.[Description]  ORDER BY {CurriculumLead}.[Description]): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetRAGsLastUpdatedByCluster" of Action "GetRAGs_LastUpdatedByCluster"
			/// </summary>
			public static RLReporting_RAGLastUpdatedGraphPointsRecordList QueryGetRAGsLastUpdatedByCluster(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinNumberOfDays) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpinNumberOfDays", DbType.Int32, qpinNumberOfDays);
				string advSql = "SELECT ISNULL( {Cluster}.[CLUSTERDESCRIPTION],'Cluster not set'), COUNT( {Student}.[STUDENTREFERENCE])  " +
				 "FROM   " +
				 "     {Student}   " +
				 "Inner JOIN  {Group} ON  {Student}.[MAINOFFERINGCODE] =  {Group}.[GROUPNAME]  " +
				 "Left JOIN  {StudentRAG} ON  {StudentRAG}.[STUDENTREFERENCE] =  {Student}.[STUDENTREFERENCE]  " +
				 "Left JOIN  {Team} ON  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "Left JOIN  {CurriculumLead} ON  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "Left JOIN  {Cluster} ON  {CurriculumLead}.[CLUSTER] =  {Cluster}.[ID]  " +
				 "WHERE ((DateDiff( dd,  {StudentRAG}.[UPDATEDAT], convert(datetime, GetDate(), 120)) > @qpinNumberOfDays) OR ( {StudentRAG}.[STUDENTREFERENCE] IS NULL))  " +
				 "AND  {Student}.[HASCURRENTACTIVEENROLMENT] = 1  " +
				 "GROUP BY  {Cluster}.[CLUSTERDESCRIPTION]  " +
				 "ORDER BY  {Cluster}.[CLUSTERDESCRIPTION]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLReporting_RAGLastUpdatedGraphPointsRecordList outParamList = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLReporting_RAGLastUpdatedGraphPointsRecordList _tmp = new RLReporting_RAGLastUpdatedGraphPointsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Reporting.GetRAGs_LastUpdatedByCluster.GetRAGsLastUpdatedByCluster.List");
							outParamList = (RLReporting_RAGLastUpdatedGraphPointsRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.GetRAGs_LastUpdatedByCluster.GetRAGsLastUpdatedByCluster.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Reporting.GetRAGs_LastUpdatedByCluster.GetRAGsLastUpdatedByCluster.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetRAGsLastUpdatedByCluster in GetRAGs_LastUpdatedByCluster in Reporting in CaseConferencing (SELECT ISNULL({Cluster}.[ClusterDescription],'Cluster not set'), COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  Left JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY {Cluster}.[ClusterDescription]  ORDER BY {Cluster}.[ClusterDescription]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetRAGsLastUpdatedByCluster in GetRAGs_LastUpdatedByCluster in Reporting in CaseConferencing (SELECT ISNULL({Cluster}.[ClusterDescription],'Cluster not set'), COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  Left JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY {Cluster}.[ClusterDescription]  ORDER BY {Cluster}.[ClusterDescription]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetRAGsLastUpdatedByCluster in GetRAGs_LastUpdatedByCluster in Reporting in CaseConferencing (SELECT ISNULL({Cluster}.[ClusterDescription],'Cluster not set'), COUNT({Student}.[StudentReference])  FROM       {Student}   Inner JOIN {Group} ON {Student}.[MainOfferingCode] = {Group}.[GroupName]  Left JOIN {StudentRAG} ON {StudentRAG}.[StudentReference] = {Student}.[StudentReference]  Left JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  Left JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  Left JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE ((DateDiff( dd, {StudentRAG}.[UpdatedAt], convert(datetime, GetDate(), 120)) > @NumberOfDays) OR ({StudentRAG}.[StudentReference] IS NULL))  AND {Student}.[HasCurrentActiveEnrolment] = 1  GROUP BY {Cluster}.[ClusterDescription]  ORDER BY {Cluster}.[ClusterDescription]): " + aqExcep.Message);
				}
			}


		}


	}


}