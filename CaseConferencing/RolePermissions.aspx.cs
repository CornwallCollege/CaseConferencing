/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowBackofficeFlow {

	public class ScrnRolePermissions: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnRolePermissions(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable <code>varLcApplicationPermissionId</code> that represents the Service Studio local
		///  variable <code>ApplicationPermissionId</code> <p>Description: </p>
		/// </summary>
		int varLcApplicationPermissionId = 0;

		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance8
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance8;
		protected OutSystems.HubEdition.WebWidgets.Container wtFilters_Wrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtPErmittionValidatorRequired;
		protected SelectRtWidget Rt_wtPErmittion = new SelectRtWidget();
		RLApplicationPermissionRecordList Rt_wtPErmittion_reclist = null;
		/// <summary>
		/// Variable (wt_Button3) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		/// <summary>
		/// Variable (wt_Button4) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button4;
		private RLApplicationPermissionRecordList _ssApplicationSectionTableList = new RLApplicationPermissionRecordList();
		public RLApplicationPermissionRecordList ssApplicationSectionTableList {
			get {
				return _ssApplicationSectionTableList; 
			}
			set {
				_ssApplicationSectionTableList = value;
				wtApplicationSectionTable.DataSource = value;
				ssApplicationSectionTableListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.OSDataGrid wtApplicationSectionTable;
		public ArrayList wtApplicationSectionTable_storage = new ArrayList();
		protected bool ssApplicationSectionTableList_notUsedYet = true;
		protected bool ssApplicationSectionTableListDoDataBind;
		protected bool ssApplicationSectionTableListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Chosen.Flows.FlowChosenCommon.WBlkchosenWebBlock.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowBackofficeFlow.WBlkRolePermissions_Read.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("UNi+Xny4L0GO7la2ksNMmQ", "RolePermissions");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "UNi+Xny4L0GO7la2ksNMmQ", "RolePermissions");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "UNi+Xny4L0GO7la2ksNMmQ", "RolePermissions");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "UNi+Xny4L0GO7la2ksNMmQ", "RolePermissions");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "UNi+Xny4L0GO7la2ksNMmQ", "RolePermissions");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnRolePermissions() {
		}


		RLApplicationPermissionRecordList queryResGetApplicationSections_outParamList = new RLApplicationPermissionRecordList();
		int queryResGetApplicationSections_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetApplicationSections
			int datasetGetApplicationSections_maxRecords = Math.Max(wtApplicationSectionTable.StartIndex + wtApplicationSectionTable.LineCount + 1, 0);
			queryResGetApplicationSections_outParamList = FuncssPreparation.datasetGetApplicationSections(heContext, datasetGetApplicationSections_maxRecords, IterationMultiplicity.Single, out queryResGetApplicationSections_outParamCount, varLcApplicationPermissionId
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "RolePermissions.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "RolePermissions.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "RolePermissions", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "RolePermissions", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance8 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance8");
			wtFilters_Wrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtFilters_Wrapper");
			wt_Container33 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container33");
			wt_Button3 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button3");
			if (this.wt_Button3 != null) {
				this.wt_Button3.Click += new System.EventHandler(this.wt_Button3_Click);
			}
			wt_Container2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container2");
			wt_Button4 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button4");
			if (this.wt_Button4 != null) {
				this.wt_Button4.Click += new System.EventHandler(this.wt_Button4_Click);
			}
			wtApplicationSectionTable = (OutSystems.HubEdition.WebWidgets.OSDataGrid) FindControl("wtApplicationSectionTable");
			wtApplicationSectionTable.StartIndexExpression = () => 0;
			wtApplicationSectionTable.LineCountExpression = () => 300;
			wtApplicationSectionTable.EmptyMessageExpression = () => "No items to show...";
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "ThemeProvider_wt_WebBlockInstance27") {
				return ThemeProvider_wt_WebBlockInstance8.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance27");
			}
			if (id == "RichWidgets_wt_WebBlockInstance10") {
				return ThemeProvider_wt_WebBlockInstance8.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance10");
			}
			if (id == "wt_Text18") {
				return ThemeProvider_wt_WebBlockInstance8.wtTitle.FindControl("wt_Text18");
			}
			if (id == "wtFilters_Wrapper") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wtFilters_Wrapper");
			}
			if (id == "wt_Text13") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Text13");
			}
			if (id == "wt_Container33") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Container33");
			}
			if (id == "Chosen_wt_WebBlockInstance31") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("Chosen_wt_WebBlockInstance31");
			}
			if (id == "wtPErmittion") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wtPErmittion");
			}
			if (id == "wt_Button3") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Button3");
			}
			if (id == "wt_Container2") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Container2");
			}
			if (id == "wt_Button4") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_Button4");
			}
			if (id == "wtApplicationSectionTable") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wtApplicationSectionTable");
			}
			if (id == "wtApplicationSectionTableAjaxRfrsh") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wtApplicationSectionTableAjaxRfrsh");
			}
			if (id == "wt_TableRecordsHeaderRow34") {
				return ThemeProvider_wt_WebBlockInstance8.wtMainContent.FindControl("wt_TableRecordsHeaderRow34");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_RolePermissions"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_RolePermissions"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssApplicationSectionTableListDoDataBind = true;
				Title = "RolePermissions"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RolePermissions", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button3 = wt_Button3 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button3");
			} catch {}
			string jsString = (wt_Button3 != null) ? "return OsEnterKey('" +wt_Button3.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowBackofficeFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotSuperUser("SuperUser role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("UNi+Xny4L0GO7la2ksNMmQ"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandRefreshAutoCompleteBankTable</code> that represents the Service Studio screen
		///  action <code>RefreshAutoCompleteBankTable</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshAutoCompleteBankTable(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query datasetGetApplicationSections
				{
					int datasetGetApplicationSections_maxRecords = Math.Max(wtApplicationSectionTable.StartIndex + wtApplicationSectionTable.LineCount + 1, 0);
					queryResGetApplicationSections_outParamList = FuncssPreparation.datasetGetApplicationSections(heContext, datasetGetApplicationSections_maxRecords, IterationMultiplicity.Single, out queryResGetApplicationSections_outParamCount, varLcApplicationPermissionId
					);
				}
				// Refresh Widget (wtApplicationSectionTable)
				ssApplicationSectionTableListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtApplicationSectionTableAjaxRfrsh"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvExport: VarsBag {
			public byte[] resRecordListToExcel1_outParamOut = new byte[] {};
			public RLApplicationPermissionsRecordList queryResGetPermissions_outParamList = new RLApplicationPermissionsRecordList();
			public int queryResGetPermissions_outParamCount = 0;

			public lcvExport() {
			}
		}
		/// <summary>
		/// Action <code>CommandExport</code> that represents the Service Studio screen action
		///  <code>Export</code> <p> Description: </p>
		/// </summary>
		private bool CommandExport(HeContext heContext) {
			CheckPermissions(heContext);
			lcvExport localVars = new lcvExport();
			try {
				// Query QueryGetPermissions
				int QueryGetPermissions_maxRecords = 0;
				localVars.queryResGetPermissions_outParamList = FuncCommandExport.QueryGetPermissions(heContext, QueryGetPermissions_maxRecords, IterationMultiplicity.Single, out localVars.queryResGetPermissions_outParamCount);
				// RecordListToExcel RLToExcelRecordListToExcel1
				FuncCommandExport.RLToExcelRecordListToExcel1(heContext, localVars.queryResGetPermissions_outParamList, out localVars.resRecordListToExcel1_outParamOut);
				// Download Download6
				Response.ClearContent();
				string md5Hash_Download6;
				md5Hash_Download6 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.resRecordListToExcel1_outParamOut);
				Response.ContentType = "application/octet-stream";
				Response.AppendHeader("ETag", "\"" + md5Hash_Download6 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download6);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload6 = RuntimePlatformUtils.EscapeFilenameForDownload("Permissions.xlsx");
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload6 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload6);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload6+ "\"");
				byte[] downloadDownload6FileContent = localVars.resRecordListToExcel1_outParamOut;

				if (downloadDownload6FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = "application/octet-stream";
						file_info.Second = localVars.resRecordListToExcel1_outParamOut;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload("Permissions.xlsx"));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload6FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload6FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RolePermissions", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance8 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance8_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance27 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance27_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("Tz2lD0ZO0Uee2YYXkJjbNA")).ssId;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance10 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance10_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("F0OdMTnS+E63CzTzGXJvyg")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtFilters_Wrapper Functions
		/// </summary>
		public void cntFilters_Wrapper_onDataBinding(object sender, System.EventArgs e) {
			cntFilters_Wrapper_setInlineAttributes(sender, e);
		}
		public string cntFilters_Wrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntFilters_Wrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtFilters_Wrapper)
		/// </summary>
		/// <returns>The Visible State of wtFilters_Wrapper</returns>
		public bool cntFilters_Wrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container33 Functions
		/// </summary>
		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container33_setInlineAttributes(sender, e);
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container33_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			return true;
		}

		/// <summary>
		/// Chosen_wt_WebBlockInstance31 Functions
		/// </summary>
		public void Chosen_webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_Chosen.Flows.FlowChosenCommon.WBlkchosenWebBlock widget = (proxy_CaseConferencing_Chosen.Flows.FlowChosenCommon.WBlkchosenWebBlock) sender;
			widget.inParamElementId = this.FindControl("wtPErmittion").ClientID;
			widget.inParamClass = "chzn-select DropdownStyle";
			widget.inParamNoResultsText = "No results matched";
		}
		/// <summary>
		/// wtPErmittion Functions
		/// </summary>
		public void selPErmittion_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			if (Rt_wtPErmittion_reclist == null) {
				using(Transaction wtPErmittion_trans = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {
					string wtPErmittion_sql = "SELECT [ID], [LABEL], NULL, NULL, NULL, NULL FROM " + ENApplicationPermissionEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WHERE [IS_ACTIVE] <> 0 OR [ID] = @Selection  ORDER BY [ORDER], [LABEL]";
					Command Rt_wtPErmittion_sqlCmd = wtPErmittion_trans.CreateCommand(wtPErmittion_sql);
					Rt_wtPErmittion_sqlCmd.CreateParameter("@Selection", varLcApplicationPermissionId);
					Rt_wtPErmittion_sqlCmd.TransformParametersSyntax();
					Rt_wtPErmittion_reclist = new RLApplicationPermissionRecordList();
					Rt_wtPErmittion_reclist.Transaction = wtPErmittion_trans;
					Rt_wtPErmittion_reclist.AllOptimizedAttributes = new BitArray[1] {
						new BitArray(6, false)
					}
					;
					DatabaseAccess.ForCurrentDatabase.ExecuteQuery(Rt_wtPErmittion_sqlCmd, Rt_wtPErmittion_reclist, "WebSelectWidget load operation");
					Rt_wtPErmittion_reclist = (RLApplicationPermissionRecordList) Rt_wtPErmittion_reclist.Duplicate();
				}
			}
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("-", "__ossli_0"));
			if (Rt_wtPErmittion.SpecialListVal == "0")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			Rt_wtPErmittion_reclist.StartIteration();
			try {
				while (!Rt_wtPErmittion_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtPErmittion_reclist.CurrentRec.ssENApplicationPermission.ssLabel, Convert.ToString(Rt_wtPErmittion_reclist.CurrentRec.ssENApplicationPermission.ssId)));
					if (varLcApplicationPermissionId == Convert.ToInt32(Convert.ToString(Rt_wtPErmittion_reclist.CurrentRec.ssENApplicationPermission.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtPErmittion_reclist.Advance();
				}
			} finally {
				Rt_wtPErmittion_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wtPErmittion
		/// </summary>
		public void selPErmittion_AjaxChange(object sender, System.EventArgs e) {
			if (CommandRefreshAutoCompleteBankTable(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void selPErmittion_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtPErmittion.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcApplicationPermissionId = 0;
			}
			else {
				Rt_wtPErmittion.SpecialListVal = "";
				try {
					varLcApplicationPermissionId = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtPErmittion)
		/// </summary>
		/// <returns>The Visible State of wtPErmittion</returns>
		public bool selPErmittion_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtPErmittion)
		/// </summary>
		/// <returns>The Enabled State of wtPErmittion</returns>
		public bool selPErmittion_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selPErmittion)
		/// </summary>
		/// <returns>The Mandatory Value of selPErmittion</returns>
		public bool selPErmittion_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Button3 Functions
		/// </summary>
		public void btn_Button3_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button3_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandRefreshAutoCompleteBankTable(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button3)
		/// </summary>
		/// <returns>Label of the Button (wt_Button3)</returns>
		public string
		btn_Button3_getLabel() {
			return "Search";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button3)
		/// </summary>
		/// <returns>The Visible State of wt_Button3</returns>
		public bool btn_Button3_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button3)
		/// </summary>
		/// <returns>The Enabled State of wt_Button3</returns>
		public bool btn_Button3_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container2 Functions
		/// </summary>
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container2_setInlineAttributes(sender, e);
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Button4 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button4_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandExport(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button4)
		/// </summary>
		/// <returns>Label of the Button (wt_Button4)</returns>
		public string
		btn_Button4_getLabel() {
			return "Export";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button4)
		/// </summary>
		/// <returns>The Visible State of wt_Button4</returns>
		public bool btn_Button4_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button4)
		/// </summary>
		/// <returns>The Enabled State of wt_Button4</returns>
		public bool btn_Button4_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtApplicationSectionTable Functions
		/// </summary>
		public void recTableApplicationSectionTable_onDataBinding(object sender, System.EventArgs e) {
			recTableApplicationSectionTable_setInlineAttributes(sender, e);
			// widget wtApplicationSectionTable
			ssApplicationSectionTableList = queryResGetApplicationSections_outParamList;
			ssApplicationSectionTableListDoDataBind = false;
			ssApplicationSectionTableListDataBound = true;
			wtApplicationSectionTable.ShowHeader = true;
		}
		public string recTableApplicationSectionTable_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-top:0px;";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		public void recTableApplicationSectionTable_Select(object sender, DataGridCommandEventArgs e) {
			if (e.Item.DataSetIndex != -1) {
				if (ssApplicationSectionTableList.Length > 0) {
					ssApplicationSectionTableList.CurrentRec = ssApplicationSectionTableList[ssApplicationSectionTableList.CurrentRowNumber];
				}
				if (ssApplicationSectionTableList.Length > e.Item.DataSetIndex) {
					ssApplicationSectionTableList.CurrentRec = ssApplicationSectionTableList[e.Item.DataSetIndex];
					ssApplicationSectionTableList.CurrentRowNumber = e.Item.DataSetIndex;
				}
			}
			if (e is DataGridCommandAjaxEventArgs) {
				((DataGridCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recTableApplicationSectionTable_Store(object dataItem, int index) {
			return "";
		}
		public void recTableApplicationSectionTable_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recTableApplicationSectionTable_Clear(object sender, EventArgs e) {
			wtApplicationSectionTable_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recTableApplicationSectionTable_Rebuild(int startIndex, int lineCount) {
			if (ssApplicationSectionTableList.Length != -1) {
				wtApplicationSectionTable_storage.Clear();
				for (int i=startIndex; i<ssApplicationSectionTableList.Data.Count && i<startIndex+lineCount; i++) {
					recTableApplicationSectionTable_Store(ssApplicationSectionTableList.Data[i], wtApplicationSectionTable_storage.Count);
				}
			}
		}
		public void recTableApplicationSectionTable_ListRefreshDataBind(object sender, EventArgs e) {
			wtApplicationSectionTable.ShowHeader = true;
		}
		/// <summary>
		/// Function that returns the list of the wtApplicationSectionTable widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLApplicationPermissionRecordList getWtApplicationSectionTableList() {
			if (ssApplicationSectionTableListDoDataBind) {
				recTableApplicationSectionTable_onDataBinding(this, null);
			}

			return ssApplicationSectionTableList;
		}
		/// <summary>
		/// wt_Container16 Functions
		/// </summary>
		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container16_setInlineAttributes(sender, e);
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container16_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression17 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 8tw1boXPLE2M8s6LUBbr5A) Expression:
		///  ApplicationSectionTable.List.Current.ApplicationPermission.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression17() {
			return getWtApplicationSectionTableList().CurrentRec.ssENApplicationPermission.ssLabel;
		}
		/// <summary>
		/// wt_Container32 Functions
		/// </summary>
		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container32_setInlineAttributes(sender, e);
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container32_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression20 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = kOLRdLqt9EG2wZi6YsrubA) Expression:
		///  ApplicationSectionTable.List.Current.ApplicationPermission.Description
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression20() {
			return getWtApplicationSectionTableList().CurrentRec.ssENApplicationPermission.ssDescription;
		}
		/// <summary>
		/// wt_WebBlockInstance30 Functions
		/// </summary>
		public void webBlck_WebBlockInstance30_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowBackofficeFlow.WBlkRolePermissions_Read widget = (ssCaseConferencing.Flows.FlowBackofficeFlow.WBlkRolePermissions_Read) sender;
			widget.inParamPermissionType = ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("oTzyT6KcpkiqqPUl9hzCfA")).ssId;
			widget.inParamApplicationSectionId = getWtApplicationSectionTableList().CurrentRec.ssENApplicationPermission.ssId;
		}
		/// <summary>
		/// wt_WebBlockInstance26 Functions
		/// </summary>
		public void webBlck_WebBlockInstance26_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowBackofficeFlow.WBlkRolePermissions_Read widget = (ssCaseConferencing.Flows.FlowBackofficeFlow.WBlkRolePermissions_Read) sender;
			widget.inParamPermissionType = ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId;
			widget.inParamApplicationSectionId = getWtApplicationSectionTableList().CurrentRec.ssENApplicationPermission.ssId;
		}


		public static class FuncCommandRefreshAutoCompleteBankTable {
		}
		public static class FuncCommandExport {

			/// <summary>
			/// Query Function "GetPermissions" of Action "Export"
			/// </summary>
			public static RLApplicationPermissionsRecordList QueryGetPermissions(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string advSql = "SELECT  {ApplicationPermission}.[LABEL],  " +
				 "        {ApplicationPermission}.[DESCRIPTION],  " +
				 "        {Role}.[NAME],  " +
				 "        {RolePermissions}.[PERMISSIONTYPE]  " +
				 " FROM  {ApplicationPermission}  " +
				 "LEFT JOIN  {RolePermissions} ON  {ApplicationPermission}.[ID] =  {RolePermissions}.[APPLICATIONSECTION]  " +
				 "INNER JOIN  {Role} ON  {Role}.[ID] =  {RolePermissions}.[ROLEID]  " +
				 "ORDER By   {ApplicationPermission}.[ORDER]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLApplicationPermissionsRecordList outParamList = new RLApplicationPermissionsRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLApplicationPermissionsRecordList _tmp = new RLApplicationPermissionsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RolePermissions.Export.GetPermissions.List");
							outParamList = (RLApplicationPermissionsRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RolePermissions.Export.GetPermissions.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RolePermissions.Export.GetPermissions.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetPermissions in Export in RolePermissions in BackofficeFlow in CaseConferencing (SELECT {ApplicationPermission}.[Label],         {ApplicationPermission}.[Description],         {Role}.[Name],         {RolePermissions}.[PermissionType]   FROM {ApplicationPermission}  LEFT JOIN {RolePermissions} ON {ApplicationPermission}.[Id] = {RolePermissions}.[ApplicationSection]  INNER JOIN {Role} ON {Role}.[Id] = {RolePermissions}.[RoleId]  ORDER By  {ApplicationPermission}.[Order]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetPermissions in Export in RolePermissions in BackofficeFlow in CaseConferencing (SELECT {ApplicationPermission}.[Label],         {ApplicationPermission}.[Description],         {Role}.[Name],         {RolePermissions}.[PermissionType]   FROM {ApplicationPermission}  LEFT JOIN {RolePermissions} ON {ApplicationPermission}.[Id] = {RolePermissions}.[ApplicationSection]  INNER JOIN {Role} ON {Role}.[Id] = {RolePermissions}.[RoleId]  ORDER By  {ApplicationPermission}.[Order]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetPermissions in Export in RolePermissions in BackofficeFlow in CaseConferencing (SELECT {ApplicationPermission}.[Label],         {ApplicationPermission}.[Description],         {Role}.[Name],         {RolePermissions}.[PermissionType]   FROM {ApplicationPermission}  LEFT JOIN {RolePermissions} ON {ApplicationPermission}.[Id] = {RolePermissions}.[ApplicationSection]  INNER JOIN {Role} ON {Role}.[Id] = {RolePermissions}.[RoleId]  ORDER By  {ApplicationPermission}.[Order]): " + aqExcep.Message);
				}
			}
			/// <summary>
			/// RecordList To Excel: RLToExcelRecordListToExcel1 of Action "Export"
			/// </summary>

			public static void RLToExcelRecordListToExcel1(HeContext heContext, RLApplicationPermissionsRecordList ssRecordList, out byte[] outParamOut) {
				GemBoxLicensing.SetLicense();

				GemBox.Spreadsheet.ExcelFile excelFile = new GemBox.Spreadsheet.ExcelFile();
				GemBox.Spreadsheet.ExcelWorksheet ws = excelFile.Worksheets.Add("Sheet1");

				ws.Cells[0, 0] .Value = "Application Permission";
				ws.Cells[0, 1] .Value = "Application Permission Description";
				ws.Cells[0, 2] .Value = "Role";
				ws.Cells[0, 3] .Value = "Permission Type";


				int i = 1;
				if (!ssRecordList.Empty) {
					try {
						ssRecordList.StartIteration();
						DateTime nullDateTime = new DateTime(1900, 1, 1, 0, 0, 0);
						while (!ssRecordList.Eof) {

							ws.Cells[i, 0] .Value = RuntimePlatformUtils.ExcelFixWrongDateTimeVals(ssRecordList.CurrentRec.ssSTApplicationPermissions.ssApplicationPermission);
							ws.Cells[i, 1] .Value = RuntimePlatformUtils.ExcelFixWrongDateTimeVals(ssRecordList.CurrentRec.ssSTApplicationPermissions.ssApplicationPermissionDescription);
							ws.Cells[i, 2] .Value = RuntimePlatformUtils.ExcelFixWrongDateTimeVals(ssRecordList.CurrentRec.ssSTApplicationPermissions.ssRole);
							ws.Cells[i, 3] .Value = RuntimePlatformUtils.ExcelFixWrongDateTimeVals(ssRecordList.CurrentRec.ssSTApplicationPermissions.ssPermissionType);


							ssRecordList.Advance();
							i++;
						}
					} finally {
						ssRecordList.EndIteration();
					}
				}
				System.IO.MemoryStream stream = new System.IO.MemoryStream();
				if (Settings.GetBool(Settings.Configs.GenerateLegacyExcell2003)) {
					excelFile.SaveXls(stream);
				} else {
					excelFile.SaveXlsx(stream);
				}
				outParamOut = stream.ToArray();

			}
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetApplicationSections" of Action "Preparation"
			/// </summary>
			public static RLApplicationPermissionRecordList datasetGetApplicationSections(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Single {ApplicationSectionTable}
				// Refresh Query dQOX+HSAzkaJuRw6T+HD1g Iterations: Single {ApplicationSectionTable}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENApplicationPermission.[ID] o1, ENApplicationPermission.[LABEL] o2, ENApplicationPermission.[DESCRIPTION] o3, NULL o4, NULL o5, NULL o6");
				fromBuilder.Append(" FROM {ApplicationPermission} ENApplicationPermission");
				whereBuilder.Append(" WHERE (ENApplicationPermission.[IS_ACTIVE] = 1) AND ");
				if (qpinP != BuiltInFunction.NullIdentifier()) {
					whereBuilder.Append("(");
					if (qpinP != 0) {
						whereBuilder.Append("((ENApplicationPermission.[ID] = @qpinP) AND (ENApplicationPermission.[ID] IS NOT NULL))");
						sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
					} else {
						whereBuilder.Append("(ENApplicationPermission.[ID] IS NULL)");
					}
					whereBuilder.Append(" OR ");
					if (qpinP != 0) {
						whereBuilder.Append("((ENApplicationPermission.[PARENTID] = @qpinP) AND (ENApplicationPermission.[PARENTID] IS NOT NULL))");
						sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
					} else {
						whereBuilder.Append("(ENApplicationPermission.[PARENTID] IS NULL)");
					}
					whereBuilder.Append(")");
				}
				string whereBuilderString = whereBuilder.ToString();
				if (whereBuilderString.EndsWith(" AND ")) {
					whereBuilder.Remove(whereBuilderString.Length - 5, 5);
				}
				orderByBuilder.Append(" ORDER BY ENApplicationPermission.[ORDER] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLApplicationPermissionRecordList outParamList = new RLApplicationPermissionRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLApplicationPermissionRecordList _tmp = new RLApplicationPermissionRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RolePermissions.Preparation.GetApplicationSections.List");
						outParamList = (RLApplicationPermissionRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RolePermissions.Preparation.GetApplicationSections.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLApplicationPermissionRecordList _tmp = new RLApplicationPermissionRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RolePermissions.Preparation.GetApplicationSections.List");
							outParamList = (RLApplicationPermissionRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RolePermissions.Preparation.GetApplicationSections.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "RolePermissions"; ssApplicationSectionTableListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RolePermissions", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RolePermissions", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("varLcApplicationPermissionId", varLcApplicationPermissionId, 0);
			ViewStateAttributes.SetInViewState("wtPErmittion_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtPErmittion")).Mandatory, false);
			if (IsAjaxRequest) {
				recTableApplicationSectionTable_Rebuild((ssApplicationSectionTableListDataBound ? wtApplicationSectionTable.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtApplicationSectionTable.LineCount);
			}
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				varLcApplicationPermissionId = (int) ViewStateAttributes.GetFromViewState("varLcApplicationPermissionId", 0);
				((IWidgetRuntimeProperties) this.FindControl("wtPErmittion")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtPErmittion_Mandatory", false);
				recTableApplicationSectionTable_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wtPErmittion", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
