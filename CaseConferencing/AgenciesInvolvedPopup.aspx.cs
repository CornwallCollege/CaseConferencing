/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowSafeguarding {

	public class ScrnAgenciesInvolvedPopup: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnAgenciesInvolvedPopup(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable <code>varLcShowOther</code> that represents the Service Studio local variable
		///  <code>ShowOther</code> <p>Description: </p>
		/// </summary>
		bool varLcShowOther = false;

		/// <summary>
		/// Variable <code>varLcSelectedAgency</code> that represents the Service Studio local variable
		///  <code>SelectedAgency</code> <p>Description: </p>
		/// </summary>
		string varLcSelectedAgency = "";

		/// <summary>
		/// Variable <code>varLcOtherAgencyText</code> that represents the Service Studio local variable
		///  <code>OtherAgencyText</code> <p>Description: </p>
		/// </summary>
		string varLcOtherAgencyText = "";

		/// <summary>
		/// Variable <code>varLcContactName</code> that represents the Service Studio local variable
		///  <code>ContactName</code> <p>Description: </p>
		/// </summary>
		string varLcContactName = "";

		/// <summary>
		/// Variable <code>varLcContactNumber</code> that represents the Service Studio local variable
		///  <code>ContactNumber</code> <p>Description: </p>
		/// </summary>
		string varLcContactNumber = "";

		/// <summary>
		/// Variable <code>varLcNotifyMessage</code> that represents the Service Studio local variable
		///  <code>NotifyMessage</code> <p>Description: </p>
		/// </summary>
		string varLcNotifyMessage = "";

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container15;
		protected OutSystems.HubEdition.WebWidgets.Container wtAgencyInvolvedWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wtSelectAgencyWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox19ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox19 = new SelectRtWidget();
		RLSafeguardingAgencyRecordList Rt_wt_ComboBox19_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wtOtherAgency;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input1ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input1ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input10ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input10ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container21;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container25;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input8ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input8ValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wtButtonWrapper;
		/// <summary>
		/// Variable (wtOkButton) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtOkButton;
		/// <summary>
		/// Variable (wtCancelButton) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtCancelButton;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("LjfHEdCQI0ah5cl8oNLnaQ", "AgenciesInvolvedPopup");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "LjfHEdCQI0ah5cl8oNLnaQ", "AgenciesInvolvedPopup");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "LjfHEdCQI0ah5cl8oNLnaQ", "AgenciesInvolvedPopup");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "LjfHEdCQI0ah5cl8oNLnaQ", "AgenciesInvolvedPopup");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "LjfHEdCQI0ah5cl8oNLnaQ", "AgenciesInvolvedPopup");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnAgenciesInvolvedPopup() {
		}


		RLSafeguardingAgencyRecordList queryResGetSafeguardingAgencies_outParamList = new RLSafeguardingAgencyRecordList();
		int queryResGetSafeguardingAgencies_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetSafeguardingAgencies
			int datasetGetSafeguardingAgencies_maxRecords = 0;
			queryResGetSafeguardingAgencies_outParamList = FuncssPreparation.datasetGetSafeguardingAgencies(heContext, datasetGetSafeguardingAgencies_maxRecords, IterationMultiplicity.Single, out queryResGetSafeguardingAgencies_outParamCount);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "AgenciesInvolvedPopup.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "AgenciesInvolvedPopup.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "AgenciesInvolvedPopup", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "AgenciesInvolvedPopup", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			if (this.wtOkButton != null) {
				this.wtOkButton.Click += new System.EventHandler(this.wtOkButton_Click);
			}
			if (this.wtCancelButton != null) {
				this.wtCancelButton.Click += new System.EventHandler(this.wtCancelButton_Click);
			}
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_AgenciesInvolvedPopup"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_AgenciesInvolvedPopup"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "AgenciesInvolvedPopup"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "AgenciesInvolvedPopup", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wtOkButton = wtOkButton ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wtOkButton");
			} catch {}
			string jsString = (wtOkButton != null) ? "return OsEnterKey('" +wtOkButton.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowSafeguarding.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotLearningSupportLead("LearningSupportLead role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("LjfHEdCQI0ah5cl8oNLnaQ"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				if ((varLcSelectedAgency==ENSafeguardingAgencyEntity.GetRecordByKey(ObjectKey.Parse("iHI7wKbV+kCGe3Jcidh7XA")).ssId)) {
					varLcShowOther = true; // ShowOther = True
					// Refresh Widget (wtOtherAgency)
					((OSPageViewState) Page).AjaxRefresh(wtOtherAgency, "None", StoreViewState);

				}
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandCancel</code> that represents the Service Studio screen action
		///  <code>Cancel</code> <p> Description: </p>
		/// </summary>
		private bool CommandCancel(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOk</code> that represents the Service Studio screen action <code>Ok</code> <p>
		///  Description: </p>
		/// </summary>
		private bool CommandOk(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcNotifyMessage = ((((((varLcSelectedAgency+ "|") +varLcOtherAgencyText) + "|") +varLcContactName) + "|") +varLcContactNumber); // NotifyMessage = SelectedAgency + "|" + OtherAgencyText + "|" + ContactName + "|" + ContactNumber
				// Popup_Editor_Notify
				Actions.ActionPopup_Editor_Notify(heContext, varLcNotifyMessage);
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_Container22 Functions
		/// </summary>
		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container22_setInlineAttributes(sender, e);
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container22_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container15 Functions
		/// </summary>
		public void cnt_Container15_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container15_setInlineAttributes(sender, e);
		}
		public string cnt_Container15_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container15_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container15)
		/// </summary>
		/// <returns>The Visible State of wt_Container15</returns>
		public bool cnt_Container15_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance4 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance4_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("WZFHuOg_eUKvzjz_XLVH3A")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtAgencyInvolvedWrapper Functions
		/// </summary>
		public void cntAgencyInvolvedWrapper_onDataBinding(object sender, System.EventArgs e) {
			cntAgencyInvolvedWrapper_setInlineAttributes(sender, e);
		}
		public string cntAgencyInvolvedWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntAgencyInvolvedWrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtAgencyInvolvedWrapper)
		/// </summary>
		/// <returns>The Visible State of wtAgencyInvolvedWrapper</returns>
		public bool cntAgencyInvolvedWrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wtSelectAgencyWrapper Functions
		/// </summary>
		public void cntSelectAgencyWrapper_onDataBinding(object sender, System.EventArgs e) {
			cntSelectAgencyWrapper_setInlineAttributes(sender, e);
		}
		public string cntSelectAgencyWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntSelectAgencyWrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtSelectAgencyWrapper)
		/// </summary>
		/// <returns>The Visible State of wtSelectAgencyWrapper</returns>
		public bool cntSelectAgencyWrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container16 Functions
		/// </summary>
		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container16_setInlineAttributes(sender, e);
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container16_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container23 Functions
		/// </summary>
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container23_setInlineAttributes(sender, e);
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container23_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_ComboBox19 Functions
		/// </summary>
		public void sel_ComboBox19_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			RLSafeguardingAgencyRecordList Rt_wt_ComboBox19_reclist = queryResGetSafeguardingAgencies_outParamList;
			Rt_wt_ComboBox19_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox19_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox19_reclist.CurrentRec.ssENSafeguardingAgency.ssLabel, Rt_wt_ComboBox19_reclist.CurrentRec.ssENSafeguardingAgency.ssId));
					if (varLcSelectedAgency == Convert.ToString(Rt_wt_ComboBox19_reclist.CurrentRec.ssENSafeguardingAgency.ssId)) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox19_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox19_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox19
		/// </summary>
		public void sel_ComboBox19_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox19_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox19.SpecialListVal = dropDown.SelectedValue.Substring(8);
				varLcSelectedAgency = "";
			}
			else {
				Rt_wt_ComboBox19.SpecialListVal = "";
				try {
					varLcSelectedAgency = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox19)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox19</returns>
		public bool sel_ComboBox19_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox19)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox19</returns>
		public bool sel_ComboBox19_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox19)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox19</returns>
		public bool sel_ComboBox19_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtOtherAgency Functions
		/// </summary>
		public void cntOtherAgency_onDataBinding(object sender, System.EventArgs e) {
			cntOtherAgency_setInlineAttributes(sender, e);
		}
		public string cntOtherAgency_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntOtherAgency_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtOtherAgency)
		/// </summary>
		/// <returns>The Visible State of wtOtherAgency</returns>
		public bool cntOtherAgency_isVisible() {
			return varLcShowOther;
		}

		/// <summary>
		/// wt_Container6 Functions
		/// </summary>
		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container6_setInlineAttributes(sender, e);
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container6_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container2 Functions
		/// </summary>
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container2_setInlineAttributes(sender, e);
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Input1 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input1_input_value() {
			if (("" !=varLcOtherAgencyText)) {
				return varLcOtherAgencyText;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input1");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcOtherAgencyText;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input1_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcOtherAgencyText = ""; 
				} else {
					varLcOtherAgencyText = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcOtherAgencyText = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input1)
		/// </summary>
		/// <returns>The Visible State of wt_Input1</returns>
		public bool inputwt_Input1_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input1)
		/// </summary>
		/// <returns>The Enabled State of wt_Input1</returns>
		public bool inputwt_Input1_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input1)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input1</returns>
		public bool inputwt_Input1_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container20 Functions
		/// </summary>
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container20_setInlineAttributes(sender, e);
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container20_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container9 Functions
		/// </summary>
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container9_setInlineAttributes(sender, e);
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container9_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container3 Functions
		/// </summary>
		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container3_setInlineAttributes(sender, e);
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Input10 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input10_input_value() {
			if (("" !=varLcContactName)) {
				return varLcContactName;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input10");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcContactName;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input10_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcContactName = ""; 
				} else {
					varLcContactName = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcContactName = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input10)
		/// </summary>
		/// <returns>The Visible State of wt_Input10</returns>
		public bool inputwt_Input10_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input10)
		/// </summary>
		/// <returns>The Enabled State of wt_Input10</returns>
		public bool inputwt_Input10_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input10)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input10</returns>
		public bool inputwt_Input10_isMandatory() {
			return true;
		}

		/// <summary>
		/// wt_Container11 Functions
		/// </summary>
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container11_setInlineAttributes(sender, e);
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container11_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container21 Functions
		/// </summary>
		public void cnt_Container21_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container21_setInlineAttributes(sender, e);
		}
		public string cnt_Container21_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container21_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container21)
		/// </summary>
		/// <returns>The Visible State of wt_Container21</returns>
		public bool cnt_Container21_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container25 Functions
		/// </summary>
		public void cnt_Container25_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container25_setInlineAttributes(sender, e);
		}
		public string cnt_Container25_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container25_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container25)
		/// </summary>
		/// <returns>The Visible State of wt_Container25</returns>
		public bool cnt_Container25_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Input8 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input8_input_value() {
			if (("" !=varLcContactNumber)) {
				return varLcContactNumber;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input8");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcContactNumber;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input8_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcContactNumber = ""; 
				} else {
					varLcContactNumber = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcContactNumber = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input8)
		/// </summary>
		/// <returns>The Visible State of wt_Input8</returns>
		public bool inputwt_Input8_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input8)
		/// </summary>
		/// <returns>The Enabled State of wt_Input8</returns>
		public bool inputwt_Input8_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input8)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input8</returns>
		public bool inputwt_Input8_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtButtonWrapper Functions
		/// </summary>
		public void cntButtonWrapper_onDataBinding(object sender, System.EventArgs e) {
			cntButtonWrapper_setInlineAttributes(sender, e);
		}
		public string cntButtonWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntButtonWrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtButtonWrapper)
		/// </summary>
		/// <returns>The Visible State of wtButtonWrapper</returns>
		public bool cntButtonWrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wtOkButton Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtOkButton_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandOk(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wtOkButton)
		/// </summary>
		/// <returns>Label of the Button (wtOkButton)</returns>
		public string
		btnOkButton_getLabel() {
			return "Ok";
		}
		/// <summary>
		/// Gets the visible state of component (wtOkButton)
		/// </summary>
		/// <returns>The Visible State of wtOkButton</returns>
		public bool btnOkButton_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtOkButton)
		/// </summary>
		/// <returns>The Enabled State of wtOkButton</returns>
		public bool btnOkButton_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtCancelButton Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtCancelButton_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandCancel(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wtCancelButton)
		/// </summary>
		/// <returns>Label of the Button (wtCancelButton)</returns>
		public string
		btnCancelButton_getLabel() {
			return "Cancel";
		}
		/// <summary>
		/// Gets the visible state of component (wtCancelButton)
		/// </summary>
		/// <returns>The Visible State of wtCancelButton</returns>
		public bool btnCancelButton_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtCancelButton)
		/// </summary>
		/// <returns>The Enabled State of wtCancelButton</returns>
		public bool btnCancelButton_isEnabled() {
			return true; 
		}


		public static class FuncCommandOnChange {
		}
		public static class FuncCommandCancel {
		}
		public static class FuncCommandOk {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetSafeguardingAgencies" of Action "Preparation"
			/// </summary>
			public static RLSafeguardingAgencyRecordList datasetGetSafeguardingAgencies(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENSafeguardingAgency.[ID] o1, ENSafeguardingAgency.[LABEL] o2, NULL o3, NULL o4");
				fromBuilder.Append(" FROM {SafeguardingAgency} ENSafeguardingAgency");
				whereBuilder.Append(" WHERE (ENSafeguardingAgency.[IS_ACTIVE] = 1)");
				orderByBuilder.Append(" ORDER BY ENSafeguardingAgency.[ORDER] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLSafeguardingAgencyRecordList outParamList = new RLSafeguardingAgencyRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLSafeguardingAgencyRecordList _tmp = new RLSafeguardingAgencyRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.AgenciesInvolvedPopup.Preparation.GetSafeguardingAgencies.List");
						outParamList = (RLSafeguardingAgencyRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.AgenciesInvolvedPopup.Preparation.GetSafeguardingAgencies.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLSafeguardingAgencyRecordList _tmp = new RLSafeguardingAgencyRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Safeguarding.AgenciesInvolvedPopup.Preparation.GetSafeguardingAgencies.List");
							outParamList = (RLSafeguardingAgencyRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Safeguarding.AgenciesInvolvedPopup.Preparation.GetSafeguardingAgencies.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "AgenciesInvolvedPopup"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "AgenciesInvolvedPopup", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "AgenciesInvolvedPopup", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("varLcShowOther", varLcShowOther, false);
			ViewStateAttributes.SetInViewState("varLcSelectedAgency", varLcSelectedAgency, "");
			ViewStateAttributes.SetInViewState("varLcOtherAgencyText", varLcOtherAgencyText, "");
			ViewStateAttributes.SetInViewState("varLcContactName", varLcContactName, "");
			ViewStateAttributes.SetInViewState("varLcContactNumber", varLcContactNumber, "");
			ViewStateAttributes.SetInViewState("wt_ComboBox19_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox19")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input1_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input1")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input10_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input10")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wt_Input8_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input8")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				varLcShowOther = (bool) ViewStateAttributes.GetFromViewState("varLcShowOther", false);
				varLcSelectedAgency = (string) ViewStateAttributes.GetFromViewState("varLcSelectedAgency", "");
				varLcOtherAgencyText = (string) ViewStateAttributes.GetFromViewState("varLcOtherAgencyText", "");
				varLcContactName = (string) ViewStateAttributes.GetFromViewState("varLcContactName", "");
				varLcContactNumber = (string) ViewStateAttributes.GetFromViewState("varLcContactNumber", "");
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox19")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox19_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input1")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input1_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input10")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input10_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wt_Input8")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input8_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox19", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wt_Input1", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wt_Input10", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wt_Input8", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
