/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearner_Programme {

	public class ScrnPopupExemption: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnPopupExemption(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamStudentReference. Description:
		/// </summary>
		public string inParamStudentReference = "";
		/// <summary>
		/// Variable wt_WebBlockInstance23
		/// </summary>
		protected ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout wt_WebBlockInstance23;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCStudentExemptionRecord ssEditRecord1Record = new RCStudentExemptionRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtEditRecord1_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wt_CheckBox24") &&
			ValidationUtils.IsValid(this, "wt_CheckBox19") &&
			ValidationUtils.IsValid(this, "wtExemptionReason");
			return res;
		}


		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtExemptionReasonValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtExemptionReasonValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		/// <summary>
		/// Variable (wt_Button15) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button15;
		/// <summary>
		/// Variable (wt_Button13) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button13;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("_6ncEVhTsEy7K2hhGEAJIw", "PopupExemption");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "_6ncEVhTsEy7K2hhGEAJIw", "PopupExemption");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "_6ncEVhTsEy7K2hhGEAJIw", "PopupExemption");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "_6ncEVhTsEy7K2hhGEAJIw", "PopupExemption");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "_6ncEVhTsEy7K2hhGEAJIw", "PopupExemption");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnPopupExemption() {
			htTabIndexGroups["wt_Text12"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_CheckBox24"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Text17"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_CheckBox19"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Text22"] = "wtEditRecord1-1";
			htTabIndexGroups["wtExemptionReason"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Container9"] = "wtEditRecord1-1";
			htTabIndexGroups["Hunspell_wt_WebBlockInstance11"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Button15"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Button13"] = "wtEditRecord1-1";
		}


		RLStudentExemptionRecordList queryResGetStudentExemptions_outParamList = new RLStudentExemptionRecordList();
		int queryResGetStudentExemptions_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetStudentExemptions
			int datasetGetStudentExemptions_maxRecords = 0;
			queryResGetStudentExemptions_outParamList = FuncssPreparation.datasetGetStudentExemptions(heContext, datasetGetStudentExemptions_maxRecords, IterationMultiplicity.Never, out queryResGetStudentExemptions_outParamCount, inParamStudentReference
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamStudentReference!= "")) {
				parameters.Add(new Pair<string, string>("StudentReference", HttpUtility.UrlEncode(inParamStudentReference, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "PopupExemption", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "PopupExemption", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			wt_WebBlockInstance23 = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) FindControl("wt_WebBlockInstance23");
			wt_Container9 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container9");
			wt_Button15 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button15");
			if (this.wt_Button15 != null) {
				this.wt_Button15.Click += new System.EventHandler(this.wt_Button15_Click);
			}
			wt_Button13 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button13");
			if (this.wt_Button13 != null) {
				this.wt_Button13.Click += new System.EventHandler(this.wt_Button13_Click);
			}
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_Text8") {
				return wt_WebBlockInstance23.wtTitle.FindControl("wt_Text8");
			}
			if (id == "wtEditRecord1") {
				return wt_WebBlockInstance23.wtContent.FindControl("wtEditRecord1");
			}
			if (id == "wt_EditRecordRow4") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordRow4");
			}
			if (id == "wt_EditRecordCell6") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordCell6");
			}
			if (id == "wt_Text12") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_Text12");
			}
			if (id == "wt_EditRecordCell5") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordCell5");
			}
			if (id == "wt_CheckBox24") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_CheckBox24");
			}
			if (id == "wt_EditRecordRow21") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordRow21");
			}
			if (id == "wt_EditRecordCell25") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordCell25");
			}
			if (id == "wt_Text17") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_Text17");
			}
			if (id == "wt_EditRecordCell18") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordCell18");
			}
			if (id == "wt_CheckBox19") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_CheckBox19");
			}
			if (id == "wt_EditRecordRow16") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordRow16");
			}
			if (id == "wt_EditRecordCell2") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordCell2");
			}
			if (id == "wt_Text22") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_Text22");
			}
			if (id == "wt_EditRecordCell1") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordCell1");
			}
			if (id == "wtExemptionReason") {
				return wt_WebBlockInstance23.wtContent.FindControl("wtExemptionReason");
			}
			if (id == "wt_Container9") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_Container9");
			}
			if (id == "Hunspell_wt_WebBlockInstance11") {
				return wt_WebBlockInstance23.wtContent.FindControl("Hunspell_wt_WebBlockInstance11");
			}
			if (id == "wt_EditRecordRow27") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordRow27");
			}
			if (id == "wt_EditRecordCell7") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordCell7");
			}
			if (id == "wt_EditRecordCell10") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_EditRecordCell10");
			}
			if (id == "wt_Button15") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_Button15");
			}
			if (id == "wt_Button13") {
				return wt_WebBlockInstance23.wtContent.FindControl("wt_Button13");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_PopupExemption"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamStudentReference = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_PopupExemption"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["StudentReference"] != null) {
						inParamStudentReference = Request.QueryString["StudentReference"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["StudentReference"] != null) {
						inParamStudentReference = Request.Form["StudentReference"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtEditRecord1_onDataBindingDataSource(this.FindControl("wtEditRecord1"), null);
				}
				Title = "PopupExemption"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "PopupExemption", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button15 = wt_Button15 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button15");
			} catch {}
			string jsString = (wt_Button15 != null) ? "return OsEnterKey('" +wt_Button15.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearner_Programme.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotCaseConferencingBackoffice("CaseConferencingBackoffice role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("_6ncEVhTsEy7K2hhGEAJIw"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvOk: VarsBag {
			public int resStudentLog_Create_outParamStudentLogId = 0;

			public int resCreateOrUpdateStudentExemption_outParamId = 0;

			public lcvOk() {
			}
		}
		/// <summary>
		/// Action <code>CommandOk</code> that represents the Service Studio screen action <code>Ok</code> <p>
		///  Description: </p>
		/// </summary>
		private bool CommandOk(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOk localVars = new lcvOk();
			try {
				ssEditRecord1Record.ssENStudentExemption.ssStudentId = BuiltInFunction.TextToEntityRefText(inParamStudentReference); // EditRecord1.Record.StudentExemption.StudentId = TextToEntityRefText
				ssEditRecord1Record.ssENStudentExemption.ssLastUpdateOn = BuiltInFunction.CurrDateTime(); // EditRecord1.Record.StudentExemption.LastUpdateOn = CurrDateTime
				ssEditRecord1Record.ssENStudentExemption.ssLastUpdateBy = ((int) Global.App.OsContext.Session["UserID"]); // EditRecord1.Record.StudentExemption.LastUpdateBy = UserID
				// CreateOrUpdateStudentExemption
				ExtendedActions.CreateOrUpdateStudentExemption(heContext, ssEditRecord1Record.ChangedAttributes, ssEditRecord1Record, out localVars.resCreateOrUpdateStudentExemption_outParamId);
				// StudentLog_Create
				Actions.ActionStudentLog_Create(heContext, ssEditRecord1Record.ssENStudentExemption.ssStudentId, ((int) Global.App.OsContext.Session["UserID"]), "Student Math/English Exemption updated", ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("0z6vP8e82EW_i5jO4fT+Sg")).ssLogType, "Student Math/English Exemption updated", BuiltInFunction.NullTextIdentifier(), false, 0, "Student Exemption Changed", "", 0, BuiltInFunction.NullIdentifier(), "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
				// Popup_Editor_Notify
				Actions.ActionPopup_Editor_Notify(heContext, "Saved");
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandCancel</code> that represents the Service Studio screen action
		///  <code>Cancel</code> <p> Description: </p>
		/// </summary>
		private bool CommandCancel(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Popup_Editor_Close
				Actions.ActionPopup_Editor_Close(heContext);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// wt_WebBlockInstance23 Functions
		/// </summary>
		public void webBlck_WebBlockInstance23_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout widget = (ssCaseConferencing.Flows.FlowCommon.WBlkPopup_Editor_Layout) sender;
			widget.inParamWidth = 550;
		}
		/// <summary>
		/// wtEditRecord1 Functions
		/// </summary>
		public void wtEditRecord1_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack) {
				ssEditRecord1Record = queryResGetStudentExemptions_outParamList.CurrentRec;
			}
		}
		/// <summary>
		/// wt_CheckBox24 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 7PKp2pc6LE+CnX7MU0uNsA
		/// </summary>
		/// <returns>The Value of the Check Box 7PKp2pc6LE+CnX7MU0uNsA</returns>
		public bool chk_CheckBox24_checked_value() {
			return ssEditRecord1Record.ssENStudentExemption.ssIsMathExemption;
		}
		public void chk_CheckBox24_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				ssEditRecord1Record.ssENStudentExemption.ssIsMathExemption = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox24)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox24</returns>
		public bool chk_CheckBox24_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox24)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox24</returns>
		public bool chk_CheckBox24_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_CheckBox19 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box 96dVvopH6UCEhNw7mz5pEw
		/// </summary>
		/// <returns>The Value of the Check Box 96dVvopH6UCEhNw7mz5pEw</returns>
		public bool chk_CheckBox19_checked_value() {
			return ssEditRecord1Record.ssENStudentExemption.ssIsEnglishExemption;
		}
		public void chk_CheckBox19_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				ssEditRecord1Record.ssENStudentExemption.ssIsEnglishExemption = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox19)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox19</returns>
		public bool chk_CheckBox19_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox19)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox19</returns>
		public bool chk_CheckBox19_isVisible() {
			return true;
		}

		/// <summary>
		/// wtExemptionReason Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtExemptionReason_input_value() {
			if (("" !=ssEditRecord1Record.ssENStudentExemption.ssExemptionReason)) {
				return ssEditRecord1Record.ssENStudentExemption.ssExemptionReason;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtExemptionReason");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENStudentExemption.ssExemptionReason;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtExemptionReason_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENStudentExemption.ssExemptionReason = ""; 
				} else {
					ssEditRecord1Record.ssENStudentExemption.ssExemptionReason = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENStudentExemption.ssExemptionReason = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtExemptionReason)
		/// </summary>
		/// <returns>The Visible State of wtExemptionReason</returns>
		public bool inputwtExemptionReason_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtExemptionReason)
		/// </summary>
		/// <returns>The Enabled State of wtExemptionReason</returns>
		public bool inputwtExemptionReason_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtExemptionReason)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtExemptionReason</returns>
		public bool inputwtExemptionReason_isMandatory() {
			return true;
		}

		/// <summary>
		/// wt_Container9 Functions
		/// </summary>
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container9_setInlineAttributes(sender, e);
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container9_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			return true;
		}

		/// <summary>
		/// Hunspell_wt_WebBlockInstance11 Functions
		/// </summary>
		public void Hunspell_webBlck_WebBlockInstance11_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
			widget.inParamTextInputId = ssEditRecord1Record.ssENStudentExemption.ssExemptionReason;
			widget.inParamExtraStyle = "";
			widget.inParamInPopupWindow = true;
		}
		/// <summary>
		/// wt_Button15 Functions
		/// </summary>
		public void btn_Button15_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button15_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandOk(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button15)
		/// </summary>
		/// <returns>Label of the Button (wt_Button15)</returns>
		public string
		btn_Button15_getLabel() {
			return "Ok";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button15)
		/// </summary>
		/// <returns>The Visible State of wt_Button15</returns>
		public bool btn_Button15_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button15)
		/// </summary>
		/// <returns>The Enabled State of wt_Button15</returns>
		public bool btn_Button15_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button13 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button13_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandCancel(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button13)
		/// </summary>
		/// <returns>Label of the Button (wt_Button13)</returns>
		public string
		btn_Button13_getLabel() {
			return "Cancel";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button13)
		/// </summary>
		/// <returns>The Visible State of wt_Button13</returns>
		public bool btn_Button13_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button13)
		/// </summary>
		/// <returns>The Enabled State of wt_Button13</returns>
		public bool btn_Button13_isEnabled() {
			return true; 
		}


		public static class FuncCommandOk {
		}
		public static class FuncCommandCancel {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetStudentExemptions" of Action "Preparation"
			/// </summary>
			public static RLStudentExemptionRecordList datasetGetStudentExemptions(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENStudentExemption.[ID] o1, NULL o2, ENStudentExemption.[ISMATHEXEMPTION] o3, ENStudentExemption.[ISENGLISHEXEMPTION] o4, NULL o5, NULL o6, ENStudentExemption.[EXEMPTIONREASON] o7");
				fromBuilder.Append(" FROM {StudentExemption} ENStudentExemption");
				whereBuilder.Append(" WHERE (ENStudentExemption.[STUDENTID] = (@qpstP))");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLStudentExemptionRecordList outParamList = new RLStudentExemptionRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, false, false, true, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentExemptionRecordList _tmp = new RLStudentExemptionRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.PopupExemption.Preparation.GetStudentExemptions.List");
						outParamList = (RLStudentExemptionRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.PopupExemption.Preparation.GetStudentExemptions.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentExemptionRecordList _tmp = new RLStudentExemptionRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_Programme.PopupExemption.Preparation.GetStudentExemptions.List");
							outParamList = (RLStudentExemptionRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_Programme.PopupExemption.Preparation.GetStudentExemptions.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "PopupExemption"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "PopupExemption", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "PopupExemption", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamStudentReference", inParamStudentReference, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENStudentExemption_ssId", ssEditRecord1Record.ssENStudentExemption.ssId, 0);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENStudentExemption_ssIsMathExemption", ssEditRecord1Record.ssENStudentExemption.ssIsMathExemption, false);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENStudentExemption_ssIsEnglishExemption", ssEditRecord1Record.ssENStudentExemption.ssIsEnglishExemption, false);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENStudentExemption_ssExemptionReason", ssEditRecord1Record.ssENStudentExemption.ssExemptionReason, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENStudentExemption_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssEditRecord1Record.ssENStudentExemption.ChangedAttributes, new BitArray(new bool[] {
				true, false, true, true, false, false, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENStudentExemption_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssEditRecord1Record.ssENStudentExemption.OptimizedAttributes, new BitArray(new bool[] {
				false, true, false, false, true, true, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtExemptionReason_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtExemptionReason")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamStudentReference = (string) ViewStateAttributes.GetFromViewState("inParamStudentReference", "");
				ssEditRecord1Record.ssENStudentExemption.ssId = (int) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENStudentExemption_ssId", 0);
				ssEditRecord1Record.ssENStudentExemption.ssIsMathExemption = (bool) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENStudentExemption_ssIsMathExemption", false);
				ssEditRecord1Record.ssENStudentExemption.ssIsEnglishExemption = (bool) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENStudentExemption_ssIsEnglishExemption", false);
				ssEditRecord1Record.ssENStudentExemption.ssExemptionReason = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENStudentExemption_ssExemptionReason", "");
				ssEditRecord1Record.ssENStudentExemption.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENStudentExemption_ChangedAttributes", null));
				ssEditRecord1Record.ssENStudentExemption.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENStudentExemption_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wtExemptionReason")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtExemptionReason_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtExemptionReason", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
