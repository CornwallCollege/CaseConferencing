/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Web;
using System.Web.UI;
using System.Web.SessionState;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Processes;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using Pair = OutSystems.RuntimeCommon.Pair;

namespace ssCaseConferencing {
	public partial class ExtendedActions {
		public static readonly ObjectKey rAnonymousKey = ObjectKey.Parse("0bApVE2NqE+q8EOBtnom8Q");
		public static readonly ObjectKey rRegisteredKey = ObjectKey.Parse("I1Fm79oZdUu8QBe+dLY9Cg");
		public static readonly ObjectKey rPLAKey = ObjectKey.Parse("Ze3XBjti6kuKCe0L0c_LEA");
		public static readonly ObjectKey rSuperUserKey = ObjectKey.Parse("LWa2GJxsDU6kkdEeZkf3BA");
		public static readonly ObjectKey rCaseConferencingUserKey = ObjectKey.Parse("AZVLUALSQ0S32ElfSaWMZA");
		public static readonly ObjectKey rSafeGuardingLeadKey = ObjectKey.Parse("jwairnstMEG57OyjmhJ8KA");
		public static readonly ObjectKey rSLAKey = ObjectKey.Parse("BuBHspAKSkOCSM5kLpQBKQ");
		public static readonly ObjectKey rLearningSupportLeadKey = ObjectKey.Parse("Grfrw7QkQ0SqhLdYV8QJAQ");
		public static readonly ObjectKey rCaseConferencingBackofficeKey = ObjectKey.Parse("J5RKztOQzkeXuSlISouHdg");
		public static readonly ObjectKey rLearningSupportPractitionerKey = ObjectKey.Parse("ek8T8GCXLECozlzoPB3XNQ");
		private static Random random = new Random();
		public static void AutoLogin(AppInfo info, SessionInfo session) {
			HeContext heContext = info.OsContext;
			using(Transaction trans = DatabaseAccess.ForSystemDatabase.GetRequestTransaction()) {
				string sql = "SELECT User_Id, t.Tenant_Id FROM OSSYS_Persistent_Login p JOIN OSSYS_Espace_Tenant t ON t.Tenant_Id=p.Tenant_Id " +
				 "WHERE t.Espace_Id = @Espace_Id AND Expires > GETDATE() AND Terminal_Type = @Terminal_Type AND Secret = @Secret";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@Espace_Id", DbType.Int32, info.eSpaceId);
				sqlCmd.CreateParameter("@Terminal_Type", DbType.String, heContext.Session.TerminalType);
				switch (heContext.Session.TerminalType) {
					case "SMS":

						if (heContext.Session.MSISDN == "") {
							return;
						}
						sqlCmd.CreateParameter("@Secret", DbType.String, heContext.Session.MSISDN);
						break;
					case "WEB":

						string cookiename = info.eSpaceName;
						if (info.IsMultiTenant) cookiename += "/" + info.Tenant.Name;
						if (info.UserProviderName != null && info.UserProviderName != "") {
							cookiename = info.UserProviderName;
						}
						HttpCookie cookie = HttpContext.Current.Request.Cookies[cookiename];
						sqlCmd.CreateParameter("@Secret", DbType.String, ((cookie != null) ? cookie.Value:
						 "dummy"));
						break;
					default:
					sqlCmd.CreateParameter("@Secret", DbType.String, "dummy");
					break;
				}
				sqlCmd.CommandText = sql;
				int userId = 0;
				int tenantId = 0;
				using(IDataReader reader = sqlCmd.ExecuteReader("AutoLogin operation (load user id)", true)) {
					if (reader.Read()) {
						userId = reader.GetInt32(0);
						tenantId = reader.GetInt32(1);
					}
				}
				if (userId != 0) {
					sqlCmd.ClearParameters();
					sql = "SELECT COUNT(*) FROM OSSYS_User " +
					 "WHERE Tenant_Id = @Tenant_Id AND " +
					DatabaseAccess.ForSystemDatabase.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("ID") + " = @User_Id AND Is_Active = 1";
					sqlCmd.CreateParameter("@Tenant_Id", DbType.Int32, tenantId);
					sqlCmd.CreateParameter("@User_Id", DbType.Int32, userId);
					sqlCmd.CommandText = sql;
					if ((int) Convert.ChangeType(sqlCmd.ExecuteScalar("AutoLogin operation (check user id)", true), typeof(int)) != 1)
					return;

					sqlCmd.CommandText = "SELECT Username FROM OSSYS_User WHERE Tenant_Id = @Tenant_Id AND " +
					DatabaseAccess.ForSystemDatabase.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("ID") + " = @User_Id";
					object userNameObj = sqlCmd.ExecuteScalar("AutoLogin operation (get Username)", true);
					string userNameString = null;
					if (userNameObj != null) {
						userNameString = Convert.ToString(userNameObj);
					}
					sqlCmd.ClearParameters();
					heContext.Session.TenantId = tenantId;
					heContext.Session.SetUser(userId, userNameString);

					heContext.AppInfo.InjectionCache.RunCallbacks(info, session, OutSystems.HubEdition.RuntimePlatform.Callbacks.CallbackEvent.Login);

					// update login date
					// #798465 Use a committable transaction to update the last login to avoid locking concurrent logins
					using(Transaction committableTrans = DatabaseAccess.ForSystemDatabase.GetCommitableTransaction()) {
						try {
							var commitCmd = committableTrans.CreateCommand();
							var commitSql = "UPDATE OSSYS_User SET Last_Login = @Last_Login " +
							 "WHERE Tenant_Id = @Tenant_Id AND " +
							DatabaseAccess.ForSystemDatabase.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("ID") + " = @Id";
							commitCmd.CreateParameter("@Last_Login", DbType.Date, DateTime.Now);
							commitCmd.CreateParameter("@Tenant_Id", DbType.Int32, heContext.Session.TenantId);
							commitCmd.CreateParameter("@Id", DbType.Int32, userId);
							commitCmd.CommandText = commitSql;
							commitCmd.CommandTimeout = 5;/*5 seconds*/

							commitCmd.ExecuteNonQuery("AutoLogin operation (update login date)", true);
							committableTrans.Commit();
						} catch (Exception) {
							// #798465 Updating the last login is not very important.
							// We don't what to give visibility to issues updating the Last Login.
							// the update can fail if a long request has uncommitted changes to the user record in DB.
						}
					}
				}
			}
		} /// <summary>
		/// Action: CheckAnonymousRole
		/// </summary>

		public static void CheckAnonymousRole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			outParamHasRole = true;
		}

		/// <summary>
		/// Action: CheckRegisteredRole
		/// </summary>

		public static void CheckRegisteredRole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			int userId = heContext.Session.UserId;
			outParamHasRole = (userId != 0); 
		}

		/// <summary>
		/// Action: CheckPLARole
		/// </summary>

		public static void CheckPLARole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			outParamHasRole = GenericExtendedActions.Check(heContext, rPLAKey, inParamUserId, 27);
		}

		/// <summary>
		/// Action: GrantPLARole
		/// </summary>

		public static void GrantPLARole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Grant(heContext, rPLAKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: RevokePLARole
		/// </summary>

		public static void RevokePLARole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Revoke(heContext, rPLAKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: CheckSuperUserRole
		/// </summary>

		public static void CheckSuperUserRole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			outParamHasRole = GenericExtendedActions.Check(heContext, rSuperUserKey, inParamUserId, 27);
		}

		/// <summary>
		/// Action: GrantSuperUserRole
		/// </summary>

		public static void GrantSuperUserRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Grant(heContext, rSuperUserKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: RevokeSuperUserRole
		/// </summary>

		public static void RevokeSuperUserRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Revoke(heContext, rSuperUserKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: CheckCaseConferencingUserRole
		/// </summary>

		public static void CheckCaseConferencingUserRole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			outParamHasRole = GenericExtendedActions.Check(heContext, rCaseConferencingUserKey, inParamUserId, 27);
		}

		/// <summary>
		/// Action: GrantCaseConferencingUserRole
		/// </summary>

		public static void GrantCaseConferencingUserRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Grant(heContext, rCaseConferencingUserKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: RevokeCaseConferencingUserRole
		/// </summary>

		public static void RevokeCaseConferencingUserRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Revoke(heContext, rCaseConferencingUserKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: CheckSafeGuardingLeadRole
		/// </summary>

		public static void CheckSafeGuardingLeadRole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			outParamHasRole = GenericExtendedActions.Check(heContext, rSafeGuardingLeadKey, inParamUserId, 27);
		}

		/// <summary>
		/// Action: GrantSafeGuardingLeadRole
		/// </summary>

		public static void GrantSafeGuardingLeadRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Grant(heContext, rSafeGuardingLeadKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: RevokeSafeGuardingLeadRole
		/// </summary>

		public static void RevokeSafeGuardingLeadRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Revoke(heContext, rSafeGuardingLeadKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: CheckSLARole
		/// </summary>

		public static void CheckSLARole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			outParamHasRole = GenericExtendedActions.Check(heContext, rSLAKey, inParamUserId, 27);
		}

		/// <summary>
		/// Action: GrantSLARole
		/// </summary>

		public static void GrantSLARole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Grant(heContext, rSLAKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: RevokeSLARole
		/// </summary>

		public static void RevokeSLARole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Revoke(heContext, rSLAKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: CheckLearningSupportLeadRole
		/// </summary>

		public static void CheckLearningSupportLeadRole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			outParamHasRole = GenericExtendedActions.Check(heContext, rLearningSupportLeadKey, inParamUserId, 27);
		}

		/// <summary>
		/// Action: GrantLearningSupportLeadRole
		/// </summary>

		public static void GrantLearningSupportLeadRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Grant(heContext, rLearningSupportLeadKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: RevokeLearningSupportLeadRole
		/// </summary>

		public static void RevokeLearningSupportLeadRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Revoke(heContext, rLearningSupportLeadKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: CheckCaseConferencingBackofficeRole
		/// </summary>

		public static void CheckCaseConferencingBackofficeRole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			outParamHasRole = GenericExtendedActions.Check(heContext, rCaseConferencingBackofficeKey, inParamUserId, 27);
		}

		/// <summary>
		/// Action: GrantCaseConferencingBackofficeRole
		/// </summary>

		public static void GrantCaseConferencingBackofficeRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Grant(heContext, rCaseConferencingBackofficeKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: RevokeCaseConferencingBackofficeRole
		/// </summary>

		public static void RevokeCaseConferencingBackofficeRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Revoke(heContext, rCaseConferencingBackofficeKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: CheckLearningSupportPractitionerRole
		/// </summary>

		public static void CheckLearningSupportPractitionerRole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			outParamHasRole = GenericExtendedActions.Check(heContext, rLearningSupportPractitionerKey, inParamUserId, 27);
		}

		/// <summary>
		/// Action: GrantLearningSupportPractitionerRole
		/// </summary>

		public static void GrantLearningSupportPractitionerRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Grant(heContext, rLearningSupportPractitionerKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: RevokeLearningSupportPractitionerRole
		/// </summary>

		public static void RevokeLearningSupportPractitionerRole(HeContext heContext, int inParamUserId) {
			GenericExtendedActions.Revoke(heContext, rLearningSupportPractitionerKey, true, inParamUserId, 27);
		}

		/// <summary>
		/// Action: AbortTransaction
		/// </summary>

		public static void AbortTransaction(HeContext heContext) {
			DatabaseAccess.RollbackAllTransactions();
		}

		/// <summary>
		/// Action: Audit
		/// </summary>

		public static void Audit(HeContext heContext, string inParamMessage, string inParamModuleName) {
			GenericExtendedActions.Audit(heContext, inParamMessage, inParamModuleName);
		}

		/// <summary>
		/// Action: NotifyWidgetGetMessage
		/// </summary>

		public static void NotifyWidgetGetMessage(HeContext heContext, out string outParamMessage) {
			outParamMessage = "";

			GenericExtendedActions.NotifyWidgetGetMessage(heContext, out outParamMessage);
		}

		/// <summary>
		/// Action: ListRemove
		/// </summary>

		public static void ListRemove<T>(HeContext heContext, OSList<T> inParamList, int inParamPosition) {
			inParamList.Remove(inParamPosition); 
		}

		/// <summary>
		/// Action: ListInsert
		/// </summary>

		public static void ListInsert<T>(HeContext heContext, OSList<T> inParamList, T inParamElement, int inParamPosition) {
			inParamList.Insert(inParamElement, inParamPosition); 
		}

		/// <summary>
		/// Action: SetCurrentLocale
		/// </summary>

		public static void SetCurrentLocale(HeContext heContext, string inParamLocale) {
			GenericExtendedActions.SetCurrentLocale(heContext, inParamLocale);
		}

		/// <summary>
		/// Action: Login
		/// </summary>

		public static void Login(HeContext heContext, int inParamUserId, bool inParamPersistent) {
			GenericExtendedActions.Login(heContext, inParamUserId, inParamPersistent);
		}

		/// <summary>
		/// Action: NotifyWidget
		/// </summary>

		public static void NotifyWidget(HeContext heContext, string inParamWidgetId, string inParamMessage) {
			GenericExtendedActions.NotifyWidget(heContext, inParamWidgetId, inParamMessage);
		}

		/// <summary>
		/// Action: CommitTransaction
		/// </summary>

		public static void CommitTransaction(HeContext heContext) {
			DatabaseAccess.CommitAllTransactions();
		}

		/// <summary>
		/// Action: ListAppend
		/// </summary>

		public static void ListAppend<T>(HeContext heContext, OSList<T> inParamList, T inParamElement) {
			inParamList.Append(inParamElement); 
		}

		/// <summary>
		/// Action: ListClear
		/// </summary>

		public static void ListClear<T>(HeContext heContext, OSList<T> inParamList) {
			inParamList.Clear(); 
		}

		/// <summary>
		/// Action: ListAppendAll
		/// </summary>

		public static void ListAppendAll<T>(HeContext heContext, OSList<T> inParamList, OSList<T> inParamSourceList) {
			inParamList.AppendAll(inParamSourceList); 
		}


	}
}
