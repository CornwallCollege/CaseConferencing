/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowCaseConference {

	public class ScrnCCSessionStep2_Edit: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnCCSessionStep2_Edit(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamCCSessionId. Description:
		/// </summary>
		public int inParamCCSessionId = 0;
		/// <summary>
		/// Variable <code>varLctop</code> that represents the Service Studio local variable <code>top</code>
		///  <p>Description: </p>
		/// </summary>
		decimal varLctop = 0.0M;

		/// <summary>
		/// Variable <code>varLcleft</code> that represents the Service Studio local variable <code>left</code>
		///  <p>Description: </p>
		/// </summary>
		decimal varLcleft = 0.0M;

		/// <summary>
		/// Variable <code>varLcshow</code> that represents the Service Studio local variable <code>show</code>
		///  <p>Description: </p>
		/// </summary>
		bool varLcshow = false;

		/// <summary>
		/// Variable <code>varLccurrentrow_popup</code> that represents the Service Studio local variable
		///  <code>currentrow_popup</code> <p>Description: </p>
		/// </summary>
		int varLccurrentrow_popup = 0;

		/// <summary>
		/// Variable <code>varLcCurriculumLeadIdSelected</code> that represents the Service Studio local
		///  variable <code>CurriculumLeadIdSelected</code> <p>Description: </p>
		/// </summary>
		int varLcCurriculumLeadIdSelected = 0;

		/// <summary>
		/// Variable <code>varLcTeamIdSelected</code> that represents the Service Studio local variable
		///  <code>TeamIdSelected</code> <p>Description: </p>
		/// </summary>
		int varLcTeamIdSelected = 0;

		/// <summary>
		/// Variable <code>varLcGroupIdSelected</code> that represents the Service Studio local variable
		///  <code>GroupIdSelected</code> <p>Description: </p>
		/// </summary>
		int varLcGroupIdSelected = 0;

		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance74
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance74;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;
		/// <summary>
		/// Variable ThemeProvider_wtBreadcrumb
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon.WBlkBreadCrumb ThemeProvider_wtBreadcrumb;
		/// <summary>
		/// Variable (wt_Link58) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link58;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container88;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container84;
		/// <summary>
		/// Variable "True" if the Widget wt_If55
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If55T;

		/// <summary>
		/// Variable "True" if the Widget wt_If55
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If55F;
		protected OutSystems.HubEdition.WebWidgets.Container wtFilter;
		protected OutSystems.HubEdition.WebWidgets.Container wtWrapperContent;
		protected OutSystems.HubEdition.WebWidgets.Container wtCurriculumLead;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container45;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container76;
		private RLCurriculumLeadStringStringStringBooleanRecordList _ssListRecordsCurriculumLeadsList = new RLCurriculumLeadStringStringStringBooleanRecordList();
		public RLCurriculumLeadStringStringStringBooleanRecordList ssListRecordsCurriculumLeadsList {
			get {
				return _ssListRecordsCurriculumLeadsList; 
			}
			set {
				_ssListRecordsCurriculumLeadsList = value;
				wtListRecordsCurriculumLeads.DataSource = value;
				ssListRecordsCurriculumLeadsListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecordsCurriculumLeads;
		public ArrayList wtListRecordsCurriculumLeads_storage = new ArrayList();
		protected bool ssListRecordsCurriculumLeadsList_notUsedYet = true;
		protected bool ssListRecordsCurriculumLeadsListDoDataBind;
		protected bool ssListRecordsCurriculumLeadsListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container17;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container42;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container73;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		protected OutSystems.HubEdition.WebWidgets.Container wtTeam;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;
		/// <summary>
		/// Variable "True" if the Widget wt_If51
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If51T;

		/// <summary>
		/// Variable "True" if the Widget wt_If51
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If51F;
		protected OutSystems.HubEdition.WebWidgets.Container wtFilter2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;
		private RLTeamStringStringStringBooleanRecordList _ssListRecordsTeamsList = new RLTeamStringStringStringBooleanRecordList();
		public RLTeamStringStringStringBooleanRecordList ssListRecordsTeamsList {
			get {
				return _ssListRecordsTeamsList; 
			}
			set {
				_ssListRecordsTeamsList = value;
				wtListRecordsTeams.DataSource = value;
				ssListRecordsTeamsListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecordsTeams;
		public ArrayList wtListRecordsTeams_storage = new ArrayList();
		protected bool ssListRecordsTeamsList_notUsedYet = true;
		protected bool ssListRecordsTeamsListDoDataBind;
		protected bool ssListRecordsTeamsListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container43;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container52;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		protected OutSystems.HubEdition.WebWidgets.Container wtCourse;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		/// <summary>
		/// Variable "True" if the Widget wt_If70
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If70T;

		/// <summary>
		/// Variable "True" if the Widget wt_If70
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If70F;
		protected OutSystems.HubEdition.WebWidgets.Container wtFilter3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container46;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox60ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox60 = new SelectRtWidget();
		RLStringRecordList Rt_wt_ComboBox60_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container49;
		private RLGroupStringStringStringBooleanRecordList _ssListRecordsCoursesList = new RLGroupStringStringStringBooleanRecordList();
		public RLGroupStringStringStringBooleanRecordList ssListRecordsCoursesList {
			get {
				return _ssListRecordsCoursesList; 
			}
			set {
				_ssListRecordsCoursesList = value;
				wtListRecordsCourses.DataSource = value;
				ssListRecordsCoursesListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecordsCourses;
		public ArrayList wtListRecordsCourses_storage = new ArrayList();
		protected bool ssListRecordsCoursesList_notUsedYet = true;
		protected bool ssListRecordsCoursesListDoDataBind;
		protected bool ssListRecordsCoursesListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container78;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container69;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container80;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtileftValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtileftValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtitopValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtitopValidatorType;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon.WBlkBreadCrumb.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkCCSessionActionsFloatingPanel.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkPopup_Notes.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("IcOz76lGiUaF70zBiTnCVw", "CCSessionStep2_Edit");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "IcOz76lGiUaF70zBiTnCVw", "CCSessionStep2_Edit");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "IcOz76lGiUaF70zBiTnCVw", "CCSessionStep2_Edit");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "IcOz76lGiUaF70zBiTnCVw", "CCSessionStep2_Edit");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "IcOz76lGiUaF70zBiTnCVw", "CCSessionStep2_Edit");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnCCSessionStep2_Edit() {
		}


		int resUserCheck_outParamPermissionType = 0;
		RLCurriculumLeadStringStringStringBooleanRecordList queryResGetAllCurriculumLeadsByCluster_outParamList = new RLCurriculumLeadStringStringStringBooleanRecordList();
		int queryResGetAllCurriculumLeadsByCluster_outParamCount = 0;
		RLClusterCCSessionRecordList queryResGetCCSessionById_outParamList = new RLClusterCCSessionRecordList();
		int queryResGetCCSessionById_outParamCount = 0;
		RLTeamStringStringStringBooleanRecordList queryResGetTeams_outParamList = new RLTeamStringStringStringBooleanRecordList();
		int queryResGetTeams_outParamCount = 0;
		RLGroupStringStringStringBooleanRecordList queryResGetCourses_outParamList = new RLGroupStringStringStringBooleanRecordList();
		int queryResGetCourses_outParamCount = 0;
		RLStringRecordList queryResGetSiteList_outParamList = new RLStringRecordList();
		int queryResGetSiteList_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("tAo+Eq5dL0aZHIgxzvoqww")).ssId, out resUserCheck_outParamPermissionType);
			if ((resUserCheck_outParamPermissionType!=ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId)) {
				// Destination = ExternalURL

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				}

			} else {
				if ((inParamCCSessionId==BuiltInFunction.NullIdentifier())) {
					// Destination = CCSession_List

					if (OSPage.IsAjaxRequest) {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
							if (OSPage.IsAjaxRequest) {
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								Server.Transfer("CCSession_List.aspx");
							}
							return;

						}
					} else {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "GTbqPMKqekWIOtQ9zqHlVQ";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSession_List"] = screenParameters;
							if (OSPage.IsAjaxRequest) {
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CCSession_List.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								Server.Transfer("CCSession_List.aspx");
							}
							return;

						}
					}

				} else {
					// Query datasetGetCCSessionById
					int datasetGetCCSessionById_maxRecords = 1;
					if (datasetGetCCSessionById_maxRecords < 1) datasetGetCCSessionById_maxRecords = 1;
					queryResGetCCSessionById_outParamList = FuncssPreparation.datasetGetCCSessionById(heContext, datasetGetCCSessionById_maxRecords, IterationMultiplicity.Never, out queryResGetCCSessionById_outParamCount, inParamCCSessionId
					);
					// Query QueryGetAllCurriculumLeadsByCluster
					int QueryGetAllCurriculumLeadsByCluster_maxRecords = Math.Max(wtListRecordsCurriculumLeads.StartIndex + wtListRecordsCurriculumLeads.LineCount + 1, 0);
					queryResGetAllCurriculumLeadsByCluster_outParamList = FuncssPreparation.QueryGetAllCurriculumLeadsByCluster(heContext, QueryGetAllCurriculumLeadsByCluster_maxRecords, IterationMultiplicity.Multiple, out queryResGetAllCurriculumLeadsByCluster_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
					// Query QueryGetTeams
					int QueryGetTeams_maxRecords = Math.Max(wtListRecordsTeams.StartIndex + wtListRecordsTeams.LineCount + 1, 0);
					queryResGetTeams_outParamList = FuncssPreparation.QueryGetTeams(heContext, QueryGetTeams_maxRecords, IterationMultiplicity.Multiple, out queryResGetTeams_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
					// Query QueryGetSiteList
					int QueryGetSiteList_maxRecords = 0;
					queryResGetSiteList_outParamList = FuncssPreparation.QueryGetSiteList(heContext, QueryGetSiteList_maxRecords, IterationMultiplicity.Multiple, out queryResGetSiteList_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId
					);
					// Query QueryGetCourses
					int QueryGetCourses_maxRecords = Math.Max(wtListRecordsCourses.StartIndex + wtListRecordsCourses.LineCount + 1, 0);
					queryResGetCourses_outParamList = FuncssPreparation.QueryGetCourses(heContext, QueryGetCourses_maxRecords, IterationMultiplicity.Multiple, out queryResGetCourses_outParamCount, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId
					, inParamCCSessionId
					, BuiltInFunction.NullDate().ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo)
					, "Active"
					, ((int) Global.SiteProperties["RAG_Session_MaxDays_Alert"])
					, ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("OvSWJ8Xk3UO89FkRkmpfCg")).ssLogType
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssSite
					);

				}

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "CCSessionStep2_Edit.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "CCSessionStep2_Edit.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamCCSessionId!=0)) {
				parameters.Add(new Pair<string, string>("CCSessionId", HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "CCSessionStep2_Edit", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "CCSessionStep2_Edit", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance74 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance74");
			wt_Container28 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container28");
			ThemeProvider_wtBreadcrumb = (proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon.WBlkBreadCrumb) FindControl("ThemeProvider_wtBreadcrumb");
			wt_Link58 = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wt_Link58");
			wt_Container88 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container88");
			wt_Container18 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container18");
			wt_Container84 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container84");
			wtFilter = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtFilter");
			wtWrapperContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtWrapperContent");
			wtCurriculumLead = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtCurriculumLead");
			wt_Container45 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container45");
			wt_Container76 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container76");
			wtListRecordsCurriculumLeads = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtListRecordsCurriculumLeads");
			wtListRecordsCurriculumLeads.StartIndexExpression = () => 0;
			wtListRecordsCurriculumLeads.LineCountExpression = () => 50;
			wtListRecordsCurriculumLeads.EmptyMessageExpression = () => "No items to show...";
			wtTeam = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtTeam");
			wt_Container32 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container32");
			wtFilter2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtFilter2");
			wt_Container7 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container7");
			wtListRecordsTeams = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtListRecordsTeams");
			wtListRecordsTeams.StartIndexExpression = () => 0;
			wtListRecordsTeams.LineCountExpression = () => 1000;
			wtCourse = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtCourse");
			wt_Container12 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container12");
			wtFilter3 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtFilter3");
			wt_Container46 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container46");
			wt_Container49 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container49");
			wtListRecordsCourses = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtListRecordsCourses");
			wtListRecordsCourses.StartIndexExpression = () => 0;
			wtListRecordsCourses.LineCountExpression = () => 1000;
			wt_Container33 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container33");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance15") {
				return ThemeProvider_wt_WebBlockInstance74.wtHelpUpdate.FindControl("wt_WebBlockInstance15");
			}
			if (id == "wt_Container28") {
				return ThemeProvider_wt_WebBlockInstance74.wtHeaderActions.FindControl("wt_Container28");
			}
			if (id == "ThemeProvider_wtBreadcrumb") {
				return ThemeProvider_wt_WebBlockInstance74.wtHeaderActions.FindControl("ThemeProvider_wtBreadcrumb");
			}
			if (id == "wt_Link58") {
				return ThemeProvider_wtBreadcrumb.wtLevel1.FindControl("wt_Link58");
			}
			if (id == "wt_Container88") {
				return ThemeProvider_wtBreadcrumb.wtLevel1.FindControl("wt_Container88");
			}
			if (id == "RichWidgets_wt_WebBlockInstance59") {
				return ThemeProvider_wtBreadcrumb.wtLevel1.FindControl("RichWidgets_wt_WebBlockInstance59");
			}
			if (id == "wt_InlineExpression34") {
				return ThemeProvider_wtBreadcrumb.wtLevel1.FindControl("wt_InlineExpression34");
			}
			if (id == "wt_Container18") {
				return ThemeProvider_wtBreadcrumb.wtLevel2.FindControl("wt_Container18");
			}
			if (id == "RichWidgets_wt_WebBlockInstance26") {
				return ThemeProvider_wtBreadcrumb.wtLevel2.FindControl("RichWidgets_wt_WebBlockInstance26");
			}
			if (id == "wt_InlineExpression35") {
				return ThemeProvider_wtBreadcrumb.wtLevel2.FindControl("wt_InlineExpression35");
			}
			if (id == "RichWidgets_wt_WebBlockInstance41") {
				return ThemeProvider_wt_WebBlockInstance74.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance41");
			}
			if (id == "wt_InlineExpression56") {
				return ThemeProvider_wt_WebBlockInstance74.wtTitle.FindControl("wt_InlineExpression56");
			}
			if (id == "wt_Container84") {
				return ThemeProvider_wt_WebBlockInstance74.wtTitle.FindControl("wt_Container84");
			}
			if (id == "wt_InlineExpression24") {
				return ThemeProvider_wt_WebBlockInstance74.wtTitle.FindControl("wt_InlineExpression24");
			}
			if (id == "wt_WebBlockInstance63") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_WebBlockInstance63");
			}
			if (id == "wt_If55") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_If55");
			}
			if (id == "wt_If55T") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_If55T");
			}
			if (id == "wtFilter") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtFilter");
			}
			if (id == "RichWidgets_wt_WebBlockInstance36") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance36");
			}
			if (id == "wt_InlineExpression50") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_InlineExpression50");
			}
			if (id == "wt_If55F") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_If55F");
			}
			if (id == "wtWrapperContent") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtWrapperContent");
			}
			if (id == "wtCurriculumLead") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtCurriculumLead");
			}
			if (id == "wt_Container45") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Container45");
			}
			if (id == "wt_Text54") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Text54");
			}
			if (id == "wt_Container76") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Container76");
			}
			if (id == "wtListRecordsCurriculumLeads") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtListRecordsCurriculumLeads");
			}
			if (id == "wtTeam") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtTeam");
			}
			if (id == "wt_Container32") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Container32");
			}
			if (id == "wt_Text44") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Text44");
			}
			if (id == "wt_If51") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_If51");
			}
			if (id == "wt_If51T") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_If51T");
			}
			if (id == "wtFilter2") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtFilter2");
			}
			if (id == "RichWidgets_wt_WebBlockInstance83") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance83");
			}
			if (id == "wt_InlineExpression81") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_InlineExpression81");
			}
			if (id == "wt_If51F") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_If51F");
			}
			if (id == "wt_Container7") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Container7");
			}
			if (id == "wtListRecordsTeams") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtListRecordsTeams");
			}
			if (id == "wtCourse") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtCourse");
			}
			if (id == "wt_Container12") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Container12");
			}
			if (id == "wt_Text75") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Text75");
			}
			if (id == "wt_If70") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_If70");
			}
			if (id == "wt_If70T") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_If70T");
			}
			if (id == "wtFilter3") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtFilter3");
			}
			if (id == "RichWidgets_wt_WebBlockInstance38") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance38");
			}
			if (id == "wt_InlineExpression39") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_InlineExpression39");
			}
			if (id == "wt_If70F") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_If70F");
			}
			if (id == "wt_Container46") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Container46");
			}
			if (id == "wt_ComboBox60") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_ComboBox60");
			}
			if (id == "wt_Container49") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Container49");
			}
			if (id == "wtListRecordsCourses") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtListRecordsCourses");
			}
			if (id == "wtPopupNotes") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtPopupNotes");
			}
			if (id == "wt_Container33") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wt_Container33");
			}
			if (id == "wtileft") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtileft");
			}
			if (id == "wtitop") {
				return ThemeProvider_wt_WebBlockInstance74.wtMainContent.FindControl("wtitop");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSessionStep2_Edit"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamCCSessionId = (int) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CCSessionStep2_Edit"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["CCSessionId"] != null) {
						inParamCCSessionId = Convert.ToInt32(Request.QueryString["CCSessionId"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["CCSessionId"] != null) {
						inParamCCSessionId = Convert.ToInt32(Request.Form["CCSessionId"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssListRecordsCurriculumLeadsListDoDataBind = true;
				ssListRecordsTeamsListDoDataBind = true;
				ssListRecordsCoursesListDoDataBind = true;
				Title = (((queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssId==BuiltInFunction.NullIdentifier())) ?("New CCSession"):("Edit CCSession")); Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CCSessionStep2_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowCaseConference.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotCaseConferencingUser("CaseConferencingUser role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("IcOz76lGiUaF70zBiTnCVw"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		/// <summary>
		/// Action <code>CommandNotesTeam_Open</code> that represents the Service Studio screen action
		///  <code>NotesTeam_Open</code> <p> Description: </p>
		/// </summary>
		private bool CommandNotesTeam_Open(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcshow = true; // show = True
				varLcTeamIdSelected = getWtListRecordsTeamsList().CurrentRec.ssENTeam.ssId; // TeamIdSelected = ListRecordsTeams.List.Current.Team.Id
				varLcGroupIdSelected = BuiltInFunction.NullIdentifier(); // GroupIdSelected = NullIdentifier
				varLcCurriculumLeadIdSelected = BuiltInFunction.NullIdentifier(); // CurriculumLeadIdSelected = NullIdentifier
				// Refresh Widget (wtPopupNotes)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtPopupNotes"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandNotesCV_Open</code> that represents the Service Studio screen action
		///  <code>NotesCV_Open</code> <p> Description: </p>
		/// </summary>
		private bool CommandNotesCV_Open(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcshow = true; // show = True
				varLccurrentrow_popup = getWtListRecordsCurriculumLeadsList().CurrentRowNumber; // currentrow_popup = ListRecordsCurriculumLeads.List.CurrentRowNumber
				varLcCurriculumLeadIdSelected = getWtListRecordsCurriculumLeadsList().CurrentRec.ssENCurriculumLead.ssId; // CurriculumLeadIdSelected = ListRecordsCurriculumLeads.List.Current.CurriculumLead.Id
				varLcTeamIdSelected = BuiltInFunction.NullIdentifier(); // TeamIdSelected = NullIdentifier
				varLcGroupIdSelected = BuiltInFunction.NullIdentifier(); // GroupIdSelected = NullIdentifier
				// Refresh Widget (wtPopupNotes)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtPopupNotes"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandFilterTeam</code> that represents the Service Studio screen action
		///  <code>FilterTeam</code> <p> Description: </p>
		/// </summary>
		private bool CommandFilterTeam(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// ClearFilter
				if ((((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId==getWtListRecordsTeamsList().CurrentRec.ssENTeam.ssId)) {
					RCCaseConferencingSession_FilterRecord CompID_Aux_2 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
					CompID_Aux_2.ssSTCaseConferencingSession_Filter.ssTeamId = BuiltInFunction.NullIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_2; // CaseConferecingSession.CaseConferencingSession_Filter.TeamId = NullIdentifier

				} else {
					RCCaseConferencingSession_FilterRecord CompID_Aux_3 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
					CompID_Aux_3.ssSTCaseConferencingSession_Filter.ssTeamId = getWtListRecordsTeamsList().CurrentRec.ssENTeam.ssId;
					Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_3; // CaseConferecingSession.CaseConferencingSession_Filter.TeamId = ListRecordsTeams.List.Current.Team.Id

				}
				RCCaseConferencingSession_FilterRecord CompID_Aux_4 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
				CompID_Aux_4.ssSTCaseConferencingSession_Filter.ssSite = "All";
				Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_4; // CaseConferecingSession.CaseConferencingSession_Filter.Site = "All"
				// Query QueryGetCourses
				{
					int QueryGetCourses_maxRecords = Math.Max(wtListRecordsCourses.StartIndex + wtListRecordsCourses.LineCount + 1, 0);
					queryResGetCourses_outParamList = FuncssPreparation.QueryGetCourses(heContext, QueryGetCourses_maxRecords, IterationMultiplicity.Multiple, out queryResGetCourses_outParamCount, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId
					, inParamCCSessionId
					, BuiltInFunction.NullDate().ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo)
					, "Active"
					, ((int) Global.SiteProperties["RAG_Session_MaxDays_Alert"])
					, ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("OvSWJ8Xk3UO89FkRkmpfCg")).ssLogType
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssSite
					);
				}
				// Query QueryGetSiteList
				{
					int QueryGetSiteList_maxRecords = 0;
					queryResGetSiteList_outParamList = FuncssPreparation.QueryGetSiteList(heContext, QueryGetSiteList_maxRecords, IterationMultiplicity.Multiple, out queryResGetSiteList_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId
					);
				}
				// Refresh Widget (wtWrapperContent)
				ssListRecordsCurriculumLeadsListDoDataBind = true;
				ssListRecordsTeamsListDoDataBind = true;
				ssListRecordsCoursesListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWrapperContent, "None", StoreViewState);
				// Refresh Widget (wtFilter)
				((OSPageViewState) Page).AjaxRefresh(wtFilter, "None", StoreViewState);
				// Refresh Widget (ThemeProvider_wtBreadcrumb)
				((OSPageViewState) Page).AjaxRefresh(ThemeProvider_wtBreadcrumb, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandNotesCourse_Open</code> that represents the Service Studio screen action
		///  <code>NotesCourse_Open</code> <p> Description: </p>
		/// </summary>
		private bool CommandNotesCourse_Open(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				varLcshow = true; // show = True
				varLccurrentrow_popup = getWtListRecordsCurriculumLeadsList().CurrentRowNumber; // currentrow_popup = ListRecordsCurriculumLeads.List.CurrentRowNumber
				varLcGroupIdSelected = getWtListRecordsCoursesList().CurrentRec.ssENGroup.ssId; // GroupIdSelected = ListRecordsCourses.List.Current.Group.Id
				varLcTeamIdSelected = BuiltInFunction.NullIdentifier(); // TeamIdSelected = NullIdentifier
				varLcCurriculumLeadIdSelected = BuiltInFunction.NullIdentifier(); // CurriculumLeadIdSelected = NullIdentifier
				// Refresh Widget (wtPopupNotes)
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtPopupNotes"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query QueryGetAllCurriculumLeadsByCluster
				{
					int QueryGetAllCurriculumLeadsByCluster_maxRecords = Math.Max(wtListRecordsCurriculumLeads.StartIndex + wtListRecordsCurriculumLeads.LineCount + 1, 0);
					queryResGetAllCurriculumLeadsByCluster_outParamList = FuncssPreparation.QueryGetAllCurriculumLeadsByCluster(heContext, QueryGetAllCurriculumLeadsByCluster_maxRecords, IterationMultiplicity.Multiple, out queryResGetAllCurriculumLeadsByCluster_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
				}
				// Query QueryGetTeams
				{
					int QueryGetTeams_maxRecords = Math.Max(wtListRecordsTeams.StartIndex + wtListRecordsTeams.LineCount + 1, 0);
					queryResGetTeams_outParamList = FuncssPreparation.QueryGetTeams(heContext, QueryGetTeams_maxRecords, IterationMultiplicity.Multiple, out queryResGetTeams_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
				}
				// Query QueryGetCourses
				{
					int QueryGetCourses_maxRecords = Math.Max(wtListRecordsCourses.StartIndex + wtListRecordsCourses.LineCount + 1, 0);
					queryResGetCourses_outParamList = FuncssPreparation.QueryGetCourses(heContext, QueryGetCourses_maxRecords, IterationMultiplicity.Multiple, out queryResGetCourses_outParamCount, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId
					, inParamCCSessionId
					, BuiltInFunction.NullDate().ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo)
					, "Active"
					, ((int) Global.SiteProperties["RAG_Session_MaxDays_Alert"])
					, ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("OvSWJ8Xk3UO89FkRkmpfCg")).ssLogType
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssSite
					);
				}
				// Refresh Widget (wtWrapperContent)
				ssListRecordsCurriculumLeadsListDoDataBind = true;
				ssListRecordsTeamsListDoDataBind = true;
				ssListRecordsCoursesListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWrapperContent, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandGoToStaffView</code> that represents the Service Studio screen action
		///  <code>GoToStaffView</code> <p> Description: </p>
		/// </summary>
		private bool CommandGoToStaffView(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Destination = StaffView

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "j8jDU90qoUqC4OOZCvawmQ";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add(getWtListRecordsCoursesList().CurrentRec.ssENGroup.ssGroupName);
						screenParameters.Add(inParamCCSessionId);
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_StaffView"] = screenParameters;
						string sURLQuery = "CourseCode=" + System.Web.HttpUtility.UrlEncode(getWtListRecordsCoursesList().CurrentRec.ssENGroup.ssGroupName) + "&" +
						 "SessionID=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId));
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "StaffView.aspx" + sURLQuery;
						((OSPageViewState) Page).RedirectLocation = sURL;
						return false;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "j8jDU90qoUqC4OOZCvawmQ";
						ArrayList screenParameters = new ArrayList();
						screenParameters.Add(getWtListRecordsCoursesList().CurrentRec.ssENGroup.ssGroupName);
						screenParameters.Add(inParamCCSessionId);
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_StaffView"] = screenParameters;
						Server.Transfer("StaffView.aspx");
						return false;

					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnSiteChange</code> that represents the Service Studio screen action
		///  <code>OnSiteChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnSiteChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query QueryGetCourses
				{
					int QueryGetCourses_maxRecords = Math.Max(wtListRecordsCourses.StartIndex + wtListRecordsCourses.LineCount + 1, 0);
					queryResGetCourses_outParamList = FuncssPreparation.QueryGetCourses(heContext, QueryGetCourses_maxRecords, IterationMultiplicity.Multiple, out queryResGetCourses_outParamCount, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId
					, inParamCCSessionId
					, BuiltInFunction.NullDate().ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo)
					, "Active"
					, ((int) Global.SiteProperties["RAG_Session_MaxDays_Alert"])
					, ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("OvSWJ8Xk3UO89FkRkmpfCg")).ssLogType
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssSite
					);
				}
				// Refresh Widget (wtListRecordsCourses)
				ssListRecordsCoursesListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListRecordsCourses, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvCheckCourse: VarsBag {
			public bool inParamIsSelected;
			public RLCCSessionCourseRecordList queryResGetCCSessionCoursesBySessionId_outParamList = new RLCCSessionCourseRecordList();
			public int queryResGetCCSessionCoursesBySessionId_outParamCount = 0;

			public int resCreateOrUpdateCCSessionCourse_outParamId = 0;

			public lcvCheckCourse(bool inParamIsSelected) {
				this.inParamIsSelected = inParamIsSelected;
			}
		}
		/// <summary>
		/// Action <code>CommandCheckCourse</code> that represents the Service Studio screen action
		///  <code>CheckCourse</code> <p> Description: </p>
		/// </summary>
		private bool CommandCheckCourse(HeContext heContext, bool inParamIsSelected) {
			CheckPermissions(heContext);
			lcvCheckCourse localVars = new lcvCheckCourse(inParamIsSelected);
			try {
				// Query datasetGetCCSessionCoursesBySessionId
				int datasetGetCCSessionCoursesBySessionId_maxRecords = 0;
				localVars.queryResGetCCSessionCoursesBySessionId_outParamList = FuncCommandCheckCourse.datasetGetCCSessionCoursesBySessionId(heContext, datasetGetCCSessionCoursesBySessionId_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetCCSessionCoursesBySessionId_outParamCount, inParamCCSessionId
				, getWtListRecordsCoursesList().CurrentRec.ssENGroup.ssId
				);
				// (checked)
				if (localVars.inParamIsSelected) {
					localVars.queryResGetCCSessionCoursesBySessionId_outParamList.CurrentRec.ssENCCSessionCourse.ssSessionId = inParamCCSessionId; // GetCCSessionCoursesBySessionId.List.Current.CCSessionCourse.SessionId = CCSessionId
					localVars.queryResGetCCSessionCoursesBySessionId_outParamList.CurrentRec.ssENCCSessionCourse.ssGroupId = getWtListRecordsCoursesList().CurrentRec.ssENGroup.ssId; // GetCCSessionCoursesBySessionId.List.Current.CCSessionCourse.GroupId = ListRecordsCourses.List.Current.Group.Id
					localVars.queryResGetCCSessionCoursesBySessionId_outParamList.CurrentRec.ssENCCSessionCourse.ssCreatedAt = BuiltInFunction.CurrDateTime(); // GetCCSessionCoursesBySessionId.List.Current.CCSessionCourse.CreatedAt = CurrDateTime
					localVars.queryResGetCCSessionCoursesBySessionId_outParamList.CurrentRec.ssENCCSessionCourse.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // GetCCSessionCoursesBySessionId.List.Current.CCSessionCourse.CreatedBy = UserID
					localVars.queryResGetCCSessionCoursesBySessionId_outParamList.CurrentRec.ssENCCSessionCourse.ssEndDate = BuiltInFunction.CurrDateTime(); // GetCCSessionCoursesBySessionId.List.Current.CCSessionCourse.EndDate = CurrDateTime

				} else {
					localVars.queryResGetCCSessionCoursesBySessionId_outParamList.CurrentRec.ssENCCSessionCourse.ssEndDate = BuiltInFunction.NullDate(); // GetCCSessionCoursesBySessionId.List.Current.CCSessionCourse.EndDate = NullDate

				}
				// CreateOrUpdateCCSessionCourse
				ExtendedActions.CreateOrUpdateCCSessionCourse(heContext, localVars.queryResGetCCSessionCoursesBySessionId_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetCCSessionCoursesBySessionId_outParamList.CurrentRec, out localVars.resCreateOrUpdateCCSessionCourse_outParamId);
				// Query QueryGetAllCurriculumLeadsByCluster
				{
					int QueryGetAllCurriculumLeadsByCluster_maxRecords = Math.Max(wtListRecordsCurriculumLeads.StartIndex + wtListRecordsCurriculumLeads.LineCount + 1, 0);
					queryResGetAllCurriculumLeadsByCluster_outParamList = FuncssPreparation.QueryGetAllCurriculumLeadsByCluster(heContext, QueryGetAllCurriculumLeadsByCluster_maxRecords, IterationMultiplicity.Multiple, out queryResGetAllCurriculumLeadsByCluster_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
				}
				// Query QueryGetTeams
				{
					int QueryGetTeams_maxRecords = Math.Max(wtListRecordsTeams.StartIndex + wtListRecordsTeams.LineCount + 1, 0);
					queryResGetTeams_outParamList = FuncssPreparation.QueryGetTeams(heContext, QueryGetTeams_maxRecords, IterationMultiplicity.Multiple, out queryResGetTeams_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
				}
				// Query QueryGetCourses
				{
					int QueryGetCourses_maxRecords = Math.Max(wtListRecordsCourses.StartIndex + wtListRecordsCourses.LineCount + 1, 0);
					queryResGetCourses_outParamList = FuncssPreparation.QueryGetCourses(heContext, QueryGetCourses_maxRecords, IterationMultiplicity.Multiple, out queryResGetCourses_outParamCount, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId
					, inParamCCSessionId
					, BuiltInFunction.NullDate().ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo)
					, "Active"
					, ((int) Global.SiteProperties["RAG_Session_MaxDays_Alert"])
					, ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("OvSWJ8Xk3UO89FkRkmpfCg")).ssLogType
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssSite
					);
				}
				// Refresh Widget (wtWrapperContent)
				ssListRecordsCurriculumLeadsListDoDataBind = true;
				ssListRecordsTeamsListDoDataBind = true;
				ssListRecordsCoursesListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWrapperContent, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnNotify2</code> that represents the Service Studio screen action
		///  <code>OnNotify2</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify2(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvCheckTeam: VarsBag {
			public bool inParamIsSelected;
			public int resCreateOrUpdateCCSessionTeam_outParamId = 0;

			public RLCCSessionTeamRecordList queryResGetCCSessionTeamsBySessionId_outParamList = new RLCCSessionTeamRecordList();
			public int queryResGetCCSessionTeamsBySessionId_outParamCount = 0;

			public lcvCheckTeam(bool inParamIsSelected) {
				this.inParamIsSelected = inParamIsSelected;
			}
		}
		/// <summary>
		/// Action <code>CommandCheckTeam</code> that represents the Service Studio screen action
		///  <code>CheckTeam</code> <p> Description: </p>
		/// </summary>
		private bool CommandCheckTeam(HeContext heContext, bool inParamIsSelected) {
			CheckPermissions(heContext);
			lcvCheckTeam localVars = new lcvCheckTeam(inParamIsSelected);
			try {
				// Query datasetGetCCSessionTeamsBySessionId
				int datasetGetCCSessionTeamsBySessionId_maxRecords = 0;
				localVars.queryResGetCCSessionTeamsBySessionId_outParamList = FuncCommandCheckTeam.datasetGetCCSessionTeamsBySessionId(heContext, datasetGetCCSessionTeamsBySessionId_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetCCSessionTeamsBySessionId_outParamCount, inParamCCSessionId
				, getWtListRecordsTeamsList().CurrentRec.ssENTeam.ssId
				);
				// Checked
				if (localVars.inParamIsSelected) {
					localVars.queryResGetCCSessionTeamsBySessionId_outParamList.CurrentRec.ssENCCSessionTeam.ssSessionId = inParamCCSessionId; // GetCCSessionTeamsBySessionId.List.Current.CCSessionTeam.SessionId = CCSessionId
					localVars.queryResGetCCSessionTeamsBySessionId_outParamList.CurrentRec.ssENCCSessionTeam.ssTeamId = getWtListRecordsTeamsList().CurrentRec.ssENTeam.ssId; // GetCCSessionTeamsBySessionId.List.Current.CCSessionTeam.TeamId = ListRecordsTeams.List.Current.Team.Id
					localVars.queryResGetCCSessionTeamsBySessionId_outParamList.CurrentRec.ssENCCSessionTeam.ssEndDate = BuiltInFunction.CurrDateTime(); // GetCCSessionTeamsBySessionId.List.Current.CCSessionTeam.EndDate = CurrDateTime

				} else {
					localVars.queryResGetCCSessionTeamsBySessionId_outParamList.CurrentRec.ssENCCSessionTeam.ssSessionId = inParamCCSessionId; // GetCCSessionTeamsBySessionId.List.Current.CCSessionTeam.SessionId = CCSessionId
					localVars.queryResGetCCSessionTeamsBySessionId_outParamList.CurrentRec.ssENCCSessionTeam.ssTeamId = getWtListRecordsTeamsList().CurrentRec.ssENTeam.ssId; // GetCCSessionTeamsBySessionId.List.Current.CCSessionTeam.TeamId = ListRecordsTeams.List.Current.Team.Id
					localVars.queryResGetCCSessionTeamsBySessionId_outParamList.CurrentRec.ssENCCSessionTeam.ssEndDate = BuiltInFunction.NullDate(); // GetCCSessionTeamsBySessionId.List.Current.CCSessionTeam.EndDate = NullDate

				}
				// CreateOrUpdateCCSessionTeam
				ExtendedActions.CreateOrUpdateCCSessionTeam(heContext, localVars.queryResGetCCSessionTeamsBySessionId_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetCCSessionTeamsBySessionId_outParamList.CurrentRec, out localVars.resCreateOrUpdateCCSessionTeam_outParamId);
				// Query QueryGetTeams
				{
					int QueryGetTeams_maxRecords = Math.Max(wtListRecordsTeams.StartIndex + wtListRecordsTeams.LineCount + 1, 0);
					queryResGetTeams_outParamList = FuncssPreparation.QueryGetTeams(heContext, QueryGetTeams_maxRecords, IterationMultiplicity.Multiple, out queryResGetTeams_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
				}
				// Query QueryGetAllCurriculumLeadsByCluster
				{
					int QueryGetAllCurriculumLeadsByCluster_maxRecords = Math.Max(wtListRecordsCurriculumLeads.StartIndex + wtListRecordsCurriculumLeads.LineCount + 1, 0);
					queryResGetAllCurriculumLeadsByCluster_outParamList = FuncssPreparation.QueryGetAllCurriculumLeadsByCluster(heContext, QueryGetAllCurriculumLeadsByCluster_maxRecords, IterationMultiplicity.Multiple, out queryResGetAllCurriculumLeadsByCluster_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
				}
				// Refresh Widget (wtWrapperContent)
				ssListRecordsCurriculumLeadsListDoDataBind = true;
				ssListRecordsTeamsListDoDataBind = true;
				ssListRecordsCoursesListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWrapperContent, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandFilterCurriculumLead</code> that represents the Service Studio screen action
		///  <code>FilterCurriculumLead</code> <p> Description: </p>
		/// </summary>
		private bool CommandFilterCurriculumLead(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// ClearFilter
				if ((((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId==getWtListRecordsCurriculumLeadsList().CurrentRec.ssENCurriculumLead.ssId)) {
					RCCaseConferencingSession_FilterRecord CompID_Aux_5 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
					CompID_Aux_5.ssSTCaseConferencingSession_Filter.ssCurriculumLeadId = BuiltInFunction.NullIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_5; // CaseConferecingSession.CaseConferencingSession_Filter.CurriculumLeadId = NullIdentifier
					RCCaseConferencingSession_FilterRecord CompID_Aux_6 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
					CompID_Aux_6.ssSTCaseConferencingSession_Filter.ssTeamId = BuiltInFunction.NullIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_6; // CaseConferecingSession.CaseConferencingSession_Filter.TeamId = NullIdentifier

				} else {
					RCCaseConferencingSession_FilterRecord CompID_Aux_7 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
					CompID_Aux_7.ssSTCaseConferencingSession_Filter.ssCurriculumLeadId = getWtListRecordsCurriculumLeadsList().CurrentRec.ssENCurriculumLead.ssId;
					Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_7; // CaseConferecingSession.CaseConferencingSession_Filter.CurriculumLeadId =
					// ListRecordsCurriculumLeads.List.Current.CurriculumLead.Id
					RCCaseConferencingSession_FilterRecord CompID_Aux_8 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
					CompID_Aux_8.ssSTCaseConferencingSession_Filter.ssTeamId = BuiltInFunction.NullIdentifier();
					Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_8; // CaseConferecingSession.CaseConferencingSession_Filter.TeamId = NullIdentifier

				}
				RCCaseConferencingSession_FilterRecord CompID_Aux_9 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
				CompID_Aux_9.ssSTCaseConferencingSession_Filter.ssSite = "All";
				Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_9; // CaseConferecingSession.CaseConferencingSession_Filter.Site = "All"
				// Query QueryGetTeams
				{
					int QueryGetTeams_maxRecords = Math.Max(wtListRecordsTeams.StartIndex + wtListRecordsTeams.LineCount + 1, 0);
					queryResGetTeams_outParamList = FuncssPreparation.QueryGetTeams(heContext, QueryGetTeams_maxRecords, IterationMultiplicity.Multiple, out queryResGetTeams_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
				}
				// Query QueryGetCourses
				{
					int QueryGetCourses_maxRecords = Math.Max(wtListRecordsCourses.StartIndex + wtListRecordsCourses.LineCount + 1, 0);
					queryResGetCourses_outParamList = FuncssPreparation.QueryGetCourses(heContext, QueryGetCourses_maxRecords, IterationMultiplicity.Multiple, out queryResGetCourses_outParamCount, ENGroupTypeEntity.GetRecordByKey(ObjectKey.Parse("9FaAjbptnEmG__faEcZ2ww")).ssId
					, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId
					, inParamCCSessionId
					, BuiltInFunction.NullDate().ToString(FormatInfo.GetOutputDateFormatString(), FormatInfo.defaultHeCultureInfo)
					, "Active"
					, ((int) Global.SiteProperties["RAG_Session_MaxDays_Alert"])
					, ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("OvSWJ8Xk3UO89FkRkmpfCg")).ssLogType
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssSite
					);
				}
				// Query QueryGetSiteList
				{
					int QueryGetSiteList_maxRecords = 0;
					queryResGetSiteList_outParamList = FuncssPreparation.QueryGetSiteList(heContext, QueryGetSiteList_maxRecords, IterationMultiplicity.Multiple, out queryResGetSiteList_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId
					, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId
					);
				}
				// Refresh Widget (wtWrapperContent)
				ssListRecordsCurriculumLeadsListDoDataBind = true;
				ssListRecordsTeamsListDoDataBind = true;
				ssListRecordsCoursesListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtWrapperContent, "None", StoreViewState);
				// Refresh Widget (wtFilter)
				((OSPageViewState) Page).AjaxRefresh(wtFilter, "None", StoreViewState);
				// Refresh Widget (ThemeProvider_wtBreadcrumb)
				((OSPageViewState) Page).AjaxRefresh(ThemeProvider_wtBreadcrumb, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvCheckCurriculumLead: VarsBag {
			public bool inParamIsSelected;
			public int resCreateOrUpdateCCSessionCurriculumLead_outParamId = 0;

			public RLCCSessionCurriculumLeadRecordList queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList = new RLCCSessionCurriculumLeadRecordList();
			public int queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamCount = 0;

			public lcvCheckCurriculumLead(bool inParamIsSelected) {
				this.inParamIsSelected = inParamIsSelected;
			}
		}
		/// <summary>
		/// Action <code>CommandCheckCurriculumLead</code> that represents the Service Studio screen action
		///  <code>CheckCurriculumLead</code> <p> Description: </p>
		/// </summary>
		private bool CommandCheckCurriculumLead(HeContext heContext, bool inParamIsSelected) {
			CheckPermissions(heContext);
			lcvCheckCurriculumLead localVars = new lcvCheckCurriculumLead(inParamIsSelected);
			try {
				// Query datasetGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe
				int datasetGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_maxRecords = 0;
				localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList = FuncCommandCheckCurriculumLead.datasetGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe(heContext, datasetGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamCount, inParamCCSessionId
				, getWtListRecordsCurriculumLeadsList().CurrentRec.ssENCurriculumLead.ssId
				);
				// Checked
				if (localVars.inParamIsSelected) {
					localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssSessionId = inParamCCSessionId; // GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List.Current.CCSessionCurriculumLead.SessionId = CCSessionId
					localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssCurriculumLead = getWtListRecordsCurriculumLeadsList().CurrentRec.ssENCurriculumLead.ssId; // GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List.Current.CCSessionCurriculumLead.CurriculumLead =
					// ListRecordsCurriculumLeads.List.Current.CurriculumLead.Id
					localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssCreatedAt = BuiltInFunction.CurrDateTime(); // GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List.Current.CCSessionCurriculumLead.CreatedAt = CurrDateTime
					localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List.Current.CCSessionCurriculumLead.CreatedBy = UserID
					localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssEndDate = BuiltInFunction.CurrDateTime(); // GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List.Current.CCSessionCurriculumLead.EndDate = CurrDateTime

				} else {
					localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssSessionId = inParamCCSessionId; // GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List.Current.CCSessionCurriculumLead.SessionId = CCSessionId
					localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssCurriculumLead = getWtListRecordsCurriculumLeadsList().CurrentRec.ssENCurriculumLead.ssId; // GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List.Current.CCSessionCurriculumLead.CurriculumLead =
					// ListRecordsCurriculumLeads.List.Current.CurriculumLead.Id
					localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList.CurrentRec.ssENCCSessionCurriculumLead.ssEndDate = BuiltInFunction.NullDate(); // GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List.Current.CCSessionCurriculumLead.EndDate = NullDate

				}
				// CreateOrUpdateCCSessionCurriculumLead
				ExtendedActions.CreateOrUpdateCCSessionCurriculumLead(heContext, localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe_outParamList.CurrentRec, out localVars.resCreateOrUpdateCCSessionCurriculumLead_outParamId);
				// Query QueryGetAllCurriculumLeadsByCluster
				{
					int QueryGetAllCurriculumLeadsByCluster_maxRecords = Math.Max(wtListRecordsCurriculumLeads.StartIndex + wtListRecordsCurriculumLeads.LineCount + 1, 0);
					queryResGetAllCurriculumLeadsByCluster_outParamList = FuncssPreparation.QueryGetAllCurriculumLeadsByCluster(heContext, QueryGetAllCurriculumLeadsByCluster_maxRecords, IterationMultiplicity.Multiple, out queryResGetAllCurriculumLeadsByCluster_outParamCount, queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId
					, inParamCCSessionId
					, BuiltInFunction.NullDate()
					, "Active"
					);
				}
				// Refresh Widget (wtCurriculumLead)
				ssListRecordsCurriculumLeadsListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtCurriculumLead, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance74 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance74_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance15 Functions
		/// </summary>
		public void webBlck_WebBlockInstance15_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate widget = (ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate) sender;
		}
		/// <summary>
		/// wt_Container28 Functions
		/// </summary>
		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container28_setInlineAttributes(sender, e);
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "color: white;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container28_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			return true;
		}

		/// <summary>
		/// ThemeProvider_wtBreadcrumb Functions
		/// </summary>
		public void ThemeProvider_webBlckBreadcrumb_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon.WBlkBreadCrumb widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowCommon.WBlkBreadCrumb) sender;
			widget.inParamSeparator = RsseSpaceThemeProvider.DefaultValues.ReferenceWebFlow_Common2_ReferenceWebBlock_BreadCrumb_Variables_ReferenceSerializableInputParameter_Separator;
		}
		/// <summary>
		/// wt_Link58 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link58)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link58)</returns>
		public string lnk_Link58_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("CCSessionId", System.Web.HttpUtility.UrlEncode(Convert.ToString(inParamCCSessionId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "CCSession_Edit", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link58)
		/// </summary>
		/// <returns>title of the Link (wt_Link58)</returns>
		public string
		lnk_Link58_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link58)
		/// </summary>
		/// <returns>The Visible State of wt_Link58</returns>
		public bool lnk_Link58_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link58)
		/// </summary>
		/// <returns>The Enabled State of wt_Link58</returns>
		public bool lnk_Link58_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container88 Functions
		/// </summary>
		public void cnt_Container88_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container88_setInlineAttributes(sender, e);
		}
		public string cnt_Container88_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container88_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container88)
		/// </summary>
		/// <returns>The Visible State of wt_Container88</returns>
		public bool cnt_Container88_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance59 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance59_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Iqs32xXjXE+ICbLVRQVIzg")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression34 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 1ry+dEpeyE6cXUkCXrqmzQ) Expression:
		///  GetCCSessionById.List.Current.CCSession.Description
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression34() {
			return queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssDescription;
		}
		/// <summary>
		/// wt_Container18 Functions
		/// </summary>
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container18_setInlineAttributes(sender, e);
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container18_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance26 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance26_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("2DFx6X0sh0GYKNklWr5t1A")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression35 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = H8ujerhlkEOfC+QfI82MBA) Expression:
		///  GetCCSessionById.List.Current.Cluster.ClusterDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression35() {
			return queryResGetCCSessionById_outParamList.CurrentRec.ssENCluster.ssClusterDescription;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance41 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance41_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Iqs32xXjXE+ICbLVRQVIzg")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression56 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = pLT9v89nGU2b1rQz_i3UOA) Expression: "Case Conferencing Session
		///  for cluster " + GetCCSessionById.List.Current.Cluster.ClusterDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression56() {
			return ("Case Conferencing Session for cluster " +queryResGetCCSessionById_outParamList.CurrentRec.ssENCluster.ssClusterDescription);
		}
		/// <summary>
		/// wt_Container84 Functions
		/// </summary>
		public void cnt_Container84_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container84_setInlineAttributes(sender, e);
		}
		public string cnt_Container84_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-left:35px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container84_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container84)
		/// </summary>
		/// <returns>The Visible State of wt_Container84</returns>
		public bool cnt_Container84_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression24 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = XErgUUdBhkGA3G4NZWZ9eg) Expression:
		///  GetCCSessionById.List.Current.CCSession.Description
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression24() {
			return queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssDescription;
		}
		/// <summary>
		/// wt_WebBlockInstance63 Functions
		/// </summary>
		public void webBlck_WebBlockInstance63_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkCCSessionActionsFloatingPanel widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkCCSessionActionsFloatingPanel) sender;
			widget.inParamCCSessionId = inParamCCSessionId;
			widget.inParamStepId = 2;
			widget.inParamIsStaffView = false;
			widget.inParamCourseCode = "";
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance63
		/// </summary>
		public void webBlck_WebBlockInstance63_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandOnNotify2(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_If55 Functions
		/// </summary>
		bool if_wt_If55_hasRun=false;
		bool if_wt_If55_evalResult;
		public bool if_wt_If55() {
			if (if_wt_If55_hasRun) {
				if_wt_If55_hasRun = false;
				return if_wt_If55_evalResult;
			}
			if_wt_If55_hasRun = true;
			if_wt_If55_evalResult = false;
			return if_wt_If55_evalResult;
		}

		/// <summary>
		/// wtFilter Functions
		/// </summary>
		public void cntFilter_onDataBinding(object sender, System.EventArgs e) {
			cntFilter_setInlineAttributes(sender, e);
		}
		public string cntFilter_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntFilter_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtFilter)
		/// </summary>
		/// <returns>The Visible State of wtFilter</returns>
		public bool cntFilter_isVisible() {
			return ((((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId!=BuiltInFunction.NullIdentifier()) || (((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId!=BuiltInFunction.NullIdentifier()));
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance36 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance36_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("A+DPAqLWak2cJEH_xuxb2A")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression50 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = MHRUrmUfFkimMCzQ5aAuMQ) Expression: internalIf + internalIf +
		///  internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression50() {
			return (((((((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId!=BuiltInFunction.NullIdentifier())) ?(("CurriculumLead: " +Functions.ssGetCurriculumLead(heContext, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId).ssENCurriculumLead.ssDescription)):("")) + (((((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId!=BuiltInFunction.NullIdentifier())) ?(" , "):(""))) + (((((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId!=BuiltInFunction.NullIdentifier())) ?(("Team Lead " +Functions.ssGetTeam(heContext, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId).ssENTeam.ssDescription)):("")));
		}
		/// <summary>
		/// wtWrapperContent Functions
		/// </summary>
		public void cntWrapperContent_onDataBinding(object sender, System.EventArgs e) {
			cntWrapperContent_setInlineAttributes(sender, e);
		}
		public string cntWrapperContent_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntWrapperContent_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtWrapperContent)
		/// </summary>
		/// <returns>The Visible State of wtWrapperContent</returns>
		public bool cntWrapperContent_isVisible() {
			return true;
		}

		/// <summary>
		/// wtCurriculumLead Functions
		/// </summary>
		public void cntCurriculumLead_onDataBinding(object sender, System.EventArgs e) {
			cntCurriculumLead_setInlineAttributes(sender, e);
		}
		public string cntCurriculumLead_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntCurriculumLead_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCurriculumLead)
		/// </summary>
		/// <returns>The Visible State of wtCurriculumLead</returns>
		public bool cntCurriculumLead_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container45 Functions
		/// </summary>
		public void cnt_Container45_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container45_setInlineAttributes(sender, e);
		}
		public string cnt_Container45_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container45_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container45)
		/// </summary>
		/// <returns>The Visible State of wt_Container45</returns>
		public bool cnt_Container45_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container76 Functions
		/// </summary>
		public void cnt_Container76_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container76_setInlineAttributes(sender, e);
		}
		public string cnt_Container76_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container76_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container76)
		/// </summary>
		/// <returns>The Visible State of wt_Container76</returns>
		public bool cnt_Container76_isVisible() {
			return true;
		}

		/// <summary>
		/// wtListRecordsCurriculumLeads Functions
		/// </summary>
		public void recListListRecordsCurriculumLeads_onDataBinding(object sender, System.EventArgs e) {
			// widget wtListRecordsCurriculumLeads
			ssListRecordsCurriculumLeadsList = queryResGetAllCurriculumLeadsByCluster_outParamList;
			ssListRecordsCurriculumLeadsListDoDataBind = false;
			ssListRecordsCurriculumLeadsListDataBound = true;
		}
		public void recListListRecordsCurriculumLeads_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecordsCurriculumLeadsList.Length > 0) {
					ssListRecordsCurriculumLeadsList.CurrentRec = ssListRecordsCurriculumLeadsList[ssListRecordsCurriculumLeadsList.CurrentRowNumber];
				}
				if (ssListRecordsCurriculumLeadsList.Length > e.SelectedIndex) {
					ssListRecordsCurriculumLeadsList.CurrentRec = ssListRecordsCurriculumLeadsList[e.SelectedIndex];
					ssListRecordsCurriculumLeadsList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecordsCurriculumLeads_Store(object dataItem, int index) {
			RCCurriculumLeadStringStringStringBooleanRecord tmprec = (RCCurriculumLeadStringStringStringBooleanRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENCurriculumLead.ssId == 0?(object) null: tmprec.ssENCurriculumLead.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENCurriculumLead.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENCurriculumLead.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true
			}
			))));
			if (index < wtListRecordsCurriculumLeads_storage.Count) {
				wtListRecordsCurriculumLeads_storage[index] = tmpFields;
			} else {
				wtListRecordsCurriculumLeads_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecordsCurriculumLeads_Restore() {

			#region fetch ssListRecordsCurriculumLeadsList.

			// Read the needed fields of ssListRecordsCurriculumLeadsList from storewtListRecordsCurriculumLeads_list
			ssListRecordsCurriculumLeadsList = new RLCurriculumLeadStringStringStringBooleanRecordList();
			ArrayList storewtListRecordsCurriculumLeads_list;
			storewtListRecordsCurriculumLeads_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecordsCurriculumLeads_list", null);
			if (storewtListRecordsCurriculumLeads_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecordsCurriculumLeads_list in storewtListRecordsCurriculumLeads_list) {
					if (tmpFieldswtListRecordsCurriculumLeads_list != null) {
						// Aux current record variable
						RCCurriculumLeadStringStringStringBooleanRecord tmpAuxCurrentRecordwtListRecordsCurriculumLeads_list = new RCCurriculumLeadStringStringStringBooleanRecord(null);
						tmpAuxCurrentRecordwtListRecordsCurriculumLeads_list.ssENCurriculumLead.ssId = (int) (tmpFieldswtListRecordsCurriculumLeads_list[0] == null ? 0: tmpFieldswtListRecordsCurriculumLeads_list[0]);

						tmpAuxCurrentRecordwtListRecordsCurriculumLeads_list.ssENCurriculumLead.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsCurriculumLeads_list[1]);

						tmpAuxCurrentRecordwtListRecordsCurriculumLeads_list.ssENCurriculumLead.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsCurriculumLeads_list[2]);

						ssListRecordsCurriculumLeadsList.Append(tmpAuxCurrentRecordwtListRecordsCurriculumLeads_list);
					}
				}
			}
			ssListRecordsCurriculumLeadsList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecordsCurriculumLeadsList runtime properties state.


			if (storewtListRecordsCurriculumLeads_list.Count > 0) {
				ssListRecordsCurriculumLeadsList.RestoreRecordListState(storewtListRecordsCurriculumLeads_list.Count - 1, false);
			} else {
				ssListRecordsCurriculumLeadsList.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecordsCurriculumLeads_storage = storewtListRecordsCurriculumLeads_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecordsCurriculumLeads_Clear(object sender, EventArgs e) {
			wtListRecordsCurriculumLeads_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecordsCurriculumLeads_Rebuild(int startIndex, int lineCount) {
			if (ssListRecordsCurriculumLeadsList.Length != -1) {
				wtListRecordsCurriculumLeads_storage.Clear();
				for (int i=startIndex; i<ssListRecordsCurriculumLeadsList.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecordsCurriculumLeads_Store(ssListRecordsCurriculumLeadsList.Data[i], wtListRecordsCurriculumLeads_storage.Count);
				}
			}
		}
		public void recListListRecordsCurriculumLeads_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecordsCurriculumLeads widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLCurriculumLeadStringStringStringBooleanRecordList getWtListRecordsCurriculumLeadsList() {
			if (ssListRecordsCurriculumLeadsListDoDataBind) {
				recListListRecordsCurriculumLeads_onDataBinding(this, null);
			}

			return ssListRecordsCurriculumLeadsList;
		}
		/// <summary>
		/// wt_Container17 Functions
		/// </summary>
		public void cnt_Container17_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container17_setInlineAttributes(sender, e);
		}
		public string cnt_Container17_setInlineAttributes(object sender, System.EventArgs e) {
			((WebControl) sender).CssClass = (((getWtListRecordsCurriculumLeadsList().CurrentRec.ssENCurriculumLead.ssId==((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId)) ?("SelectedCard"):("CardCurriculumLead"));
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = ((((getWtListRecordsCurriculumLeadsList().CurrentRec.ssENCurriculumLead.ssId==((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId) || (((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId==BuiltInFunction.NullIdentifier()))) ?("opacity:1;"):("opacity:0.6;"));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container17_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container17)
		/// </summary>
		/// <returns>The Visible State of wt_Container17</returns>
		public bool cnt_Container17_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container42 Functions
		/// </summary>
		public void cnt_Container42_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container42_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container42_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container42_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container42
		/// </summary>
		public void cnt_Container42_AjaxClick(object sender, System.EventArgs e) {
			if (CommandFilterCurriculumLead(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container42)
		/// </summary>
		/// <returns>The Visible State of wt_Container42</returns>
		public bool cnt_Container42_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression72 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = p0vr2BX9jUWsCxt5TvZuLA) Expression: "(" +
		///  ListRecordsCurriculumLeads.List.Current.CurriculumLead.CurriculumLeadCode + ")" + "-"
		/// + ListRecordsCurriculumLeads.List.Current.CurriculumLead.Description
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression72() {
			return (((("(" +getWtListRecordsCurriculumLeadsList().CurrentRec.ssENCurriculumLead.ssCurriculumLeadCode) + ")") + "-") +getWtListRecordsCurriculumLeadsList().CurrentRec.ssENCurriculumLead.ssDescription);
		}
		/// <summary>
		/// wt_Container73 Functions
		/// </summary>
		public void cnt_Container73_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container73_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container73_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("onclick", (((("document.getElementById(\'" +this.FindControl("wtileft").ClientID) + "\').value = $(this).parent().offset().left;\r\ndocument.getElementById(\'") +this.FindControl("wtitop").ClientID) + "\').value = $(this).parent().offset().top;").ToString());
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = (((getWtListRecordsCurriculumLeadsList().CurrentRec.ssSTString_3.ssValue== "")) ?("color:#DADADA;"):(""));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			((IAttributeAccessor) sender).SetAttribute("title", getWtListRecordsCurriculumLeadsList().CurrentRec.ssSTString_3.ssValue.ToString());
			if (!cnt_Container73_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container73
		/// </summary>
		public void cnt_Container73_AjaxClick(object sender, System.EventArgs e) {
			if (CommandNotesCV_Open(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container73)
		/// </summary>
		/// <returns>The Visible State of wt_Container73</returns>
		public bool cnt_Container73_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance40 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance40_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container23 Functions
		/// </summary>
		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container23_setInlineAttributes(sender, e);
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container23_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance25 Functions
		/// </summary>
		public void webBlck_WebBlockInstance25_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
			widget.inParamIsSelected = getWtListRecordsCurriculumLeadsList().CurrentRec.ssSTBoolean.ssValue;
			widget.inParamPercentage = ((((getWtListRecordsCurriculumLeadsList().CurrentRec.ssSTString_2.ssValue== "0") || (getWtListRecordsCurriculumLeadsList().CurrentRec.ssSTString_2.ssValue== ""))) ?(0M):((((decimal) BuiltInFunction.TextToDecimal(getWtListRecordsCurriculumLeadsList().CurrentRec.ssSTString.ssValue) /
			(decimal) BuiltInFunction.TextToDecimal(getWtListRecordsCurriculumLeadsList().CurrentRec.ssSTString_2.ssValue)) *100M)));
			widget.inParamText = (((getWtListRecordsCurriculumLeadsList().CurrentRec.ssSTString.ssValue+ " of ") +getWtListRecordsCurriculumLeadsList().CurrentRec.ssSTString_2.ssValue) + " Team Leads completed");
			widget.inParamVisibleCheckbox = true;
			widget.inParamEnabledCheckbox = (queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssEndDate==BuiltInFunction.NullDate());
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance25
		/// </summary>
		public void webBlck_WebBlockInstance25_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandCheckCurriculumLead(heContext
			, BuiltInFunction.IntegerToBoolean(BuiltInFunction.TextToInteger(Functions.rssespaceservicecenter_NotifyWidgetGetMessage(heContext))))) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wtTeam Functions
		/// </summary>
		public void cntTeam_onDataBinding(object sender, System.EventArgs e) {
			cntTeam_setInlineAttributes(sender, e);
		}
		public string cntTeam_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntTeam_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtTeam)
		/// </summary>
		/// <returns>The Visible State of wtTeam</returns>
		public bool cntTeam_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container32 Functions
		/// </summary>
		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container32_setInlineAttributes(sender, e);
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container32_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_If51 Functions
		/// </summary>
		bool if_wt_If51_hasRun=false;
		bool if_wt_If51_evalResult;
		public bool if_wt_If51() {
			if (if_wt_If51_hasRun) {
				if_wt_If51_hasRun = false;
				return if_wt_If51_evalResult;
			}
			if_wt_If51_hasRun = true;
			if_wt_If51_evalResult = (((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId!=BuiltInFunction.NullIdentifier());
			return if_wt_If51_evalResult;
		}

		/// <summary>
		/// wtFilter2 Functions
		/// </summary>
		public void cntFilter2_onDataBinding(object sender, System.EventArgs e) {
			cntFilter2_setInlineAttributes(sender, e);
		}
		public string cntFilter2_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntFilter2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtFilter2)
		/// </summary>
		/// <returns>The Visible State of wtFilter2</returns>
		public bool cntFilter2_isVisible() {
			return (((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId!=BuiltInFunction.NullIdentifier());
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance83 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance83_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("A+DPAqLWak2cJEH_xuxb2A")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression81 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = r8Iz6FkGlkWeAlGduiTUMA) Expression:
		///  GetCurriculumLead(CaseConferecingSession.CaseConferencingSession_Filter.CurriculumLeadId).Curriculu
		/// mLead.Description
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression81() {
			return Functions.ssGetCurriculumLead(heContext, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssCurriculumLeadId).ssENCurriculumLead.ssDescription;
		}
		/// <summary>
		/// wt_Container7 Functions
		/// </summary>
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container7_setInlineAttributes(sender, e);
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container7_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			return true;
		}

		/// <summary>
		/// wtListRecordsTeams Functions
		/// </summary>
		public void recListListRecordsTeams_onDataBinding(object sender, System.EventArgs e) {
			// widget wtListRecordsTeams
			ssListRecordsTeamsList = queryResGetTeams_outParamList;
			ssListRecordsTeamsListDoDataBind = false;
			ssListRecordsTeamsListDataBound = true;
		}
		public void recListListRecordsTeams_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecordsTeamsList.Length > 0) {
					ssListRecordsTeamsList.CurrentRec = ssListRecordsTeamsList[ssListRecordsTeamsList.CurrentRowNumber];
				}
				if (ssListRecordsTeamsList.Length > e.SelectedIndex) {
					ssListRecordsTeamsList.CurrentRec = ssListRecordsTeamsList[e.SelectedIndex];
					ssListRecordsTeamsList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecordsTeams_Store(object dataItem, int index) {
			RCTeamStringStringStringBooleanRecord tmprec = (RCTeamStringStringStringBooleanRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENTeam.ssId == 0?(object) null: tmprec.ssENTeam.ssId);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENTeam.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENTeam.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, true, true
			}
			))));
			if (index < wtListRecordsTeams_storage.Count) {
				wtListRecordsTeams_storage[index] = tmpFields;
			} else {
				wtListRecordsTeams_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecordsTeams_Restore() {

			#region fetch ssListRecordsTeamsList.

			// Read the needed fields of ssListRecordsTeamsList from storewtListRecordsTeams_list
			ssListRecordsTeamsList = new RLTeamStringStringStringBooleanRecordList();
			ArrayList storewtListRecordsTeams_list;
			storewtListRecordsTeams_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecordsTeams_list", null);
			if (storewtListRecordsTeams_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecordsTeams_list in storewtListRecordsTeams_list) {
					if (tmpFieldswtListRecordsTeams_list != null) {
						// Aux current record variable
						RCTeamStringStringStringBooleanRecord tmpAuxCurrentRecordwtListRecordsTeams_list = new RCTeamStringStringStringBooleanRecord(null);
						tmpAuxCurrentRecordwtListRecordsTeams_list.ssENTeam.ssId = (int) (tmpFieldswtListRecordsTeams_list[0] == null ? 0: tmpFieldswtListRecordsTeams_list[0]);

						tmpAuxCurrentRecordwtListRecordsTeams_list.ssENTeam.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsTeams_list[1]);

						tmpAuxCurrentRecordwtListRecordsTeams_list.ssENTeam.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsTeams_list[2]);

						ssListRecordsTeamsList.Append(tmpAuxCurrentRecordwtListRecordsTeams_list);
					}
				}
			}
			ssListRecordsTeamsList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecordsTeamsList runtime properties state.


			if (storewtListRecordsTeams_list.Count > 0) {
				ssListRecordsTeamsList.RestoreRecordListState(storewtListRecordsTeams_list.Count - 1, false);
			} else {
				ssListRecordsTeamsList.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecordsTeams_storage = storewtListRecordsTeams_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecordsTeams_Clear(object sender, EventArgs e) {
			wtListRecordsTeams_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecordsTeams_Rebuild(int startIndex, int lineCount) {
			if (ssListRecordsTeamsList.Length != -1) {
				wtListRecordsTeams_storage.Clear();
				for (int i=startIndex; i<ssListRecordsTeamsList.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecordsTeams_Store(ssListRecordsTeamsList.Data[i], wtListRecordsTeams_storage.Count);
				}
			}
		}
		public void recListListRecordsTeams_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecordsTeams widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLTeamStringStringStringBooleanRecordList getWtListRecordsTeamsList() {
			if (ssListRecordsTeamsListDoDataBind) {
				recListListRecordsTeams_onDataBinding(this, null);
			}

			return ssListRecordsTeamsList;
		}
		/// <summary>
		/// wt_Container43 Functions
		/// </summary>
		public void cnt_Container43_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container43_setInlineAttributes(sender, e);
		}
		public string cnt_Container43_setInlineAttributes(object sender, System.EventArgs e) {
			((WebControl) sender).CssClass = (((getWtListRecordsTeamsList().CurrentRec.ssENTeam.ssId==((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId)) ?("SelectedCard"):("CardCurriculumLead"));
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = ((((getWtListRecordsTeamsList().CurrentRec.ssENTeam.ssId==((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId) || (((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId==BuiltInFunction.NullIdentifier()))) ?("opacity:1;"):("opacity:0.6;"));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container43_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container43)
		/// </summary>
		/// <returns>The Visible State of wt_Container43</returns>
		public bool cnt_Container43_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container52 Functions
		/// </summary>
		public void cnt_Container52_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container52_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container52_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container52_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container52
		/// </summary>
		public void cnt_Container52_AjaxClick(object sender, System.EventArgs e) {
			if (CommandFilterTeam(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container52)
		/// </summary>
		/// <returns>The Visible State of wt_Container52</returns>
		public bool cnt_Container52_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression4 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = BYEtCSTnr0e_X6nhhjm01A) Expression: "(" +
		///  ListRecordsTeams.List.Current.Team.TeamCode + ")" + "-"
		/// + ListRecordsTeams.List.Current.Team.Description
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression4() {
			return (((("(" +getWtListRecordsTeamsList().CurrentRec.ssENTeam.ssTeamCode) + ")") + "-") +getWtListRecordsTeamsList().CurrentRec.ssENTeam.ssDescription);
		}
		/// <summary>
		/// wt_Container8 Functions
		/// </summary>
		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container8_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("onclick", (((("document.getElementById(\'" +this.FindControl("wtileft").ClientID) + "\').value = $(this).parent().offset().left;\r\ndocument.getElementById(\'") +this.FindControl("wtitop").ClientID) + "\').value = $(this).parent().offset().top;").ToString());
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = (((getWtListRecordsTeamsList().CurrentRec.ssSTString_3.ssValue== "")) ?("color:#DADADA;"):(""));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			((IAttributeAccessor) sender).SetAttribute("title", getWtListRecordsTeamsList().CurrentRec.ssSTString_3.ssValue.ToString());
			if (!cnt_Container8_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container8
		/// </summary>
		public void cnt_Container8_AjaxClick(object sender, System.EventArgs e) {
			if (CommandNotesTeam_Open(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance87 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance87_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container29 Functions
		/// </summary>
		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container29_setInlineAttributes(sender, e);
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container29_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance82 Functions
		/// </summary>
		public void webBlck_WebBlockInstance82_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
			widget.inParamIsSelected = getWtListRecordsTeamsList().CurrentRec.ssSTBoolean.ssValue;
			widget.inParamPercentage = ((((getWtListRecordsTeamsList().CurrentRec.ssSTString_2.ssValue== "0") || (getWtListRecordsTeamsList().CurrentRec.ssSTString_2.ssValue== ""))) ?(0M):((((decimal) BuiltInFunction.TextToDecimal(getWtListRecordsTeamsList().CurrentRec.ssSTString.ssValue) /
			(decimal) BuiltInFunction.TextToDecimal(getWtListRecordsTeamsList().CurrentRec.ssSTString_2.ssValue)) *100M)));
			widget.inParamText = (((getWtListRecordsTeamsList().CurrentRec.ssSTString.ssValue+ " of ") +getWtListRecordsTeamsList().CurrentRec.ssSTString_2.ssValue) + " Courses completed");
			widget.inParamVisibleCheckbox = true;
			widget.inParamEnabledCheckbox = (queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssEndDate==BuiltInFunction.NullDate());
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance82
		/// </summary>
		public void webBlck_WebBlockInstance82_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandCheckTeam(heContext
			, BuiltInFunction.IntegerToBoolean(BuiltInFunction.TextToInteger(Functions.rssespaceservicecenter_NotifyWidgetGetMessage(heContext))))) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wtCourse Functions
		/// </summary>
		public void cntCourse_onDataBinding(object sender, System.EventArgs e) {
			cntCourse_setInlineAttributes(sender, e);
		}
		public string cntCourse_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntCourse_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCourse)
		/// </summary>
		/// <returns>The Visible State of wtCourse</returns>
		public bool cntCourse_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container12 Functions
		/// </summary>
		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container12_setInlineAttributes(sender, e);
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container12_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_If70 Functions
		/// </summary>
		bool if_wt_If70_hasRun=false;
		bool if_wt_If70_evalResult;
		public bool if_wt_If70() {
			if (if_wt_If70_hasRun) {
				if_wt_If70_hasRun = false;
				return if_wt_If70_evalResult;
			}
			if_wt_If70_hasRun = true;
			if_wt_If70_evalResult = (((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId!=BuiltInFunction.NullIdentifier());
			return if_wt_If70_evalResult;
		}

		/// <summary>
		/// wtFilter3 Functions
		/// </summary>
		public void cntFilter3_onDataBinding(object sender, System.EventArgs e) {
			cntFilter3_setInlineAttributes(sender, e);
		}
		public string cntFilter3_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cntFilter3_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtFilter3)
		/// </summary>
		/// <returns>The Visible State of wtFilter3</returns>
		public bool cntFilter3_isVisible() {
			return (((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId!=BuiltInFunction.NullIdentifier());
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance38 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance38_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("A+DPAqLWak2cJEH_xuxb2A")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression39 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = ETucgDTOWka+SKt7Hlb5ow) Expression:
		///  GetTeam(CaseConferecingSession.CaseConferencingSession_Filter.TeamId).Team.Description
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression39() {
			return Functions.ssGetTeam(heContext, ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssTeamId).ssENTeam.ssDescription;
		}
		/// <summary>
		/// wt_Container46 Functions
		/// </summary>
		public void cnt_Container46_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container46_setInlineAttributes(sender, e);
		}
		public string cnt_Container46_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container46_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container46)
		/// </summary>
		/// <returns>The Visible State of wt_Container46</returns>
		public bool cnt_Container46_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_ComboBox60 Functions
		/// </summary>
		public void sel_ComboBox60_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem("All", "__ossli_All"));
			if (Rt_wt_ComboBox60.SpecialListVal == "All")
			((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count - 1;
			RLStringRecordList Rt_wt_ComboBox60_reclist = queryResGetSiteList_outParamList;
			Rt_wt_ComboBox60_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox60_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox60_reclist.CurrentRec.ssSTString.ssValue, Rt_wt_ComboBox60_reclist.CurrentRec.ssSTString.ssValue));
					if (((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]).ssSTCaseConferencingSession_Filter.ssSite == Convert.ToString(Rt_wt_ComboBox60_reclist.CurrentRec.ssSTString.ssValue)) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox60_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox60_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wt_ComboBox60
		/// </summary>
		public void sel_ComboBox60_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnSiteChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void sel_ComboBox60_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox60.SpecialListVal = dropDown.SelectedValue.Substring(8);
				RCCaseConferencingSession_FilterRecord CompID_Aux_10 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
				CompID_Aux_10.ssSTCaseConferencingSession_Filter.ssSite = "";
				Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_10;
			}
			else {
				Rt_wt_ComboBox60.SpecialListVal = "";
				try {
					RCCaseConferencingSession_FilterRecord CompID_Aux_11 = ((RCCaseConferencingSession_FilterRecord) Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"]);
					CompID_Aux_11.ssSTCaseConferencingSession_Filter.ssSite = Convert.ToString(dropDown.SelectedValue);
					Global.App.OsContext.Session["CaseConferencing.CaseConferecingSession"] = CompID_Aux_11;
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox60)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox60</returns>
		public bool sel_ComboBox60_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox60)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox60</returns>
		public bool sel_ComboBox60_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox60)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox60</returns>
		public bool sel_ComboBox60_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container49 Functions
		/// </summary>
		public void cnt_Container49_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container49_setInlineAttributes(sender, e);
		}
		public string cnt_Container49_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container49_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container49)
		/// </summary>
		/// <returns>The Visible State of wt_Container49</returns>
		public bool cnt_Container49_isVisible() {
			return true;
		}

		/// <summary>
		/// wtListRecordsCourses Functions
		/// </summary>
		public void recListListRecordsCourses_onDataBinding(object sender, System.EventArgs e) {
			// widget wtListRecordsCourses
			ssListRecordsCoursesList = queryResGetCourses_outParamList;
			ssListRecordsCoursesListDoDataBind = false;
			ssListRecordsCoursesListDataBound = true;
		}
		public void recListListRecordsCourses_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecordsCoursesList.Length > 0) {
					ssListRecordsCoursesList.CurrentRec = ssListRecordsCoursesList[ssListRecordsCoursesList.CurrentRowNumber];
				}
				if (ssListRecordsCoursesList.Length > e.SelectedIndex) {
					ssListRecordsCoursesList.CurrentRec = ssListRecordsCoursesList[e.SelectedIndex];
					ssListRecordsCoursesList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecordsCourses_Store(object dataItem, int index) {
			RCGroupStringStringStringBooleanRecord tmprec = (RCGroupStringStringStringBooleanRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENGroup.ssId == 0?(object) null: tmprec.ssENGroup.ssId);
			tmpFields.Add(tmprec.ssENGroup.ssGroupName == "" ?(object) null: tmprec.ssENGroup.ssGroupName);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENGroup.ChangedAttributes, new BitArray(new bool[] {
				true, true, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENGroup.OptimizedAttributes, new BitArray(new bool[] {
				false, false, true, true, true, true, true, true, true
			}
			))));
			if (index < wtListRecordsCourses_storage.Count) {
				wtListRecordsCourses_storage[index] = tmpFields;
			} else {
				wtListRecordsCourses_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecordsCourses_Restore() {

			#region fetch ssListRecordsCoursesList.

			// Read the needed fields of ssListRecordsCoursesList from storewtListRecordsCourses_list
			ssListRecordsCoursesList = new RLGroupStringStringStringBooleanRecordList();
			ArrayList storewtListRecordsCourses_list;
			storewtListRecordsCourses_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecordsCourses_list", null);
			if (storewtListRecordsCourses_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecordsCourses_list in storewtListRecordsCourses_list) {
					if (tmpFieldswtListRecordsCourses_list != null) {
						// Aux current record variable
						RCGroupStringStringStringBooleanRecord tmpAuxCurrentRecordwtListRecordsCourses_list = new RCGroupStringStringStringBooleanRecord(null);
						tmpAuxCurrentRecordwtListRecordsCourses_list.ssENGroup.ssId = (int) (tmpFieldswtListRecordsCourses_list[0] == null ? 0: tmpFieldswtListRecordsCourses_list[0]);

						tmpAuxCurrentRecordwtListRecordsCourses_list.ssENGroup.ssGroupName = (string) (tmpFieldswtListRecordsCourses_list[1] == null ? "": tmpFieldswtListRecordsCourses_list[1]);

						tmpAuxCurrentRecordwtListRecordsCourses_list.ssENGroup.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsCourses_list[2]);

						tmpAuxCurrentRecordwtListRecordsCourses_list.ssENGroup.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsCourses_list[3]);

						ssListRecordsCoursesList.Append(tmpAuxCurrentRecordwtListRecordsCourses_list);
					}
				}
			}
			ssListRecordsCoursesList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecordsCoursesList runtime properties state.


			if (storewtListRecordsCourses_list.Count > 0) {
				ssListRecordsCoursesList.RestoreRecordListState(storewtListRecordsCourses_list.Count - 1, false);
			} else {
				ssListRecordsCoursesList.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecordsCourses_storage = storewtListRecordsCourses_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecordsCourses_Clear(object sender, EventArgs e) {
			wtListRecordsCourses_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecordsCourses_Rebuild(int startIndex, int lineCount) {
			if (ssListRecordsCoursesList.Length != -1) {
				wtListRecordsCourses_storage.Clear();
				for (int i=startIndex; i<ssListRecordsCoursesList.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecordsCourses_Store(ssListRecordsCoursesList.Data[i], wtListRecordsCourses_storage.Count);
				}
			}
		}
		public void recListListRecordsCourses_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecordsCourses widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLGroupStringStringStringBooleanRecordList getWtListRecordsCoursesList() {
			if (ssListRecordsCoursesListDoDataBind) {
				recListListRecordsCourses_onDataBinding(this, null);
			}

			return ssListRecordsCoursesList;
		}
		/// <summary>
		/// wt_Container78 Functions
		/// </summary>
		public void cnt_Container78_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container78_setInlineAttributes(sender, e);
		}
		public string cnt_Container78_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container78_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container78)
		/// </summary>
		/// <returns>The Visible State of wt_Container78</returns>
		public bool cnt_Container78_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container69 Functions
		/// </summary>
		public void cnt_Container69_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container69_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container69_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container69_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container69
		/// </summary>
		public void cnt_Container69_AjaxClick(object sender, System.EventArgs e) {
			if (CommandGoToStaffView(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container69)
		/// </summary>
		/// <returns>The Visible State of wt_Container69</returns>
		public bool cnt_Container69_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression61 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = DDCRxR3beU2Rh2kiEqQWAA) Expression: "(" +
		///  ListRecordsCourses.List.Current.Group.GroupName + ")" + "-"
		/// + ListRecordsCourses.List.Current.Group.GroupDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression61() {
			return (((("(" +getWtListRecordsCoursesList().CurrentRec.ssENGroup.ssGroupName) + ")") + "-") +getWtListRecordsCoursesList().CurrentRec.ssENGroup.ssGroupDescription);
		}
		/// <summary>
		/// wt_Container5 Functions
		/// </summary>
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container5_setInlineAttributes(sender, e);
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("onclick", (((("document.getElementById(\'" +this.FindControl("wtileft").ClientID) + "\').value = $(this).parent().offset().left;\r\ndocument.getElementById(\'") +this.FindControl("wtitop").ClientID) + "\').value = $(this).parent().offset().top;").ToString());
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = (((getWtListRecordsCoursesList().CurrentRec.ssSTString_3.ssValue== "")) ?("color:#DADADA;"):(""));
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			((IAttributeAccessor) sender).SetAttribute("title", getWtListRecordsCoursesList().CurrentRec.ssSTString_3.ssValue.ToString());
			if (!cnt_Container5_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// AjaxClick event handler for widget wt_Container5
		/// </summary>
		public void cnt_Container5_AjaxClick(object sender, System.EventArgs e) {
			if (CommandNotesCourse_Open(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance65 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance65_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("aJhmQBcsXUKV6ol9A3EDEA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container80 Functions
		/// </summary>
		public void cnt_Container80_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container80_setInlineAttributes(sender, e);
		}
		public string cnt_Container80_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container80_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container80)
		/// </summary>
		/// <returns>The Visible State of wt_Container80</returns>
		public bool cnt_Container80_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance66 Functions
		/// </summary>
		public void webBlck_WebBlockInstance66_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkProgressBar) sender;
			widget.inParamIsSelected = getWtListRecordsCoursesList().CurrentRec.ssSTBoolean.ssValue;
			widget.inParamPercentage = ((((getWtListRecordsCoursesList().CurrentRec.ssSTString_2.ssValue== "0") || (getWtListRecordsCoursesList().CurrentRec.ssSTString_2.ssValue== ""))) ?(0M):((((decimal) BuiltInFunction.TextToDecimal(getWtListRecordsCoursesList().CurrentRec.ssSTString.ssValue) /
			(decimal) BuiltInFunction.TextToDecimal(getWtListRecordsCoursesList().CurrentRec.ssSTString_2.ssValue)) *100M)));
			widget.inParamText = (((getWtListRecordsCoursesList().CurrentRec.ssSTString.ssValue+ " out of ") +getWtListRecordsCoursesList().CurrentRec.ssSTString_2.ssValue) + " learners recently updated");
			widget.inParamVisibleCheckbox = true;
			widget.inParamEnabledCheckbox = (queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssEndDate==BuiltInFunction.NullDate());
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance66
		/// </summary>
		public void webBlck_WebBlockInstance66_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandCheckCourse(heContext
			, BuiltInFunction.IntegerToBoolean(BuiltInFunction.TextToInteger(Functions.rssespaceservicecenter_NotifyWidgetGetMessage(heContext))))) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wtPopupNotes Functions
		/// </summary>
		public void webBlckPopupNotes_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssCaseConferencing.Flows.FlowCaseConference.WBlkPopup_Notes widget = (ssCaseConferencing.Flows.FlowCaseConference.WBlkPopup_Notes) sender;
			widget.inParamSessionId = inParamCCSessionId;
			widget.inParamCurriculumLeadId = varLcCurriculumLeadIdSelected;
			widget.inParamTeamId = varLcTeamIdSelected;
			widget.inParamGroupId = varLcGroupIdSelected;
			widget.inParamVisible = varLcshow;
			widget.inParamtop = varLctop;
			widget.inParamleft = varLcleft;
		}
		/// <summary>
		/// AjaxNotify event handler for widget wtPopupNotes
		/// </summary>
		public void webBlckPopupNotes_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandOnNotify(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container33 Functions
		/// </summary>
		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container33_setInlineAttributes(sender, e);
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container33_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			return false;
		}

		/// <summary>
		/// wtileft Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtileft_input_value() {
			if ((0.0M!=varLcleft)) {
				return RuntimePlatformUtils.RemoveTrailingZeros(varLcleft.ToString("N", FormatInfo.InputNumber), FormatInfo.InputNumber);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtileft");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDecimalInputValidate, validate)) {
					return RuntimePlatformUtils.RemoveTrailingZeros(varLcleft.ToString("N", FormatInfo.InputNumber), FormatInfo.InputNumber);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtileft_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcleft = 0.0M; 
				} else {
					varLcleft = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDecimalInput(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcleft = 0.0M; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtileft)
		/// </summary>
		/// <returns>The Visible State of wtileft</returns>
		public bool inputwtileft_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtileft)
		/// </summary>
		/// <returns>The Enabled State of wtileft</returns>
		public bool inputwtileft_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtileft)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtileft</returns>
		public bool inputwtileft_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtitop Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtitop_input_value() {
			if ((0.0M!=varLctop)) {
				return RuntimePlatformUtils.RemoveTrailingZeros(varLctop.ToString("N", FormatInfo.InputNumber), FormatInfo.InputNumber);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtitop");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDecimalInputValidate, validate)) {
					return RuntimePlatformUtils.RemoveTrailingZeros(varLctop.ToString("N", FormatInfo.InputNumber), FormatInfo.InputNumber);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtitop_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLctop = 0.0M; 
				} else {
					varLctop = OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDecimalInput(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLctop = 0.0M; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtitop)
		/// </summary>
		/// <returns>The Visible State of wtitop</returns>
		public bool inputwtitop_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtitop)
		/// </summary>
		/// <returns>The Enabled State of wtitop</returns>
		public bool inputwtitop_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtitop)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtitop</returns>
		public bool inputwtitop_isMandatory() {
			return false;
		}



		public static class FuncCommandNotesTeam_Open {
		}
		public static class FuncCommandNotesCV_Open {
		}
		public static class FuncCommandFilterTeam {
		}
		public static class FuncCommandNotesCourse_Open {
		}
		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandGoToStaffView {
		}
		public static class FuncCommandOnSiteChange {
		}
		public static class FuncCommandCheckCourse {

			/// <summary>
			/// Query Function "GetCCSessionCoursesBySessionId" of Action "CheckCourse"
			/// </summary>
			public static RLCCSessionCourseRecordList datasetGetCCSessionCoursesBySessionId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCCSessionCourse.[ID] o1, ENCCSessionCourse.[SESSIONID] o2, ENCCSessionCourse.[GROUPID] o3, NULL o4, ENCCSessionCourse.[CREATEDAT] o5, ENCCSessionCourse.[CREATEDBY] o6, ENCCSessionCourse.[ENDDATE] o7");
				fromBuilder.Append(" FROM {CCSessionCourse} ENCCSessionCourse");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSessionCourse.[SESSIONID] = @qpinP) AND (ENCCSessionCourse.[SESSIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSessionCourse.[SESSIONID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENCCSessionCourse.[GROUPID] = @qpinP1) AND (ENCCSessionCourse.[GROUPID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENCCSessionCourse.[GROUPID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCCSessionCourseRecordList outParamList = new RLCCSessionCourseRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, true, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCCSessionCourseRecordList _tmp = new RLCCSessionCourseRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.CheckCourse.GetCCSessionCoursesBySessionId.List");
						outParamList = (RLCCSessionCourseRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.CheckCourse.GetCCSessionCoursesBySessionId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCCSessionCourseRecordList _tmp = new RLCCSessionCourseRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.CheckCourse.GetCCSessionCoursesBySessionId.List");
							outParamList = (RLCCSessionCourseRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.CheckCourse.GetCCSessionCoursesBySessionId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandOnNotify2 {
		}
		public static class FuncCommandCheckTeam {

			/// <summary>
			/// Query Function "GetCCSessionTeamsBySessionId" of Action "CheckTeam"
			/// </summary>
			public static RLCCSessionTeamRecordList datasetGetCCSessionTeamsBySessionId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCCSessionTeam.[ID] o1, ENCCSessionTeam.[SESSIONID] o2, ENCCSessionTeam.[TEAMID] o3, NULL o4, NULL o5, NULL o6, ENCCSessionTeam.[ENDDATE] o7");
				fromBuilder.Append(" FROM {CCSessionTeam} ENCCSessionTeam");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSessionTeam.[SESSIONID] = @qpinP) AND (ENCCSessionTeam.[SESSIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSessionTeam.[SESSIONID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENCCSessionTeam.[TEAMID] = @qpinP1) AND (ENCCSessionTeam.[TEAMID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENCCSessionTeam.[TEAMID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCCSessionTeamRecordList outParamList = new RLCCSessionTeamRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, true, true, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCCSessionTeamRecordList _tmp = new RLCCSessionTeamRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.CheckTeam.GetCCSessionTeamsBySessionId.List");
						outParamList = (RLCCSessionTeamRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.CheckTeam.GetCCSessionTeamsBySessionId.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCCSessionTeamRecordList _tmp = new RLCCSessionTeamRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.CheckTeam.GetCCSessionTeamsBySessionId.List");
							outParamList = (RLCCSessionTeamRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.CheckTeam.GetCCSessionTeamsBySessionId.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandFilterCurriculumLead {
		}
		public static class FuncCommandCheckCurriculumLead {

			/// <summary>
			/// Query Function "GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe" of Action "CheckCurriculumLead"
			/// </summary>
			public static RLCCSessionCurriculumLeadRecordList datasetGetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP, int qpinP1) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCCSessionCurriculumLead.[ID] o1, ENCCSessionCurriculumLead.[SESSIONID] o2, ENCCSessionCurriculumLead.[CURRICULUMLEAD] o3, NULL o4, ENCCSessionCurriculumLead.[CREATEDAT] o5, ENCCSessionCurriculumLead.[CREATEDBY] o6, ENCCSessionCurriculumLead.[ENDDATE] o7");
				fromBuilder.Append(" FROM {CCSessionCurriculumLead} ENCCSessionCurriculumLead");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSessionCurriculumLead.[SESSIONID] = @qpinP) AND (ENCCSessionCurriculumLead.[SESSIONID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSessionCurriculumLead.[SESSIONID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinP1 != 0) {
					whereBuilder.Append("((ENCCSessionCurriculumLead.[CURRICULUMLEAD] = @qpinP1) AND (ENCCSessionCurriculumLead.[CURRICULUMLEAD] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP1", DbType.Int32, qpinP1);
				} else {
					whereBuilder.Append("(ENCCSessionCurriculumLead.[CURRICULUMLEAD] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLCCSessionCurriculumLeadRecordList outParamList = new RLCCSessionCurriculumLeadRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, true, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLCCSessionCurriculumLeadRecordList _tmp = new RLCCSessionCurriculumLeadRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.CheckCurriculumLead.GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List");
						outParamList = (RLCCSessionCurriculumLeadRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.CheckCurriculumLead.GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLCCSessionCurriculumLeadRecordList _tmp = new RLCCSessionCurriculumLeadRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.CheckCurriculumLead.GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List");
							outParamList = (RLCCSessionCurriculumLeadRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.CheckCurriculumLead.GetCCSessionCurriculumLeadsByCurriculumLeadGetCCSe.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncssPreparation {

			private static void QueryGetAllCurriculumLeadsByClusterReadDB(ref RCCurriculumLeadStringStringStringBooleanRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENCurriculumLead.Read(r, ref index);
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssSTString.Read(r, ref index);
				rec.ssSTString_2.Read(r, ref index);
				rec.ssSTString_3.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetAllCurriculumLeadsByCluster" of Action "Preparation"
			/// </summary>
			public static RLCurriculumLeadStringStringStringBooleanRecordList QueryGetAllCurriculumLeadsByCluster(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstClusterId, int qpinSessionId, DateTime qpdaNullDate, string qpstEnrolementStatus) {
				// Query Iterations: Multiple {ListRecordsCurriculumLeads}
				// Refresh Query +UmFVXnzGEWNiuvBV+PJHw Iterations: Multiple {ListRecordsCurriculumLeads}
				// Refresh Query 0lmcLi29YUehPBNYY_sMTQ Iterations: Multiple {ListRecordsCurriculumLeads}
				// Refresh Query ucyvkhb8xEqhH8jd76yu_w Iterations: Multiple {ListRecordsCurriculumLeads}
				// Refresh Query J4fGFBPuU0Gzy2j6wTbyAQ Iterations: Multiple {ListRecordsCurriculumLeads}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpdaNullDate", DbType.DateTime, qpdaNullDate);
				sqlCmd.CreateParameter("@qpinSessionId", DbType.Int32, qpinSessionId);
				sqlCmd.CreateParameter("@qpstEnrolementStatus", DbType.String, qpstEnrolementStatus);
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				string advSql = "SELECT  {CurriculumLead}.[ID], {CurriculumLead}.[CURRICULUMLEADCODE], {CurriculumLead}.[DESCRIPTION], {CurriculumLead}.[CLUSTER], {CurriculumLead}.[PROSOLUTIONSID] ,   " +
				 "       (CASE WHEN  {CCSessionCurriculumLead}.[ID] IS NULL OR  {CCSessionCurriculumLead}.[ENDDATE] = @qpdaNullDate  THEN 0 ELSE 1 END),  " +
				 "       (SELECT COUNT(*) FROM  {CCSessionTeam} INNER JOIN  {Team} ON  {CCSessionTeam}.[TEAMID] =  {Team}.[ID] AND  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID] WHERE  {CCSessionTeam}.[SESSIONID] = @qpinSessionId  AND  {CCSessionTeam}.[ENDDATE] <> @qpdaNullDate ) as SessionTotal ,  " +
				 "       (SELECT COUNT( {Team}.[ID]) FROM  {Team} WHERE  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "                                                AND EXISTS (SELECT  {Student_Group}.[ID] FROM  {Student_Group} INNER JOIN  {Group} ON   {Student_Group}.[GROUPID] = {Group}.[ID] AND  {Team}.[ID] =  {Group}.[TEAM] AND  {Student_Group}.[ENROLMENTSTATUS] = @qpstEnrolementStatus   )  " +
				 "  " +
				 "        ) as CLTotal,  " +
				 "        {CCSessionCurriculumLead}.[NOTES]   " +
				 "FROM   {CurriculumLead}  " +
				 "LEFT JOIN  {CCSessionCurriculumLead} ON  {CurriculumLead}.[ID] =  {CCSessionCurriculumLead}.[CURRICULUMLEAD] AND  {CCSessionCurriculumLead}.[SESSIONID] = @qpinSessionId   " +
				 "WHERE  {CurriculumLead}.[CLUSTER] = @qpstClusterId   " +
				 "AND EXISTS ( SELECT  {Team}.[ID] FROM  {Team} WHERE  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID] )";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLCurriculumLeadStringStringStringBooleanRecordList outParamList = new RLCurriculumLeadStringStringStringBooleanRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetAllCurriculumLeadsByClusterReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[5];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					opt[2] = new BitArray(new bool[] {
						false
					}
					);
					opt[3] = new BitArray(new bool[] {
						false
					}
					);
					opt[4] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLCurriculumLeadStringStringStringBooleanRecordList _tmp = new RLCurriculumLeadStringStringStringBooleanRecordList();
						_tmp.AlternateReadDBMethod = QueryGetAllCurriculumLeadsByClusterReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetAllCurriculumLeadsByCluster.List");
							outParamList = (RLCurriculumLeadStringStringStringBooleanRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetAllCurriculumLeadsByCluster.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetAllCurriculumLeadsByCluster.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetAllCurriculumLeadsByCluster in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT {CurriculumLead}.* ,          (CASE WHEN {CCSessionCurriculumLead}.[Id] IS NULL OR {CCSessionCurriculumLead}.[EndDate] = @NullDate  THEN 0 ELSE 1 END),         (SELECT COUNT(*) FROM {CCSessionTeam} INNER JOIN {Team} ON {CCSessionTeam}.[TeamId] = {Team}.[Id] AND {Team}.[CurriculumLead] = {CurriculumLead}.[Id] WHERE {CCSessionTeam}.[SessionId] = @SessionId  AND {CCSessionTeam}.[EndDate] <> @NullDate ) as SessionTotal ,         (SELECT COUNT({Team}.[Id]) FROM {Team} WHERE {Team}.[CurriculumLead] = {CurriculumLead}.[Id]                                                  AND EXISTS (SELECT {Student_Group}.[Id] FROM {Student_Group} INNER JOIN {Group} ON  {Student_Group}.[GroupId] ={Group}.[Id] AND {Team}.[Id] = {Group}.[Team] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus   )            ) as CLTotal,         {CCSessionCurriculumLead}.[Notes]   FROM  {CurriculumLead}  LEFT JOIN {CCSessionCurriculumLead} ON {CurriculumLead}.[Id] = {CCSessionCurriculumLead}.[CurriculumLead] AND  ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetAllCurriculumLeadsByCluster in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT {CurriculumLead}.* ,          (CASE WHEN {CCSessionCurriculumLead}.[Id] IS NULL OR {CCSessionCurriculumLead}.[EndDate] = @NullDate  THEN 0 ELSE 1 END),         (SELECT COUNT(*) FROM {CCSessionTeam} INNER JOIN {Team} ON {CCSessionTeam}.[TeamId] = {Team}.[Id] AND {Team}.[CurriculumLead] = {CurriculumLead}.[Id] WHERE {CCSessionTeam}.[SessionId] = @SessionId  AND {CCSessionTeam}.[EndDate] <> @NullDate ) as SessionTotal ,         (SELECT COUNT({Team}.[Id]) FROM {Team} WHERE {Team}.[CurriculumLead] = {CurriculumLead}.[Id]                                                  AND EXISTS (SELECT {Student_Group}.[Id] FROM {Student_Group} INNER JOIN {Group} ON  {Student_Group}.[GroupId] ={Group}.[Id] AND {Team}.[Id] = {Group}.[Team] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus   )            ) as CLTotal,         {CCSessionCurriculumLead}.[Notes]   FROM  {CurriculumLead}  LEFT JOIN {CCSessionCurriculumLead} ON {CurriculumLead}.[Id] = {CCSessionCurriculumLead}.[CurriculumLead] AND  ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetAllCurriculumLeadsByCluster in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT {CurriculumLead}.* ,          (CASE WHEN {CCSessionCurriculumLead}.[Id] IS NULL OR {CCSessionCurriculumLead}.[EndDate] = @NullDate  THEN 0 ELSE 1 END),         (SELECT COUNT(*) FROM {CCSessionTeam} INNER JOIN {Team} ON {CCSessionTeam}.[TeamId] = {Team}.[Id] AND {Team}.[CurriculumLead] = {CurriculumLead}.[Id] WHERE {CCSessionTeam}.[SessionId] = @SessionId  AND {CCSessionTeam}.[EndDate] <> @NullDate ) as SessionTotal ,         (SELECT COUNT({Team}.[Id]) FROM {Team} WHERE {Team}.[CurriculumLead] = {CurriculumLead}.[Id]                                                  AND EXISTS (SELECT {Student_Group}.[Id] FROM {Student_Group} INNER JOIN {Group} ON  {Student_Group}.[GroupId] ={Group}.[Id] AND {Team}.[Id] = {Group}.[Team] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus   )            ) as CLTotal,         {CCSessionCurriculumLead}.[Notes]   FROM  {CurriculumLead}  LEFT JOIN {CCSessionCurriculumLead} ON {CurriculumLead}.[Id] = {CCSessionCurriculumLead}.[CurriculumLead] AND  ...): " + aqExcep.Message);
				}
			}

			private static void datasetGetCCSessionByIdReadDB(ref RCClusterCCSessionRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENCCSession.Read(r, ref index);
				rec.ssENCluster.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetCCSessionById" of Action "Preparation"
			/// </summary>
			public static RLClusterCCSessionRecordList datasetGetCCSessionById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENCCSession.[ID] o1, ENCCSession.[DESCRIPTION] o2, NULL o3, ENCCSession.[CLUSTERID] o4, NULL o5, ENCCSession.[ENDDATE] o6, NULL o7, NULL o8, NULL o9, NULL o10, ENCluster.[CLUSTERDESCRIPTION] o11, NULL o12, NULL o13, NULL o14, NULL o15");
				fromBuilder.Append(" FROM ({Cluster} ENCluster Inner JOIN {CCSession} ENCCSession ON (ENCCSession.[CLUSTERID] = ENCluster.[ID])) ");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENCCSession.[ID] = @qpinP) AND (ENCCSession.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENCCSession.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLClusterCCSessionRecordList outParamList = new RLClusterCCSessionRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetCCSessionByIdReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[2];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, false, true, false, true, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLClusterCCSessionRecordList _tmp = new RLClusterCCSessionRecordList();
					_tmp.AlternateReadDBMethod = datasetGetCCSessionByIdReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetCCSessionById.List");
						outParamList = (RLClusterCCSessionRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetCCSessionById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLClusterCCSessionRecordList _tmp = new RLClusterCCSessionRecordList();
						_tmp.AlternateReadDBMethod = datasetGetCCSessionByIdReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetCCSessionById.List");
							outParamList = (RLClusterCCSessionRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetCCSessionById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void QueryGetTeamsReadDB(ref RCTeamStringStringStringBooleanRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENTeam.Read(r, ref index);
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssSTString.Read(r, ref index);
				rec.ssSTString_2.Read(r, ref index);
				rec.ssSTString_3.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetTeams" of Action "Preparation"
			/// </summary>
			public static RLTeamStringStringStringBooleanRecordList QueryGetTeams(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstClusterId, int qpinCurriculumLeadId, int qpinSessionId, DateTime qpdaNulldate, string qpstEnrolementStatus) {
				// Query Iterations: Multiple {ListRecordsTeams}
				// Refresh Query g2PUPSaL_0WpePWhJ8Wr3w Iterations: Multiple {ListRecordsTeams}
				// Refresh Query Wxv1Ri2PSk+zqchO03_2xQ Iterations: Multiple {ListRecordsTeams}
				// Refresh Query fFBWLpyfBUOcjyiqFXokig Iterations: Multiple {ListRecordsTeams}
				// Refresh Query vczgxPgmxEqYdEf6LhmYQg Iterations: Multiple {ListRecordsTeams}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpdaNulldate", DbType.DateTime, qpdaNulldate);
				sqlCmd.CreateParameter("@qpinSessionId", DbType.Int32, qpinSessionId);
				sqlCmd.CreateParameter("@qpstEnrolementStatus", DbType.String, qpstEnrolementStatus);
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCmd.CreateParameter("@qpinCurriculumLeadId", DbType.Int32, qpinCurriculumLeadId);
				string advSql = "SELECT   {Team}.[ID], {Team}.[TEAMCODE], {Team}.[DESCRIPTION], {Team}.[CURRICULUMLEAD], {Team}.[PROSOLUTIONSID],  " +
				 "        (CASE WHEN  {CCSessionTeam}.[ID] IS NULL OR  {CCSessionTeam}.[ENDDATE] = @qpdaNulldate  THEN 0 ELSE 1 END),  " +
				 "        (SELECT COUNT(*) FROM  {CCSessionCourse} INNER JOIN  {Group} ON  {CCSessionCourse}.[GROUPID] =  {Group}.[ID] AND  {Group}.[TEAM] =  {Team}.[ID] WHERE  {CCSessionCourse}.[SESSIONID] = @qpinSessionId AND  {CCSessionCourse}.[ENDDATE] <> @qpdaNulldate ) as SessionTotal ,  " +
				 "        (SELECT COUNT( {Group}.[ID]) FROM  {Group} WHERE  {Group}.[TEAM] =  {Team}.[ID] AND EXISTS (SELECT  {Student_Group}.[ID] FROM  {Student_Group} WHERE  {Student_Group}.[GROUPID] = {Group}.[ID] AND  {Student_Group}.[ENROLMENTSTATUS] = @qpstEnrolementStatus  ) ) as CLTotal,  " +
				 "         {CCSessionTeam}.[NOTES]       " +
				 "FROM  {Team}  " +
				 "INNER JOIN  {CurriculumLead} ON  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "LEFT JOIN  {CCSessionTeam} ON  {Team}.[ID] =  {CCSessionTeam}.[TEAMID] AND  {CCSessionTeam}.[SESSIONID] = @qpinSessionId    " +
				 "WHERE  " +
				 "     {CurriculumLead}.[CLUSTER] = @qpstClusterId   " +
				 "    AND (@qpinCurriculumLeadId = 0 OR   {CurriculumLead}.[ID] = @qpinCurriculumLeadId)  " +
				 "    AND EXISTS (SELECT  {Group}.[ID] FROM  {Group} WHERE  {Group}.[TEAM] =  {Team}.[ID])";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLTeamStringStringStringBooleanRecordList outParamList = new RLTeamStringStringStringBooleanRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetTeamsReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[5];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					opt[2] = new BitArray(new bool[] {
						false
					}
					);
					opt[3] = new BitArray(new bool[] {
						false
					}
					);
					opt[4] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLTeamStringStringStringBooleanRecordList _tmp = new RLTeamStringStringStringBooleanRecordList();
						_tmp.AlternateReadDBMethod = QueryGetTeamsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetTeams.List");
							outParamList = (RLTeamStringStringStringBooleanRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetTeams.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetTeams.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetTeams in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT  {Team}.*,          (CASE WHEN {CCSessionTeam}.[Id] IS NULL OR {CCSessionTeam}.[EndDate] = @Nulldate  THEN 0 ELSE 1 END),          (SELECT COUNT(*) FROM {CCSessionCourse} INNER JOIN {Group} ON {CCSessionCourse}.[GroupId] = {Group}.[Id] AND {Group}.[Team] = {Team}.[Id] WHERE {CCSessionCourse}.[SessionId] = @SessionId AND {CCSessionCourse}.[EndDate] <> @Nulldate ) as SessionTotal ,          (SELECT COUNT({Group}.[Id]) FROM {Group} WHERE {Group}.[Team] = {Team}.[Id] AND EXISTS (SELECT {Student_Group}.[Id] FROM {Student_Group} WHERE {Student_Group}.[GroupId] ={Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus  ) ) as CLTotal,          {CCSessionTeam}.[Notes]       FROM {Team}  INNER JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {CCSessionTeam} ON {Team}.[Id] = {CCSessionTeam}.[TeamId] AND {CCSessionTeam}.[SessionId] = @SessionId    WHERE      {CurriculumLead}.[Cluster] = @ClusterId       AND (@CurriculumLeadId = 0 OR  {Curric ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetTeams in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT  {Team}.*,          (CASE WHEN {CCSessionTeam}.[Id] IS NULL OR {CCSessionTeam}.[EndDate] = @Nulldate  THEN 0 ELSE 1 END),          (SELECT COUNT(*) FROM {CCSessionCourse} INNER JOIN {Group} ON {CCSessionCourse}.[GroupId] = {Group}.[Id] AND {Group}.[Team] = {Team}.[Id] WHERE {CCSessionCourse}.[SessionId] = @SessionId AND {CCSessionCourse}.[EndDate] <> @Nulldate ) as SessionTotal ,          (SELECT COUNT({Group}.[Id]) FROM {Group} WHERE {Group}.[Team] = {Team}.[Id] AND EXISTS (SELECT {Student_Group}.[Id] FROM {Student_Group} WHERE {Student_Group}.[GroupId] ={Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus  ) ) as CLTotal,          {CCSessionTeam}.[Notes]       FROM {Team}  INNER JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {CCSessionTeam} ON {Team}.[Id] = {CCSessionTeam}.[TeamId] AND {CCSessionTeam}.[SessionId] = @SessionId    WHERE      {CurriculumLead}.[Cluster] = @ClusterId       AND (@CurriculumLeadId = 0 OR  {Curric ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetTeams in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT  {Team}.*,          (CASE WHEN {CCSessionTeam}.[Id] IS NULL OR {CCSessionTeam}.[EndDate] = @Nulldate  THEN 0 ELSE 1 END),          (SELECT COUNT(*) FROM {CCSessionCourse} INNER JOIN {Group} ON {CCSessionCourse}.[GroupId] = {Group}.[Id] AND {Group}.[Team] = {Team}.[Id] WHERE {CCSessionCourse}.[SessionId] = @SessionId AND {CCSessionCourse}.[EndDate] <> @Nulldate ) as SessionTotal ,          (SELECT COUNT({Group}.[Id]) FROM {Group} WHERE {Group}.[Team] = {Team}.[Id] AND EXISTS (SELECT {Student_Group}.[Id] FROM {Student_Group} WHERE {Student_Group}.[GroupId] ={Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus  ) ) as CLTotal,          {CCSessionTeam}.[Notes]       FROM {Team}  INNER JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {CCSessionTeam} ON {Team}.[Id] = {CCSessionTeam}.[TeamId] AND {CCSessionTeam}.[SessionId] = @SessionId    WHERE      {CurriculumLead}.[Cluster] = @ClusterId       AND (@CurriculumLeadId = 0 OR  {Curric ...): " + aqExcep.Message);
				}
			}

			private static void QueryGetCoursesReadDB(ref RCGroupStringStringStringBooleanRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENGroup.Read(r, ref index);
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssSTString.Read(r, ref index);
				rec.ssSTString_2.Read(r, ref index);
				rec.ssSTString_3.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetCourses" of Action "Preparation"
			/// </summary>
			public static RLGroupStringStringStringBooleanRecordList QueryGetCourses(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinGroupTypeId, string qpstClusterId, int qpinCurriculumLeadId, int qpinTeamId, int qpinSessionId, string qpstNulldate, string qpstEnrolementStatus, int qpinSession_MAX_RAG_Days, string qpstLogTypeId, string qpstSite2) {
				// Query Iterations: Multiple {ListRecordsCourses}
				// Refresh Query I_qvfgTt10SQx5srbnss0Q Iterations: Multiple {ListRecordsCourses}
				// Refresh Query 3SbcTk4b2EaCn9XdtS892g Iterations: Multiple {ListRecordsCourses}
				// Refresh Query ZEF2fE9BhUOd8SckRXtlpA Iterations: Multiple {ListRecordsCourses}
				// Refresh Query D2RM6OKFhk+MKTff5SmX7Q Iterations: Multiple {ListRecordsCourses}
				// Refresh Query J36CNq+hNE+K2cMXshIwLw Iterations: Multiple {ListRecordsCourses}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstNulldate", DbType.String, qpstNulldate);
				sqlCmd.CreateParameter("@qpstEnrolementStatus", DbType.String, qpstEnrolementStatus);
				sqlCmd.CreateParameter("@qpstLogTypeId", DbType.String, qpstLogTypeId);
				sqlCmd.CreateParameter("@qpinSession_MAX_RAG_Days", DbType.Int32, qpinSession_MAX_RAG_Days);
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCmd.CreateParameter("@qpinSessionId", DbType.Int32, qpinSessionId);
				sqlCmd.CreateParameter("@qpinGroupTypeId", DbType.Int32, qpinGroupTypeId);
				sqlCmd.CreateParameter("@qpinCurriculumLeadId", DbType.Int32, qpinCurriculumLeadId);
				sqlCmd.CreateParameter("@qpinTeamId", DbType.Int32, qpinTeamId);
				sqlCmd.CreateParameter("@qpstSite2", DbType.String, qpstSite2);
				string advSql = "SELECT  {Group}.[ID], {Group}.[GROUPNAME], {Group}.[GROUPDESCRIPTION], {Group}.[GROUPTYPEID], {Group}.[COURSEMANAGER], {Group}.[TEAM], {Group}.[CATEGORY], {Group}.[IALEVEL], {Group}.[SITE],  " +
				 "       (CASE WHEN  {CCSessionCourse}.[ID] IS NULL OR  {CCSessionCourse}.[ENDDATE] = @qpstNulldate  THEN 0 ELSE 1 END),  " +
				 "       (SELECT COUNT(distinct( {StudentLog}.[STUDENTREFERENCE])) FROM  {StudentLog} INNER JOIN  {Student_Group} ON   {StudentLog}.[STUDENTREFERENCE]=  {Student_Group}.[STUDENTREFERENCE] AND  {Student_Group}.[GROUPID]=  {Group}.[ID] AND  {Student_Group}.[ENROLMENTSTATUS] = @qpstEnrolementStatus WHERE  {StudentLog}.[STUDENTLOGTYPE] = @qpstLogTypeId AND  {StudentLog}.[DATETIME] > dateadd(day,-@qpinSession_MAX_RAG_Days, getdate() )) as SessionTotal,  " +
				 "       (SELECT COUNT(distinct  {Student_Group}.[STUDENTREFERENCE]) FROM  {Student_Group} WHERE  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[ENROLMENTSTATUS] = @qpstEnrolementStatus  ) as CLTotal,  " +
				 "        {CCSessionCourse}.[NOTES]    " +
				 "FROM  {Group}  " +
				 "INNER JOIN  {Team} ON  {Group}.[TEAM]=  {Team}.[ID]  " +
				 "INNER JOIN  {CurriculumLead} ON  {CurriculumLead}.[ID] =  {Team}.[CURRICULUMLEAD] AND   {CurriculumLead}.[CLUSTER] = @qpstClusterId  " +
				 "LEFT JOIN  {CCSessionCourse} ON  {Group}.[ID] =  {CCSessionCourse}.[GROUPID] AND  {CCSessionCourse}.[SESSIONID] = @qpinSessionId   " +
				 "WHERE   " +
				 " {Group}.[GROUPTYPEID] = @qpinGroupTypeId   " +
				 "AND (@qpinCurriculumLeadId = 0 OR   {CurriculumLead}.[ID] = @qpinCurriculumLeadId)  " +
				 "AND (@qpinTeamId = 0 OR  {Group}.[TEAM] = @qpinTeamId )  " +
				 "AND (@qpstSite2 = '' OR @qpstSite2 = 'All' OR  {Group}.[SITE] = @qpstSite2)  " +
				 "AND EXISTS   " +
				 "    (SELECT  {Student_Group}.[ID] FROM  {Student_Group} WHERE  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student_Group}.[ENROLMENTSTATUS] = @qpstEnrolementStatus )";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLGroupStringStringStringBooleanRecordList outParamList = new RLGroupStringStringStringBooleanRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetCoursesReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[5];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					opt[2] = new BitArray(new bool[] {
						false
					}
					);
					opt[3] = new BitArray(new bool[] {
						false
					}
					);
					opt[4] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLGroupStringStringStringBooleanRecordList _tmp = new RLGroupStringStringStringBooleanRecordList();
						_tmp.AlternateReadDBMethod = QueryGetCoursesReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetCourses.List");
							outParamList = (RLGroupStringStringStringBooleanRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetCourses.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetCourses.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetCourses in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT {Group}.*,         (CASE WHEN {CCSessionCourse}.[Id] IS NULL OR {CCSessionCourse}.[EndDate] = @Nulldate  THEN 0 ELSE 1 END),         (SELECT COUNT(distinct({StudentLog}.[StudentReference])) FROM {StudentLog} INNER JOIN {Student_Group} ON  {StudentLog}.[StudentReference]= {Student_Group}.[StudentReference] AND {Student_Group}.[GroupId]= {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus WHERE {StudentLog}.[StudentLogType] = @LogTypeId AND {StudentLog}.[DateTime] > dateadd(day,-@Session_MAX_RAG_Days, getdate() )) as SessionTotal,         (SELECT COUNT(distinct {Student_Group}.[StudentReference]) FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus  ) as CLTotal,         {CCSessionCourse}.[Notes]    FROM {Group}  INNER JOIN {Team} ON {Group}.[Team]= {Team}.[Id]  INNER JOIN {CurriculumLead} ON {CurriculumLead}.[Id] = {Team}.[CurriculumLead] AND  {CurriculumLead}.[Cluster] = @ClusterId  LEFT  ...): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetCourses in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT {Group}.*,         (CASE WHEN {CCSessionCourse}.[Id] IS NULL OR {CCSessionCourse}.[EndDate] = @Nulldate  THEN 0 ELSE 1 END),         (SELECT COUNT(distinct({StudentLog}.[StudentReference])) FROM {StudentLog} INNER JOIN {Student_Group} ON  {StudentLog}.[StudentReference]= {Student_Group}.[StudentReference] AND {Student_Group}.[GroupId]= {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus WHERE {StudentLog}.[StudentLogType] = @LogTypeId AND {StudentLog}.[DateTime] > dateadd(day,-@Session_MAX_RAG_Days, getdate() )) as SessionTotal,         (SELECT COUNT(distinct {Student_Group}.[StudentReference]) FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus  ) as CLTotal,         {CCSessionCourse}.[Notes]    FROM {Group}  INNER JOIN {Team} ON {Group}.[Team]= {Team}.[Id]  INNER JOIN {CurriculumLead} ON {CurriculumLead}.[Id] = {Team}.[CurriculumLead] AND  {CurriculumLead}.[Cluster] = @ClusterId  LEFT  ...): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetCourses in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT {Group}.*,         (CASE WHEN {CCSessionCourse}.[Id] IS NULL OR {CCSessionCourse}.[EndDate] = @Nulldate  THEN 0 ELSE 1 END),         (SELECT COUNT(distinct({StudentLog}.[StudentReference])) FROM {StudentLog} INNER JOIN {Student_Group} ON  {StudentLog}.[StudentReference]= {Student_Group}.[StudentReference] AND {Student_Group}.[GroupId]= {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus WHERE {StudentLog}.[StudentLogType] = @LogTypeId AND {StudentLog}.[DateTime] > dateadd(day,-@Session_MAX_RAG_Days, getdate() )) as SessionTotal,         (SELECT COUNT(distinct {Student_Group}.[StudentReference]) FROM {Student_Group} WHERE {Student_Group}.[GroupId] = {Group}.[Id] AND {Student_Group}.[EnrolmentStatus] = @EnrolementStatus  ) as CLTotal,         {CCSessionCourse}.[Notes]    FROM {Group}  INNER JOIN {Team} ON {Group}.[Team]= {Team}.[Id]  INNER JOIN {CurriculumLead} ON {CurriculumLead}.[Id] = {Team}.[CurriculumLead] AND  {CurriculumLead}.[Cluster] = @ClusterId  LEFT  ...): " + aqExcep.Message);
				}
			}

			/// <summary>
			/// Query Function "GetSiteList" of Action "Preparation"
			/// </summary>
			public static RLStringRecordList QueryGetSiteList(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstClusterId, int qpinCurriculumLeadId, int qpinTeamId) {
				// Query Iterations: Multiple {-unbound-}
				// Refresh Query LvY3dGv7Ckej9mMjPcRNeA Iterations: Multiple {-unbound-}
				// Refresh Query XNJt5QM+r0mLEF04qNgTPA Iterations: Multiple {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstClusterId", DbType.String, qpstClusterId);
				sqlCmd.CreateParameter("@qpinCurriculumLeadId", DbType.Int32, qpinCurriculumLeadId);
				sqlCmd.CreateParameter("@qpinTeamId", DbType.Int32, qpinTeamId);
				string advSql = "SELECT DISTINCT  {Group}.[SITE] FROM  {Group}  " +
				 "LEFT JOIN  {Team} ON  {Group}.[TEAM] =  {Team}.[ID]  " +
				 "LEFT JOIN  {CurriculumLead} ON  {Team}.[CURRICULUMLEAD] =  {CurriculumLead}.[ID]  " +
				 "LEFT JOIN  {Cluster} ON  {CurriculumLead}.[CLUSTER] =  {Cluster}.[ID]  " +
				 "WHERE (@qpstClusterId = '' OR  {Cluster}.[ID] = @qpstClusterId)  " +
				 "AND (@qpinCurriculumLeadId = 0 OR  {CurriculumLead}.[ID] = @qpinCurriculumLeadId)  " +
				 "AND (@qpinTeamId = 0 OR  {Team}.[ID] = @qpinTeamId)  " +
				 "AND ( {Group}.[SITE]<> '')  " +
				 "ORDER BY  {Group}.[SITE]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStringRecordList outParamList = new RLStringRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStringRecordList _tmp = new RLStringRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetSiteList.List");
							outParamList = (RLStringRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetSiteList.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query CaseConference.CCSessionStep2_Edit.Preparation.GetSiteList.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetSiteList in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT DISTINCT {Group}.[Site] FROM {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE (@ClusterId = '' OR {Cluster}.[Id] = @ClusterId)  AND (@CurriculumLeadId = 0 OR {CurriculumLead}.[Id] = @CurriculumLeadId)  AND (@TeamId = 0 OR {Team}.[Id] = @TeamId)  AND ({Group}.[Site]<> '')  ORDER BY {Group}.[Site]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetSiteList in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT DISTINCT {Group}.[Site] FROM {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE (@ClusterId = '' OR {Cluster}.[Id] = @ClusterId)  AND (@CurriculumLeadId = 0 OR {CurriculumLead}.[Id] = @CurriculumLeadId)  AND (@TeamId = 0 OR {Team}.[Id] = @TeamId)  AND ({Group}.[Site]<> '')  ORDER BY {Group}.[Site]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetSiteList in Preparation in CCSessionStep2_Edit in CaseConference in CaseConferencing (SELECT DISTINCT {Group}.[Site] FROM {Group}  LEFT JOIN {Team} ON {Group}.[Team] = {Team}.[Id]  LEFT JOIN {CurriculumLead} ON {Team}.[CurriculumLead] = {CurriculumLead}.[Id]  LEFT JOIN {Cluster} ON {CurriculumLead}.[Cluster] = {Cluster}.[Id]  WHERE (@ClusterId = '' OR {Cluster}.[Id] = @ClusterId)  AND (@CurriculumLeadId = 0 OR {CurriculumLead}.[Id] = @CurriculumLeadId)  AND (@TeamId = 0 OR {Team}.[Id] = @TeamId)  AND ({Group}.[Site]<> '')  ORDER BY {Group}.[Site]): " + aqExcep.Message);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = (((queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssId==BuiltInFunction.NullIdentifier())) ?("New CCSession"):("Edit CCSession")); ssListRecordsCurriculumLeadsListDoDataBind = true;
				ssListRecordsTeamsListDoDataBind = true;
				ssListRecordsCoursesListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CCSessionStep2_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "CCSessionStep2_Edit", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetAllCurriculumLeadsByCluster_outParamList.

			int tmpcurrentrownumberqueryResGetAllCurriculumLeadsByCluster_outParamList = queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetAllCurriculumLeadsByCluster_outParamList = queryResGetAllCurriculumLeadsByCluster_outParamList.Eof;
			ArrayList storequeryResGetAllCurriculumLeadsByCluster_outParamList = new ArrayList();

			// Write the needed fields of queryResGetAllCurriculumLeadsByCluster_outParamList to the storequeryResGetAllCurriculumLeadsByCluster_outParamList
			if (!queryResGetAllCurriculumLeadsByCluster_outParamList.Empty) {
				try {
					queryResGetAllCurriculumLeadsByCluster_outParamList.StartIteration();

					while (!queryResGetAllCurriculumLeadsByCluster_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList = new ArrayList();
						tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList.Add(queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssENCurriculumLead.ssId == 0?(object) null: queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssENCurriculumLead.ssId);
						tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList.Add(queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssENCurriculumLead.ssCurriculumLeadCode == "" ?(object) null: queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssENCurriculumLead.ssCurriculumLeadCode);
						tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList.Add(queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssENCurriculumLead.ssDescription == "" ?(object) null: queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssENCurriculumLead.ssDescription);
						tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssENCurriculumLead.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, false, false
						}
						))));
						tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssENCurriculumLead.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, true, true
						}
						))));
						tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList.Add(queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssSTString.ssValue == "" ?(object) null: queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssSTString.ssValue);
						tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList.Add(queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssSTString_2.ssValue == "" ?(object) null: queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssSTString_2.ssValue);
						tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList.Add(queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssSTString_3.ssValue == "" ?(object) null: queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssSTString_3.ssValue);
						tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList.Add(queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssSTBoolean.ssValue == false?(object) null: queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRec.ssSTBoolean.ssValue);
						storequeryResGetAllCurriculumLeadsByCluster_outParamList.Add(tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList);
						queryResGetAllCurriculumLeadsByCluster_outParamList.Advance();
					}
				} finally {
					queryResGetAllCurriculumLeadsByCluster_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetAllCurriculumLeadsByCluster_outParamList", storequeryResGetAllCurriculumLeadsByCluster_outParamList, null);

			#endregion


			#region store queryResGetAllCurriculumLeadsByCluster_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetAllCurriculumLeadsByCluster_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetAllCurriculumLeadsByCluster_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetAllCurriculumLeadsByCluster_outParamList_eof", tmpeofqueryResGetAllCurriculumLeadsByCluster_outParamList, false);
			queryResGetAllCurriculumLeadsByCluster_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetAllCurriculumLeadsByCluster_outParamList, tmpeofqueryResGetAllCurriculumLeadsByCluster_outParamList);

			#endregion


			#region store queryResGetCCSessionById_outParamList.

			int tmpcurrentrownumberqueryResGetCCSessionById_outParamList = queryResGetCCSessionById_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCCSessionById_outParamList = queryResGetCCSessionById_outParamList.Eof;
			ArrayList storequeryResGetCCSessionById_outParamList = new ArrayList();

			// Write the needed fields of queryResGetCCSessionById_outParamList to the storequeryResGetCCSessionById_outParamList
			if (!queryResGetCCSessionById_outParamList.Empty) {
				try {
					queryResGetCCSessionById_outParamList.StartIteration();

					while (!queryResGetCCSessionById_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetCCSessionById_outParamList = new ArrayList();
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(queryResGetCCSessionById_outParamList.CurrentRec.ssENCluster.ssClusterDescription == "" ?(object) null: queryResGetCCSessionById_outParamList.CurrentRec.ssENCluster.ssClusterDescription);
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetCCSessionById_outParamList.CurrentRec.ssENCluster.ChangedAttributes, new BitArray(new bool[] {
							false, false, true, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetCCSessionById_outParamList.CurrentRec.ssENCluster.OptimizedAttributes, new BitArray(new bool[] {
							true, true, false, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssDescription == "" ?(object) null: queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssDescription);
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId == "" ?(object) null: queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssClusterId);
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssEndDate == new DateTime(1900, 1, 1, 0, 0, 0) ?(object) null: queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ssEndDate);
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.ChangedAttributes, new BitArray(new bool[] {
							false, true, false, true, false, true, false, false
						}
						))));
						tmpFieldsqueryResGetCCSessionById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetCCSessionById_outParamList.CurrentRec.ssENCCSession.OptimizedAttributes, new BitArray(new bool[] {
							true, false, true, false, true, false, true, true
						}
						))));
						storequeryResGetCCSessionById_outParamList.Add(tmpFieldsqueryResGetCCSessionById_outParamList);
						queryResGetCCSessionById_outParamList.Advance();
					}
				} finally {
					queryResGetCCSessionById_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetCCSessionById_outParamList", storequeryResGetCCSessionById_outParamList, null);

			#endregion


			#region store queryResGetCCSessionById_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetCCSessionById_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCCSessionById_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCCSessionById_outParamList_eof", tmpeofqueryResGetCCSessionById_outParamList, false);
			queryResGetCCSessionById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCCSessionById_outParamList, tmpeofqueryResGetCCSessionById_outParamList);

			#endregion


			#region store queryResGetTeams_outParamList.

			int tmpcurrentrownumberqueryResGetTeams_outParamList = queryResGetTeams_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetTeams_outParamList = queryResGetTeams_outParamList.Eof;
			ArrayList storequeryResGetTeams_outParamList = new ArrayList();

			// Write the needed fields of queryResGetTeams_outParamList to the storequeryResGetTeams_outParamList
			if (!queryResGetTeams_outParamList.Empty) {
				try {
					queryResGetTeams_outParamList.StartIteration();

					while (!queryResGetTeams_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetTeams_outParamList = new ArrayList();
						tmpFieldsqueryResGetTeams_outParamList.Add(queryResGetTeams_outParamList.CurrentRec.ssENTeam.ssId == 0?(object) null: queryResGetTeams_outParamList.CurrentRec.ssENTeam.ssId);
						tmpFieldsqueryResGetTeams_outParamList.Add(queryResGetTeams_outParamList.CurrentRec.ssENTeam.ssTeamCode == "" ?(object) null: queryResGetTeams_outParamList.CurrentRec.ssENTeam.ssTeamCode);
						tmpFieldsqueryResGetTeams_outParamList.Add(queryResGetTeams_outParamList.CurrentRec.ssENTeam.ssDescription == "" ?(object) null: queryResGetTeams_outParamList.CurrentRec.ssENTeam.ssDescription);
						tmpFieldsqueryResGetTeams_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetTeams_outParamList.CurrentRec.ssENTeam.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, false, false
						}
						))));
						tmpFieldsqueryResGetTeams_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetTeams_outParamList.CurrentRec.ssENTeam.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, true, true
						}
						))));
						tmpFieldsqueryResGetTeams_outParamList.Add(queryResGetTeams_outParamList.CurrentRec.ssSTString.ssValue == "" ?(object) null: queryResGetTeams_outParamList.CurrentRec.ssSTString.ssValue);
						tmpFieldsqueryResGetTeams_outParamList.Add(queryResGetTeams_outParamList.CurrentRec.ssSTString_2.ssValue == "" ?(object) null: queryResGetTeams_outParamList.CurrentRec.ssSTString_2.ssValue);
						tmpFieldsqueryResGetTeams_outParamList.Add(queryResGetTeams_outParamList.CurrentRec.ssSTString_3.ssValue == "" ?(object) null: queryResGetTeams_outParamList.CurrentRec.ssSTString_3.ssValue);
						tmpFieldsqueryResGetTeams_outParamList.Add(queryResGetTeams_outParamList.CurrentRec.ssSTBoolean.ssValue == false?(object) null: queryResGetTeams_outParamList.CurrentRec.ssSTBoolean.ssValue);
						storequeryResGetTeams_outParamList.Add(tmpFieldsqueryResGetTeams_outParamList);
						queryResGetTeams_outParamList.Advance();
					}
				} finally {
					queryResGetTeams_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetTeams_outParamList", storequeryResGetTeams_outParamList, null);

			#endregion


			#region store queryResGetTeams_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetTeams_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetTeams_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetTeams_outParamList_eof", tmpeofqueryResGetTeams_outParamList, false);
			queryResGetTeams_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetTeams_outParamList, tmpeofqueryResGetTeams_outParamList);

			#endregion


			#region store queryResGetCourses_outParamList.

			int tmpcurrentrownumberqueryResGetCourses_outParamList = queryResGetCourses_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetCourses_outParamList = queryResGetCourses_outParamList.Eof;
			ArrayList storequeryResGetCourses_outParamList = new ArrayList();

			// Write the needed fields of queryResGetCourses_outParamList to the storequeryResGetCourses_outParamList
			if (!queryResGetCourses_outParamList.Empty) {
				try {
					queryResGetCourses_outParamList.StartIteration();

					while (!queryResGetCourses_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetCourses_outParamList = new ArrayList();
						tmpFieldsqueryResGetCourses_outParamList.Add(queryResGetCourses_outParamList.CurrentRec.ssENGroup.ssId == 0?(object) null: queryResGetCourses_outParamList.CurrentRec.ssENGroup.ssId);
						tmpFieldsqueryResGetCourses_outParamList.Add(queryResGetCourses_outParamList.CurrentRec.ssENGroup.ssGroupName == "" ?(object) null: queryResGetCourses_outParamList.CurrentRec.ssENGroup.ssGroupName);
						tmpFieldsqueryResGetCourses_outParamList.Add(queryResGetCourses_outParamList.CurrentRec.ssENGroup.ssGroupDescription == "" ?(object) null: queryResGetCourses_outParamList.CurrentRec.ssENGroup.ssGroupDescription);
						tmpFieldsqueryResGetCourses_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetCourses_outParamList.CurrentRec.ssENGroup.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, false, false, false, false, false, false
						}
						))));
						tmpFieldsqueryResGetCourses_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetCourses_outParamList.CurrentRec.ssENGroup.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetCourses_outParamList.Add(queryResGetCourses_outParamList.CurrentRec.ssSTString.ssValue == "" ?(object) null: queryResGetCourses_outParamList.CurrentRec.ssSTString.ssValue);
						tmpFieldsqueryResGetCourses_outParamList.Add(queryResGetCourses_outParamList.CurrentRec.ssSTString_2.ssValue == "" ?(object) null: queryResGetCourses_outParamList.CurrentRec.ssSTString_2.ssValue);
						tmpFieldsqueryResGetCourses_outParamList.Add(queryResGetCourses_outParamList.CurrentRec.ssSTString_3.ssValue == "" ?(object) null: queryResGetCourses_outParamList.CurrentRec.ssSTString_3.ssValue);
						tmpFieldsqueryResGetCourses_outParamList.Add(queryResGetCourses_outParamList.CurrentRec.ssSTBoolean.ssValue == false?(object) null: queryResGetCourses_outParamList.CurrentRec.ssSTBoolean.ssValue);
						storequeryResGetCourses_outParamList.Add(tmpFieldsqueryResGetCourses_outParamList);
						queryResGetCourses_outParamList.Advance();
					}
				} finally {
					queryResGetCourses_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetCourses_outParamList", storequeryResGetCourses_outParamList, null);

			#endregion


			#region store queryResGetCourses_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetCourses_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetCourses_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetCourses_outParamList_eof", tmpeofqueryResGetCourses_outParamList, false);
			queryResGetCourses_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCourses_outParamList, tmpeofqueryResGetCourses_outParamList);

			#endregion


			#region store queryResGetSiteList_outParamList.

			int tmpcurrentrownumberqueryResGetSiteList_outParamList = queryResGetSiteList_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetSiteList_outParamList = queryResGetSiteList_outParamList.Eof;
			ArrayList storequeryResGetSiteList_outParamList = new ArrayList();

			// Write the needed fields of queryResGetSiteList_outParamList to the storequeryResGetSiteList_outParamList
			if (!queryResGetSiteList_outParamList.Empty) {
				try {
					queryResGetSiteList_outParamList.StartIteration();

					while (!queryResGetSiteList_outParamList.Eof) {
						ArrayList tmpFieldsqueryResGetSiteList_outParamList = new ArrayList();
						tmpFieldsqueryResGetSiteList_outParamList.Add(queryResGetSiteList_outParamList.CurrentRec.ssSTString.ssValue == "" ?(object) null: queryResGetSiteList_outParamList.CurrentRec.ssSTString.ssValue);
						storequeryResGetSiteList_outParamList.Add(tmpFieldsqueryResGetSiteList_outParamList);
						queryResGetSiteList_outParamList.Advance();
					}
				} finally {
					queryResGetSiteList_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetSiteList_outParamList", storequeryResGetSiteList_outParamList, null);

			#endregion


			#region store queryResGetSiteList_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetSiteList_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetSiteList_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetSiteList_outParamList_eof", tmpeofqueryResGetSiteList_outParamList, false);
			queryResGetSiteList_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSiteList_outParamList, tmpeofqueryResGetSiteList_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("inParamCCSessionId", inParamCCSessionId, 0);
			ViewStateAttributes.SetInViewState("varLctop", varLctop, 0.0M);
			ViewStateAttributes.SetInViewState("varLcleft", varLcleft, 0.0M);
			ViewStateAttributes.SetInViewState("varLcshow", varLcshow, false);
			ViewStateAttributes.SetInViewState("varLcCurriculumLeadIdSelected", varLcCurriculumLeadIdSelected, 0);
			ViewStateAttributes.SetInViewState("varLcTeamIdSelected", varLcTeamIdSelected, 0);
			ViewStateAttributes.SetInViewState("varLcGroupIdSelected", varLcGroupIdSelected, 0);
			if (IsAjaxRequest) {
				recListListRecordsCurriculumLeads_Rebuild((ssListRecordsCurriculumLeadsListDataBound ? wtListRecordsCurriculumLeads.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecordsCurriculumLeads.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecordsCurriculumLeads_list", wtListRecordsCurriculumLeads_storage, null);
			if (IsAjaxRequest) {
				recListListRecordsTeams_Rebuild((ssListRecordsTeamsListDataBound ? wtListRecordsTeams.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecordsTeams.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecordsTeams_list", wtListRecordsTeams_storage, null);
			ViewStateAttributes.SetInViewState("wt_ComboBox60_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox60")).Mandatory, false);
			if (IsAjaxRequest) {
				recListListRecordsCourses_Rebuild((ssListRecordsCoursesListDataBound ? wtListRecordsCourses.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecordsCourses.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecordsCourses_list", wtListRecordsCourses_storage, null);
			ViewStateAttributes.SetInViewState("wtileft_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtileft")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtitop_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtitop")).Mandatory, false);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetAllCurriculumLeadsByCluster_outParamList.

				// Read the needed fields of queryResGetAllCurriculumLeadsByCluster_outParamList from storequeryResGetAllCurriculumLeadsByCluster_outParamList
				queryResGetAllCurriculumLeadsByCluster_outParamList = new RLCurriculumLeadStringStringStringBooleanRecordList();
				ArrayList storequeryResGetAllCurriculumLeadsByCluster_outParamList;
				storequeryResGetAllCurriculumLeadsByCluster_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetAllCurriculumLeadsByCluster_outParamList", null);
				if (storequeryResGetAllCurriculumLeadsByCluster_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList in storequeryResGetAllCurriculumLeadsByCluster_outParamList) {
						if (tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList != null) {
							// Aux current record variable
							RCCurriculumLeadStringStringStringBooleanRecord tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList = new RCCurriculumLeadStringStringStringBooleanRecord(null);
							tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList.ssENCurriculumLead.ssId = (int) (tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[0] == null ? 0: tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList.ssENCurriculumLead.ssCurriculumLeadCode = (string) (tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[1] == null ? "": tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList.ssENCurriculumLead.ssDescription = (string) (tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[2] == null ? "": tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList.ssENCurriculumLead.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList.ssENCurriculumLead.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList.ssSTString.ssValue = (string) (tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[5] == null ? "": tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList.ssSTString_2.ssValue = (string) (tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[6] == null ? "": tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList.ssSTString_3.ssValue = (string) (tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[7] == null ? "": tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList.ssSTBoolean.ssValue = (bool) (tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[8] == null ? false: tmpFieldsqueryResGetAllCurriculumLeadsByCluster_outParamList[8]);

							queryResGetAllCurriculumLeadsByCluster_outParamList.Append(tmpAuxCurrentRecordqueryResGetAllCurriculumLeadsByCluster_outParamList);
						}
					}
				}
				queryResGetAllCurriculumLeadsByCluster_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetAllCurriculumLeadsByCluster_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetAllCurriculumLeadsByCluster_outParamList;
				tmpcurrentrownumberqueryResGetAllCurriculumLeadsByCluster_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetAllCurriculumLeadsByCluster_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetAllCurriculumLeadsByCluster_outParamList;
				tmpeofqueryResGetAllCurriculumLeadsByCluster_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetAllCurriculumLeadsByCluster_outParamList_eof", false);
				queryResGetAllCurriculumLeadsByCluster_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetAllCurriculumLeadsByCluster_outParamList, tmpeofqueryResGetAllCurriculumLeadsByCluster_outParamList);

				#endregion


				#region fetch queryResGetCCSessionById_outParamList.

				// Read the needed fields of queryResGetCCSessionById_outParamList from storequeryResGetCCSessionById_outParamList
				queryResGetCCSessionById_outParamList = new RLClusterCCSessionRecordList();
				ArrayList storequeryResGetCCSessionById_outParamList;
				storequeryResGetCCSessionById_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetCCSessionById_outParamList", null);
				if (storequeryResGetCCSessionById_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetCCSessionById_outParamList in storequeryResGetCCSessionById_outParamList) {
						if (tmpFieldsqueryResGetCCSessionById_outParamList != null) {
							// Aux current record variable
							RCClusterCCSessionRecord tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList = new RCClusterCCSessionRecord(null);
							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCluster.ssClusterDescription = (string) (tmpFieldsqueryResGetCCSessionById_outParamList[0] == null ? "": tmpFieldsqueryResGetCCSessionById_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCluster.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCCSessionById_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCluster.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCCSessionById_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCCSession.ssDescription = (string) (tmpFieldsqueryResGetCCSessionById_outParamList[3] == null ? "": tmpFieldsqueryResGetCCSessionById_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCCSession.ssClusterId = (string) (tmpFieldsqueryResGetCCSessionById_outParamList[4] == null ? "": tmpFieldsqueryResGetCCSessionById_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCCSession.ssEndDate = (DateTime) (tmpFieldsqueryResGetCCSessionById_outParamList[5] == null ? new DateTime(1900, 1, 1, 0, 0, 0): tmpFieldsqueryResGetCCSessionById_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCCSession.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCCSessionById_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList.ssENCCSession.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCCSessionById_outParamList[7]);

							queryResGetCCSessionById_outParamList.Append(tmpAuxCurrentRecordqueryResGetCCSessionById_outParamList);
						}
					}
				}
				queryResGetCCSessionById_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetCCSessionById_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetCCSessionById_outParamList;
				tmpcurrentrownumberqueryResGetCCSessionById_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCCSessionById_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCCSessionById_outParamList;
				tmpeofqueryResGetCCSessionById_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCCSessionById_outParamList_eof", false);
				queryResGetCCSessionById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCCSessionById_outParamList, tmpeofqueryResGetCCSessionById_outParamList);

				#endregion


				#region fetch queryResGetTeams_outParamList.

				// Read the needed fields of queryResGetTeams_outParamList from storequeryResGetTeams_outParamList
				queryResGetTeams_outParamList = new RLTeamStringStringStringBooleanRecordList();
				ArrayList storequeryResGetTeams_outParamList;
				storequeryResGetTeams_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetTeams_outParamList", null);
				if (storequeryResGetTeams_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetTeams_outParamList in storequeryResGetTeams_outParamList) {
						if (tmpFieldsqueryResGetTeams_outParamList != null) {
							// Aux current record variable
							RCTeamStringStringStringBooleanRecord tmpAuxCurrentRecordqueryResGetTeams_outParamList = new RCTeamStringStringStringBooleanRecord(null);
							tmpAuxCurrentRecordqueryResGetTeams_outParamList.ssENTeam.ssId = (int) (tmpFieldsqueryResGetTeams_outParamList[0] == null ? 0: tmpFieldsqueryResGetTeams_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetTeams_outParamList.ssENTeam.ssTeamCode = (string) (tmpFieldsqueryResGetTeams_outParamList[1] == null ? "": tmpFieldsqueryResGetTeams_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetTeams_outParamList.ssENTeam.ssDescription = (string) (tmpFieldsqueryResGetTeams_outParamList[2] == null ? "": tmpFieldsqueryResGetTeams_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetTeams_outParamList.ssENTeam.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetTeams_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetTeams_outParamList.ssENTeam.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetTeams_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetTeams_outParamList.ssSTString.ssValue = (string) (tmpFieldsqueryResGetTeams_outParamList[5] == null ? "": tmpFieldsqueryResGetTeams_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetTeams_outParamList.ssSTString_2.ssValue = (string) (tmpFieldsqueryResGetTeams_outParamList[6] == null ? "": tmpFieldsqueryResGetTeams_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetTeams_outParamList.ssSTString_3.ssValue = (string) (tmpFieldsqueryResGetTeams_outParamList[7] == null ? "": tmpFieldsqueryResGetTeams_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetTeams_outParamList.ssSTBoolean.ssValue = (bool) (tmpFieldsqueryResGetTeams_outParamList[8] == null ? false: tmpFieldsqueryResGetTeams_outParamList[8]);

							queryResGetTeams_outParamList.Append(tmpAuxCurrentRecordqueryResGetTeams_outParamList);
						}
					}
				}
				queryResGetTeams_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetTeams_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetTeams_outParamList;
				tmpcurrentrownumberqueryResGetTeams_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetTeams_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetTeams_outParamList;
				tmpeofqueryResGetTeams_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetTeams_outParamList_eof", false);
				queryResGetTeams_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetTeams_outParamList, tmpeofqueryResGetTeams_outParamList);

				#endregion


				#region fetch queryResGetCourses_outParamList.

				// Read the needed fields of queryResGetCourses_outParamList from storequeryResGetCourses_outParamList
				queryResGetCourses_outParamList = new RLGroupStringStringStringBooleanRecordList();
				ArrayList storequeryResGetCourses_outParamList;
				storequeryResGetCourses_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetCourses_outParamList", null);
				if (storequeryResGetCourses_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetCourses_outParamList in storequeryResGetCourses_outParamList) {
						if (tmpFieldsqueryResGetCourses_outParamList != null) {
							// Aux current record variable
							RCGroupStringStringStringBooleanRecord tmpAuxCurrentRecordqueryResGetCourses_outParamList = new RCGroupStringStringStringBooleanRecord(null);
							tmpAuxCurrentRecordqueryResGetCourses_outParamList.ssENGroup.ssId = (int) (tmpFieldsqueryResGetCourses_outParamList[0] == null ? 0: tmpFieldsqueryResGetCourses_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetCourses_outParamList.ssENGroup.ssGroupName = (string) (tmpFieldsqueryResGetCourses_outParamList[1] == null ? "": tmpFieldsqueryResGetCourses_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetCourses_outParamList.ssENGroup.ssGroupDescription = (string) (tmpFieldsqueryResGetCourses_outParamList[2] == null ? "": tmpFieldsqueryResGetCourses_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetCourses_outParamList.ssENGroup.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCourses_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetCourses_outParamList.ssENGroup.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetCourses_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetCourses_outParamList.ssSTString.ssValue = (string) (tmpFieldsqueryResGetCourses_outParamList[5] == null ? "": tmpFieldsqueryResGetCourses_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetCourses_outParamList.ssSTString_2.ssValue = (string) (tmpFieldsqueryResGetCourses_outParamList[6] == null ? "": tmpFieldsqueryResGetCourses_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetCourses_outParamList.ssSTString_3.ssValue = (string) (tmpFieldsqueryResGetCourses_outParamList[7] == null ? "": tmpFieldsqueryResGetCourses_outParamList[7]);

							tmpAuxCurrentRecordqueryResGetCourses_outParamList.ssSTBoolean.ssValue = (bool) (tmpFieldsqueryResGetCourses_outParamList[8] == null ? false: tmpFieldsqueryResGetCourses_outParamList[8]);

							queryResGetCourses_outParamList.Append(tmpAuxCurrentRecordqueryResGetCourses_outParamList);
						}
					}
				}
				queryResGetCourses_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetCourses_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetCourses_outParamList;
				tmpcurrentrownumberqueryResGetCourses_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetCourses_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetCourses_outParamList;
				tmpeofqueryResGetCourses_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetCourses_outParamList_eof", false);
				queryResGetCourses_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetCourses_outParamList, tmpeofqueryResGetCourses_outParamList);

				#endregion


				#region fetch queryResGetSiteList_outParamList.

				// Read the needed fields of queryResGetSiteList_outParamList from storequeryResGetSiteList_outParamList
				queryResGetSiteList_outParamList = new RLStringRecordList();
				ArrayList storequeryResGetSiteList_outParamList;
				storequeryResGetSiteList_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetSiteList_outParamList", null);
				if (storequeryResGetSiteList_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetSiteList_outParamList in storequeryResGetSiteList_outParamList) {
						if (tmpFieldsqueryResGetSiteList_outParamList != null) {
							// Aux current record variable
							RCStringRecord tmpAuxCurrentRecordqueryResGetSiteList_outParamList = new RCStringRecord(null);
							tmpAuxCurrentRecordqueryResGetSiteList_outParamList.ssSTString.ssValue = (string) (tmpFieldsqueryResGetSiteList_outParamList[0] == null ? "": tmpFieldsqueryResGetSiteList_outParamList[0]);

							queryResGetSiteList_outParamList.Append(tmpAuxCurrentRecordqueryResGetSiteList_outParamList);
						}
					}
				}
				queryResGetSiteList_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetSiteList_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetSiteList_outParamList;
				tmpcurrentrownumberqueryResGetSiteList_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetSiteList_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetSiteList_outParamList;
				tmpeofqueryResGetSiteList_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetSiteList_outParamList_eof", false);
				queryResGetSiteList_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetSiteList_outParamList, tmpeofqueryResGetSiteList_outParamList);

				#endregion

				inParamCCSessionId = (int) ViewStateAttributes.GetFromViewState("inParamCCSessionId", 0);
				varLctop = (decimal) ViewStateAttributes.GetFromViewState("varLctop", 0.0M);
				varLcleft = (decimal) ViewStateAttributes.GetFromViewState("varLcleft", 0.0M);
				varLcshow = (bool) ViewStateAttributes.GetFromViewState("varLcshow", false);
				varLcCurriculumLeadIdSelected = (int) ViewStateAttributes.GetFromViewState("varLcCurriculumLeadIdSelected", 0);
				varLcTeamIdSelected = (int) ViewStateAttributes.GetFromViewState("varLcTeamIdSelected", 0);
				varLcGroupIdSelected = (int) ViewStateAttributes.GetFromViewState("varLcGroupIdSelected", 0);
				recListListRecordsCurriculumLeads_Restore();
				recListListRecordsTeams_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox60")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox60_Mandatory", false);
				recListListRecordsCourses_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wtileft")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtileft_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtitop")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtitop_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox60", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtileft", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDecimalInputValidate, validate);
			ValidationUtils.ValidateInput(this, "wtitop", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.TextToDecimalInputValidate, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
