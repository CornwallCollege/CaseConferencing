/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowBackofficeFlow {

	public class ScrnRiskAssessments: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnRiskAssessments(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance32
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance32;
		protected OutSystems.HubEdition.WebWidgets.Container wtRiskAssessmentTable_Wrapper;
		private RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList _ssRiskAssessmentTableList = new RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList();
		public RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList ssRiskAssessmentTableList {
			get {
				return _ssRiskAssessmentTableList; 
			}
			set {
				_ssRiskAssessmentTableList = value;
				wtRiskAssessmentTable.DataSource = value;
				ssRiskAssessmentTableListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.OSDataGrid wtRiskAssessmentTable;
		public ArrayList wtRiskAssessmentTable_storage = new ArrayList();
		protected bool ssRiskAssessmentTableList_notUsedYet = true;
		protected bool ssRiskAssessmentTableListDoDataBind;
		protected bool ssRiskAssessmentTableListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container15;
		/// <summary>
		/// Variable (wt_Link38) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link38;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container50;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container43;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container36;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("VdaIs1p80k+sb0egtMjY2w", "RiskAssessments");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "VdaIs1p80k+sb0egtMjY2w", "RiskAssessments");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "VdaIs1p80k+sb0egtMjY2w", "RiskAssessments");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "VdaIs1p80k+sb0egtMjY2w", "RiskAssessments");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "VdaIs1p80k+sb0egtMjY2w", "RiskAssessments");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnRiskAssessments() {
		}


		RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList queryResGetRiskAssessments_outParamList = new RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList();
		int queryResGetRiskAssessments_outParamCount = 0;
		RLUserRecordList queryResGetUserById_outParamList = new RLUserRecordList();
		int queryResGetUserById_outParamCount = 0;
		RLRiskAssessmentKeepInformedRecordList queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = new RLRiskAssessmentKeepInformedRecordList();
		int queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// Query datasetGetRiskAssessments
			int datasetGetRiskAssessments_maxRecords = Math.Max(wtRiskAssessmentTable.StartIndex + wtRiskAssessmentTable.LineCount + 1, 0);
			queryResGetRiskAssessments_outParamList = FuncssPreparation.datasetGetRiskAssessments(heContext, datasetGetRiskAssessments_maxRecords, IterationMultiplicity.Single, out queryResGetRiskAssessments_outParamCount);
			// Query datasetGetRiskAssessmentKeepInformedsByRiskAssessment
			int datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords = 0;
			queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList = FuncssPreparation.datasetGetRiskAssessmentKeepInformedsByRiskAssessment(heContext, datasetGetRiskAssessmentKeepInformedsByRiskAssessment_maxRecords, IterationMultiplicity.Never, out queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamCount, queryResGetRiskAssessments_outParamList.CurrentRec.ssENRiskAssessment.ssId
			);
			// Query datasetGetUserById
			int datasetGetUserById_maxRecords = 0;
			queryResGetUserById_outParamList = FuncssPreparation.datasetGetUserById(heContext, datasetGetUserById_maxRecords, IterationMultiplicity.Never, out queryResGetUserById_outParamCount, queryResGetRiskAssessmentKeepInformedsByRiskAssessment_outParamList.CurrentRec.ssENRiskAssessmentKeepInformed.ssUser
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "RiskAssessments", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "RiskAssessments", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance32 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance32");
			wtRiskAssessmentTable_Wrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtRiskAssessmentTable_Wrapper");
			wtRiskAssessmentTable = (OutSystems.HubEdition.WebWidgets.OSDataGrid) FindControl("wtRiskAssessmentTable");
			wtRiskAssessmentTable.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtRiskAssessmentTable.ClientID, true, -1);
			wtRiskAssessmentTable.LineCountExpression = () => 50;
			wtRiskAssessmentTable.EmptyMessageExpression = () => "No risk assessments to show...";
			wt_Container43 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container43");
			wt_Container36 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container36");
			wt_Container6 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container6");
			wt_Container11 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container11");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "ThemeProvider_wt_WebBlockInstance48") {
				return ThemeProvider_wt_WebBlockInstance32.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance48");
			}
			if (id == "wt_Text12") {
				return ThemeProvider_wt_WebBlockInstance32.wtTitle.FindControl("wt_Text12");
			}
			if (id == "wtRiskAssessmentTable_Wrapper") {
				return ThemeProvider_wt_WebBlockInstance32.wtMainContent.FindControl("wtRiskAssessmentTable_Wrapper");
			}
			if (id == "wtRiskAssessmentTable") {
				return ThemeProvider_wt_WebBlockInstance32.wtMainContent.FindControl("wtRiskAssessmentTable");
			}
			if (id == "wt_TableRecordsHeaderRow52") {
				return ThemeProvider_wt_WebBlockInstance32.wtMainContent.FindControl("wt_TableRecordsHeaderRow52");
			}
			if (id == "wt_Container43") {
				return ThemeProvider_wt_WebBlockInstance32.wtMainContent.FindControl("wt_Container43");
			}
			if (id == "wt_Container36") {
				return ThemeProvider_wt_WebBlockInstance32.wtMainContent.FindControl("wt_Container36");
			}
			if (id == "wt_Container6") {
				return ThemeProvider_wt_WebBlockInstance32.wtMainContent.FindControl("wt_Container6");
			}
			if (id == "RichWidgets_wt_WebBlockInstance2") {
				return ThemeProvider_wt_WebBlockInstance32.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance2");
			}
			if (id == "wt_Container11") {
				return ThemeProvider_wt_WebBlockInstance32.wtMainContent.FindControl("wt_Container11");
			}
			if (id == "RichWidgets_wt_WebBlockInstance31") {
				return ThemeProvider_wt_WebBlockInstance32.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance31");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_RiskAssessments"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_RiskAssessments"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssRiskAssessmentTableListDoDataBind = true;
				Title = "RiskAssessments"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RiskAssessments", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowBackofficeFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotSuperUser("SuperUser role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("VdaIs1p80k+sb0egtMjY2w"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvRefreshRiskAssessmentTable: VarsBag {
			public bool inParamResetFilters;
			public bool inParamResetPagination;
			public lcvRefreshRiskAssessmentTable(bool inParamResetFilters, bool inParamResetPagination) {
				this.inParamResetFilters = inParamResetFilters;
				this.inParamResetPagination = inParamResetPagination;
			}
		}
		/// <summary>
		/// Action <code>CommandRefreshRiskAssessmentTable</code> that represents the Service Studio screen
		///  action <code>RefreshRiskAssessmentTable</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefreshRiskAssessmentTable(HeContext heContext, bool inParamResetFilters, bool inParamResetPagination) {
			CheckPermissions(heContext);
			lcvRefreshRiskAssessmentTable localVars = new lcvRefreshRiskAssessmentTable(inParamResetFilters, inParamResetPagination);
			try {
				if (localVars.inParamResetPagination) {
					// ResetStartIndex
					Actions.ActionList_Navigation_ResetStartIndex(heContext, wtRiskAssessmentTable.ClientID);

				}
				// Query datasetGetRiskAssessments
				{
					int datasetGetRiskAssessments_maxRecords = Math.Max(wtRiskAssessmentTable.StartIndex + wtRiskAssessmentTable.LineCount + 1, 0);
					queryResGetRiskAssessments_outParamList = FuncssPreparation.datasetGetRiskAssessments(heContext, datasetGetRiskAssessments_maxRecords, IterationMultiplicity.Single, out queryResGetRiskAssessments_outParamCount);
				}
				// Refresh Widget (wtRiskAssessmentTable_Wrapper)
				ssRiskAssessmentTableListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtRiskAssessmentTable_Wrapper, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, BuiltInFunction.EncodeHtml(((string) Global.App.OsContext.Session["ExceptionMessage"])), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance32 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance32_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance48 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance48_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Backoffice) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("mET8Vf1z_UW61ZCLDaQfLA")).ssId;
		}
		/// <summary>
		/// wtRiskAssessmentTable_Wrapper Functions
		/// </summary>
		public void cntRiskAssessmentTable_Wrapper_onDataBinding(object sender, System.EventArgs e) {
			cntRiskAssessmentTable_Wrapper_setInlineAttributes(sender, e);
		}
		public string cntRiskAssessmentTable_Wrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntRiskAssessmentTable_Wrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtRiskAssessmentTable_Wrapper)
		/// </summary>
		/// <returns>The Visible State of wtRiskAssessmentTable_Wrapper</returns>
		public bool cntRiskAssessmentTable_Wrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wtRiskAssessmentTable Functions
		/// </summary>
		public void recTableRiskAssessmentTable_onDataBinding(object sender, System.EventArgs e) {
			// widget wtRiskAssessmentTable
			ssRiskAssessmentTableList = queryResGetRiskAssessments_outParamList;
			ssRiskAssessmentTableListDoDataBind = false;
			ssRiskAssessmentTableListDataBound = true;
			wtRiskAssessmentTable.ShowHeader = true;
		}
		public void recTableRiskAssessmentTable_Select(object sender, DataGridCommandEventArgs e) {
			if (e.Item.DataSetIndex != -1) {
				if (ssRiskAssessmentTableList.Length > 0) {
					ssRiskAssessmentTableList.CurrentRec = ssRiskAssessmentTableList[ssRiskAssessmentTableList.CurrentRowNumber];
				}
				if (ssRiskAssessmentTableList.Length > e.Item.DataSetIndex) {
					ssRiskAssessmentTableList.CurrentRec = ssRiskAssessmentTableList[e.Item.DataSetIndex];
					ssRiskAssessmentTableList.CurrentRowNumber = e.Item.DataSetIndex;
				}
			}
			if (e is DataGridCommandAjaxEventArgs) {
				((DataGridCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recTableRiskAssessmentTable_Store(object dataItem, int index) {
			return "";
		}
		public void recTableRiskAssessmentTable_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recTableRiskAssessmentTable_Clear(object sender, EventArgs e) {
			wtRiskAssessmentTable_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recTableRiskAssessmentTable_Rebuild(int startIndex, int lineCount) {
			if (ssRiskAssessmentTableList.Length != -1) {
				wtRiskAssessmentTable_storage.Clear();
				for (int i=startIndex; i<ssRiskAssessmentTableList.Data.Count && i<startIndex+lineCount; i++) {
					recTableRiskAssessmentTable_Store(ssRiskAssessmentTableList.Data[i], wtRiskAssessmentTable_storage.Count);
				}
			}
		}
		public void recTableRiskAssessmentTable_ListRefreshDataBind(object sender, EventArgs e) {
			wtRiskAssessmentTable.ShowHeader = true;
		}
		/// <summary>
		/// Function that returns the list of the wtRiskAssessmentTable widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList getWtRiskAssessmentTableList() {
			if (ssRiskAssessmentTableListDoDataBind) {
				recTableRiskAssessmentTable_onDataBinding(this, null);
			}

			return ssRiskAssessmentTableList;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance18 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance18_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{Student}.[Forenames]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance18
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance18_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshRiskAssessmentTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance30 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance30_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{RiskAssessment}.[LeadStaffMember]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance30
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance30_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshRiskAssessmentTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance17 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance17_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{RiskAssessmentSSPReason}.[Label]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance17
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance17_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshRiskAssessmentTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance34 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance34_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{RiskAssessment}.[RiskAssessmentSSPReasonOther]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance34
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance34_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshRiskAssessmentTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container15 Functions
		/// </summary>
		public void cnt_Container15_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container15_setInlineAttributes(sender, e);
		}
		public string cnt_Container15_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container15_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container15)
		/// </summary>
		/// <returns>The Visible State of wt_Container15</returns>
		public bool cnt_Container15_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance27 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance27_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{RiskAssessment}.[LastUpdatedOn]";
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance27
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance27_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshRiskAssessmentTable(heContext
			, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Link38 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link38)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link38)</returns>
		public string lnk_Link38_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("RiskAssessmentID", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtRiskAssessmentTableList().CurrentRec.ssENRiskAssessment.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "RiskAssessment_Show", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link38)
		/// </summary>
		/// <returns>title of the Link (wt_Link38)</returns>
		public string
		lnk_Link38_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link38)
		/// </summary>
		/// <returns>The Visible State of wt_Link38</returns>
		public bool lnk_Link38_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link38)
		/// </summary>
		/// <returns>The Enabled State of wt_Link38</returns>
		public bool lnk_Link38_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression46 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = d4Sk525idkK+5RUNecOqMQ) Expression:
		///  RiskAssessmentTable.List.Current.Student.StudentReference
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression46() {
			return getWtRiskAssessmentTableList().CurrentRec.ssENStudent.ssStudentReference;
		}
		/// <summary>
		/// wt_InlineExpression29 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = K3cuhEMuE02zkt49BCRveA) Expression:
		///  RiskAssessmentTable.List.Current.RiskAssessment.LeadStaffMember
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression29() {
			return getWtRiskAssessmentTableList().CurrentRec.ssENRiskAssessment.ssLeadStaffMember;
		}
		/// <summary>
		/// wt_InlineExpression10 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = qL7dLX25pkWgbczlsBGPCA) Expression:
		///  RiskAssessmentTable.List.Current.RiskAssessmentSSPReason.Label
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression10() {
			return getWtRiskAssessmentTableList().CurrentRec.ssENRiskAssessmentSSPReason.ssLabel;
		}
		/// <summary>
		/// wt_InlineExpression1 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = BksTB7scKkCCqGLbA2dRyw) Expression:
		///  RiskAssessmentTable.List.Current.RiskAssessment.RiskAssessmentSSPReasonOther
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression1() {
			return getWtRiskAssessmentTableList().CurrentRec.ssENRiskAssessment.ssRiskAssessmentSSPReasonOther;
		}
		/// <summary>
		/// wt_InlineExpression37 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = UcXKxHiGUUqDZuld5puOJw) Expression:
		///  RiskAssessmentTable.List.Current.User_2.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression37() {
			return getWtRiskAssessmentTableList().CurrentRec.ssENUser_2.ssName;
		}
		/// <summary>
		/// wt_Container50 Functions
		/// </summary>
		public void cnt_Container50_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container50_setInlineAttributes(sender, e);
		}
		public string cnt_Container50_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container50_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container50)
		/// </summary>
		/// <returns>The Visible State of wt_Container50</returns>
		public bool cnt_Container50_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression7 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = rzwMIh8DiEaqHQ5iZmb2WQ) Expression:
		///  DateTime_PrettyFormat(RiskAssessmentTable.List.Current.RiskAssessment.LastUpdatedOn)
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression7() {
			return Functions.rssespacerichwidgets_ActionDateTime_PrettyFormat(heContext, getWtRiskAssessmentTableList().CurrentRec.ssENRiskAssessment.ssLastUpdatedOn);
		}
		/// <summary>
		/// wt_InlineExpression14 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = yTemNz+gGE6J6NMnR5Httg) Expression:
		///  RiskAssessmentTable.List.Current.User.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression14() {
			return getWtRiskAssessmentTableList().CurrentRec.ssENUser.ssName;
		}
		/// <summary>
		/// wt_Container43 Functions
		/// </summary>
		public void cnt_Container43_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container43_setInlineAttributes(sender, e);
		}
		public string cnt_Container43_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container43_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container43)
		/// </summary>
		/// <returns>The Visible State of wt_Container43</returns>
		public bool cnt_Container43_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container36 Functions
		/// </summary>
		public void cnt_Container36_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container36_setInlineAttributes(sender, e);
		}
		public string cnt_Container36_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container36_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container36)
		/// </summary>
		/// <returns>The Visible State of wt_Container36</returns>
		public bool cnt_Container36_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container6 Functions
		/// </summary>
		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container6_setInlineAttributes(sender, e);
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container6_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance2 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance2_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Counter) sender;
			widget.inParamStartIndex = Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtRiskAssessmentTable.ClientID, true, -1);
			widget.inParamTotalRowCount = queryResGetRiskAssessments_outParamCount;
			widget.inParamLineCount = wtRiskAssessmentTable.RtWidget.LineCount;
		}
		/// <summary>
		/// wt_Container11 Functions
		/// </summary>
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container11_setInlineAttributes(sender, e);
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container11_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance31 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_Navigation) sender;
			widget.inParamListWidgetId = wtRiskAssessmentTable.ClientID;
			widget.inParamLineCount = wtRiskAssessmentTable.RtWidget.LineCount;
			widget.inParamTotalRowCount = queryResGetRiskAssessments_outParamCount;
			widget.inParamMaxPageNumbers = 5;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance31
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance31_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshRiskAssessmentTable(heContext
			, false, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}


		public static class FuncCommandRefreshRiskAssessmentTable {
		}
		public static class FuncssPreparation {

			private static void datasetGetRiskAssessmentsReadDB(ref RCStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecord rec, IDataReader r) {
				int index = 0;
				rec.ssENRiskAssessment.Read(r, ref index);
				rec.ssENRiskAssessmentSSPReason.Read(r, ref index);
				rec.ssENStudent.Read(r, ref index);
				rec.ssENUser.Read(r, ref index);
				rec.ssENUser_2.Read(r, ref index);
				rec.ssStudentReference = r.ReadTextEntityReference(index++, "StudentStudentReferenceUserUser_2RiskAssessmentSSPReasonRiskAssessmentRecord.StudentReference", "");
			}
			/// <summary>
			/// Query Function "GetRiskAssessments" of Action "Preparation"
			/// </summary>
			public static RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList datasetGetRiskAssessments(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Single {RiskAssessmentTable}
				// Refresh Query OjBv2Wf5ykWp4QDpOhzv5A Iterations: Single {RiskAssessmentTable}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				string sql = "";
				string sqlCount = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENRiskAssessment.[ID] o1, NULL o2, ENRiskAssessment.[LEADSTAFFMEMBER] o3, NULL o4, ENRiskAssessment.[RISKASSESSMENTSSPREASONOTHER] o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, ENRiskAssessment.[LASTUPDATEDON] o22, NULL o23, ENRiskAssessmentSSPReason.[LABEL] o24, NULL o25, NULL o26, ENStudent.[STUDENTREFERENCE] o27, NULL o28, NULL o29, NULL o30, NULL o31, NULL o32, NULL o33, NULL o34, NULL o35, NULL o36, NULL o37, NULL o38, NULL o39, NULL o40, NULL o41, NULL o42, NULL o43, NULL o44, NULL o45, NULL o46, NULL o47, NULL o48, NULL o49, NULL o50, NULL o51, NULL o52, NULL o53, NULL o54, ENUser.[NAME] o55, NULL o56, NULL o57, NULL o58, NULL o59, NULL o60, NULL o61, NULL o62, NULL o63, NULL o64, ENUser_2.[NAME] o65, NULL o66, NULL o67, NULL o68, NULL o69, NULL o70, NULL o71, NULL o72, NULL o73, ENStudent.[STUDENTREFERENCE] o74");
				fromBuilder.Append(" FROM (((({RiskAssessment} ENRiskAssessment Left JOIN {Student} ENStudent ON (ENRiskAssessment.[STUDENTREFERENCE] = ENStudent.[STUDENTREFERENCE]))  Left JOIN {RiskAssessmentSSPReason} ENRiskAssessmentSSPReason ON (ENRiskAssessment.[RISKASSESSMENTSSPREASON] = ENRiskAssessmentSSPReason.[ID]))  Left JOIN {User} ENUser ON (ENRiskAssessment.[CREATEDBY] = ENUser.[ID]))  Left JOIN {User} ENUser_2 ON (ENRiskAssessment.[RISKASSESSMENTCOMPLETEDBY] = ENUser_2.[ID])) ");
				whereBuilder.Append(" WHERE (ENRiskAssessment.[STUDENTREFERENCE] = ENStudent.[STUDENTREFERENCE])");
				orderByBuilder.Append(" ORDER BY ENRiskAssessment.[LASTUPDATEDON] DESC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCount = "SELECT COUNT(1) " + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString();
				sqlCount = AppUtils.Instance.ReplaceEntityReferences(heContext, sqlCount);
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList outParamList = new RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList();
				if (multiplicity != IterationMultiplicity.Multiple) {
					outParamList.AlternateReadDBMethod = datasetGetRiskAssessmentsReadDB;
				}
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[5];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				opt[1] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[2] = new BitArray(new bool[] {
					false, true, false, true, true, true, true, true, true, true, true
				}
				);
				opt[3] = new BitArray(new bool[] {
					true, false, true, true
				}
				);
				opt[4] = new BitArray(new bool[] {
					false, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList _tmp = new RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList();
					_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentsReadDB;
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessments.List");
						outParamList = (RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						if (maxRecords > 0 && outParamList.Length == maxRecords)
						outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessments.Count", false));
						else
						outParamCount = outParamList.Length;
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessments.Count", false));
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessments.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList _tmp = new RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList();
						_tmp.AlternateReadDBMethod = datasetGetRiskAssessmentsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessments.List");
							outParamList = (RLStudentStudentIdentifierUserUserRiskAssessmentSSPReasonRiskAssessmentRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessments.Count", false));
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							outParamCount = Convert.ToInt32(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessments.Count", false));
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessments.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetUserById" of Action "Preparation"
			/// </summary>
			public static RLUserRecordList datasetGetUserById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM {User} ENUser");
				whereBuilder.Append(" WHERE (ENUser.[IS_ACTIVE] = 1) AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENUser.[ID] = @qpinP) AND (ENUser.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENUser.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENUser.[NAME] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserRecordList outParamList = new RLUserRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserRecordList _tmp = new RLUserRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RiskAssessments.Preparation.GetUserById.List");
						outParamList = (RLUserRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RiskAssessments.Preparation.GetUserById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserRecordList _tmp = new RLUserRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RiskAssessments.Preparation.GetUserById.List");
							outParamList = (RLUserRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RiskAssessments.Preparation.GetUserById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetRiskAssessmentKeepInformedsByRiskAssessment" of Action "Preparation"
			/// </summary>
			public static RLRiskAssessmentKeepInformedRecordList datasetGetRiskAssessmentKeepInformedsByRiskAssessment(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENRiskAssessmentKeepInformed.[USER] o3");
				fromBuilder.Append(" FROM {RiskAssessmentKeepInformed} ENRiskAssessmentKeepInformed");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENRiskAssessmentKeepInformed.[RISKASSESSMENT] = @qpinP) AND (ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENRiskAssessmentKeepInformed.[RISKASSESSMENT] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLRiskAssessmentKeepInformedRecordList outParamList = new RLRiskAssessmentKeepInformedRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLRiskAssessmentKeepInformedRecordList _tmp = new RLRiskAssessmentKeepInformedRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
						outParamList = (RLRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLRiskAssessmentKeepInformedRecordList _tmp = new RLRiskAssessmentKeepInformedRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
							outParamList = (RLRiskAssessmentKeepInformedRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BackofficeFlow.RiskAssessments.Preparation.GetRiskAssessmentKeepInformedsByRiskAssessment.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "RiskAssessments"; ssRiskAssessmentTableListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RiskAssessments", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "RiskAssessments", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			if (IsAjaxRequest) {
				recTableRiskAssessmentTable_Rebuild((ssRiskAssessmentTableListDataBound ? wtRiskAssessmentTable.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtRiskAssessmentTable.LineCount);
			}
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				recTableRiskAssessmentTable_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
