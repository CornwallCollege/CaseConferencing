/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowCourses {

	public class ScrnCourse_SMS: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnCourse_SMS(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance41
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance41;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container40;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container20;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtEmail_BodyValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtEmail_BodyValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container49;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container34;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCDocument_ListCommunicationRecord ssEditRecord1Record = new RCDocument_ListCommunicationRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtEditRecord1_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtEmail_Body");
			return res;
		}

		/// <summary>
		/// Variable (wt_Link55) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link55;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container21;
		protected OutSystems.HubEdition.WebWidgets.Container wtLearnerListWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container63;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container35;
		private RLStudentBooleanTextRecordList _ssLearnerListList = new RLStudentBooleanTextRecordList();
		public RLStudentBooleanTextRecordList ssLearnerListList {
			get {
				return _ssLearnerListList; 
			}
			set {
				_ssLearnerListList = value;
				wtLearnerList.DataSource = value;
				ssLearnerListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtLearnerList;
		public ArrayList wtLearnerList_storage = new ArrayList();
		protected bool ssLearnerListList_notUsedYet = true;
		protected bool ssLearnerListListDoDataBind;
		protected bool ssLearnerListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container42;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container53;
		/// <summary>
		/// Variable (wt_Link50) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link50;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container16;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container66;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container47;
		/// <summary>
		/// Variable "True" if the Widget wt_If32
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If32T;

		/// <summary>
		/// Variable "True" if the Widget wt_If32
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If32F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		/// <summary>
		/// Variable (wtlnkTo) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtlnkTo;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("FeckNe9wREaOHAaVk_W_NA", "Course_SMS");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "FeckNe9wREaOHAaVk_W_NA", "Course_SMS");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "FeckNe9wREaOHAaVk_W_NA", "Course_SMS");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "FeckNe9wREaOHAaVk_W_NA", "Course_SMS");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "FeckNe9wREaOHAaVk_W_NA", "Course_SMS");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnCourse_SMS() {
		}


		RLGroupRecordList queryResGetGroup2s_outParamList = new RLGroupRecordList();
		int queryResGetGroup2s_outParamCount = 0;
		int resUserCheck_outParamPermissionType = 0;
		RLStudentBooleanTextRecordList queryResGetStudents_outParamList = new RLStudentBooleanTextRecordList();
		int queryResGetStudents_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("S1Ew6xcAMkKJzXiUGmQuzQ")).ssId, out resUserCheck_outParamPermissionType);
			if ((resUserCheck_outParamPermissionType!=ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId)) {
				// Destination = ExternalURL

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				}

			} else {
				if ((inParamCourseCode== "")) {
					// Destination = CourseList

					if (OSPage.IsAjaxRequest) {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "DbUqNvNFZU+wi7tlTyKtzw";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CourseList"] = screenParameters;
							if (OSPage.IsAjaxRequest) {
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CourseList.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								Server.Transfer("CourseList.aspx");
							}
							return;

						}
					} else {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "DbUqNvNFZU+wi7tlTyKtzw";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CourseList"] = screenParameters;
							if (OSPage.IsAjaxRequest) {
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CourseList.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								Server.Transfer("CourseList.aspx");
							}
							return;

						}
					}

				} else {
					// Query QueryGetStudents
					int QueryGetStudents_maxRecords = Math.Max(wtLearnerList.StartIndex + wtLearnerList.LineCount + 1, 0);
					queryResGetStudents_outParamList = FuncssPreparation.QueryGetStudents(heContext, QueryGetStudents_maxRecords, IterationMultiplicity.Multiple, out queryResGetStudents_outParamCount, inParamCourseCode
					);
					// Query datasetGetGroup2s
					int datasetGetGroup2s_maxRecords = 0;
					queryResGetGroup2s_outParamList = FuncssPreparation.datasetGetGroup2s(heContext, datasetGetGroup2s_maxRecords, IterationMultiplicity.Never, out queryResGetGroup2s_outParamCount, inParamCourseCode
					);

				}

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "Course_SMS.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "Course_SMS.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamCourseCode!= "")) {
				parameters.Add(new Pair<string, string>("CourseCode", HttpUtility.UrlEncode(inParamCourseCode, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Course_SMS", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Course_SMS", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance41 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance41");
			wt_Container40 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container40");
			wt_Container28 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container28");
			wt_Container20 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container20");
			wt_Container49 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container49");
			wt_Container4 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container4");
			wt_Container34 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container34");
			wt_Link55 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link55");
			if (this.wt_Link55 != null) {
				this.wt_Link55.Click += new System.EventHandler(this.wt_Link55_Click);
			}
			wt_Container21 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container21");
			wtLearnerListWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtLearnerListWrapper");
			wt_Container63 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container63");
			wt_Container1 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container1");
			wt_Container19 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container19");
			wt_Container35 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container35");
			wtLearnerList = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtLearnerList");
			wtLearnerList.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtLearnerList.ClientID, false, -1);
			wtLearnerList.LineCountExpression = () => queryResGetStudents_outParamList.Length;
			wtLearnerList.EmptyMessageExpression = () => "No items to show...";
			wt_Container18 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container18");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance56") {
				return ThemeProvider_wt_WebBlockInstance41.wtHelpUpdate.FindControl("wt_WebBlockInstance56");
			}
			if (id == "ThemeProvider_wt_WebBlockInstance17") {
				return ThemeProvider_wt_WebBlockInstance41.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance17");
			}
			if (id == "RichWidgets_wt_WebBlockInstance5") {
				return ThemeProvider_wt_WebBlockInstance41.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance5");
			}
			if (id == "wt_Text44") {
				return ThemeProvider_wt_WebBlockInstance41.wtTitle.FindControl("wt_Text44");
			}
			if (id == "wt_InlineExpression52") {
				return ThemeProvider_wt_WebBlockInstance41.wtTitle.FindControl("wt_InlineExpression52");
			}
			if (id == "wt_Container40") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container40");
			}
			if (id == "wt_Container28") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container28");
			}
			if (id == "wt_Text24") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Text24");
			}
			if (id == "wt_Container20") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container20");
			}
			if (id == "wtEmail_Body") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wtEmail_Body");
			}
			if (id == "wt_Container49") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container49");
			}
			if (id == "wt_Container4") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container4");
			}
			if (id == "wt_Container34") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container34");
			}
			if (id == "Hunspell_wt_WebBlockInstance15") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("Hunspell_wt_WebBlockInstance15");
			}
			if (id == "wtEditRecord1") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wtEditRecord1");
			}
			if (id == "wt_Link55") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Link55");
			}
			if (id == "wt_Container21") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container21");
			}
			if (id == "RichWidgets_wt_WebBlockInstance27") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance27");
			}
			if (id == "wt_Text37") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Text37");
			}
			if (id == "wtLearnerListWrapper") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wtLearnerListWrapper");
			}
			if (id == "wt_Container63") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container63");
			}
			if (id == "wt_Container1") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container1");
			}
			if (id == "wt_Text48") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Text48");
			}
			if (id == "wt_Container19") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container19");
			}
			if (id == "wt_Text51") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Text51");
			}
			if (id == "wt_Container35") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container35");
			}
			if (id == "wtLearnerList") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wtLearnerList");
			}
			if (id == "wt_Container18") {
				return ThemeProvider_wt_WebBlockInstance41.wtMainContent.FindControl("wt_Container18");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_SMS"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamCourseCode = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_SMS"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["CourseCode"] != null) {
						inParamCourseCode = Request.QueryString["CourseCode"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["CourseCode"] != null) {
						inParamCourseCode = Request.Form["CourseCode"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtEditRecord1_onDataBindingDataSource(this.FindControl("wtEditRecord1"), null);
				}
				ssLearnerListListDoDataBind = true;
				Title = "Course SMS"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_SMS", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowCourses.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotCaseConferencingBackoffice("CaseConferencingBackoffice role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("FeckNe9wREaOHAaVk_W_NA"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvOnNotify: VarsBag {
			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public lcvOnNotify() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotify localVars = new lcvOnNotify();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				getWtLearnerListList().CurrentRec.ssSTText.ssValue = localVars.resNotifyWidgetGetMessage_outParamMessage; // LearnerList.List.Current.Text.Value = NotifyWidgetGetMessage.Message
				// Refresh Widget (wtLearnerList)
				((OSPageViewState) Page).AjaxRefresh(wtLearnerList, getWtLearnerListList().CurrentRowNumber, "None", "Refresh", false, null, StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSend: VarsBag {
			/// <summary>
			/// Variable <code>varLcCommunication</code> that represents the Service Studio local variable
			///  <code>Communication</code> <p>Description: </p>
			/// </summary>
			public RCCommunicationRecord varLcCommunication = new RCCommunicationRecord(null);

			public bool resTwilioSMS_outParamSuccess = false;
			public string resTwilioSMS_outParamErrorMessage = "";
			public string resTwilioSMS_outParamSmsId = "";

			public int resCreateCommunication_outParamId = 0;

			public int resStudentLog_Create_outParamStudentLogId = 0;

			public lcvSend() {
			}
		}
		/// <summary>
		/// Action <code>CommandSend</code> that represents the Service Studio screen action <code>Send</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSend(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSend localVars = new lcvSend();
			try {
				// Foreach LearnerList.List
				getWtLearnerListList().StartIteration();
				try {
					while (! getWtLearnerListList().Eof) {
						if (getWtLearnerListList().CurrentRec.ssSTBoolean.ssValue) {
							// TwilioSMS
							Actions.ActionTwilioSMS(heContext, getWtLearnerListList().CurrentRec.ssSTText.ssValue, ssEditRecord1Record.ssENCommunication.ssBody, Functions.rssextensionhttprequesthandler_ActionMakeAbsoluteURL(heContext, Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "TwilioCallBack", "CaseConferencing", "", "", "", "", "", "", "", "", "", "")), out localVars.resTwilioSMS_outParamSuccess, out localVars.resTwilioSMS_outParamErrorMessage, out localVars.resTwilioSMS_outParamSmsId);
							if (localVars.resTwilioSMS_outParamSuccess) {
								// Set Comm
								localVars.varLcCommunication.ssENCommunication.ssStudentId = getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference; // Communication.Communication.StudentId = LearnerList.List.Current.Student.StudentReference
								localVars.varLcCommunication.ssENCommunication.ssTypeId = ENCommunicationTypeEntity.GetRecordByKey(ObjectKey.Parse("tsEsYi+2z0Sg3OtV7F+Jdg")).ssId; // Communication.Communication.TypeId = SMS
								localVars.varLcCommunication.ssENCommunication.ssTo = getWtLearnerListList().CurrentRec.ssSTText.ssValue; // Communication.Communication.To = LearnerList.List.Current.Text.Value
								localVars.varLcCommunication.ssENCommunication.ssBody = ssEditRecord1Record.ssENCommunication.ssBody; // Communication.Communication.Body = EditRecord1.Record.Communication.Body
								localVars.varLcCommunication.ssENCommunication.ssCreatedOn = BuiltInFunction.CurrDateTime(); // Communication.Communication.CreatedOn = CurrDateTime
								localVars.varLcCommunication.ssENCommunication.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // Communication.Communication.CreatedBy = UserID
								localVars.varLcCommunication.ssENCommunication.ssMsgId = localVars.resTwilioSMS_outParamSmsId; // Communication.Communication.MsgId = TwilioSMS.SmsId
								// CreateCommunication
								ExtendedActions.CreateCommunication(heContext, localVars.varLcCommunication, out localVars.resCreateCommunication_outParamId);
								// StudentLog_Create
								Actions.ActionStudentLog_Create(heContext, getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference, ((int) Global.App.OsContext.Session["UserID"]), ssEditRecord1Record.ssENCommunication.ssBody, ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("pK8b45qqpk6FbvMyj492lQ")).ssLogType, ssEditRecord1Record.ssENCommunication.ssBody, BuiltInFunction.NullTextIdentifier(), false, 0, ("Text sent to " +getWtLearnerListList().CurrentRec.ssSTText.ssValue), "", 0, localVars.resCreateCommunication_outParamId, "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
								// Audit
								ExtendedActions.Audit(heContext, ((getWtLearnerListList().CurrentRec.ssSTText.ssValue+ " - ") +localVars.resTwilioSMS_outParamSmsId), "SMSSent");

							} else {
								// ErrorFeedback
								Actions.ActionFeedback_Message(heContext, (((BuiltInFunction.Index(localVars.resTwilioSMS_outParamErrorMessage, "violates a blacklist rule", 0, false, true) >0)) ?((("Learner : " +getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference) + " has requested not to receive any SMS messages. Message not sent.")):(localVars.resTwilioSMS_outParamErrorMessage)), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
								// Update Screen
								return true;

							}

						}
						getWtLearnerListList().Advance();
					}
				} finally {
					getWtLearnerListList().EndIteration();
				}
				// SMS
				Actions.ActionFeedback_Message(heContext, "Text messages sent.", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
				// Destination = CourseList

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "DbUqNvNFZU+wi7tlTyKtzw";
						ArrayList screenParameters = new ArrayList();
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CourseList"] = screenParameters;
						string sURLQuery = null;
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CourseList.aspx" + sURLQuery;
						((OSPageViewState) Page).RedirectLocation = sURL;
						return false;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "DbUqNvNFZU+wi7tlTyKtzw";
						ArrayList screenParameters = new ArrayList();
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CourseList"] = screenParameters;
						Server.Transfer("CourseList.aspx");
						return false;

					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance41 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance41_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance56 Functions
		/// </summary>
		public void webBlck_WebBlockInstance56_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate widget = (ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance17 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance17_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main) sender;
			widget.inParamActiveMenuItem = (((inParamCourseCode== "")) ?(ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("Zf1l6h4nhEKi9bGDu571Zw")).ssId):(ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("7qeG0AIy00KFvJsqdEaGOg")).ssId));
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance5 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance5_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("jyrPGISlYEa51urd2etDWQ")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression52 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = KisjuyJTWEOM4qmgXyS1yw) Expression:
		///  GetGroup2s.List.Current.Group.GroupDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression52() {
			return queryResGetGroup2s_outParamList.CurrentRec.ssENGroup.ssGroupDescription;
		}
		/// <summary>
		/// wt_Container40 Functions
		/// </summary>
		public void cnt_Container40_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container40_setInlineAttributes(sender, e);
		}
		public string cnt_Container40_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container40_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container40)
		/// </summary>
		/// <returns>The Visible State of wt_Container40</returns>
		public bool cnt_Container40_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container28 Functions
		/// </summary>
		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container28_setInlineAttributes(sender, e);
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container28_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Text24 Functions
		/// </summary>
		public void wt_Text24_onDataBinding(object sender, System.EventArgs e) {
			wt_Text24_setInlineAttributes(sender, e);
		}
		public string wt_Text24_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-weight:bold;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Container20 Functions
		/// </summary>
		public void cnt_Container20_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container20_setInlineAttributes(sender, e);
		}
		public string cnt_Container20_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container20_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container20)
		/// </summary>
		/// <returns>The Visible State of wt_Container20</returns>
		public bool cnt_Container20_isVisible() {
			return true;
		}

		/// <summary>
		/// wtEmail_Body Functions
		/// </summary>
		public void inputwtEmail_Body_onDataBinding(object sender, System.EventArgs e) {
			inputwtEmail_Body_setInlineAttributes(sender, e);
		}
		public string inputwtEmail_Body_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size: 12px;fline-height:13px";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtEmail_Body_input_value() {
			if (("" !=ssEditRecord1Record.ssENCommunication.ssBody)) {
				return ssEditRecord1Record.ssENCommunication.ssBody;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtEmail_Body");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENCommunication.ssBody;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtEmail_Body_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENCommunication.ssBody = ""; 
				} else {
					ssEditRecord1Record.ssENCommunication.ssBody = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENCommunication.ssBody = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtEmail_Body)
		/// </summary>
		/// <returns>The Visible State of wtEmail_Body</returns>
		public bool inputwtEmail_Body_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtEmail_Body)
		/// </summary>
		/// <returns>The Enabled State of wtEmail_Body</returns>
		public bool inputwtEmail_Body_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtEmail_Body)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtEmail_Body</returns>
		public bool inputwtEmail_Body_isMandatory() {
			return true;
		}

		/// <summary>
		/// Gets the prompt of the input (wtEmail_Body)
		/// </summary>
		/// <returns>Prompt of the Input (wtEmail_Body)</returns>
		public string inputwtEmail_Body_getPrompt() {
			return "Message";
		}
		/// <summary>
		/// wt_Container49 Functions
		/// </summary>
		public void cnt_Container49_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container49_setInlineAttributes(sender, e);
		}
		public string cnt_Container49_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container49_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container49)
		/// </summary>
		/// <returns>The Visible State of wt_Container49</returns>
		public bool cnt_Container49_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container4 Functions
		/// </summary>
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container4_setInlineAttributes(sender, e);
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container4_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container34 Functions
		/// </summary>
		public void cnt_Container34_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container34_setInlineAttributes(sender, e);
		}
		public string cnt_Container34_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container34_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container34)
		/// </summary>
		/// <returns>The Visible State of wt_Container34</returns>
		public bool cnt_Container34_isVisible() {
			return true;
		}

		/// <summary>
		/// Hunspell_wt_WebBlockInstance15 Functions
		/// </summary>
		public void Hunspell_webBlck_WebBlockInstance15_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
			widget.inParamTextInputId = this.FindControl("wtEmail_Body").ClientID;
			widget.inParamExtraStyle = "";
			widget.inParamInPopupWindow = true;
		}
		/// <summary>
		/// wtEditRecord1 Functions
		/// </summary>
		public void wtEditRecord1_onDataBindingDataSource(object sender, System.EventArgs e) {
		}
		/// <summary>
		/// wt_Link55 Functions
		/// </summary>
		public void lnk_Link55_onDataBinding(object sender, System.EventArgs e) {
			string msg = OutSystems.HubEdition.RuntimePlatform.RuntimePlatformUtils.JavaScriptEscString("Are you sure?");
			((OutSystems.HubEdition.WebWidgets.LinkButton) sender).ConfirmationMessage = msg;
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link55_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandSend(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link55)
		/// </summary>
		/// <returns>title of the Link (wt_Link55)</returns>
		public string
		lnk_Link55_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link55)
		/// </summary>
		/// <returns>The Visible State of wt_Link55</returns>
		public bool lnk_Link55_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link55)
		/// </summary>
		/// <returns>The Enabled State of wt_Link55</returns>
		public bool lnk_Link55_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container21 Functions
		/// </summary>
		public void cnt_Container21_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container21_setInlineAttributes(sender, e);
		}
		public string cnt_Container21_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "height: 17px;line-height: 17px;position:absolute;right:0px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container21_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container21)
		/// </summary>
		/// <returns>The Visible State of wt_Container21</returns>
		public bool cnt_Container21_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance27 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance27_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Cpl3iVqzzUCZj6kMrYJG6g")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtLearnerListWrapper Functions
		/// </summary>
		public void cntLearnerListWrapper_onDataBinding(object sender, System.EventArgs e) {
			cntLearnerListWrapper_setInlineAttributes(sender, e);
		}
		public string cntLearnerListWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntLearnerListWrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtLearnerListWrapper)
		/// </summary>
		/// <returns>The Visible State of wtLearnerListWrapper</returns>
		public bool cntLearnerListWrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container63 Functions
		/// </summary>
		public void cnt_Container63_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container63_setInlineAttributes(sender, e);
		}
		public string cnt_Container63_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container63_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container63)
		/// </summary>
		/// <returns>The Visible State of wt_Container63</returns>
		public bool cnt_Container63_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container1 Functions
		/// </summary>
		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container1_setInlineAttributes(sender, e);
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container1_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container19 Functions
		/// </summary>
		public void cnt_Container19_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container19_setInlineAttributes(sender, e);
		}
		public string cnt_Container19_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container19_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container19)
		/// </summary>
		/// <returns>The Visible State of wt_Container19</returns>
		public bool cnt_Container19_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container35 Functions
		/// </summary>
		public void cnt_Container35_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container35_setInlineAttributes(sender, e);
		}
		public string cnt_Container35_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container35_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container35)
		/// </summary>
		/// <returns>The Visible State of wt_Container35</returns>
		public bool cnt_Container35_isVisible() {
			return true;
		}

		/// <summary>
		/// wtLearnerList Functions
		/// </summary>
		public void recListLearnerList_onDataBinding(object sender, System.EventArgs e) {
			// widget wtLearnerList
			ssLearnerListList = queryResGetStudents_outParamList;
			ssLearnerListListDoDataBind = false;
			ssLearnerListListDataBound = true;
		}
		public void recListLearnerList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssLearnerListList.Length > 0) {
					ssLearnerListList.CurrentRec = ssLearnerListList[ssLearnerListList.CurrentRowNumber];
				}
				if (ssLearnerListList.Length > e.SelectedIndex) {
					ssLearnerListList.CurrentRec = ssLearnerListList[e.SelectedIndex];
					ssLearnerListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListLearnerList_Store(object dataItem, int index) {
			RCStudentBooleanTextRecord tmprec = (RCStudentBooleanTextRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENStudent.ssStudentReference == "" ?(object) null: tmprec.ssENStudent.ssStudentReference);
			tmpFields.Add(tmprec.ssENStudent.ssForenames == "" ?(object) null: tmprec.ssENStudent.ssForenames);
			tmpFields.Add(tmprec.ssENStudent.ssSurname == "" ?(object) null: tmprec.ssENStudent.ssSurname);
			tmpFields.Add(tmprec.ssENStudent.ssStudentPhotoURL == "" ?(object) null: tmprec.ssENStudent.ssStudentPhotoURL);
			tmpFields.Add(tmprec.ssENStudent.ssHomeTelephone == "" ?(object) null: tmprec.ssENStudent.ssHomeTelephone);
			tmpFields.Add(tmprec.ssENStudent.ssMobilePhone == "" ?(object) null: tmprec.ssENStudent.ssMobilePhone);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENStudent.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENStudent.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, true, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(tmprec.ssSTBoolean.ssValue == false?(object) null: tmprec.ssSTBoolean.ssValue);
			tmpFields.Add(tmprec.ssSTText.ssValue == "" ?(object) null: tmprec.ssSTText.ssValue);
			if (index < wtLearnerList_storage.Count) {
				wtLearnerList_storage[index] = tmpFields;
			} else {
				wtLearnerList_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListLearnerList_Restore() {

			#region fetch ssLearnerListList.

			// Read the needed fields of ssLearnerListList from storewtLearnerList_list
			ssLearnerListList = new RLStudentBooleanTextRecordList();
			ArrayList storewtLearnerList_list;
			storewtLearnerList_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtLearnerList_list", null);
			if (storewtLearnerList_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtLearnerList_list in storewtLearnerList_list) {
					if (tmpFieldswtLearnerList_list != null) {
						// Aux current record variable
						RCStudentBooleanTextRecord tmpAuxCurrentRecordwtLearnerList_list = new RCStudentBooleanTextRecord(null);
						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssStudentReference = (string) (tmpFieldswtLearnerList_list[0] == null ? "": tmpFieldswtLearnerList_list[0]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssForenames = (string) (tmpFieldswtLearnerList_list[1] == null ? "": tmpFieldswtLearnerList_list[1]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssSurname = (string) (tmpFieldswtLearnerList_list[2] == null ? "": tmpFieldswtLearnerList_list[2]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssStudentPhotoURL = (string) (tmpFieldswtLearnerList_list[3] == null ? "": tmpFieldswtLearnerList_list[3]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssHomeTelephone = (string) (tmpFieldswtLearnerList_list[4] == null ? "": tmpFieldswtLearnerList_list[4]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssMobilePhone = (string) (tmpFieldswtLearnerList_list[5] == null ? "": tmpFieldswtLearnerList_list[5]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list[6]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list[7]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTBoolean.ssValue = (bool) (tmpFieldswtLearnerList_list[8] == null ? false: tmpFieldswtLearnerList_list[8]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTText.ssValue = (string) (tmpFieldswtLearnerList_list[9] == null ? "": tmpFieldswtLearnerList_list[9]);

						ssLearnerListList.Append(tmpAuxCurrentRecordwtLearnerList_list);
					}
				}
			}
			ssLearnerListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssLearnerListList runtime properties state.


			if (storewtLearnerList_list.Count > 0) {
				ssLearnerListList.RestoreRecordListState(storewtLearnerList_list.Count - 1, false);
			} else {
				ssLearnerListList.CurrentRowNumber = 0;
			}

			#endregion

			wtLearnerList_storage = storewtLearnerList_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListLearnerList_Clear(object sender, EventArgs e) {
			wtLearnerList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListLearnerList_Rebuild(int startIndex, int lineCount) {
			if (ssLearnerListList.Length != -1) {
				wtLearnerList_storage.Clear();
				for (int i=startIndex; i<ssLearnerListList.Data.Count && i<startIndex+lineCount; i++) {
					recListLearnerList_Store(ssLearnerListList.Data[i], wtLearnerList_storage.Count);
				}
			}
		}
		public void recListLearnerList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtLearnerList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLStudentBooleanTextRecordList getWtLearnerListList() {
			if (ssLearnerListListDoDataBind) {
				recListLearnerList_onDataBinding(this, null);
			}

			return ssLearnerListList;
		}
		/// <summary>
		/// wt_Container42 Functions
		/// </summary>
		public void cnt_Container42_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container42_setInlineAttributes(sender, e);
		}
		public string cnt_Container42_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "border-left: solid 1px #DADADA;position:relative";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container42_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container42)
		/// </summary>
		/// <returns>The Visible State of wt_Container42</returns>
		public bool cnt_Container42_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container30 Functions
		/// </summary>
		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container30_setInlineAttributes(sender, e);
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container30_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container8 Functions
		/// </summary>
		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container8_setInlineAttributes(sender, e);
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container8_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Image36 Functions
		/// </summary>
		public void img_Image36_onDataBinding(object sender, System.EventArgs e) {
			img_Image36_setInlineAttributes(sender, e);
		}
		public string img_Image36_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("onerror", "this.src=\'img/missingphoto.png\';" .ToString());
			return "";
		}

		/// <summary>
		/// Gets the URL of the image (wt_Image36)
		/// </summary>
		/// <returns>URL of the Image (wt_Image36)</returns>
		public string img_Image36_getURL() {
			string url = getWtLearnerListList().CurrentRec.ssENStudent.ssStudentPhotoURL;
			url = url.Replace("&amp;", "&");
			return url; 
		}
		/// <summary>
		/// wt_Container11 Functions
		/// </summary>
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container11_setInlineAttributes(sender, e);
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-left:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container11_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container53 Functions
		/// </summary>
		public void cnt_Container53_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container53_setInlineAttributes(sender, e);
		}
		public string cnt_Container53_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container53_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container53)
		/// </summary>
		/// <returns>The Visible State of wt_Container53</returns>
		public bool cnt_Container53_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Link50 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link50)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link50)</returns>
		public string lnk_Link50_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsOverview", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link50)
		/// </summary>
		/// <returns>title of the Link (wt_Link50)</returns>
		public string
		lnk_Link50_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link50)
		/// </summary>
		/// <returns>The Visible State of wt_Link50</returns>
		public bool lnk_Link50_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link50)
		/// </summary>
		/// <returns>The Enabled State of wt_Link50</returns>
		public bool lnk_Link50_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression54 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 2Tf1wtKH00q8z2b3PvQHxw) Expression: ToUpper + ", " +
		///  LearnerList.List.Current.Student.Forenames + "("
		/// + LearnerList.List.Current.Student.StudentReference + ")"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression54() {
			return (((((BuiltInFunction.ToUpper(getWtLearnerListList().CurrentRec.ssENStudent.ssSurname) + ", ") +getWtLearnerListList().CurrentRec.ssENStudent.ssForenames) + "(") +getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference) + ")");
		}
		/// <summary>
		/// wt_Container13 Functions
		/// </summary>
		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container13_setInlineAttributes(sender, e);
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size: 12px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container13_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container29 Functions
		/// </summary>
		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container29_setInlineAttributes(sender, e);
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("title", "Home" .ToString());
			if (!cnt_Container29_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance26 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance26_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("CzktVEoQIUavNdPuJna99w")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression65 Functions
		/// </summary>
		public void expression_InlineExpression65_onDataBinding(object sender, System.EventArgs e) {
			expression_InlineExpression65_setInlineAttributes(sender, e);
		}
		public string expression_InlineExpression65_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-left:4px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Function to dump expression (Key = SSsZ+Ja4A0q86p3kpDldYw) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression65() {
			return (((getWtLearnerListList().CurrentRec.ssENStudent.ssHomeTelephone!= "")) ?(getWtLearnerListList().CurrentRec.ssENStudent.ssHomeTelephone):("(no telephone)"));
		}
		/// <summary>
		/// wt_Container16 Functions
		/// </summary>
		public void cnt_Container16_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container16_setInlineAttributes(sender, e);
		}
		public string cnt_Container16_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("title", "Mobile" .ToString());
			if (!cnt_Container16_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container16)
		/// </summary>
		/// <returns>The Visible State of wt_Container16</returns>
		public bool cnt_Container16_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance3 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance3_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("cAxZk7J+AEu6LHunYrmadQ")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression10 Functions
		/// </summary>
		public void expression_InlineExpression10_onDataBinding(object sender, System.EventArgs e) {
			expression_InlineExpression10_setInlineAttributes(sender, e);
		}
		public string expression_InlineExpression10_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-left:4px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Function to dump expression (Key = p1sPMk7yA0Kk4KbzcK3irg) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression10() {
			return (((getWtLearnerListList().CurrentRec.ssENStudent.ssMobilePhone!= "")) ?(getWtLearnerListList().CurrentRec.ssENStudent.ssMobilePhone):("(no mobile)"));
		}
		/// <summary>
		/// wt_Container66 Functions
		/// </summary>
		public void cnt_Container66_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container66_setInlineAttributes(sender, e);
		}
		public string cnt_Container66_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "min-height: 65px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container66_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container66)
		/// </summary>
		/// <returns>The Visible State of wt_Container66</returns>
		public bool cnt_Container66_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_TableCell7 Functions
		/// </summary>
		public void wt_TableCell7_onDataBinding(object sender, System.EventArgs e) {
			wt_TableCell7_setInlineAttributes(sender, e);
		}
		public string wt_TableCell7_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "vertical-align: middle";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Container33 Functions
		/// </summary>
		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container33_setInlineAttributes(sender, e);
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container33_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_CheckBox38 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box zsyCih78qkKtxYL9Jh9tpQ
		/// </summary>
		/// <returns>The Value of the Check Box zsyCih78qkKtxYL9Jh9tpQ</returns>
		public bool chk_CheckBox38_checked_value() {
			return getWtLearnerListList().CurrentRec.ssSTBoolean.ssValue;
		}
		public void chk_CheckBox38_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssLearnerListList.Length > parentControlIndex && parentControlIndex > -1) {
					ssLearnerListList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtLearnerListList().CurrentRec.ssSTBoolean.ssValue = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox38)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox38</returns>
		public bool chk_CheckBox38_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox38)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox38</returns>
		public bool chk_CheckBox38_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container47 Functions
		/// </summary>
		public void cnt_Container47_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container47_setInlineAttributes(sender, e);
		}
		public string cnt_Container47_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "white-space:normal;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container47_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container47)
		/// </summary>
		/// <returns>The Visible State of wt_Container47</returns>
		public bool cnt_Container47_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance67 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance67_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("cAxZk7J+AEu6LHunYrmadQ")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_If32 Functions
		/// </summary>
		bool if_wt_If32_hasRun=false;
		bool if_wt_If32_evalResult;
		public bool if_wt_If32() {
			if (if_wt_If32_hasRun) {
				if_wt_If32_hasRun = false;
				return if_wt_If32_evalResult;
			}
			if_wt_If32_hasRun = true;
			if_wt_If32_evalResult = (getWtLearnerListList().CurrentRec.ssENStudent.ssMobilePhone!= "");
			return if_wt_If32_evalResult;
		}

		/// <summary>
		/// wt_InlineExpression23 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = fr91UgaHJUmTQCNIr61pjA) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression23() {
			return (((getWtLearnerListList().CurrentRec.ssSTText.ssValue== "")) ?("(no email)"):(getWtLearnerListList().CurrentRec.ssSTText.ssValue));
		}
		/// <summary>
		/// wt_Text2 Functions
		/// </summary>
		public void wt_Text2_onDataBinding(object sender, System.EventArgs e) {
			wt_Text2_setInlineAttributes(sender, e);
		}
		public string wt_Text2_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-left:4px;color:#666;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Container9 Functions
		/// </summary>
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container9_setInlineAttributes(sender, e);
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container9_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			return true;
		}

		/// <summary>
		/// wtlnkTo Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtlnkTo)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtlnkTo)</returns>
		public string lnklnkTo_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("StudentId", System.Web.HttpUtility.UrlEncode(getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("PhoneSelection", System.Web.HttpUtility.UrlEncode(getWtLearnerListList().CurrentRec.ssSTText.ssValue, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_SMSSelection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtlnkTo)
		/// </summary>
		/// <returns>title of the Link (wtlnkTo)</returns>
		public string
		lnklnkTo_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtlnkTo)
		/// </summary>
		/// <returns>The Visible State of wtlnkTo</returns>
		public bool lnklnkTo_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtlnkTo)
		/// </summary>
		/// <returns>The Enabled State of wtlnkTo</returns>
		public bool lnklnkTo_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance64 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance64_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance58 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance58_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
			widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtLearnerList, "wtlnkTo").ClientID;
			widget.inParamTitle = " ";
			widget.inParamWidthPx = -1;
			widget.inParamHeightPx = -1;
			widget.inParamAutoResize = true;
			widget.inParamRecenterOnResize = false;
			widget.inParamHideCloseButton = false;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance58
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance58_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandOnNotify(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container18 Functions
		/// </summary>
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container18_setInlineAttributes(sender, e);
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container18_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			return true;
		}



		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandSend {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetGroup2s" of Action "Preparation"
			/// </summary>
			public static RLGroupRecordList datasetGetGroup2s(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENGroup.[GROUPDESCRIPTION] o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9");
				fromBuilder.Append(" FROM {Group} ENGroup");
				whereBuilder.Append(" WHERE (ENGroup.[GROUPNAME] = @qpstP)");
				orderByBuilder.Append(" ORDER BY ENGroup.[GROUPNAME] ASC ");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupRecordList outParamList = new RLGroupRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupRecordList _tmp = new RLGroupRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Course_SMS.Preparation.GetGroup2s.List");
						outParamList = (RLGroupRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_SMS.Preparation.GetGroup2s.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupRecordList _tmp = new RLGroupRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Course_SMS.Preparation.GetGroup2s.List");
							outParamList = (RLGroupRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_SMS.Preparation.GetGroup2s.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void QueryGetStudentsReadDB(ref RCStudentBooleanTextRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssENStudent.Read(r, ref index);
				rec.ssSTText.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudents" of Action "Preparation"
			/// </summary>
			public static RLStudentBooleanTextRecordList QueryGetStudents(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstCourseCode) {
				// Query Iterations: Multiple {LearnerList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstCourseCode", DbType.String, qpstCourseCode);
				string advSql = "SELECT   " +
				 "(CASE WHEN  {Student}.[MOBILEPHONE] = '' THEN 0 ELSE 1 END),   " +
				 " {Student}.[STUDENTREFERENCE], {Student}.[FORENAMES], {Student}.[SURNAME], {Student}.[DATEOFBIRTH], {Student}.[GENDER], {Student}.[MAINOFFERINGCODE], {Student}.[MAINOFFERINGNAME], {Student}.[STUDENTPHOTOURL], {Student}.[HOMEADDRESS], {Student}.[HOMEADDRESSPOSTCODE], {Student}.[CURRENTADDRESS], {Student}.[CURRENTADDRESSPOSTCODE], {Student}.[EMAILADDRESS], {Student}.[HOMETELEPHONE], {Student}.[MOBILEPHONE], {Student}.[NEXTOFKINNAME], {Student}.[NEXTOFKINRELATIONSHIP], {Student}.[NEXTOFKINADDRESS], {Student}.[NEXTOFKINPOSTCODE], {Student}.[NEXTOFKINPHONE], {Student}.[PERSONALTUTOR], {Student}.[NEXTOFKINEMAIL], {Student}.[HASCURRENTACTIVEENROLMENT], {Student}.[NETWORKLOGIN], {Student}.[NINUMBER], {Student}.[RESIDENTIALSTATUS], {Student}.[PREVIOUSSCHOOL],   " +
				 " {Student}.[MOBILEPHONE] FROM  {Student}  " +
				 "WHERE  " +
				 "    EXISTS (   " +
				 "        SELECT  {Group}.[ID] FROM  {Group} INNER JOIN  {Student_Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student}.[STUDENTREFERENCE] =  {Student_Group}.[STUDENTREFERENCE]   " +
				 "            WHERE  {Group}.[GROUPNAME] = @qpstCourseCode   " +
				 "            AND  {Student_Group}.[ENROLMENTSTATUS] = 'Active'  " +
				 "    )  " +
				 "    " +
				 "ORDER BY  {Student}.[SURNAME],  " +
				 "          {Student}.[FORENAMES]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStudentBooleanTextRecordList outParamList = new RLStudentBooleanTextRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetStudentsReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[3];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					opt[2] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudentBooleanTextRecordList _tmp = new RLStudentBooleanTextRecordList();
						_tmp.AlternateReadDBMethod = QueryGetStudentsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Course_SMS.Preparation.GetStudents.List");
							outParamList = (RLStudentBooleanTextRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_SMS.Preparation.GetStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_SMS.Preparation.GetStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudents in Preparation in Course_SMS in Courses in CaseConferencing (SELECT   (CASE WHEN {Student}.[MobilePhone] = '' THEN 0 ELSE 1 END),   {Student}.*,   {Student}.[MobilePhone] FROM {Student}  WHERE      EXISTS (           SELECT {Group}.[Id] FROM {Group} INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student}.[StudentReference] = {Student_Group}.[StudentReference]               WHERE {Group}.[GroupName] = @CourseCode               AND {Student_Group}.[EnrolmentStatus] = 'Active'      )      ORDER BY {Student}.[Surname],           {Student}.[Forenames]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudents in Preparation in Course_SMS in Courses in CaseConferencing (SELECT   (CASE WHEN {Student}.[MobilePhone] = '' THEN 0 ELSE 1 END),   {Student}.*,   {Student}.[MobilePhone] FROM {Student}  WHERE      EXISTS (           SELECT {Group}.[Id] FROM {Group} INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student}.[StudentReference] = {Student_Group}.[StudentReference]               WHERE {Group}.[GroupName] = @CourseCode               AND {Student_Group}.[EnrolmentStatus] = 'Active'      )      ORDER BY {Student}.[Surname],           {Student}.[Forenames]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudents in Preparation in Course_SMS in Courses in CaseConferencing (SELECT   (CASE WHEN {Student}.[MobilePhone] = '' THEN 0 ELSE 1 END),   {Student}.*,   {Student}.[MobilePhone] FROM {Student}  WHERE      EXISTS (           SELECT {Group}.[Id] FROM {Group} INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student}.[StudentReference] = {Student_Group}.[StudentReference]               WHERE {Group}.[GroupName] = @CourseCode               AND {Student_Group}.[EnrolmentStatus] = 'Active'      )      ORDER BY {Student}.[Surname],           {Student}.[Forenames]): " + aqExcep.Message);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Course SMS"; ssLearnerListListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_SMS", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_SMS", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetStudents_outParamList runtime properties state.

			int tmpcurrentrownumberqueryResGetStudents_outParamList = queryResGetStudents_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetStudents_outParamList = queryResGetStudents_outParamList.Eof;
			ViewStateAttributes.SetInViewState("queryResGetStudents_outParamList_empty", queryResGetStudents_outParamList.Empty, false);
			ViewStateAttributes.SetInViewState("queryResGetStudents_outParamList_length", queryResGetStudents_outParamList.Length, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudents_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetStudents_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetStudents_outParamList_eof", tmpeofqueryResGetStudents_outParamList, false);

			#endregion

			ViewStateAttributes.SetInViewState("inParamCourseCode", inParamCourseCode, "");
			ViewStateAttributes.SetInViewState("wtEmail_Body_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtEmail_Body")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_ssBody", ssEditRecord1Record.ssENCommunication.ssBody, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssEditRecord1Record.ssENCommunication.ChangedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false, false, false, true, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssEditRecord1Record.ssENCommunication.OptimizedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true, true, true, false, true, true, true, true
			}
			)))), null);
			if (IsAjaxRequest) {
				recListLearnerList_Rebuild((ssLearnerListListDataBound ? wtLearnerList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtLearnerList.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtLearnerList_list", wtLearnerList_storage, null);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetStudents_outParamList runtime properties state.

				queryResGetStudents_outParamList = new RLStudentBooleanTextRecordList();
				bool tmpstorequeryResGetStudents_outParamList_empty;
				tmpstorequeryResGetStudents_outParamList_empty = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudents_outParamList_empty", false);
				int tmpstorequeryResGetStudents_outParamList_length;
				tmpstorequeryResGetStudents_outParamList_length = (int) ViewStateAttributes.GetFromViewState("queryResGetStudents_outParamList_length", 0);
				while (tmpstorequeryResGetStudents_outParamList_length-- > 0) {
					queryResGetStudents_outParamList.Append(new RCStudentBooleanTextRecord(null));
				}

				queryResGetStudents_outParamList.CurrentRowNumber = -1;
				int tmpcurrentrownumberqueryResGetStudents_outParamList;
				tmpcurrentrownumberqueryResGetStudents_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetStudents_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetStudents_outParamList;
				tmpeofqueryResGetStudents_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetStudents_outParamList_eof", false);
				queryResGetStudents_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetStudents_outParamList, tmpeofqueryResGetStudents_outParamList);
				queryResGetStudents_outParamList.RestoreRecordListEmptyState(tmpstorequeryResGetStudents_outParamList_empty);

				#endregion

				inParamCourseCode = (string) ViewStateAttributes.GetFromViewState("inParamCourseCode", "");
				((IWidgetRuntimeProperties) this.FindControl("wtEmail_Body")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtEmail_Body_Mandatory", false);
				ssEditRecord1Record.ssENCommunication.ssBody = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_ssBody", "");
				ssEditRecord1Record.ssENCommunication.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_ChangedAttributes", null));
				ssEditRecord1Record.ssENCommunication.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_OptimizedAttributes", null));
				recListLearnerList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtEmail_Body", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
