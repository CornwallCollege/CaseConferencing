/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowCourses {

	public class ScrnCourse_Email: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnCourse_Email(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Screen Input Parameter inParamIncludeTarget. Description:
		/// </summary>
		public bool inParamIncludeTarget = false;
		/// <summary>
		/// Screen Input Parameter inParamTargetDescription. Description:
		/// </summary>
		public string inParamTargetDescription = "";
		/// <summary>
		/// Variable <code>varLcEmailFrom</code> that represents the Service Studio local variable
		///  <code>EmailFrom</code> <p>Description: </p>
		/// </summary>
		RCEmailFromRecord varLcEmailFrom = new RCEmailFromRecord(null);

		/// <summary>
		/// Variable <code>varLcEmailFromList</code> that represents the Service Studio local variable
		///  <code>EmailFromList</code> <p>Description: </p>
		/// </summary>
		RLEmailFromRecordList varLcEmailFromList = new RLEmailFromRecordList();

		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance88
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance88;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container82;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container62;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		/// <summary>
		/// Variable (wtlnkAtt) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtlnkAtt;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container63;
		private RLDocumentsRecordList _ssListRecordsAttatcList = new RLDocumentsRecordList();
		public RLDocumentsRecordList ssListRecordsAttatcList {
			get {
				return _ssListRecordsAttatcList; 
			}
			set {
				_ssListRecordsAttatcList = value;
				wtListRecordsAttatc.DataSource = value;
				ssListRecordsAttatcListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtListRecordsAttatc;
		public ArrayList wtListRecordsAttatc_storage = new ArrayList();
		protected bool ssListRecordsAttatcList_notUsedYet = true;
		protected bool ssListRecordsAttatcListDoDataBind;
		protected bool ssListRecordsAttatcListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container8;
		/// <summary>
		/// Variable (wt_Link64) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link64;
		/// <summary>
		/// Variable (wt_Link40) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link40;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container43;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_ComboBox50ValidatorRequired;
		protected SelectRtWidget Rt_wt_ComboBox50 = new SelectRtWidget();
		RLEmailFromRecordList Rt_wt_ComboBox50_reclist = null;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtEmail_Subject2ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtEmail_Subject2ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtEmail_Subject3ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtEmail_Subject3ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtEmail_Subject4ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtEmail_Subject4ValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtEmail_SubjectValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtEmail_SubjectValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtEmail_BodyValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtEmail_BodyValidatorType;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container14;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCDocument_ListCommunicationRecord ssEditRecord1Record = new RCDocument_ListCommunicationRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtEditRecord1_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtEmail_Subject2") &&
			ValidationUtils.IsValid(this, "wtEmail_Subject3") &&
			ValidationUtils.IsValid(this, "wtEmail_Subject4") &&
			ValidationUtils.IsValid(this, "wtEmail_Subject") &&
			ValidationUtils.IsValid(this, "wtEmail_Body");
			return res;
		}

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container25;
		/// <summary>
		/// Variable (wt_Link46) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link46;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container81;
		protected OutSystems.HubEdition.WebWidgets.Container wtLearnerListWrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container47;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container41;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container79;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container61;
		private RLStudentBooleanTextRecordList _ssLearnerListList = new RLStudentBooleanTextRecordList();
		public RLStudentBooleanTextRecordList ssLearnerListList {
			get {
				return _ssLearnerListList; 
			}
			set {
				_ssLearnerListList = value;
				wtLearnerList.DataSource = value;
				ssLearnerListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtLearnerList;
		public ArrayList wtLearnerList_storage = new ArrayList();
		protected bool ssLearnerListList_notUsedYet = true;
		protected bool ssLearnerListListDoDataBind;
		protected bool ssLearnerListListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container76;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container85;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container89;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container1;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container65;
		/// <summary>
		/// Variable (wt_Link80) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link80;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container60;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container39;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container54;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container33;
		/// <summary>
		/// Variable "True" if the Widget wt_If23
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If23T;

		/// <summary>
		/// Variable "True" if the Widget wt_If23
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If23F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container56;
		/// <summary>
		/// Variable (wtlnkTo) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtlnkTo;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container58;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("MnNERCe+_Ua0oCoZSUx2Pg", "Course_Email");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "MnNERCe+_Ua0oCoZSUx2Pg", "Course_Email");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "MnNERCe+_Ua0oCoZSUx2Pg", "Course_Email");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "MnNERCe+_Ua0oCoZSUx2Pg", "Course_Email");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "MnNERCe+_Ua0oCoZSUx2Pg", "Course_Email");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnCourse_Email() {
		}


		RLUserRecordList queryResGetUserById_outParamList = new RLUserRecordList();
		int queryResGetUserById_outParamCount = 0;
		int resUserCheck_outParamPermissionType = 0;
		RLGroupRecordList queryResGetGroup2s_outParamList = new RLGroupRecordList();
		int queryResGetGroup2s_outParamCount = 0;
		RLStudentBooleanTextRecordList queryResGetStudents_outParamList = new RLStudentBooleanTextRecordList();
		int queryResGetStudents_outParamCount = 0;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// UserCheck
			Actions.ActionUserCheck(heContext, ((int) Global.App.OsContext.Session["UserID"]), ENApplicationPermissionEntity.GetRecordByKey(ObjectKey.Parse("0G0njdVIn0ucjJ6N1LzYDw")).ssId, out resUserCheck_outParamPermissionType);
			if ((resUserCheck_outParamPermissionType!=ENPermissionTypeEntity.GetRecordByKey(ObjectKey.Parse("dcWAPDTdmEyjDYQI2aRLZw")).ssId)) {
				// Destination = ExternalURL

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = Functions.rssextensionhttprequesthandler_ActionGetEntryURL(heContext, "InvalidPermissions", "ThemeProvider", "", "", "", "", "", "", "", "", "", "");
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				}

			} else {
				if ((inParamCourseCode== "")) {
					// Destination = CourseList

					if (OSPage.IsAjaxRequest) {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "DbUqNvNFZU+wi7tlTyKtzw";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CourseList"] = screenParameters;
							if (OSPage.IsAjaxRequest) {
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CourseList.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								Server.Transfer("CourseList.aspx");
							}
							return;

						}
					} else {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							// get parameters
							heContext.Session["_ScreenParametersKey"] = "DbUqNvNFZU+wi7tlTyKtzw";
							ArrayList screenParameters = new ArrayList();
							Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CourseList"] = screenParameters;
							if (OSPage.IsAjaxRequest) {
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CourseList.aspx" + sURLQuery;
								((OSPageViewState) Page).RedirectLocation = sURL;
							} else {
								Server.Transfer("CourseList.aspx");
							}
							return;

						}
					}

				} else {
					// Query QueryGetStudents
					int QueryGetStudents_maxRecords = Math.Max(wtLearnerList.StartIndex + wtLearnerList.LineCount + 1, 0);
					queryResGetStudents_outParamList = FuncssPreparation.QueryGetStudents(heContext, QueryGetStudents_maxRecords, IterationMultiplicity.Single, out queryResGetStudents_outParamCount, inParamCourseCode
					);
					// Query datasetGetGroup2s
					int datasetGetGroup2s_maxRecords = 0;
					queryResGetGroup2s_outParamList = FuncssPreparation.datasetGetGroup2s(heContext, datasetGetGroup2s_maxRecords, IterationMultiplicity.Never, out queryResGetGroup2s_outParamCount, inParamCourseCode
					);
					// Query datasetGetUserById
					int datasetGetUserById_maxRecords = 0;
					queryResGetUserById_outParamList = FuncssPreparation.datasetGetUserById(heContext, datasetGetUserById_maxRecords, IterationMultiplicity.Never, out queryResGetUserById_outParamCount, ((int) Global.App.OsContext.Session["UserID"])
					);
					if (!((queryResGetUserById_outParamList.CurrentRec.ssENUser.ssEmail== ""))) {
						varLcEmailFrom.ssSTEmailFrom.ssname = (("Me (" +queryResGetUserById_outParamList.CurrentRec.ssENUser.ssEmail) + ")"); // EmailFrom.EmailFrom.name = "Me (" + GetUserById.List.Current.User.Email + ")"
						varLcEmailFrom.ssSTEmailFrom.ssEmailAddress = queryResGetUserById_outParamList.CurrentRec.ssENUser.ssEmail; // EmailFrom.EmailFrom.EmailAddress = GetUserById.List.Current.User.Email
						// ListAppend2
						ExtendedActions.ListAppend(heContext, varLcEmailFromList, varLcEmailFrom);

					}
					varLcEmailFrom.ssSTEmailFrom.ssname = "Cornwall College (caseconf@cornwall.ac.uk)"; // EmailFrom.EmailFrom.name = "Cornwall College (caseconf@cornwall.ac.uk)"
					varLcEmailFrom.ssSTEmailFrom.ssEmailAddress = "caseconf@cornwall.ac.uk"; // EmailFrom.EmailFrom.EmailAddress = "caseconf@cornwall.ac.uk"
					// ListAppend3
					ExtendedActions.ListAppend(heContext, varLcEmailFromList, varLcEmailFrom);
					if (inParamIncludeTarget) {
						ssEditRecord1Record.ssENCommunication.ssBody = (("A new target has been set for you." + "\r\n") +inParamTargetDescription); // EditRecord1.Record.Communication.Body = "A new target has been set for you." + NewLine + TargetDescription

					}

				}

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "Course_Email.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "Course_Email.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamCourseCode!= "")) {
				parameters.Add(new Pair<string, string>("CourseCode", HttpUtility.UrlEncode(inParamCourseCode, Request.ContentEncoding)));
			}
			if ((inParamIncludeTarget!=false)) {
				parameters.Add(new Pair<string, string>("IncludeTarget", HttpUtility.UrlEncode(Convert.ToString(inParamIncludeTarget), Request.ContentEncoding)));
			}
			if ((inParamTargetDescription!= "")) {
				parameters.Add(new Pair<string, string>("TargetDescription", HttpUtility.UrlEncode(inParamTargetDescription, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Course_Email", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Course_Email", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance88 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance88");
			wt_Container82 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container82");
			wt_Container62 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container62");
			wt_Container5 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container5");
			wtlnkAtt = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wtlnkAtt");
			wt_Container63 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container63");
			wtListRecordsAttatc = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtListRecordsAttatc");
			wtListRecordsAttatc.StartIndexExpression = () => 0;
			wtListRecordsAttatc.LineCountExpression = () => 50;
			if (this.wt_Link64 != null) {
				this.wt_Link64.Click += new System.EventHandler(this.wt_Link64_Click);
			}
			if (this.wt_Link40 != null) {
				this.wt_Link40.Click += new System.EventHandler(this.wt_Link40_Click);
			}
			wt_Container14 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container14");
			wt_Container25 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container25");
			wt_Link46 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link46");
			if (this.wt_Link46 != null) {
				this.wt_Link46.Click += new System.EventHandler(this.wt_Link46_Click);
			}
			wt_Container81 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container81");
			wtLearnerListWrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtLearnerListWrapper");
			wt_Container47 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container47");
			wt_Container41 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container41");
			wt_Container79 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container79");
			wt_Container61 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container61");
			wtLearnerList = (OutSystems.HubEdition.WebWidgets.Iterator) FindControl("wtLearnerList");
			wtLearnerList.StartIndexExpression = () => Functions.rssespacerichwidgets_ActionList_Navigation_GetStartIndex(heContext, wtLearnerList.ClientID, false, -1);
			wtLearnerList.LineCountExpression = () => 50;
			wtLearnerList.EmptyMessageExpression = () => "No items to show...";
			wt_Container58 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container58");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance73") {
				return ThemeProvider_wt_WebBlockInstance88.wtHelpUpdate.FindControl("wt_WebBlockInstance73");
			}
			if (id == "ThemeProvider_wt_WebBlockInstance87") {
				return ThemeProvider_wt_WebBlockInstance88.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance87");
			}
			if (id == "RichWidgets_wt_WebBlockInstance38") {
				return ThemeProvider_wt_WebBlockInstance88.wtTitle.FindControl("RichWidgets_wt_WebBlockInstance38");
			}
			if (id == "wt_Text71") {
				return ThemeProvider_wt_WebBlockInstance88.wtTitle.FindControl("wt_Text71");
			}
			if (id == "wt_InlineExpression10") {
				return ThemeProvider_wt_WebBlockInstance88.wtTitle.FindControl("wt_InlineExpression10");
			}
			if (id == "wt_Container82") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container82");
			}
			if (id == "wtWrapper") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtWrapper");
			}
			if (id == "wt_TableRow69") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableRow69");
			}
			if (id == "wt_TableCell36") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableCell36");
			}
			if (id == "wt_Container62") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container62");
			}
			if (id == "wt_Text68") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Text68");
			}
			if (id == "wt_Container5") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container5");
			}
			if (id == "wtlnkAtt") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtlnkAtt");
			}
			if (id == "wt_Text59") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Text59");
			}
			if (id == "RichWidgets_wt_WebBlockInstance30") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance30");
			}
			if (id == "wt_Container63") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container63");
			}
			if (id == "wtListRecordsAttatc") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtListRecordsAttatc");
			}
			if (id == "wt_TableRow4") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableRow4");
			}
			if (id == "wt_TableCell7") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableCell7");
			}
			if (id == "wt_ComboBox50") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_ComboBox50");
			}
			if (id == "wt_TableRow55") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableRow55");
			}
			if (id == "wt_TableCell17") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableCell17");
			}
			if (id == "wtEmail_Subject2") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtEmail_Subject2");
			}
			if (id == "wt_TableRow53") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableRow53");
			}
			if (id == "wt_TableCell15") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableCell15");
			}
			if (id == "wtEmail_Subject3") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtEmail_Subject3");
			}
			if (id == "wt_TableRow86") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableRow86");
			}
			if (id == "wt_TableCell24") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableCell24");
			}
			if (id == "wtEmail_Subject4") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtEmail_Subject4");
			}
			if (id == "wt_TableRow28") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableRow28");
			}
			if (id == "wt_TableCell22") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableCell22");
			}
			if (id == "wtEmail_Subject") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtEmail_Subject");
			}
			if (id == "wt_TableRow78") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableRow78");
			}
			if (id == "wt_TableCell37") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableCell37");
			}
			if (id == "wtEmail_Body") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtEmail_Body");
			}
			if (id == "wt_TableRow12") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableRow12");
			}
			if (id == "wt_TableCell13") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_TableCell13");
			}
			if (id == "wt_Container14") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container14");
			}
			if (id == "wtEditRecord1") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtEditRecord1");
			}
			if (id == "wt_Container25") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container25");
			}
			if (id == "Hunspell_wt_WebBlockInstance90") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("Hunspell_wt_WebBlockInstance90");
			}
			if (id == "wt_Link46") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Link46");
			}
			if (id == "wt_Container81") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container81");
			}
			if (id == "RichWidgets_wt_WebBlockInstance11") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance11");
			}
			if (id == "wt_Text57") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Text57");
			}
			if (id == "wtLearnerListWrapper") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtLearnerListWrapper");
			}
			if (id == "wt_Container47") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container47");
			}
			if (id == "wt_Container41") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container41");
			}
			if (id == "wt_Text18") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Text18");
			}
			if (id == "wt_Container79") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container79");
			}
			if (id == "RichWidgets_wt_WebBlockInstance16") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance16");
			}
			if (id == "wt_InlineExpression44") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_InlineExpression44");
			}
			if (id == "wt_Container61") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container61");
			}
			if (id == "wtLearnerList") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wtLearnerList");
			}
			if (id == "wt_Container58") {
				return ThemeProvider_wt_WebBlockInstance88.wtMainContent.FindControl("wt_Container58");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_Email"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamCourseCode = (string) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamIncludeTarget = (bool) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamTargetDescription = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_Email"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["CourseCode"] != null) {
						inParamCourseCode = Request.QueryString["CourseCode"];
					}
					if (Request.QueryString["IncludeTarget"] != null) {
						inParamIncludeTarget = (Request.QueryString["IncludeTarget"]).ToLowerInvariant() == "true";
					}
					if (Request.QueryString["TargetDescription"] != null) {
						inParamTargetDescription = Request.QueryString["TargetDescription"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["CourseCode"] != null) {
						inParamCourseCode = Request.Form["CourseCode"];
					}
					if (Request.Form["IncludeTarget"] != null) {
						inParamIncludeTarget = (Request.Form["IncludeTarget"]).ToLowerInvariant() == "true";
					}
					if (Request.Form["TargetDescription"] != null) {
						inParamTargetDescription = Request.Form["TargetDescription"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtEditRecord1_onDataBindingDataSource(this.FindControl("wtEditRecord1"), null);
				}
				ssListRecordsAttatcListDoDataBind = true;
				ssLearnerListListDoDataBind = true;
				Title = "Course Email"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_Email", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowCourses.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotSLA("SLA role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("MnNERCe+_Ua0oCoZSUx2Pg"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvOnNotify: VarsBag {
			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public lcvOnNotify() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotify localVars = new lcvOnNotify();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				getWtLearnerListList().CurrentRec.ssSTText.ssValue = localVars.resNotifyWidgetGetMessage_outParamMessage; // LearnerList.List.Current.Text.Value = NotifyWidgetGetMessage.Message
				// Refresh Widget (wtLearnerList)
				((OSPageViewState) Page).AjaxRefresh(wtLearnerList, getWtLearnerListList().CurrentRowNumber, "None", "Refresh", false, null, StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvOnNotifyAddDoc: VarsBag {
			/// <summary>
			/// Variable <code>varLcGetDocuments_Id</code> that represents the Service Studio local variable
			///  <code>GetDocuments_Id</code> <p>Description: Created by the upgrade of 'GetDocuments' to a
			/// n Aggregate. Corresponds to the old query parameter 'Id'.</p>
			/// </summary>
			public int varLcGetDocuments_Id = 0;

			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public RLDocumentsRecordList queryResGetDocuments_outParamList = new RLDocumentsRecordList();
			public int queryResGetDocuments_outParamCount = 0;

			public lcvOnNotifyAddDoc() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotifyAddDoc</code> that represents the Service Studio screen action
		///  <code>OnNotifyAddDoc</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotifyAddDoc(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotifyAddDoc localVars = new lcvOnNotifyAddDoc();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				if ((localVars.resNotifyWidgetGetMessage_outParamMessage!= "")) {
					// Created by the upgrade of 'GetDocuments' to an Aggregate.
					localVars.varLcGetDocuments_Id = BuiltInFunction.IntegerToEntityRefInteger(BuiltInFunction.TextToInteger(localVars.resNotifyWidgetGetMessage_outParamMessage)); // GetDocuments_Id = IntegerToEntityRefInteger
					// Query datasetGetDocuments
					int datasetGetDocuments_maxRecords = 0;
					localVars.queryResGetDocuments_outParamList = FuncCommandOnNotifyAddDoc.datasetGetDocuments(heContext, datasetGetDocuments_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetDocuments_outParamCount, localVars.varLcGetDocuments_Id
					);
					// ListAppend
					ExtendedActions.ListAppend(heContext, ssEditRecord1Record.ssSTDocument_List.ssDocuments, localVars.queryResGetDocuments_outParamList.CurrentRec);
					// Refresh Widget (wtListRecordsAttatc)
					ssListRecordsAttatcListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(wtListRecordsAttatc, "None", StoreViewState);

				}
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDelete</code> that represents the Service Studio screen action
		///  <code>Delete</code> <p> Description: </p>
		/// </summary>
		private bool CommandDelete(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// DeleteDocuments
				ExtendedActions.DeleteDocuments(heContext, ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.ssId);
				// ListRemove
				ExtendedActions.ListRemove(heContext, ssEditRecord1Record.ssSTDocument_List.ssDocuments, getWtListRecordsAttatcList().CurrentRowNumber);
				// Refresh Widget (wtListRecordsAttatc)
				ssListRecordsAttatcListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(wtListRecordsAttatc, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvSend: VarsBag {
			/// <summary>
			/// Variable <code>varLcCommunicationDocument</code> that represents the Service Studio local variable
			///  <code>CommunicationDocument</code> <p>Description: </p>
			/// </summary>
			public RCCommunicationDocumentsRecord varLcCommunicationDocument = new RCCommunicationDocumentsRecord(null);

			/// <summary>
			/// Variable <code>varLcCommunicationId</code> that represents the Service Studio local variable
			///  <code>CommunicationId</code> <p>Description: </p>
			/// </summary>
			public int varLcCommunicationId = 0;

			public int resStudentLog_Create_outParamStudentLogId = 0;

			public int resStudent_Email_outParamEmailId = 0;
			public int resCreateOrUpdateCommunicationDocuments_outParamId = 0;

			public int resCreateOrUpdateCommunication_outParamId = 0;

			public lcvSend() {
			}
		}
		/// <summary>
		/// Action <code>CommandSend</code> that represents the Service Studio screen action <code>Send</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandSend(HeContext heContext) {
			CheckPermissions(heContext);
			lcvSend localVars = new lcvSend();
			try {
				// Foreach LearnerList.List
				getWtLearnerListList().StartIteration();
				try {
					while (! getWtLearnerListList().Eof) {
						// (Selected)
						if (getWtLearnerListList().CurrentRec.ssSTBoolean.ssValue) {
							// BCC
							ssEditRecord1Record.ssENCommunication.ssBCC = (((ssEditRecord1Record.ssENCommunication.ssBCC== "")) ?(getWtLearnerListList().CurrentRec.ssSTText.ssValue):(((ssEditRecord1Record.ssENCommunication.ssBCC+ ",") +getWtLearnerListList().CurrentRec.ssSTText.ssValue))); // EditRecord1.Record.Communication.BCC = internalIf
							ssEditRecord1Record.ssENCommunication.ssCreatedOn = BuiltInFunction.CurrDateTime(); // EditRecord1.Record.Communication.CreatedOn = CurrDateTime
							ssEditRecord1Record.ssENCommunication.ssCreatedBy = ((int) Global.App.OsContext.Session["UserID"]); // EditRecord1.Record.Communication.CreatedBy = UserID
							ssEditRecord1Record.ssENCommunication.ssStudentId = getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference; // EditRecord1.Record.Communication.StudentId = LearnerList.List.Current.Student.StudentReference
							ssEditRecord1Record.ssENCommunication.ssTypeId = ENCommunicationTypeEntity.GetRecordByKey(ObjectKey.Parse("eHdAHuyHvU66U6DpUSBKFQ")).ssId; // EditRecord1.Record.Communication.TypeId = EMAIL
							// CreateOrUpdateCommunication
							ExtendedActions.CreateOrUpdateCommunication(heContext, ssEditRecord1Record.ssENCommunication.ChangedAttributes, ((RCCommunicationRecord) ssEditRecord1Record.ssENCommunication), out localVars.resCreateOrUpdateCommunication_outParamId);
							// Foreach ListRecordsAttatc.List
							getWtListRecordsAttatcList().StartIteration();
							try {
								while (!getWtListRecordsAttatcList().Eof) {
									localVars.varLcCommunicationDocument.ssENCommunicationDocuments.ssCommunicationId = localVars.resCreateOrUpdateCommunication_outParamId; // CommunicationDocument.CommunicationDocuments.CommunicationId = CreateOrUpdateCommunication.Id
									localVars.varLcCommunicationDocument.ssENCommunicationDocuments.ssDocumentId = getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssId; // CommunicationDocument.CommunicationDocuments.DocumentId = ListRecordsAttatc.List.Current.Documents.Id
									// CreateOrUpdateCommunicationDocuments
									ExtendedActions.CreateOrUpdateCommunicationDocuments(heContext, localVars.varLcCommunicationDocument.ChangedAttributes, localVars.varLcCommunicationDocument, out localVars.resCreateOrUpdateCommunicationDocuments_outParamId);
									getWtListRecordsAttatcList().Advance();
								}
							} finally {
								getWtListRecordsAttatcList().EndIteration();
							}
							// StudentLog_Create
							Actions.ActionStudentLog_Create(heContext, getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference, ((int) Global.App.OsContext.Session["UserID"]), ssEditRecord1Record.ssENCommunication.ssSubject, ENStudentLogTypeEntity.GetRecordByKey(ObjectKey.Parse("Pg85AtQxr0yCEjiVoW0wLA")).ssLogType, ssEditRecord1Record.ssENCommunication.ssSubject, BuiltInFunction.NullTextIdentifier(), false, 0, "Email", "", 0, localVars.resCreateOrUpdateCommunication_outParamId, "", 0, out localVars.resStudentLog_Create_outParamStudentLogId);
							localVars.varLcCommunicationId = localVars.resCreateOrUpdateCommunication_outParamId; // CommunicationId = CreateOrUpdateCommunication.Id

						}
						getWtLearnerListList().Advance();
					}
				} finally {
					getWtLearnerListList().EndIteration();
				}
				if (!((localVars.varLcCommunicationId==BuiltInFunction.NullIdentifier()))) {
					// Send Email
					localVars.resStudent_Email_outParamEmailId = EmailProcessor.SendEmailRequest("http://" + Settings.Get(Settings.Configs.InternalAddress) + AppUtils.Instance.getImagePath(/*internalAccess*/true) + "Student_Email.aspx?" + "CommunicationId=" + System.Web.HttpUtility.UrlEncode(Convert.ToString(localVars.varLcCommunicationId)), "", ssEditRecord1Record.ssENCommunication.ssTo, ssEditRecord1Record.ssENCommunication.ssCC, ssEditRecord1Record.ssENCommunication.ssBCC, 0, heContext.Session.TenantId, false, EmailProcessor.EmailType.Normal);
					// EMAIL
					Actions.ActionFeedback_Message(heContext, "Email sent.", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);

				}
				// Destination = CourseList

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "DbUqNvNFZU+wi7tlTyKtzw";
						ArrayList screenParameters = new ArrayList();
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CourseList"] = screenParameters;
						string sURLQuery = null;
						sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
						string sURL = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath() + "CourseList.aspx" + sURLQuery;
						((OSPageViewState) Page).RedirectLocation = sURL;
						return false;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						// get parameters
						heContext.Session["_ScreenParametersKey"] = "DbUqNvNFZU+wi7tlTyKtzw";
						ArrayList screenParameters = new ArrayList();
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_CourseList"] = screenParameters;
						Server.Transfer("CourseList.aspx");
						return false;

					}
				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandDownload</code> that represents the Service Studio screen action
		///  <code>Download</code> <p> Description: </p>
		/// </summary>
		private bool CommandDownload(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Download Download2
				Response.ClearContent();
				string md5Hash_Download2;
				md5Hash_Download2 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssDocumentData);
				Response.ContentType = getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssType;
				Response.AppendHeader("ETag", "\"" + md5Hash_Download2 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download2);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload2 = RuntimePlatformUtils.EscapeFilenameForDownload(getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssDocumentName);
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload2 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload2);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload2+ "\"");
				byte[] downloadDownload2FileContent = getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssDocumentData;

				if (downloadDownload2FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssType;
						file_info.Second = getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssDocumentData;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload(getWtListRecordsAttatcList().CurrentRec.ssENDocuments.ssDocumentName));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload2FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload2FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_Email", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance88 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance88_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance73 Functions
		/// </summary>
		public void webBlck_WebBlockInstance73_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate widget = (ssCaseConferencing.Flows.FlowCommon.WBlkHelpUpdate) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance87 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance87_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main) sender;
			widget.inParamActiveMenuItem = (((inParamCourseCode== "")) ?(ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("Zf1l6h4nhEKi9bGDu571Zw")).ssId):(ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("7qeG0AIy00KFvJsqdEaGOg")).ssId));
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance38 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance38_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("jyrPGISlYEa51urd2etDWQ")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression10 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = y41VImRQ4ESu3q2i2WAzYA) Expression:
		///  GetGroup2s.List.Current.Group.GroupDescription
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression10() {
			return queryResGetGroup2s_outParamList.CurrentRec.ssENGroup.ssGroupDescription;
		}
		/// <summary>
		/// wt_Container82 Functions
		/// </summary>
		public void cnt_Container82_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container82_setInlineAttributes(sender, e);
		}
		public string cnt_Container82_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container82_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container82)
		/// </summary>
		/// <returns>The Visible State of wt_Container82</returns>
		public bool cnt_Container82_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container62 Functions
		/// </summary>
		public void cnt_Container62_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container62_setInlineAttributes(sender, e);
		}
		public string cnt_Container62_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container62_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container62)
		/// </summary>
		/// <returns>The Visible State of wt_Container62</returns>
		public bool cnt_Container62_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Text68 Functions
		/// </summary>
		public void wt_Text68_onDataBinding(object sender, System.EventArgs e) {
			wt_Text68_setInlineAttributes(sender, e);
		}
		public string wt_Text68_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-weight:bold;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Container5 Functions
		/// </summary>
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container5_setInlineAttributes(sender, e);
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container5_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			return true;
		}

		/// <summary>
		/// wtlnkAtt Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtlnkAtt)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtlnkAtt)</returns>
		public string lnklnkAtt_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("EnableDocumentViewingRestrictions", System.Web.HttpUtility.UrlEncode("False", Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("DocumentType", System.Web.HttpUtility.UrlEncode(Convert.ToString(ENDocumentTypeEntity.GetRecordByKey(ObjectKey.Parse("BCjdAILcjU2AfZmngarlFA")).ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_AttachDocument", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtlnkAtt)
		/// </summary>
		/// <returns>title of the Link (wtlnkAtt)</returns>
		public string
		lnklnkAtt_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtlnkAtt)
		/// </summary>
		/// <returns>The Visible State of wtlnkAtt</returns>
		public bool lnklnkAtt_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtlnkAtt)
		/// </summary>
		/// <returns>The Enabled State of wtlnkAtt</returns>
		public bool lnklnkAtt_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance30 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance30_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
			widget.inParamLinkOrButtonWidgetId = wtlnkAtt.ClientID;
			widget.inParamTitle = " ";
			widget.inParamWidthPx = -1;
			widget.inParamHeightPx = -1;
			widget.inParamAutoResize = true;
			widget.inParamRecenterOnResize = false;
			widget.inParamHideCloseButton = false;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance30
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance30_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandOnNotifyAddDoc(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container63 Functions
		/// </summary>
		public void cnt_Container63_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container63_setInlineAttributes(sender, e);
		}
		public string cnt_Container63_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container63_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container63)
		/// </summary>
		/// <returns>The Visible State of wt_Container63</returns>
		public bool cnt_Container63_isVisible() {
			return true;
		}

		/// <summary>
		/// wtListRecordsAttatc Functions
		/// </summary>
		public void recListListRecordsAttatc_onDataBinding(object sender, System.EventArgs e) {
			// widget wtListRecordsAttatc
			ssListRecordsAttatcList = ssEditRecord1Record.ssSTDocument_List.ssDocuments;
			ssListRecordsAttatcListDoDataBind = false;
			ssListRecordsAttatcListDataBound = true;
		}
		public void recListListRecordsAttatc_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssListRecordsAttatcList.Length > 0) {
					ssListRecordsAttatcList.CurrentRec = ssListRecordsAttatcList[ssListRecordsAttatcList.CurrentRowNumber];
				}
				if (ssListRecordsAttatcList.Length > e.SelectedIndex) {
					ssListRecordsAttatcList.CurrentRec = ssListRecordsAttatcList[e.SelectedIndex];
					ssListRecordsAttatcList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListListRecordsAttatc_Store(object dataItem, int index) {
			RCDocumentsRecord tmprec = (RCDocumentsRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENDocuments.ssId == 0?(object) null: tmprec.ssENDocuments.ssId);
			tmpFields.Add(tmprec.ssENDocuments.ssType == "" ?(object) null: tmprec.ssENDocuments.ssType);
			tmpFields.Add(tmprec.ssENDocuments.ssDocumentName == "" ?(object) null: tmprec.ssENDocuments.ssDocumentName);
			tmpFields.Add(tmprec.ssENDocuments.ssDocumentData);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, true, true, true
			}
			))));
			if (index < wtListRecordsAttatc_storage.Count) {
				wtListRecordsAttatc_storage[index] = tmpFields;
			} else {
				wtListRecordsAttatc_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListListRecordsAttatc_Restore() {

			#region fetch ssListRecordsAttatcList.

			// Read the needed fields of ssListRecordsAttatcList from storewtListRecordsAttatc_list
			ssListRecordsAttatcList = new RLDocumentsRecordList();
			ArrayList storewtListRecordsAttatc_list;
			storewtListRecordsAttatc_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtListRecordsAttatc_list", null);
			if (storewtListRecordsAttatc_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtListRecordsAttatc_list in storewtListRecordsAttatc_list) {
					if (tmpFieldswtListRecordsAttatc_list != null) {
						// Aux current record variable
						RCDocumentsRecord tmpAuxCurrentRecordwtListRecordsAttatc_list = new RCDocumentsRecord(null);
						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.ssId = (int) (tmpFieldswtListRecordsAttatc_list[0] == null ? 0: tmpFieldswtListRecordsAttatc_list[0]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.ssType = (string) (tmpFieldswtListRecordsAttatc_list[1] == null ? "": tmpFieldswtListRecordsAttatc_list[1]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.ssDocumentName = (string) (tmpFieldswtListRecordsAttatc_list[2] == null ? "": tmpFieldswtListRecordsAttatc_list[2]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.ssDocumentData = (byte[]) tmpFieldswtListRecordsAttatc_list[3];

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsAttatc_list[4]);

						tmpAuxCurrentRecordwtListRecordsAttatc_list.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtListRecordsAttatc_list[5]);

						ssListRecordsAttatcList.Append(tmpAuxCurrentRecordwtListRecordsAttatc_list);
					}
				}
			}
			ssListRecordsAttatcList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssListRecordsAttatcList runtime properties state.


			if (storewtListRecordsAttatc_list.Count > 0) {
				ssListRecordsAttatcList.RestoreRecordListState(storewtListRecordsAttatc_list.Count - 1, false);
			} else {
				ssListRecordsAttatcList.CurrentRowNumber = 0;
			}

			#endregion

			wtListRecordsAttatc_storage = storewtListRecordsAttatc_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListListRecordsAttatc_Clear(object sender, EventArgs e) {
			wtListRecordsAttatc_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListListRecordsAttatc_Rebuild(int startIndex, int lineCount) {
			if (ssListRecordsAttatcList.Length != -1) {
				wtListRecordsAttatc_storage.Clear();
				for (int i=startIndex; i<ssListRecordsAttatcList.Data.Count && i<startIndex+lineCount; i++) {
					recListListRecordsAttatc_Store(ssListRecordsAttatcList.Data[i], wtListRecordsAttatc_storage.Count);
				}
			}
		}
		public void recListListRecordsAttatc_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtListRecordsAttatc widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLDocumentsRecordList getWtListRecordsAttatcList() {
			if (ssListRecordsAttatcListDoDataBind) {
				recListListRecordsAttatc_onDataBinding(this, null);
			}

			return ssListRecordsAttatcList;
		}
		/// <summary>
		/// wt_Container8 Functions
		/// </summary>
		public void cnt_Container8_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container8_setInlineAttributes(sender, e);
		}
		public string cnt_Container8_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container8_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container8)
		/// </summary>
		/// <returns>The Visible State of wt_Container8</returns>
		public bool cnt_Container8_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Link64 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link64_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandDownload(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link64)
		/// </summary>
		/// <returns>title of the Link (wt_Link64)</returns>
		public string
		lnk_Link64_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link64)
		/// </summary>
		/// <returns>The Visible State of wt_Link64</returns>
		public bool lnk_Link64_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link64)
		/// </summary>
		/// <returns>The Enabled State of wt_Link64</returns>
		public bool lnk_Link64_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression72 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = UMKYzq3uOU2IbdPcGXJJhg) Expression: "- " +
		///  EditRecord1.Record.Document_List.Documents.Current.Documents.DocumentName
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression72() {
			return ("- " +ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.ssDocumentName);
		}
		/// <summary>
		/// wt_Link40 Functions
		/// </summary>
		public void lnk_Link40_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link40_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandDelete(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link40)
		/// </summary>
		/// <returns>title of the Link (wt_Link40)</returns>
		public string
		lnk_Link40_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link40)
		/// </summary>
		/// <returns>The Visible State of wt_Link40</returns>
		public bool lnk_Link40_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link40)
		/// </summary>
		/// <returns>The Enabled State of wt_Link40</returns>
		public bool lnk_Link40_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container43 Functions
		/// </summary>
		public void cnt_Container43_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container43_setInlineAttributes(sender, e);
		}
		public string cnt_Container43_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container43_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container43)
		/// </summary>
		/// <returns>The Visible State of wt_Container43</returns>
		public bool cnt_Container43_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance83 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance83_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("fKOPgP_OsE2Zi++YxmYxxA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_ComboBox50 Functions
		/// </summary>
		public void sel_ComboBox50_onDataBinding(object sender, System.EventArgs e) {
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			RLEmailFromRecordList Rt_wt_ComboBox50_reclist = varLcEmailFromList;
			Rt_wt_ComboBox50_reclist.StartIteration();
			try {
				while (!Rt_wt_ComboBox50_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wt_ComboBox50_reclist.CurrentRec.ssSTEmailFrom.ssname, Rt_wt_ComboBox50_reclist.CurrentRec.ssSTEmailFrom.ssEmailAddress));
					if (ssEditRecord1Record.ssENCommunication.ssFrom == Convert.ToString(Rt_wt_ComboBox50_reclist.CurrentRec.ssSTEmailFrom.ssEmailAddress)) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wt_ComboBox50_reclist.Advance();
				}
			} finally {
				Rt_wt_ComboBox50_reclist.EndIteration();
			}
		}
		public void sel_ComboBox50_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wt_ComboBox50.SpecialListVal = dropDown.SelectedValue.Substring(8);
				ssEditRecord1Record.ssENCommunication.ssFrom = "";
			}
			else {
				Rt_wt_ComboBox50.SpecialListVal = "";
				try {
					ssEditRecord1Record.ssENCommunication.ssFrom = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_ComboBox50)
		/// </summary>
		/// <returns>The Visible State of wt_ComboBox50</returns>
		public bool sel_ComboBox50_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_ComboBox50)
		/// </summary>
		/// <returns>The Enabled State of wt_ComboBox50</returns>
		public bool sel_ComboBox50_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (sel_ComboBox50)
		/// </summary>
		/// <returns>The Mandatory Value of sel_ComboBox50</returns>
		public bool sel_ComboBox50_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtEmail_Subject2 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtEmail_Subject2_input_value() {
			if (("" !=ssEditRecord1Record.ssENCommunication.ssTo)) {
				return ssEditRecord1Record.ssENCommunication.ssTo;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtEmail_Subject2");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENCommunication.ssTo;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtEmail_Subject2_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENCommunication.ssTo = ""; 
				} else {
					ssEditRecord1Record.ssENCommunication.ssTo = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENCommunication.ssTo = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtEmail_Subject2)
		/// </summary>
		/// <returns>The Visible State of wtEmail_Subject2</returns>
		public bool inputwtEmail_Subject2_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtEmail_Subject2)
		/// </summary>
		/// <returns>The Enabled State of wtEmail_Subject2</returns>
		public bool inputwtEmail_Subject2_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtEmail_Subject2)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtEmail_Subject2</returns>
		public bool inputwtEmail_Subject2_isMandatory() {
			return false;
		}

		/// <summary>
		/// Gets the prompt of the input (wtEmail_Subject2)
		/// </summary>
		/// <returns>Prompt of the Input (wtEmail_Subject2)</returns>
		public string inputwtEmail_Subject2_getPrompt() {
			return "To";
		}
		/// <summary>
		/// wtEmail_Subject3 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtEmail_Subject3_input_value() {
			if (("" !=ssEditRecord1Record.ssENCommunication.ssBCC)) {
				return ssEditRecord1Record.ssENCommunication.ssBCC;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtEmail_Subject3");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENCommunication.ssBCC;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtEmail_Subject3_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENCommunication.ssBCC = ""; 
				} else {
					ssEditRecord1Record.ssENCommunication.ssBCC = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENCommunication.ssBCC = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtEmail_Subject3)
		/// </summary>
		/// <returns>The Visible State of wtEmail_Subject3</returns>
		public bool inputwtEmail_Subject3_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtEmail_Subject3)
		/// </summary>
		/// <returns>The Enabled State of wtEmail_Subject3</returns>
		public bool inputwtEmail_Subject3_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtEmail_Subject3)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtEmail_Subject3</returns>
		public bool inputwtEmail_Subject3_isMandatory() {
			return false;
		}

		/// <summary>
		/// Gets the prompt of the input (wtEmail_Subject3)
		/// </summary>
		/// <returns>Prompt of the Input (wtEmail_Subject3)</returns>
		public string inputwtEmail_Subject3_getPrompt() {
			return "CC";
		}
		/// <summary>
		/// wtEmail_Subject4 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtEmail_Subject4_input_value() {
			if (("" !=ssEditRecord1Record.ssENCommunication.ssCC)) {
				return ssEditRecord1Record.ssENCommunication.ssCC;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtEmail_Subject4");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENCommunication.ssCC;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtEmail_Subject4_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENCommunication.ssCC = ""; 
				} else {
					ssEditRecord1Record.ssENCommunication.ssCC = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENCommunication.ssCC = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtEmail_Subject4)
		/// </summary>
		/// <returns>The Visible State of wtEmail_Subject4</returns>
		public bool inputwtEmail_Subject4_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtEmail_Subject4)
		/// </summary>
		/// <returns>The Enabled State of wtEmail_Subject4</returns>
		public bool inputwtEmail_Subject4_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtEmail_Subject4)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtEmail_Subject4</returns>
		public bool inputwtEmail_Subject4_isMandatory() {
			return false;
		}

		/// <summary>
		/// Gets the prompt of the input (wtEmail_Subject4)
		/// </summary>
		/// <returns>Prompt of the Input (wtEmail_Subject4)</returns>
		public string inputwtEmail_Subject4_getPrompt() {
			return "Bcc";
		}
		/// <summary>
		/// wtEmail_Subject Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtEmail_Subject_input_value() {
			if (("" !=ssEditRecord1Record.ssENCommunication.ssSubject)) {
				return ssEditRecord1Record.ssENCommunication.ssSubject;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtEmail_Subject");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENCommunication.ssSubject;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtEmail_Subject_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENCommunication.ssSubject = ""; 
				} else {
					ssEditRecord1Record.ssENCommunication.ssSubject = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENCommunication.ssSubject = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtEmail_Subject)
		/// </summary>
		/// <returns>The Visible State of wtEmail_Subject</returns>
		public bool inputwtEmail_Subject_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtEmail_Subject)
		/// </summary>
		/// <returns>The Enabled State of wtEmail_Subject</returns>
		public bool inputwtEmail_Subject_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtEmail_Subject)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtEmail_Subject</returns>
		public bool inputwtEmail_Subject_isMandatory() {
			return true;
		}

		/// <summary>
		/// Gets the prompt of the input (wtEmail_Subject)
		/// </summary>
		/// <returns>Prompt of the Input (wtEmail_Subject)</returns>
		public string inputwtEmail_Subject_getPrompt() {
			return "Subject";
		}
		/// <summary>
		/// wtEmail_Body Functions
		/// </summary>
		public void inputwtEmail_Body_onDataBinding(object sender, System.EventArgs e) {
			inputwtEmail_Body_setInlineAttributes(sender, e);
		}
		public string inputwtEmail_Body_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size: 12px;fline-height:13px";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtEmail_Body_input_value() {
			if (("" !=ssEditRecord1Record.ssENCommunication.ssBody)) {
				return ssEditRecord1Record.ssENCommunication.ssBody;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtEmail_Body");

				if (ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssEditRecord1Record.ssENCommunication.ssBody;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtEmail_Body_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssEditRecord1Record.ssENCommunication.ssBody = ""; 
				} else {
					ssEditRecord1Record.ssENCommunication.ssBody = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssEditRecord1Record.ssENCommunication.ssBody = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtEmail_Body)
		/// </summary>
		/// <returns>The Visible State of wtEmail_Body</returns>
		public bool inputwtEmail_Body_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtEmail_Body)
		/// </summary>
		/// <returns>The Enabled State of wtEmail_Body</returns>
		public bool inputwtEmail_Body_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtEmail_Body)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtEmail_Body</returns>
		public bool inputwtEmail_Body_isMandatory() {
			return true;
		}

		/// <summary>
		/// Gets the prompt of the input (wtEmail_Body)
		/// </summary>
		/// <returns>Prompt of the Input (wtEmail_Body)</returns>
		public string inputwtEmail_Body_getPrompt() {
			return "Message";
		}
		/// <summary>
		/// wt_Container14 Functions
		/// </summary>
		public void cnt_Container14_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container14_setInlineAttributes(sender, e);
		}
		public string cnt_Container14_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container14_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container14)
		/// </summary>
		/// <returns>The Visible State of wt_Container14</returns>
		public bool cnt_Container14_isVisible() {
			return true;
		}

		/// <summary>
		/// wtEditRecord1 Functions
		/// </summary>
		public void wtEditRecord1_onDataBindingDataSource(object sender, System.EventArgs e) {
		}
		/// <summary>
		/// wt_Container25 Functions
		/// </summary>
		public void cnt_Container25_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container25_setInlineAttributes(sender, e);
		}
		public string cnt_Container25_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container25_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container25)
		/// </summary>
		/// <returns>The Visible State of wt_Container25</returns>
		public bool cnt_Container25_isVisible() {
			return true;
		}

		/// <summary>
		/// Hunspell_wt_WebBlockInstance90 Functions
		/// </summary>
		public void Hunspell_webBlck_WebBlockInstance90_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink widget = (proxy_CaseConferencing_Hunspell.Flows.FlowHunSpell.WBlkSpellcheckerLink) sender;
			widget.inParamTextInputId = this.FindControl("wtEmail_Body").ClientID;
			widget.inParamExtraStyle = "";
			widget.inParamInPopupWindow = true;
		}
		/// <summary>
		/// wt_Link46 Functions
		/// </summary>
		public void lnk_Link46_onDataBinding(object sender, System.EventArgs e) {
			string msg = OutSystems.HubEdition.RuntimePlatform.RuntimePlatformUtils.JavaScriptEscString("Are you sure?");
			((OutSystems.HubEdition.WebWidgets.LinkButton) sender).ConfirmationMessage = msg;
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link46_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandSend(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link46)
		/// </summary>
		/// <returns>title of the Link (wt_Link46)</returns>
		public string
		lnk_Link46_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link46)
		/// </summary>
		/// <returns>The Visible State of wt_Link46</returns>
		public bool lnk_Link46_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link46)
		/// </summary>
		/// <returns>The Enabled State of wt_Link46</returns>
		public bool lnk_Link46_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container81 Functions
		/// </summary>
		public void cnt_Container81_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container81_setInlineAttributes(sender, e);
		}
		public string cnt_Container81_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "height: 17px;line-height: 17px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container81_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container81)
		/// </summary>
		/// <returns>The Visible State of wt_Container81</returns>
		public bool cnt_Container81_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance11 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance11_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("Cpl3iVqzzUCZj6kMrYJG6g")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wtLearnerListWrapper Functions
		/// </summary>
		public void cntLearnerListWrapper_onDataBinding(object sender, System.EventArgs e) {
			cntLearnerListWrapper_setInlineAttributes(sender, e);
		}
		public string cntLearnerListWrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntLearnerListWrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtLearnerListWrapper)
		/// </summary>
		/// <returns>The Visible State of wtLearnerListWrapper</returns>
		public bool cntLearnerListWrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container47 Functions
		/// </summary>
		public void cnt_Container47_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container47_setInlineAttributes(sender, e);
		}
		public string cnt_Container47_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container47_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container47)
		/// </summary>
		/// <returns>The Visible State of wt_Container47</returns>
		public bool cnt_Container47_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container41 Functions
		/// </summary>
		public void cnt_Container41_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container41_setInlineAttributes(sender, e);
		}
		public string cnt_Container41_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:relative;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container41_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container41)
		/// </summary>
		/// <returns>The Visible State of wt_Container41</returns>
		public bool cnt_Container41_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container79 Functions
		/// </summary>
		public void cnt_Container79_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container79_setInlineAttributes(sender, e);
		}
		public string cnt_Container79_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "position:absolute;left:0px;top:-25px;color:grey;font-size:11px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container79_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container79)
		/// </summary>
		/// <returns>The Visible State of wt_Container79</returns>
		public bool cnt_Container79_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance16 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance16_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("udf3KzMThUu3S4Cv7YMEqA")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_InlineExpression44 Functions
		/// </summary>
		public void expression_InlineExpression44_onDataBinding(object sender, System.EventArgs e) {
			expression_InlineExpression44_setInlineAttributes(sender, e);
		}
		public string expression_InlineExpression44_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "style";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Function to dump expression (Key = HfXLdlkc1Emymc1kc7pQtg) Expression: "( Selected learners will be
		///  added to BCC )"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression44() {
			return "( Selected learners will be added to BCC )";
		}
		/// <summary>
		/// wt_Container61 Functions
		/// </summary>
		public void cnt_Container61_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container61_setInlineAttributes(sender, e);
		}
		public string cnt_Container61_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container61_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container61)
		/// </summary>
		/// <returns>The Visible State of wt_Container61</returns>
		public bool cnt_Container61_isVisible() {
			return true;
		}

		/// <summary>
		/// wtLearnerList Functions
		/// </summary>
		public void recListLearnerList_onDataBinding(object sender, System.EventArgs e) {
			// widget wtLearnerList
			ssLearnerListList = queryResGetStudents_outParamList;
			ssLearnerListListDoDataBind = false;
			ssLearnerListListDataBound = true;
		}
		public void recListLearnerList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssLearnerListList.Length > 0) {
					ssLearnerListList.CurrentRec = ssLearnerListList[ssLearnerListList.CurrentRowNumber];
				}
				if (ssLearnerListList.Length > e.SelectedIndex) {
					ssLearnerListList.CurrentRec = ssLearnerListList[e.SelectedIndex];
					ssLearnerListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListLearnerList_Store(object dataItem, int index) {
			RCStudentBooleanTextRecord tmprec = (RCStudentBooleanTextRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssENStudent.ssStudentReference == "" ?(object) null: tmprec.ssENStudent.ssStudentReference);
			tmpFields.Add(tmprec.ssENStudent.ssForenames == "" ?(object) null: tmprec.ssENStudent.ssForenames);
			tmpFields.Add(tmprec.ssENStudent.ssSurname == "" ?(object) null: tmprec.ssENStudent.ssSurname);
			tmpFields.Add(tmprec.ssENStudent.ssStudentPhotoURL == "" ?(object) null: tmprec.ssENStudent.ssStudentPhotoURL);
			tmpFields.Add(tmprec.ssENStudent.ssEmailAddress == "" ?(object) null: tmprec.ssENStudent.ssEmailAddress);
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(tmprec.ssENStudent.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false
			}
			))));
			tmpFields.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(tmprec.ssENStudent.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true
			}
			))));
			tmpFields.Add(tmprec.ssSTBoolean.ssValue == false?(object) null: tmprec.ssSTBoolean.ssValue);
			tmpFields.Add(tmprec.ssSTText.ssValue == "" ?(object) null: tmprec.ssSTText.ssValue);
			if (index < wtLearnerList_storage.Count) {
				wtLearnerList_storage[index] = tmpFields;
			} else {
				wtLearnerList_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListLearnerList_Restore() {

			#region fetch ssLearnerListList.

			// Read the needed fields of ssLearnerListList from storewtLearnerList_list
			ssLearnerListList = new RLStudentBooleanTextRecordList();
			ArrayList storewtLearnerList_list;
			storewtLearnerList_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtLearnerList_list", null);
			if (storewtLearnerList_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtLearnerList_list in storewtLearnerList_list) {
					if (tmpFieldswtLearnerList_list != null) {
						// Aux current record variable
						RCStudentBooleanTextRecord tmpAuxCurrentRecordwtLearnerList_list = new RCStudentBooleanTextRecord(null);
						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssStudentReference = (string) (tmpFieldswtLearnerList_list[0] == null ? "": tmpFieldswtLearnerList_list[0]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssForenames = (string) (tmpFieldswtLearnerList_list[1] == null ? "": tmpFieldswtLearnerList_list[1]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssSurname = (string) (tmpFieldswtLearnerList_list[2] == null ? "": tmpFieldswtLearnerList_list[2]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssStudentPhotoURL = (string) (tmpFieldswtLearnerList_list[3] == null ? "": tmpFieldswtLearnerList_list[3]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ssEmailAddress = (string) (tmpFieldswtLearnerList_list[4] == null ? "": tmpFieldswtLearnerList_list[4]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list[5]);

						tmpAuxCurrentRecordwtLearnerList_list.ssENStudent.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtLearnerList_list[6]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTBoolean.ssValue = (bool) (tmpFieldswtLearnerList_list[7] == null ? false: tmpFieldswtLearnerList_list[7]);

						tmpAuxCurrentRecordwtLearnerList_list.ssSTText.ssValue = (string) (tmpFieldswtLearnerList_list[8] == null ? "": tmpFieldswtLearnerList_list[8]);

						ssLearnerListList.Append(tmpAuxCurrentRecordwtLearnerList_list);
					}
				}
			}
			ssLearnerListList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssLearnerListList runtime properties state.


			if (storewtLearnerList_list.Count > 0) {
				ssLearnerListList.RestoreRecordListState(storewtLearnerList_list.Count - 1, false);
			} else {
				ssLearnerListList.CurrentRowNumber = 0;
			}

			#endregion

			wtLearnerList_storage = storewtLearnerList_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListLearnerList_Clear(object sender, EventArgs e) {
			wtLearnerList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListLearnerList_Rebuild(int startIndex, int lineCount) {
			if (ssLearnerListList.Length != -1) {
				wtLearnerList_storage.Clear();
				for (int i=startIndex; i<ssLearnerListList.Data.Count && i<startIndex+lineCount; i++) {
					recListLearnerList_Store(ssLearnerListList.Data[i], wtLearnerList_storage.Count);
				}
			}
		}
		public void recListLearnerList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtLearnerList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLStudentBooleanTextRecordList getWtLearnerListList() {
			if (ssLearnerListListDoDataBind) {
				recListLearnerList_onDataBinding(this, null);
			}

			return ssLearnerListList;
		}
		/// <summary>
		/// wt_Container76 Functions
		/// </summary>
		public void cnt_Container76_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container76_setInlineAttributes(sender, e);
		}
		public string cnt_Container76_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "border-left: solid 1px #DADADA;position:relative";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container76_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container76)
		/// </summary>
		/// <returns>The Visible State of wt_Container76</returns>
		public bool cnt_Container76_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container85 Functions
		/// </summary>
		public void cnt_Container85_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container85_setInlineAttributes(sender, e);
		}
		public string cnt_Container85_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container85_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container85)
		/// </summary>
		/// <returns>The Visible State of wt_Container85</returns>
		public bool cnt_Container85_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container89 Functions
		/// </summary>
		public void cnt_Container89_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container89_setInlineAttributes(sender, e);
		}
		public string cnt_Container89_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container89_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container89)
		/// </summary>
		/// <returns>The Visible State of wt_Container89</returns>
		public bool cnt_Container89_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Image75 Functions
		/// </summary>
		public void img_Image75_onDataBinding(object sender, System.EventArgs e) {
			img_Image75_setInlineAttributes(sender, e);
		}
		public string img_Image75_setInlineAttributes(object sender, System.EventArgs e) {
			((IAttributeAccessor) sender).SetAttribute("onerror", "this.src=\'img/missingphoto.png\';" .ToString());
			return "";
		}

		/// <summary>
		/// Gets the URL of the image (wt_Image75)
		/// </summary>
		/// <returns>URL of the Image (wt_Image75)</returns>
		public string img_Image75_getURL() {
			string url = getWtLearnerListList().CurrentRec.ssENStudent.ssStudentPhotoURL;
			url = url.Replace("&amp;", "&");
			return url; 
		}
		/// <summary>
		/// wt_Container1 Functions
		/// </summary>
		public void cnt_Container1_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container1_setInlineAttributes(sender, e);
		}
		public string cnt_Container1_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-left:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container1_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container1)
		/// </summary>
		/// <returns>The Visible State of wt_Container1</returns>
		public bool cnt_Container1_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container65 Functions
		/// </summary>
		public void cnt_Container65_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container65_setInlineAttributes(sender, e);
		}
		public string cnt_Container65_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container65_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container65)
		/// </summary>
		/// <returns>The Visible State of wt_Container65</returns>
		public bool cnt_Container65_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Link80 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link80)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link80)</returns>
		public string lnk_Link80_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("StudentReference", System.Web.HttpUtility.UrlEncode(getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "LearnerDetailsOverview", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link80)
		/// </summary>
		/// <returns>title of the Link (wt_Link80)</returns>
		public string
		lnk_Link80_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link80)
		/// </summary>
		/// <returns>The Visible State of wt_Link80</returns>
		public bool lnk_Link80_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link80)
		/// </summary>
		/// <returns>The Enabled State of wt_Link80</returns>
		public bool lnk_Link80_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression84 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 0wgc7_1AIEu+G5RTamKbpQ) Expression: ToUpper + ", " +
		///  LearnerList.List.Current.Student.Forenames + "("
		/// + LearnerList.List.Current.Student.StudentReference + ")"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression84() {
			return (((((BuiltInFunction.ToUpper(getWtLearnerListList().CurrentRec.ssENStudent.ssSurname) + ", ") +getWtLearnerListList().CurrentRec.ssENStudent.ssForenames) + "(") +getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference) + ")");
		}
		/// <summary>
		/// wt_Container60 Functions
		/// </summary>
		public void cnt_Container60_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container60_setInlineAttributes(sender, e);
		}
		public string cnt_Container60_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "font-size: 12px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container60_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container60)
		/// </summary>
		/// <returns>The Visible State of wt_Container60</returns>
		public bool cnt_Container60_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container39 Functions
		/// </summary>
		public void cnt_Container39_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container39_setInlineAttributes(sender, e);
		}
		public string cnt_Container39_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container39_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container39)
		/// </summary>
		/// <returns>The Visible State of wt_Container39</returns>
		public bool cnt_Container39_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container54 Functions
		/// </summary>
		public void cnt_Container54_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container54_setInlineAttributes(sender, e);
		}
		public string cnt_Container54_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container54_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container54)
		/// </summary>
		/// <returns>The Visible State of wt_Container54</returns>
		public bool cnt_Container54_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_CheckBox31 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box LeYVUjjDGUK+r_pTA2LjjA
		/// </summary>
		/// <returns>The Value of the Check Box LeYVUjjDGUK+r_pTA2LjjA</returns>
		public bool chk_CheckBox31_checked_value() {
			return getWtLearnerListList().CurrentRec.ssSTBoolean.ssValue;
		}
		public void chk_CheckBox31_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is IIteratorItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((IIteratorItem) parentControl).ItemIndex;
				if (ssLearnerListList.Length > parentControlIndex && parentControlIndex > -1) {
					ssLearnerListList.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtLearnerListList().CurrentRec.ssSTBoolean.ssValue = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox31)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox31</returns>
		public bool chk_CheckBox31_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox31)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox31</returns>
		public bool chk_CheckBox31_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container33 Functions
		/// </summary>
		public void cnt_Container33_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container33_setInlineAttributes(sender, e);
		}
		public string cnt_Container33_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "white-space:normal;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			if (!cnt_Container33_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container33)
		/// </summary>
		/// <returns>The Visible State of wt_Container33</returns>
		public bool cnt_Container33_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_If23 Functions
		/// </summary>
		bool if_wt_If23_hasRun=false;
		bool if_wt_If23_evalResult;
		public bool if_wt_If23() {
			if (if_wt_If23_hasRun) {
				if_wt_If23_hasRun = false;
				return if_wt_If23_evalResult;
			}
			if_wt_If23_hasRun = true;
			if_wt_If23_evalResult = (getWtLearnerListList().CurrentRec.ssENStudent.ssEmailAddress!= "");
			return if_wt_If23_evalResult;
		}

		/// <summary>
		/// wt_InlineExpression45 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 2wfseZTbz0ui217v6bPcxA) Expression: internalIf
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression45() {
			return (((getWtLearnerListList().CurrentRec.ssSTText.ssValue== "")) ?("(no email)"):(getWtLearnerListList().CurrentRec.ssSTText.ssValue));
		}
		/// <summary>
		/// wt_Text26 Functions
		/// </summary>
		public void wt_Text26_onDataBinding(object sender, System.EventArgs e) {
			wt_Text26_setInlineAttributes(sender, e);
		}
		public string wt_Text26_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "margin-left:4px;color:#666;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_Container56 Functions
		/// </summary>
		public void cnt_Container56_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container56_setInlineAttributes(sender, e);
		}
		public string cnt_Container56_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container56_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container56)
		/// </summary>
		/// <returns>The Visible State of wt_Container56</returns>
		public bool cnt_Container56_isVisible() {
			return true;
		}

		/// <summary>
		/// wtlnkTo Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtlnkTo)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtlnkTo)</returns>
		public string lnklnkTo_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("StudentId", System.Web.HttpUtility.UrlEncode(getWtLearnerListList().CurrentRec.ssENStudent.ssStudentReference, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>("CurrentEmail", System.Web.HttpUtility.UrlEncode(getWtLearnerListList().CurrentRec.ssSTText.ssValue, Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_EmailSelection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtlnkTo)
		/// </summary>
		/// <returns>title of the Link (wtlnkTo)</returns>
		public string
		lnklnkTo_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtlnkTo)
		/// </summary>
		/// <returns>The Visible State of wtlnkTo</returns>
		public bool lnklnkTo_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtlnkTo)
		/// </summary>
		/// <returns>The Enabled State of wtlnkTo</returns>
		public bool lnklnkTo_isEnabled() {
			return true; 
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance35 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance35_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("NcdYoHCZikuz1QH+Reihqg")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance3 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance3_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
			widget.inParamLinkOrButtonWidgetId = Utils.getControlInRecordWidget(wtLearnerList, "wtlnkTo").ClientID;
			widget.inParamTitle = " ";
			widget.inParamWidthPx = -1;
			widget.inParamHeightPx = -1;
			widget.inParamAutoResize = true;
			widget.inParamRecenterOnResize = false;
			widget.inParamHideCloseButton = false;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance3
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance3_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandOnNotify(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container58 Functions
		/// </summary>
		public void cnt_Container58_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container58_setInlineAttributes(sender, e);
		}
		public string cnt_Container58_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container58_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container58)
		/// </summary>
		/// <returns>The Visible State of wt_Container58</returns>
		public bool cnt_Container58_isVisible() {
			return true;
		}



		public static class FuncCommandOnNotify {
		}
		public static class FuncCommandOnNotifyAddDoc {

			/// <summary>
			/// Query Function "GetDocuments" of Action "OnNotifyAddDoc"
			/// </summary>
			public static RLDocumentsRecordList datasetGetDocuments(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: True
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 3));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENDocuments.[ID] o1, ENDocuments.[TYPE] o2, ENDocuments.[DOCUMENTNAME] o3, ENDocuments.[DOCUMENTDATA] o4, ENDocuments.[DOCUMENTTYPE] o5, ENDocuments.[DOCVIEWINGRESTRICTEDBYUSER] o6, ENDocuments.[DOCVIEWINGRESTRICTEDBYROLE] o7");
				fromBuilder.Append(" FROM {Documents} ENDocuments");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENDocuments.[ID] = @qpinP) AND (ENDocuments.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENDocuments.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENDocuments.[TYPE] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLDocumentsRecordList outParamList = new RLDocumentsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLDocumentsRecordList _tmp = new RLDocumentsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Course_Email.OnNotifyAddDoc.GetDocuments.List");
						outParamList = (RLDocumentsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_Email.OnNotifyAddDoc.GetDocuments.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 3) {
						RLDocumentsRecordList _tmp = new RLDocumentsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Course_Email.OnNotifyAddDoc.GetDocuments.List");
							outParamList = (RLDocumentsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_Email.OnNotifyAddDoc.GetDocuments.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandDelete {
		}
		public static class FuncCommandSend {
		}
		public static class FuncCommandDownload {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetUserById" of Action "Preparation"
			/// </summary>
			public static RLUserRecordList datasetGetUserById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, ENUser.[EMAIL] o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM {User} ENUser");
				whereBuilder.Append(" WHERE (ENUser.[IS_ACTIVE] = 1) AND ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENUser.[ID] = @qpinP) AND (ENUser.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENUser.[ID] IS NULL)");
				}
				orderByBuilder.Append(" ORDER BY ENUser.[NAME] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserRecordList outParamList = new RLUserRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, false, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserRecordList _tmp = new RLUserRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Course_Email.Preparation.GetUserById.List");
						outParamList = (RLUserRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_Email.Preparation.GetUserById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserRecordList _tmp = new RLUserRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Course_Email.Preparation.GetUserById.List");
							outParamList = (RLUserRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_Email.Preparation.GetUserById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetGroup2s" of Action "Preparation"
			/// </summary>
			public static RLGroupRecordList datasetGetGroup2s(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, ENGroup.[GROUPDESCRIPTION] o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9");
				fromBuilder.Append(" FROM {Group} ENGroup");
				whereBuilder.Append(" WHERE (ENGroup.[GROUPNAME] = @qpstP)");
				orderByBuilder.Append(" ORDER BY ENGroup.[GROUPNAME] ASC ");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLGroupRecordList outParamList = new RLGroupRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					true, true, false, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLGroupRecordList _tmp = new RLGroupRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Course_Email.Preparation.GetGroup2s.List");
						outParamList = (RLGroupRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_Email.Preparation.GetGroup2s.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLGroupRecordList _tmp = new RLGroupRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Course_Email.Preparation.GetGroup2s.List");
							outParamList = (RLGroupRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_Email.Preparation.GetGroup2s.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			private static void QueryGetStudentsReadDB(ref RCStudentBooleanTextRecord rec, IDataReader r) {
				int index = 0;
				rec.ssSTBoolean.Read(r, ref index);
				rec.ssENStudent.Read(r, ref index);
				rec.ssSTText.Read(r, ref index);
			}
			/// <summary>
			/// Query Function "GetStudents" of Action "Preparation"
			/// </summary>
			public static RLStudentBooleanTextRecordList QueryGetStudents(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstCourseCode) {
				// Query Iterations: Single {LearnerList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstCourseCode", DbType.String, qpstCourseCode);
				string advSql = "SELECT 1,  {Student}.[STUDENTREFERENCE], {Student}.[FORENAMES], {Student}.[SURNAME], {Student}.[DATEOFBIRTH], {Student}.[GENDER], {Student}.[MAINOFFERINGCODE], {Student}.[MAINOFFERINGNAME], {Student}.[STUDENTPHOTOURL], {Student}.[HOMEADDRESS], {Student}.[HOMEADDRESSPOSTCODE], {Student}.[CURRENTADDRESS], {Student}.[CURRENTADDRESSPOSTCODE], {Student}.[EMAILADDRESS], {Student}.[HOMETELEPHONE], {Student}.[MOBILEPHONE], {Student}.[NEXTOFKINNAME], {Student}.[NEXTOFKINRELATIONSHIP], {Student}.[NEXTOFKINADDRESS], {Student}.[NEXTOFKINPOSTCODE], {Student}.[NEXTOFKINPHONE], {Student}.[PERSONALTUTOR], {Student}.[NEXTOFKINEMAIL], {Student}.[HASCURRENTACTIVEENROLMENT], {Student}.[NETWORKLOGIN], {Student}.[NINUMBER], {Student}.[RESIDENTIALSTATUS], {Student}.[PREVIOUSSCHOOL],  {Student}.[EMAILADDRESS] FROM  {Student}  " +
				 "WHERE  " +
				 "    EXISTS (   " +
				 "        SELECT  {Group}.[ID] FROM  {Group} INNER JOIN  {Student_Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID] AND  {Student}.[STUDENTREFERENCE] =  {Student_Group}.[STUDENTREFERENCE]   " +
				 "            WHERE  {Group}.[GROUPNAME] = @qpstCourseCode   " +
				 "            AND  {Student_Group}.[ENROLMENTSTATUS] = 'Active'  " +
				 "    )  " +
				 "    " +
				 "ORDER BY  {Student}.[SURNAME],  " +
				 "          {Student}.[FORENAMES]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLStudentBooleanTextRecordList outParamList = new RLStudentBooleanTextRecordList();
					if (multiplicity != IterationMultiplicity.Multiple) {
						outParamList.AlternateReadDBMethod = QueryGetStudentsReadDB;
					}
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[3];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
					}
					);
					opt[1] = new BitArray(new bool[] {
						false
					}
					);
					opt[2] = new BitArray(new bool[] {
						false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLStudentBooleanTextRecordList _tmp = new RLStudentBooleanTextRecordList();
						_tmp.AlternateReadDBMethod = QueryGetStudentsReadDB;
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Courses.Course_Email.Preparation.GetStudents.List");
							outParamList = (RLStudentBooleanTextRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_Email.Preparation.GetStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Courses.Course_Email.Preparation.GetStudents.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetStudents in Preparation in Course_Email in Courses in CaseConferencing (SELECT 1, {Student}.*, {Student}.[EmailAddress] FROM {Student}  WHERE      EXISTS (           SELECT {Group}.[Id] FROM {Group} INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student}.[StudentReference] = {Student_Group}.[StudentReference]               WHERE {Group}.[GroupName] = @CourseCode               AND {Student_Group}.[EnrolmentStatus] = 'Active'      )      ORDER BY {Student}.[Surname],           {Student}.[Forenames]): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetStudents in Preparation in Course_Email in Courses in CaseConferencing (SELECT 1, {Student}.*, {Student}.[EmailAddress] FROM {Student}  WHERE      EXISTS (           SELECT {Group}.[Id] FROM {Group} INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student}.[StudentReference] = {Student_Group}.[StudentReference]               WHERE {Group}.[GroupName] = @CourseCode               AND {Student_Group}.[EnrolmentStatus] = 'Active'      )      ORDER BY {Student}.[Surname],           {Student}.[Forenames]): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetStudents in Preparation in Course_Email in Courses in CaseConferencing (SELECT 1, {Student}.*, {Student}.[EmailAddress] FROM {Student}  WHERE      EXISTS (           SELECT {Group}.[Id] FROM {Group} INNER JOIN {Student_Group} ON {Student_Group}.[GroupId] = {Group}.[Id] AND {Student}.[StudentReference] = {Student_Group}.[StudentReference]               WHERE {Group}.[GroupName] = @CourseCode               AND {Student_Group}.[EnrolmentStatus] = 'Active'      )      ORDER BY {Student}.[Surname],           {Student}.[Forenames]): " + aqExcep.Message);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Course Email"; ssListRecordsAttatcListDoDataBind = true;
				ssLearnerListListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_Email", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_Email", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamCourseCode", inParamCourseCode, "");
			ViewStateAttributes.SetInViewState("inParamIncludeTarget", inParamIncludeTarget, false);
			ViewStateAttributes.SetInViewState("inParamTargetDescription", inParamTargetDescription, "");

			#region store varLcEmailFromList.

			int tmpcurrentrownumbervarLcEmailFromList = varLcEmailFromList.CurrentRowNumber;
			bool tmpeofvarLcEmailFromList = varLcEmailFromList.Eof;
			ArrayList storevarLcEmailFromList = new ArrayList();

			// Write the needed fields of varLcEmailFromList to the storevarLcEmailFromList
			if (!varLcEmailFromList.Empty) {
				try {
					varLcEmailFromList.StartIteration();

					while (!varLcEmailFromList.Eof) {
						ArrayList tmpFieldsvarLcEmailFromList = new ArrayList();
						tmpFieldsvarLcEmailFromList.Add(varLcEmailFromList.CurrentRec.ssSTEmailFrom.ssname == "" ?(object) null: varLcEmailFromList.CurrentRec.ssSTEmailFrom.ssname);
						tmpFieldsvarLcEmailFromList.Add(varLcEmailFromList.CurrentRec.ssSTEmailFrom.ssEmailAddress == "" ?(object) null: varLcEmailFromList.CurrentRec.ssSTEmailFrom.ssEmailAddress);
						storevarLcEmailFromList.Add(tmpFieldsvarLcEmailFromList);
						varLcEmailFromList.Advance();
					}
				} finally {
					varLcEmailFromList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("varLcEmailFromList", storevarLcEmailFromList, null);

			#endregion


			#region store varLcEmailFromList runtime properties state.

			ViewStateAttributes.SetInViewState("varLcEmailFromList_currentrownumber", tmpcurrentrownumbervarLcEmailFromList, 0);
			ViewStateAttributes.SetInViewState("varLcEmailFromList_eof", tmpeofvarLcEmailFromList, false);
			varLcEmailFromList.RestoreRecordListState(tmpcurrentrownumbervarLcEmailFromList, tmpeofvarLcEmailFromList);

			#endregion

			if (IsAjaxRequest) {
				recListListRecordsAttatc_Rebuild((ssListRecordsAttatcListDataBound ? wtListRecordsAttatc.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtListRecordsAttatc.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtListRecordsAttatc_list", wtListRecordsAttatc_storage, null);
			ViewStateAttributes.SetInViewState("wt_ComboBox50_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox50")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtEmail_Subject2_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtEmail_Subject2")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtEmail_Subject3_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtEmail_Subject3")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtEmail_Subject4_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtEmail_Subject4")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtEmail_Subject_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtEmail_Subject")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtEmail_Body_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtEmail_Body")).Mandatory, false);

			#region store ssEditRecord1Record.ssSTDocument_List.ssDocuments.

			int tmpcurrentrownumberwtEditRecord1_record_ssSTDocument_List_ssDocuments = ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRowNumber;
			bool tmpeofwtEditRecord1_record_ssSTDocument_List_ssDocuments = ssEditRecord1Record.ssSTDocument_List.ssDocuments.Eof;
			ArrayList storewtEditRecord1_record_ssSTDocument_List_ssDocuments = new ArrayList();

			// Write the needed fields of ssEditRecord1Record.ssSTDocument_List.ssDocuments to the storewtEditRecord1_record_ssSTDocument_List_ssDocuments
			if (!ssEditRecord1Record.ssSTDocument_List.ssDocuments.Empty) {
				try {
					ssEditRecord1Record.ssSTDocument_List.ssDocuments.StartIteration();

					while (!ssEditRecord1Record.ssSTDocument_List.ssDocuments.Eof) {
						ArrayList tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments = new ArrayList();
						tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments.Add(ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.ssId == 0?(object) null: ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.ssId);
						tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments.Add(ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.ssType == "" ?(object) null: ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.ssType);
						tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments.Add(ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.ssDocumentName == "" ?(object) null: ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.ssDocumentName);
						tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments.Add(ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.ssDocumentData);
						tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, true, false, false, false
						}
						))));
						tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRec.ssENDocuments.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, false, true, true, true
						}
						))));
						storewtEditRecord1_record_ssSTDocument_List_ssDocuments.Add(tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments);
						ssEditRecord1Record.ssSTDocument_List.ssDocuments.Advance();
					}
				} finally {
					ssEditRecord1Record.ssSTDocument_List.ssDocuments.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssSTDocument_List_ssDocuments", storewtEditRecord1_record_ssSTDocument_List_ssDocuments, null);

			#endregion


			#region store ssEditRecord1Record.ssSTDocument_List.ssDocuments runtime properties state.

			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssSTDocument_List_ssDocuments_currentrownumber", tmpcurrentrownumberwtEditRecord1_record_ssSTDocument_List_ssDocuments, 0);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssSTDocument_List_ssDocuments_eof", tmpeofwtEditRecord1_record_ssSTDocument_List_ssDocuments, false);
			ssEditRecord1Record.ssSTDocument_List.ssDocuments.RestoreRecordListState(tmpcurrentrownumberwtEditRecord1_record_ssSTDocument_List_ssDocuments, tmpeofwtEditRecord1_record_ssSTDocument_List_ssDocuments);

			#endregion

			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_ssId", ssEditRecord1Record.ssENCommunication.ssId, 0);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_ssFrom", ssEditRecord1Record.ssENCommunication.ssFrom, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_ssTo", ssEditRecord1Record.ssENCommunication.ssTo, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_ssBCC", ssEditRecord1Record.ssENCommunication.ssBCC, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_ssCC", ssEditRecord1Record.ssENCommunication.ssCC, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_ssSubject", ssEditRecord1Record.ssENCommunication.ssSubject, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_ssBody", ssEditRecord1Record.ssENCommunication.ssBody, "");
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssEditRecord1Record.ssENCommunication.ChangedAttributes, new BitArray(new bool[] {
				true, false, false, true, true, true, true, true, true, false, false, false, false
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtEditRecord1_record_ssENCommunication_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssEditRecord1Record.ssENCommunication.OptimizedAttributes, new BitArray(new bool[] {
				false, true, true, false, false, false, false, false, false, true, true, true, true
			}
			)))), null);
			if (IsAjaxRequest) {
				recListLearnerList_Rebuild((ssLearnerListListDataBound ? wtLearnerList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtLearnerList.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtLearnerList_list", wtLearnerList_storage, null);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamCourseCode = (string) ViewStateAttributes.GetFromViewState("inParamCourseCode", "");
				inParamIncludeTarget = (bool) ViewStateAttributes.GetFromViewState("inParamIncludeTarget", false);
				inParamTargetDescription = (string) ViewStateAttributes.GetFromViewState("inParamTargetDescription", "");

				#region fetch varLcEmailFromList.

				// Read the needed fields of varLcEmailFromList from storevarLcEmailFromList
				varLcEmailFromList = new RLEmailFromRecordList();
				ArrayList storevarLcEmailFromList;
				storevarLcEmailFromList = (ArrayList) ViewStateAttributes.GetFromViewState("varLcEmailFromList", null);
				if (storevarLcEmailFromList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsvarLcEmailFromList in storevarLcEmailFromList) {
						if (tmpFieldsvarLcEmailFromList != null) {
							// Aux current record variable
							RCEmailFromRecord tmpAuxCurrentRecordvarLcEmailFromList = new RCEmailFromRecord(null);
							tmpAuxCurrentRecordvarLcEmailFromList.ssSTEmailFrom.ssname = (string) (tmpFieldsvarLcEmailFromList[0] == null ? "": tmpFieldsvarLcEmailFromList[0]);

							tmpAuxCurrentRecordvarLcEmailFromList.ssSTEmailFrom.ssEmailAddress = (string) (tmpFieldsvarLcEmailFromList[1] == null ? "": tmpFieldsvarLcEmailFromList[1]);

							varLcEmailFromList.Append(tmpAuxCurrentRecordvarLcEmailFromList);
						}
					}
				}
				varLcEmailFromList.CurrentRowNumber = -1;
				#endregion


				#region fetch varLcEmailFromList runtime properties state.

				int tmpcurrentrownumbervarLcEmailFromList;
				tmpcurrentrownumbervarLcEmailFromList = (int) ViewStateAttributes.GetFromViewState("varLcEmailFromList_currentrownumber", 0);
				bool tmpeofvarLcEmailFromList;
				tmpeofvarLcEmailFromList = (bool) ViewStateAttributes.GetFromViewState("varLcEmailFromList_eof", false);
				varLcEmailFromList.RestoreRecordListState(tmpcurrentrownumbervarLcEmailFromList, tmpeofvarLcEmailFromList);

				#endregion

				recListListRecordsAttatc_Restore();
				((IWidgetRuntimeProperties) this.FindControl("wt_ComboBox50")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_ComboBox50_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtEmail_Subject2")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtEmail_Subject2_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtEmail_Subject3")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtEmail_Subject3_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtEmail_Subject4")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtEmail_Subject4_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtEmail_Subject")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtEmail_Subject_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtEmail_Body")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtEmail_Body_Mandatory", false);

				#region fetch ssEditRecord1Record.ssSTDocument_List.ssDocuments.

				// Read the needed fields of ssEditRecord1Record.ssSTDocument_List.ssDocuments from storewtEditRecord1_record_ssSTDocument_List_ssDocuments
				ssEditRecord1Record.ssSTDocument_List.ssDocuments = new RLDocumentsRecordList();
				ArrayList storewtEditRecord1_record_ssSTDocument_List_ssDocuments;
				storewtEditRecord1_record_ssSTDocument_List_ssDocuments = (ArrayList) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssSTDocument_List_ssDocuments", null);
				if (storewtEditRecord1_record_ssSTDocument_List_ssDocuments == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments in storewtEditRecord1_record_ssSTDocument_List_ssDocuments) {
						if (tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments != null) {
							// Aux current record variable
							RCDocumentsRecord tmpAuxCurrentRecordwtEditRecord1_record_ssSTDocument_List_ssDocuments = new RCDocumentsRecord(null);
							tmpAuxCurrentRecordwtEditRecord1_record_ssSTDocument_List_ssDocuments.ssENDocuments.ssId = (int) (tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments[0] == null ? 0: tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments[0]);

							tmpAuxCurrentRecordwtEditRecord1_record_ssSTDocument_List_ssDocuments.ssENDocuments.ssType = (string) (tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments[1] == null ? "": tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments[1]);

							tmpAuxCurrentRecordwtEditRecord1_record_ssSTDocument_List_ssDocuments.ssENDocuments.ssDocumentName = (string) (tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments[2] == null ? "": tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments[2]);

							tmpAuxCurrentRecordwtEditRecord1_record_ssSTDocument_List_ssDocuments.ssENDocuments.ssDocumentData = (byte[]) tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments[3];

							tmpAuxCurrentRecordwtEditRecord1_record_ssSTDocument_List_ssDocuments.ssENDocuments.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments[4]);

							tmpAuxCurrentRecordwtEditRecord1_record_ssSTDocument_List_ssDocuments.ssENDocuments.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldswtEditRecord1_record_ssSTDocument_List_ssDocuments[5]);

							ssEditRecord1Record.ssSTDocument_List.ssDocuments.Append(tmpAuxCurrentRecordwtEditRecord1_record_ssSTDocument_List_ssDocuments);
						}
					}
				}
				ssEditRecord1Record.ssSTDocument_List.ssDocuments.CurrentRowNumber = -1;
				#endregion


				#region fetch ssEditRecord1Record.ssSTDocument_List.ssDocuments runtime properties state.

				int tmpcurrentrownumberwtEditRecord1_record_ssSTDocument_List_ssDocuments;
				tmpcurrentrownumberwtEditRecord1_record_ssSTDocument_List_ssDocuments = (int) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssSTDocument_List_ssDocuments_currentrownumber", 0);
				bool tmpeofwtEditRecord1_record_ssSTDocument_List_ssDocuments;
				tmpeofwtEditRecord1_record_ssSTDocument_List_ssDocuments = (bool) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssSTDocument_List_ssDocuments_eof", false);
				ssEditRecord1Record.ssSTDocument_List.ssDocuments.RestoreRecordListState(tmpcurrentrownumberwtEditRecord1_record_ssSTDocument_List_ssDocuments, tmpeofwtEditRecord1_record_ssSTDocument_List_ssDocuments);

				#endregion

				ssEditRecord1Record.ssENCommunication.ssId = (int) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_ssId", 0);
				ssEditRecord1Record.ssENCommunication.ssFrom = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_ssFrom", "");
				ssEditRecord1Record.ssENCommunication.ssTo = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_ssTo", "");
				ssEditRecord1Record.ssENCommunication.ssBCC = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_ssBCC", "");
				ssEditRecord1Record.ssENCommunication.ssCC = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_ssCC", "");
				ssEditRecord1Record.ssENCommunication.ssSubject = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_ssSubject", "");
				ssEditRecord1Record.ssENCommunication.ssBody = (string) ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_ssBody", "");
				ssEditRecord1Record.ssENCommunication.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_ChangedAttributes", null));
				ssEditRecord1Record.ssENCommunication.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtEditRecord1_record_ssENCommunication_OptimizedAttributes", null));
				recListLearnerList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wt_ComboBox50", parentEditRecord, validate);
			ValidationUtils.ValidateInput(this, "wtEmail_Subject2", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtEmail_Subject3", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtEmail_Subject4", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtEmail_Subject", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtEmail_Body", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
