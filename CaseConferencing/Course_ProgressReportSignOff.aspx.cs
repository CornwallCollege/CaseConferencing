/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssCaseConferencing.Flows.FlowLearner_ProgressReport {

	public class ScrnCourse_ProgressReportSignOff: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnCourse_ProgressReportSignOff(): base(CaseConferencing_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamCourseCode. Description:
		/// </summary>
		public string inParamCourseCode = "";
		/// <summary>
		/// Screen Input Parameter inParamProgressReportTypeId. Description:
		/// </summary>
		public int inParamProgressReportTypeId = 0;
		/// <summary>
		/// Screen Input Parameter inParamAcademicYearId. Description:
		/// </summary>
		public string inParamAcademicYearId = "";
		/// <summary>
		/// Variable <code>varLcURL</code> that represents the Service Studio local variable <code>URL</code>
		///  <p>Description: </p>
		/// </summary>
		string varLcURL = "";

		/// <summary>
		/// Variable ThemeProvider_wt_WebBlockInstance19
		/// </summary>
		protected proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main ThemeProvider_wt_WebBlockInstance19;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container10;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container15;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtProgressReportTypeValidatorRequired;
		protected SelectRtWidget Rt_wtProgressReportType = new SelectRtWidget();
		RLProgressReportTypeRecordList Rt_wtProgressReportType_reclist = null;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container22;
		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtAcademicYearComboValidatorRequired;
		protected SelectRtWidget Rt_wtAcademicYearCombo = new SelectRtWidget();
		RLAcademicYearsRecordList Rt_wtAcademicYearCombo_reclist = null;
		private RLCourseListProgressReportListRecordList _ssTableRecords1List = new RLCourseListProgressReportListRecordList();
		public RLCourseListProgressReportListRecordList ssTableRecords1List {
			get {
				return _ssTableRecords1List; 
			}
			set {
				_ssTableRecords1List = value;
				wtTableRecords1.DataSource = value;
				ssTableRecords1ListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.OSDataGrid wtTableRecords1;
		public ArrayList wtTableRecords1_storage = new ArrayList();
		protected bool ssTableRecords1List_notUsedYet = true;
		protected bool ssTableRecords1ListDoDataBind;
		protected bool ssTableRecords1ListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;
		protected OutSystems.HubEdition.WebWidgets.Container wtCheckboxContainer;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		/// <summary>
		/// Variable (wtHiddenCreateButton) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtHiddenCreateButton;
		/// <summary>
		/// Variable (wtTestDownloadLink) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wtTestDownloadLink;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;


		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_BulkSelect.GetCss(writer, inline, visited);
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkCourseLearnerProgressReportStatus.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon.GetCss(writer, inline, visited);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("jd0N8HYn7EWXsrmB6YefRw", "Course_ProgressReportSignOff");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/CaseConferencing/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "jd0N8HYn7EWXsrmB6YefRw", "Course_ProgressReportSignOff");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "jd0N8HYn7EWXsrmB6YefRw", "Course_ProgressReportSignOff");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "jd0N8HYn7EWXsrmB6YefRw", "Course_ProgressReportSignOff");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "jd0N8HYn7EWXsrmB6YefRw", "Course_ProgressReportSignOff");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnCourse_ProgressReportSignOff() {
		}


		RLProgressReportTypeRecordList queryResGetProgressReportTypes_outParamList = new RLProgressReportTypeRecordList();
		int queryResGetProgressReportTypes_outParamCount = 0;
		RLAcademicYearsRecordList queryResGetAcademicYears_outParamList = new RLAcademicYearsRecordList();
		int queryResGetAcademicYears_outParamCount = 0;
		RLCourseListProgressReportListRecordList queryResGetLearners_outParamList = new RLCourseListProgressReportListRecordList();
		int queryResGetLearners_outParamCount = 0;
		Actions.lcoGetCurrentAcademicYear2 resGetCurrentAcademicYear2 = new Actions.lcoGetCurrentAcademicYear2(); /// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			// GetCurrentAcademicYear2
			Actions.ActionGetCurrentAcademicYear2(heContext, out resGetCurrentAcademicYear2.outParamAcademicYear);
			inParamAcademicYearId = resGetCurrentAcademicYear2.outParamAcademicYear.ssENAcademicYears.ssId; // AcademicYearId = GetCurrentAcademicYear2.AcademicYear.AcademicYears.Id
			// Query datasetGetAcademicYears
			int datasetGetAcademicYears_maxRecords = 0;
			queryResGetAcademicYears_outParamList = FuncssPreparation.datasetGetAcademicYears(heContext, datasetGetAcademicYears_maxRecords, IterationMultiplicity.Single, out queryResGetAcademicYears_outParamCount);
			// Query datasetGetProgressReportTypes
			int datasetGetProgressReportTypes_maxRecords = 0;
			queryResGetProgressReportTypes_outParamList = FuncssPreparation.datasetGetProgressReportTypes(heContext, datasetGetProgressReportTypes_maxRecords, IterationMultiplicity.Single, out queryResGetProgressReportTypes_outParamCount);
			if ((BuiltInFunction.Month(BuiltInFunction.CurrDate()) ==9)) {
				inParamProgressReportTypeId = ENProgressReportTypeEntity.GetRecordByKey(ObjectKey.Parse("VN01OyPu_EKn67K+58wFmQ")).ssId; // ProgressReportTypeId = WeekReview4

			} else {
				if (((BuiltInFunction.Month(BuiltInFunction.CurrDate()) >9) && (BuiltInFunction.Month(BuiltInFunction.CurrDate()) <=12))) {
					inParamProgressReportTypeId = ENProgressReportTypeEntity.GetRecordByKey(ObjectKey.Parse("z3xaYMERiEStbXeJdtdYTA")).ssId; // ProgressReportTypeId = Term1Review

				} else {
					if (((BuiltInFunction.Month(BuiltInFunction.CurrDate()) >=1) && (BuiltInFunction.Month(BuiltInFunction.CurrDate()) <=3))) {
						inParamProgressReportTypeId = ENProgressReportTypeEntity.GetRecordByKey(ObjectKey.Parse("I68A5gfQbE6i4hQIeCoieA")).ssId; // ProgressReportTypeId = Term2Review

					} else {
						if (((BuiltInFunction.Month(BuiltInFunction.CurrDate()) >=4) && (BuiltInFunction.Month(BuiltInFunction.CurrDate()) <=8))) {
							inParamProgressReportTypeId = ENProgressReportTypeEntity.GetRecordByKey(ObjectKey.Parse("8s4GDLbHmkSXHAdC0Z7Zig")).ssId; // ProgressReportTypeId = Term3Review

						}

					}

				}

			}
			// Query QueryGetLearners
			int QueryGetLearners_maxRecords = Math.Max(wtTableRecords1.StartIndex + wtTableRecords1.LineCount + 1, 0);
			queryResGetLearners_outParamList = FuncssPreparation.QueryGetLearners(heContext, QueryGetLearners_maxRecords, IterationMultiplicity.Single, out queryResGetLearners_outParamCount, inParamCourseCode
			, inParamAcademicYearId
			, inParamProgressReportTypeId
			);
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return RsseSpaceThemeProvider.Themes.ThemeThemeProvider.ThemeCssUrl; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "ReferenceTheme.ThemeProvider.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsSecure(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamCourseCode!= "")) {
				parameters.Add(new Pair<string, string>("CourseCode", HttpUtility.UrlEncode(inParamCourseCode, Request.ContentEncoding)));
			}
			if ((inParamProgressReportTypeId!=0)) {
				parameters.Add(new Pair<string, string>("ProgressReportTypeId", HttpUtility.UrlEncode(Convert.ToString(inParamProgressReportTypeId), Request.ContentEncoding)));
			}
			if ((inParamAcademicYearId!= "")) {
				parameters.Add(new Pair<string, string>("AcademicYearId", HttpUtility.UrlEncode(inParamAcademicYearId, Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Course_ProgressReportSignOff", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Course_ProgressReportSignOff", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			ThemeProvider_wt_WebBlockInstance19 = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) FindControl("ThemeProvider_wt_WebBlockInstance19");
			wt_Container10 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container10");
			wt_Container28 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container28");
			wt_Container15 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container15");
			wt_Container22 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container22");
			wtTableRecords1 = (OutSystems.HubEdition.WebWidgets.OSDataGrid) FindControl("wtTableRecords1");
			wtTableRecords1.StartIndexExpression = () => 0;
			wtTableRecords1.LineCountExpression = () => 50;
			wtTableRecords1.EmptyMessageExpression = () => "No items to show...";
			wt_Container26 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container26");
			wt_Container30 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container30");
			wtHiddenCreateButton = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wtHiddenCreateButton");
			if (this.wtHiddenCreateButton != null) {
				this.wtHiddenCreateButton.Click += new System.EventHandler(this.wtHiddenCreateButton_Click);
			}
			wtTestDownloadLink = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wtTestDownloadLink");
			wt_Container6 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container6");
			wt_Container5 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container5");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "ThemeProvider_wt_WebBlockInstance9") {
				return ThemeProvider_wt_WebBlockInstance19.wtHeaderActions.FindControl("ThemeProvider_wt_WebBlockInstance9");
			}
			if (id == "wt_Container10") {
				return ThemeProvider_wt_WebBlockInstance19.wtTitle.FindControl("wt_Container10");
			}
			if (id == "wt_InlineExpression23") {
				return ThemeProvider_wt_WebBlockInstance19.wtTitle.FindControl("wt_InlineExpression23");
			}
			if (id == "wt_Container28") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_Container28");
			}
			if (id == "wt_Container15") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_Container15");
			}
			if (id == "wt_InlineExpression4") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_InlineExpression4");
			}
			if (id == "wtProgressReportType") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wtProgressReportType");
			}
			if (id == "wt_Container22") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_Container22");
			}
			if (id == "wt_InlineExpression37") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_InlineExpression37");
			}
			if (id == "wtAcademicYearCombo") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wtAcademicYearCombo");
			}
			if (id == "wtTableRecords1") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wtTableRecords1");
			}
			if (id == "wtTableRecords1AjaxRfrsh") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wtTableRecords1AjaxRfrsh");
			}
			if (id == "wt_TableRecordsHeaderRow39") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_TableRecordsHeaderRow39");
			}
			if (id == "wt_Container26") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_Container26");
			}
			if (id == "wt_Container30") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_Container30");
			}
			if (id == "wtHiddenCreateButton") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wtHiddenCreateButton");
			}
			if (id == "wtTestDownloadLink") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wtTestDownloadLink");
			}
			if (id == "wt_Container6") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_Container6");
			}
			if (id == "RichWidgets_wt_WebBlockInstance11") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance11");
			}
			if (id == "wt_Text20") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_Text20");
			}
			if (id == "wt_Container5") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("wt_Container5");
			}
			if (id == "RichWidgets_wt_WebBlockInstance35") {
				return ThemeProvider_wt_WebBlockInstance19.wtMainContent.FindControl("RichWidgets_wt_WebBlockInstance35");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_ProgressReportSignOff"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamCourseCode = (string) paramValue;
							}
						}
						if (screenParameters.Count > 1) {
							object paramValue = screenParameters[1];
							if (paramValue != null) {
								inParamProgressReportTypeId = (int) paramValue;
							}
						}
						if (screenParameters.Count > 2) {
							object paramValue = screenParameters[2];
							if (paramValue != null) {
								inParamAcademicYearId = (string) paramValue;
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["CaseConferencing._ScreenParameters_Course_ProgressReportSignOff"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["CourseCode"] != null) {
						inParamCourseCode = Request.QueryString["CourseCode"];
					}
					if (Request.QueryString["ProgressReportTypeId"] != null) {
						inParamProgressReportTypeId = Convert.ToInt32(Request.QueryString["ProgressReportTypeId"]);
					}
					if (Request.QueryString["AcademicYearId"] != null) {
						inParamAcademicYearId = Request.QueryString["AcademicYearId"];
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["CourseCode"] != null) {
						inParamCourseCode = Request.Form["CourseCode"];
					}
					if (Request.Form["ProgressReportTypeId"] != null) {
						inParamProgressReportTypeId = Convert.ToInt32(Request.Form["ProgressReportTypeId"]);
					}
					if (Request.Form["AcademicYearId"] != null) {
						inParamAcademicYearId = Request.Form["AcademicYearId"];
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (!IsPostBack) {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssTableRecords1ListDoDataBind = true;
				Title = "Course ProgressReportSignOff"; Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_ProgressReportSignOff", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (!Request.IsSecureConnection) throw new Exception("HTTPS connection required for this screen");
				FetchViewState();
			}

		}

		private bool _negociateTabIndexesExecuted = false;

		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");
			if (!_negociateTabIndexesExecuted) {
				NegotiateTabIndexes();
				_negociateTabIndexesExecuted = true;
			}
			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short prevTabIndex = ViewStateAttributes.GetTabIndex(ctrl);
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? Convert.ToInt16(htTabIndexGroupsTI[groupid]): prevTabIndex++);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, prevTabIndex <= 0 ? tabindex++: prevTabIndex++);
						}
					}
					tabindex = Math.Max(tabindex, prevTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssCaseConferencing.Flows.FlowLearner_ProgressReport.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckLearningSupportLeadRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSuperUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckLearningSupportPractitionerRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingBackofficeRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckCaseConferencingUserRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckPLARole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckSafeGuardingLeadRole(heContext, 0, out check);
				if (check) return;
			}
			throw new ExcptNotLearningSupportLead("LearningSupportLead role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("jd0N8HYn7EWXsrmB6YefRw"); 
			}
		}

		public bool isSecure {
			get {
				return true; 
			}
		}


		public class lcvOnNotify: VarsBag {
			public string resNotifyWidgetGetMessage_outParamMessage = "";

			public RLProgressReportRecordList queryResGetProgressReportById_outParamList = new RLProgressReportRecordList();
			public int queryResGetProgressReportById_outParamCount = 0;

			public lcvOnNotify() {
			}
		}
		/// <summary>
		/// Action <code>CommandOnNotify</code> that represents the Service Studio screen action
		///  <code>OnNotify</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnNotify(HeContext heContext) {
			CheckPermissions(heContext);
			lcvOnNotify localVars = new lcvOnNotify();
			try {
				// NotifyWidgetGetMessage
				ExtendedActions.NotifyWidgetGetMessage(heContext, out localVars.resNotifyWidgetGetMessage_outParamMessage);
				// Foreach TableRecords1.List
				getWtTableRecords1List().StartIteration();
				try {
					while (! getWtTableRecords1List().Eof) {
						if ((getWtTableRecords1List().CurrentRec.ssSTCourseListProgressReportList.ssCheckedForDownload==true)) {
							// Query datasetGetProgressReportById
							int datasetGetProgressReportById_maxRecords = 0;
							localVars.queryResGetProgressReportById_outParamList = FuncCommandOnNotify.datasetGetProgressReportById(heContext, datasetGetProgressReportById_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetProgressReportById_outParamCount, getWtTableRecords1List().CurrentRec.ssSTCourseListProgressReportList.ssProgressReportID
							);
							localVars.queryResGetProgressReportById_outParamList.CurrentRec.ssENProgressReport.ssLogoID = BuiltInFunction.TextToEntityRefText(localVars.resNotifyWidgetGetMessage_outParamMessage); // GetProgressReportById.List.Current.ProgressReport.LogoID = TextToEntityRefText
							// UpdateProgressReport
							ExtendedActions.UpdateProgressReport(heContext, localVars.queryResGetProgressReportById_outParamList.CurrentRec.ChangedAttributes, localVars.queryResGetProgressReportById_outParamList.CurrentRec);

						}
						getWtTableRecords1List().Advance();
					}
				} finally {
					getWtTableRecords1List().EndIteration();
				}
				// Widget_Click
				Actions.ActionWidget_Click(heContext, wtHiddenCreateButton.ClientID);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// Action <code>CommandOnChange</code> that represents the Service Studio screen action
		///  <code>OnChange</code> <p> Description: </p>
		/// </summary>
		private bool CommandOnChange(HeContext heContext) {
			CheckPermissions(heContext);
			try {
				// Query QueryGetLearners
				{
					int QueryGetLearners_maxRecords = Math.Max(wtTableRecords1.StartIndex + wtTableRecords1.LineCount + 1, 0);
					queryResGetLearners_outParamList = FuncssPreparation.QueryGetLearners(heContext, QueryGetLearners_maxRecords, IterationMultiplicity.Single, out queryResGetLearners_outParamCount, inParamCourseCode
					, inParamAcademicYearId
					, inParamProgressReportTypeId
					);
				}
				// Refresh Widget (wtTableRecords1)
				ssTableRecords1ListDoDataBind = true;
				((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtTableRecords1AjaxRfrsh"), "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvDownloadButtonClick: VarsBag {
			public byte[] resHtmlToPdfConverter_outParamBinary = new byte[] {};
			public bool resHtmlToPdfConverter_outParamError = true;

			public byte[] resGetZipBinary_outParamZipBinary = new byte[] {};

			public object resCreateZip_outParamZipHandle = null;

			public RLProgressReportRecordList queryResGetProgressReportsByStudent_outParamList = new RLProgressReportRecordList();
			public int queryResGetProgressReportsByStudent_outParamCount = 0;

			public lcvDownloadButtonClick() {
			}
		}
		/// <summary>
		/// Action <code>CommandDownloadButtonClick</code> that represents the Service Studio screen action
		///  <code>DownloadButtonClick</code> <p> Description: </p>
		/// </summary>
		private bool CommandDownloadButtonClick(HeContext heContext) {
			CheckPermissions(heContext);
			lcvDownloadButtonClick localVars = new lcvDownloadButtonClick();
			try {
				// CreateZip
				Actions.ActionCreateZip(heContext, 0, out localVars.resCreateZip_outParamZipHandle);
				// Foreach TableRecords1.List
				getWtTableRecords1List().StartIteration();
				try {
					while (! getWtTableRecords1List().Eof) {
						if (getWtTableRecords1List().CurrentRec.ssSTCourseListProgressReportList.ssCheckedForDownload) {
							// Query datasetGetProgressReportsByStudent
							int datasetGetProgressReportsByStudent_maxRecords = 0;
							localVars.queryResGetProgressReportsByStudent_outParamList = FuncCommandDownloadButtonClick.datasetGetProgressReportsByStudent(heContext, datasetGetProgressReportsByStudent_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetProgressReportsByStudent_outParamCount, getWtTableRecords1List().CurrentRec.ssSTCourseListProgressReportList.ssProgressReportID
							);
							varLcURL = "http://localhost/CaseConferencing/Progress_Report.aspx?ProgressReportId=11"; // URL = "http://localhost/CaseConferencing/Progress_Report.aspx?ProgressReportId=11"
							// HtmlToPdfConverter
							Actions.ActionHtmlToPdfConverter(heContext, (Functions.ssGetPDFReportType(heContext, ENPDFReportTypeEntity.GetRecordByKey(ObjectKey.Parse("t5+V4o0n60W9gpN2dK+T7g")).ssId).ssENPDFReportType.ssURL+Convert.ToString(localVars.queryResGetProgressReportsByStudent_outParamList.CurrentRec.ssENProgressReport.ssId)), "F", out localVars.resHtmlToPdfConverter_outParamBinary, out localVars.resHtmlToPdfConverter_outParamError);
							// AddFile
							Actions.ActionAddFile(heContext, localVars.resCreateZip_outParamZipHandle, (("ProgressReport_" +localVars.queryResGetProgressReportsByStudent_outParamList.CurrentRec.ssENProgressReport.ssStudent) + ".pdf"), BuiltInFunction.CurrDateTime(), localVars.resHtmlToPdfConverter_outParamBinary);

						}
						getWtTableRecords1List().Advance();
					}
				} finally {
					getWtTableRecords1List().EndIteration();
				}
				// CommitChanges
				Actions.ActionCommitChanges(heContext, localVars.resCreateZip_outParamZipHandle);
				// GetZipBinary
				Actions.ActionGetZipBinary(heContext, localVars.resCreateZip_outParamZipHandle, out localVars.resGetZipBinary_outParamZipBinary);
				// Download Download4
				Response.ClearContent();
				string md5Hash_Download4;
				md5Hash_Download4 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.resGetZipBinary_outParamZipBinary);
				Response.ContentType = "application/octet-stream";
				Response.AppendHeader("ETag", "\"" + md5Hash_Download4 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download4);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload4 = RuntimePlatformUtils.EscapeFilenameForDownload("ProgressReports.zip");
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload4 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload4);
				}
				Response.AppendHeader("Content-Disposition", "attachment; filename=\"" +filenameDownload4+ "\"");
				byte[] downloadDownload4FileContent = localVars.resGetZipBinary_outParamZipBinary;

				if (downloadDownload4FileContent.Length > 0) {
					if ((Request.UserAgent?? "").ToLower().Contains("android")) {
						string guid = Guid.NewGuid().ToString();
						System.Web.UI.Triplet file_info = new System.Web.UI.Triplet();
						file_info.First = "application/octet-stream";
						file_info.Second = localVars.resGetZipBinary_outParamZipBinary;
						file_info.Third = DateTime.Now;
						if (Session["AndroidDownloads"] == null)
						Session["AndroidDownloads"] = new Hashtable();
						((Hashtable) Session["AndroidDownloads"])[guid] = file_info;
						string protocolAndHost = (RuntimePlatformUtils.RequestIsSecure(Request) ? "https://": "http://") + Request.Url.Host;
						RuntimePlatformUtils.RedirectAndroidDownloadToExternalPage(protocolAndHost + (RuntimePlatformUtils.RequestIsSecure(Request) ? "": "") + AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false) + "_download.aspx/" + guid + "/" + RuntimePlatformUtils.EscapeFilenameForDownload("ProgressReports.zip"));
					} else {
						Response.AppendHeader("Content-Length", downloadDownload4FileContent.Length.ToString());
						Response.BinaryWrite(downloadDownload4FileContent);
					}
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_ProgressReportSignOff", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance19 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance19_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkLayout_Main) sender;
		}
		/// <summary>
		/// ThemeProvider_wt_WebBlockInstance9 Functions
		/// </summary>
		public void ThemeProvider_webBlck_WebBlockInstance9_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main widget = (proxy_CaseConferencing_ThemeProvider.Flows.FlowMainLayouts.WBlkMenu_Main) sender;
			widget.inParamActiveMenuItem = ENMenuItem2Entity.GetRecordByKey(ObjectKey.Parse("7qeG0AIy00KFvJsqdEaGOg")).ssId;
		}
		/// <summary>
		/// wt_Container10 Functions
		/// </summary>
		public void cnt_Container10_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container10_setInlineAttributes(sender, e);
		}
		public string cnt_Container10_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container10_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container10)
		/// </summary>
		/// <returns>The Visible State of wt_Container10</returns>
		public bool cnt_Container10_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression23 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = aPFaiDlapEyuRo+XVRPmZQ) Expression: "Progress Reports for " +
		///  CourseCode
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression23() {
			return ("Progress Reports for " +inParamCourseCode);
		}
		/// <summary>
		/// wt_Container28 Functions
		/// </summary>
		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container28_setInlineAttributes(sender, e);
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container28_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container15 Functions
		/// </summary>
		public void cnt_Container15_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container15_setInlineAttributes(sender, e);
		}
		public string cnt_Container15_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container15_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container15)
		/// </summary>
		/// <returns>The Visible State of wt_Container15</returns>
		public bool cnt_Container15_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression4 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = BxjXHL34dEScV0IlnpWNyg) Expression: "Report Type :"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression4() {
			return "Report Type :";
		}
		/// <summary>
		/// wtProgressReportType Functions
		/// </summary>
		public void selProgressReportType_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			RLProgressReportTypeRecordList Rt_wtProgressReportType_reclist = queryResGetProgressReportTypes_outParamList;
			Rt_wtProgressReportType_reclist.StartIteration();
			try {
				while (!Rt_wtProgressReportType_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtProgressReportType_reclist.CurrentRec.ssENProgressReportType.ssLabel, Convert.ToString(Rt_wtProgressReportType_reclist.CurrentRec.ssENProgressReportType.ssId)));
					if (inParamProgressReportTypeId == Convert.ToInt32(Convert.ToString(Rt_wtProgressReportType_reclist.CurrentRec.ssENProgressReportType.ssId))) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtProgressReportType_reclist.Advance();
				}
			} finally {
				Rt_wtProgressReportType_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wtProgressReportType
		/// </summary>
		public void selProgressReportType_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void selProgressReportType_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtProgressReportType.SpecialListVal = dropDown.SelectedValue.Substring(8);
				inParamProgressReportTypeId = 0;
			}
			else {
				Rt_wtProgressReportType.SpecialListVal = "";
				try {
					inParamProgressReportTypeId = Convert.ToInt32(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtProgressReportType)
		/// </summary>
		/// <returns>The Visible State of wtProgressReportType</returns>
		public bool selProgressReportType_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtProgressReportType)
		/// </summary>
		/// <returns>The Enabled State of wtProgressReportType</returns>
		public bool selProgressReportType_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selProgressReportType)
		/// </summary>
		/// <returns>The Mandatory Value of selProgressReportType</returns>
		public bool selProgressReportType_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Container22 Functions
		/// </summary>
		public void cnt_Container22_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container22_setInlineAttributes(sender, e);
		}
		public string cnt_Container22_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container22_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container22)
		/// </summary>
		/// <returns>The Visible State of wt_Container22</returns>
		public bool cnt_Container22_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression37 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Z1eo6M4ZBkihOjOIl8OvtQ) Expression: "Academic Year : "
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression37() {
			return "Academic Year : ";
		}
		/// <summary>
		/// wtAcademicYearCombo Functions
		/// </summary>
		public void selAcademicYearCombo_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxChange, null);
			if (!((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Visible) return;

			RLAcademicYearsRecordList Rt_wtAcademicYearCombo_reclist = queryResGetAcademicYears_outParamList;
			Rt_wtAcademicYearCombo_reclist.StartIteration();
			try {
				while (!Rt_wtAcademicYearCombo_reclist.Eof) {
					((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Add(new ListItem(Rt_wtAcademicYearCombo_reclist.CurrentRec.ssENAcademicYears.ssFormatB, Rt_wtAcademicYearCombo_reclist.CurrentRec.ssENAcademicYears.ssId));
					if (inParamAcademicYearId == Convert.ToString(Rt_wtAcademicYearCombo_reclist.CurrentRec.ssENAcademicYears.ssId)) {
						((OutSystems.HubEdition.WebWidgets.DropDownList) sender).SelectedIndex = ((OutSystems.HubEdition.WebWidgets.DropDownList) sender).Items.Count-1;
					}
					Rt_wtAcademicYearCombo_reclist.Advance();
				}
			} finally {
				Rt_wtAcademicYearCombo_reclist.EndIteration();
			}
		}
		/// <summary>
		/// AjaxChange event handler for widget wtAcademicYearCombo
		/// </summary>
		public void selAcademicYearCombo_AjaxChange(object sender, System.EventArgs e) {
			if (CommandOnChange(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		public void selAcademicYearCombo_dropDown_valueChanged(object sender, System.EventArgs e) {
			OutSystems.HubEdition.WebWidgets.DropDownList dropDown = (OutSystems.HubEdition.WebWidgets.DropDownList) sender;
			if (dropDown.SelectedValue.StartsWith("__ossli_")) {
				Rt_wtAcademicYearCombo.SpecialListVal = dropDown.SelectedValue.Substring(8);
				inParamAcademicYearId = "";
			}
			else {
				Rt_wtAcademicYearCombo.SpecialListVal = "";
				try {
					inParamAcademicYearId = Convert.ToString(dropDown.SelectedValue);
				} catch (Exception) {}
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtAcademicYearCombo)
		/// </summary>
		/// <returns>The Visible State of wtAcademicYearCombo</returns>
		public bool selAcademicYearCombo_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtAcademicYearCombo)
		/// </summary>
		/// <returns>The Enabled State of wtAcademicYearCombo</returns>
		public bool selAcademicYearCombo_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (selAcademicYearCombo)
		/// </summary>
		/// <returns>The Mandatory Value of selAcademicYearCombo</returns>
		public bool selAcademicYearCombo_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtTableRecords1 Functions
		/// </summary>
		public void recTableTableRecords1_onDataBinding(object sender, System.EventArgs e) {
			recTableTableRecords1_setInlineAttributes(sender, e);
			// widget wtTableRecords1
			ssTableRecords1List = queryResGetLearners_outParamList;
			ssTableRecords1ListDoDataBind = false;
			ssTableRecords1ListDataBound = true;
			wtTableRecords1.ShowHeader = true;
		}
		public string recTableTableRecords1_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "border:none;";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		public void recTableTableRecords1_Select(object sender, DataGridCommandEventArgs e) {
			if (e.Item.DataSetIndex != -1) {
				if (ssTableRecords1List.Length > 0) {
					ssTableRecords1List.CurrentRec = ssTableRecords1List[ssTableRecords1List.CurrentRowNumber];
				}
				if (ssTableRecords1List.Length > e.Item.DataSetIndex) {
					ssTableRecords1List.CurrentRec = ssTableRecords1List[e.Item.DataSetIndex];
					ssTableRecords1List.CurrentRowNumber = e.Item.DataSetIndex;
				}
			}
			if (e is DataGridCommandAjaxEventArgs) {
				((DataGridCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)
				}
				);
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recTableTableRecords1_Store(object dataItem, int index) {
			RCCourseListProgressReportListRecord tmprec = (RCCourseListProgressReportListRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssSTCourseListProgressReportList.ssStudentReference == "" ?(object) null: tmprec.ssSTCourseListProgressReportList.ssStudentReference);
			tmpFields.Add(tmprec.ssSTCourseListProgressReportList.ssProgressReportID == 0?(object) null: tmprec.ssSTCourseListProgressReportList.ssProgressReportID);
			tmpFields.Add(tmprec.ssSTCourseListProgressReportList.ssCheckedForDownload == false?(object) null: tmprec.ssSTCourseListProgressReportList.ssCheckedForDownload);
			if (index < wtTableRecords1_storage.Count) {
				wtTableRecords1_storage[index] = tmpFields;
			} else {
				wtTableRecords1_storage.Add(tmpFields);
			}
			return "";
		}
		public void recTableTableRecords1_Restore() {

			#region fetch ssTableRecords1List.

			// Read the needed fields of ssTableRecords1List from storewtTableRecords1_list
			ssTableRecords1List = new RLCourseListProgressReportListRecordList();
			ArrayList storewtTableRecords1_list;
			storewtTableRecords1_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtTableRecords1_list", null);
			if (storewtTableRecords1_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtTableRecords1_list in storewtTableRecords1_list) {
					if (tmpFieldswtTableRecords1_list != null) {
						// Aux current record variable
						RCCourseListProgressReportListRecord tmpAuxCurrentRecordwtTableRecords1_list = new RCCourseListProgressReportListRecord(null);
						tmpAuxCurrentRecordwtTableRecords1_list.ssSTCourseListProgressReportList.ssStudentReference = (string) (tmpFieldswtTableRecords1_list[0] == null ? "": tmpFieldswtTableRecords1_list[0]);

						tmpAuxCurrentRecordwtTableRecords1_list.ssSTCourseListProgressReportList.ssProgressReportID = (int) (tmpFieldswtTableRecords1_list[1] == null ? 0: tmpFieldswtTableRecords1_list[1]);

						tmpAuxCurrentRecordwtTableRecords1_list.ssSTCourseListProgressReportList.ssCheckedForDownload = (bool) (tmpFieldswtTableRecords1_list[2] == null ? false: tmpFieldswtTableRecords1_list[2]);

						ssTableRecords1List.Append(tmpAuxCurrentRecordwtTableRecords1_list);
					}
				}
			}
			ssTableRecords1List.CurrentRowNumber = -1;
			#endregion


			#region fetch ssTableRecords1List runtime properties state.


			if (storewtTableRecords1_list.Count > 0) {
				ssTableRecords1List.RestoreRecordListState(storewtTableRecords1_list.Count - 1, false);
			} else {
				ssTableRecords1List.CurrentRowNumber = 0;
			}

			#endregion

			wtTableRecords1_storage = storewtTableRecords1_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recTableTableRecords1_Clear(object sender, EventArgs e) {
			wtTableRecords1_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recTableTableRecords1_Rebuild(int startIndex, int lineCount) {
			if (ssTableRecords1List.Length != -1) {
				wtTableRecords1_storage.Clear();
				for (int i=startIndex; i<ssTableRecords1List.Data.Count && i<startIndex+lineCount; i++) {
					recTableTableRecords1_Store(ssTableRecords1List.Data[i], wtTableRecords1_storage.Count);
				}
			}
		}
		public void recTableTableRecords1_ListRefreshDataBind(object sender, EventArgs e) {
			wtTableRecords1.ShowHeader = true;
		}
		/// <summary>
		/// Function that returns the list of the wtTableRecords1 widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLCourseListProgressReportListRecordList getWtTableRecords1List() {
			if (ssTableRecords1ListDoDataBind) {
				recTableTableRecords1_onDataBinding(this, null);
			}

			return ssTableRecords1List;
		}
		/// <summary>
		/// wt_TableRecordsHeaderRow39 Functions
		/// </summary>
		public void wt_TableRecordsHeaderRow39_onDataBinding(object sender, System.EventArgs e) {
			wt_TableRecordsHeaderRow39_setInlineAttributes(sender, e);
		}
		public string wt_TableRecordsHeaderRow39_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "border-top-left-radius:10px;border-top-right-radius:10px;";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// RichWidgets_wtCheckAllChk Functions
		/// </summary>
		public void RichWidgets_webBlckCheckAllChk_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_BulkSelect widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkList_BulkSelect) sender;
			widget.inParamTableRecordsWidgetId = wtTableRecords1.ClientID;
			widget.inParamAssociatedLinkIds = Convert.ToString(getWtTableRecords1List().CurrentRec.ssSTCourseListProgressReportList.ssCheckedForDownload);
			widget.inParamEnabled = true;
		}
		/// <summary>
		/// wt_Container13 Functions
		/// </summary>
		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container13_setInlineAttributes(sender, e);
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container13_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container2 Functions
		/// </summary>
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container2_setInlineAttributes(sender, e);
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container32 Functions
		/// </summary>
		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container32_setInlineAttributes(sender, e);
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container32_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			return true;
		}

		/// <summary>
		/// wtCheckboxContainer Functions
		/// </summary>
		public void cntCheckboxContainer_onDataBinding(object sender, System.EventArgs e) {
			cntCheckboxContainer_setInlineAttributes(sender, e);
		}
		public string cntCheckboxContainer_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntCheckboxContainer_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtCheckboxContainer)
		/// </summary>
		/// <returns>The Visible State of wtCheckboxContainer</returns>
		public bool cntCheckboxContainer_isVisible() {
			return true;
		}

		/// <summary>
		/// wtCheckExportReport Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box gdgtzyRI602KHtVKiT3wsQ
		/// </summary>
		/// <returns>The Value of the Check Box gdgtzyRI602KHtVKiT3wsQ</returns>
		public bool chkCheckExportReport_checked_value() {
			return getWtTableRecords1List().CurrentRec.ssSTCourseListProgressReportList.ssCheckedForDownload;
		}
		public void chkCheckExportReport_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				Control parentControl = (Control) sender;
				while (parentControl != null) {
					if (parentControl is DataGridItem)break;
					parentControl = parentControl.Parent;
				}
				int parentControlIndex = ((DataGridItem) parentControl).DataSetIndex;
				if (ssTableRecords1List.Length > parentControlIndex && parentControlIndex > -1) {
					ssTableRecords1List.SetPosition(parentControlIndex);
				} else {
					return;
				}
				getWtTableRecords1List().CurrentRec.ssSTCourseListProgressReportList.ssCheckedForDownload = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wtCheckExportReport)
		/// </summary>
		/// <returns>The Enabled State of wtCheckExportReport</returns>
		public bool chkCheckExportReport_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wtCheckExportReport)
		/// </summary>
		/// <returns>The Visible State of wtCheckExportReport</returns>
		public bool chkCheckExportReport_isVisible() {
			return true;
		}

		/// <summary>
		/// wtProgressReportWebBlocks Functions
		/// </summary>
		public void webBlckProgressReportWebBlocks_onDataBinding(object sender, System.EventArgs e) {
			ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkCourseLearnerProgressReportStatus widget = (ssCaseConferencing.Flows.FlowLearner_ProgressReport.WBlkCourseLearnerProgressReportStatus) sender;
			widget.inParamProgressReportID2 = getWtTableRecords1List().CurrentRec.ssSTCourseListProgressReportList.ssProgressReportID;
			widget.inParamStudentReference = BuiltInFunction.TextToEntityRefText(getWtTableRecords1List().CurrentRec.ssSTCourseListProgressReportList.ssStudentReference);
			widget.inParamProgressReportTypeID = inParamProgressReportTypeId;
		}
		/// <summary>
		/// wt_Container26 Functions
		/// </summary>
		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container26_setInlineAttributes(sender, e);
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container26_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container30 Functions
		/// </summary>
		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container30_setInlineAttributes(sender, e);
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container30_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			return true;
		}

		/// <summary>
		/// wtHiddenCreateButton Functions
		/// </summary>
		public void btnHiddenCreateButton_onDataBinding(object sender, System.EventArgs e) {
			btnHiddenCreateButton_setInlineAttributes(sender, e);
		}
		public string btnHiddenCreateButton_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "display:none";
				oldstyledef = ((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"];
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = oldstyledef + newstyledef;
				} else {
					((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["style"] = newstyledef;
				}
			}
			return "";
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtHiddenCreateButton_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandDownloadButtonClick(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wtHiddenCreateButton)
		/// </summary>
		/// <returns>Label of the Button (wtHiddenCreateButton)</returns>
		public string
		btnHiddenCreateButton_getLabel() {
			return "Ok";
		}
		/// <summary>
		/// Gets the visible state of component (wtHiddenCreateButton)
		/// </summary>
		/// <returns>The Visible State of wtHiddenCreateButton</returns>
		public bool btnHiddenCreateButton_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtHiddenCreateButton)
		/// </summary>
		/// <returns>The Enabled State of wtHiddenCreateButton</returns>
		public bool btnHiddenCreateButton_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtTestDownloadLink Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wtTestDownloadLink)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wtTestDownloadLink)</returns>
		public string lnkTestDownloadLink_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if (heContext.AppInfo.eSpaceId != Global.eSpaceId) {
				navUrl = GetRedirectionProtocol(true) + (EmailScreenUtils.SafeGetEmailHost(Page as IEmailScreen) ?? Request.Url.Host) + "" + AppUtils.Instance.getImagePath();
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ProgressReportID", System.Web.HttpUtility.UrlEncode(Convert.ToString(BuiltInFunction.NullIdentifier()), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Popup_LogoSelection", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wtTestDownloadLink)
		/// </summary>
		/// <returns>title of the Link (wtTestDownloadLink)</returns>
		public string
		lnkTestDownloadLink_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtTestDownloadLink)
		/// </summary>
		/// <returns>The Visible State of wtTestDownloadLink</returns>
		public bool lnkTestDownloadLink_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtTestDownloadLink)
		/// </summary>
		/// <returns>The Enabled State of wtTestDownloadLink</returns>
		public bool lnkTestDownloadLink_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container6 Functions
		/// </summary>
		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container6_setInlineAttributes(sender, e);
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container6_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance11 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance11_onDataBinding(object sender, System.EventArgs e) {
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkIcon) sender;
			widget.inParamName = ENIconNameEntity.GetRecordByKey(ObjectKey.Parse("mTZbXFLt4E+ZjpUMIGn0wQ")).ssClass;
			widget.inParamSize = "";
		}
		/// <summary>
		/// wt_Container5 Functions
		/// </summary>
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container5_setInlineAttributes(sender, e);
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container5_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			return true;
		}

		/// <summary>
		/// RichWidgets_wt_WebBlockInstance35 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance35_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor widget = (proxy_CaseConferencing_RichWidgets.Flows.FlowRichWidgets.WBlkPopup_Editor) sender;
			widget.inParamLinkOrButtonWidgetId = wtTestDownloadLink.ClientID;
			widget.inParamTitle = " ";
			widget.inParamWidthPx = -1;
			widget.inParamHeightPx = -1;
			widget.inParamAutoResize = true;
			widget.inParamRecenterOnResize = false;
			widget.inParamHideCloseButton = false;
		}
		/// <summary>
		/// AjaxNotify event handler for widget RichWidgets_wt_WebBlockInstance35
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance35_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandOnNotify(heContext
			)) {
				doAJAXRefreshScreen(heContext);
			}
		}


		public static class FuncCommandOnNotify {

			/// <summary>
			/// Query Function "GetProgressReportById" of Action "OnNotify"
			/// </summary>
			public static RLProgressReportRecordList datasetGetProgressReportById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReport.[ID] o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, ENProgressReport.[LOGOID] o22, NULL o23");
				fromBuilder.Append(" FROM {ProgressReport} ENProgressReport");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReport.[ID] = @qpinP) AND (ENProgressReport.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReport.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportRecordList outParamList = new RLProgressReportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportRecordList _tmp = new RLProgressReportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Course_ProgressReportSignOff.OnNotify.GetProgressReportById.List");
						outParamList = (RLProgressReportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Course_ProgressReportSignOff.OnNotify.GetProgressReportById.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportRecordList _tmp = new RLProgressReportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Course_ProgressReportSignOff.OnNotify.GetProgressReportById.List");
							outParamList = (RLProgressReportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Course_ProgressReportSignOff.OnNotify.GetProgressReportById.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncCommandOnChange {
		}
		public static class FuncCommandDownloadButtonClick {

			/// <summary>
			/// Query Function "GetProgressReportsByStudent" of Action "DownloadButtonClick"
			/// </summary>
			public static RLProgressReportRecordList datasetGetProgressReportsByStudent(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, int qpinP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReport.[ID] o1, ENProgressReport.[STUDENT] o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10, NULL o11, NULL o12, NULL o13, NULL o14, NULL o15, NULL o16, NULL o17, NULL o18, NULL o19, NULL o20, NULL o21, NULL o22, NULL o23");
				fromBuilder.Append(" FROM {ProgressReport} ENProgressReport");
				whereBuilder.Append(" WHERE ");
				if (qpinP != 0) {
					whereBuilder.Append("((ENProgressReport.[ID] = @qpinP) AND (ENProgressReport.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinP", DbType.Int32, qpinP);
				} else {
					whereBuilder.Append("(ENProgressReport.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportRecordList outParamList = new RLProgressReportRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportRecordList _tmp = new RLProgressReportRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Course_ProgressReportSignOff.DownloadButtonClick.GetProgressReportsByStudent.List");
						outParamList = (RLProgressReportRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Course_ProgressReportSignOff.DownloadButtonClick.GetProgressReportsByStudent.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportRecordList _tmp = new RLProgressReportRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Course_ProgressReportSignOff.DownloadButtonClick.GetProgressReportsByStudent.List");
							outParamList = (RLProgressReportRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Course_ProgressReportSignOff.DownloadButtonClick.GetProgressReportsByStudent.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetProgressReportTypes" of Action "Preparation"
			/// </summary>
			public static RLProgressReportTypeRecordList datasetGetProgressReportTypes(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENProgressReportType.[ID] o1, ENProgressReportType.[LABEL] o2, NULL o3, NULL o4");
				fromBuilder.Append(" FROM {ProgressReportType} ENProgressReportType");
				whereBuilder.Append(" WHERE (ENProgressReportType.[ID] <> ");
				whereBuilder.Append(ENProgressReportTypeEntity.GetRecordByKey(ObjectKey.Parse("EgqRTaISu0Ctm9pK31aVKQ")).ssId);
				whereBuilder.Append(")");
				orderByBuilder.Append(" ORDER BY ENProgressReportType.[ORDER] ASC ");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLProgressReportTypeRecordList outParamList = new RLProgressReportTypeRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLProgressReportTypeRecordList _tmp = new RLProgressReportTypeRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetProgressReportTypes.List");
						outParamList = (RLProgressReportTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetProgressReportTypes.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLProgressReportTypeRecordList _tmp = new RLProgressReportTypeRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetProgressReportTypes.List");
							outParamList = (RLProgressReportTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetProgressReportTypes.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetAcademicYears" of Action "Preparation"
			/// </summary>
			public static RLAcademicYearsRecordList datasetGetAcademicYears(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount) {
				// Query Iterations: Single {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENAcademicYears.[ID] o1, NULL o2, NULL o3, NULL o4, NULL o5, ENAcademicYears.[FORMATB] o6, NULL o7, NULL o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM {AcademicYears} ENAcademicYears");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLAcademicYearsRecordList outParamList = new RLAcademicYearsRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, false, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLAcademicYearsRecordList _tmp = new RLAcademicYearsRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetAcademicYears.List");
						outParamList = (RLAcademicYearsRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetAcademicYears.List");
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLAcademicYearsRecordList _tmp = new RLAcademicYearsRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetAcademicYears.List");
							outParamList = (RLAcademicYearsRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetAcademicYears.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}

			/// <summary>
			/// Query Function "GetLearners" of Action "Preparation"
			/// </summary>
			public static RLCourseListProgressReportListRecordList QueryGetLearners(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out int outParamCount, string qpstOfferingCode, string qpstAcademicYear, int qpinProgressReportType) {
				// Query Iterations: Single {TableRecords1}
				// Refresh Query VX0E+47D7U+mMW84gd3zVA Iterations: Single {TableRecords1}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords == 1));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				sqlCmd.CreateParameter("@qpstAcademicYear", DbType.String, qpstAcademicYear);
				sqlCmd.CreateParameter("@qpinProgressReportType", DbType.Int32, qpinProgressReportType);
				sqlCmd.CreateParameter("@qpstOfferingCode", DbType.String, qpstOfferingCode);
				string advSql = "SELECT DISTINCT  " +
				 "         {Student}.[STUDENTREFERENCE],  " +
				 "         {Student}.[SURNAME],  " +
				 "         {Student}.[FORENAMES],  " +
				 "         {Group}.[GROUPNAME],  " +
				 "        (  " +
				 "            SELECT  {ProgressReport}.[ID] FROM  {ProgressReport}   " +
				 "            WHERE   " +
				 "             {ProgressReport}.[STUDENT] =  {Student}.[STUDENTREFERENCE]  " +
				 "            AND  " +
				 "             {ProgressReport}.[ACADEMICYEAR] = @qpstAcademicYear  " +
				 "            AND   " +
				 "             {ProgressReport}.[PROGRESSREPORTTYPE] = @qpinProgressReportType  " +
				 "        ),  " +
				 "        0  " +
				 "FROM  {Student}  " +
				 "INNER JOIN  {Student_Group} ON  {Student}.[STUDENTREFERENCE] =  {Student_Group}.[STUDENTREFERENCE]  " +
				 "INNER JOIN  {Group} ON  {Student_Group}.[GROUPID] =  {Group}.[ID]  " +
				 "LEFT OUTER JOIN  {ProgressReport} ON  {Student}.[STUDENTREFERENCE] =  {ProgressReport}.[STUDENT]  " +
				 "WHERE   " +
				 "  " +
				 "     {Student_Group}.[ACADEMICYEAR] = @qpstAcademicYear  " +
				 "AND   " +
				 "     {Group}.[GROUPNAME] = @qpstOfferingCode  " +
				 "ORDER BY   " +
				 " {Student}.[SURNAME]";
				string sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				AppUtils.Instance.CheckReadOnlyEntityReferences(advSql);
				sqlCmd.CommandText = sql;
				try {
					RLCourseListProgressReportListRecordList outParamList = new RLCourseListProgressReportListRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false
					}
					);
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLCourseListProgressReportListRecordList _tmp = new RLCourseListProgressReportListRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetLearners.List");
							outParamList = (RLCourseListProgressReportListRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetLearners.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						try {
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Learner_ProgressReport.Course_ProgressReportSignOff.Preparation.GetLearners.List");
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				} catch (System.InvalidOperationException aqExcep) {
					if (aqExcep.Message.StartsWith("Command parameter[")) {
						throw new DataBaseException("Problems accessing parameters in advanced query GetLearners in Preparation in Course_ProgressReportSignOff in Learner_ProgressReport in CaseConferencing (SELECT DISTINCT          {Student}.[StudentReference],          {Student}.[Surname],          {Student}.[Forenames],          {Group}.[GroupName],          (              SELECT {ProgressReport}.[Id] FROM {ProgressReport}               WHERE               {ProgressReport}.[Student] = {Student}.[StudentReference]              AND              {ProgressReport}.[AcademicYear] = @AcademicYear              AND               {ProgressReport}.[ProgressReportType] = @ProgressReportType          ),          0  FROM {Student}  INNER JOIN {Student_Group} ON {Student}.[StudentReference] = {Student_Group}.[StudentReference]  INNER JOIN {Group} ON {Student_Group}.[GroupId] = {Group}.[Id]  LEFT OUTER JOIN {ProgressReport} ON {Student}.[StudentReference] = {ProgressReport}.[Student]  WHERE         {Student_Group}.[AcademicYear] = @AcademicYear  AND       {Group}.[GroupName] = @OfferingCode  ORDER BY   {Student}.[Surname]  ): " + aqExcep.Message);
					}
					throw new DataBaseException("Error in advanced query GetLearners in Preparation in Course_ProgressReportSignOff in Learner_ProgressReport in CaseConferencing (SELECT DISTINCT          {Student}.[StudentReference],          {Student}.[Surname],          {Student}.[Forenames],          {Group}.[GroupName],          (              SELECT {ProgressReport}.[Id] FROM {ProgressReport}               WHERE               {ProgressReport}.[Student] = {Student}.[StudentReference]              AND              {ProgressReport}.[AcademicYear] = @AcademicYear              AND               {ProgressReport}.[ProgressReportType] = @ProgressReportType          ),          0  FROM {Student}  INNER JOIN {Student_Group} ON {Student}.[StudentReference] = {Student_Group}.[StudentReference]  INNER JOIN {Group} ON {Student_Group}.[GroupId] = {Group}.[Id]  LEFT OUTER JOIN {ProgressReport} ON {Student}.[StudentReference] = {ProgressReport}.[Student]  WHERE         {Student_Group}.[AcademicYear] = @AcademicYear  AND       {Group}.[GroupName] = @OfferingCode  ORDER BY   {Student}.[Surname]  ): " + aqExcep.Message);
				} catch (Exception aqExcep) {
					throw new DataBaseException("Error in advanced query GetLearners in Preparation in Course_ProgressReportSignOff in Learner_ProgressReport in CaseConferencing (SELECT DISTINCT          {Student}.[StudentReference],          {Student}.[Surname],          {Student}.[Forenames],          {Group}.[GroupName],          (              SELECT {ProgressReport}.[Id] FROM {ProgressReport}               WHERE               {ProgressReport}.[Student] = {Student}.[StudentReference]              AND              {ProgressReport}.[AcademicYear] = @AcademicYear              AND               {ProgressReport}.[ProgressReportType] = @ProgressReportType          ),          0  FROM {Student}  INNER JOIN {Student_Group} ON {Student}.[StudentReference] = {Student_Group}.[StudentReference]  INNER JOIN {Group} ON {Student_Group}.[GroupId] = {Group}.[Id]  LEFT OUTER JOIN {ProgressReport} ON {Student}.[StudentReference] = {ProgressReport}.[Student]  WHERE         {Student_Group}.[AcademicYear] = @AcademicYear  AND       {Group}.[GroupName] = @OfferingCode  ORDER BY   {Student}.[Surname]  ): " + aqExcep.Message);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				Preparation(heContext);

				Title = "Course ProgressReportSignOff"; ssTableRecords1ListDoDataBind = true;
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_ProgressReportSignOff", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssCaseConferencing.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Course_ProgressReportSignOff", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		protected override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamCourseCode", inParamCourseCode, "");
			ViewStateAttributes.SetInViewState("inParamProgressReportTypeId", inParamProgressReportTypeId, 0);
			ViewStateAttributes.SetInViewState("inParamAcademicYearId", inParamAcademicYearId, "");
			ViewStateAttributes.SetInViewState("wtProgressReportType_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtProgressReportType")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtAcademicYearCombo_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtAcademicYearCombo")).Mandatory, false);
			if (IsAjaxRequest) {
				recTableTableRecords1_Rebuild((ssTableRecords1ListDataBound ? wtTableRecords1.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtTableRecords1.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtTableRecords1_list", wtTableRecords1_storage, null);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				inParamCourseCode = (string) ViewStateAttributes.GetFromViewState("inParamCourseCode", "");
				inParamProgressReportTypeId = (int) ViewStateAttributes.GetFromViewState("inParamProgressReportTypeId", 0);
				inParamAcademicYearId = (string) ViewStateAttributes.GetFromViewState("inParamAcademicYearId", "");
				((IWidgetRuntimeProperties) this.FindControl("wtProgressReportType")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtProgressReportType_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtAcademicYearCombo")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtAcademicYearCombo_Mandatory", false);
				recTableTableRecords1_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateComboBox(this, "wtProgressReportType", parentEditRecord, validate);
			ValidationUtils.ValidateComboBox(this, "wtAcademicYearCombo", parentEditRecord, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
