/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STForSkillsInitialAssessmentStructure</code> that represents the Service Studio
	///  structure <code>ForSkillsInitialAssessment</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STForSkillsInitialAssessmentStructure: ISerializable, ITypedRecord<STForSkillsInitialAssessmentStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey Ididinstance = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*96xhcseIL0qmub6a9vlrQg");
		private static readonly GlobalObjectKey Ididassessment = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*sZa8eBb13U+TOndzYZCspA");
		private static readonly GlobalObjectKey Idassessmenttitle = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*l+gbF1pPLkKKYJMnHLBApw");
		private static readonly GlobalObjectKey Ididlevel = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*yIFfd0ICkUCn_Nr1uo9PMQ");
		private static readonly GlobalObjectKey Idlevel = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*ngTOxpkXNk+7+0EeujNzWQ");
		private static readonly GlobalObjectKey Idstart = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*SMz2oaye3EeJ9P78s7uPUA");
		private static readonly GlobalObjectKey Idfinish = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*9iLjD00THUq4mzWA105fzg");
		private static readonly GlobalObjectKey Idtimetaken = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*gipnwRYfBkaTa2wdH9kDgg");
		private static readonly GlobalObjectKey Ididsubject = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*ojXMUg5QIE6HsHZk9_Xxmg");
		private static readonly GlobalObjectKey Idsubjecttitle = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*wZa0W96obUKNxtnAQ69kAw");
		private static readonly GlobalObjectKey Idpossible = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*W5sdHo+BwUG4LQkJvU4BgQ");
		private static readonly GlobalObjectKey Idactual = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*X1RW379EgE+_GNO7gYq8_A");

		public static void EnsureInitialized() {}

		static STForSkillsInitialAssessmentStructure() {
			ssCaseConferencing.STForSkillsInitialAssessmentStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("idinstance")]
		public string ssidinstance;

		[System.Xml.Serialization.XmlElement("idassessment")]
		public string ssidassessment;

		[System.Xml.Serialization.XmlElement("assessmenttitle")]
		public string ssassessmenttitle;

		[System.Xml.Serialization.XmlElement("idlevel")]
		public string ssidlevel;

		[System.Xml.Serialization.XmlElement("level")]
		public string sslevel;

		[System.Xml.Serialization.XmlElement("start")]
		public string ssstart;

		[System.Xml.Serialization.XmlElement("finish")]
		public string ssfinish;

		[System.Xml.Serialization.XmlElement("timetaken")]
		public string sstimetaken;

		[System.Xml.Serialization.XmlElement("idsubject")]
		public string ssidsubject;

		[System.Xml.Serialization.XmlElement("subjecttitle")]
		public string sssubjecttitle;

		[System.Xml.Serialization.XmlElement("possible")]
		public string sspossible;

		[System.Xml.Serialization.XmlElement("actual")]
		public string ssactual;


		public BitArray OptimizedAttributes;

		public STForSkillsInitialAssessmentStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssidinstance = "";
			ssidassessment = "";
			ssassessmenttitle = "";
			ssidlevel = "";
			sslevel = "";
			ssstart = "";
			ssfinish = "";
			sstimetaken = "";
			ssidsubject = "";
			sssubjecttitle = "";
			sspossible = "";
			ssactual = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssidinstance = r.ReadText(index++, "ForSkillsInitialAssessment.idinstance", "");
			ssidassessment = r.ReadText(index++, "ForSkillsInitialAssessment.idassessment", "");
			ssassessmenttitle = r.ReadText(index++, "ForSkillsInitialAssessment.assessmenttitle", "");
			ssidlevel = r.ReadText(index++, "ForSkillsInitialAssessment.idlevel", "");
			sslevel = r.ReadText(index++, "ForSkillsInitialAssessment.level", "");
			ssstart = r.ReadText(index++, "ForSkillsInitialAssessment.start", "");
			ssfinish = r.ReadText(index++, "ForSkillsInitialAssessment.finish", "");
			sstimetaken = r.ReadText(index++, "ForSkillsInitialAssessment.timetaken", "");
			ssidsubject = r.ReadText(index++, "ForSkillsInitialAssessment.idsubject", "");
			sssubjecttitle = r.ReadText(index++, "ForSkillsInitialAssessment.subjecttitle", "");
			sspossible = r.ReadText(index++, "ForSkillsInitialAssessment.possible", "");
			ssactual = r.ReadText(index++, "ForSkillsInitialAssessment.actual", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STForSkillsInitialAssessmentStructure r) {
			this = r;
		}


		public static bool operator == (STForSkillsInitialAssessmentStructure a, STForSkillsInitialAssessmentStructure b) {
			if (a.ssidinstance != b.ssidinstance) return false;
			if (a.ssidassessment != b.ssidassessment) return false;
			if (a.ssassessmenttitle != b.ssassessmenttitle) return false;
			if (a.ssidlevel != b.ssidlevel) return false;
			if (a.sslevel != b.sslevel) return false;
			if (a.ssstart != b.ssstart) return false;
			if (a.ssfinish != b.ssfinish) return false;
			if (a.sstimetaken != b.sstimetaken) return false;
			if (a.ssidsubject != b.ssidsubject) return false;
			if (a.sssubjecttitle != b.sssubjecttitle) return false;
			if (a.sspossible != b.sspossible) return false;
			if (a.ssactual != b.ssactual) return false;
			return true;
		}

		public static bool operator != (STForSkillsInitialAssessmentStructure a, STForSkillsInitialAssessmentStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STForSkillsInitialAssessmentStructure)) return false;
			return (this == (STForSkillsInitialAssessmentStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssidinstance.GetHashCode()
				^ ssidassessment.GetHashCode()
				^ ssassessmenttitle.GetHashCode()
				^ ssidlevel.GetHashCode()
				^ sslevel.GetHashCode()
				^ ssstart.GetHashCode()
				^ ssfinish.GetHashCode()
				^ sstimetaken.GetHashCode()
				^ ssidsubject.GetHashCode()
				^ sssubjecttitle.GetHashCode()
				^ sspossible.GetHashCode()
				^ ssactual.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STForSkillsInitialAssessmentStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssidinstance = "";
			ssidassessment = "";
			ssassessmenttitle = "";
			ssidlevel = "";
			sslevel = "";
			ssstart = "";
			ssfinish = "";
			sstimetaken = "";
			ssidsubject = "";
			sssubjecttitle = "";
			sspossible = "";
			ssactual = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssidinstance = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssidassessment = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssassessmenttitle = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssidlevel = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			sslevel = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssstart = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssfinish = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			sstimetaken = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssidsubject = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			sssubjecttitle = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			sspossible = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			ssactual = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STForSkillsInitialAssessmentStructure Duplicate() {
			STForSkillsInitialAssessmentStructure t;
			t.ssidinstance = this.ssidinstance;
			t.ssidassessment = this.ssidassessment;
			t.ssassessmenttitle = this.ssassessmenttitle;
			t.ssidlevel = this.ssidlevel;
			t.sslevel = this.sslevel;
			t.ssstart = this.ssstart;
			t.ssfinish = this.ssfinish;
			t.sstimetaken = this.sstimetaken;
			t.ssidsubject = this.ssidsubject;
			t.sssubjecttitle = this.sssubjecttitle;
			t.sspossible = this.sspossible;
			t.ssactual = this.ssactual;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".idinstance")) VarValue.AppendAttribute(recordElem, "idinstance", ssidinstance, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "idinstance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".idassessment")) VarValue.AppendAttribute(recordElem, "idassessment", ssidassessment, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "idassessment");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".assessmenttitle")) VarValue.AppendAttribute(recordElem, "assessmenttitle", ssassessmenttitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "assessmenttitle");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".idlevel")) VarValue.AppendAttribute(recordElem, "idlevel", ssidlevel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "idlevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".level")) VarValue.AppendAttribute(recordElem, "level", sslevel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "level");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".start")) VarValue.AppendAttribute(recordElem, "start", ssstart, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "start");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".finish")) VarValue.AppendAttribute(recordElem, "finish", ssfinish, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "finish");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".timetaken")) VarValue.AppendAttribute(recordElem, "timetaken", sstimetaken, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "timetaken");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".idsubject")) VarValue.AppendAttribute(recordElem, "idsubject", ssidsubject, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "idsubject");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".subjecttitle")) VarValue.AppendAttribute(recordElem, "subjecttitle", sssubjecttitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "subjecttitle");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".possible")) VarValue.AppendAttribute(recordElem, "possible", sspossible, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "possible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".actual")) VarValue.AppendAttribute(recordElem, "actual", ssactual, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "actual");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "idinstance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".idinstance")) variable.Value = ssidinstance; else variable.Optimized = true;
			} else if (head == "idassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".idassessment")) variable.Value = ssidassessment; else variable.Optimized = true;
			} else if (head == "assessmenttitle") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".assessmenttitle")) variable.Value = ssassessmenttitle; else variable.Optimized = true;
			} else if (head == "idlevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".idlevel")) variable.Value = ssidlevel; else variable.Optimized = true;
			} else if (head == "level") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".level")) variable.Value = sslevel; else variable.Optimized = true;
			} else if (head == "start") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".start")) variable.Value = ssstart; else variable.Optimized = true;
			} else if (head == "finish") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".finish")) variable.Value = ssfinish; else variable.Optimized = true;
			} else if (head == "timetaken") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".timetaken")) variable.Value = sstimetaken; else variable.Optimized = true;
			} else if (head == "idsubject") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".idsubject")) variable.Value = ssidsubject; else variable.Optimized = true;
			} else if (head == "subjecttitle") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".subjecttitle")) variable.Value = sssubjecttitle; else variable.Optimized = true;
			} else if (head == "possible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".possible")) variable.Value = sspossible; else variable.Optimized = true;
			} else if (head == "actual") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".actual")) variable.Value = ssactual; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == Ididinstance) {
				return ssidinstance;
			} else if (key == Ididassessment) {
				return ssidassessment;
			} else if (key == Idassessmenttitle) {
				return ssassessmenttitle;
			} else if (key == Ididlevel) {
				return ssidlevel;
			} else if (key == Idlevel) {
				return sslevel;
			} else if (key == Idstart) {
				return ssstart;
			} else if (key == Idfinish) {
				return ssfinish;
			} else if (key == Idtimetaken) {
				return sstimetaken;
			} else if (key == Ididsubject) {
				return ssidsubject;
			} else if (key == Idsubjecttitle) {
				return sssubjecttitle;
			} else if (key == Idpossible) {
				return sspossible;
			} else if (key == Idactual) {
				return ssactual;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssidinstance = (string) other.AttributeGet(Ididinstance);
			ssidassessment = (string) other.AttributeGet(Ididassessment);
			ssassessmenttitle = (string) other.AttributeGet(Idassessmenttitle);
			ssidlevel = (string) other.AttributeGet(Ididlevel);
			sslevel = (string) other.AttributeGet(Idlevel);
			ssstart = (string) other.AttributeGet(Idstart);
			ssfinish = (string) other.AttributeGet(Idfinish);
			sstimetaken = (string) other.AttributeGet(Idtimetaken);
			ssidsubject = (string) other.AttributeGet(Ididsubject);
			sssubjecttitle = (string) other.AttributeGet(Idsubjecttitle);
			sspossible = (string) other.AttributeGet(Idpossible);
			ssactual = (string) other.AttributeGet(Idactual);
		}
	} // STForSkillsInitialAssessmentStructure
	/// <summary>
	/// Structure <code>RCForSkillsInitialAssessmentRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCForSkillsInitialAssessmentRecord: ISerializable, ITypedRecord<RCForSkillsInitialAssessmentRecord> {
		private static readonly GlobalObjectKey IdForSkillsInitialAssessment = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Y8G5CpC3FEfV5w8x7_4gFg");

		public static void EnsureInitialized() {}

		static RCForSkillsInitialAssessmentRecord() {
			ssCaseConferencing.RCForSkillsInitialAssessmentRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("ForSkillsInitialAssessment")]
		public STForSkillsInitialAssessmentStructure ssSTForSkillsInitialAssessment;


		public static implicit operator STForSkillsInitialAssessmentStructure(RCForSkillsInitialAssessmentRecord r) {
			return r.ssSTForSkillsInitialAssessment;
		}

		public static implicit operator RCForSkillsInitialAssessmentRecord(STForSkillsInitialAssessmentStructure r) {
			RCForSkillsInitialAssessmentRecord res = new RCForSkillsInitialAssessmentRecord(null);
			res.ssSTForSkillsInitialAssessment = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCForSkillsInitialAssessmentRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTForSkillsInitialAssessment = new STForSkillsInitialAssessmentStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTForSkillsInitialAssessment.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTForSkillsInitialAssessment.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCForSkillsInitialAssessmentRecord r) {
			this = r;
		}


		public static bool operator == (RCForSkillsInitialAssessmentRecord a, RCForSkillsInitialAssessmentRecord b) {
			if (a.ssSTForSkillsInitialAssessment != b.ssSTForSkillsInitialAssessment) return false;
			return true;
		}

		public static bool operator != (RCForSkillsInitialAssessmentRecord a, RCForSkillsInitialAssessmentRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCForSkillsInitialAssessmentRecord)) return false;
			return (this == (RCForSkillsInitialAssessmentRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTForSkillsInitialAssessment.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCForSkillsInitialAssessmentRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTForSkillsInitialAssessment = new STForSkillsInitialAssessmentStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTForSkillsInitialAssessment = (STForSkillsInitialAssessmentStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTForSkillsInitialAssessment.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTForSkillsInitialAssessment.InternalRecursiveSave();
		}


		public RCForSkillsInitialAssessmentRecord Duplicate() {
			RCForSkillsInitialAssessmentRecord t;
			t.ssSTForSkillsInitialAssessment = (STForSkillsInitialAssessmentStructure) this.ssSTForSkillsInitialAssessment.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTForSkillsInitialAssessment.ToXml(this, recordElem, "ForSkillsInitialAssessment", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "forskillsinitialassessment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ForSkillsInitialAssessment")) variable.Value = ssSTForSkillsInitialAssessment; else variable.Optimized = true;
				variable.SetFieldName("forskillsinitialassessment");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdForSkillsInitialAssessment) {
				return ssSTForSkillsInitialAssessment;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTForSkillsInitialAssessment.FillFromOther((IRecord) other.AttributeGet(IdForSkillsInitialAssessment));
		}
	} // RCForSkillsInitialAssessmentRecord
	/// <summary>
	/// RecordList type <code>RLForSkillsInitialAssessmentRecordList</code> that represents a record list
	///  of <code>ForSkillsInitialAssessment</code>
	/// </summary>
	[Serializable()]
	public partial class RLForSkillsInitialAssessmentRecordList: GenericRecordList<RCForSkillsInitialAssessmentRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		static RLForSkillsInitialAssessmentRecordList() {
			ssCaseConferencing.RLForSkillsInitialAssessmentRecordListTypeFactoryImpl.InitializeFactory();
		}

		protected override RCForSkillsInitialAssessmentRecord GetElementDefaultValue() {
			return new RCForSkillsInitialAssessmentRecord("");
		}

		public T[] ToArray<T>(Func<RCForSkillsInitialAssessmentRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLForSkillsInitialAssessmentRecordList recordlist, Func<RCForSkillsInitialAssessmentRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLForSkillsInitialAssessmentRecordList ToList<T>(T[] array, Func <T, RCForSkillsInitialAssessmentRecord> converter) {
			RLForSkillsInitialAssessmentRecordList result = new RLForSkillsInitialAssessmentRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLForSkillsInitialAssessmentRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLForSkillsInitialAssessmentRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLForSkillsInitialAssessmentRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLForSkillsInitialAssessmentRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCForSkillsInitialAssessmentRecord> NewList() {
			return new RLForSkillsInitialAssessmentRecordList();
		}


	} // RLForSkillsInitialAssessmentRecordList
	/// <summary>
	/// RecordList type <code>RLForSkillsInitialAssessmentList</code> that represents a record list of
	///  <code>Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLForSkillsInitialAssessmentList: GenericRecordList<STForSkillsInitialAssessmentStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STForSkillsInitialAssessmentStructure GetElementDefaultValue() {
			return new STForSkillsInitialAssessmentStructure("");
		}

		public T[] ToArray<T>(Func<STForSkillsInitialAssessmentStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLForSkillsInitialAssessmentList recordlist, Func<STForSkillsInitialAssessmentStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLForSkillsInitialAssessmentList ToList<T>(T[] array, Func <T, STForSkillsInitialAssessmentStructure> converter) {
			RLForSkillsInitialAssessmentList result = new RLForSkillsInitialAssessmentList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLForSkillsInitialAssessmentList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLForSkillsInitialAssessmentList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLForSkillsInitialAssessmentList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLForSkillsInitialAssessmentList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STForSkillsInitialAssessmentStructure> NewList() {
			return new RLForSkillsInitialAssessmentList();
		}


	} // RLForSkillsInitialAssessmentList
}

namespace ssCaseConferencing {
	[XmlType("ForSkillsInitialAssessment")]
	public class WORCForSkillsInitialAssessmentRecord {
		[System.Xml.Serialization.XmlElement("idinstance")]
		public string varWSidinstance;

		[System.Xml.Serialization.XmlElement("idassessment")]
		public string varWSidassessment;

		[System.Xml.Serialization.XmlElement("assessmenttitle")]
		public string varWSassessmenttitle;

		[System.Xml.Serialization.XmlElement("idlevel")]
		public string varWSidlevel;

		[System.Xml.Serialization.XmlElement("level")]
		public string varWSlevel;

		[System.Xml.Serialization.XmlElement("start")]
		public string varWSstart;

		[System.Xml.Serialization.XmlElement("finish")]
		public string varWSfinish;

		[System.Xml.Serialization.XmlElement("timetaken")]
		public string varWStimetaken;

		[System.Xml.Serialization.XmlElement("idsubject")]
		public string varWSidsubject;

		[System.Xml.Serialization.XmlElement("subjecttitle")]
		public string varWSsubjecttitle;

		[System.Xml.Serialization.XmlElement("possible")]
		public string varWSpossible;

		[System.Xml.Serialization.XmlElement("actual")]
		public string varWSactual;

		public WORCForSkillsInitialAssessmentRecord() {
			varWSidinstance = (string) "";
			varWSidassessment = (string) "";
			varWSassessmenttitle = (string) "";
			varWSidlevel = (string) "";
			varWSlevel = (string) "";
			varWSstart = (string) "";
			varWSfinish = (string) "";
			varWStimetaken = (string) "";
			varWSidsubject = (string) "";
			varWSsubjecttitle = (string) "";
			varWSpossible = (string) "";
			varWSactual = (string) "";
		}

		public WORCForSkillsInitialAssessmentRecord(STForSkillsInitialAssessmentStructure r) {
			varWSidinstance = BaseAppUtils.RemoveControlChars(r.ssidinstance);
			varWSidassessment = BaseAppUtils.RemoveControlChars(r.ssidassessment);
			varWSassessmenttitle = BaseAppUtils.RemoveControlChars(r.ssassessmenttitle);
			varWSidlevel = BaseAppUtils.RemoveControlChars(r.ssidlevel);
			varWSlevel = BaseAppUtils.RemoveControlChars(r.sslevel);
			varWSstart = BaseAppUtils.RemoveControlChars(r.ssstart);
			varWSfinish = BaseAppUtils.RemoveControlChars(r.ssfinish);
			varWStimetaken = BaseAppUtils.RemoveControlChars(r.sstimetaken);
			varWSidsubject = BaseAppUtils.RemoveControlChars(r.ssidsubject);
			varWSsubjecttitle = BaseAppUtils.RemoveControlChars(r.sssubjecttitle);
			varWSpossible = BaseAppUtils.RemoveControlChars(r.sspossible);
			varWSactual = BaseAppUtils.RemoveControlChars(r.ssactual);
		}

		public static RLForSkillsInitialAssessmentList ToRecordList(WORCForSkillsInitialAssessmentRecord[] array) {
			RLForSkillsInitialAssessmentList rl = new RLForSkillsInitialAssessmentList();
			if (array != null) {
				foreach(WORCForSkillsInitialAssessmentRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCForSkillsInitialAssessmentRecord[] FromRecordList(RLForSkillsInitialAssessmentList rl) {
			WORCForSkillsInitialAssessmentRecord[] array = new WORCForSkillsInitialAssessmentRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCForSkillsInitialAssessmentRecord {
		public static implicit operator WORCForSkillsInitialAssessmentRecord(RCForSkillsInitialAssessmentRecord r) {
			return new WORCForSkillsInitialAssessmentRecord(r.ssSTForSkillsInitialAssessment);
		}

		public static implicit operator RCForSkillsInitialAssessmentRecord(WORCForSkillsInitialAssessmentRecord w) {
			RCForSkillsInitialAssessmentRecord r = new RCForSkillsInitialAssessmentRecord("");
			if (w != null) {
				r.ssSTForSkillsInitialAssessment = w;
			}
			return r;
		}

	}

	partial struct STForSkillsInitialAssessmentStructure {
		public static implicit operator WORCForSkillsInitialAssessmentRecord(STForSkillsInitialAssessmentStructure r) {
			return new WORCForSkillsInitialAssessmentRecord(r);
		}

		public static implicit operator STForSkillsInitialAssessmentStructure(WORCForSkillsInitialAssessmentRecord w) {
			STForSkillsInitialAssessmentStructure r = new STForSkillsInitialAssessmentStructure("");
			if (w != null) {
				r.ssidinstance = ((string) w.varWSidinstance ?? "");
				r.ssidassessment = ((string) w.varWSidassessment ?? "");
				r.ssassessmenttitle = ((string) w.varWSassessmenttitle ?? "");
				r.ssidlevel = ((string) w.varWSidlevel ?? "");
				r.sslevel = ((string) w.varWSlevel ?? "");
				r.ssstart = ((string) w.varWSstart ?? "");
				r.ssfinish = ((string) w.varWSfinish ?? "");
				r.sstimetaken = ((string) w.varWStimetaken ?? "");
				r.ssidsubject = ((string) w.varWSidsubject ?? "");
				r.sssubjecttitle = ((string) w.varWSsubjecttitle ?? "");
				r.sspossible = ((string) w.varWSpossible ?? "");
				r.ssactual = ((string) w.varWSactual ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLForSkillsInitialAssessmentRecordList {
		public WORCForSkillsInitialAssessmentRecord[] Array;


		public WORLForSkillsInitialAssessmentRecordList(WORCForSkillsInitialAssessmentRecord[] r) {
			if (r == null)
			Array = new WORCForSkillsInitialAssessmentRecord[0];
			else
			Array = r;
		}
		public WORLForSkillsInitialAssessmentRecordList() {
			Array = new WORCForSkillsInitialAssessmentRecord[0];
		}

		public WORLForSkillsInitialAssessmentRecordList(RLForSkillsInitialAssessmentRecordList rl) {
			rl=(RLForSkillsInitialAssessmentRecordList) rl.Duplicate();
			Array = new WORCForSkillsInitialAssessmentRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCForSkillsInitialAssessmentRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLForSkillsInitialAssessmentRecordList {
		public static implicit operator RLForSkillsInitialAssessmentRecordList(WORCForSkillsInitialAssessmentRecord[] array) {
			RLForSkillsInitialAssessmentRecordList rl = new RLForSkillsInitialAssessmentRecordList();
			if (array != null) {
				foreach(WORCForSkillsInitialAssessmentRecord val in array) {
					rl.Append((RCForSkillsInitialAssessmentRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCForSkillsInitialAssessmentRecord[](RLForSkillsInitialAssessmentRecordList rl) {
			WORCForSkillsInitialAssessmentRecord[] array = new WORCForSkillsInitialAssessmentRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCForSkillsInitialAssessmentRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLForSkillsInitialAssessmentRecordList {
		public static implicit operator RLForSkillsInitialAssessmentRecordList(WORLForSkillsInitialAssessmentRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLForSkillsInitialAssessmentRecordList(RLForSkillsInitialAssessmentRecordList rl) {
			return new WORLForSkillsInitialAssessmentRecordList(rl);
		}
		public static implicit operator WORCForSkillsInitialAssessmentRecord[](WORLForSkillsInitialAssessmentRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLForSkillsInitialAssessmentRecordList(WORCForSkillsInitialAssessmentRecord[] array) {
			return new WORLForSkillsInitialAssessmentRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLForSkillsInitialAssessmentList {
		public WORCForSkillsInitialAssessmentRecord[] Array;


		public WORLForSkillsInitialAssessmentList(WORCForSkillsInitialAssessmentRecord[] r) {
			if (r == null)
			Array = new WORCForSkillsInitialAssessmentRecord[0];
			else
			Array = r;
		}
		public WORLForSkillsInitialAssessmentList() {
			Array = new WORCForSkillsInitialAssessmentRecord[0];
		}

		public WORLForSkillsInitialAssessmentList(RLForSkillsInitialAssessmentList rl) {
			rl=(RLForSkillsInitialAssessmentList) rl.Duplicate();
			Array = new WORCForSkillsInitialAssessmentRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLForSkillsInitialAssessmentList {
		public static implicit operator RLForSkillsInitialAssessmentList(WORCForSkillsInitialAssessmentRecord[] array) {
			RLForSkillsInitialAssessmentList rl = new RLForSkillsInitialAssessmentList();
			if (array != null) {
				foreach(WORCForSkillsInitialAssessmentRecord val in array) {
					rl.Append((STForSkillsInitialAssessmentStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCForSkillsInitialAssessmentRecord[](RLForSkillsInitialAssessmentList rl) {
			WORCForSkillsInitialAssessmentRecord[] array = new WORCForSkillsInitialAssessmentRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STForSkillsInitialAssessmentStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLForSkillsInitialAssessmentList {
		public static implicit operator RLForSkillsInitialAssessmentList(WORLForSkillsInitialAssessmentList w) {
			return w.Array;
		}
		public static implicit operator WORLForSkillsInitialAssessmentList(RLForSkillsInitialAssessmentList rl) {
			return new WORLForSkillsInitialAssessmentList(rl);
		}
		public static implicit operator WORCForSkillsInitialAssessmentRecord[](WORLForSkillsInitialAssessmentList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLForSkillsInitialAssessmentList(WORCForSkillsInitialAssessmentRecord[] array) {
			return new WORLForSkillsInitialAssessmentList(array);
		}
	}
}

