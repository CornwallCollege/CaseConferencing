/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STMarkbookForQualStructure</code> that represents the Service Studio structure
	///  <code>MarkbookForQual</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STMarkbookForQualStructure: ISerializable, ITypedRecord<STMarkbookForQualStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdAcademicYear = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*aAQ9YNvXMEi2iaDLJCmWmA");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*wvzOkyfsr06Y4+92K1C9cQ");
		private static readonly GlobalObjectKey IdCourseCode = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*su4DVa8FOUKhwMbe9zdpHw");
		private static readonly GlobalObjectKey IdStudentName = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*QVJc1mNNzEud4lRwVrBZHA");
		private static readonly GlobalObjectKey IdStudentGroupTitle = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*vOcF_TvTnUWkNaOFLzVyLA");
		private static readonly GlobalObjectKey IdMarkbookUnits = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*1NPSim7A_UuqVakzGO6SXw");

		public static void EnsureInitialized() {}

		static STMarkbookForQualStructure() {
			ssCaseConferencing.STMarkbookForQualStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("AcademicYear")]
		public string ssAcademicYear;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;

		[System.Xml.Serialization.XmlElement("CourseCode")]
		public string ssCourseCode;

		[System.Xml.Serialization.XmlElement("StudentName")]
		public string ssStudentName;

		[System.Xml.Serialization.XmlElement("StudentGroupTitle")]
		public string ssStudentGroupTitle;

		[System.Xml.Serialization.XmlElement("MarkbookUnits")]
		public RLMarkbookUnitsList ssMarkbookUnits;


		public BitArray OptimizedAttributes;

		public STMarkbookForQualStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssAcademicYear = "";
			ssStudentReference = "";
			ssCourseCode = "";
			ssStudentName = "";
			ssStudentGroupTitle = "";
			ssMarkbookUnits = new RLMarkbookUnitsList();
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssAcademicYear = r.ReadText(index++, "MarkbookForQual.AcademicYear", "");
			ssStudentReference = r.ReadText(index++, "MarkbookForQual.StudentReference", "");
			ssCourseCode = r.ReadText(index++, "MarkbookForQual.CourseCode", "");
			ssStudentName = r.ReadText(index++, "MarkbookForQual.StudentName", "");
			ssStudentGroupTitle = r.ReadText(index++, "MarkbookForQual.StudentGroupTitle", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STMarkbookForQualStructure r) {
			this = r;
		}


		public static bool operator == (STMarkbookForQualStructure a, STMarkbookForQualStructure b) {
			if (a.ssAcademicYear != b.ssAcademicYear) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssCourseCode != b.ssCourseCode) return false;
			if (a.ssStudentName != b.ssStudentName) return false;
			if (a.ssStudentGroupTitle != b.ssStudentGroupTitle) return false;
			if (a.ssMarkbookUnits != b.ssMarkbookUnits) return false;
			return true;
		}

		public static bool operator != (STMarkbookForQualStructure a, STMarkbookForQualStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STMarkbookForQualStructure)) return false;
			return (this == (STMarkbookForQualStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssAcademicYear.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssCourseCode.GetHashCode()
				^ ssStudentName.GetHashCode()
				^ ssStudentGroupTitle.GetHashCode()
				^ ssMarkbookUnits.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STMarkbookForQualStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssAcademicYear = "";
			ssStudentReference = "";
			ssCourseCode = "";
			ssStudentName = "";
			ssStudentGroupTitle = "";
			ssMarkbookUnits = new RLMarkbookUnitsList();
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssAcademicYear = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssCourseCode = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssStudentName = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssStudentGroupTitle = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssMarkbookUnits = (RLMarkbookUnitsList) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
			ssMarkbookUnits.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssMarkbookUnits.InternalRecursiveSave();
		}


		public STMarkbookForQualStructure Duplicate() {
			STMarkbookForQualStructure t;
			t.ssAcademicYear = this.ssAcademicYear;
			t.ssStudentReference = this.ssStudentReference;
			t.ssCourseCode = this.ssCourseCode;
			t.ssStudentName = this.ssStudentName;
			t.ssStudentGroupTitle = this.ssStudentGroupTitle;
			t.ssMarkbookUnits = (RLMarkbookUnitsList) this.ssMarkbookUnits.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AcademicYear")) VarValue.AppendAttribute(recordElem, "AcademicYear", ssAcademicYear, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AcademicYear");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CourseCode")) VarValue.AppendAttribute(recordElem, "CourseCode", ssCourseCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CourseCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentName")) VarValue.AppendAttribute(recordElem, "StudentName", ssStudentName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentGroupTitle")) VarValue.AppendAttribute(recordElem, "StudentGroupTitle", ssStudentGroupTitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentGroupTitle");
				ssMarkbookUnits.ToXml(this, recordElem, "MarkbookUnits", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "academicyear") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AcademicYear")) variable.Value = ssAcademicYear; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "coursecode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseCode")) variable.Value = ssCourseCode; else variable.Optimized = true;
			} else if (head == "studentname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentName")) variable.Value = ssStudentName; else variable.Optimized = true;
			} else if (head == "studentgrouptitle") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentGroupTitle")) variable.Value = ssStudentGroupTitle; else variable.Optimized = true;
			} else if (head == "markbookunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MarkbookUnits")) variable.Value = ssMarkbookUnits; else variable.Optimized = true;
				variable.SetFieldName("markbookunits");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAcademicYear) {
				return ssAcademicYear;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdCourseCode) {
				return ssCourseCode;
			} else if (key == IdStudentName) {
				return ssStudentName;
			} else if (key == IdStudentGroupTitle) {
				return ssStudentGroupTitle;
			} else if (key == IdMarkbookUnits) {
				return ssMarkbookUnits;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssAcademicYear = (string) other.AttributeGet(IdAcademicYear);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ssCourseCode = (string) other.AttributeGet(IdCourseCode);
			ssStudentName = (string) other.AttributeGet(IdStudentName);
			ssStudentGroupTitle = (string) other.AttributeGet(IdStudentGroupTitle);
			ssMarkbookUnits = new RLMarkbookUnitsList();
			ssMarkbookUnits.FillFromOther((IOSList) other.AttributeGet(IdMarkbookUnits));
		}
	} // STMarkbookForQualStructure
	/// <summary>
	/// Structure <code>RCMarkbookForQualRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCMarkbookForQualRecord: ISerializable, ITypedRecord<RCMarkbookForQualRecord> {
		private static readonly GlobalObjectKey IdMarkbookForQual = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ns+2F4t6MDclibCnD2+RWg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("MarkbookForQual")]
		public STMarkbookForQualStructure ssSTMarkbookForQual;


		public static implicit operator STMarkbookForQualStructure(RCMarkbookForQualRecord r) {
			return r.ssSTMarkbookForQual;
		}

		public static implicit operator RCMarkbookForQualRecord(STMarkbookForQualStructure r) {
			RCMarkbookForQualRecord res = new RCMarkbookForQualRecord(null);
			res.ssSTMarkbookForQual = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCMarkbookForQualRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTMarkbookForQual = new STMarkbookForQualStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTMarkbookForQual.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTMarkbookForQual.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCMarkbookForQualRecord r) {
			this = r;
		}


		public static bool operator == (RCMarkbookForQualRecord a, RCMarkbookForQualRecord b) {
			if (a.ssSTMarkbookForQual != b.ssSTMarkbookForQual) return false;
			return true;
		}

		public static bool operator != (RCMarkbookForQualRecord a, RCMarkbookForQualRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCMarkbookForQualRecord)) return false;
			return (this == (RCMarkbookForQualRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTMarkbookForQual.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCMarkbookForQualRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTMarkbookForQual = new STMarkbookForQualStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTMarkbookForQual = (STMarkbookForQualStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTMarkbookForQual.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTMarkbookForQual.InternalRecursiveSave();
		}


		public RCMarkbookForQualRecord Duplicate() {
			RCMarkbookForQualRecord t;
			t.ssSTMarkbookForQual = (STMarkbookForQualStructure) this.ssSTMarkbookForQual.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTMarkbookForQual.ToXml(this, recordElem, "MarkbookForQual", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "markbookforqual") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MarkbookForQual")) variable.Value = ssSTMarkbookForQual; else variable.Optimized = true;
				variable.SetFieldName("markbookforqual");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdMarkbookForQual) {
				return ssSTMarkbookForQual;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTMarkbookForQual.FillFromOther((IRecord) other.AttributeGet(IdMarkbookForQual));
		}
	} // RCMarkbookForQualRecord
	/// <summary>
	/// RecordList type <code>RLMarkbookForQualRecordList</code> that represents a record list of
	///  <code>MarkbookForQual</code>
	/// </summary>
	[Serializable()]
	public partial class RLMarkbookForQualRecordList: GenericRecordList<RCMarkbookForQualRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCMarkbookForQualRecord GetElementDefaultValue() {
			return new RCMarkbookForQualRecord("");
		}

		public T[] ToArray<T>(Func<RCMarkbookForQualRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMarkbookForQualRecordList recordlist, Func<RCMarkbookForQualRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLMarkbookForQualRecordList ToList<T>(T[] array, Func <T, RCMarkbookForQualRecord> converter) {
			RLMarkbookForQualRecordList result = new RLMarkbookForQualRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMarkbookForQualRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookForQualRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookForQualRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMarkbookForQualRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCMarkbookForQualRecord> NewList() {
			return new RLMarkbookForQualRecordList();
		}


	} // RLMarkbookForQualRecordList
	/// <summary>
	/// RecordList type <code>RLMarkbookForQualList</code> that represents a record list of <code>Text,
	///  Text, Text, Text, Text, MarkbookUnitsList</code>
	/// </summary>
	[Serializable()]
	public partial class RLMarkbookForQualList: GenericRecordList<STMarkbookForQualStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STMarkbookForQualStructure GetElementDefaultValue() {
			return new STMarkbookForQualStructure("");
		}

		public T[] ToArray<T>(Func<STMarkbookForQualStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMarkbookForQualList recordlist, Func<STMarkbookForQualStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLMarkbookForQualList ToList<T>(T[] array, Func <T, STMarkbookForQualStructure> converter) {
			RLMarkbookForQualList result = new RLMarkbookForQualList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMarkbookForQualList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookForQualList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookForQualList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMarkbookForQualList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STMarkbookForQualStructure> NewList() {
			return new RLMarkbookForQualList();
		}


	} // RLMarkbookForQualList
}

namespace ssCaseConferencing {
	[XmlType("MarkbookForQual")]
	public class WORCMarkbookForQualRecord {
		[System.Xml.Serialization.XmlElement("AcademicYear")]
		public string varWSAcademicYear;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("CourseCode")]
		public string varWSCourseCode;

		[System.Xml.Serialization.XmlElement("StudentName")]
		public string varWSStudentName;

		[System.Xml.Serialization.XmlElement("StudentGroupTitle")]
		public string varWSStudentGroupTitle;

		[System.Xml.Serialization.XmlArray("MarkbookUnits")]
		public WORCMarkbookUnitsRecord[] varWSMarkbookUnits;

		public WORCMarkbookForQualRecord() {
			varWSAcademicYear = (string) "";
			varWSStudentReference = (string) "";
			varWSCourseCode = (string) "";
			varWSStudentName = (string) "";
			varWSStudentGroupTitle = (string) "";
			varWSMarkbookUnits = new WORCMarkbookUnitsRecord[0];
		}

		public WORCMarkbookForQualRecord(STMarkbookForQualStructure r) {
			varWSAcademicYear = BaseAppUtils.RemoveControlChars(r.ssAcademicYear);
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSCourseCode = BaseAppUtils.RemoveControlChars(r.ssCourseCode);
			varWSStudentName = BaseAppUtils.RemoveControlChars(r.ssStudentName);
			varWSStudentGroupTitle = BaseAppUtils.RemoveControlChars(r.ssStudentGroupTitle);
			varWSMarkbookUnits = WORCMarkbookUnitsRecord.FromRecordList(r.ssMarkbookUnits);
		}

		public static RLMarkbookForQualList ToRecordList(WORCMarkbookForQualRecord[] array) {
			RLMarkbookForQualList rl = new RLMarkbookForQualList();
			if (array != null) {
				foreach(WORCMarkbookForQualRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCMarkbookForQualRecord[] FromRecordList(RLMarkbookForQualList rl) {
			WORCMarkbookForQualRecord[] array = new WORCMarkbookForQualRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCMarkbookForQualRecord {
		public static implicit operator WORCMarkbookForQualRecord(RCMarkbookForQualRecord r) {
			return new WORCMarkbookForQualRecord(r.ssSTMarkbookForQual);
		}

		public static implicit operator RCMarkbookForQualRecord(WORCMarkbookForQualRecord w) {
			RCMarkbookForQualRecord r = new RCMarkbookForQualRecord("");
			if (w != null) {
				r.ssSTMarkbookForQual = w;
			}
			return r;
		}

	}

	partial struct STMarkbookForQualStructure {
		public static implicit operator WORCMarkbookForQualRecord(STMarkbookForQualStructure r) {
			return new WORCMarkbookForQualRecord(r);
		}

		public static implicit operator STMarkbookForQualStructure(WORCMarkbookForQualRecord w) {
			STMarkbookForQualStructure r = new STMarkbookForQualStructure("");
			if (w != null) {
				r.ssAcademicYear = ((string) w.varWSAcademicYear ?? "");
				r.ssStudentReference = ((string) w.varWSStudentReference ?? "");
				r.ssCourseCode = ((string) w.varWSCourseCode ?? "");
				r.ssStudentName = ((string) w.varWSStudentName ?? "");
				r.ssStudentGroupTitle = ((string) w.varWSStudentGroupTitle ?? "");
				r.ssMarkbookUnits = WORCMarkbookUnitsRecord.ToRecordList(w.varWSMarkbookUnits);
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLMarkbookForQualRecordList {
		public WORCMarkbookForQualRecord[] Array;


		public WORLMarkbookForQualRecordList(WORCMarkbookForQualRecord[] r) {
			if (r == null)
			Array = new WORCMarkbookForQualRecord[0];
			else
			Array = r;
		}
		public WORLMarkbookForQualRecordList() {
			Array = new WORCMarkbookForQualRecord[0];
		}

		public WORLMarkbookForQualRecordList(RLMarkbookForQualRecordList rl) {
			rl=(RLMarkbookForQualRecordList) rl.Duplicate();
			Array = new WORCMarkbookForQualRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCMarkbookForQualRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLMarkbookForQualRecordList {
		public static implicit operator RLMarkbookForQualRecordList(WORCMarkbookForQualRecord[] array) {
			RLMarkbookForQualRecordList rl = new RLMarkbookForQualRecordList();
			if (array != null) {
				foreach(WORCMarkbookForQualRecord val in array) {
					rl.Append((RCMarkbookForQualRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMarkbookForQualRecord[](RLMarkbookForQualRecordList rl) {
			WORCMarkbookForQualRecord[] array = new WORCMarkbookForQualRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCMarkbookForQualRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLMarkbookForQualRecordList {
		public static implicit operator RLMarkbookForQualRecordList(WORLMarkbookForQualRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLMarkbookForQualRecordList(RLMarkbookForQualRecordList rl) {
			return new WORLMarkbookForQualRecordList(rl);
		}
		public static implicit operator WORCMarkbookForQualRecord[](WORLMarkbookForQualRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMarkbookForQualRecordList(WORCMarkbookForQualRecord[] array) {
			return new WORLMarkbookForQualRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLMarkbookForQualList {
		public WORCMarkbookForQualRecord[] Array;


		public WORLMarkbookForQualList(WORCMarkbookForQualRecord[] r) {
			if (r == null)
			Array = new WORCMarkbookForQualRecord[0];
			else
			Array = r;
		}
		public WORLMarkbookForQualList() {
			Array = new WORCMarkbookForQualRecord[0];
		}

		public WORLMarkbookForQualList(RLMarkbookForQualList rl) {
			rl=(RLMarkbookForQualList) rl.Duplicate();
			Array = new WORCMarkbookForQualRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLMarkbookForQualList {
		public static implicit operator RLMarkbookForQualList(WORCMarkbookForQualRecord[] array) {
			RLMarkbookForQualList rl = new RLMarkbookForQualList();
			if (array != null) {
				foreach(WORCMarkbookForQualRecord val in array) {
					rl.Append((STMarkbookForQualStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMarkbookForQualRecord[](RLMarkbookForQualList rl) {
			WORCMarkbookForQualRecord[] array = new WORCMarkbookForQualRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STMarkbookForQualStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLMarkbookForQualList {
		public static implicit operator RLMarkbookForQualList(WORLMarkbookForQualList w) {
			return w.Array;
		}
		public static implicit operator WORLMarkbookForQualList(RLMarkbookForQualList rl) {
			return new WORLMarkbookForQualList(rl);
		}
		public static implicit operator WORCMarkbookForQualRecord[](WORLMarkbookForQualList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMarkbookForQualList(WORCMarkbookForQualRecord[] array) {
			return new WORLMarkbookForQualList(array);
		}
	}
}

