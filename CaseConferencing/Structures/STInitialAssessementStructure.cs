/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STInitialAssessementStructure</code> that represents the Service Studio structure
	///  <code>InitialAssessement</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STInitialAssessementStructure: ISerializable, ITypedRecord<STInitialAssessementStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdLiteracy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*yGqCNNp98E2r5Q6bv9x2Vw");
		private static readonly GlobalObjectKey IdNumeracy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*HSHlFucWCkWV5Cu+Oj7hlA");
		private static readonly GlobalObjectKey IdESOL = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*TbMFqduEI0uEEXw6ybcJLw");
		private static readonly GlobalObjectKey IdIT = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*YQzX1hUPPkCh4M+TaxFJ+A");
		private static readonly GlobalObjectKey IdLiteracySource = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*1Z6Q9HfHYkGX0dfZeh677g");
		private static readonly GlobalObjectKey IdNumeracySource = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*7CS+oMeoiEafmMZFkAWwgg");
		private static readonly GlobalObjectKey IdESOLSoucre = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Gj6F0xhFH06IN4S+moNcFw");
		private static readonly GlobalObjectKey IdITSource = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*aGuQhKr1VEK+dkge4TvVbw");
		private static readonly GlobalObjectKey IdNotes = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*DuqqFF3QmUe9ME96kxKzuQ");
		private static readonly GlobalObjectKey IdEnglishEnrolmentLevel = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*jRMr5AQ4Gka1VNEiNBAg4g");
		private static readonly GlobalObjectKey IdMathsEnrolmentLevel = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*lwVL49vY_0iSnS7ARkxmQA");
		private static readonly GlobalObjectKey IdESOLEnrolmentLevel = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*vskUrbIukEeeKNmmGQrKgQ");
		private static readonly GlobalObjectKey IdITEnrolmentLevel = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*5df8EXYjE0eNW3nF1W_bRA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Literacy")]
		public string ssLiteracy;

		[System.Xml.Serialization.XmlElement("Numeracy")]
		public string ssNumeracy;

		[System.Xml.Serialization.XmlElement("ESOL")]
		public string ssESOL;

		[System.Xml.Serialization.XmlElement("IT")]
		public string ssIT;

		[System.Xml.Serialization.XmlElement("LiteracySource")]
		public string ssLiteracySource;

		[System.Xml.Serialization.XmlElement("NumeracySource")]
		public string ssNumeracySource;

		[System.Xml.Serialization.XmlElement("ESOLSoucre")]
		public string ssESOLSoucre;

		[System.Xml.Serialization.XmlElement("ITSource")]
		public string ssITSource;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string ssNotes;

		[System.Xml.Serialization.XmlElement("EnglishEnrolmentLevel")]
		public string ssEnglishEnrolmentLevel;

		[System.Xml.Serialization.XmlElement("MathsEnrolmentLevel")]
		public string ssMathsEnrolmentLevel;

		[System.Xml.Serialization.XmlElement("ESOLEnrolmentLevel")]
		public string ssESOLEnrolmentLevel;

		[System.Xml.Serialization.XmlElement("ITEnrolmentLevel")]
		public string ssITEnrolmentLevel;


		public BitArray OptimizedAttributes;

		public STInitialAssessementStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssLiteracy = "";
			ssNumeracy = "";
			ssESOL = "";
			ssIT = "";
			ssLiteracySource = "";
			ssNumeracySource = "";
			ssESOLSoucre = "";
			ssITSource = "";
			ssNotes = "";
			ssEnglishEnrolmentLevel = "";
			ssMathsEnrolmentLevel = "";
			ssESOLEnrolmentLevel = "";
			ssITEnrolmentLevel = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssLiteracy = r.ReadText(index++, "InitialAssessement.Literacy", "");
			ssNumeracy = r.ReadText(index++, "InitialAssessement.Numeracy", "");
			ssESOL = r.ReadText(index++, "InitialAssessement.ESOL", "");
			ssIT = r.ReadText(index++, "InitialAssessement.IT", "");
			ssLiteracySource = r.ReadText(index++, "InitialAssessement.LiteracySource", "");
			ssNumeracySource = r.ReadText(index++, "InitialAssessement.NumeracySource", "");
			ssESOLSoucre = r.ReadText(index++, "InitialAssessement.ESOLSoucre", "");
			ssITSource = r.ReadText(index++, "InitialAssessement.ITSource", "");
			ssNotes = r.ReadText(index++, "InitialAssessement.Notes", "");
			ssEnglishEnrolmentLevel = r.ReadText(index++, "InitialAssessement.EnglishEnrolmentLevel", "");
			ssMathsEnrolmentLevel = r.ReadText(index++, "InitialAssessement.MathsEnrolmentLevel", "");
			ssESOLEnrolmentLevel = r.ReadText(index++, "InitialAssessement.ESOLEnrolmentLevel", "");
			ssITEnrolmentLevel = r.ReadText(index++, "InitialAssessement.ITEnrolmentLevel", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STInitialAssessementStructure r) {
			this = r;
		}


		public static bool operator == (STInitialAssessementStructure a, STInitialAssessementStructure b) {
			if (a.ssLiteracy != b.ssLiteracy) return false;
			if (a.ssNumeracy != b.ssNumeracy) return false;
			if (a.ssESOL != b.ssESOL) return false;
			if (a.ssIT != b.ssIT) return false;
			if (a.ssLiteracySource != b.ssLiteracySource) return false;
			if (a.ssNumeracySource != b.ssNumeracySource) return false;
			if (a.ssESOLSoucre != b.ssESOLSoucre) return false;
			if (a.ssITSource != b.ssITSource) return false;
			if (a.ssNotes != b.ssNotes) return false;
			if (a.ssEnglishEnrolmentLevel != b.ssEnglishEnrolmentLevel) return false;
			if (a.ssMathsEnrolmentLevel != b.ssMathsEnrolmentLevel) return false;
			if (a.ssESOLEnrolmentLevel != b.ssESOLEnrolmentLevel) return false;
			if (a.ssITEnrolmentLevel != b.ssITEnrolmentLevel) return false;
			return true;
		}

		public static bool operator != (STInitialAssessementStructure a, STInitialAssessementStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STInitialAssessementStructure)) return false;
			return (this == (STInitialAssessementStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssLiteracy.GetHashCode()
				^ ssNumeracy.GetHashCode()
				^ ssESOL.GetHashCode()
				^ ssIT.GetHashCode()
				^ ssLiteracySource.GetHashCode()
				^ ssNumeracySource.GetHashCode()
				^ ssESOLSoucre.GetHashCode()
				^ ssITSource.GetHashCode()
				^ ssNotes.GetHashCode()
				^ ssEnglishEnrolmentLevel.GetHashCode()
				^ ssMathsEnrolmentLevel.GetHashCode()
				^ ssESOLEnrolmentLevel.GetHashCode()
				^ ssITEnrolmentLevel.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STInitialAssessementStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssLiteracy = "";
			ssNumeracy = "";
			ssESOL = "";
			ssIT = "";
			ssLiteracySource = "";
			ssNumeracySource = "";
			ssESOLSoucre = "";
			ssITSource = "";
			ssNotes = "";
			ssEnglishEnrolmentLevel = "";
			ssMathsEnrolmentLevel = "";
			ssESOLEnrolmentLevel = "";
			ssITEnrolmentLevel = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssLiteracy = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssNumeracy = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssESOL = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssIT = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssLiteracySource = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssNumeracySource = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssESOLSoucre = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssITSource = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssNotes = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssEnglishEnrolmentLevel = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			ssMathsEnrolmentLevel = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			ssESOLEnrolmentLevel = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			ssITEnrolmentLevel = (string) info.GetValue(fields[12] .Name, fields[12] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STInitialAssessementStructure Duplicate() {
			STInitialAssessementStructure t;
			t.ssLiteracy = this.ssLiteracy;
			t.ssNumeracy = this.ssNumeracy;
			t.ssESOL = this.ssESOL;
			t.ssIT = this.ssIT;
			t.ssLiteracySource = this.ssLiteracySource;
			t.ssNumeracySource = this.ssNumeracySource;
			t.ssESOLSoucre = this.ssESOLSoucre;
			t.ssITSource = this.ssITSource;
			t.ssNotes = this.ssNotes;
			t.ssEnglishEnrolmentLevel = this.ssEnglishEnrolmentLevel;
			t.ssMathsEnrolmentLevel = this.ssMathsEnrolmentLevel;
			t.ssESOLEnrolmentLevel = this.ssESOLEnrolmentLevel;
			t.ssITEnrolmentLevel = this.ssITEnrolmentLevel;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Literacy")) VarValue.AppendAttribute(recordElem, "Literacy", ssLiteracy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Literacy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Numeracy")) VarValue.AppendAttribute(recordElem, "Numeracy", ssNumeracy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Numeracy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESOL")) VarValue.AppendAttribute(recordElem, "ESOL", ssESOL, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ESOL");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IT")) VarValue.AppendAttribute(recordElem, "IT", ssIT, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "IT");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LiteracySource")) VarValue.AppendAttribute(recordElem, "LiteracySource", ssLiteracySource, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LiteracySource");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NumeracySource")) VarValue.AppendAttribute(recordElem, "NumeracySource", ssNumeracySource, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NumeracySource");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESOLSoucre")) VarValue.AppendAttribute(recordElem, "ESOLSoucre", ssESOLSoucre, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ESOLSoucre");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ITSource")) VarValue.AppendAttribute(recordElem, "ITSource", ssITSource, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ITSource");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Notes")) VarValue.AppendAttribute(recordElem, "Notes", ssNotes, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Notes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EnglishEnrolmentLevel")) VarValue.AppendAttribute(recordElem, "EnglishEnrolmentLevel", ssEnglishEnrolmentLevel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EnglishEnrolmentLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathsEnrolmentLevel")) VarValue.AppendAttribute(recordElem, "MathsEnrolmentLevel", ssMathsEnrolmentLevel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MathsEnrolmentLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESOLEnrolmentLevel")) VarValue.AppendAttribute(recordElem, "ESOLEnrolmentLevel", ssESOLEnrolmentLevel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ESOLEnrolmentLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ITEnrolmentLevel")) VarValue.AppendAttribute(recordElem, "ITEnrolmentLevel", ssITEnrolmentLevel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ITEnrolmentLevel");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "literacy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Literacy")) variable.Value = ssLiteracy; else variable.Optimized = true;
			} else if (head == "numeracy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Numeracy")) variable.Value = ssNumeracy; else variable.Optimized = true;
			} else if (head == "esol") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESOL")) variable.Value = ssESOL; else variable.Optimized = true;
			} else if (head == "it") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IT")) variable.Value = ssIT; else variable.Optimized = true;
			} else if (head == "literacysource") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LiteracySource")) variable.Value = ssLiteracySource; else variable.Optimized = true;
			} else if (head == "numeracysource") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NumeracySource")) variable.Value = ssNumeracySource; else variable.Optimized = true;
			} else if (head == "esolsoucre") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESOLSoucre")) variable.Value = ssESOLSoucre; else variable.Optimized = true;
			} else if (head == "itsource") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ITSource")) variable.Value = ssITSource; else variable.Optimized = true;
			} else if (head == "notes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Notes")) variable.Value = ssNotes; else variable.Optimized = true;
			} else if (head == "englishenrolmentlevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnglishEnrolmentLevel")) variable.Value = ssEnglishEnrolmentLevel; else variable.Optimized = true;
			} else if (head == "mathsenrolmentlevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathsEnrolmentLevel")) variable.Value = ssMathsEnrolmentLevel; else variable.Optimized = true;
			} else if (head == "esolenrolmentlevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESOLEnrolmentLevel")) variable.Value = ssESOLEnrolmentLevel; else variable.Optimized = true;
			} else if (head == "itenrolmentlevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ITEnrolmentLevel")) variable.Value = ssITEnrolmentLevel; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLiteracy) {
				return ssLiteracy;
			} else if (key == IdNumeracy) {
				return ssNumeracy;
			} else if (key == IdESOL) {
				return ssESOL;
			} else if (key == IdIT) {
				return ssIT;
			} else if (key == IdLiteracySource) {
				return ssLiteracySource;
			} else if (key == IdNumeracySource) {
				return ssNumeracySource;
			} else if (key == IdESOLSoucre) {
				return ssESOLSoucre;
			} else if (key == IdITSource) {
				return ssITSource;
			} else if (key == IdNotes) {
				return ssNotes;
			} else if (key == IdEnglishEnrolmentLevel) {
				return ssEnglishEnrolmentLevel;
			} else if (key == IdMathsEnrolmentLevel) {
				return ssMathsEnrolmentLevel;
			} else if (key == IdESOLEnrolmentLevel) {
				return ssESOLEnrolmentLevel;
			} else if (key == IdITEnrolmentLevel) {
				return ssITEnrolmentLevel;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssLiteracy = (string) other.AttributeGet(IdLiteracy);
			ssNumeracy = (string) other.AttributeGet(IdNumeracy);
			ssESOL = (string) other.AttributeGet(IdESOL);
			ssIT = (string) other.AttributeGet(IdIT);
			ssLiteracySource = (string) other.AttributeGet(IdLiteracySource);
			ssNumeracySource = (string) other.AttributeGet(IdNumeracySource);
			ssESOLSoucre = (string) other.AttributeGet(IdESOLSoucre);
			ssITSource = (string) other.AttributeGet(IdITSource);
			ssNotes = (string) other.AttributeGet(IdNotes);
			ssEnglishEnrolmentLevel = (string) other.AttributeGet(IdEnglishEnrolmentLevel);
			ssMathsEnrolmentLevel = (string) other.AttributeGet(IdMathsEnrolmentLevel);
			ssESOLEnrolmentLevel = (string) other.AttributeGet(IdESOLEnrolmentLevel);
			ssITEnrolmentLevel = (string) other.AttributeGet(IdITEnrolmentLevel);
		}
	} // STInitialAssessementStructure
	/// <summary>
	/// Structure <code>RCInitialAssessementRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCInitialAssessementRecord: ISerializable, ITypedRecord<RCInitialAssessementRecord> {
		private static readonly GlobalObjectKey IdInitialAssessement = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6EaCThy7z2BX04uRlZd0dw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("InitialAssessement")]
		public STInitialAssessementStructure ssSTInitialAssessement;


		public static implicit operator STInitialAssessementStructure(RCInitialAssessementRecord r) {
			return r.ssSTInitialAssessement;
		}

		public static implicit operator RCInitialAssessementRecord(STInitialAssessementStructure r) {
			RCInitialAssessementRecord res = new RCInitialAssessementRecord(null);
			res.ssSTInitialAssessement = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCInitialAssessementRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTInitialAssessement = new STInitialAssessementStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTInitialAssessement.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTInitialAssessement.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCInitialAssessementRecord r) {
			this = r;
		}


		public static bool operator == (RCInitialAssessementRecord a, RCInitialAssessementRecord b) {
			if (a.ssSTInitialAssessement != b.ssSTInitialAssessement) return false;
			return true;
		}

		public static bool operator != (RCInitialAssessementRecord a, RCInitialAssessementRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCInitialAssessementRecord)) return false;
			return (this == (RCInitialAssessementRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTInitialAssessement.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCInitialAssessementRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTInitialAssessement = new STInitialAssessementStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTInitialAssessement = (STInitialAssessementStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTInitialAssessement.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTInitialAssessement.InternalRecursiveSave();
		}


		public RCInitialAssessementRecord Duplicate() {
			RCInitialAssessementRecord t;
			t.ssSTInitialAssessement = (STInitialAssessementStructure) this.ssSTInitialAssessement.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTInitialAssessement.ToXml(this, recordElem, "InitialAssessement", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "initialassessement") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".InitialAssessement")) variable.Value = ssSTInitialAssessement; else variable.Optimized = true;
				variable.SetFieldName("initialassessement");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdInitialAssessement) {
				return ssSTInitialAssessement;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTInitialAssessement.FillFromOther((IRecord) other.AttributeGet(IdInitialAssessement));
		}
	} // RCInitialAssessementRecord
	/// <summary>
	/// RecordList type <code>RLInitialAssessementRecordList</code> that represents a record list of
	///  <code>InitialAssessement</code>
	/// </summary>
	[Serializable()]
	public partial class RLInitialAssessementRecordList: GenericRecordList<RCInitialAssessementRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCInitialAssessementRecord GetElementDefaultValue() {
			return new RCInitialAssessementRecord("");
		}

		public T[] ToArray<T>(Func<RCInitialAssessementRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLInitialAssessementRecordList recordlist, Func<RCInitialAssessementRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLInitialAssessementRecordList ToList<T>(T[] array, Func <T, RCInitialAssessementRecord> converter) {
			RLInitialAssessementRecordList result = new RLInitialAssessementRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLInitialAssessementRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLInitialAssessementRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLInitialAssessementRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLInitialAssessementRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCInitialAssessementRecord> NewList() {
			return new RLInitialAssessementRecordList();
		}


	} // RLInitialAssessementRecordList
	/// <summary>
	/// RecordList type <code>RLInitialAssessementList</code> that represents a record list of <code>Text,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLInitialAssessementList: GenericRecordList<STInitialAssessementStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STInitialAssessementStructure GetElementDefaultValue() {
			return new STInitialAssessementStructure("");
		}

		public T[] ToArray<T>(Func<STInitialAssessementStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLInitialAssessementList recordlist, Func<STInitialAssessementStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLInitialAssessementList ToList<T>(T[] array, Func <T, STInitialAssessementStructure> converter) {
			RLInitialAssessementList result = new RLInitialAssessementList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLInitialAssessementList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLInitialAssessementList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLInitialAssessementList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLInitialAssessementList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STInitialAssessementStructure> NewList() {
			return new RLInitialAssessementList();
		}


	} // RLInitialAssessementList
}

namespace ssCaseConferencing {
	[XmlType("InitialAssessement")]
	public class WORCInitialAssessementRecord {
		[System.Xml.Serialization.XmlElement("Literacy")]
		public string varWSLiteracy;

		[System.Xml.Serialization.XmlElement("Numeracy")]
		public string varWSNumeracy;

		[System.Xml.Serialization.XmlElement("ESOL")]
		public string varWSESOL;

		[System.Xml.Serialization.XmlElement("IT")]
		public string varWSIT;

		[System.Xml.Serialization.XmlElement("LiteracySource")]
		public string varWSLiteracySource;

		[System.Xml.Serialization.XmlElement("NumeracySource")]
		public string varWSNumeracySource;

		[System.Xml.Serialization.XmlElement("ESOLSoucre")]
		public string varWSESOLSoucre;

		[System.Xml.Serialization.XmlElement("ITSource")]
		public string varWSITSource;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string varWSNotes;

		[System.Xml.Serialization.XmlElement("EnglishEnrolmentLevel")]
		public string varWSEnglishEnrolmentLevel;

		[System.Xml.Serialization.XmlElement("MathsEnrolmentLevel")]
		public string varWSMathsEnrolmentLevel;

		[System.Xml.Serialization.XmlElement("ESOLEnrolmentLevel")]
		public string varWSESOLEnrolmentLevel;

		[System.Xml.Serialization.XmlElement("ITEnrolmentLevel")]
		public string varWSITEnrolmentLevel;

		public WORCInitialAssessementRecord() {
			varWSLiteracy = (string) "";
			varWSNumeracy = (string) "";
			varWSESOL = (string) "";
			varWSIT = (string) "";
			varWSLiteracySource = (string) "";
			varWSNumeracySource = (string) "";
			varWSESOLSoucre = (string) "";
			varWSITSource = (string) "";
			varWSNotes = (string) "";
			varWSEnglishEnrolmentLevel = (string) "";
			varWSMathsEnrolmentLevel = (string) "";
			varWSESOLEnrolmentLevel = (string) "";
			varWSITEnrolmentLevel = (string) "";
		}

		public WORCInitialAssessementRecord(STInitialAssessementStructure r) {
			varWSLiteracy = BaseAppUtils.RemoveControlChars(r.ssLiteracy);
			varWSNumeracy = BaseAppUtils.RemoveControlChars(r.ssNumeracy);
			varWSESOL = BaseAppUtils.RemoveControlChars(r.ssESOL);
			varWSIT = BaseAppUtils.RemoveControlChars(r.ssIT);
			varWSLiteracySource = BaseAppUtils.RemoveControlChars(r.ssLiteracySource);
			varWSNumeracySource = BaseAppUtils.RemoveControlChars(r.ssNumeracySource);
			varWSESOLSoucre = BaseAppUtils.RemoveControlChars(r.ssESOLSoucre);
			varWSITSource = BaseAppUtils.RemoveControlChars(r.ssITSource);
			varWSNotes = BaseAppUtils.RemoveControlChars(r.ssNotes);
			varWSEnglishEnrolmentLevel = BaseAppUtils.RemoveControlChars(r.ssEnglishEnrolmentLevel);
			varWSMathsEnrolmentLevel = BaseAppUtils.RemoveControlChars(r.ssMathsEnrolmentLevel);
			varWSESOLEnrolmentLevel = BaseAppUtils.RemoveControlChars(r.ssESOLEnrolmentLevel);
			varWSITEnrolmentLevel = BaseAppUtils.RemoveControlChars(r.ssITEnrolmentLevel);
		}

		public static RLInitialAssessementList ToRecordList(WORCInitialAssessementRecord[] array) {
			RLInitialAssessementList rl = new RLInitialAssessementList();
			if (array != null) {
				foreach(WORCInitialAssessementRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCInitialAssessementRecord[] FromRecordList(RLInitialAssessementList rl) {
			WORCInitialAssessementRecord[] array = new WORCInitialAssessementRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCInitialAssessementRecord {
		public static implicit operator WORCInitialAssessementRecord(RCInitialAssessementRecord r) {
			return new WORCInitialAssessementRecord(r.ssSTInitialAssessement);
		}

		public static implicit operator RCInitialAssessementRecord(WORCInitialAssessementRecord w) {
			RCInitialAssessementRecord r = new RCInitialAssessementRecord("");
			if (w != null) {
				r.ssSTInitialAssessement = w;
			}
			return r;
		}

	}

	partial struct STInitialAssessementStructure {
		public static implicit operator WORCInitialAssessementRecord(STInitialAssessementStructure r) {
			return new WORCInitialAssessementRecord(r);
		}

		public static implicit operator STInitialAssessementStructure(WORCInitialAssessementRecord w) {
			STInitialAssessementStructure r = new STInitialAssessementStructure("");
			if (w != null) {
				r.ssLiteracy = ((string) w.varWSLiteracy ?? "");
				r.ssNumeracy = ((string) w.varWSNumeracy ?? "");
				r.ssESOL = ((string) w.varWSESOL ?? "");
				r.ssIT = ((string) w.varWSIT ?? "");
				r.ssLiteracySource = ((string) w.varWSLiteracySource ?? "");
				r.ssNumeracySource = ((string) w.varWSNumeracySource ?? "");
				r.ssESOLSoucre = ((string) w.varWSESOLSoucre ?? "");
				r.ssITSource = ((string) w.varWSITSource ?? "");
				r.ssNotes = ((string) w.varWSNotes ?? "");
				r.ssEnglishEnrolmentLevel = ((string) w.varWSEnglishEnrolmentLevel ?? "");
				r.ssMathsEnrolmentLevel = ((string) w.varWSMathsEnrolmentLevel ?? "");
				r.ssESOLEnrolmentLevel = ((string) w.varWSESOLEnrolmentLevel ?? "");
				r.ssITEnrolmentLevel = ((string) w.varWSITEnrolmentLevel ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLInitialAssessementRecordList {
		public WORCInitialAssessementRecord[] Array;


		public WORLInitialAssessementRecordList(WORCInitialAssessementRecord[] r) {
			if (r == null)
			Array = new WORCInitialAssessementRecord[0];
			else
			Array = r;
		}
		public WORLInitialAssessementRecordList() {
			Array = new WORCInitialAssessementRecord[0];
		}

		public WORLInitialAssessementRecordList(RLInitialAssessementRecordList rl) {
			rl=(RLInitialAssessementRecordList) rl.Duplicate();
			Array = new WORCInitialAssessementRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCInitialAssessementRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLInitialAssessementRecordList {
		public static implicit operator RLInitialAssessementRecordList(WORCInitialAssessementRecord[] array) {
			RLInitialAssessementRecordList rl = new RLInitialAssessementRecordList();
			if (array != null) {
				foreach(WORCInitialAssessementRecord val in array) {
					rl.Append((RCInitialAssessementRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCInitialAssessementRecord[](RLInitialAssessementRecordList rl) {
			WORCInitialAssessementRecord[] array = new WORCInitialAssessementRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCInitialAssessementRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLInitialAssessementRecordList {
		public static implicit operator RLInitialAssessementRecordList(WORLInitialAssessementRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLInitialAssessementRecordList(RLInitialAssessementRecordList rl) {
			return new WORLInitialAssessementRecordList(rl);
		}
		public static implicit operator WORCInitialAssessementRecord[](WORLInitialAssessementRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLInitialAssessementRecordList(WORCInitialAssessementRecord[] array) {
			return new WORLInitialAssessementRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLInitialAssessementList {
		public WORCInitialAssessementRecord[] Array;


		public WORLInitialAssessementList(WORCInitialAssessementRecord[] r) {
			if (r == null)
			Array = new WORCInitialAssessementRecord[0];
			else
			Array = r;
		}
		public WORLInitialAssessementList() {
			Array = new WORCInitialAssessementRecord[0];
		}

		public WORLInitialAssessementList(RLInitialAssessementList rl) {
			rl=(RLInitialAssessementList) rl.Duplicate();
			Array = new WORCInitialAssessementRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLInitialAssessementList {
		public static implicit operator RLInitialAssessementList(WORCInitialAssessementRecord[] array) {
			RLInitialAssessementList rl = new RLInitialAssessementList();
			if (array != null) {
				foreach(WORCInitialAssessementRecord val in array) {
					rl.Append((STInitialAssessementStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCInitialAssessementRecord[](RLInitialAssessementList rl) {
			WORCInitialAssessementRecord[] array = new WORCInitialAssessementRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STInitialAssessementStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLInitialAssessementList {
		public static implicit operator RLInitialAssessementList(WORLInitialAssessementList w) {
			return w.Array;
		}
		public static implicit operator WORLInitialAssessementList(RLInitialAssessementList rl) {
			return new WORLInitialAssessementList(rl);
		}
		public static implicit operator WORCInitialAssessementRecord[](WORLInitialAssessementList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLInitialAssessementList(WORCInitialAssessementRecord[] array) {
			return new WORLInitialAssessementList(array);
		}
	}
}

