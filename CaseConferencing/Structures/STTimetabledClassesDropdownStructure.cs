/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STTimetabledClassesDropdownStructure</code> that represents the Service Studio
	///  structure <code>TimetabledClassesDropdown</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STTimetabledClassesDropdownStructure: ISerializable, ITypedRecord<STTimetabledClassesDropdownStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdDisplayValue = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*KyqNOE8sukOGKDLDBIlksw");
		private static readonly GlobalObjectKey IdOfferingCode = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*HZne2iINo0eXsOesBv_+Yw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("DisplayValue")]
		public string ssDisplayValue;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string ssOfferingCode;


		public BitArray OptimizedAttributes;

		public STTimetabledClassesDropdownStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssDisplayValue = "";
			ssOfferingCode = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssDisplayValue = r.ReadText(index++, "TimetabledClassesDropdown.DisplayValue", "");
			ssOfferingCode = r.ReadText(index++, "TimetabledClassesDropdown.OfferingCode", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STTimetabledClassesDropdownStructure r) {
			this = r;
		}


		public static bool operator == (STTimetabledClassesDropdownStructure a, STTimetabledClassesDropdownStructure b) {
			if (a.ssDisplayValue != b.ssDisplayValue) return false;
			if (a.ssOfferingCode != b.ssOfferingCode) return false;
			return true;
		}

		public static bool operator != (STTimetabledClassesDropdownStructure a, STTimetabledClassesDropdownStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STTimetabledClassesDropdownStructure)) return false;
			return (this == (STTimetabledClassesDropdownStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssDisplayValue.GetHashCode()
				^ ssOfferingCode.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STTimetabledClassesDropdownStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssDisplayValue = "";
			ssOfferingCode = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssDisplayValue = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssOfferingCode = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STTimetabledClassesDropdownStructure Duplicate() {
			STTimetabledClassesDropdownStructure t;
			t.ssDisplayValue = this.ssDisplayValue;
			t.ssOfferingCode = this.ssOfferingCode;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DisplayValue")) VarValue.AppendAttribute(recordElem, "DisplayValue", ssDisplayValue, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DisplayValue");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCode")) VarValue.AppendAttribute(recordElem, "OfferingCode", ssOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCode");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "displayvalue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DisplayValue")) variable.Value = ssDisplayValue; else variable.Optimized = true;
			} else if (head == "offeringcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCode")) variable.Value = ssOfferingCode; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDisplayValue) {
				return ssDisplayValue;
			} else if (key == IdOfferingCode) {
				return ssOfferingCode;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssDisplayValue = (string) other.AttributeGet(IdDisplayValue);
			ssOfferingCode = (string) other.AttributeGet(IdOfferingCode);
		}
	} // STTimetabledClassesDropdownStructure
	/// <summary>
	/// Structure <code>RCTimetabledClassesDropdownRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTimetabledClassesDropdownRecord: ISerializable, ITypedRecord<RCTimetabledClassesDropdownRecord> {
		private static readonly GlobalObjectKey IdTimetabledClassesDropdown = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*HjUVBJpKQOiS1MY_jwNp+g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("TimetabledClassesDropdown")]
		public STTimetabledClassesDropdownStructure ssSTTimetabledClassesDropdown;


		public static implicit operator STTimetabledClassesDropdownStructure(RCTimetabledClassesDropdownRecord r) {
			return r.ssSTTimetabledClassesDropdown;
		}

		public static implicit operator RCTimetabledClassesDropdownRecord(STTimetabledClassesDropdownStructure r) {
			RCTimetabledClassesDropdownRecord res = new RCTimetabledClassesDropdownRecord(null);
			res.ssSTTimetabledClassesDropdown = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCTimetabledClassesDropdownRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTTimetabledClassesDropdown = new STTimetabledClassesDropdownStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTTimetabledClassesDropdown.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTTimetabledClassesDropdown.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTimetabledClassesDropdownRecord r) {
			this = r;
		}


		public static bool operator == (RCTimetabledClassesDropdownRecord a, RCTimetabledClassesDropdownRecord b) {
			if (a.ssSTTimetabledClassesDropdown != b.ssSTTimetabledClassesDropdown) return false;
			return true;
		}

		public static bool operator != (RCTimetabledClassesDropdownRecord a, RCTimetabledClassesDropdownRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTimetabledClassesDropdownRecord)) return false;
			return (this == (RCTimetabledClassesDropdownRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTTimetabledClassesDropdown.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTimetabledClassesDropdownRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTTimetabledClassesDropdown = new STTimetabledClassesDropdownStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTTimetabledClassesDropdown = (STTimetabledClassesDropdownStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTTimetabledClassesDropdown.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTTimetabledClassesDropdown.InternalRecursiveSave();
		}


		public RCTimetabledClassesDropdownRecord Duplicate() {
			RCTimetabledClassesDropdownRecord t;
			t.ssSTTimetabledClassesDropdown = (STTimetabledClassesDropdownStructure) this.ssSTTimetabledClassesDropdown.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTTimetabledClassesDropdown.ToXml(this, recordElem, "TimetabledClassesDropdown", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "timetabledclassesdropdown") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TimetabledClassesDropdown")) variable.Value = ssSTTimetabledClassesDropdown; else variable.Optimized = true;
				variable.SetFieldName("timetabledclassesdropdown");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTimetabledClassesDropdown) {
				return ssSTTimetabledClassesDropdown;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTTimetabledClassesDropdown.FillFromOther((IRecord) other.AttributeGet(IdTimetabledClassesDropdown));
		}
	} // RCTimetabledClassesDropdownRecord
	/// <summary>
	/// RecordList type <code>RLTimetabledClassesDropdownRecordList</code> that represents a record list of
	///  <code>TimetabledClassesDropdown</code>
	/// </summary>
	[Serializable()]
	public partial class RLTimetabledClassesDropdownRecordList: GenericRecordList<RCTimetabledClassesDropdownRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTimetabledClassesDropdownRecord GetElementDefaultValue() {
			return new RCTimetabledClassesDropdownRecord("");
		}

		public T[] ToArray<T>(Func<RCTimetabledClassesDropdownRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTimetabledClassesDropdownRecordList recordlist, Func<RCTimetabledClassesDropdownRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTimetabledClassesDropdownRecordList ToList<T>(T[] array, Func <T, RCTimetabledClassesDropdownRecord> converter) {
			RLTimetabledClassesDropdownRecordList result = new RLTimetabledClassesDropdownRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTimetabledClassesDropdownRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTimetabledClassesDropdownRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTimetabledClassesDropdownRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTimetabledClassesDropdownRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTimetabledClassesDropdownRecord> NewList() {
			return new RLTimetabledClassesDropdownRecordList();
		}


	} // RLTimetabledClassesDropdownRecordList
	/// <summary>
	/// RecordList type <code>RLTimetabledClassesDropdownList</code> that represents a record list of
	///  <code>Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLTimetabledClassesDropdownList: GenericRecordList<STTimetabledClassesDropdownStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STTimetabledClassesDropdownStructure GetElementDefaultValue() {
			return new STTimetabledClassesDropdownStructure("");
		}

		public T[] ToArray<T>(Func<STTimetabledClassesDropdownStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTimetabledClassesDropdownList recordlist, Func<STTimetabledClassesDropdownStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTimetabledClassesDropdownList ToList<T>(T[] array, Func <T, STTimetabledClassesDropdownStructure> converter) {
			RLTimetabledClassesDropdownList result = new RLTimetabledClassesDropdownList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTimetabledClassesDropdownList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTimetabledClassesDropdownList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTimetabledClassesDropdownList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTimetabledClassesDropdownList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STTimetabledClassesDropdownStructure> NewList() {
			return new RLTimetabledClassesDropdownList();
		}


	} // RLTimetabledClassesDropdownList
}

namespace ssCaseConferencing {
	[XmlType("TimetabledClassesDropdown")]
	public class WORCTimetabledClassesDropdownRecord {
		[System.Xml.Serialization.XmlElement("DisplayValue")]
		public string varWSDisplayValue;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string varWSOfferingCode;

		public WORCTimetabledClassesDropdownRecord() {
			varWSDisplayValue = (string) "";
			varWSOfferingCode = (string) "";
		}

		public WORCTimetabledClassesDropdownRecord(STTimetabledClassesDropdownStructure r) {
			varWSDisplayValue = BaseAppUtils.RemoveControlChars(r.ssDisplayValue);
			varWSOfferingCode = BaseAppUtils.RemoveControlChars(r.ssOfferingCode);
		}

		public static RLTimetabledClassesDropdownList ToRecordList(WORCTimetabledClassesDropdownRecord[] array) {
			RLTimetabledClassesDropdownList rl = new RLTimetabledClassesDropdownList();
			if (array != null) {
				foreach(WORCTimetabledClassesDropdownRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCTimetabledClassesDropdownRecord[] FromRecordList(RLTimetabledClassesDropdownList rl) {
			WORCTimetabledClassesDropdownRecord[] array = new WORCTimetabledClassesDropdownRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCTimetabledClassesDropdownRecord {
		public static implicit operator WORCTimetabledClassesDropdownRecord(RCTimetabledClassesDropdownRecord r) {
			return new WORCTimetabledClassesDropdownRecord(r.ssSTTimetabledClassesDropdown);
		}

		public static implicit operator RCTimetabledClassesDropdownRecord(WORCTimetabledClassesDropdownRecord w) {
			RCTimetabledClassesDropdownRecord r = new RCTimetabledClassesDropdownRecord("");
			if (w != null) {
				r.ssSTTimetabledClassesDropdown = w;
			}
			return r;
		}

	}

	partial struct STTimetabledClassesDropdownStructure {
		public static implicit operator WORCTimetabledClassesDropdownRecord(STTimetabledClassesDropdownStructure r) {
			return new WORCTimetabledClassesDropdownRecord(r);
		}

		public static implicit operator STTimetabledClassesDropdownStructure(WORCTimetabledClassesDropdownRecord w) {
			STTimetabledClassesDropdownStructure r = new STTimetabledClassesDropdownStructure("");
			if (w != null) {
				r.ssDisplayValue = ((string) w.varWSDisplayValue ?? "");
				r.ssOfferingCode = ((string) w.varWSOfferingCode ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTimetabledClassesDropdownRecordList {
		public WORCTimetabledClassesDropdownRecord[] Array;


		public WORLTimetabledClassesDropdownRecordList(WORCTimetabledClassesDropdownRecord[] r) {
			if (r == null)
			Array = new WORCTimetabledClassesDropdownRecord[0];
			else
			Array = r;
		}
		public WORLTimetabledClassesDropdownRecordList() {
			Array = new WORCTimetabledClassesDropdownRecord[0];
		}

		public WORLTimetabledClassesDropdownRecordList(RLTimetabledClassesDropdownRecordList rl) {
			rl=(RLTimetabledClassesDropdownRecordList) rl.Duplicate();
			Array = new WORCTimetabledClassesDropdownRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCTimetabledClassesDropdownRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTimetabledClassesDropdownRecordList {
		public static implicit operator RLTimetabledClassesDropdownRecordList(WORCTimetabledClassesDropdownRecord[] array) {
			RLTimetabledClassesDropdownRecordList rl = new RLTimetabledClassesDropdownRecordList();
			if (array != null) {
				foreach(WORCTimetabledClassesDropdownRecord val in array) {
					rl.Append((RCTimetabledClassesDropdownRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTimetabledClassesDropdownRecord[](RLTimetabledClassesDropdownRecordList rl) {
			WORCTimetabledClassesDropdownRecord[] array = new WORCTimetabledClassesDropdownRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCTimetabledClassesDropdownRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTimetabledClassesDropdownRecordList {
		public static implicit operator RLTimetabledClassesDropdownRecordList(WORLTimetabledClassesDropdownRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLTimetabledClassesDropdownRecordList(RLTimetabledClassesDropdownRecordList rl) {
			return new WORLTimetabledClassesDropdownRecordList(rl);
		}
		public static implicit operator WORCTimetabledClassesDropdownRecord[](WORLTimetabledClassesDropdownRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTimetabledClassesDropdownRecordList(WORCTimetabledClassesDropdownRecord[] array) {
			return new WORLTimetabledClassesDropdownRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTimetabledClassesDropdownList {
		public WORCTimetabledClassesDropdownRecord[] Array;


		public WORLTimetabledClassesDropdownList(WORCTimetabledClassesDropdownRecord[] r) {
			if (r == null)
			Array = new WORCTimetabledClassesDropdownRecord[0];
			else
			Array = r;
		}
		public WORLTimetabledClassesDropdownList() {
			Array = new WORCTimetabledClassesDropdownRecord[0];
		}

		public WORLTimetabledClassesDropdownList(RLTimetabledClassesDropdownList rl) {
			rl=(RLTimetabledClassesDropdownList) rl.Duplicate();
			Array = new WORCTimetabledClassesDropdownRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTimetabledClassesDropdownList {
		public static implicit operator RLTimetabledClassesDropdownList(WORCTimetabledClassesDropdownRecord[] array) {
			RLTimetabledClassesDropdownList rl = new RLTimetabledClassesDropdownList();
			if (array != null) {
				foreach(WORCTimetabledClassesDropdownRecord val in array) {
					rl.Append((STTimetabledClassesDropdownStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTimetabledClassesDropdownRecord[](RLTimetabledClassesDropdownList rl) {
			WORCTimetabledClassesDropdownRecord[] array = new WORCTimetabledClassesDropdownRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STTimetabledClassesDropdownStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTimetabledClassesDropdownList {
		public static implicit operator RLTimetabledClassesDropdownList(WORLTimetabledClassesDropdownList w) {
			return w.Array;
		}
		public static implicit operator WORLTimetabledClassesDropdownList(RLTimetabledClassesDropdownList rl) {
			return new WORLTimetabledClassesDropdownList(rl);
		}
		public static implicit operator WORCTimetabledClassesDropdownRecord[](WORLTimetabledClassesDropdownList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTimetabledClassesDropdownList(WORCTimetabledClassesDropdownRecord[] array) {
			return new WORLTimetabledClassesDropdownList(array);
		}
	}
}

