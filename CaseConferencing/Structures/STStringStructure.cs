/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STStringStructure</code> that represents the Service Studio structure
	///  <code>String</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STStringStructure: ISerializable, ITypedRecord<STStringStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*aR2dGmXroEmn283EyxASrA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Value")]
		public string ssValue;


		public BitArray OptimizedAttributes;

		public STStringStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssValue = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssValue = r.ReadText(index++, "String.Value", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STStringStructure r) {
			this = r;
		}


		public static bool operator == (STStringStructure a, STStringStructure b) {
			if (a.ssValue != b.ssValue) return false;
			return true;
		}

		public static bool operator != (STStringStructure a, STStringStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STStringStructure)) return false;
			return (this == (STStringStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssValue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STStringStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssValue = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssValue = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STStringStructure Duplicate() {
			STStringStructure t;
			t.ssValue = this.ssValue;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdValue) {
				return ssValue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssValue = (string) other.AttributeGet(IdValue);
		}
	} // STStringStructure
	/// <summary>
	/// Structure <code>RCStringRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStringRecord: ISerializable, ITypedRecord<RCStringRecord> {
		private static readonly GlobalObjectKey IdString = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5ltnC1EjdYReiJ9edGCgRA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("String")]
		public STStringStructure ssSTString;


		public static implicit operator STStringStructure(RCStringRecord r) {
			return r.ssSTString;
		}

		public static implicit operator RCStringRecord(STStringStructure r) {
			RCStringRecord res = new RCStringRecord(null);
			res.ssSTString = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCStringRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTString = new STStringStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTString.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTString.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStringRecord r) {
			this = r;
		}


		public static bool operator == (RCStringRecord a, RCStringRecord b) {
			if (a.ssSTString != b.ssSTString) return false;
			return true;
		}

		public static bool operator != (RCStringRecord a, RCStringRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStringRecord)) return false;
			return (this == (RCStringRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTString.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStringRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTString = new STStringStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTString = (STStringStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTString.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTString.InternalRecursiveSave();
		}


		public RCStringRecord Duplicate() {
			RCStringRecord t;
			t.ssSTString = (STStringStructure) this.ssSTString.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTString.ToXml(this, recordElem, "String", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "string") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".String")) variable.Value = ssSTString; else variable.Optimized = true;
				variable.SetFieldName("string");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdString) {
				return ssSTString;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTString.FillFromOther((IRecord) other.AttributeGet(IdString));
		}
	} // RCStringRecord
	/// <summary>
	/// RecordList type <code>RLStringRecordList</code> that represents a record list of
	///  <code>String</code>
	/// </summary>
	[Serializable()]
	public partial class RLStringRecordList: GenericRecordList<RCStringRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStringRecord GetElementDefaultValue() {
			return new RCStringRecord("");
		}

		public T[] ToArray<T>(Func<RCStringRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStringRecordList recordlist, Func<RCStringRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStringRecordList ToList<T>(T[] array, Func <T, RCStringRecord> converter) {
			RLStringRecordList result = new RLStringRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStringRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStringRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStringRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStringRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStringRecord> NewList() {
			return new RLStringRecordList();
		}


	} // RLStringRecordList
	/// <summary>
	/// RecordList type <code>RLStringList</code> that represents a record list of <code>Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLStringList: GenericRecordList<STStringStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STStringStructure GetElementDefaultValue() {
			return new STStringStructure("");
		}

		public T[] ToArray<T>(Func<STStringStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStringList recordlist, Func<STStringStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStringList ToList<T>(T[] array, Func <T, STStringStructure> converter) {
			RLStringList result = new RLStringList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStringList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStringList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStringList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStringList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STStringStructure> NewList() {
			return new RLStringList();
		}


	} // RLStringList
}

namespace ssCaseConferencing {
	[XmlType("String")]
	public class WORCStringRecord {
		[System.Xml.Serialization.XmlElement("Value")]
		public string varWSValue;

		public WORCStringRecord() {
			varWSValue = (string) "";
		}

		public WORCStringRecord(STStringStructure r) {
			varWSValue = BaseAppUtils.RemoveControlChars(r.ssValue);
		}

		public static RLStringList ToRecordList(WORCStringRecord[] array) {
			RLStringList rl = new RLStringList();
			if (array != null) {
				foreach(WORCStringRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStringRecord[] FromRecordList(RLStringList rl) {
			WORCStringRecord[] array = new WORCStringRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStringRecord {
		public static implicit operator WORCStringRecord(RCStringRecord r) {
			return new WORCStringRecord(r.ssSTString);
		}

		public static implicit operator RCStringRecord(WORCStringRecord w) {
			RCStringRecord r = new RCStringRecord("");
			if (w != null) {
				r.ssSTString = w;
			}
			return r;
		}

	}

	partial struct STStringStructure {
		public static implicit operator WORCStringRecord(STStringStructure r) {
			return new WORCStringRecord(r);
		}

		public static implicit operator STStringStructure(WORCStringRecord w) {
			STStringStructure r = new STStringStructure("");
			if (w != null) {
				r.ssValue = ((string) w.varWSValue ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStringRecordList {
		public WORCStringRecord[] Array;


		public WORLStringRecordList(WORCStringRecord[] r) {
			if (r == null)
			Array = new WORCStringRecord[0];
			else
			Array = r;
		}
		public WORLStringRecordList() {
			Array = new WORCStringRecord[0];
		}

		public WORLStringRecordList(RLStringRecordList rl) {
			rl=(RLStringRecordList) rl.Duplicate();
			Array = new WORCStringRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStringRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStringRecordList {
		public static implicit operator RLStringRecordList(WORCStringRecord[] array) {
			RLStringRecordList rl = new RLStringRecordList();
			if (array != null) {
				foreach(WORCStringRecord val in array) {
					rl.Append((RCStringRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStringRecord[](RLStringRecordList rl) {
			WORCStringRecord[] array = new WORCStringRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStringRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStringRecordList {
		public static implicit operator RLStringRecordList(WORLStringRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStringRecordList(RLStringRecordList rl) {
			return new WORLStringRecordList(rl);
		}
		public static implicit operator WORCStringRecord[](WORLStringRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStringRecordList(WORCStringRecord[] array) {
			return new WORLStringRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStringList {
		public WORCStringRecord[] Array;


		public WORLStringList(WORCStringRecord[] r) {
			if (r == null)
			Array = new WORCStringRecord[0];
			else
			Array = r;
		}
		public WORLStringList() {
			Array = new WORCStringRecord[0];
		}

		public WORLStringList(RLStringList rl) {
			rl=(RLStringList) rl.Duplicate();
			Array = new WORCStringRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStringList {
		public static implicit operator RLStringList(WORCStringRecord[] array) {
			RLStringList rl = new RLStringList();
			if (array != null) {
				foreach(WORCStringRecord val in array) {
					rl.Append((STStringStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStringRecord[](RLStringList rl) {
			WORCStringRecord[] array = new WORCStringRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STStringStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStringList {
		public static implicit operator RLStringList(WORLStringList w) {
			return w.Array;
		}
		public static implicit operator WORLStringList(RLStringList rl) {
			return new WORLStringList(rl);
		}
		public static implicit operator WORCStringRecord[](WORLStringList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStringList(WORCStringRecord[] array) {
			return new WORLStringList(array);
		}
	}
}

