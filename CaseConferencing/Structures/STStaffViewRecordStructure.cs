/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STStaffViewRecordStructure</code> that represents the Service Studio structure
	///  <code>StaffViewRecord</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STStaffViewRecordStructure: ISerializable, ITypedRecord<STStaffViewRecordStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*RLpNWAbsOE2UTwp02ZKIFQ");
		private static readonly GlobalObjectKey IdForenames = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*WAagh16D5kuYCUaMr1OY4w");
		private static readonly GlobalObjectKey IdSurname = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*vmLMjiXm+Ey_XHOh0WisXg");
		private static readonly GlobalObjectKey IdMainOfferingName = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ckZKkU12nUCyk1JiJkj0bw");
		private static readonly GlobalObjectKey IdStudentPhotoURL = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*x2COpOT16kSpB8zNsDVB9A");
		private static readonly GlobalObjectKey IdDisability = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*zTN+4vjI_0yEsJPFgRLH7Q");
		private static readonly GlobalObjectKey IdLearningDifficulty = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*eybo+5REnEOfcsuEweNutA");
		private static readonly GlobalObjectKey IdStaffStudentFavouriteId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*uSbkz4e1rU2VInkXSmp+MA");
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*efOslqBxPUqv_YUUBWdFIQ");
		private static readonly GlobalObjectKey IdStudentRAGUpdateAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*RtklbrYr40WcCkgASo+buA");
		private static readonly GlobalObjectKey IdStudentRAGUUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Yis3WGo9x0iCMT_xF0BNYA");
		private static readonly GlobalObjectKey IdLastWeekPunctuality = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Xtsyerf1ME6eNAFJZKXB_Q");
		private static readonly GlobalObjectKey IdOverallPunctuality = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*fgExVd7IZU2yZeXx7Drtlw");
		private static readonly GlobalObjectKey IdLastWeekAttendance = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*NDpuSvfkB0OPID5EUvZ0mQ");
		private static readonly GlobalObjectKey IdOverallAttendance = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*4Nyh2KhYAUqrRcp4v+57XA");
		private static readonly GlobalObjectKey IdCauseOfConcernRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*_jgnF4MntU++9+ZTyq1Qvg");
		private static readonly GlobalObjectKey IdCauseOfConcernNumber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*me0BcsvrOEuaf47mwKlo2w");
		private static readonly GlobalObjectKey IdSafeguardIdList = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*JDQ4Z9JyZEimD4rYNsrRfw");
		private static readonly GlobalObjectKey IdSupportIdList = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*4ZBV0lOK9ECAA8PoImmG8Q");
		private static readonly GlobalObjectKey IdRewardsGoldNumber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*3bUR9hCL0ECQCgU0JabDTA");
		private static readonly GlobalObjectKey IdRewardsGreenNumber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ejLXgNimEEauW99QWqrtBA");
		private static readonly GlobalObjectKey IdVocPeriodRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*TL7c6eRnr0qneyRLg_Oc0Q");
		private static readonly GlobalObjectKey IdVocOverallRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*as5XWv3ebEOY5F4W31w16Q");
		private static readonly GlobalObjectKey IdVocCompletedUnits = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*k53_K2anN0KBs3vQ3DJBuQ");
		private static readonly GlobalObjectKey IdVocRegisteredUnits = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*THewKr0Q8EaqjYg0IBFflg");
		private static readonly GlobalObjectKey IdMathPeriodRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*AFp8GiKyZEyKS6GDNv8dKw");
		private static readonly GlobalObjectKey IdMathOverallRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*OKdv0UdFVEGXCXWtmarsZg");
		private static readonly GlobalObjectKey IdMathCompletedUnits = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*uv1rW3MTok2b8oj4+JcAKw");
		private static readonly GlobalObjectKey IdMathRegisteredUnits = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*X3KZt_LnXUmbrB4_QwUlyg");
		private static readonly GlobalObjectKey IdEngPeriodRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Yf9uq0TqwUKUWpxdgR0iTw");
		private static readonly GlobalObjectKey IdEngOverallRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ZDejYMsEAEOzkeHwvrjZ3A");
		private static readonly GlobalObjectKey IdEngCompletedUnits = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*fHJysyUwy0itT1dB2yt02g");
		private static readonly GlobalObjectKey IdEngRegisteredUnits = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*pTaTdP4qLkKE1obZZLEHKA");
		private static readonly GlobalObjectKey IdMLWPeriodRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*edlOQy4wckyWHGUbGTnvkg");
		private static readonly GlobalObjectKey IdMLWOverallRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*F1S1YVGUX0+yCIuVJcVf_A");
		private static readonly GlobalObjectKey IdMLWCompletedUnits = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ATeu7j55MEaPWd9SzaMwaA");
		private static readonly GlobalObjectKey IdMLWRegisteredUnits = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*mKuM847CMUy7W7fAnhXaPA");
		private static readonly GlobalObjectKey IdRewardType = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*cLibZTmxWEuliDT3ypRyZw");
		private static readonly GlobalObjectKey IdDescriptionType = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*8WHhIzxaMUmfc4JI58wmCw");
		private static readonly GlobalObjectKey IdDisciplinaryTypeNumber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*7BnGnOSGZEGqdEdPCaLi1g");
		private static readonly GlobalObjectKey IdDisciplinaryType = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*nW0bwk_JfEix2gJLxAOdBw");
		private static readonly GlobalObjectKey IdFinancial = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*8ySRMnWXXE+LykICHcZQSw");
		private static readonly GlobalObjectKey IdTransport = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*txarK4bBnkOJlGow_DfRgA");
		private static readonly GlobalObjectKey IdAcademic = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*p_pCoPQ7nUWYqEr9cM569w");
		private static readonly GlobalObjectKey IdPersonal = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*S6q7wRgUVUeRcjVXi61aLw");
		private static readonly GlobalObjectKey IdStudentCatVocShortTermLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ijOCW00_W0qGt7zHyMZEWA");
		private static readonly GlobalObjectKey IdStudentCatVocShortTermUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*8n_YRJ4NhUa1o675zb111Q");
		private static readonly GlobalObjectKey IdStudentCatVocOverallLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*jBoHQm02CEioK0qZKtS7XQ");
		private static readonly GlobalObjectKey IdStudentCatVocOverallUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ZzHuwi9ddE65AP6bcvekGA");
		private static readonly GlobalObjectKey IdStudentCatMathShortTermLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*CYlvswuumkGGeRyQ7erMzg");
		private static readonly GlobalObjectKey IdStudentCatMathShortTermUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*hEJYYGFvIUy_i8eSGeTECQ");
		private static readonly GlobalObjectKey IdStudentCatMathOverallLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*t+O55b2nw0OdkFHZIixaKw");
		private static readonly GlobalObjectKey IdStudentCatMathOverallUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*rxpNpe8YGked1ut+k4Ir5A");
		private static readonly GlobalObjectKey IdStudentCatEngShortTermLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*oFZ85P6810WAcUq262Lhxg");
		private static readonly GlobalObjectKey IdStudentCatEngShortTermUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*b3c1Dcdk+E+P65rdEzoSog");
		private static readonly GlobalObjectKey IdStudentCatEngOverallLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*wOY9fSthVUWZ3431YsV1fw");
		private static readonly GlobalObjectKey IdStudentCatEngOverallUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*7YF_qrIBjUyluYHMahzqTw");
		private static readonly GlobalObjectKey IdStudentCatMLWShortTermLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*FjW156ZEKkOZ7cQZX6rZCA");
		private static readonly GlobalObjectKey IdStudentCatMLWShortTermUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*2HT0U4hwJ0W2C67XJHaZ8Q");
		private static readonly GlobalObjectKey IdStudentCatMLWOverallLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*LXv8dugx_Ea6IreDsbnQ9Q");
		private static readonly GlobalObjectKey IdStudentCatMLWOverallUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*MbIo89cCvk2vEeZj0ZJfpQ");
		private static readonly GlobalObjectKey IdEnrolmentStatus = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*PVgaS+rdT025Aj5bCpmMdQ");
		private static readonly GlobalObjectKey IdNotesNr = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*zT4LpSB5ZEuChGyp8mg4Hw");
		private static readonly GlobalObjectKey IdIsSessionReviewed = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*R9aP37hkS0GndLGP67Mf9Q");
		private static readonly GlobalObjectKey IdIsMathExempt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*CWfeXlJNQESeKa6LL5V7ew");
		private static readonly GlobalObjectKey IdIsEnglishExempt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*bpI2PGWbAk2PeYE8X_kHiA");
		private static readonly GlobalObjectKey IdHasCurrentActiveEnrolment = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*X92lLVNLt0qh7Q4cWv6TXA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;

		[System.Xml.Serialization.XmlElement("Forenames")]
		public string ssForenames;

		[System.Xml.Serialization.XmlElement("Surname")]
		public string ssSurname;

		[System.Xml.Serialization.XmlElement("MainOfferingName")]
		public string ssMainOfferingName;

		[System.Xml.Serialization.XmlElement("StudentPhotoURL")]
		public string ssStudentPhotoURL;

		[System.Xml.Serialization.XmlElement("Disability")]
		public string ssDisability;

		[System.Xml.Serialization.XmlElement("LearningDifficulty")]
		public string ssLearningDifficulty;

		[System.Xml.Serialization.XmlElement("StaffStudentFavouriteId")]
		public int ssStaffStudentFavouriteId;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public string ssStudentRAG;

		[System.Xml.Serialization.XmlElement("StudentRAGUpdateAt")]
		public DateTime ssStudentRAGUpdateAt;

		[System.Xml.Serialization.XmlElement("StudentRAGUUpdatedBy")]
		public int ssStudentRAGUUpdatedBy;

		[System.Xml.Serialization.XmlElement("LastWeekPunctuality")]
		public int ssLastWeekPunctuality;

		[System.Xml.Serialization.XmlElement("OverallPunctuality")]
		public int ssOverallPunctuality;

		[System.Xml.Serialization.XmlElement("LastWeekAttendance")]
		public int ssLastWeekAttendance;

		[System.Xml.Serialization.XmlElement("OverallAttendance")]
		public int ssOverallAttendance;

		[System.Xml.Serialization.XmlElement("CauseOfConcernRAG")]
		public string ssCauseOfConcernRAG;

		[System.Xml.Serialization.XmlElement("CauseOfConcernNumber")]
		public int ssCauseOfConcernNumber;

		[System.Xml.Serialization.XmlElement("SafeguardIdList")]
		public string ssSafeguardIdList;

		[System.Xml.Serialization.XmlElement("SupportIdList")]
		public string ssSupportIdList;

		[System.Xml.Serialization.XmlElement("RewardsGoldNumber")]
		public int ssRewardsGoldNumber;

		[System.Xml.Serialization.XmlElement("RewardsGreenNumber")]
		public int ssRewardsGreenNumber;

		[System.Xml.Serialization.XmlElement("VocPeriodRAG")]
		public string ssVocPeriodRAG;

		[System.Xml.Serialization.XmlElement("VocOverallRAG")]
		public string ssVocOverallRAG;

		[System.Xml.Serialization.XmlElement("VocCompletedUnits")]
		public int ssVocCompletedUnits;

		[System.Xml.Serialization.XmlElement("VocRegisteredUnits")]
		public int ssVocRegisteredUnits;

		[System.Xml.Serialization.XmlElement("MathPeriodRAG")]
		public string ssMathPeriodRAG;

		[System.Xml.Serialization.XmlElement("MathOverallRAG")]
		public string ssMathOverallRAG;

		[System.Xml.Serialization.XmlElement("MathCompletedUnits")]
		public int ssMathCompletedUnits;

		[System.Xml.Serialization.XmlElement("MathRegisteredUnits")]
		public int ssMathRegisteredUnits;

		[System.Xml.Serialization.XmlElement("EngPeriodRAG")]
		public string ssEngPeriodRAG;

		[System.Xml.Serialization.XmlElement("EngOverallRAG")]
		public string ssEngOverallRAG;

		[System.Xml.Serialization.XmlElement("EngCompletedUnits")]
		public int ssEngCompletedUnits;

		[System.Xml.Serialization.XmlElement("EngRegisteredUnits")]
		public int ssEngRegisteredUnits;

		[System.Xml.Serialization.XmlElement("MLWPeriodRAG")]
		public string ssMLWPeriodRAG;

		[System.Xml.Serialization.XmlElement("MLWOverallRAG")]
		public string ssMLWOverallRAG;

		[System.Xml.Serialization.XmlElement("MLWCompletedUnits")]
		public int ssMLWCompletedUnits;

		[System.Xml.Serialization.XmlElement("MLWRegisteredUnits")]
		public int ssMLWRegisteredUnits;

		[System.Xml.Serialization.XmlElement("RewardType")]
		public bool ssRewardType;

		[System.Xml.Serialization.XmlElement("DescriptionType")]
		public string ssDescriptionType;

		[System.Xml.Serialization.XmlElement("DisciplinaryTypeNumber")]
		public int ssDisciplinaryTypeNumber;

		[System.Xml.Serialization.XmlElement("DisciplinaryType")]
		public string ssDisciplinaryType;

		[System.Xml.Serialization.XmlElement("Financial")]
		public string ssFinancial;

		[System.Xml.Serialization.XmlElement("Transport")]
		public string ssTransport;

		[System.Xml.Serialization.XmlElement("Academic")]
		public string ssAcademic;

		[System.Xml.Serialization.XmlElement("Personal")]
		public string ssPersonal;

		[System.Xml.Serialization.XmlElement("StudentCatVocShortTermLastUpdatedBy")]
		public string ssStudentCatVocShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatVocShortTermUpdatedAt")]
		public DateTime ssStudentCatVocShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatVocOverallLastUpdatedBy")]
		public string ssStudentCatVocOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatVocOverallUpdatedAt")]
		public DateTime ssStudentCatVocOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMathShortTermLastUpdatedBy")]
		public string ssStudentCatMathShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMathShortTermUpdatedAt")]
		public DateTime ssStudentCatMathShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMathOverallLastUpdatedBy")]
		public string ssStudentCatMathOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMathOverallUpdatedAt")]
		public DateTime ssStudentCatMathOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatEngShortTermLastUpdatedBy")]
		public string ssStudentCatEngShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatEngShortTermUpdatedAt")]
		public DateTime ssStudentCatEngShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatEngOverallLastUpdatedBy")]
		public string ssStudentCatEngOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatEngOverallUpdatedAt")]
		public DateTime ssStudentCatEngOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMLWShortTermLastUpdatedBy")]
		public string ssStudentCatMLWShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMLWShortTermUpdatedAt")]
		public DateTime ssStudentCatMLWShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMLWOverallLastUpdatedBy")]
		public string ssStudentCatMLWOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMLWOverallUpdatedAt")]
		public DateTime ssStudentCatMLWOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("EnrolmentStatus")]
		public string ssEnrolmentStatus;

		[System.Xml.Serialization.XmlElement("NotesNr")]
		public int ssNotesNr;

		[System.Xml.Serialization.XmlElement("IsSessionReviewed")]
		public bool ssIsSessionReviewed;

		[System.Xml.Serialization.XmlElement("IsMathExempt")]
		public bool ssIsMathExempt;

		[System.Xml.Serialization.XmlElement("IsEnglishExempt")]
		public bool ssIsEnglishExempt;

		[System.Xml.Serialization.XmlElement("HasCurrentActiveEnrolment")]
		public bool ssHasCurrentActiveEnrolment;


		public BitArray OptimizedAttributes;

		public STStaffViewRecordStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssForenames = "";
			ssSurname = "";
			ssMainOfferingName = "";
			ssStudentPhotoURL = "";
			ssDisability = "";
			ssLearningDifficulty = "";
			ssStaffStudentFavouriteId = 0;
			ssStudentRAG = "";
			ssStudentRAGUpdateAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentRAGUUpdatedBy = 0;
			ssLastWeekPunctuality = 0;
			ssOverallPunctuality = 0;
			ssLastWeekAttendance = 0;
			ssOverallAttendance = 0;
			ssCauseOfConcernRAG = "";
			ssCauseOfConcernNumber = 0;
			ssSafeguardIdList = "";
			ssSupportIdList = "";
			ssRewardsGoldNumber = 0;
			ssRewardsGreenNumber = 0;
			ssVocPeriodRAG = "";
			ssVocOverallRAG = "";
			ssVocCompletedUnits = 0;
			ssVocRegisteredUnits = 0;
			ssMathPeriodRAG = "";
			ssMathOverallRAG = "";
			ssMathCompletedUnits = 0;
			ssMathRegisteredUnits = 0;
			ssEngPeriodRAG = "";
			ssEngOverallRAG = "";
			ssEngCompletedUnits = 0;
			ssEngRegisteredUnits = 0;
			ssMLWPeriodRAG = "";
			ssMLWOverallRAG = "";
			ssMLWCompletedUnits = 0;
			ssMLWRegisteredUnits = 0;
			ssRewardType = false;
			ssDescriptionType = "";
			ssDisciplinaryTypeNumber = 0;
			ssDisciplinaryType = "";
			ssFinancial = "";
			ssTransport = "";
			ssAcademic = "";
			ssPersonal = "";
			ssStudentCatVocShortTermLastUpdatedBy = "";
			ssStudentCatVocShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatVocOverallLastUpdatedBy = "";
			ssStudentCatVocOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMathShortTermLastUpdatedBy = "";
			ssStudentCatMathShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMathOverallLastUpdatedBy = "";
			ssStudentCatMathOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatEngShortTermLastUpdatedBy = "";
			ssStudentCatEngShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatEngOverallLastUpdatedBy = "";
			ssStudentCatEngOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMLWShortTermLastUpdatedBy = "";
			ssStudentCatMLWShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMLWOverallLastUpdatedBy = "";
			ssStudentCatMLWOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssEnrolmentStatus = "";
			ssNotesNr = 0;
			ssIsSessionReviewed = false;
			ssIsMathExempt = false;
			ssIsEnglishExempt = false;
			ssHasCurrentActiveEnrolment = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentReference = r.ReadTextEntityReference(index++, "StaffViewRecord.StudentReference", "");
			ssForenames = r.ReadText(index++, "StaffViewRecord.Forenames", "");
			ssSurname = r.ReadText(index++, "StaffViewRecord.Surname", "");
			ssMainOfferingName = r.ReadText(index++, "StaffViewRecord.MainOfferingName", "");
			ssStudentPhotoURL = r.ReadText(index++, "StaffViewRecord.StudentPhotoURL", "");
			ssDisability = r.ReadText(index++, "StaffViewRecord.Disability", "");
			ssLearningDifficulty = r.ReadText(index++, "StaffViewRecord.LearningDifficulty", "");
			ssStaffStudentFavouriteId = r.ReadEntityReference(index++, "StaffViewRecord.StaffStudentFavouriteId", 0);
			ssStudentRAG = r.ReadTextEntityReference(index++, "StaffViewRecord.StudentRAG", "");
			ssStudentRAGUpdateAt = r.ReadDateTime(index++, "StaffViewRecord.StudentRAGUpdateAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentRAGUUpdatedBy = r.ReadEntityReference(index++, "StaffViewRecord.StudentRAGUUpdatedBy", 0);
			ssLastWeekPunctuality = r.ReadInteger(index++, "StaffViewRecord.LastWeekPunctuality", 0);
			ssOverallPunctuality = r.ReadInteger(index++, "StaffViewRecord.OverallPunctuality", 0);
			ssLastWeekAttendance = r.ReadInteger(index++, "StaffViewRecord.LastWeekAttendance", 0);
			ssOverallAttendance = r.ReadInteger(index++, "StaffViewRecord.OverallAttendance", 0);
			ssCauseOfConcernRAG = r.ReadTextEntityReference(index++, "StaffViewRecord.CauseOfConcernRAG", "");
			ssCauseOfConcernNumber = r.ReadInteger(index++, "StaffViewRecord.CauseOfConcernNumber", 0);
			ssSafeguardIdList = r.ReadText(index++, "StaffViewRecord.SafeguardIdList", "");
			ssSupportIdList = r.ReadText(index++, "StaffViewRecord.SupportIdList", "");
			ssRewardsGoldNumber = r.ReadInteger(index++, "StaffViewRecord.RewardsGoldNumber", 0);
			ssRewardsGreenNumber = r.ReadInteger(index++, "StaffViewRecord.RewardsGreenNumber", 0);
			ssVocPeriodRAG = r.ReadTextEntityReference(index++, "StaffViewRecord.VocPeriodRAG", "");
			ssVocOverallRAG = r.ReadTextEntityReference(index++, "StaffViewRecord.VocOverallRAG", "");
			ssVocCompletedUnits = r.ReadInteger(index++, "StaffViewRecord.VocCompletedUnits", 0);
			ssVocRegisteredUnits = r.ReadInteger(index++, "StaffViewRecord.VocRegisteredUnits", 0);
			ssMathPeriodRAG = r.ReadTextEntityReference(index++, "StaffViewRecord.MathPeriodRAG", "");
			ssMathOverallRAG = r.ReadTextEntityReference(index++, "StaffViewRecord.MathOverallRAG", "");
			ssMathCompletedUnits = r.ReadInteger(index++, "StaffViewRecord.MathCompletedUnits", 0);
			ssMathRegisteredUnits = r.ReadInteger(index++, "StaffViewRecord.MathRegisteredUnits", 0);
			ssEngPeriodRAG = r.ReadTextEntityReference(index++, "StaffViewRecord.EngPeriodRAG", "");
			ssEngOverallRAG = r.ReadTextEntityReference(index++, "StaffViewRecord.EngOverallRAG", "");
			ssEngCompletedUnits = r.ReadInteger(index++, "StaffViewRecord.EngCompletedUnits", 0);
			ssEngRegisteredUnits = r.ReadInteger(index++, "StaffViewRecord.EngRegisteredUnits", 0);
			ssMLWPeriodRAG = r.ReadTextEntityReference(index++, "StaffViewRecord.MLWPeriodRAG", "");
			ssMLWOverallRAG = r.ReadTextEntityReference(index++, "StaffViewRecord.MLWOverallRAG", "");
			ssMLWCompletedUnits = r.ReadInteger(index++, "StaffViewRecord.MLWCompletedUnits", 0);
			ssMLWRegisteredUnits = r.ReadInteger(index++, "StaffViewRecord.MLWRegisteredUnits", 0);
			ssRewardType = r.ReadBoolean(index++, "StaffViewRecord.RewardType", false);
			ssDescriptionType = r.ReadText(index++, "StaffViewRecord.DescriptionType", "");
			ssDisciplinaryTypeNumber = r.ReadInteger(index++, "StaffViewRecord.DisciplinaryTypeNumber", 0);
			ssDisciplinaryType = r.ReadTextEntityReference(index++, "StaffViewRecord.DisciplinaryType", "");
			ssFinancial = r.ReadText(index++, "StaffViewRecord.Financial", "");
			ssTransport = r.ReadText(index++, "StaffViewRecord.Transport", "");
			ssAcademic = r.ReadText(index++, "StaffViewRecord.Academic", "");
			ssPersonal = r.ReadText(index++, "StaffViewRecord.Personal", "");
			ssStudentCatVocShortTermLastUpdatedBy = r.ReadText(index++, "StaffViewRecord.StudentCatVocShortTermLastUpdatedBy", "");
			ssStudentCatVocShortTermUpdatedAt = r.ReadDate(index++, "StaffViewRecord.StudentCatVocShortTermUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatVocOverallLastUpdatedBy = r.ReadText(index++, "StaffViewRecord.StudentCatVocOverallLastUpdatedBy", "");
			ssStudentCatVocOverallUpdatedAt = r.ReadDate(index++, "StaffViewRecord.StudentCatVocOverallUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatMathShortTermLastUpdatedBy = r.ReadText(index++, "StaffViewRecord.StudentCatMathShortTermLastUpdatedBy", "");
			ssStudentCatMathShortTermUpdatedAt = r.ReadDate(index++, "StaffViewRecord.StudentCatMathShortTermUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatMathOverallLastUpdatedBy = r.ReadText(index++, "StaffViewRecord.StudentCatMathOverallLastUpdatedBy", "");
			ssStudentCatMathOverallUpdatedAt = r.ReadDate(index++, "StaffViewRecord.StudentCatMathOverallUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatEngShortTermLastUpdatedBy = r.ReadText(index++, "StaffViewRecord.StudentCatEngShortTermLastUpdatedBy", "");
			ssStudentCatEngShortTermUpdatedAt = r.ReadDate(index++, "StaffViewRecord.StudentCatEngShortTermUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatEngOverallLastUpdatedBy = r.ReadText(index++, "StaffViewRecord.StudentCatEngOverallLastUpdatedBy", "");
			ssStudentCatEngOverallUpdatedAt = r.ReadDate(index++, "StaffViewRecord.StudentCatEngOverallUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatMLWShortTermLastUpdatedBy = r.ReadText(index++, "StaffViewRecord.StudentCatMLWShortTermLastUpdatedBy", "");
			ssStudentCatMLWShortTermUpdatedAt = r.ReadDate(index++, "StaffViewRecord.StudentCatMLWShortTermUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatMLWOverallLastUpdatedBy = r.ReadText(index++, "StaffViewRecord.StudentCatMLWOverallLastUpdatedBy", "");
			ssStudentCatMLWOverallUpdatedAt = r.ReadDate(index++, "StaffViewRecord.StudentCatMLWOverallUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssEnrolmentStatus = r.ReadText(index++, "StaffViewRecord.EnrolmentStatus", "");
			ssNotesNr = r.ReadInteger(index++, "StaffViewRecord.NotesNr", 0);
			ssIsSessionReviewed = r.ReadBoolean(index++, "StaffViewRecord.IsSessionReviewed", false);
			ssIsMathExempt = r.ReadBoolean(index++, "StaffViewRecord.IsMathExempt", false);
			ssIsEnglishExempt = r.ReadBoolean(index++, "StaffViewRecord.IsEnglishExempt", false);
			ssHasCurrentActiveEnrolment = r.ReadBoolean(index++, "StaffViewRecord.HasCurrentActiveEnrolment", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STStaffViewRecordStructure r) {
			this = r;
		}


		public static bool operator == (STStaffViewRecordStructure a, STStaffViewRecordStructure b) {
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssForenames != b.ssForenames) return false;
			if (a.ssSurname != b.ssSurname) return false;
			if (a.ssMainOfferingName != b.ssMainOfferingName) return false;
			if (a.ssStudentPhotoURL != b.ssStudentPhotoURL) return false;
			if (a.ssDisability != b.ssDisability) return false;
			if (a.ssLearningDifficulty != b.ssLearningDifficulty) return false;
			if (a.ssStaffStudentFavouriteId != b.ssStaffStudentFavouriteId) return false;
			if (a.ssStudentRAG != b.ssStudentRAG) return false;
			if (a.ssStudentRAGUpdateAt != b.ssStudentRAGUpdateAt) return false;
			if (a.ssStudentRAGUUpdatedBy != b.ssStudentRAGUUpdatedBy) return false;
			if (a.ssLastWeekPunctuality != b.ssLastWeekPunctuality) return false;
			if (a.ssOverallPunctuality != b.ssOverallPunctuality) return false;
			if (a.ssLastWeekAttendance != b.ssLastWeekAttendance) return false;
			if (a.ssOverallAttendance != b.ssOverallAttendance) return false;
			if (a.ssCauseOfConcernRAG != b.ssCauseOfConcernRAG) return false;
			if (a.ssCauseOfConcernNumber != b.ssCauseOfConcernNumber) return false;
			if (a.ssSafeguardIdList != b.ssSafeguardIdList) return false;
			if (a.ssSupportIdList != b.ssSupportIdList) return false;
			if (a.ssRewardsGoldNumber != b.ssRewardsGoldNumber) return false;
			if (a.ssRewardsGreenNumber != b.ssRewardsGreenNumber) return false;
			if (a.ssVocPeriodRAG != b.ssVocPeriodRAG) return false;
			if (a.ssVocOverallRAG != b.ssVocOverallRAG) return false;
			if (a.ssVocCompletedUnits != b.ssVocCompletedUnits) return false;
			if (a.ssVocRegisteredUnits != b.ssVocRegisteredUnits) return false;
			if (a.ssMathPeriodRAG != b.ssMathPeriodRAG) return false;
			if (a.ssMathOverallRAG != b.ssMathOverallRAG) return false;
			if (a.ssMathCompletedUnits != b.ssMathCompletedUnits) return false;
			if (a.ssMathRegisteredUnits != b.ssMathRegisteredUnits) return false;
			if (a.ssEngPeriodRAG != b.ssEngPeriodRAG) return false;
			if (a.ssEngOverallRAG != b.ssEngOverallRAG) return false;
			if (a.ssEngCompletedUnits != b.ssEngCompletedUnits) return false;
			if (a.ssEngRegisteredUnits != b.ssEngRegisteredUnits) return false;
			if (a.ssMLWPeriodRAG != b.ssMLWPeriodRAG) return false;
			if (a.ssMLWOverallRAG != b.ssMLWOverallRAG) return false;
			if (a.ssMLWCompletedUnits != b.ssMLWCompletedUnits) return false;
			if (a.ssMLWRegisteredUnits != b.ssMLWRegisteredUnits) return false;
			if (a.ssRewardType != b.ssRewardType) return false;
			if (a.ssDescriptionType != b.ssDescriptionType) return false;
			if (a.ssDisciplinaryTypeNumber != b.ssDisciplinaryTypeNumber) return false;
			if (a.ssDisciplinaryType != b.ssDisciplinaryType) return false;
			if (a.ssFinancial != b.ssFinancial) return false;
			if (a.ssTransport != b.ssTransport) return false;
			if (a.ssAcademic != b.ssAcademic) return false;
			if (a.ssPersonal != b.ssPersonal) return false;
			if (a.ssStudentCatVocShortTermLastUpdatedBy != b.ssStudentCatVocShortTermLastUpdatedBy) return false;
			if (a.ssStudentCatVocShortTermUpdatedAt != b.ssStudentCatVocShortTermUpdatedAt) return false;
			if (a.ssStudentCatVocOverallLastUpdatedBy != b.ssStudentCatVocOverallLastUpdatedBy) return false;
			if (a.ssStudentCatVocOverallUpdatedAt != b.ssStudentCatVocOverallUpdatedAt) return false;
			if (a.ssStudentCatMathShortTermLastUpdatedBy != b.ssStudentCatMathShortTermLastUpdatedBy) return false;
			if (a.ssStudentCatMathShortTermUpdatedAt != b.ssStudentCatMathShortTermUpdatedAt) return false;
			if (a.ssStudentCatMathOverallLastUpdatedBy != b.ssStudentCatMathOverallLastUpdatedBy) return false;
			if (a.ssStudentCatMathOverallUpdatedAt != b.ssStudentCatMathOverallUpdatedAt) return false;
			if (a.ssStudentCatEngShortTermLastUpdatedBy != b.ssStudentCatEngShortTermLastUpdatedBy) return false;
			if (a.ssStudentCatEngShortTermUpdatedAt != b.ssStudentCatEngShortTermUpdatedAt) return false;
			if (a.ssStudentCatEngOverallLastUpdatedBy != b.ssStudentCatEngOverallLastUpdatedBy) return false;
			if (a.ssStudentCatEngOverallUpdatedAt != b.ssStudentCatEngOverallUpdatedAt) return false;
			if (a.ssStudentCatMLWShortTermLastUpdatedBy != b.ssStudentCatMLWShortTermLastUpdatedBy) return false;
			if (a.ssStudentCatMLWShortTermUpdatedAt != b.ssStudentCatMLWShortTermUpdatedAt) return false;
			if (a.ssStudentCatMLWOverallLastUpdatedBy != b.ssStudentCatMLWOverallLastUpdatedBy) return false;
			if (a.ssStudentCatMLWOverallUpdatedAt != b.ssStudentCatMLWOverallUpdatedAt) return false;
			if (a.ssEnrolmentStatus != b.ssEnrolmentStatus) return false;
			if (a.ssNotesNr != b.ssNotesNr) return false;
			if (a.ssIsSessionReviewed != b.ssIsSessionReviewed) return false;
			if (a.ssIsMathExempt != b.ssIsMathExempt) return false;
			if (a.ssIsEnglishExempt != b.ssIsEnglishExempt) return false;
			if (a.ssHasCurrentActiveEnrolment != b.ssHasCurrentActiveEnrolment) return false;
			return true;
		}

		public static bool operator != (STStaffViewRecordStructure a, STStaffViewRecordStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STStaffViewRecordStructure)) return false;
			return (this == (STStaffViewRecordStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssForenames.GetHashCode()
				^ ssSurname.GetHashCode()
				^ ssMainOfferingName.GetHashCode()
				^ ssStudentPhotoURL.GetHashCode()
				^ ssDisability.GetHashCode()
				^ ssLearningDifficulty.GetHashCode()
				^ ssStaffStudentFavouriteId.GetHashCode()
				^ ssStudentRAG.GetHashCode()
				^ ssStudentRAGUpdateAt.GetHashCode()
				^ ssStudentRAGUUpdatedBy.GetHashCode()
				^ ssLastWeekPunctuality.GetHashCode()
				^ ssOverallPunctuality.GetHashCode()
				^ ssLastWeekAttendance.GetHashCode()
				^ ssOverallAttendance.GetHashCode()
				^ ssCauseOfConcernRAG.GetHashCode()
				^ ssCauseOfConcernNumber.GetHashCode()
				^ ssSafeguardIdList.GetHashCode()
				^ ssSupportIdList.GetHashCode()
				^ ssRewardsGoldNumber.GetHashCode()
				^ ssRewardsGreenNumber.GetHashCode()
				^ ssVocPeriodRAG.GetHashCode()
				^ ssVocOverallRAG.GetHashCode()
				^ ssVocCompletedUnits.GetHashCode()
				^ ssVocRegisteredUnits.GetHashCode()
				^ ssMathPeriodRAG.GetHashCode()
				^ ssMathOverallRAG.GetHashCode()
				^ ssMathCompletedUnits.GetHashCode()
				^ ssMathRegisteredUnits.GetHashCode()
				^ ssEngPeriodRAG.GetHashCode()
				^ ssEngOverallRAG.GetHashCode()
				^ ssEngCompletedUnits.GetHashCode()
				^ ssEngRegisteredUnits.GetHashCode()
				^ ssMLWPeriodRAG.GetHashCode()
				^ ssMLWOverallRAG.GetHashCode()
				^ ssMLWCompletedUnits.GetHashCode()
				^ ssMLWRegisteredUnits.GetHashCode()
				^ ssRewardType.GetHashCode()
				^ ssDescriptionType.GetHashCode()
				^ ssDisciplinaryTypeNumber.GetHashCode()
				^ ssDisciplinaryType.GetHashCode()
				^ ssFinancial.GetHashCode()
				^ ssTransport.GetHashCode()
				^ ssAcademic.GetHashCode()
				^ ssPersonal.GetHashCode()
				^ ssStudentCatVocShortTermLastUpdatedBy.GetHashCode()
				^ ssStudentCatVocShortTermUpdatedAt.GetHashCode()
				^ ssStudentCatVocOverallLastUpdatedBy.GetHashCode()
				^ ssStudentCatVocOverallUpdatedAt.GetHashCode()
				^ ssStudentCatMathShortTermLastUpdatedBy.GetHashCode()
				^ ssStudentCatMathShortTermUpdatedAt.GetHashCode()
				^ ssStudentCatMathOverallLastUpdatedBy.GetHashCode()
				^ ssStudentCatMathOverallUpdatedAt.GetHashCode()
				^ ssStudentCatEngShortTermLastUpdatedBy.GetHashCode()
				^ ssStudentCatEngShortTermUpdatedAt.GetHashCode()
				^ ssStudentCatEngOverallLastUpdatedBy.GetHashCode()
				^ ssStudentCatEngOverallUpdatedAt.GetHashCode()
				^ ssStudentCatMLWShortTermLastUpdatedBy.GetHashCode()
				^ ssStudentCatMLWShortTermUpdatedAt.GetHashCode()
				^ ssStudentCatMLWOverallLastUpdatedBy.GetHashCode()
				^ ssStudentCatMLWOverallUpdatedAt.GetHashCode()
				^ ssEnrolmentStatus.GetHashCode()
				^ ssNotesNr.GetHashCode()
				^ ssIsSessionReviewed.GetHashCode()
				^ ssIsMathExempt.GetHashCode()
				^ ssIsEnglishExempt.GetHashCode()
				^ ssHasCurrentActiveEnrolment.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STStaffViewRecordStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssForenames = "";
			ssSurname = "";
			ssMainOfferingName = "";
			ssStudentPhotoURL = "";
			ssDisability = "";
			ssLearningDifficulty = "";
			ssStaffStudentFavouriteId = 0;
			ssStudentRAG = "";
			ssStudentRAGUpdateAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentRAGUUpdatedBy = 0;
			ssLastWeekPunctuality = 0;
			ssOverallPunctuality = 0;
			ssLastWeekAttendance = 0;
			ssOverallAttendance = 0;
			ssCauseOfConcernRAG = "";
			ssCauseOfConcernNumber = 0;
			ssSafeguardIdList = "";
			ssSupportIdList = "";
			ssRewardsGoldNumber = 0;
			ssRewardsGreenNumber = 0;
			ssVocPeriodRAG = "";
			ssVocOverallRAG = "";
			ssVocCompletedUnits = 0;
			ssVocRegisteredUnits = 0;
			ssMathPeriodRAG = "";
			ssMathOverallRAG = "";
			ssMathCompletedUnits = 0;
			ssMathRegisteredUnits = 0;
			ssEngPeriodRAG = "";
			ssEngOverallRAG = "";
			ssEngCompletedUnits = 0;
			ssEngRegisteredUnits = 0;
			ssMLWPeriodRAG = "";
			ssMLWOverallRAG = "";
			ssMLWCompletedUnits = 0;
			ssMLWRegisteredUnits = 0;
			ssRewardType = false;
			ssDescriptionType = "";
			ssDisciplinaryTypeNumber = 0;
			ssDisciplinaryType = "";
			ssFinancial = "";
			ssTransport = "";
			ssAcademic = "";
			ssPersonal = "";
			ssStudentCatVocShortTermLastUpdatedBy = "";
			ssStudentCatVocShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatVocOverallLastUpdatedBy = "";
			ssStudentCatVocOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMathShortTermLastUpdatedBy = "";
			ssStudentCatMathShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMathOverallLastUpdatedBy = "";
			ssStudentCatMathOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatEngShortTermLastUpdatedBy = "";
			ssStudentCatEngShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatEngOverallLastUpdatedBy = "";
			ssStudentCatEngOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMLWShortTermLastUpdatedBy = "";
			ssStudentCatMLWShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMLWOverallLastUpdatedBy = "";
			ssStudentCatMLWOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssEnrolmentStatus = "";
			ssNotesNr = 0;
			ssIsSessionReviewed = false;
			ssIsMathExempt = false;
			ssIsEnglishExempt = false;
			ssHasCurrentActiveEnrolment = false;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssForenames = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSurname = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssMainOfferingName = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssStudentPhotoURL = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssDisability = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssLearningDifficulty = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssStaffStudentFavouriteId = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssStudentRAG = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssStudentRAGUpdateAt = (DateTime) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			ssStudentRAGUUpdatedBy = (int) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			ssLastWeekPunctuality = (int) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			ssOverallPunctuality = (int) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			ssLastWeekAttendance = (int) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			ssOverallAttendance = (int) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			ssCauseOfConcernRAG = (string) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			ssCauseOfConcernNumber = (int) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			ssSafeguardIdList = (string) info.GetValue(fields[17] .Name, fields[17] .FieldType);
			if (fields[18] .FieldType.IsSerializable)
			ssSupportIdList = (string) info.GetValue(fields[18] .Name, fields[18] .FieldType);
			if (fields[19] .FieldType.IsSerializable)
			ssRewardsGoldNumber = (int) info.GetValue(fields[19] .Name, fields[19] .FieldType);
			if (fields[20] .FieldType.IsSerializable)
			ssRewardsGreenNumber = (int) info.GetValue(fields[20] .Name, fields[20] .FieldType);
			if (fields[21] .FieldType.IsSerializable)
			ssVocPeriodRAG = (string) info.GetValue(fields[21] .Name, fields[21] .FieldType);
			if (fields[22] .FieldType.IsSerializable)
			ssVocOverallRAG = (string) info.GetValue(fields[22] .Name, fields[22] .FieldType);
			if (fields[23] .FieldType.IsSerializable)
			ssVocCompletedUnits = (int) info.GetValue(fields[23] .Name, fields[23] .FieldType);
			if (fields[24] .FieldType.IsSerializable)
			ssVocRegisteredUnits = (int) info.GetValue(fields[24] .Name, fields[24] .FieldType);
			if (fields[25] .FieldType.IsSerializable)
			ssMathPeriodRAG = (string) info.GetValue(fields[25] .Name, fields[25] .FieldType);
			if (fields[26] .FieldType.IsSerializable)
			ssMathOverallRAG = (string) info.GetValue(fields[26] .Name, fields[26] .FieldType);
			if (fields[27] .FieldType.IsSerializable)
			ssMathCompletedUnits = (int) info.GetValue(fields[27] .Name, fields[27] .FieldType);
			if (fields[28] .FieldType.IsSerializable)
			ssMathRegisteredUnits = (int) info.GetValue(fields[28] .Name, fields[28] .FieldType);
			if (fields[29] .FieldType.IsSerializable)
			ssEngPeriodRAG = (string) info.GetValue(fields[29] .Name, fields[29] .FieldType);
			if (fields[30] .FieldType.IsSerializable)
			ssEngOverallRAG = (string) info.GetValue(fields[30] .Name, fields[30] .FieldType);
			if (fields[31] .FieldType.IsSerializable)
			ssEngCompletedUnits = (int) info.GetValue(fields[31] .Name, fields[31] .FieldType);
			if (fields[32] .FieldType.IsSerializable)
			ssEngRegisteredUnits = (int) info.GetValue(fields[32] .Name, fields[32] .FieldType);
			if (fields[33] .FieldType.IsSerializable)
			ssMLWPeriodRAG = (string) info.GetValue(fields[33] .Name, fields[33] .FieldType);
			if (fields[34] .FieldType.IsSerializable)
			ssMLWOverallRAG = (string) info.GetValue(fields[34] .Name, fields[34] .FieldType);
			if (fields[35] .FieldType.IsSerializable)
			ssMLWCompletedUnits = (int) info.GetValue(fields[35] .Name, fields[35] .FieldType);
			if (fields[36] .FieldType.IsSerializable)
			ssMLWRegisteredUnits = (int) info.GetValue(fields[36] .Name, fields[36] .FieldType);
			if (fields[37] .FieldType.IsSerializable)
			ssRewardType = (bool) info.GetValue(fields[37] .Name, fields[37] .FieldType);
			if (fields[38] .FieldType.IsSerializable)
			ssDescriptionType = (string) info.GetValue(fields[38] .Name, fields[38] .FieldType);
			if (fields[39] .FieldType.IsSerializable)
			ssDisciplinaryTypeNumber = (int) info.GetValue(fields[39] .Name, fields[39] .FieldType);
			if (fields[40] .FieldType.IsSerializable)
			ssDisciplinaryType = (string) info.GetValue(fields[40] .Name, fields[40] .FieldType);
			if (fields[41] .FieldType.IsSerializable)
			ssFinancial = (string) info.GetValue(fields[41] .Name, fields[41] .FieldType);
			if (fields[42] .FieldType.IsSerializable)
			ssTransport = (string) info.GetValue(fields[42] .Name, fields[42] .FieldType);
			if (fields[43] .FieldType.IsSerializable)
			ssAcademic = (string) info.GetValue(fields[43] .Name, fields[43] .FieldType);
			if (fields[44] .FieldType.IsSerializable)
			ssPersonal = (string) info.GetValue(fields[44] .Name, fields[44] .FieldType);
			if (fields[45] .FieldType.IsSerializable)
			ssStudentCatVocShortTermLastUpdatedBy = (string) info.GetValue(fields[45] .Name, fields[45] .FieldType);
			if (fields[46] .FieldType.IsSerializable)
			ssStudentCatVocShortTermUpdatedAt = (DateTime) info.GetValue(fields[46] .Name, fields[46] .FieldType);
			if (fields[47] .FieldType.IsSerializable)
			ssStudentCatVocOverallLastUpdatedBy = (string) info.GetValue(fields[47] .Name, fields[47] .FieldType);
			if (fields[48] .FieldType.IsSerializable)
			ssStudentCatVocOverallUpdatedAt = (DateTime) info.GetValue(fields[48] .Name, fields[48] .FieldType);
			if (fields[49] .FieldType.IsSerializable)
			ssStudentCatMathShortTermLastUpdatedBy = (string) info.GetValue(fields[49] .Name, fields[49] .FieldType);
			if (fields[50] .FieldType.IsSerializable)
			ssStudentCatMathShortTermUpdatedAt = (DateTime) info.GetValue(fields[50] .Name, fields[50] .FieldType);
			if (fields[51] .FieldType.IsSerializable)
			ssStudentCatMathOverallLastUpdatedBy = (string) info.GetValue(fields[51] .Name, fields[51] .FieldType);
			if (fields[52] .FieldType.IsSerializable)
			ssStudentCatMathOverallUpdatedAt = (DateTime) info.GetValue(fields[52] .Name, fields[52] .FieldType);
			if (fields[53] .FieldType.IsSerializable)
			ssStudentCatEngShortTermLastUpdatedBy = (string) info.GetValue(fields[53] .Name, fields[53] .FieldType);
			if (fields[54] .FieldType.IsSerializable)
			ssStudentCatEngShortTermUpdatedAt = (DateTime) info.GetValue(fields[54] .Name, fields[54] .FieldType);
			if (fields[55] .FieldType.IsSerializable)
			ssStudentCatEngOverallLastUpdatedBy = (string) info.GetValue(fields[55] .Name, fields[55] .FieldType);
			if (fields[56] .FieldType.IsSerializable)
			ssStudentCatEngOverallUpdatedAt = (DateTime) info.GetValue(fields[56] .Name, fields[56] .FieldType);
			if (fields[57] .FieldType.IsSerializable)
			ssStudentCatMLWShortTermLastUpdatedBy = (string) info.GetValue(fields[57] .Name, fields[57] .FieldType);
			if (fields[58] .FieldType.IsSerializable)
			ssStudentCatMLWShortTermUpdatedAt = (DateTime) info.GetValue(fields[58] .Name, fields[58] .FieldType);
			if (fields[59] .FieldType.IsSerializable)
			ssStudentCatMLWOverallLastUpdatedBy = (string) info.GetValue(fields[59] .Name, fields[59] .FieldType);
			if (fields[60] .FieldType.IsSerializable)
			ssStudentCatMLWOverallUpdatedAt = (DateTime) info.GetValue(fields[60] .Name, fields[60] .FieldType);
			if (fields[61] .FieldType.IsSerializable)
			ssEnrolmentStatus = (string) info.GetValue(fields[61] .Name, fields[61] .FieldType);
			if (fields[62] .FieldType.IsSerializable)
			ssNotesNr = (int) info.GetValue(fields[62] .Name, fields[62] .FieldType);
			if (fields[63] .FieldType.IsSerializable)
			ssIsSessionReviewed = (bool) info.GetValue(fields[63] .Name, fields[63] .FieldType);
			if (fields[64] .FieldType.IsSerializable)
			ssIsMathExempt = (bool) info.GetValue(fields[64] .Name, fields[64] .FieldType);
			if (fields[65] .FieldType.IsSerializable)
			ssIsEnglishExempt = (bool) info.GetValue(fields[65] .Name, fields[65] .FieldType);
			if (fields[66] .FieldType.IsSerializable)
			ssHasCurrentActiveEnrolment = (bool) info.GetValue(fields[66] .Name, fields[66] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STStaffViewRecordStructure Duplicate() {
			STStaffViewRecordStructure t;
			t.ssStudentReference = this.ssStudentReference;
			t.ssForenames = this.ssForenames;
			t.ssSurname = this.ssSurname;
			t.ssMainOfferingName = this.ssMainOfferingName;
			t.ssStudentPhotoURL = this.ssStudentPhotoURL;
			t.ssDisability = this.ssDisability;
			t.ssLearningDifficulty = this.ssLearningDifficulty;
			t.ssStaffStudentFavouriteId = this.ssStaffStudentFavouriteId;
			t.ssStudentRAG = this.ssStudentRAG;
			t.ssStudentRAGUpdateAt = this.ssStudentRAGUpdateAt;
			t.ssStudentRAGUUpdatedBy = this.ssStudentRAGUUpdatedBy;
			t.ssLastWeekPunctuality = this.ssLastWeekPunctuality;
			t.ssOverallPunctuality = this.ssOverallPunctuality;
			t.ssLastWeekAttendance = this.ssLastWeekAttendance;
			t.ssOverallAttendance = this.ssOverallAttendance;
			t.ssCauseOfConcernRAG = this.ssCauseOfConcernRAG;
			t.ssCauseOfConcernNumber = this.ssCauseOfConcernNumber;
			t.ssSafeguardIdList = this.ssSafeguardIdList;
			t.ssSupportIdList = this.ssSupportIdList;
			t.ssRewardsGoldNumber = this.ssRewardsGoldNumber;
			t.ssRewardsGreenNumber = this.ssRewardsGreenNumber;
			t.ssVocPeriodRAG = this.ssVocPeriodRAG;
			t.ssVocOverallRAG = this.ssVocOverallRAG;
			t.ssVocCompletedUnits = this.ssVocCompletedUnits;
			t.ssVocRegisteredUnits = this.ssVocRegisteredUnits;
			t.ssMathPeriodRAG = this.ssMathPeriodRAG;
			t.ssMathOverallRAG = this.ssMathOverallRAG;
			t.ssMathCompletedUnits = this.ssMathCompletedUnits;
			t.ssMathRegisteredUnits = this.ssMathRegisteredUnits;
			t.ssEngPeriodRAG = this.ssEngPeriodRAG;
			t.ssEngOverallRAG = this.ssEngOverallRAG;
			t.ssEngCompletedUnits = this.ssEngCompletedUnits;
			t.ssEngRegisteredUnits = this.ssEngRegisteredUnits;
			t.ssMLWPeriodRAG = this.ssMLWPeriodRAG;
			t.ssMLWOverallRAG = this.ssMLWOverallRAG;
			t.ssMLWCompletedUnits = this.ssMLWCompletedUnits;
			t.ssMLWRegisteredUnits = this.ssMLWRegisteredUnits;
			t.ssRewardType = this.ssRewardType;
			t.ssDescriptionType = this.ssDescriptionType;
			t.ssDisciplinaryTypeNumber = this.ssDisciplinaryTypeNumber;
			t.ssDisciplinaryType = this.ssDisciplinaryType;
			t.ssFinancial = this.ssFinancial;
			t.ssTransport = this.ssTransport;
			t.ssAcademic = this.ssAcademic;
			t.ssPersonal = this.ssPersonal;
			t.ssStudentCatVocShortTermLastUpdatedBy = this.ssStudentCatVocShortTermLastUpdatedBy;
			t.ssStudentCatVocShortTermUpdatedAt = this.ssStudentCatVocShortTermUpdatedAt;
			t.ssStudentCatVocOverallLastUpdatedBy = this.ssStudentCatVocOverallLastUpdatedBy;
			t.ssStudentCatVocOverallUpdatedAt = this.ssStudentCatVocOverallUpdatedAt;
			t.ssStudentCatMathShortTermLastUpdatedBy = this.ssStudentCatMathShortTermLastUpdatedBy;
			t.ssStudentCatMathShortTermUpdatedAt = this.ssStudentCatMathShortTermUpdatedAt;
			t.ssStudentCatMathOverallLastUpdatedBy = this.ssStudentCatMathOverallLastUpdatedBy;
			t.ssStudentCatMathOverallUpdatedAt = this.ssStudentCatMathOverallUpdatedAt;
			t.ssStudentCatEngShortTermLastUpdatedBy = this.ssStudentCatEngShortTermLastUpdatedBy;
			t.ssStudentCatEngShortTermUpdatedAt = this.ssStudentCatEngShortTermUpdatedAt;
			t.ssStudentCatEngOverallLastUpdatedBy = this.ssStudentCatEngOverallLastUpdatedBy;
			t.ssStudentCatEngOverallUpdatedAt = this.ssStudentCatEngOverallUpdatedAt;
			t.ssStudentCatMLWShortTermLastUpdatedBy = this.ssStudentCatMLWShortTermLastUpdatedBy;
			t.ssStudentCatMLWShortTermUpdatedAt = this.ssStudentCatMLWShortTermUpdatedAt;
			t.ssStudentCatMLWOverallLastUpdatedBy = this.ssStudentCatMLWOverallLastUpdatedBy;
			t.ssStudentCatMLWOverallUpdatedAt = this.ssStudentCatMLWOverallUpdatedAt;
			t.ssEnrolmentStatus = this.ssEnrolmentStatus;
			t.ssNotesNr = this.ssNotesNr;
			t.ssIsSessionReviewed = this.ssIsSessionReviewed;
			t.ssIsMathExempt = this.ssIsMathExempt;
			t.ssIsEnglishExempt = this.ssIsEnglishExempt;
			t.ssHasCurrentActiveEnrolment = this.ssHasCurrentActiveEnrolment;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Forenames")) VarValue.AppendAttribute(recordElem, "Forenames", ssForenames, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Forenames");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Surname")) VarValue.AppendAttribute(recordElem, "Surname", ssSurname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Surname");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MainOfferingName")) VarValue.AppendAttribute(recordElem, "MainOfferingName", ssMainOfferingName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MainOfferingName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentPhotoURL")) VarValue.AppendAttribute(recordElem, "StudentPhotoURL", ssStudentPhotoURL, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentPhotoURL");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Disability")) VarValue.AppendAttribute(recordElem, "Disability", ssDisability, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Disability");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearningDifficulty")) VarValue.AppendAttribute(recordElem, "LearningDifficulty", ssLearningDifficulty, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LearningDifficulty");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StaffStudentFavouriteId")) VarValue.AppendAttribute(recordElem, "StaffStudentFavouriteId", ssStaffStudentFavouriteId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StaffStudentFavouriteId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentRAG")) VarValue.AppendAttribute(recordElem, "StudentRAG", ssStudentRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentRAGUpdateAt")) VarValue.AppendAttribute(recordElem, "StudentRAGUpdateAt", ssStudentRAGUpdateAt, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "StudentRAGUpdateAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentRAGUUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentRAGUUpdatedBy", ssStudentRAGUUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentRAGUUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekPunctuality")) VarValue.AppendAttribute(recordElem, "LastWeekPunctuality", ssLastWeekPunctuality, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekPunctuality");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallPunctuality")) VarValue.AppendAttribute(recordElem, "OverallPunctuality", ssOverallPunctuality, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallPunctuality");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeekAttendance")) VarValue.AppendAttribute(recordElem, "LastWeekAttendance", ssLastWeekAttendance, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeekAttendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OverallAttendance")) VarValue.AppendAttribute(recordElem, "OverallAttendance", ssOverallAttendance, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OverallAttendance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CauseOfConcernRAG")) VarValue.AppendAttribute(recordElem, "CauseOfConcernRAG", ssCauseOfConcernRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CauseOfConcernRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CauseOfConcernNumber")) VarValue.AppendAttribute(recordElem, "CauseOfConcernNumber", ssCauseOfConcernNumber, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CauseOfConcernNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardIdList")) VarValue.AppendAttribute(recordElem, "SafeguardIdList", ssSafeguardIdList, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardIdList");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportIdList")) VarValue.AppendAttribute(recordElem, "SupportIdList", ssSupportIdList, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SupportIdList");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RewardsGoldNumber")) VarValue.AppendAttribute(recordElem, "RewardsGoldNumber", ssRewardsGoldNumber, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "RewardsGoldNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RewardsGreenNumber")) VarValue.AppendAttribute(recordElem, "RewardsGreenNumber", ssRewardsGreenNumber, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "RewardsGreenNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VocPeriodRAG")) VarValue.AppendAttribute(recordElem, "VocPeriodRAG", ssVocPeriodRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "VocPeriodRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VocOverallRAG")) VarValue.AppendAttribute(recordElem, "VocOverallRAG", ssVocOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "VocOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VocCompletedUnits")) VarValue.AppendAttribute(recordElem, "VocCompletedUnits", ssVocCompletedUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "VocCompletedUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VocRegisteredUnits")) VarValue.AppendAttribute(recordElem, "VocRegisteredUnits", ssVocRegisteredUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "VocRegisteredUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathPeriodRAG")) VarValue.AppendAttribute(recordElem, "MathPeriodRAG", ssMathPeriodRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MathPeriodRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathOverallRAG")) VarValue.AppendAttribute(recordElem, "MathOverallRAG", ssMathOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MathOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathCompletedUnits")) VarValue.AppendAttribute(recordElem, "MathCompletedUnits", ssMathCompletedUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "MathCompletedUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathRegisteredUnits")) VarValue.AppendAttribute(recordElem, "MathRegisteredUnits", ssMathRegisteredUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "MathRegisteredUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EngPeriodRAG")) VarValue.AppendAttribute(recordElem, "EngPeriodRAG", ssEngPeriodRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EngPeriodRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EngOverallRAG")) VarValue.AppendAttribute(recordElem, "EngOverallRAG", ssEngOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EngOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EngCompletedUnits")) VarValue.AppendAttribute(recordElem, "EngCompletedUnits", ssEngCompletedUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "EngCompletedUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EngRegisteredUnits")) VarValue.AppendAttribute(recordElem, "EngRegisteredUnits", ssEngRegisteredUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "EngRegisteredUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWPeriodRAG")) VarValue.AppendAttribute(recordElem, "MLWPeriodRAG", ssMLWPeriodRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MLWPeriodRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWOverallRAG")) VarValue.AppendAttribute(recordElem, "MLWOverallRAG", ssMLWOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MLWOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWCompletedUnits")) VarValue.AppendAttribute(recordElem, "MLWCompletedUnits", ssMLWCompletedUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "MLWCompletedUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWRegisteredUnits")) VarValue.AppendAttribute(recordElem, "MLWRegisteredUnits", ssMLWRegisteredUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "MLWRegisteredUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RewardType")) VarValue.AppendAttribute(recordElem, "RewardType", ssRewardType, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "RewardType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DescriptionType")) VarValue.AppendAttribute(recordElem, "DescriptionType", ssDescriptionType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DescriptionType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DisciplinaryTypeNumber")) VarValue.AppendAttribute(recordElem, "DisciplinaryTypeNumber", ssDisciplinaryTypeNumber, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "DisciplinaryTypeNumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DisciplinaryType")) VarValue.AppendAttribute(recordElem, "DisciplinaryType", ssDisciplinaryType, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "DisciplinaryType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Financial")) VarValue.AppendAttribute(recordElem, "Financial", ssFinancial, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Financial");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Transport")) VarValue.AppendAttribute(recordElem, "Transport", ssTransport, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Transport");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Academic")) VarValue.AppendAttribute(recordElem, "Academic", ssAcademic, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Academic");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Personal")) VarValue.AppendAttribute(recordElem, "Personal", ssPersonal, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Personal");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatVocShortTermLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatVocShortTermLastUpdatedBy", ssStudentCatVocShortTermLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatVocShortTermLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatVocShortTermUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatVocShortTermUpdatedAt", ssStudentCatVocShortTermUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatVocShortTermUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatVocOverallLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatVocOverallLastUpdatedBy", ssStudentCatVocOverallLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatVocOverallLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatVocOverallUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatVocOverallUpdatedAt", ssStudentCatVocOverallUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatVocOverallUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMathShortTermLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatMathShortTermLastUpdatedBy", ssStudentCatMathShortTermLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMathShortTermLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMathShortTermUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatMathShortTermUpdatedAt", ssStudentCatMathShortTermUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMathShortTermUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMathOverallLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatMathOverallLastUpdatedBy", ssStudentCatMathOverallLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMathOverallLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMathOverallUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatMathOverallUpdatedAt", ssStudentCatMathOverallUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMathOverallUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatEngShortTermLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatEngShortTermLastUpdatedBy", ssStudentCatEngShortTermLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatEngShortTermLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatEngShortTermUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatEngShortTermUpdatedAt", ssStudentCatEngShortTermUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatEngShortTermUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatEngOverallLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatEngOverallLastUpdatedBy", ssStudentCatEngOverallLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatEngOverallLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatEngOverallUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatEngOverallUpdatedAt", ssStudentCatEngOverallUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatEngOverallUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMLWShortTermLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatMLWShortTermLastUpdatedBy", ssStudentCatMLWShortTermLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMLWShortTermLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMLWShortTermUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatMLWShortTermUpdatedAt", ssStudentCatMLWShortTermUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMLWShortTermUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMLWOverallLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatMLWOverallLastUpdatedBy", ssStudentCatMLWOverallLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMLWOverallLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMLWOverallUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatMLWOverallUpdatedAt", ssStudentCatMLWOverallUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMLWOverallUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EnrolmentStatus")) VarValue.AppendAttribute(recordElem, "EnrolmentStatus", ssEnrolmentStatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EnrolmentStatus");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NotesNr")) VarValue.AppendAttribute(recordElem, "NotesNr", ssNotesNr, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "NotesNr");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsSessionReviewed")) VarValue.AppendAttribute(recordElem, "IsSessionReviewed", ssIsSessionReviewed, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsSessionReviewed");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsMathExempt")) VarValue.AppendAttribute(recordElem, "IsMathExempt", ssIsMathExempt, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsMathExempt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsEnglishExempt")) VarValue.AppendAttribute(recordElem, "IsEnglishExempt", ssIsEnglishExempt, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsEnglishExempt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HasCurrentActiveEnrolment")) VarValue.AppendAttribute(recordElem, "HasCurrentActiveEnrolment", ssHasCurrentActiveEnrolment, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "HasCurrentActiveEnrolment");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "forenames") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Forenames")) variable.Value = ssForenames; else variable.Optimized = true;
			} else if (head == "surname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Surname")) variable.Value = ssSurname; else variable.Optimized = true;
			} else if (head == "mainofferingname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MainOfferingName")) variable.Value = ssMainOfferingName; else variable.Optimized = true;
			} else if (head == "studentphotourl") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentPhotoURL")) variable.Value = ssStudentPhotoURL; else variable.Optimized = true;
			} else if (head == "disability") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Disability")) variable.Value = ssDisability; else variable.Optimized = true;
			} else if (head == "learningdifficulty") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningDifficulty")) variable.Value = ssLearningDifficulty; else variable.Optimized = true;
			} else if (head == "staffstudentfavouriteid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffStudentFavouriteId")) variable.Value = ssStaffStudentFavouriteId; else variable.Optimized = true;
			} else if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssStudentRAG; else variable.Optimized = true;
			} else if (head == "studentragupdateat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAGUpdateAt")) variable.Value = ssStudentRAGUpdateAt; else variable.Optimized = true;
			} else if (head == "studentraguupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAGUUpdatedBy")) variable.Value = ssStudentRAGUUpdatedBy; else variable.Optimized = true;
			} else if (head == "lastweekpunctuality") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekPunctuality")) variable.Value = ssLastWeekPunctuality; else variable.Optimized = true;
			} else if (head == "overallpunctuality") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallPunctuality")) variable.Value = ssOverallPunctuality; else variable.Optimized = true;
			} else if (head == "lastweekattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeekAttendance")) variable.Value = ssLastWeekAttendance; else variable.Optimized = true;
			} else if (head == "overallattendance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OverallAttendance")) variable.Value = ssOverallAttendance; else variable.Optimized = true;
			} else if (head == "causeofconcernrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernRAG")) variable.Value = ssCauseOfConcernRAG; else variable.Optimized = true;
			} else if (head == "causeofconcernnumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseOfConcernNumber")) variable.Value = ssCauseOfConcernNumber; else variable.Optimized = true;
			} else if (head == "safeguardidlist") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardIdList")) variable.Value = ssSafeguardIdList; else variable.Optimized = true;
			} else if (head == "supportidlist") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportIdList")) variable.Value = ssSupportIdList; else variable.Optimized = true;
			} else if (head == "rewardsgoldnumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RewardsGoldNumber")) variable.Value = ssRewardsGoldNumber; else variable.Optimized = true;
			} else if (head == "rewardsgreennumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RewardsGreenNumber")) variable.Value = ssRewardsGreenNumber; else variable.Optimized = true;
			} else if (head == "vocperiodrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VocPeriodRAG")) variable.Value = ssVocPeriodRAG; else variable.Optimized = true;
			} else if (head == "vocoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VocOverallRAG")) variable.Value = ssVocOverallRAG; else variable.Optimized = true;
			} else if (head == "voccompletedunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VocCompletedUnits")) variable.Value = ssVocCompletedUnits; else variable.Optimized = true;
			} else if (head == "vocregisteredunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VocRegisteredUnits")) variable.Value = ssVocRegisteredUnits; else variable.Optimized = true;
			} else if (head == "mathperiodrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathPeriodRAG")) variable.Value = ssMathPeriodRAG; else variable.Optimized = true;
			} else if (head == "mathoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathOverallRAG")) variable.Value = ssMathOverallRAG; else variable.Optimized = true;
			} else if (head == "mathcompletedunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathCompletedUnits")) variable.Value = ssMathCompletedUnits; else variable.Optimized = true;
			} else if (head == "mathregisteredunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathRegisteredUnits")) variable.Value = ssMathRegisteredUnits; else variable.Optimized = true;
			} else if (head == "engperiodrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EngPeriodRAG")) variable.Value = ssEngPeriodRAG; else variable.Optimized = true;
			} else if (head == "engoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EngOverallRAG")) variable.Value = ssEngOverallRAG; else variable.Optimized = true;
			} else if (head == "engcompletedunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EngCompletedUnits")) variable.Value = ssEngCompletedUnits; else variable.Optimized = true;
			} else if (head == "engregisteredunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EngRegisteredUnits")) variable.Value = ssEngRegisteredUnits; else variable.Optimized = true;
			} else if (head == "mlwperiodrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWPeriodRAG")) variable.Value = ssMLWPeriodRAG; else variable.Optimized = true;
			} else if (head == "mlwoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWOverallRAG")) variable.Value = ssMLWOverallRAG; else variable.Optimized = true;
			} else if (head == "mlwcompletedunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWCompletedUnits")) variable.Value = ssMLWCompletedUnits; else variable.Optimized = true;
			} else if (head == "mlwregisteredunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWRegisteredUnits")) variable.Value = ssMLWRegisteredUnits; else variable.Optimized = true;
			} else if (head == "rewardtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RewardType")) variable.Value = ssRewardType; else variable.Optimized = true;
			} else if (head == "descriptiontype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DescriptionType")) variable.Value = ssDescriptionType; else variable.Optimized = true;
			} else if (head == "disciplinarytypenumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DisciplinaryTypeNumber")) variable.Value = ssDisciplinaryTypeNumber; else variable.Optimized = true;
			} else if (head == "disciplinarytype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DisciplinaryType")) variable.Value = ssDisciplinaryType; else variable.Optimized = true;
			} else if (head == "financial") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Financial")) variable.Value = ssFinancial; else variable.Optimized = true;
			} else if (head == "transport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Transport")) variable.Value = ssTransport; else variable.Optimized = true;
			} else if (head == "academic") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Academic")) variable.Value = ssAcademic; else variable.Optimized = true;
			} else if (head == "personal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Personal")) variable.Value = ssPersonal; else variable.Optimized = true;
			} else if (head == "studentcatvocshorttermlastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatVocShortTermLastUpdatedBy")) variable.Value = ssStudentCatVocShortTermLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatvocshorttermupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatVocShortTermUpdatedAt")) variable.Value = ssStudentCatVocShortTermUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatvocoveralllastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatVocOverallLastUpdatedBy")) variable.Value = ssStudentCatVocOverallLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatvocoverallupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatVocOverallUpdatedAt")) variable.Value = ssStudentCatVocOverallUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatmathshorttermlastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMathShortTermLastUpdatedBy")) variable.Value = ssStudentCatMathShortTermLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatmathshorttermupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMathShortTermUpdatedAt")) variable.Value = ssStudentCatMathShortTermUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatmathoveralllastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMathOverallLastUpdatedBy")) variable.Value = ssStudentCatMathOverallLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatmathoverallupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMathOverallUpdatedAt")) variable.Value = ssStudentCatMathOverallUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatengshorttermlastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatEngShortTermLastUpdatedBy")) variable.Value = ssStudentCatEngShortTermLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatengshorttermupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatEngShortTermUpdatedAt")) variable.Value = ssStudentCatEngShortTermUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatengoveralllastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatEngOverallLastUpdatedBy")) variable.Value = ssStudentCatEngOverallLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatengoverallupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatEngOverallUpdatedAt")) variable.Value = ssStudentCatEngOverallUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatmlwshorttermlastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMLWShortTermLastUpdatedBy")) variable.Value = ssStudentCatMLWShortTermLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatmlwshorttermupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMLWShortTermUpdatedAt")) variable.Value = ssStudentCatMLWShortTermUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatmlwoveralllastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMLWOverallLastUpdatedBy")) variable.Value = ssStudentCatMLWOverallLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatmlwoverallupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMLWOverallUpdatedAt")) variable.Value = ssStudentCatMLWOverallUpdatedAt; else variable.Optimized = true;
			} else if (head == "enrolmentstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnrolmentStatus")) variable.Value = ssEnrolmentStatus; else variable.Optimized = true;
			} else if (head == "notesnr") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NotesNr")) variable.Value = ssNotesNr; else variable.Optimized = true;
			} else if (head == "issessionreviewed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsSessionReviewed")) variable.Value = ssIsSessionReviewed; else variable.Optimized = true;
			} else if (head == "ismathexempt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsMathExempt")) variable.Value = ssIsMathExempt; else variable.Optimized = true;
			} else if (head == "isenglishexempt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsEnglishExempt")) variable.Value = ssIsEnglishExempt; else variable.Optimized = true;
			} else if (head == "hascurrentactiveenrolment") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HasCurrentActiveEnrolment")) variable.Value = ssHasCurrentActiveEnrolment; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdForenames) {
				return ssForenames;
			} else if (key == IdSurname) {
				return ssSurname;
			} else if (key == IdMainOfferingName) {
				return ssMainOfferingName;
			} else if (key == IdStudentPhotoURL) {
				return ssStudentPhotoURL;
			} else if (key == IdDisability) {
				return ssDisability;
			} else if (key == IdLearningDifficulty) {
				return ssLearningDifficulty;
			} else if (key == IdStaffStudentFavouriteId) {
				return ssStaffStudentFavouriteId;
			} else if (key == IdStudentRAG) {
				return ssStudentRAG;
			} else if (key == IdStudentRAGUpdateAt) {
				return ssStudentRAGUpdateAt;
			} else if (key == IdStudentRAGUUpdatedBy) {
				return ssStudentRAGUUpdatedBy;
			} else if (key == IdLastWeekPunctuality) {
				return ssLastWeekPunctuality;
			} else if (key == IdOverallPunctuality) {
				return ssOverallPunctuality;
			} else if (key == IdLastWeekAttendance) {
				return ssLastWeekAttendance;
			} else if (key == IdOverallAttendance) {
				return ssOverallAttendance;
			} else if (key == IdCauseOfConcernRAG) {
				return ssCauseOfConcernRAG;
			} else if (key == IdCauseOfConcernNumber) {
				return ssCauseOfConcernNumber;
			} else if (key == IdSafeguardIdList) {
				return ssSafeguardIdList;
			} else if (key == IdSupportIdList) {
				return ssSupportIdList;
			} else if (key == IdRewardsGoldNumber) {
				return ssRewardsGoldNumber;
			} else if (key == IdRewardsGreenNumber) {
				return ssRewardsGreenNumber;
			} else if (key == IdVocPeriodRAG) {
				return ssVocPeriodRAG;
			} else if (key == IdVocOverallRAG) {
				return ssVocOverallRAG;
			} else if (key == IdVocCompletedUnits) {
				return ssVocCompletedUnits;
			} else if (key == IdVocRegisteredUnits) {
				return ssVocRegisteredUnits;
			} else if (key == IdMathPeriodRAG) {
				return ssMathPeriodRAG;
			} else if (key == IdMathOverallRAG) {
				return ssMathOverallRAG;
			} else if (key == IdMathCompletedUnits) {
				return ssMathCompletedUnits;
			} else if (key == IdMathRegisteredUnits) {
				return ssMathRegisteredUnits;
			} else if (key == IdEngPeriodRAG) {
				return ssEngPeriodRAG;
			} else if (key == IdEngOverallRAG) {
				return ssEngOverallRAG;
			} else if (key == IdEngCompletedUnits) {
				return ssEngCompletedUnits;
			} else if (key == IdEngRegisteredUnits) {
				return ssEngRegisteredUnits;
			} else if (key == IdMLWPeriodRAG) {
				return ssMLWPeriodRAG;
			} else if (key == IdMLWOverallRAG) {
				return ssMLWOverallRAG;
			} else if (key == IdMLWCompletedUnits) {
				return ssMLWCompletedUnits;
			} else if (key == IdMLWRegisteredUnits) {
				return ssMLWRegisteredUnits;
			} else if (key == IdRewardType) {
				return ssRewardType;
			} else if (key == IdDescriptionType) {
				return ssDescriptionType;
			} else if (key == IdDisciplinaryTypeNumber) {
				return ssDisciplinaryTypeNumber;
			} else if (key == IdDisciplinaryType) {
				return ssDisciplinaryType;
			} else if (key == IdFinancial) {
				return ssFinancial;
			} else if (key == IdTransport) {
				return ssTransport;
			} else if (key == IdAcademic) {
				return ssAcademic;
			} else if (key == IdPersonal) {
				return ssPersonal;
			} else if (key == IdStudentCatVocShortTermLastUpdatedBy) {
				return ssStudentCatVocShortTermLastUpdatedBy;
			} else if (key == IdStudentCatVocShortTermUpdatedAt) {
				return ssStudentCatVocShortTermUpdatedAt;
			} else if (key == IdStudentCatVocOverallLastUpdatedBy) {
				return ssStudentCatVocOverallLastUpdatedBy;
			} else if (key == IdStudentCatVocOverallUpdatedAt) {
				return ssStudentCatVocOverallUpdatedAt;
			} else if (key == IdStudentCatMathShortTermLastUpdatedBy) {
				return ssStudentCatMathShortTermLastUpdatedBy;
			} else if (key == IdStudentCatMathShortTermUpdatedAt) {
				return ssStudentCatMathShortTermUpdatedAt;
			} else if (key == IdStudentCatMathOverallLastUpdatedBy) {
				return ssStudentCatMathOverallLastUpdatedBy;
			} else if (key == IdStudentCatMathOverallUpdatedAt) {
				return ssStudentCatMathOverallUpdatedAt;
			} else if (key == IdStudentCatEngShortTermLastUpdatedBy) {
				return ssStudentCatEngShortTermLastUpdatedBy;
			} else if (key == IdStudentCatEngShortTermUpdatedAt) {
				return ssStudentCatEngShortTermUpdatedAt;
			} else if (key == IdStudentCatEngOverallLastUpdatedBy) {
				return ssStudentCatEngOverallLastUpdatedBy;
			} else if (key == IdStudentCatEngOverallUpdatedAt) {
				return ssStudentCatEngOverallUpdatedAt;
			} else if (key == IdStudentCatMLWShortTermLastUpdatedBy) {
				return ssStudentCatMLWShortTermLastUpdatedBy;
			} else if (key == IdStudentCatMLWShortTermUpdatedAt) {
				return ssStudentCatMLWShortTermUpdatedAt;
			} else if (key == IdStudentCatMLWOverallLastUpdatedBy) {
				return ssStudentCatMLWOverallLastUpdatedBy;
			} else if (key == IdStudentCatMLWOverallUpdatedAt) {
				return ssStudentCatMLWOverallUpdatedAt;
			} else if (key == IdEnrolmentStatus) {
				return ssEnrolmentStatus;
			} else if (key == IdNotesNr) {
				return ssNotesNr;
			} else if (key == IdIsSessionReviewed) {
				return ssIsSessionReviewed;
			} else if (key == IdIsMathExempt) {
				return ssIsMathExempt;
			} else if (key == IdIsEnglishExempt) {
				return ssIsEnglishExempt;
			} else if (key == IdHasCurrentActiveEnrolment) {
				return ssHasCurrentActiveEnrolment;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ssForenames = (string) other.AttributeGet(IdForenames);
			ssSurname = (string) other.AttributeGet(IdSurname);
			ssMainOfferingName = (string) other.AttributeGet(IdMainOfferingName);
			ssStudentPhotoURL = (string) other.AttributeGet(IdStudentPhotoURL);
			ssDisability = (string) other.AttributeGet(IdDisability);
			ssLearningDifficulty = (string) other.AttributeGet(IdLearningDifficulty);
			ssStaffStudentFavouriteId = (int) other.AttributeGet(IdStaffStudentFavouriteId);
			ssStudentRAG = (string) other.AttributeGet(IdStudentRAG);
			ssStudentRAGUpdateAt = (DateTime) other.AttributeGet(IdStudentRAGUpdateAt);
			ssStudentRAGUUpdatedBy = (int) other.AttributeGet(IdStudentRAGUUpdatedBy);
			ssLastWeekPunctuality = (int) other.AttributeGet(IdLastWeekPunctuality);
			ssOverallPunctuality = (int) other.AttributeGet(IdOverallPunctuality);
			ssLastWeekAttendance = (int) other.AttributeGet(IdLastWeekAttendance);
			ssOverallAttendance = (int) other.AttributeGet(IdOverallAttendance);
			ssCauseOfConcernRAG = (string) other.AttributeGet(IdCauseOfConcernRAG);
			ssCauseOfConcernNumber = (int) other.AttributeGet(IdCauseOfConcernNumber);
			ssSafeguardIdList = (string) other.AttributeGet(IdSafeguardIdList);
			ssSupportIdList = (string) other.AttributeGet(IdSupportIdList);
			ssRewardsGoldNumber = (int) other.AttributeGet(IdRewardsGoldNumber);
			ssRewardsGreenNumber = (int) other.AttributeGet(IdRewardsGreenNumber);
			ssVocPeriodRAG = (string) other.AttributeGet(IdVocPeriodRAG);
			ssVocOverallRAG = (string) other.AttributeGet(IdVocOverallRAG);
			ssVocCompletedUnits = (int) other.AttributeGet(IdVocCompletedUnits);
			ssVocRegisteredUnits = (int) other.AttributeGet(IdVocRegisteredUnits);
			ssMathPeriodRAG = (string) other.AttributeGet(IdMathPeriodRAG);
			ssMathOverallRAG = (string) other.AttributeGet(IdMathOverallRAG);
			ssMathCompletedUnits = (int) other.AttributeGet(IdMathCompletedUnits);
			ssMathRegisteredUnits = (int) other.AttributeGet(IdMathRegisteredUnits);
			ssEngPeriodRAG = (string) other.AttributeGet(IdEngPeriodRAG);
			ssEngOverallRAG = (string) other.AttributeGet(IdEngOverallRAG);
			ssEngCompletedUnits = (int) other.AttributeGet(IdEngCompletedUnits);
			ssEngRegisteredUnits = (int) other.AttributeGet(IdEngRegisteredUnits);
			ssMLWPeriodRAG = (string) other.AttributeGet(IdMLWPeriodRAG);
			ssMLWOverallRAG = (string) other.AttributeGet(IdMLWOverallRAG);
			ssMLWCompletedUnits = (int) other.AttributeGet(IdMLWCompletedUnits);
			ssMLWRegisteredUnits = (int) other.AttributeGet(IdMLWRegisteredUnits);
			ssRewardType = (bool) other.AttributeGet(IdRewardType);
			ssDescriptionType = (string) other.AttributeGet(IdDescriptionType);
			ssDisciplinaryTypeNumber = (int) other.AttributeGet(IdDisciplinaryTypeNumber);
			ssDisciplinaryType = (string) other.AttributeGet(IdDisciplinaryType);
			ssFinancial = (string) other.AttributeGet(IdFinancial);
			ssTransport = (string) other.AttributeGet(IdTransport);
			ssAcademic = (string) other.AttributeGet(IdAcademic);
			ssPersonal = (string) other.AttributeGet(IdPersonal);
			ssStudentCatVocShortTermLastUpdatedBy = (string) other.AttributeGet(IdStudentCatVocShortTermLastUpdatedBy);
			ssStudentCatVocShortTermUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatVocShortTermUpdatedAt);
			ssStudentCatVocOverallLastUpdatedBy = (string) other.AttributeGet(IdStudentCatVocOverallLastUpdatedBy);
			ssStudentCatVocOverallUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatVocOverallUpdatedAt);
			ssStudentCatMathShortTermLastUpdatedBy = (string) other.AttributeGet(IdStudentCatMathShortTermLastUpdatedBy);
			ssStudentCatMathShortTermUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatMathShortTermUpdatedAt);
			ssStudentCatMathOverallLastUpdatedBy = (string) other.AttributeGet(IdStudentCatMathOverallLastUpdatedBy);
			ssStudentCatMathOverallUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatMathOverallUpdatedAt);
			ssStudentCatEngShortTermLastUpdatedBy = (string) other.AttributeGet(IdStudentCatEngShortTermLastUpdatedBy);
			ssStudentCatEngShortTermUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatEngShortTermUpdatedAt);
			ssStudentCatEngOverallLastUpdatedBy = (string) other.AttributeGet(IdStudentCatEngOverallLastUpdatedBy);
			ssStudentCatEngOverallUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatEngOverallUpdatedAt);
			ssStudentCatMLWShortTermLastUpdatedBy = (string) other.AttributeGet(IdStudentCatMLWShortTermLastUpdatedBy);
			ssStudentCatMLWShortTermUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatMLWShortTermUpdatedAt);
			ssStudentCatMLWOverallLastUpdatedBy = (string) other.AttributeGet(IdStudentCatMLWOverallLastUpdatedBy);
			ssStudentCatMLWOverallUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatMLWOverallUpdatedAt);
			ssEnrolmentStatus = (string) other.AttributeGet(IdEnrolmentStatus);
			ssNotesNr = (int) other.AttributeGet(IdNotesNr);
			ssIsSessionReviewed = (bool) other.AttributeGet(IdIsSessionReviewed);
			ssIsMathExempt = (bool) other.AttributeGet(IdIsMathExempt);
			ssIsEnglishExempt = (bool) other.AttributeGet(IdIsEnglishExempt);
			ssHasCurrentActiveEnrolment = (bool) other.AttributeGet(IdHasCurrentActiveEnrolment);
		}
	} // STStaffViewRecordStructure
	/// <summary>
	/// Structure <code>RCStaffViewRecordRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffViewRecordRecord: ISerializable, ITypedRecord<RCStaffViewRecordRecord> {
		private static readonly GlobalObjectKey IdStaffViewRecord = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*u0K+xmUYFUqNRf6tjAVraQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StaffViewRecord")]
		public STStaffViewRecordStructure ssSTStaffViewRecord;


		public static implicit operator STStaffViewRecordStructure(RCStaffViewRecordRecord r) {
			return r.ssSTStaffViewRecord;
		}

		public static implicit operator RCStaffViewRecordRecord(STStaffViewRecordStructure r) {
			RCStaffViewRecordRecord res = new RCStaffViewRecordRecord(null);
			res.ssSTStaffViewRecord = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCStaffViewRecordRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTStaffViewRecord = new STStaffViewRecordStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTStaffViewRecord.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTStaffViewRecord.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffViewRecordRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffViewRecordRecord a, RCStaffViewRecordRecord b) {
			if (a.ssSTStaffViewRecord != b.ssSTStaffViewRecord) return false;
			return true;
		}

		public static bool operator != (RCStaffViewRecordRecord a, RCStaffViewRecordRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffViewRecordRecord)) return false;
			return (this == (RCStaffViewRecordRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTStaffViewRecord.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffViewRecordRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTStaffViewRecord = new STStaffViewRecordStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTStaffViewRecord = (STStaffViewRecordStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTStaffViewRecord.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTStaffViewRecord.InternalRecursiveSave();
		}


		public RCStaffViewRecordRecord Duplicate() {
			RCStaffViewRecordRecord t;
			t.ssSTStaffViewRecord = (STStaffViewRecordStructure) this.ssSTStaffViewRecord.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTStaffViewRecord.ToXml(this, recordElem, "StaffViewRecord", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staffviewrecord") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffViewRecord")) variable.Value = ssSTStaffViewRecord; else variable.Optimized = true;
				variable.SetFieldName("staffviewrecord");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaffViewRecord) {
				return ssSTStaffViewRecord;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTStaffViewRecord.FillFromOther((IRecord) other.AttributeGet(IdStaffViewRecord));
		}
	} // RCStaffViewRecordRecord
	/// <summary>
	/// RecordList type <code>RLStaffViewRecordRecordList</code> that represents a record list of
	///  <code>StaffViewRecord</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffViewRecordRecordList: GenericRecordList<RCStaffViewRecordRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffViewRecordRecord GetElementDefaultValue() {
			return new RCStaffViewRecordRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffViewRecordRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffViewRecordRecordList recordlist, Func<RCStaffViewRecordRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffViewRecordRecordList ToList<T>(T[] array, Func <T, RCStaffViewRecordRecord> converter) {
			RLStaffViewRecordRecordList result = new RLStaffViewRecordRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffViewRecordRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffViewRecordRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffViewRecordRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffViewRecordRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffViewRecordRecord> NewList() {
			return new RLStaffViewRecordRecordList();
		}


	} // RLStaffViewRecordRecordList
	/// <summary>
	/// RecordList type <code>RLStaffViewRecordList</code> that represents a record list of
	///  <code>StudentIdentifier, UserIdentifier, Text, Text, Text, Text, Text, Text, Text, Text, Text
	/// , Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Date, Date, Date,
	///  Date, Date, Date, Date, Date, DateTime, Boolean, Boolean, Boolean, Boolean, Boolean, Integer
	/// , Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer,
	///  Integer, Integer, Integer, Integer, Integer, Integer, StaffStudentFavouriteIdentifier
	/// , RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier,
	///  RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier
	/// , RAGStatusIdentifier, RAGStatusIdentifier, DisciplinaryTypeIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffViewRecordList: GenericRecordList<STStaffViewRecordStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STStaffViewRecordStructure GetElementDefaultValue() {
			return new STStaffViewRecordStructure("");
		}

		public T[] ToArray<T>(Func<STStaffViewRecordStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffViewRecordList recordlist, Func<STStaffViewRecordStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffViewRecordList ToList<T>(T[] array, Func <T, STStaffViewRecordStructure> converter) {
			RLStaffViewRecordList result = new RLStaffViewRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffViewRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffViewRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffViewRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffViewRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STStaffViewRecordStructure> NewList() {
			return new RLStaffViewRecordList();
		}


	} // RLStaffViewRecordList
}

namespace ssCaseConferencing {
	[XmlType("StaffViewRecord")]
	public class WORCStaffViewRecordRecord {
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("Forenames")]
		public string varWSForenames;

		[System.Xml.Serialization.XmlElement("Surname")]
		public string varWSSurname;

		[System.Xml.Serialization.XmlElement("MainOfferingName")]
		public string varWSMainOfferingName;

		[System.Xml.Serialization.XmlElement("StudentPhotoURL")]
		public string varWSStudentPhotoURL;

		[System.Xml.Serialization.XmlElement("Disability")]
		public string varWSDisability;

		[System.Xml.Serialization.XmlElement("LearningDifficulty")]
		public string varWSLearningDifficulty;

		[System.Xml.Serialization.XmlElement("StaffStudentFavouriteId")]
		public int varWSStaffStudentFavouriteId;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public string varWSStudentRAG;

		[System.Xml.Serialization.XmlElement("StudentRAGUpdateAt")]
		public DateTime varWSStudentRAGUpdateAt;

		[System.Xml.Serialization.XmlElement("StudentRAGUUpdatedBy")]
		public int varWSStudentRAGUUpdatedBy;

		[System.Xml.Serialization.XmlElement("LastWeekPunctuality")]
		public int varWSLastWeekPunctuality;

		[System.Xml.Serialization.XmlElement("OverallPunctuality")]
		public int varWSOverallPunctuality;

		[System.Xml.Serialization.XmlElement("LastWeekAttendance")]
		public int varWSLastWeekAttendance;

		[System.Xml.Serialization.XmlElement("OverallAttendance")]
		public int varWSOverallAttendance;

		[System.Xml.Serialization.XmlElement("CauseOfConcernRAG")]
		public string varWSCauseOfConcernRAG;

		[System.Xml.Serialization.XmlElement("CauseOfConcernNumber")]
		public int varWSCauseOfConcernNumber;

		[System.Xml.Serialization.XmlElement("SafeguardIdList")]
		public string varWSSafeguardIdList;

		[System.Xml.Serialization.XmlElement("SupportIdList")]
		public string varWSSupportIdList;

		[System.Xml.Serialization.XmlElement("RewardsGoldNumber")]
		public int varWSRewardsGoldNumber;

		[System.Xml.Serialization.XmlElement("RewardsGreenNumber")]
		public int varWSRewardsGreenNumber;

		[System.Xml.Serialization.XmlElement("VocPeriodRAG")]
		public string varWSVocPeriodRAG;

		[System.Xml.Serialization.XmlElement("VocOverallRAG")]
		public string varWSVocOverallRAG;

		[System.Xml.Serialization.XmlElement("VocCompletedUnits")]
		public int varWSVocCompletedUnits;

		[System.Xml.Serialization.XmlElement("VocRegisteredUnits")]
		public int varWSVocRegisteredUnits;

		[System.Xml.Serialization.XmlElement("MathPeriodRAG")]
		public string varWSMathPeriodRAG;

		[System.Xml.Serialization.XmlElement("MathOverallRAG")]
		public string varWSMathOverallRAG;

		[System.Xml.Serialization.XmlElement("MathCompletedUnits")]
		public int varWSMathCompletedUnits;

		[System.Xml.Serialization.XmlElement("MathRegisteredUnits")]
		public int varWSMathRegisteredUnits;

		[System.Xml.Serialization.XmlElement("EngPeriodRAG")]
		public string varWSEngPeriodRAG;

		[System.Xml.Serialization.XmlElement("EngOverallRAG")]
		public string varWSEngOverallRAG;

		[System.Xml.Serialization.XmlElement("EngCompletedUnits")]
		public int varWSEngCompletedUnits;

		[System.Xml.Serialization.XmlElement("EngRegisteredUnits")]
		public int varWSEngRegisteredUnits;

		[System.Xml.Serialization.XmlElement("MLWPeriodRAG")]
		public string varWSMLWPeriodRAG;

		[System.Xml.Serialization.XmlElement("MLWOverallRAG")]
		public string varWSMLWOverallRAG;

		[System.Xml.Serialization.XmlElement("MLWCompletedUnits")]
		public int varWSMLWCompletedUnits;

		[System.Xml.Serialization.XmlElement("MLWRegisteredUnits")]
		public int varWSMLWRegisteredUnits;

		[System.Xml.Serialization.XmlElement("RewardType")]
		public bool varWSRewardType;

		[System.Xml.Serialization.XmlElement("DescriptionType")]
		public string varWSDescriptionType;

		[System.Xml.Serialization.XmlElement("DisciplinaryTypeNumber")]
		public int varWSDisciplinaryTypeNumber;

		[System.Xml.Serialization.XmlElement("DisciplinaryType")]
		public string varWSDisciplinaryType;

		[System.Xml.Serialization.XmlElement("Financial")]
		public string varWSFinancial;

		[System.Xml.Serialization.XmlElement("Transport")]
		public string varWSTransport;

		[System.Xml.Serialization.XmlElement("Academic")]
		public string varWSAcademic;

		[System.Xml.Serialization.XmlElement("Personal")]
		public string varWSPersonal;

		[System.Xml.Serialization.XmlElement("StudentCatVocShortTermLastUpdatedBy")]
		public string varWSStudentCatVocShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatVocShortTermUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatVocShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatVocOverallLastUpdatedBy")]
		public string varWSStudentCatVocOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatVocOverallUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatVocOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMathShortTermLastUpdatedBy")]
		public string varWSStudentCatMathShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMathShortTermUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatMathShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMathOverallLastUpdatedBy")]
		public string varWSStudentCatMathOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMathOverallUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatMathOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatEngShortTermLastUpdatedBy")]
		public string varWSStudentCatEngShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatEngShortTermUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatEngShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatEngOverallLastUpdatedBy")]
		public string varWSStudentCatEngOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatEngOverallUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatEngOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMLWShortTermLastUpdatedBy")]
		public string varWSStudentCatMLWShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMLWShortTermUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatMLWShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMLWOverallLastUpdatedBy")]
		public string varWSStudentCatMLWOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMLWOverallUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatMLWOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("EnrolmentStatus")]
		public string varWSEnrolmentStatus;

		[System.Xml.Serialization.XmlElement("NotesNr")]
		public int varWSNotesNr;

		[System.Xml.Serialization.XmlElement("IsSessionReviewed")]
		public bool varWSIsSessionReviewed;

		[System.Xml.Serialization.XmlElement("IsMathExempt")]
		public bool varWSIsMathExempt;

		[System.Xml.Serialization.XmlElement("IsEnglishExempt")]
		public bool varWSIsEnglishExempt;

		[System.Xml.Serialization.XmlElement("HasCurrentActiveEnrolment")]
		public bool varWSHasCurrentActiveEnrolment;

		public WORCStaffViewRecordRecord() {
			varWSStudentReference = (string) "";
			varWSForenames = (string) "";
			varWSSurname = (string) "";
			varWSMainOfferingName = (string) "";
			varWSStudentPhotoURL = (string) "";
			varWSDisability = (string) "";
			varWSLearningDifficulty = (string) "";
			varWSStaffStudentFavouriteId = (int) 0;
			varWSStudentRAG = (string) "";
			varWSStudentRAGUpdateAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentRAGUUpdatedBy = (int) 0;
			varWSLastWeekPunctuality = (int) 0;
			varWSOverallPunctuality = (int) 0;
			varWSLastWeekAttendance = (int) 0;
			varWSOverallAttendance = (int) 0;
			varWSCauseOfConcernRAG = (string) "";
			varWSCauseOfConcernNumber = (int) 0;
			varWSSafeguardIdList = (string) "";
			varWSSupportIdList = (string) "";
			varWSRewardsGoldNumber = (int) 0;
			varWSRewardsGreenNumber = (int) 0;
			varWSVocPeriodRAG = (string) "";
			varWSVocOverallRAG = (string) "";
			varWSVocCompletedUnits = (int) 0;
			varWSVocRegisteredUnits = (int) 0;
			varWSMathPeriodRAG = (string) "";
			varWSMathOverallRAG = (string) "";
			varWSMathCompletedUnits = (int) 0;
			varWSMathRegisteredUnits = (int) 0;
			varWSEngPeriodRAG = (string) "";
			varWSEngOverallRAG = (string) "";
			varWSEngCompletedUnits = (int) 0;
			varWSEngRegisteredUnits = (int) 0;
			varWSMLWPeriodRAG = (string) "";
			varWSMLWOverallRAG = (string) "";
			varWSMLWCompletedUnits = (int) 0;
			varWSMLWRegisteredUnits = (int) 0;
			varWSRewardType = (bool) false;
			varWSDescriptionType = (string) "";
			varWSDisciplinaryTypeNumber = (int) 0;
			varWSDisciplinaryType = (string) "";
			varWSFinancial = (string) "";
			varWSTransport = (string) "";
			varWSAcademic = (string) "";
			varWSPersonal = (string) "";
			varWSStudentCatVocShortTermLastUpdatedBy = (string) "";
			varWSStudentCatVocShortTermUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatVocOverallLastUpdatedBy = (string) "";
			varWSStudentCatVocOverallUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatMathShortTermLastUpdatedBy = (string) "";
			varWSStudentCatMathShortTermUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatMathOverallLastUpdatedBy = (string) "";
			varWSStudentCatMathOverallUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatEngShortTermLastUpdatedBy = (string) "";
			varWSStudentCatEngShortTermUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatEngOverallLastUpdatedBy = (string) "";
			varWSStudentCatEngOverallUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatMLWShortTermLastUpdatedBy = (string) "";
			varWSStudentCatMLWShortTermUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatMLWOverallLastUpdatedBy = (string) "";
			varWSStudentCatMLWOverallUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSEnrolmentStatus = (string) "";
			varWSNotesNr = (int) 0;
			varWSIsSessionReviewed = (bool) false;
			varWSIsMathExempt = (bool) false;
			varWSIsEnglishExempt = (bool) false;
			varWSHasCurrentActiveEnrolment = (bool) false;
		}

		public WORCStaffViewRecordRecord(STStaffViewRecordStructure r) {
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSForenames = BaseAppUtils.RemoveControlChars(r.ssForenames);
			varWSSurname = BaseAppUtils.RemoveControlChars(r.ssSurname);
			varWSMainOfferingName = BaseAppUtils.RemoveControlChars(r.ssMainOfferingName);
			varWSStudentPhotoURL = BaseAppUtils.RemoveControlChars(r.ssStudentPhotoURL);
			varWSDisability = BaseAppUtils.RemoveControlChars(r.ssDisability);
			varWSLearningDifficulty = BaseAppUtils.RemoveControlChars(r.ssLearningDifficulty);
			varWSStaffStudentFavouriteId = (int) r.ssStaffStudentFavouriteId;
			varWSStudentRAG = BaseAppUtils.RemoveControlChars(r.ssStudentRAG);
			varWSStudentRAGUpdateAt = (DateTime) r.ssStudentRAGUpdateAt;
			varWSStudentRAGUUpdatedBy = (int) r.ssStudentRAGUUpdatedBy;
			varWSLastWeekPunctuality = (int) r.ssLastWeekPunctuality;
			varWSOverallPunctuality = (int) r.ssOverallPunctuality;
			varWSLastWeekAttendance = (int) r.ssLastWeekAttendance;
			varWSOverallAttendance = (int) r.ssOverallAttendance;
			varWSCauseOfConcernRAG = BaseAppUtils.RemoveControlChars(r.ssCauseOfConcernRAG);
			varWSCauseOfConcernNumber = (int) r.ssCauseOfConcernNumber;
			varWSSafeguardIdList = BaseAppUtils.RemoveControlChars(r.ssSafeguardIdList);
			varWSSupportIdList = BaseAppUtils.RemoveControlChars(r.ssSupportIdList);
			varWSRewardsGoldNumber = (int) r.ssRewardsGoldNumber;
			varWSRewardsGreenNumber = (int) r.ssRewardsGreenNumber;
			varWSVocPeriodRAG = BaseAppUtils.RemoveControlChars(r.ssVocPeriodRAG);
			varWSVocOverallRAG = BaseAppUtils.RemoveControlChars(r.ssVocOverallRAG);
			varWSVocCompletedUnits = (int) r.ssVocCompletedUnits;
			varWSVocRegisteredUnits = (int) r.ssVocRegisteredUnits;
			varWSMathPeriodRAG = BaseAppUtils.RemoveControlChars(r.ssMathPeriodRAG);
			varWSMathOverallRAG = BaseAppUtils.RemoveControlChars(r.ssMathOverallRAG);
			varWSMathCompletedUnits = (int) r.ssMathCompletedUnits;
			varWSMathRegisteredUnits = (int) r.ssMathRegisteredUnits;
			varWSEngPeriodRAG = BaseAppUtils.RemoveControlChars(r.ssEngPeriodRAG);
			varWSEngOverallRAG = BaseAppUtils.RemoveControlChars(r.ssEngOverallRAG);
			varWSEngCompletedUnits = (int) r.ssEngCompletedUnits;
			varWSEngRegisteredUnits = (int) r.ssEngRegisteredUnits;
			varWSMLWPeriodRAG = BaseAppUtils.RemoveControlChars(r.ssMLWPeriodRAG);
			varWSMLWOverallRAG = BaseAppUtils.RemoveControlChars(r.ssMLWOverallRAG);
			varWSMLWCompletedUnits = (int) r.ssMLWCompletedUnits;
			varWSMLWRegisteredUnits = (int) r.ssMLWRegisteredUnits;
			varWSRewardType = (bool) r.ssRewardType;
			varWSDescriptionType = BaseAppUtils.RemoveControlChars(r.ssDescriptionType);
			varWSDisciplinaryTypeNumber = (int) r.ssDisciplinaryTypeNumber;
			varWSDisciplinaryType = BaseAppUtils.RemoveControlChars(r.ssDisciplinaryType);
			varWSFinancial = BaseAppUtils.RemoveControlChars(r.ssFinancial);
			varWSTransport = BaseAppUtils.RemoveControlChars(r.ssTransport);
			varWSAcademic = BaseAppUtils.RemoveControlChars(r.ssAcademic);
			varWSPersonal = BaseAppUtils.RemoveControlChars(r.ssPersonal);
			varWSStudentCatVocShortTermLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatVocShortTermLastUpdatedBy);
			varWSStudentCatVocShortTermUpdatedAt = (DateTime) r.ssStudentCatVocShortTermUpdatedAt;
			varWSStudentCatVocOverallLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatVocOverallLastUpdatedBy);
			varWSStudentCatVocOverallUpdatedAt = (DateTime) r.ssStudentCatVocOverallUpdatedAt;
			varWSStudentCatMathShortTermLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatMathShortTermLastUpdatedBy);
			varWSStudentCatMathShortTermUpdatedAt = (DateTime) r.ssStudentCatMathShortTermUpdatedAt;
			varWSStudentCatMathOverallLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatMathOverallLastUpdatedBy);
			varWSStudentCatMathOverallUpdatedAt = (DateTime) r.ssStudentCatMathOverallUpdatedAt;
			varWSStudentCatEngShortTermLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatEngShortTermLastUpdatedBy);
			varWSStudentCatEngShortTermUpdatedAt = (DateTime) r.ssStudentCatEngShortTermUpdatedAt;
			varWSStudentCatEngOverallLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatEngOverallLastUpdatedBy);
			varWSStudentCatEngOverallUpdatedAt = (DateTime) r.ssStudentCatEngOverallUpdatedAt;
			varWSStudentCatMLWShortTermLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatMLWShortTermLastUpdatedBy);
			varWSStudentCatMLWShortTermUpdatedAt = (DateTime) r.ssStudentCatMLWShortTermUpdatedAt;
			varWSStudentCatMLWOverallLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatMLWOverallLastUpdatedBy);
			varWSStudentCatMLWOverallUpdatedAt = (DateTime) r.ssStudentCatMLWOverallUpdatedAt;
			varWSEnrolmentStatus = BaseAppUtils.RemoveControlChars(r.ssEnrolmentStatus);
			varWSNotesNr = (int) r.ssNotesNr;
			varWSIsSessionReviewed = (bool) r.ssIsSessionReviewed;
			varWSIsMathExempt = (bool) r.ssIsMathExempt;
			varWSIsEnglishExempt = (bool) r.ssIsEnglishExempt;
			varWSHasCurrentActiveEnrolment = (bool) r.ssHasCurrentActiveEnrolment;
		}

		public static RLStaffViewRecordList ToRecordList(WORCStaffViewRecordRecord[] array) {
			RLStaffViewRecordList rl = new RLStaffViewRecordList();
			if (array != null) {
				foreach(WORCStaffViewRecordRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStaffViewRecordRecord[] FromRecordList(RLStaffViewRecordList rl) {
			WORCStaffViewRecordRecord[] array = new WORCStaffViewRecordRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStaffViewRecordRecord {
		public static implicit operator WORCStaffViewRecordRecord(RCStaffViewRecordRecord r) {
			return new WORCStaffViewRecordRecord(r.ssSTStaffViewRecord);
		}

		public static implicit operator RCStaffViewRecordRecord(WORCStaffViewRecordRecord w) {
			RCStaffViewRecordRecord r = new RCStaffViewRecordRecord("");
			if (w != null) {
				r.ssSTStaffViewRecord = w;
			}
			return r;
		}

	}

	partial struct STStaffViewRecordStructure {
		public static implicit operator WORCStaffViewRecordRecord(STStaffViewRecordStructure r) {
			return new WORCStaffViewRecordRecord(r);
		}

		public static implicit operator STStaffViewRecordStructure(WORCStaffViewRecordRecord w) {
			STStaffViewRecordStructure r = new STStaffViewRecordStructure("");
			if (w != null) {
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssForenames = ((string) w.varWSForenames ?? "");
				r.ssSurname = ((string) w.varWSSurname ?? "");
				r.ssMainOfferingName = ((string) w.varWSMainOfferingName ?? "");
				r.ssStudentPhotoURL = ((string) w.varWSStudentPhotoURL ?? "");
				r.ssDisability = ((string) w.varWSDisability ?? "");
				r.ssLearningDifficulty = ((string) w.varWSLearningDifficulty ?? "");
				r.ssStaffStudentFavouriteId = (int) w.varWSStaffStudentFavouriteId;
				r.ssStudentRAG = (string) w.varWSStudentRAG;
				r.ssStudentRAGUpdateAt = (DateTime) w.varWSStudentRAGUpdateAt;
				r.ssStudentRAGUUpdatedBy = (int) w.varWSStudentRAGUUpdatedBy;
				r.ssLastWeekPunctuality = (int) w.varWSLastWeekPunctuality;
				r.ssOverallPunctuality = (int) w.varWSOverallPunctuality;
				r.ssLastWeekAttendance = (int) w.varWSLastWeekAttendance;
				r.ssOverallAttendance = (int) w.varWSOverallAttendance;
				r.ssCauseOfConcernRAG = (string) w.varWSCauseOfConcernRAG;
				r.ssCauseOfConcernNumber = (int) w.varWSCauseOfConcernNumber;
				r.ssSafeguardIdList = ((string) w.varWSSafeguardIdList ?? "");
				r.ssSupportIdList = ((string) w.varWSSupportIdList ?? "");
				r.ssRewardsGoldNumber = (int) w.varWSRewardsGoldNumber;
				r.ssRewardsGreenNumber = (int) w.varWSRewardsGreenNumber;
				r.ssVocPeriodRAG = (string) w.varWSVocPeriodRAG;
				r.ssVocOverallRAG = (string) w.varWSVocOverallRAG;
				r.ssVocCompletedUnits = (int) w.varWSVocCompletedUnits;
				r.ssVocRegisteredUnits = (int) w.varWSVocRegisteredUnits;
				r.ssMathPeriodRAG = (string) w.varWSMathPeriodRAG;
				r.ssMathOverallRAG = (string) w.varWSMathOverallRAG;
				r.ssMathCompletedUnits = (int) w.varWSMathCompletedUnits;
				r.ssMathRegisteredUnits = (int) w.varWSMathRegisteredUnits;
				r.ssEngPeriodRAG = (string) w.varWSEngPeriodRAG;
				r.ssEngOverallRAG = (string) w.varWSEngOverallRAG;
				r.ssEngCompletedUnits = (int) w.varWSEngCompletedUnits;
				r.ssEngRegisteredUnits = (int) w.varWSEngRegisteredUnits;
				r.ssMLWPeriodRAG = (string) w.varWSMLWPeriodRAG;
				r.ssMLWOverallRAG = (string) w.varWSMLWOverallRAG;
				r.ssMLWCompletedUnits = (int) w.varWSMLWCompletedUnits;
				r.ssMLWRegisteredUnits = (int) w.varWSMLWRegisteredUnits;
				r.ssRewardType = (bool) w.varWSRewardType;
				r.ssDescriptionType = ((string) w.varWSDescriptionType ?? "");
				r.ssDisciplinaryTypeNumber = (int) w.varWSDisciplinaryTypeNumber;
				r.ssDisciplinaryType = (string) w.varWSDisciplinaryType;
				r.ssFinancial = ((string) w.varWSFinancial ?? "");
				r.ssTransport = ((string) w.varWSTransport ?? "");
				r.ssAcademic = ((string) w.varWSAcademic ?? "");
				r.ssPersonal = ((string) w.varWSPersonal ?? "");
				r.ssStudentCatVocShortTermLastUpdatedBy = ((string) w.varWSStudentCatVocShortTermLastUpdatedBy ?? "");
				r.ssStudentCatVocShortTermUpdatedAt = (DateTime) w.varWSStudentCatVocShortTermUpdatedAt;
				r.ssStudentCatVocOverallLastUpdatedBy = ((string) w.varWSStudentCatVocOverallLastUpdatedBy ?? "");
				r.ssStudentCatVocOverallUpdatedAt = (DateTime) w.varWSStudentCatVocOverallUpdatedAt;
				r.ssStudentCatMathShortTermLastUpdatedBy = ((string) w.varWSStudentCatMathShortTermLastUpdatedBy ?? "");
				r.ssStudentCatMathShortTermUpdatedAt = (DateTime) w.varWSStudentCatMathShortTermUpdatedAt;
				r.ssStudentCatMathOverallLastUpdatedBy = ((string) w.varWSStudentCatMathOverallLastUpdatedBy ?? "");
				r.ssStudentCatMathOverallUpdatedAt = (DateTime) w.varWSStudentCatMathOverallUpdatedAt;
				r.ssStudentCatEngShortTermLastUpdatedBy = ((string) w.varWSStudentCatEngShortTermLastUpdatedBy ?? "");
				r.ssStudentCatEngShortTermUpdatedAt = (DateTime) w.varWSStudentCatEngShortTermUpdatedAt;
				r.ssStudentCatEngOverallLastUpdatedBy = ((string) w.varWSStudentCatEngOverallLastUpdatedBy ?? "");
				r.ssStudentCatEngOverallUpdatedAt = (DateTime) w.varWSStudentCatEngOverallUpdatedAt;
				r.ssStudentCatMLWShortTermLastUpdatedBy = ((string) w.varWSStudentCatMLWShortTermLastUpdatedBy ?? "");
				r.ssStudentCatMLWShortTermUpdatedAt = (DateTime) w.varWSStudentCatMLWShortTermUpdatedAt;
				r.ssStudentCatMLWOverallLastUpdatedBy = ((string) w.varWSStudentCatMLWOverallLastUpdatedBy ?? "");
				r.ssStudentCatMLWOverallUpdatedAt = (DateTime) w.varWSStudentCatMLWOverallUpdatedAt;
				r.ssEnrolmentStatus = ((string) w.varWSEnrolmentStatus ?? "");
				r.ssNotesNr = (int) w.varWSNotesNr;
				r.ssIsSessionReviewed = (bool) w.varWSIsSessionReviewed;
				r.ssIsMathExempt = (bool) w.varWSIsMathExempt;
				r.ssIsEnglishExempt = (bool) w.varWSIsEnglishExempt;
				r.ssHasCurrentActiveEnrolment = (bool) w.varWSHasCurrentActiveEnrolment;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffViewRecordRecordList {
		public WORCStaffViewRecordRecord[] Array;


		public WORLStaffViewRecordRecordList(WORCStaffViewRecordRecord[] r) {
			if (r == null)
			Array = new WORCStaffViewRecordRecord[0];
			else
			Array = r;
		}
		public WORLStaffViewRecordRecordList() {
			Array = new WORCStaffViewRecordRecord[0];
		}

		public WORLStaffViewRecordRecordList(RLStaffViewRecordRecordList rl) {
			rl=(RLStaffViewRecordRecordList) rl.Duplicate();
			Array = new WORCStaffViewRecordRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStaffViewRecordRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffViewRecordRecordList {
		public static implicit operator RLStaffViewRecordRecordList(WORCStaffViewRecordRecord[] array) {
			RLStaffViewRecordRecordList rl = new RLStaffViewRecordRecordList();
			if (array != null) {
				foreach(WORCStaffViewRecordRecord val in array) {
					rl.Append((RCStaffViewRecordRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffViewRecordRecord[](RLStaffViewRecordRecordList rl) {
			WORCStaffViewRecordRecord[] array = new WORCStaffViewRecordRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStaffViewRecordRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffViewRecordRecordList {
		public static implicit operator RLStaffViewRecordRecordList(WORLStaffViewRecordRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffViewRecordRecordList(RLStaffViewRecordRecordList rl) {
			return new WORLStaffViewRecordRecordList(rl);
		}
		public static implicit operator WORCStaffViewRecordRecord[](WORLStaffViewRecordRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffViewRecordRecordList(WORCStaffViewRecordRecord[] array) {
			return new WORLStaffViewRecordRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffViewRecordList {
		public WORCStaffViewRecordRecord[] Array;


		public WORLStaffViewRecordList(WORCStaffViewRecordRecord[] r) {
			if (r == null)
			Array = new WORCStaffViewRecordRecord[0];
			else
			Array = r;
		}
		public WORLStaffViewRecordList() {
			Array = new WORCStaffViewRecordRecord[0];
		}

		public WORLStaffViewRecordList(RLStaffViewRecordList rl) {
			rl=(RLStaffViewRecordList) rl.Duplicate();
			Array = new WORCStaffViewRecordRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffViewRecordList {
		public static implicit operator RLStaffViewRecordList(WORCStaffViewRecordRecord[] array) {
			RLStaffViewRecordList rl = new RLStaffViewRecordList();
			if (array != null) {
				foreach(WORCStaffViewRecordRecord val in array) {
					rl.Append((STStaffViewRecordStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffViewRecordRecord[](RLStaffViewRecordList rl) {
			WORCStaffViewRecordRecord[] array = new WORCStaffViewRecordRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STStaffViewRecordStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffViewRecordList {
		public static implicit operator RLStaffViewRecordList(WORLStaffViewRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffViewRecordList(RLStaffViewRecordList rl) {
			return new WORLStaffViewRecordList(rl);
		}
		public static implicit operator WORCStaffViewRecordRecord[](WORLStaffViewRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffViewRecordList(WORCStaffViewRecordRecord[] array) {
			return new WORLStaffViewRecordList(array);
		}
	}
}

