/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STMarkbookUnitsStructure</code> that represents the Service Studio structure
	///  <code>MarkbookUnits</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STMarkbookUnitsStructure: ISerializable, ITypedRecord<STMarkbookUnitsStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdUnitID = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*rcibXncBd0O+e9vuQGqY8Q");
		private static readonly GlobalObjectKey IdUnitCode = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*pJBOqx4eW0KD2P9OcWVyEA");
		private static readonly GlobalObjectKey IdUnitTitle = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*9rB0njRgbkqXTV4JPPS0OQ");
		private static readonly GlobalObjectKey IdUnitCompleted = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*sr_tXxQbAUeu5D_DgdDu7Q");
		private static readonly GlobalObjectKey IdUnitGrade = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*HogiNpnZiUOh18fiWHCe6Q");
		private static readonly GlobalObjectKey IdUnitMarks = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*sMG007oNVkW0IKz3N03JyA");
		private static readonly GlobalObjectKey IdUnitDateCompleted = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*hzAYjH36nkyMfWtzLHBuMQ");
		private static readonly GlobalObjectKey IdMarkbookAssessments = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*obvbPS3+7kaoZyxdHj_vVw");
		private static readonly GlobalObjectKey IdMarkbookTasks = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*J0LKTxmkCkuND+aUoTfPBg");

		public static void EnsureInitialized() {}

		static STMarkbookUnitsStructure() {
			ssCaseConferencing.STMarkbookUnitsStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("UnitID")]
		public int ssUnitID;

		[System.Xml.Serialization.XmlElement("UnitCode")]
		public string ssUnitCode;

		[System.Xml.Serialization.XmlElement("UnitTitle")]
		public string ssUnitTitle;

		[System.Xml.Serialization.XmlElement("UnitCompleted")]
		public bool ssUnitCompleted;

		[System.Xml.Serialization.XmlElement("UnitGrade")]
		public string ssUnitGrade;

		[System.Xml.Serialization.XmlElement("UnitMarks")]
		public decimal ssUnitMarks;

		[System.Xml.Serialization.XmlElement("UnitDateCompleted")]
		public DateTime ssUnitDateCompleted;

		[System.Xml.Serialization.XmlElement("MarkbookAssessments")]
		public RLMarkbookAssessmentsList ssMarkbookAssessments;

		[System.Xml.Serialization.XmlElement("MarkbookTasks")]
		public RLMarkbookTasksList ssMarkbookTasks;


		public BitArray OptimizedAttributes;

		public STMarkbookUnitsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssUnitID = 0;
			ssUnitCode = "";
			ssUnitTitle = "";
			ssUnitCompleted = false;
			ssUnitGrade = "";
			ssUnitMarks = 0.0M;
			ssUnitDateCompleted = new DateTime(1900, 1, 1, 0, 0, 0);
			ssMarkbookAssessments = new RLMarkbookAssessmentsList();
			ssMarkbookTasks = new RLMarkbookTasksList();
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssUnitID = r.ReadInteger(index++, "MarkbookUnits.UnitID", 0);
			ssUnitCode = r.ReadText(index++, "MarkbookUnits.UnitCode", "");
			ssUnitTitle = r.ReadText(index++, "MarkbookUnits.UnitTitle", "");
			ssUnitCompleted = r.ReadBoolean(index++, "MarkbookUnits.UnitCompleted", false);
			ssUnitGrade = r.ReadText(index++, "MarkbookUnits.UnitGrade", "");
			ssUnitMarks = r.ReadDecimal(index++, "MarkbookUnits.UnitMarks", 0.0M);
			ssUnitDateCompleted = r.ReadDateTime(index++, "MarkbookUnits.UnitDateCompleted", new DateTime(1900, 1, 1, 0, 0, 0));
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STMarkbookUnitsStructure r) {
			this = r;
		}


		public static bool operator == (STMarkbookUnitsStructure a, STMarkbookUnitsStructure b) {
			if (a.ssUnitID != b.ssUnitID) return false;
			if (a.ssUnitCode != b.ssUnitCode) return false;
			if (a.ssUnitTitle != b.ssUnitTitle) return false;
			if (a.ssUnitCompleted != b.ssUnitCompleted) return false;
			if (a.ssUnitGrade != b.ssUnitGrade) return false;
			if (a.ssUnitMarks != b.ssUnitMarks) return false;
			if (a.ssUnitDateCompleted != b.ssUnitDateCompleted) return false;
			if (a.ssMarkbookAssessments != b.ssMarkbookAssessments) return false;
			if (a.ssMarkbookTasks != b.ssMarkbookTasks) return false;
			return true;
		}

		public static bool operator != (STMarkbookUnitsStructure a, STMarkbookUnitsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STMarkbookUnitsStructure)) return false;
			return (this == (STMarkbookUnitsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssUnitID.GetHashCode()
				^ ssUnitCode.GetHashCode()
				^ ssUnitTitle.GetHashCode()
				^ ssUnitCompleted.GetHashCode()
				^ ssUnitGrade.GetHashCode()
				^ ssUnitMarks.GetHashCode()
				^ ssUnitDateCompleted.GetHashCode()
				^ ssMarkbookAssessments.GetHashCode()
				^ ssMarkbookTasks.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STMarkbookUnitsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssUnitID = 0;
			ssUnitCode = "";
			ssUnitTitle = "";
			ssUnitCompleted = false;
			ssUnitGrade = "";
			ssUnitMarks = 0.0M;
			ssUnitDateCompleted = new DateTime(1900, 1, 1, 0, 0, 0);
			ssMarkbookAssessments = new RLMarkbookAssessmentsList();
			ssMarkbookTasks = new RLMarkbookTasksList();
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssUnitID = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssUnitCode = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssUnitTitle = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssUnitCompleted = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssUnitGrade = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssUnitMarks = (decimal) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssUnitDateCompleted = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssMarkbookAssessments = (RLMarkbookAssessmentsList) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssMarkbookTasks = (RLMarkbookTasksList) info.GetValue(fields[8] .Name, fields[8] .FieldType);
		}

		public void RecursiveReset() {
			ssMarkbookAssessments.RecursiveReset();
			ssMarkbookTasks.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssMarkbookAssessments.InternalRecursiveSave();
			ssMarkbookTasks.InternalRecursiveSave();
		}


		public STMarkbookUnitsStructure Duplicate() {
			STMarkbookUnitsStructure t;
			t.ssUnitID = this.ssUnitID;
			t.ssUnitCode = this.ssUnitCode;
			t.ssUnitTitle = this.ssUnitTitle;
			t.ssUnitCompleted = this.ssUnitCompleted;
			t.ssUnitGrade = this.ssUnitGrade;
			t.ssUnitMarks = this.ssUnitMarks;
			t.ssUnitDateCompleted = this.ssUnitDateCompleted;
			t.ssMarkbookAssessments = (RLMarkbookAssessmentsList) this.ssMarkbookAssessments.Duplicate();
			t.ssMarkbookTasks = (RLMarkbookTasksList) this.ssMarkbookTasks.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UnitID")) VarValue.AppendAttribute(recordElem, "UnitID", ssUnitID, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "UnitID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UnitCode")) VarValue.AppendAttribute(recordElem, "UnitCode", ssUnitCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UnitCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UnitTitle")) VarValue.AppendAttribute(recordElem, "UnitTitle", ssUnitTitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UnitTitle");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UnitCompleted")) VarValue.AppendAttribute(recordElem, "UnitCompleted", ssUnitCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "UnitCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UnitGrade")) VarValue.AppendAttribute(recordElem, "UnitGrade", ssUnitGrade, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UnitGrade");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UnitMarks")) VarValue.AppendAttribute(recordElem, "UnitMarks", ssUnitMarks, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "UnitMarks");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UnitDateCompleted")) VarValue.AppendAttribute(recordElem, "UnitDateCompleted", ssUnitDateCompleted, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "UnitDateCompleted");
				ssMarkbookAssessments.ToXml(this, recordElem, "MarkbookAssessments", detailLevel - 1);
				ssMarkbookTasks.ToXml(this, recordElem, "MarkbookTasks", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "unitid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UnitID")) variable.Value = ssUnitID; else variable.Optimized = true;
			} else if (head == "unitcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UnitCode")) variable.Value = ssUnitCode; else variable.Optimized = true;
			} else if (head == "unittitle") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UnitTitle")) variable.Value = ssUnitTitle; else variable.Optimized = true;
			} else if (head == "unitcompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UnitCompleted")) variable.Value = ssUnitCompleted; else variable.Optimized = true;
			} else if (head == "unitgrade") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UnitGrade")) variable.Value = ssUnitGrade; else variable.Optimized = true;
			} else if (head == "unitmarks") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UnitMarks")) variable.Value = ssUnitMarks; else variable.Optimized = true;
			} else if (head == "unitdatecompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UnitDateCompleted")) variable.Value = ssUnitDateCompleted; else variable.Optimized = true;
			} else if (head == "markbookassessments") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MarkbookAssessments")) variable.Value = ssMarkbookAssessments; else variable.Optimized = true;
				variable.SetFieldName("markbookassessments");
			} else if (head == "markbooktasks") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MarkbookTasks")) variable.Value = ssMarkbookTasks; else variable.Optimized = true;
				variable.SetFieldName("markbooktasks");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUnitID) {
				return ssUnitID;
			} else if (key == IdUnitCode) {
				return ssUnitCode;
			} else if (key == IdUnitTitle) {
				return ssUnitTitle;
			} else if (key == IdUnitCompleted) {
				return ssUnitCompleted;
			} else if (key == IdUnitGrade) {
				return ssUnitGrade;
			} else if (key == IdUnitMarks) {
				return ssUnitMarks;
			} else if (key == IdUnitDateCompleted) {
				return ssUnitDateCompleted;
			} else if (key == IdMarkbookAssessments) {
				return ssMarkbookAssessments;
			} else if (key == IdMarkbookTasks) {
				return ssMarkbookTasks;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssUnitID = (int) other.AttributeGet(IdUnitID);
			ssUnitCode = (string) other.AttributeGet(IdUnitCode);
			ssUnitTitle = (string) other.AttributeGet(IdUnitTitle);
			ssUnitCompleted = (bool) other.AttributeGet(IdUnitCompleted);
			ssUnitGrade = (string) other.AttributeGet(IdUnitGrade);
			ssUnitMarks = (decimal) other.AttributeGet(IdUnitMarks);
			ssUnitDateCompleted = (DateTime) other.AttributeGet(IdUnitDateCompleted);
			ssMarkbookAssessments = new RLMarkbookAssessmentsList();
			ssMarkbookAssessments.FillFromOther((IOSList) other.AttributeGet(IdMarkbookAssessments));
			ssMarkbookTasks = new RLMarkbookTasksList();
			ssMarkbookTasks.FillFromOther((IOSList) other.AttributeGet(IdMarkbookTasks));
		}
	} // STMarkbookUnitsStructure
	/// <summary>
	/// Structure <code>RCMarkbookUnitsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCMarkbookUnitsRecord: ISerializable, ITypedRecord<RCMarkbookUnitsRecord> {
		private static readonly GlobalObjectKey IdMarkbookUnits = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Me+KYlya86h5+AdMoavyCQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("MarkbookUnits")]
		public STMarkbookUnitsStructure ssSTMarkbookUnits;


		public static implicit operator STMarkbookUnitsStructure(RCMarkbookUnitsRecord r) {
			return r.ssSTMarkbookUnits;
		}

		public static implicit operator RCMarkbookUnitsRecord(STMarkbookUnitsStructure r) {
			RCMarkbookUnitsRecord res = new RCMarkbookUnitsRecord(null);
			res.ssSTMarkbookUnits = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCMarkbookUnitsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTMarkbookUnits = new STMarkbookUnitsStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTMarkbookUnits.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTMarkbookUnits.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCMarkbookUnitsRecord r) {
			this = r;
		}


		public static bool operator == (RCMarkbookUnitsRecord a, RCMarkbookUnitsRecord b) {
			if (a.ssSTMarkbookUnits != b.ssSTMarkbookUnits) return false;
			return true;
		}

		public static bool operator != (RCMarkbookUnitsRecord a, RCMarkbookUnitsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCMarkbookUnitsRecord)) return false;
			return (this == (RCMarkbookUnitsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTMarkbookUnits.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCMarkbookUnitsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTMarkbookUnits = new STMarkbookUnitsStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTMarkbookUnits = (STMarkbookUnitsStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTMarkbookUnits.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTMarkbookUnits.InternalRecursiveSave();
		}


		public RCMarkbookUnitsRecord Duplicate() {
			RCMarkbookUnitsRecord t;
			t.ssSTMarkbookUnits = (STMarkbookUnitsStructure) this.ssSTMarkbookUnits.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTMarkbookUnits.ToXml(this, recordElem, "MarkbookUnits", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "markbookunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MarkbookUnits")) variable.Value = ssSTMarkbookUnits; else variable.Optimized = true;
				variable.SetFieldName("markbookunits");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdMarkbookUnits) {
				return ssSTMarkbookUnits;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTMarkbookUnits.FillFromOther((IRecord) other.AttributeGet(IdMarkbookUnits));
		}
	} // RCMarkbookUnitsRecord
	/// <summary>
	/// RecordList type <code>RLMarkbookUnitsRecordList</code> that represents a record list of
	///  <code>MarkbookUnits</code>
	/// </summary>
	[Serializable()]
	public partial class RLMarkbookUnitsRecordList: GenericRecordList<RCMarkbookUnitsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCMarkbookUnitsRecord GetElementDefaultValue() {
			return new RCMarkbookUnitsRecord("");
		}

		public T[] ToArray<T>(Func<RCMarkbookUnitsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMarkbookUnitsRecordList recordlist, Func<RCMarkbookUnitsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLMarkbookUnitsRecordList ToList<T>(T[] array, Func <T, RCMarkbookUnitsRecord> converter) {
			RLMarkbookUnitsRecordList result = new RLMarkbookUnitsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMarkbookUnitsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookUnitsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookUnitsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMarkbookUnitsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCMarkbookUnitsRecord> NewList() {
			return new RLMarkbookUnitsRecordList();
		}


	} // RLMarkbookUnitsRecordList
	/// <summary>
	/// RecordList type <code>RLMarkbookUnitsList</code> that represents a record list of <code>Text, Text,
	///  Text, Decimal, DateTime, Boolean, Integer, MarkbookTasksList, MarkbookAssessmentsList</code>
	/// </summary>
	[Serializable()]
	public partial class RLMarkbookUnitsList: GenericRecordList<STMarkbookUnitsStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		static RLMarkbookUnitsList() {
			ssCaseConferencing.RLMarkbookUnitsListTypeFactoryImpl.InitializeFactory();
		}

		protected override STMarkbookUnitsStructure GetElementDefaultValue() {
			return new STMarkbookUnitsStructure("");
		}

		public T[] ToArray<T>(Func<STMarkbookUnitsStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMarkbookUnitsList recordlist, Func<STMarkbookUnitsStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLMarkbookUnitsList ToList<T>(T[] array, Func <T, STMarkbookUnitsStructure> converter) {
			RLMarkbookUnitsList result = new RLMarkbookUnitsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMarkbookUnitsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookUnitsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookUnitsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMarkbookUnitsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STMarkbookUnitsStructure> NewList() {
			return new RLMarkbookUnitsList();
		}


	} // RLMarkbookUnitsList
}

namespace ssCaseConferencing {
	[XmlType("MarkbookUnits")]
	public class WORCMarkbookUnitsRecord {
		[System.Xml.Serialization.XmlElement("UnitID")]
		public int varWSUnitID;

		[System.Xml.Serialization.XmlElement("UnitCode")]
		public string varWSUnitCode;

		[System.Xml.Serialization.XmlElement("UnitTitle")]
		public string varWSUnitTitle;

		[System.Xml.Serialization.XmlElement("UnitCompleted")]
		public bool varWSUnitCompleted;

		[System.Xml.Serialization.XmlElement("UnitGrade")]
		public string varWSUnitGrade;

		[System.Xml.Serialization.XmlElement("UnitMarks")]
		public decimal varWSUnitMarks;

		[System.Xml.Serialization.XmlElement("UnitDateCompleted")]
		public DateTime varWSUnitDateCompleted;

		[System.Xml.Serialization.XmlArray("MarkbookAssessments")]
		public WORCMarkbookAssessmentsRecord[] varWSMarkbookAssessments;

		[System.Xml.Serialization.XmlArray("MarkbookTasks")]
		public WORCMarkbookTasksRecord[] varWSMarkbookTasks;

		public WORCMarkbookUnitsRecord() {
			varWSUnitID = (int) 0;
			varWSUnitCode = (string) "";
			varWSUnitTitle = (string) "";
			varWSUnitCompleted = (bool) false;
			varWSUnitGrade = (string) "";
			varWSUnitMarks = (decimal) 0.0M;
			varWSUnitDateCompleted = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSMarkbookAssessments = new WORCMarkbookAssessmentsRecord[0];
			varWSMarkbookTasks = new WORCMarkbookTasksRecord[0];
		}

		public WORCMarkbookUnitsRecord(STMarkbookUnitsStructure r) {
			varWSUnitID = (int) r.ssUnitID;
			varWSUnitCode = BaseAppUtils.RemoveControlChars(r.ssUnitCode);
			varWSUnitTitle = BaseAppUtils.RemoveControlChars(r.ssUnitTitle);
			varWSUnitCompleted = (bool) r.ssUnitCompleted;
			varWSUnitGrade = BaseAppUtils.RemoveControlChars(r.ssUnitGrade);
			varWSUnitMarks = (decimal) r.ssUnitMarks;
			varWSUnitDateCompleted = (DateTime) r.ssUnitDateCompleted;
			varWSMarkbookAssessments = WORCMarkbookAssessmentsRecord.FromRecordList(r.ssMarkbookAssessments);
			varWSMarkbookTasks = WORCMarkbookTasksRecord.FromRecordList(r.ssMarkbookTasks);
		}

		public static RLMarkbookUnitsList ToRecordList(WORCMarkbookUnitsRecord[] array) {
			RLMarkbookUnitsList rl = new RLMarkbookUnitsList();
			if (array != null) {
				foreach(WORCMarkbookUnitsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCMarkbookUnitsRecord[] FromRecordList(RLMarkbookUnitsList rl) {
			WORCMarkbookUnitsRecord[] array = new WORCMarkbookUnitsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCMarkbookUnitsRecord {
		public static implicit operator WORCMarkbookUnitsRecord(RCMarkbookUnitsRecord r) {
			return new WORCMarkbookUnitsRecord(r.ssSTMarkbookUnits);
		}

		public static implicit operator RCMarkbookUnitsRecord(WORCMarkbookUnitsRecord w) {
			RCMarkbookUnitsRecord r = new RCMarkbookUnitsRecord("");
			if (w != null) {
				r.ssSTMarkbookUnits = w;
			}
			return r;
		}

	}

	partial struct STMarkbookUnitsStructure {
		public static implicit operator WORCMarkbookUnitsRecord(STMarkbookUnitsStructure r) {
			return new WORCMarkbookUnitsRecord(r);
		}

		public static implicit operator STMarkbookUnitsStructure(WORCMarkbookUnitsRecord w) {
			STMarkbookUnitsStructure r = new STMarkbookUnitsStructure("");
			if (w != null) {
				r.ssUnitID = (int) w.varWSUnitID;
				r.ssUnitCode = ((string) w.varWSUnitCode ?? "");
				r.ssUnitTitle = ((string) w.varWSUnitTitle ?? "");
				r.ssUnitCompleted = (bool) w.varWSUnitCompleted;
				r.ssUnitGrade = ((string) w.varWSUnitGrade ?? "");
				r.ssUnitMarks = (decimal) w.varWSUnitMarks;
				r.ssUnitDateCompleted = (DateTime) w.varWSUnitDateCompleted;
				r.ssMarkbookAssessments = WORCMarkbookAssessmentsRecord.ToRecordList(w.varWSMarkbookAssessments);
				r.ssMarkbookTasks = WORCMarkbookTasksRecord.ToRecordList(w.varWSMarkbookTasks);
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLMarkbookUnitsRecordList {
		public WORCMarkbookUnitsRecord[] Array;


		public WORLMarkbookUnitsRecordList(WORCMarkbookUnitsRecord[] r) {
			if (r == null)
			Array = new WORCMarkbookUnitsRecord[0];
			else
			Array = r;
		}
		public WORLMarkbookUnitsRecordList() {
			Array = new WORCMarkbookUnitsRecord[0];
		}

		public WORLMarkbookUnitsRecordList(RLMarkbookUnitsRecordList rl) {
			rl=(RLMarkbookUnitsRecordList) rl.Duplicate();
			Array = new WORCMarkbookUnitsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCMarkbookUnitsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLMarkbookUnitsRecordList {
		public static implicit operator RLMarkbookUnitsRecordList(WORCMarkbookUnitsRecord[] array) {
			RLMarkbookUnitsRecordList rl = new RLMarkbookUnitsRecordList();
			if (array != null) {
				foreach(WORCMarkbookUnitsRecord val in array) {
					rl.Append((RCMarkbookUnitsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMarkbookUnitsRecord[](RLMarkbookUnitsRecordList rl) {
			WORCMarkbookUnitsRecord[] array = new WORCMarkbookUnitsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCMarkbookUnitsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLMarkbookUnitsRecordList {
		public static implicit operator RLMarkbookUnitsRecordList(WORLMarkbookUnitsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLMarkbookUnitsRecordList(RLMarkbookUnitsRecordList rl) {
			return new WORLMarkbookUnitsRecordList(rl);
		}
		public static implicit operator WORCMarkbookUnitsRecord[](WORLMarkbookUnitsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMarkbookUnitsRecordList(WORCMarkbookUnitsRecord[] array) {
			return new WORLMarkbookUnitsRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLMarkbookUnitsList {
		public WORCMarkbookUnitsRecord[] Array;


		public WORLMarkbookUnitsList(WORCMarkbookUnitsRecord[] r) {
			if (r == null)
			Array = new WORCMarkbookUnitsRecord[0];
			else
			Array = r;
		}
		public WORLMarkbookUnitsList() {
			Array = new WORCMarkbookUnitsRecord[0];
		}

		public WORLMarkbookUnitsList(RLMarkbookUnitsList rl) {
			rl=(RLMarkbookUnitsList) rl.Duplicate();
			Array = new WORCMarkbookUnitsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLMarkbookUnitsList {
		public static implicit operator RLMarkbookUnitsList(WORCMarkbookUnitsRecord[] array) {
			RLMarkbookUnitsList rl = new RLMarkbookUnitsList();
			if (array != null) {
				foreach(WORCMarkbookUnitsRecord val in array) {
					rl.Append((STMarkbookUnitsStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMarkbookUnitsRecord[](RLMarkbookUnitsList rl) {
			WORCMarkbookUnitsRecord[] array = new WORCMarkbookUnitsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STMarkbookUnitsStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLMarkbookUnitsList {
		public static implicit operator RLMarkbookUnitsList(WORLMarkbookUnitsList w) {
			return w.Array;
		}
		public static implicit operator WORLMarkbookUnitsList(RLMarkbookUnitsList rl) {
			return new WORLMarkbookUnitsList(rl);
		}
		public static implicit operator WORCMarkbookUnitsRecord[](WORLMarkbookUnitsList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMarkbookUnitsList(WORCMarkbookUnitsRecord[] array) {
			return new WORLMarkbookUnitsList(array);
		}
	}
}

