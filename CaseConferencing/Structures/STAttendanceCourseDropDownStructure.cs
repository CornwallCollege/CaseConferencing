/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STAttendanceCourseDropDownStructure</code> that represents the Service Studio
	///  structure <code>AttendanceCourseDropDown</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STAttendanceCourseDropDownStructure: ISerializable, ITypedRecord<STAttendanceCourseDropDownStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdOfferingCode = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*hX9lhMXuJkmoI6d_5UYoWQ");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*hPm4sV5gYE+bv_KIUqV08w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string ssOfferingCode;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;


		public BitArray OptimizedAttributes;

		public STAttendanceCourseDropDownStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssOfferingCode = "";
			ssDescription = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssOfferingCode = r.ReadText(index++, "AttendanceCourseDropDown.OfferingCode", "");
			ssDescription = r.ReadText(index++, "AttendanceCourseDropDown.Description", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STAttendanceCourseDropDownStructure r) {
			this = r;
		}


		public static bool operator == (STAttendanceCourseDropDownStructure a, STAttendanceCourseDropDownStructure b) {
			if (a.ssOfferingCode != b.ssOfferingCode) return false;
			if (a.ssDescription != b.ssDescription) return false;
			return true;
		}

		public static bool operator != (STAttendanceCourseDropDownStructure a, STAttendanceCourseDropDownStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STAttendanceCourseDropDownStructure)) return false;
			return (this == (STAttendanceCourseDropDownStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssOfferingCode.GetHashCode()
				^ ssDescription.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STAttendanceCourseDropDownStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssOfferingCode = "";
			ssDescription = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssOfferingCode = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssDescription = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STAttendanceCourseDropDownStructure Duplicate() {
			STAttendanceCourseDropDownStructure t;
			t.ssOfferingCode = this.ssOfferingCode;
			t.ssDescription = this.ssDescription;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCode")) VarValue.AppendAttribute(recordElem, "OfferingCode", ssOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "offeringcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCode")) variable.Value = ssOfferingCode; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdOfferingCode) {
				return ssOfferingCode;
			} else if (key == IdDescription) {
				return ssDescription;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssOfferingCode = (string) other.AttributeGet(IdOfferingCode);
			ssDescription = (string) other.AttributeGet(IdDescription);
		}
	} // STAttendanceCourseDropDownStructure
	/// <summary>
	/// Structure <code>RCAttendanceCourseDropDownRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAttendanceCourseDropDownRecord: ISerializable, ITypedRecord<RCAttendanceCourseDropDownRecord> {
		private static readonly GlobalObjectKey IdAttendanceCourseDropDown = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*WmIgiqeEF6m6Q0l8DxYBbQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AttendanceCourseDropDown")]
		public STAttendanceCourseDropDownStructure ssSTAttendanceCourseDropDown;


		public static implicit operator STAttendanceCourseDropDownStructure(RCAttendanceCourseDropDownRecord r) {
			return r.ssSTAttendanceCourseDropDown;
		}

		public static implicit operator RCAttendanceCourseDropDownRecord(STAttendanceCourseDropDownStructure r) {
			RCAttendanceCourseDropDownRecord res = new RCAttendanceCourseDropDownRecord(null);
			res.ssSTAttendanceCourseDropDown = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCAttendanceCourseDropDownRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTAttendanceCourseDropDown = new STAttendanceCourseDropDownStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTAttendanceCourseDropDown.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTAttendanceCourseDropDown.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAttendanceCourseDropDownRecord r) {
			this = r;
		}


		public static bool operator == (RCAttendanceCourseDropDownRecord a, RCAttendanceCourseDropDownRecord b) {
			if (a.ssSTAttendanceCourseDropDown != b.ssSTAttendanceCourseDropDown) return false;
			return true;
		}

		public static bool operator != (RCAttendanceCourseDropDownRecord a, RCAttendanceCourseDropDownRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAttendanceCourseDropDownRecord)) return false;
			return (this == (RCAttendanceCourseDropDownRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTAttendanceCourseDropDown.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAttendanceCourseDropDownRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTAttendanceCourseDropDown = new STAttendanceCourseDropDownStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTAttendanceCourseDropDown = (STAttendanceCourseDropDownStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTAttendanceCourseDropDown.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTAttendanceCourseDropDown.InternalRecursiveSave();
		}


		public RCAttendanceCourseDropDownRecord Duplicate() {
			RCAttendanceCourseDropDownRecord t;
			t.ssSTAttendanceCourseDropDown = (STAttendanceCourseDropDownStructure) this.ssSTAttendanceCourseDropDown.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTAttendanceCourseDropDown.ToXml(this, recordElem, "AttendanceCourseDropDown", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "attendancecoursedropdown") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendanceCourseDropDown")) variable.Value = ssSTAttendanceCourseDropDown; else variable.Optimized = true;
				variable.SetFieldName("attendancecoursedropdown");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAttendanceCourseDropDown) {
				return ssSTAttendanceCourseDropDown;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTAttendanceCourseDropDown.FillFromOther((IRecord) other.AttributeGet(IdAttendanceCourseDropDown));
		}
	} // RCAttendanceCourseDropDownRecord
	/// <summary>
	/// RecordList type <code>RLAttendanceCourseDropDownRecordList</code> that represents a record list of
	///  <code>AttendanceCourseDropDown</code>
	/// </summary>
	[Serializable()]
	public partial class RLAttendanceCourseDropDownRecordList: GenericRecordList<RCAttendanceCourseDropDownRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAttendanceCourseDropDownRecord GetElementDefaultValue() {
			return new RCAttendanceCourseDropDownRecord("");
		}

		public T[] ToArray<T>(Func<RCAttendanceCourseDropDownRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAttendanceCourseDropDownRecordList recordlist, Func<RCAttendanceCourseDropDownRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAttendanceCourseDropDownRecordList ToList<T>(T[] array, Func <T, RCAttendanceCourseDropDownRecord> converter) {
			RLAttendanceCourseDropDownRecordList result = new RLAttendanceCourseDropDownRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAttendanceCourseDropDownRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendanceCourseDropDownRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendanceCourseDropDownRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAttendanceCourseDropDownRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAttendanceCourseDropDownRecord> NewList() {
			return new RLAttendanceCourseDropDownRecordList();
		}


	} // RLAttendanceCourseDropDownRecordList
	/// <summary>
	/// RecordList type <code>RLAttendanceCourseDropDownList</code> that represents a record list of
	///  <code>Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLAttendanceCourseDropDownList: GenericRecordList<STAttendanceCourseDropDownStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STAttendanceCourseDropDownStructure GetElementDefaultValue() {
			return new STAttendanceCourseDropDownStructure("");
		}

		public T[] ToArray<T>(Func<STAttendanceCourseDropDownStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAttendanceCourseDropDownList recordlist, Func<STAttendanceCourseDropDownStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAttendanceCourseDropDownList ToList<T>(T[] array, Func <T, STAttendanceCourseDropDownStructure> converter) {
			RLAttendanceCourseDropDownList result = new RLAttendanceCourseDropDownList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAttendanceCourseDropDownList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendanceCourseDropDownList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAttendanceCourseDropDownList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAttendanceCourseDropDownList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STAttendanceCourseDropDownStructure> NewList() {
			return new RLAttendanceCourseDropDownList();
		}


	} // RLAttendanceCourseDropDownList
}

namespace ssCaseConferencing {
	[XmlType("AttendanceCourseDropDown")]
	public class WORCAttendanceCourseDropDownRecord {
		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string varWSOfferingCode;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		public WORCAttendanceCourseDropDownRecord() {
			varWSOfferingCode = (string) "";
			varWSDescription = (string) "";
		}

		public WORCAttendanceCourseDropDownRecord(STAttendanceCourseDropDownStructure r) {
			varWSOfferingCode = BaseAppUtils.RemoveControlChars(r.ssOfferingCode);
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
		}

		public static RLAttendanceCourseDropDownList ToRecordList(WORCAttendanceCourseDropDownRecord[] array) {
			RLAttendanceCourseDropDownList rl = new RLAttendanceCourseDropDownList();
			if (array != null) {
				foreach(WORCAttendanceCourseDropDownRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAttendanceCourseDropDownRecord[] FromRecordList(RLAttendanceCourseDropDownList rl) {
			WORCAttendanceCourseDropDownRecord[] array = new WORCAttendanceCourseDropDownRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCAttendanceCourseDropDownRecord {
		public static implicit operator WORCAttendanceCourseDropDownRecord(RCAttendanceCourseDropDownRecord r) {
			return new WORCAttendanceCourseDropDownRecord(r.ssSTAttendanceCourseDropDown);
		}

		public static implicit operator RCAttendanceCourseDropDownRecord(WORCAttendanceCourseDropDownRecord w) {
			RCAttendanceCourseDropDownRecord r = new RCAttendanceCourseDropDownRecord("");
			if (w != null) {
				r.ssSTAttendanceCourseDropDown = w;
			}
			return r;
		}

	}

	partial struct STAttendanceCourseDropDownStructure {
		public static implicit operator WORCAttendanceCourseDropDownRecord(STAttendanceCourseDropDownStructure r) {
			return new WORCAttendanceCourseDropDownRecord(r);
		}

		public static implicit operator STAttendanceCourseDropDownStructure(WORCAttendanceCourseDropDownRecord w) {
			STAttendanceCourseDropDownStructure r = new STAttendanceCourseDropDownStructure("");
			if (w != null) {
				r.ssOfferingCode = ((string) w.varWSOfferingCode ?? "");
				r.ssDescription = ((string) w.varWSDescription ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAttendanceCourseDropDownRecordList {
		public WORCAttendanceCourseDropDownRecord[] Array;


		public WORLAttendanceCourseDropDownRecordList(WORCAttendanceCourseDropDownRecord[] r) {
			if (r == null)
			Array = new WORCAttendanceCourseDropDownRecord[0];
			else
			Array = r;
		}
		public WORLAttendanceCourseDropDownRecordList() {
			Array = new WORCAttendanceCourseDropDownRecord[0];
		}

		public WORLAttendanceCourseDropDownRecordList(RLAttendanceCourseDropDownRecordList rl) {
			rl=(RLAttendanceCourseDropDownRecordList) rl.Duplicate();
			Array = new WORCAttendanceCourseDropDownRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAttendanceCourseDropDownRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAttendanceCourseDropDownRecordList {
		public static implicit operator RLAttendanceCourseDropDownRecordList(WORCAttendanceCourseDropDownRecord[] array) {
			RLAttendanceCourseDropDownRecordList rl = new RLAttendanceCourseDropDownRecordList();
			if (array != null) {
				foreach(WORCAttendanceCourseDropDownRecord val in array) {
					rl.Append((RCAttendanceCourseDropDownRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAttendanceCourseDropDownRecord[](RLAttendanceCourseDropDownRecordList rl) {
			WORCAttendanceCourseDropDownRecord[] array = new WORCAttendanceCourseDropDownRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAttendanceCourseDropDownRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAttendanceCourseDropDownRecordList {
		public static implicit operator RLAttendanceCourseDropDownRecordList(WORLAttendanceCourseDropDownRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAttendanceCourseDropDownRecordList(RLAttendanceCourseDropDownRecordList rl) {
			return new WORLAttendanceCourseDropDownRecordList(rl);
		}
		public static implicit operator WORCAttendanceCourseDropDownRecord[](WORLAttendanceCourseDropDownRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAttendanceCourseDropDownRecordList(WORCAttendanceCourseDropDownRecord[] array) {
			return new WORLAttendanceCourseDropDownRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAttendanceCourseDropDownList {
		public WORCAttendanceCourseDropDownRecord[] Array;


		public WORLAttendanceCourseDropDownList(WORCAttendanceCourseDropDownRecord[] r) {
			if (r == null)
			Array = new WORCAttendanceCourseDropDownRecord[0];
			else
			Array = r;
		}
		public WORLAttendanceCourseDropDownList() {
			Array = new WORCAttendanceCourseDropDownRecord[0];
		}

		public WORLAttendanceCourseDropDownList(RLAttendanceCourseDropDownList rl) {
			rl=(RLAttendanceCourseDropDownList) rl.Duplicate();
			Array = new WORCAttendanceCourseDropDownRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAttendanceCourseDropDownList {
		public static implicit operator RLAttendanceCourseDropDownList(WORCAttendanceCourseDropDownRecord[] array) {
			RLAttendanceCourseDropDownList rl = new RLAttendanceCourseDropDownList();
			if (array != null) {
				foreach(WORCAttendanceCourseDropDownRecord val in array) {
					rl.Append((STAttendanceCourseDropDownStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAttendanceCourseDropDownRecord[](RLAttendanceCourseDropDownList rl) {
			WORCAttendanceCourseDropDownRecord[] array = new WORCAttendanceCourseDropDownRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STAttendanceCourseDropDownStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAttendanceCourseDropDownList {
		public static implicit operator RLAttendanceCourseDropDownList(WORLAttendanceCourseDropDownList w) {
			return w.Array;
		}
		public static implicit operator WORLAttendanceCourseDropDownList(RLAttendanceCourseDropDownList rl) {
			return new WORLAttendanceCourseDropDownList(rl);
		}
		public static implicit operator WORCAttendanceCourseDropDownRecord[](WORLAttendanceCourseDropDownList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAttendanceCourseDropDownList(WORCAttendanceCourseDropDownRecord[] array) {
			return new WORLAttendanceCourseDropDownList(array);
		}
	}
}

