/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STStudentAttendanceForCourseStructure</code> that represents the Service Studio
	///  structure <code>StudentAttendanceForCourse</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STStudentAttendanceForCourseStructure: ISerializable, ITypedRecord<STStudentAttendanceForCourseStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*Dy8lPFnmGUW5HEbMspSfSg");
		private static readonly GlobalObjectKey IdEventWeekKey = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*NBZGOPS3TkGbxqHO4Lo81w");
		private static readonly GlobalObjectKey IdFaculty = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*jyKCcNVMOUKjaQqpnA3R0g");
		private static readonly GlobalObjectKey IdDay = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*TTZKWyOquEC3_Gnrd7YH1g");
		private static readonly GlobalObjectKey IdStart = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*6sfCDOHPRk6vEtDPgx0AKw");
		private static readonly GlobalObjectKey IdFinish = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*l08UQmllqkaU+gh603x51Q");
		private static readonly GlobalObjectKey IdDurationHours = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*CYwLOtz3Bk2DbMGOxQAXFQ");
		private static readonly GlobalObjectKey IdEventDate = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*2cvtiIvpAEusBKTRp7Vq5w");
		private static readonly GlobalObjectKey IdRooms = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*ea5YpWZ4jE2hYzhj25NCjQ");
		private static readonly GlobalObjectKey IdStaff = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*lx+iP2yGykSIWjGrEjrVpw");
		private static readonly GlobalObjectKey IdTitle = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*8EIXat37HUmxITckYxmFLw");
		private static readonly GlobalObjectKey IdStatus = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*BMw0Z42ByEKAxmUUwZyhxA");
		private static readonly GlobalObjectKey IdOfferings = GlobalObjectKey.Parse("MHDKEnEy6kO1VcZuY5cJcA*DGwf3wES5UW+ncaMdrvyRQ");

		public static void EnsureInitialized() {}

		static STStudentAttendanceForCourseStructure() {
			ssCaseConferencing.STStudentAttendanceForCourseStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;

		[System.Xml.Serialization.XmlElement("EventWeekKey")]
		public string ssEventWeekKey;

		[System.Xml.Serialization.XmlElement("Faculty")]
		public string ssFaculty;

		[System.Xml.Serialization.XmlElement("Day")]
		public string ssDay;

		[System.Xml.Serialization.XmlElement("Start")]
		public string ssStart;

		[System.Xml.Serialization.XmlElement("Finish")]
		public string ssFinish;

		[System.Xml.Serialization.XmlElement("DurationHours")]
		public decimal ssDurationHours;

		[System.Xml.Serialization.XmlElement("EventDate")]
		public DateTime ssEventDate;

		[System.Xml.Serialization.XmlElement("Rooms")]
		public string ssRooms;

		[System.Xml.Serialization.XmlElement("Staff")]
		public string ssStaff;

		[System.Xml.Serialization.XmlElement("Title")]
		public string ssTitle;

		[System.Xml.Serialization.XmlElement("Status")]
		public string ssStatus;

		[System.Xml.Serialization.XmlElement("Offerings")]
		public string ssOfferings;


		public BitArray OptimizedAttributes;

		public STStudentAttendanceForCourseStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssEventWeekKey = "";
			ssFaculty = "";
			ssDay = "";
			ssStart = "";
			ssFinish = "";
			ssDurationHours = 0.0M;
			ssEventDate = new DateTime(1900, 1, 1, 0, 0, 0);
			ssRooms = "";
			ssStaff = "";
			ssTitle = "";
			ssStatus = "";
			ssOfferings = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentReference = r.ReadText(index++, "StudentAttendanceForCourse.StudentReference", "");
			ssEventWeekKey = r.ReadText(index++, "StudentAttendanceForCourse.EventWeekKey", "");
			ssFaculty = r.ReadText(index++, "StudentAttendanceForCourse.Faculty", "");
			ssDay = r.ReadText(index++, "StudentAttendanceForCourse.Day", "");
			ssStart = r.ReadText(index++, "StudentAttendanceForCourse.Start", "");
			ssFinish = r.ReadText(index++, "StudentAttendanceForCourse.Finish", "");
			ssDurationHours = r.ReadDecimal(index++, "StudentAttendanceForCourse.DurationHours", 0.0M);
			ssEventDate = r.ReadDate(index++, "StudentAttendanceForCourse.EventDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssRooms = r.ReadText(index++, "StudentAttendanceForCourse.Rooms", "");
			ssStaff = r.ReadText(index++, "StudentAttendanceForCourse.Staff", "");
			ssTitle = r.ReadText(index++, "StudentAttendanceForCourse.Title", "");
			ssStatus = r.ReadText(index++, "StudentAttendanceForCourse.Status", "");
			ssOfferings = r.ReadText(index++, "StudentAttendanceForCourse.Offerings", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STStudentAttendanceForCourseStructure r) {
			this = r;
		}


		public static bool operator == (STStudentAttendanceForCourseStructure a, STStudentAttendanceForCourseStructure b) {
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssEventWeekKey != b.ssEventWeekKey) return false;
			if (a.ssFaculty != b.ssFaculty) return false;
			if (a.ssDay != b.ssDay) return false;
			if (a.ssStart != b.ssStart) return false;
			if (a.ssFinish != b.ssFinish) return false;
			if (a.ssDurationHours != b.ssDurationHours) return false;
			if (a.ssEventDate != b.ssEventDate) return false;
			if (a.ssRooms != b.ssRooms) return false;
			if (a.ssStaff != b.ssStaff) return false;
			if (a.ssTitle != b.ssTitle) return false;
			if (a.ssStatus != b.ssStatus) return false;
			if (a.ssOfferings != b.ssOfferings) return false;
			return true;
		}

		public static bool operator != (STStudentAttendanceForCourseStructure a, STStudentAttendanceForCourseStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STStudentAttendanceForCourseStructure)) return false;
			return (this == (STStudentAttendanceForCourseStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssEventWeekKey.GetHashCode()
				^ ssFaculty.GetHashCode()
				^ ssDay.GetHashCode()
				^ ssStart.GetHashCode()
				^ ssFinish.GetHashCode()
				^ ssDurationHours.GetHashCode()
				^ ssEventDate.GetHashCode()
				^ ssRooms.GetHashCode()
				^ ssStaff.GetHashCode()
				^ ssTitle.GetHashCode()
				^ ssStatus.GetHashCode()
				^ ssOfferings.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STStudentAttendanceForCourseStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssEventWeekKey = "";
			ssFaculty = "";
			ssDay = "";
			ssStart = "";
			ssFinish = "";
			ssDurationHours = 0.0M;
			ssEventDate = new DateTime(1900, 1, 1, 0, 0, 0);
			ssRooms = "";
			ssStaff = "";
			ssTitle = "";
			ssStatus = "";
			ssOfferings = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssEventWeekKey = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssFaculty = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssDay = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssStart = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssFinish = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssDurationHours = (decimal) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssEventDate = (DateTime) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssRooms = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssStaff = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			ssTitle = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			ssStatus = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			ssOfferings = (string) info.GetValue(fields[12] .Name, fields[12] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STStudentAttendanceForCourseStructure Duplicate() {
			STStudentAttendanceForCourseStructure t;
			t.ssStudentReference = this.ssStudentReference;
			t.ssEventWeekKey = this.ssEventWeekKey;
			t.ssFaculty = this.ssFaculty;
			t.ssDay = this.ssDay;
			t.ssStart = this.ssStart;
			t.ssFinish = this.ssFinish;
			t.ssDurationHours = this.ssDurationHours;
			t.ssEventDate = this.ssEventDate;
			t.ssRooms = this.ssRooms;
			t.ssStaff = this.ssStaff;
			t.ssTitle = this.ssTitle;
			t.ssStatus = this.ssStatus;
			t.ssOfferings = this.ssOfferings;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EventWeekKey")) VarValue.AppendAttribute(recordElem, "EventWeekKey", ssEventWeekKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EventWeekKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Faculty")) VarValue.AppendAttribute(recordElem, "Faculty", ssFaculty, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Faculty");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Day")) VarValue.AppendAttribute(recordElem, "Day", ssDay, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Day");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Start")) VarValue.AppendAttribute(recordElem, "Start", ssStart, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Start");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Finish")) VarValue.AppendAttribute(recordElem, "Finish", ssFinish, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Finish");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DurationHours")) VarValue.AppendAttribute(recordElem, "DurationHours", ssDurationHours, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "DurationHours");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EventDate")) VarValue.AppendAttribute(recordElem, "EventDate", ssEventDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "EventDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Rooms")) VarValue.AppendAttribute(recordElem, "Rooms", ssRooms, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Rooms");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Staff")) VarValue.AppendAttribute(recordElem, "Staff", ssStaff, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Staff");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Title")) VarValue.AppendAttribute(recordElem, "Title", ssTitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Title");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Status")) VarValue.AppendAttribute(recordElem, "Status", ssStatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Status");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Offerings")) VarValue.AppendAttribute(recordElem, "Offerings", ssOfferings, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Offerings");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "eventweekkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EventWeekKey")) variable.Value = ssEventWeekKey; else variable.Optimized = true;
			} else if (head == "faculty") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Faculty")) variable.Value = ssFaculty; else variable.Optimized = true;
			} else if (head == "day") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Day")) variable.Value = ssDay; else variable.Optimized = true;
			} else if (head == "start") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Start")) variable.Value = ssStart; else variable.Optimized = true;
			} else if (head == "finish") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Finish")) variable.Value = ssFinish; else variable.Optimized = true;
			} else if (head == "durationhours") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DurationHours")) variable.Value = ssDurationHours; else variable.Optimized = true;
			} else if (head == "eventdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EventDate")) variable.Value = ssEventDate; else variable.Optimized = true;
			} else if (head == "rooms") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Rooms")) variable.Value = ssRooms; else variable.Optimized = true;
			} else if (head == "staff") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Staff")) variable.Value = ssStaff; else variable.Optimized = true;
			} else if (head == "title") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Title")) variable.Value = ssTitle; else variable.Optimized = true;
			} else if (head == "status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Status")) variable.Value = ssStatus; else variable.Optimized = true;
			} else if (head == "offerings") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Offerings")) variable.Value = ssOfferings; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdEventWeekKey) {
				return ssEventWeekKey;
			} else if (key == IdFaculty) {
				return ssFaculty;
			} else if (key == IdDay) {
				return ssDay;
			} else if (key == IdStart) {
				return ssStart;
			} else if (key == IdFinish) {
				return ssFinish;
			} else if (key == IdDurationHours) {
				return ssDurationHours;
			} else if (key == IdEventDate) {
				return ssEventDate;
			} else if (key == IdRooms) {
				return ssRooms;
			} else if (key == IdStaff) {
				return ssStaff;
			} else if (key == IdTitle) {
				return ssTitle;
			} else if (key == IdStatus) {
				return ssStatus;
			} else if (key == IdOfferings) {
				return ssOfferings;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ssEventWeekKey = (string) other.AttributeGet(IdEventWeekKey);
			ssFaculty = (string) other.AttributeGet(IdFaculty);
			ssDay = (string) other.AttributeGet(IdDay);
			ssStart = (string) other.AttributeGet(IdStart);
			ssFinish = (string) other.AttributeGet(IdFinish);
			ssDurationHours = (decimal) other.AttributeGet(IdDurationHours);
			ssEventDate = (DateTime) other.AttributeGet(IdEventDate);
			ssRooms = (string) other.AttributeGet(IdRooms);
			ssStaff = (string) other.AttributeGet(IdStaff);
			ssTitle = (string) other.AttributeGet(IdTitle);
			ssStatus = (string) other.AttributeGet(IdStatus);
			ssOfferings = (string) other.AttributeGet(IdOfferings);
		}
	} // STStudentAttendanceForCourseStructure
	/// <summary>
	/// Structure <code>RCStudentAttendanceForCourseRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentAttendanceForCourseRecord: ISerializable, ITypedRecord<RCStudentAttendanceForCourseRecord> {
		private static readonly GlobalObjectKey IdStudentAttendanceForCourse = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*VOaZWyspev5ixFeHcDMu0w");

		public static void EnsureInitialized() {}

		static RCStudentAttendanceForCourseRecord() {
			ssCaseConferencing.RCStudentAttendanceForCourseRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("StudentAttendanceForCourse")]
		public STStudentAttendanceForCourseStructure ssSTStudentAttendanceForCourse;


		public static implicit operator STStudentAttendanceForCourseStructure(RCStudentAttendanceForCourseRecord r) {
			return r.ssSTStudentAttendanceForCourse;
		}

		public static implicit operator RCStudentAttendanceForCourseRecord(STStudentAttendanceForCourseStructure r) {
			RCStudentAttendanceForCourseRecord res = new RCStudentAttendanceForCourseRecord(null);
			res.ssSTStudentAttendanceForCourse = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCStudentAttendanceForCourseRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTStudentAttendanceForCourse = new STStudentAttendanceForCourseStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTStudentAttendanceForCourse.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTStudentAttendanceForCourse.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentAttendanceForCourseRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentAttendanceForCourseRecord a, RCStudentAttendanceForCourseRecord b) {
			if (a.ssSTStudentAttendanceForCourse != b.ssSTStudentAttendanceForCourse) return false;
			return true;
		}

		public static bool operator != (RCStudentAttendanceForCourseRecord a, RCStudentAttendanceForCourseRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentAttendanceForCourseRecord)) return false;
			return (this == (RCStudentAttendanceForCourseRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTStudentAttendanceForCourse.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentAttendanceForCourseRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTStudentAttendanceForCourse = new STStudentAttendanceForCourseStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTStudentAttendanceForCourse = (STStudentAttendanceForCourseStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTStudentAttendanceForCourse.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTStudentAttendanceForCourse.InternalRecursiveSave();
		}


		public RCStudentAttendanceForCourseRecord Duplicate() {
			RCStudentAttendanceForCourseRecord t;
			t.ssSTStudentAttendanceForCourse = (STStudentAttendanceForCourseStructure) this.ssSTStudentAttendanceForCourse.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTStudentAttendanceForCourse.ToXml(this, recordElem, "StudentAttendanceForCourse", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentattendanceforcourse") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentAttendanceForCourse")) variable.Value = ssSTStudentAttendanceForCourse; else variable.Optimized = true;
				variable.SetFieldName("studentattendanceforcourse");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentAttendanceForCourse) {
				return ssSTStudentAttendanceForCourse;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTStudentAttendanceForCourse.FillFromOther((IRecord) other.AttributeGet(IdStudentAttendanceForCourse));
		}
	} // RCStudentAttendanceForCourseRecord
	/// <summary>
	/// RecordList type <code>RLStudentAttendanceForCourseRecordList</code> that represents a record list
	///  of <code>StudentAttendanceForCourse</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentAttendanceForCourseRecordList: GenericRecordList<RCStudentAttendanceForCourseRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		static RLStudentAttendanceForCourseRecordList() {
			ssCaseConferencing.RLStudentAttendanceForCourseRecordListTypeFactoryImpl.InitializeFactory();
		}

		protected override RCStudentAttendanceForCourseRecord GetElementDefaultValue() {
			return new RCStudentAttendanceForCourseRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentAttendanceForCourseRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentAttendanceForCourseRecordList recordlist, Func<RCStudentAttendanceForCourseRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentAttendanceForCourseRecordList ToList<T>(T[] array, Func <T, RCStudentAttendanceForCourseRecord> converter) {
			RLStudentAttendanceForCourseRecordList result = new RLStudentAttendanceForCourseRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentAttendanceForCourseRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceForCourseRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceForCourseRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentAttendanceForCourseRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentAttendanceForCourseRecord> NewList() {
			return new RLStudentAttendanceForCourseRecordList();
		}


	} // RLStudentAttendanceForCourseRecordList
	/// <summary>
	/// RecordList type <code>RLStudentAttendanceForCourseList</code> that represents a record list of
	///  <code>Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Decimal, Date</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentAttendanceForCourseList: GenericRecordList<STStudentAttendanceForCourseStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STStudentAttendanceForCourseStructure GetElementDefaultValue() {
			return new STStudentAttendanceForCourseStructure("");
		}

		public T[] ToArray<T>(Func<STStudentAttendanceForCourseStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentAttendanceForCourseList recordlist, Func<STStudentAttendanceForCourseStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentAttendanceForCourseList ToList<T>(T[] array, Func <T, STStudentAttendanceForCourseStructure> converter) {
			RLStudentAttendanceForCourseList result = new RLStudentAttendanceForCourseList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentAttendanceForCourseList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceForCourseList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttendanceForCourseList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentAttendanceForCourseList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STStudentAttendanceForCourseStructure> NewList() {
			return new RLStudentAttendanceForCourseList();
		}


	} // RLStudentAttendanceForCourseList
}

namespace ssCaseConferencing {
	[XmlType("StudentAttendanceForCourse")]
	public class WORCStudentAttendanceForCourseRecord {
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("EventWeekKey")]
		public string varWSEventWeekKey;

		[System.Xml.Serialization.XmlElement("Faculty")]
		public string varWSFaculty;

		[System.Xml.Serialization.XmlElement("Day")]
		public string varWSDay;

		[System.Xml.Serialization.XmlElement("Start")]
		public string varWSStart;

		[System.Xml.Serialization.XmlElement("Finish")]
		public string varWSFinish;

		[System.Xml.Serialization.XmlElement("DurationHours")]
		public decimal varWSDurationHours;

		[System.Xml.Serialization.XmlElement("EventDate", DataType= "date")]
		public DateTime varWSEventDate;

		[System.Xml.Serialization.XmlElement("Rooms")]
		public string varWSRooms;

		[System.Xml.Serialization.XmlElement("Staff")]
		public string varWSStaff;

		[System.Xml.Serialization.XmlElement("Title")]
		public string varWSTitle;

		[System.Xml.Serialization.XmlElement("Status")]
		public string varWSStatus;

		[System.Xml.Serialization.XmlElement("Offerings")]
		public string varWSOfferings;

		public WORCStudentAttendanceForCourseRecord() {
			varWSStudentReference = (string) "";
			varWSEventWeekKey = (string) "";
			varWSFaculty = (string) "";
			varWSDay = (string) "";
			varWSStart = (string) "";
			varWSFinish = (string) "";
			varWSDurationHours = (decimal) 0.0M;
			varWSEventDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSRooms = (string) "";
			varWSStaff = (string) "";
			varWSTitle = (string) "";
			varWSStatus = (string) "";
			varWSOfferings = (string) "";
		}

		public WORCStudentAttendanceForCourseRecord(STStudentAttendanceForCourseStructure r) {
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSEventWeekKey = BaseAppUtils.RemoveControlChars(r.ssEventWeekKey);
			varWSFaculty = BaseAppUtils.RemoveControlChars(r.ssFaculty);
			varWSDay = BaseAppUtils.RemoveControlChars(r.ssDay);
			varWSStart = BaseAppUtils.RemoveControlChars(r.ssStart);
			varWSFinish = BaseAppUtils.RemoveControlChars(r.ssFinish);
			varWSDurationHours = (decimal) r.ssDurationHours;
			varWSEventDate = (DateTime) r.ssEventDate;
			varWSRooms = BaseAppUtils.RemoveControlChars(r.ssRooms);
			varWSStaff = BaseAppUtils.RemoveControlChars(r.ssStaff);
			varWSTitle = BaseAppUtils.RemoveControlChars(r.ssTitle);
			varWSStatus = BaseAppUtils.RemoveControlChars(r.ssStatus);
			varWSOfferings = BaseAppUtils.RemoveControlChars(r.ssOfferings);
		}

		public static RLStudentAttendanceForCourseList ToRecordList(WORCStudentAttendanceForCourseRecord[] array) {
			RLStudentAttendanceForCourseList rl = new RLStudentAttendanceForCourseList();
			if (array != null) {
				foreach(WORCStudentAttendanceForCourseRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentAttendanceForCourseRecord[] FromRecordList(RLStudentAttendanceForCourseList rl) {
			WORCStudentAttendanceForCourseRecord[] array = new WORCStudentAttendanceForCourseRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentAttendanceForCourseRecord {
		public static implicit operator WORCStudentAttendanceForCourseRecord(RCStudentAttendanceForCourseRecord r) {
			return new WORCStudentAttendanceForCourseRecord(r.ssSTStudentAttendanceForCourse);
		}

		public static implicit operator RCStudentAttendanceForCourseRecord(WORCStudentAttendanceForCourseRecord w) {
			RCStudentAttendanceForCourseRecord r = new RCStudentAttendanceForCourseRecord("");
			if (w != null) {
				r.ssSTStudentAttendanceForCourse = w;
			}
			return r;
		}

	}

	partial struct STStudentAttendanceForCourseStructure {
		public static implicit operator WORCStudentAttendanceForCourseRecord(STStudentAttendanceForCourseStructure r) {
			return new WORCStudentAttendanceForCourseRecord(r);
		}

		public static implicit operator STStudentAttendanceForCourseStructure(WORCStudentAttendanceForCourseRecord w) {
			STStudentAttendanceForCourseStructure r = new STStudentAttendanceForCourseStructure("");
			if (w != null) {
				r.ssStudentReference = ((string) w.varWSStudentReference ?? "");
				r.ssEventWeekKey = ((string) w.varWSEventWeekKey ?? "");
				r.ssFaculty = ((string) w.varWSFaculty ?? "");
				r.ssDay = ((string) w.varWSDay ?? "");
				r.ssStart = ((string) w.varWSStart ?? "");
				r.ssFinish = ((string) w.varWSFinish ?? "");
				r.ssDurationHours = (decimal) w.varWSDurationHours;
				r.ssEventDate = (DateTime) w.varWSEventDate;
				r.ssRooms = ((string) w.varWSRooms ?? "");
				r.ssStaff = ((string) w.varWSStaff ?? "");
				r.ssTitle = ((string) w.varWSTitle ?? "");
				r.ssStatus = ((string) w.varWSStatus ?? "");
				r.ssOfferings = ((string) w.varWSOfferings ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentAttendanceForCourseRecordList {
		public WORCStudentAttendanceForCourseRecord[] Array;


		public WORLStudentAttendanceForCourseRecordList(WORCStudentAttendanceForCourseRecord[] r) {
			if (r == null)
			Array = new WORCStudentAttendanceForCourseRecord[0];
			else
			Array = r;
		}
		public WORLStudentAttendanceForCourseRecordList() {
			Array = new WORCStudentAttendanceForCourseRecord[0];
		}

		public WORLStudentAttendanceForCourseRecordList(RLStudentAttendanceForCourseRecordList rl) {
			rl=(RLStudentAttendanceForCourseRecordList) rl.Duplicate();
			Array = new WORCStudentAttendanceForCourseRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentAttendanceForCourseRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentAttendanceForCourseRecordList {
		public static implicit operator RLStudentAttendanceForCourseRecordList(WORCStudentAttendanceForCourseRecord[] array) {
			RLStudentAttendanceForCourseRecordList rl = new RLStudentAttendanceForCourseRecordList();
			if (array != null) {
				foreach(WORCStudentAttendanceForCourseRecord val in array) {
					rl.Append((RCStudentAttendanceForCourseRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentAttendanceForCourseRecord[](RLStudentAttendanceForCourseRecordList rl) {
			WORCStudentAttendanceForCourseRecord[] array = new WORCStudentAttendanceForCourseRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentAttendanceForCourseRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentAttendanceForCourseRecordList {
		public static implicit operator RLStudentAttendanceForCourseRecordList(WORLStudentAttendanceForCourseRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentAttendanceForCourseRecordList(RLStudentAttendanceForCourseRecordList rl) {
			return new WORLStudentAttendanceForCourseRecordList(rl);
		}
		public static implicit operator WORCStudentAttendanceForCourseRecord[](WORLStudentAttendanceForCourseRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentAttendanceForCourseRecordList(WORCStudentAttendanceForCourseRecord[] array) {
			return new WORLStudentAttendanceForCourseRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentAttendanceForCourseList {
		public WORCStudentAttendanceForCourseRecord[] Array;


		public WORLStudentAttendanceForCourseList(WORCStudentAttendanceForCourseRecord[] r) {
			if (r == null)
			Array = new WORCStudentAttendanceForCourseRecord[0];
			else
			Array = r;
		}
		public WORLStudentAttendanceForCourseList() {
			Array = new WORCStudentAttendanceForCourseRecord[0];
		}

		public WORLStudentAttendanceForCourseList(RLStudentAttendanceForCourseList rl) {
			rl=(RLStudentAttendanceForCourseList) rl.Duplicate();
			Array = new WORCStudentAttendanceForCourseRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentAttendanceForCourseList {
		public static implicit operator RLStudentAttendanceForCourseList(WORCStudentAttendanceForCourseRecord[] array) {
			RLStudentAttendanceForCourseList rl = new RLStudentAttendanceForCourseList();
			if (array != null) {
				foreach(WORCStudentAttendanceForCourseRecord val in array) {
					rl.Append((STStudentAttendanceForCourseStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentAttendanceForCourseRecord[](RLStudentAttendanceForCourseList rl) {
			WORCStudentAttendanceForCourseRecord[] array = new WORCStudentAttendanceForCourseRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STStudentAttendanceForCourseStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentAttendanceForCourseList {
		public static implicit operator RLStudentAttendanceForCourseList(WORLStudentAttendanceForCourseList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentAttendanceForCourseList(RLStudentAttendanceForCourseList rl) {
			return new WORLStudentAttendanceForCourseList(rl);
		}
		public static implicit operator WORCStudentAttendanceForCourseRecord[](WORLStudentAttendanceForCourseList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentAttendanceForCourseList(WORCStudentAttendanceForCourseRecord[] array) {
			return new WORLStudentAttendanceForCourseList(array);
		}
	}
}

