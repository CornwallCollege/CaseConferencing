/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STStudentGlobalRAGStructure</code> that represents the Service Studio structure
	///  <code>StudentGlobalRAG</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STStudentGlobalRAGStructure: ISerializable, ITypedRecord<STStudentGlobalRAGStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdLogId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*qXG_ZZqttU+b+YKof+FH3g");
		private static readonly GlobalObjectKey IdStudentId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*3cCFLOAEbUqt7G9HHCu6XA");
		private static readonly GlobalObjectKey IdStudentRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Qm8X8OpN60WQqNc6gF9YtA");
		private static readonly GlobalObjectKey IdCauseForConcernRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*iSHoFUVnn0a0NRLaA3vUGA");
		private static readonly GlobalObjectKey IdVocShortTermRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Q2ggicv2NketL5T6bXdDIQ");
		private static readonly GlobalObjectKey IdVocOverallRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*9oGPDe9jL0CaOO_GjTzwbQ");
		private static readonly GlobalObjectKey IdMathShortTermRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*MvXtvC0h1kijrv26PMxFCQ");
		private static readonly GlobalObjectKey IdMathOverallRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*LeJxZz46U0WXmyYWPtfAQg");
		private static readonly GlobalObjectKey IdEngShortTermRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*PjJp4ZDxVE6Xj11Gyxizcg");
		private static readonly GlobalObjectKey IdEngOverallRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*UPp+tpAU_k69Zi5zeq1DdA");
		private static readonly GlobalObjectKey IdMLWShortTermRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*cQxb5ojFa0K_Zedf8_ZizA");
		private static readonly GlobalObjectKey IdMLWOverallRAG = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*2kth1rGKv0mARTFZNmc1fA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("LogId")]
		public int ssLogId;

		[System.Xml.Serialization.XmlElement("StudentId")]
		public string ssStudentId;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public string ssStudentRAG;

		[System.Xml.Serialization.XmlElement("CauseForConcernRAG")]
		public string ssCauseForConcernRAG;

		[System.Xml.Serialization.XmlElement("VocShortTermRAG")]
		public string ssVocShortTermRAG;

		[System.Xml.Serialization.XmlElement("VocOverallRAG")]
		public string ssVocOverallRAG;

		[System.Xml.Serialization.XmlElement("MathShortTermRAG")]
		public string ssMathShortTermRAG;

		[System.Xml.Serialization.XmlElement("MathOverallRAG")]
		public string ssMathOverallRAG;

		[System.Xml.Serialization.XmlElement("EngShortTermRAG")]
		public string ssEngShortTermRAG;

		[System.Xml.Serialization.XmlElement("EngOverallRAG")]
		public string ssEngOverallRAG;

		[System.Xml.Serialization.XmlElement("MLWShortTermRAG")]
		public string ssMLWShortTermRAG;

		[System.Xml.Serialization.XmlElement("MLWOverallRAG")]
		public string ssMLWOverallRAG;


		public BitArray OptimizedAttributes;

		public STStudentGlobalRAGStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssLogId = 0;
			ssStudentId = "";
			ssStudentRAG = "";
			ssCauseForConcernRAG = "";
			ssVocShortTermRAG = "";
			ssVocOverallRAG = "";
			ssMathShortTermRAG = "";
			ssMathOverallRAG = "";
			ssEngShortTermRAG = "";
			ssEngOverallRAG = "";
			ssMLWShortTermRAG = "";
			ssMLWOverallRAG = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssLogId = r.ReadEntityReference(index++, "StudentGlobalRAG.LogId", 0);
			ssStudentId = r.ReadTextEntityReference(index++, "StudentGlobalRAG.StudentId", "");
			ssStudentRAG = r.ReadTextEntityReference(index++, "StudentGlobalRAG.StudentRAG", "");
			ssCauseForConcernRAG = r.ReadTextEntityReference(index++, "StudentGlobalRAG.CauseForConcernRAG", "");
			ssVocShortTermRAG = r.ReadTextEntityReference(index++, "StudentGlobalRAG.VocShortTermRAG", "");
			ssVocOverallRAG = r.ReadTextEntityReference(index++, "StudentGlobalRAG.VocOverallRAG", "");
			ssMathShortTermRAG = r.ReadTextEntityReference(index++, "StudentGlobalRAG.MathShortTermRAG", "");
			ssMathOverallRAG = r.ReadTextEntityReference(index++, "StudentGlobalRAG.MathOverallRAG", "");
			ssEngShortTermRAG = r.ReadTextEntityReference(index++, "StudentGlobalRAG.EngShortTermRAG", "");
			ssEngOverallRAG = r.ReadTextEntityReference(index++, "StudentGlobalRAG.EngOverallRAG", "");
			ssMLWShortTermRAG = r.ReadTextEntityReference(index++, "StudentGlobalRAG.MLWShortTermRAG", "");
			ssMLWOverallRAG = r.ReadTextEntityReference(index++, "StudentGlobalRAG.MLWOverallRAG", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STStudentGlobalRAGStructure r) {
			this = r;
		}


		public static bool operator == (STStudentGlobalRAGStructure a, STStudentGlobalRAGStructure b) {
			if (a.ssLogId != b.ssLogId) return false;
			if (a.ssStudentId != b.ssStudentId) return false;
			if (a.ssStudentRAG != b.ssStudentRAG) return false;
			if (a.ssCauseForConcernRAG != b.ssCauseForConcernRAG) return false;
			if (a.ssVocShortTermRAG != b.ssVocShortTermRAG) return false;
			if (a.ssVocOverallRAG != b.ssVocOverallRAG) return false;
			if (a.ssMathShortTermRAG != b.ssMathShortTermRAG) return false;
			if (a.ssMathOverallRAG != b.ssMathOverallRAG) return false;
			if (a.ssEngShortTermRAG != b.ssEngShortTermRAG) return false;
			if (a.ssEngOverallRAG != b.ssEngOverallRAG) return false;
			if (a.ssMLWShortTermRAG != b.ssMLWShortTermRAG) return false;
			if (a.ssMLWOverallRAG != b.ssMLWOverallRAG) return false;
			return true;
		}

		public static bool operator != (STStudentGlobalRAGStructure a, STStudentGlobalRAGStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STStudentGlobalRAGStructure)) return false;
			return (this == (STStudentGlobalRAGStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssLogId.GetHashCode()
				^ ssStudentId.GetHashCode()
				^ ssStudentRAG.GetHashCode()
				^ ssCauseForConcernRAG.GetHashCode()
				^ ssVocShortTermRAG.GetHashCode()
				^ ssVocOverallRAG.GetHashCode()
				^ ssMathShortTermRAG.GetHashCode()
				^ ssMathOverallRAG.GetHashCode()
				^ ssEngShortTermRAG.GetHashCode()
				^ ssEngOverallRAG.GetHashCode()
				^ ssMLWShortTermRAG.GetHashCode()
				^ ssMLWOverallRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STStudentGlobalRAGStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssLogId = 0;
			ssStudentId = "";
			ssStudentRAG = "";
			ssCauseForConcernRAG = "";
			ssVocShortTermRAG = "";
			ssVocOverallRAG = "";
			ssMathShortTermRAG = "";
			ssMathOverallRAG = "";
			ssEngShortTermRAG = "";
			ssEngOverallRAG = "";
			ssMLWShortTermRAG = "";
			ssMLWOverallRAG = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssLogId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssStudentId = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssStudentRAG = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssCauseForConcernRAG = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssVocShortTermRAG = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssVocOverallRAG = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssMathShortTermRAG = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssMathOverallRAG = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssEngShortTermRAG = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssEngOverallRAG = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			ssMLWShortTermRAG = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			ssMLWOverallRAG = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STStudentGlobalRAGStructure Duplicate() {
			STStudentGlobalRAGStructure t;
			t.ssLogId = this.ssLogId;
			t.ssStudentId = this.ssStudentId;
			t.ssStudentRAG = this.ssStudentRAG;
			t.ssCauseForConcernRAG = this.ssCauseForConcernRAG;
			t.ssVocShortTermRAG = this.ssVocShortTermRAG;
			t.ssVocOverallRAG = this.ssVocOverallRAG;
			t.ssMathShortTermRAG = this.ssMathShortTermRAG;
			t.ssMathOverallRAG = this.ssMathOverallRAG;
			t.ssEngShortTermRAG = this.ssEngShortTermRAG;
			t.ssEngOverallRAG = this.ssEngOverallRAG;
			t.ssMLWShortTermRAG = this.ssMLWShortTermRAG;
			t.ssMLWOverallRAG = this.ssMLWOverallRAG;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogId")) VarValue.AppendAttribute(recordElem, "LogId", ssLogId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LogId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentId")) VarValue.AppendAttribute(recordElem, "StudentId", ssStudentId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentRAG")) VarValue.AppendAttribute(recordElem, "StudentRAG", ssStudentRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CauseForConcernRAG")) VarValue.AppendAttribute(recordElem, "CauseForConcernRAG", ssCauseForConcernRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CauseForConcernRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VocShortTermRAG")) VarValue.AppendAttribute(recordElem, "VocShortTermRAG", ssVocShortTermRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "VocShortTermRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VocOverallRAG")) VarValue.AppendAttribute(recordElem, "VocOverallRAG", ssVocOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "VocOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathShortTermRAG")) VarValue.AppendAttribute(recordElem, "MathShortTermRAG", ssMathShortTermRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MathShortTermRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathOverallRAG")) VarValue.AppendAttribute(recordElem, "MathOverallRAG", ssMathOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MathOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EngShortTermRAG")) VarValue.AppendAttribute(recordElem, "EngShortTermRAG", ssEngShortTermRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EngShortTermRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EngOverallRAG")) VarValue.AppendAttribute(recordElem, "EngOverallRAG", ssEngOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EngOverallRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWShortTermRAG")) VarValue.AppendAttribute(recordElem, "MLWShortTermRAG", ssMLWShortTermRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MLWShortTermRAG");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLWOverallRAG")) VarValue.AppendAttribute(recordElem, "MLWOverallRAG", ssMLWOverallRAG, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MLWOverallRAG");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "logid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogId")) variable.Value = ssLogId; else variable.Optimized = true;
			} else if (head == "studentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentId")) variable.Value = ssStudentId; else variable.Optimized = true;
			} else if (head == "studentrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentRAG")) variable.Value = ssStudentRAG; else variable.Optimized = true;
			} else if (head == "causeforconcernrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CauseForConcernRAG")) variable.Value = ssCauseForConcernRAG; else variable.Optimized = true;
			} else if (head == "vocshorttermrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VocShortTermRAG")) variable.Value = ssVocShortTermRAG; else variable.Optimized = true;
			} else if (head == "vocoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VocOverallRAG")) variable.Value = ssVocOverallRAG; else variable.Optimized = true;
			} else if (head == "mathshorttermrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathShortTermRAG")) variable.Value = ssMathShortTermRAG; else variable.Optimized = true;
			} else if (head == "mathoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathOverallRAG")) variable.Value = ssMathOverallRAG; else variable.Optimized = true;
			} else if (head == "engshorttermrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EngShortTermRAG")) variable.Value = ssEngShortTermRAG; else variable.Optimized = true;
			} else if (head == "engoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EngOverallRAG")) variable.Value = ssEngOverallRAG; else variable.Optimized = true;
			} else if (head == "mlwshorttermrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWShortTermRAG")) variable.Value = ssMLWShortTermRAG; else variable.Optimized = true;
			} else if (head == "mlwoverallrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLWOverallRAG")) variable.Value = ssMLWOverallRAG; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLogId) {
				return ssLogId;
			} else if (key == IdStudentId) {
				return ssStudentId;
			} else if (key == IdStudentRAG) {
				return ssStudentRAG;
			} else if (key == IdCauseForConcernRAG) {
				return ssCauseForConcernRAG;
			} else if (key == IdVocShortTermRAG) {
				return ssVocShortTermRAG;
			} else if (key == IdVocOverallRAG) {
				return ssVocOverallRAG;
			} else if (key == IdMathShortTermRAG) {
				return ssMathShortTermRAG;
			} else if (key == IdMathOverallRAG) {
				return ssMathOverallRAG;
			} else if (key == IdEngShortTermRAG) {
				return ssEngShortTermRAG;
			} else if (key == IdEngOverallRAG) {
				return ssEngOverallRAG;
			} else if (key == IdMLWShortTermRAG) {
				return ssMLWShortTermRAG;
			} else if (key == IdMLWOverallRAG) {
				return ssMLWOverallRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssLogId = (int) other.AttributeGet(IdLogId);
			ssStudentId = (string) other.AttributeGet(IdStudentId);
			ssStudentRAG = (string) other.AttributeGet(IdStudentRAG);
			ssCauseForConcernRAG = (string) other.AttributeGet(IdCauseForConcernRAG);
			ssVocShortTermRAG = (string) other.AttributeGet(IdVocShortTermRAG);
			ssVocOverallRAG = (string) other.AttributeGet(IdVocOverallRAG);
			ssMathShortTermRAG = (string) other.AttributeGet(IdMathShortTermRAG);
			ssMathOverallRAG = (string) other.AttributeGet(IdMathOverallRAG);
			ssEngShortTermRAG = (string) other.AttributeGet(IdEngShortTermRAG);
			ssEngOverallRAG = (string) other.AttributeGet(IdEngOverallRAG);
			ssMLWShortTermRAG = (string) other.AttributeGet(IdMLWShortTermRAG);
			ssMLWOverallRAG = (string) other.AttributeGet(IdMLWOverallRAG);
		}
	} // STStudentGlobalRAGStructure
	/// <summary>
	/// Structure <code>RCStudentGlobalRAGRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentGlobalRAGRecord: ISerializable, ITypedRecord<RCStudentGlobalRAGRecord> {
		private static readonly GlobalObjectKey IdStudentGlobalRAG = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*hRgu5zpI3T4M4znAHN+VDw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentGlobalRAG")]
		public STStudentGlobalRAGStructure ssSTStudentGlobalRAG;


		public static implicit operator STStudentGlobalRAGStructure(RCStudentGlobalRAGRecord r) {
			return r.ssSTStudentGlobalRAG;
		}

		public static implicit operator RCStudentGlobalRAGRecord(STStudentGlobalRAGStructure r) {
			RCStudentGlobalRAGRecord res = new RCStudentGlobalRAGRecord(null);
			res.ssSTStudentGlobalRAG = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCStudentGlobalRAGRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTStudentGlobalRAG = new STStudentGlobalRAGStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTStudentGlobalRAG.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTStudentGlobalRAG.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentGlobalRAGRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentGlobalRAGRecord a, RCStudentGlobalRAGRecord b) {
			if (a.ssSTStudentGlobalRAG != b.ssSTStudentGlobalRAG) return false;
			return true;
		}

		public static bool operator != (RCStudentGlobalRAGRecord a, RCStudentGlobalRAGRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentGlobalRAGRecord)) return false;
			return (this == (RCStudentGlobalRAGRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTStudentGlobalRAG.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentGlobalRAGRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTStudentGlobalRAG = new STStudentGlobalRAGStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTStudentGlobalRAG = (STStudentGlobalRAGStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTStudentGlobalRAG.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTStudentGlobalRAG.InternalRecursiveSave();
		}


		public RCStudentGlobalRAGRecord Duplicate() {
			RCStudentGlobalRAGRecord t;
			t.ssSTStudentGlobalRAG = (STStudentGlobalRAGStructure) this.ssSTStudentGlobalRAG.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTStudentGlobalRAG.ToXml(this, recordElem, "StudentGlobalRAG", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentglobalrag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentGlobalRAG")) variable.Value = ssSTStudentGlobalRAG; else variable.Optimized = true;
				variable.SetFieldName("studentglobalrag");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentGlobalRAG) {
				return ssSTStudentGlobalRAG;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTStudentGlobalRAG.FillFromOther((IRecord) other.AttributeGet(IdStudentGlobalRAG));
		}
	} // RCStudentGlobalRAGRecord
	/// <summary>
	/// RecordList type <code>RLStudentGlobalRAGRecordList</code> that represents a record list of
	///  <code>StudentGlobalRAG</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentGlobalRAGRecordList: GenericRecordList<RCStudentGlobalRAGRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentGlobalRAGRecord GetElementDefaultValue() {
			return new RCStudentGlobalRAGRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentGlobalRAGRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentGlobalRAGRecordList recordlist, Func<RCStudentGlobalRAGRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentGlobalRAGRecordList ToList<T>(T[] array, Func <T, RCStudentGlobalRAGRecord> converter) {
			RLStudentGlobalRAGRecordList result = new RLStudentGlobalRAGRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentGlobalRAGRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentGlobalRAGRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentGlobalRAGRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentGlobalRAGRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentGlobalRAGRecord> NewList() {
			return new RLStudentGlobalRAGRecordList();
		}


	} // RLStudentGlobalRAGRecordList
	/// <summary>
	/// RecordList type <code>RLStudentGlobalRAGList</code> that represents a record list of
	///  <code>StudentIdentifier, StudentLogIdentifier, RAGStatusIdentifier, RAGStatusIdentifier
	/// , RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier,
	///  RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier, RAGStatusIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentGlobalRAGList: GenericRecordList<STStudentGlobalRAGStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STStudentGlobalRAGStructure GetElementDefaultValue() {
			return new STStudentGlobalRAGStructure("");
		}

		public T[] ToArray<T>(Func<STStudentGlobalRAGStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentGlobalRAGList recordlist, Func<STStudentGlobalRAGStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentGlobalRAGList ToList<T>(T[] array, Func <T, STStudentGlobalRAGStructure> converter) {
			RLStudentGlobalRAGList result = new RLStudentGlobalRAGList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentGlobalRAGList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentGlobalRAGList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentGlobalRAGList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentGlobalRAGList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STStudentGlobalRAGStructure> NewList() {
			return new RLStudentGlobalRAGList();
		}


	} // RLStudentGlobalRAGList
}

namespace ssCaseConferencing {
	[XmlType("StudentGlobalRAG")]
	public class WORCStudentGlobalRAGRecord {
		[System.Xml.Serialization.XmlElement("LogId")]
		public int varWSLogId;

		[System.Xml.Serialization.XmlElement("StudentId")]
		public string varWSStudentId;

		[System.Xml.Serialization.XmlElement("StudentRAG")]
		public string varWSStudentRAG;

		[System.Xml.Serialization.XmlElement("CauseForConcernRAG")]
		public string varWSCauseForConcernRAG;

		[System.Xml.Serialization.XmlElement("VocShortTermRAG")]
		public string varWSVocShortTermRAG;

		[System.Xml.Serialization.XmlElement("VocOverallRAG")]
		public string varWSVocOverallRAG;

		[System.Xml.Serialization.XmlElement("MathShortTermRAG")]
		public string varWSMathShortTermRAG;

		[System.Xml.Serialization.XmlElement("MathOverallRAG")]
		public string varWSMathOverallRAG;

		[System.Xml.Serialization.XmlElement("EngShortTermRAG")]
		public string varWSEngShortTermRAG;

		[System.Xml.Serialization.XmlElement("EngOverallRAG")]
		public string varWSEngOverallRAG;

		[System.Xml.Serialization.XmlElement("MLWShortTermRAG")]
		public string varWSMLWShortTermRAG;

		[System.Xml.Serialization.XmlElement("MLWOverallRAG")]
		public string varWSMLWOverallRAG;

		public WORCStudentGlobalRAGRecord() {
			varWSLogId = (int) 0;
			varWSStudentId = (string) "";
			varWSStudentRAG = (string) "";
			varWSCauseForConcernRAG = (string) "";
			varWSVocShortTermRAG = (string) "";
			varWSVocOverallRAG = (string) "";
			varWSMathShortTermRAG = (string) "";
			varWSMathOverallRAG = (string) "";
			varWSEngShortTermRAG = (string) "";
			varWSEngOverallRAG = (string) "";
			varWSMLWShortTermRAG = (string) "";
			varWSMLWOverallRAG = (string) "";
		}

		public WORCStudentGlobalRAGRecord(STStudentGlobalRAGStructure r) {
			varWSLogId = (int) r.ssLogId;
			varWSStudentId = BaseAppUtils.RemoveControlChars(r.ssStudentId);
			varWSStudentRAG = BaseAppUtils.RemoveControlChars(r.ssStudentRAG);
			varWSCauseForConcernRAG = BaseAppUtils.RemoveControlChars(r.ssCauseForConcernRAG);
			varWSVocShortTermRAG = BaseAppUtils.RemoveControlChars(r.ssVocShortTermRAG);
			varWSVocOverallRAG = BaseAppUtils.RemoveControlChars(r.ssVocOverallRAG);
			varWSMathShortTermRAG = BaseAppUtils.RemoveControlChars(r.ssMathShortTermRAG);
			varWSMathOverallRAG = BaseAppUtils.RemoveControlChars(r.ssMathOverallRAG);
			varWSEngShortTermRAG = BaseAppUtils.RemoveControlChars(r.ssEngShortTermRAG);
			varWSEngOverallRAG = BaseAppUtils.RemoveControlChars(r.ssEngOverallRAG);
			varWSMLWShortTermRAG = BaseAppUtils.RemoveControlChars(r.ssMLWShortTermRAG);
			varWSMLWOverallRAG = BaseAppUtils.RemoveControlChars(r.ssMLWOverallRAG);
		}

		public static RLStudentGlobalRAGList ToRecordList(WORCStudentGlobalRAGRecord[] array) {
			RLStudentGlobalRAGList rl = new RLStudentGlobalRAGList();
			if (array != null) {
				foreach(WORCStudentGlobalRAGRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentGlobalRAGRecord[] FromRecordList(RLStudentGlobalRAGList rl) {
			WORCStudentGlobalRAGRecord[] array = new WORCStudentGlobalRAGRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentGlobalRAGRecord {
		public static implicit operator WORCStudentGlobalRAGRecord(RCStudentGlobalRAGRecord r) {
			return new WORCStudentGlobalRAGRecord(r.ssSTStudentGlobalRAG);
		}

		public static implicit operator RCStudentGlobalRAGRecord(WORCStudentGlobalRAGRecord w) {
			RCStudentGlobalRAGRecord r = new RCStudentGlobalRAGRecord("");
			if (w != null) {
				r.ssSTStudentGlobalRAG = w;
			}
			return r;
		}

	}

	partial struct STStudentGlobalRAGStructure {
		public static implicit operator WORCStudentGlobalRAGRecord(STStudentGlobalRAGStructure r) {
			return new WORCStudentGlobalRAGRecord(r);
		}

		public static implicit operator STStudentGlobalRAGStructure(WORCStudentGlobalRAGRecord w) {
			STStudentGlobalRAGStructure r = new STStudentGlobalRAGStructure("");
			if (w != null) {
				r.ssLogId = (int) w.varWSLogId;
				r.ssStudentId = (string) w.varWSStudentId;
				r.ssStudentRAG = (string) w.varWSStudentRAG;
				r.ssCauseForConcernRAG = (string) w.varWSCauseForConcernRAG;
				r.ssVocShortTermRAG = (string) w.varWSVocShortTermRAG;
				r.ssVocOverallRAG = (string) w.varWSVocOverallRAG;
				r.ssMathShortTermRAG = (string) w.varWSMathShortTermRAG;
				r.ssMathOverallRAG = (string) w.varWSMathOverallRAG;
				r.ssEngShortTermRAG = (string) w.varWSEngShortTermRAG;
				r.ssEngOverallRAG = (string) w.varWSEngOverallRAG;
				r.ssMLWShortTermRAG = (string) w.varWSMLWShortTermRAG;
				r.ssMLWOverallRAG = (string) w.varWSMLWOverallRAG;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentGlobalRAGRecordList {
		public WORCStudentGlobalRAGRecord[] Array;


		public WORLStudentGlobalRAGRecordList(WORCStudentGlobalRAGRecord[] r) {
			if (r == null)
			Array = new WORCStudentGlobalRAGRecord[0];
			else
			Array = r;
		}
		public WORLStudentGlobalRAGRecordList() {
			Array = new WORCStudentGlobalRAGRecord[0];
		}

		public WORLStudentGlobalRAGRecordList(RLStudentGlobalRAGRecordList rl) {
			rl=(RLStudentGlobalRAGRecordList) rl.Duplicate();
			Array = new WORCStudentGlobalRAGRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentGlobalRAGRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentGlobalRAGRecordList {
		public static implicit operator RLStudentGlobalRAGRecordList(WORCStudentGlobalRAGRecord[] array) {
			RLStudentGlobalRAGRecordList rl = new RLStudentGlobalRAGRecordList();
			if (array != null) {
				foreach(WORCStudentGlobalRAGRecord val in array) {
					rl.Append((RCStudentGlobalRAGRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentGlobalRAGRecord[](RLStudentGlobalRAGRecordList rl) {
			WORCStudentGlobalRAGRecord[] array = new WORCStudentGlobalRAGRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentGlobalRAGRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentGlobalRAGRecordList {
		public static implicit operator RLStudentGlobalRAGRecordList(WORLStudentGlobalRAGRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentGlobalRAGRecordList(RLStudentGlobalRAGRecordList rl) {
			return new WORLStudentGlobalRAGRecordList(rl);
		}
		public static implicit operator WORCStudentGlobalRAGRecord[](WORLStudentGlobalRAGRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentGlobalRAGRecordList(WORCStudentGlobalRAGRecord[] array) {
			return new WORLStudentGlobalRAGRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentGlobalRAGList {
		public WORCStudentGlobalRAGRecord[] Array;


		public WORLStudentGlobalRAGList(WORCStudentGlobalRAGRecord[] r) {
			if (r == null)
			Array = new WORCStudentGlobalRAGRecord[0];
			else
			Array = r;
		}
		public WORLStudentGlobalRAGList() {
			Array = new WORCStudentGlobalRAGRecord[0];
		}

		public WORLStudentGlobalRAGList(RLStudentGlobalRAGList rl) {
			rl=(RLStudentGlobalRAGList) rl.Duplicate();
			Array = new WORCStudentGlobalRAGRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentGlobalRAGList {
		public static implicit operator RLStudentGlobalRAGList(WORCStudentGlobalRAGRecord[] array) {
			RLStudentGlobalRAGList rl = new RLStudentGlobalRAGList();
			if (array != null) {
				foreach(WORCStudentGlobalRAGRecord val in array) {
					rl.Append((STStudentGlobalRAGStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentGlobalRAGRecord[](RLStudentGlobalRAGList rl) {
			WORCStudentGlobalRAGRecord[] array = new WORCStudentGlobalRAGRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STStudentGlobalRAGStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentGlobalRAGList {
		public static implicit operator RLStudentGlobalRAGList(WORLStudentGlobalRAGList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentGlobalRAGList(RLStudentGlobalRAGList rl) {
			return new WORLStudentGlobalRAGList(rl);
		}
		public static implicit operator WORCStudentGlobalRAGRecord[](WORLStudentGlobalRAGList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentGlobalRAGList(WORCStudentGlobalRAGRecord[] array) {
			return new WORLStudentGlobalRAGList(array);
		}
	}
}

