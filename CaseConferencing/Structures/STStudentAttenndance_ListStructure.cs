/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STStudentAttenndance_ListStructure</code> that represents the Service Studio
	///  structure <code>StudentAttenndance_List</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STStudentAttenndance_ListStructure: ISerializable, ITypedRecord<STStudentAttenndance_ListStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdPunctualityLastWeek = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*v8+VwtG5nke3fhPaZyVFUw");
		private static readonly GlobalObjectKey IdPunctualityOverwall = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*Z2vFnuy1bkWiAZEPjtJ7GQ");
		private static readonly GlobalObjectKey IdAttendanceLastWeek = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*o4CQz1l+7UKGaj5vDdhGHg");
		private static readonly GlobalObjectKey IdAttendanceOverwall = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*0YHGdJ97bE6nngneuSfPNg");
		private static readonly GlobalObjectKey IdOfferingCode = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*e8uMOajEZkq4nS9aippYxA");
		private static readonly GlobalObjectKey IdOfferingName = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*d4e6lJvJ8k6OkmGyikf1MQ");
		private static readonly GlobalObjectKey IdEnrolmentStart = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*3HMbYEAkIE65R7HxNvzmtw");
		private static readonly GlobalObjectKey IdEnrolmentEnd = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*qy7jViRhDE+yrUK5jMNjIA");
		private static readonly GlobalObjectKey IdLastWeek_PossibleAttendTotal = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*t2Fc+KUTv0Cc6OQbKUoFOw");
		private static readonly GlobalObjectKey IdLastWeek_ActualAttendTotal = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*4rbioWwcHUaITRxnmH5uMw");
		private static readonly GlobalObjectKey IdLastWeek_PuncTotal = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*Kbb9APAJjE6aYqj_mEbCEA");
		private static readonly GlobalObjectKey IdThisYear_PossibleAttendTotal = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*VKTNhYexfkeJX7AcB78+rQ");
		private static readonly GlobalObjectKey IdThisYear_ActualAttendTotal = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*bxnqMiTRnECZWE0X7IcwUw");
		private static readonly GlobalObjectKey IdThisYear_PuncTotal = GlobalObjectKey.Parse("DB1qX9UJYEuDLn+UaA5kVQ*WXpe4ieXCkanuUGs_Gukng");

		public static void EnsureInitialized() {}

		static STStudentAttenndance_ListStructure() {
			ssCaseConferencing.STStudentAttenndance_ListStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("PunctualityLastWeek")]
		public int ssPunctualityLastWeek;

		[System.Xml.Serialization.XmlElement("PunctualityOverwall")]
		public int ssPunctualityOverwall;

		[System.Xml.Serialization.XmlElement("AttendanceLastWeek")]
		public int ssAttendanceLastWeek;

		[System.Xml.Serialization.XmlElement("AttendanceOverwall")]
		public int ssAttendanceOverwall;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string ssOfferingCode;

		[System.Xml.Serialization.XmlElement("OfferingName")]
		public string ssOfferingName;

		[System.Xml.Serialization.XmlElement("EnrolmentStart")]
		public DateTime ssEnrolmentStart;

		[System.Xml.Serialization.XmlElement("EnrolmentEnd")]
		public DateTime ssEnrolmentEnd;

		[System.Xml.Serialization.XmlElement("LastWeek_PossibleAttendTotal")]
		public int ssLastWeek_PossibleAttendTotal;

		[System.Xml.Serialization.XmlElement("LastWeek_ActualAttendTotal")]
		public int ssLastWeek_ActualAttendTotal;

		[System.Xml.Serialization.XmlElement("LastWeek_PuncTotal")]
		public string ssLastWeek_PuncTotal;

		[System.Xml.Serialization.XmlElement("ThisYear_PossibleAttendTotal")]
		public int ssThisYear_PossibleAttendTotal;

		[System.Xml.Serialization.XmlElement("ThisYear_ActualAttendTotal")]
		public int ssThisYear_ActualAttendTotal;

		[System.Xml.Serialization.XmlElement("ThisYear_PuncTotal")]
		public int ssThisYear_PuncTotal;


		public BitArray OptimizedAttributes;

		public STStudentAttenndance_ListStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssPunctualityLastWeek = 0;
			ssPunctualityOverwall = 0;
			ssAttendanceLastWeek = 0;
			ssAttendanceOverwall = 0;
			ssOfferingCode = "";
			ssOfferingName = "";
			ssEnrolmentStart = new DateTime(1900, 1, 1, 0, 0, 0);
			ssEnrolmentEnd = new DateTime(1900, 1, 1, 0, 0, 0);
			ssLastWeek_PossibleAttendTotal = 0;
			ssLastWeek_ActualAttendTotal = 0;
			ssLastWeek_PuncTotal = "";
			ssThisYear_PossibleAttendTotal = 0;
			ssThisYear_ActualAttendTotal = 0;
			ssThisYear_PuncTotal = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssPunctualityLastWeek = r.ReadInteger(index++, "StudentAttenndance_List.PunctualityLastWeek", 0);
			ssPunctualityOverwall = r.ReadInteger(index++, "StudentAttenndance_List.PunctualityOverwall", 0);
			ssAttendanceLastWeek = r.ReadInteger(index++, "StudentAttenndance_List.AttendanceLastWeek", 0);
			ssAttendanceOverwall = r.ReadInteger(index++, "StudentAttenndance_List.AttendanceOverwall", 0);
			ssOfferingCode = r.ReadText(index++, "StudentAttenndance_List.OfferingCode", "");
			ssOfferingName = r.ReadText(index++, "StudentAttenndance_List.OfferingName", "");
			ssEnrolmentStart = r.ReadDate(index++, "StudentAttenndance_List.EnrolmentStart", new DateTime(1900, 1, 1, 0, 0, 0));
			ssEnrolmentEnd = r.ReadDate(index++, "StudentAttenndance_List.EnrolmentEnd", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLastWeek_PossibleAttendTotal = r.ReadInteger(index++, "StudentAttenndance_List.LastWeek_PossibleAttendTotal", 0);
			ssLastWeek_ActualAttendTotal = r.ReadInteger(index++, "StudentAttenndance_List.LastWeek_ActualAttendTotal", 0);
			ssLastWeek_PuncTotal = r.ReadText(index++, "StudentAttenndance_List.LastWeek_PuncTotal", "");
			ssThisYear_PossibleAttendTotal = r.ReadInteger(index++, "StudentAttenndance_List.ThisYear_PossibleAttendTotal", 0);
			ssThisYear_ActualAttendTotal = r.ReadInteger(index++, "StudentAttenndance_List.ThisYear_ActualAttendTotal", 0);
			ssThisYear_PuncTotal = r.ReadInteger(index++, "StudentAttenndance_List.ThisYear_PuncTotal", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STStudentAttenndance_ListStructure r) {
			this = r;
		}


		public static bool operator == (STStudentAttenndance_ListStructure a, STStudentAttenndance_ListStructure b) {
			if (a.ssPunctualityLastWeek != b.ssPunctualityLastWeek) return false;
			if (a.ssPunctualityOverwall != b.ssPunctualityOverwall) return false;
			if (a.ssAttendanceLastWeek != b.ssAttendanceLastWeek) return false;
			if (a.ssAttendanceOverwall != b.ssAttendanceOverwall) return false;
			if (a.ssOfferingCode != b.ssOfferingCode) return false;
			if (a.ssOfferingName != b.ssOfferingName) return false;
			if (a.ssEnrolmentStart != b.ssEnrolmentStart) return false;
			if (a.ssEnrolmentEnd != b.ssEnrolmentEnd) return false;
			if (a.ssLastWeek_PossibleAttendTotal != b.ssLastWeek_PossibleAttendTotal) return false;
			if (a.ssLastWeek_ActualAttendTotal != b.ssLastWeek_ActualAttendTotal) return false;
			if (a.ssLastWeek_PuncTotal != b.ssLastWeek_PuncTotal) return false;
			if (a.ssThisYear_PossibleAttendTotal != b.ssThisYear_PossibleAttendTotal) return false;
			if (a.ssThisYear_ActualAttendTotal != b.ssThisYear_ActualAttendTotal) return false;
			if (a.ssThisYear_PuncTotal != b.ssThisYear_PuncTotal) return false;
			return true;
		}

		public static bool operator != (STStudentAttenndance_ListStructure a, STStudentAttenndance_ListStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STStudentAttenndance_ListStructure)) return false;
			return (this == (STStudentAttenndance_ListStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssPunctualityLastWeek.GetHashCode()
				^ ssPunctualityOverwall.GetHashCode()
				^ ssAttendanceLastWeek.GetHashCode()
				^ ssAttendanceOverwall.GetHashCode()
				^ ssOfferingCode.GetHashCode()
				^ ssOfferingName.GetHashCode()
				^ ssEnrolmentStart.GetHashCode()
				^ ssEnrolmentEnd.GetHashCode()
				^ ssLastWeek_PossibleAttendTotal.GetHashCode()
				^ ssLastWeek_ActualAttendTotal.GetHashCode()
				^ ssLastWeek_PuncTotal.GetHashCode()
				^ ssThisYear_PossibleAttendTotal.GetHashCode()
				^ ssThisYear_ActualAttendTotal.GetHashCode()
				^ ssThisYear_PuncTotal.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STStudentAttenndance_ListStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssPunctualityLastWeek = 0;
			ssPunctualityOverwall = 0;
			ssAttendanceLastWeek = 0;
			ssAttendanceOverwall = 0;
			ssOfferingCode = "";
			ssOfferingName = "";
			ssEnrolmentStart = new DateTime(1900, 1, 1, 0, 0, 0);
			ssEnrolmentEnd = new DateTime(1900, 1, 1, 0, 0, 0);
			ssLastWeek_PossibleAttendTotal = 0;
			ssLastWeek_ActualAttendTotal = 0;
			ssLastWeek_PuncTotal = "";
			ssThisYear_PossibleAttendTotal = 0;
			ssThisYear_ActualAttendTotal = 0;
			ssThisYear_PuncTotal = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssPunctualityLastWeek = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssPunctualityOverwall = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssAttendanceLastWeek = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssAttendanceOverwall = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssOfferingCode = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssOfferingName = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssEnrolmentStart = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssEnrolmentEnd = (DateTime) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssLastWeek_PossibleAttendTotal = (int) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssLastWeek_ActualAttendTotal = (int) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			ssLastWeek_PuncTotal = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			ssThisYear_PossibleAttendTotal = (int) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			ssThisYear_ActualAttendTotal = (int) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			ssThisYear_PuncTotal = (int) info.GetValue(fields[13] .Name, fields[13] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STStudentAttenndance_ListStructure Duplicate() {
			STStudentAttenndance_ListStructure t;
			t.ssPunctualityLastWeek = this.ssPunctualityLastWeek;
			t.ssPunctualityOverwall = this.ssPunctualityOverwall;
			t.ssAttendanceLastWeek = this.ssAttendanceLastWeek;
			t.ssAttendanceOverwall = this.ssAttendanceOverwall;
			t.ssOfferingCode = this.ssOfferingCode;
			t.ssOfferingName = this.ssOfferingName;
			t.ssEnrolmentStart = this.ssEnrolmentStart;
			t.ssEnrolmentEnd = this.ssEnrolmentEnd;
			t.ssLastWeek_PossibleAttendTotal = this.ssLastWeek_PossibleAttendTotal;
			t.ssLastWeek_ActualAttendTotal = this.ssLastWeek_ActualAttendTotal;
			t.ssLastWeek_PuncTotal = this.ssLastWeek_PuncTotal;
			t.ssThisYear_PossibleAttendTotal = this.ssThisYear_PossibleAttendTotal;
			t.ssThisYear_ActualAttendTotal = this.ssThisYear_ActualAttendTotal;
			t.ssThisYear_PuncTotal = this.ssThisYear_PuncTotal;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PunctualityLastWeek")) VarValue.AppendAttribute(recordElem, "PunctualityLastWeek", ssPunctualityLastWeek, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "PunctualityLastWeek");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PunctualityOverwall")) VarValue.AppendAttribute(recordElem, "PunctualityOverwall", ssPunctualityOverwall, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "PunctualityOverwall");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AttendanceLastWeek")) VarValue.AppendAttribute(recordElem, "AttendanceLastWeek", ssAttendanceLastWeek, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "AttendanceLastWeek");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AttendanceOverwall")) VarValue.AppendAttribute(recordElem, "AttendanceOverwall", ssAttendanceOverwall, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "AttendanceOverwall");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCode")) VarValue.AppendAttribute(recordElem, "OfferingCode", ssOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingName")) VarValue.AppendAttribute(recordElem, "OfferingName", ssOfferingName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EnrolmentStart")) VarValue.AppendAttribute(recordElem, "EnrolmentStart", ssEnrolmentStart, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "EnrolmentStart");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EnrolmentEnd")) VarValue.AppendAttribute(recordElem, "EnrolmentEnd", ssEnrolmentEnd, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "EnrolmentEnd");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeek_PossibleAttendTotal")) VarValue.AppendAttribute(recordElem, "LastWeek_PossibleAttendTotal", ssLastWeek_PossibleAttendTotal, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeek_PossibleAttendTotal");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeek_ActualAttendTotal")) VarValue.AppendAttribute(recordElem, "LastWeek_ActualAttendTotal", ssLastWeek_ActualAttendTotal, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeek_ActualAttendTotal");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastWeek_PuncTotal")) VarValue.AppendAttribute(recordElem, "LastWeek_PuncTotal", ssLastWeek_PuncTotal, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LastWeek_PuncTotal");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ThisYear_PossibleAttendTotal")) VarValue.AppendAttribute(recordElem, "ThisYear_PossibleAttendTotal", ssThisYear_PossibleAttendTotal, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ThisYear_PossibleAttendTotal");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ThisYear_ActualAttendTotal")) VarValue.AppendAttribute(recordElem, "ThisYear_ActualAttendTotal", ssThisYear_ActualAttendTotal, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ThisYear_ActualAttendTotal");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ThisYear_PuncTotal")) VarValue.AppendAttribute(recordElem, "ThisYear_PuncTotal", ssThisYear_PuncTotal, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ThisYear_PuncTotal");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "punctualitylastweek") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PunctualityLastWeek")) variable.Value = ssPunctualityLastWeek; else variable.Optimized = true;
			} else if (head == "punctualityoverwall") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PunctualityOverwall")) variable.Value = ssPunctualityOverwall; else variable.Optimized = true;
			} else if (head == "attendancelastweek") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendanceLastWeek")) variable.Value = ssAttendanceLastWeek; else variable.Optimized = true;
			} else if (head == "attendanceoverwall") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AttendanceOverwall")) variable.Value = ssAttendanceOverwall; else variable.Optimized = true;
			} else if (head == "offeringcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCode")) variable.Value = ssOfferingCode; else variable.Optimized = true;
			} else if (head == "offeringname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingName")) variable.Value = ssOfferingName; else variable.Optimized = true;
			} else if (head == "enrolmentstart") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnrolmentStart")) variable.Value = ssEnrolmentStart; else variable.Optimized = true;
			} else if (head == "enrolmentend") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnrolmentEnd")) variable.Value = ssEnrolmentEnd; else variable.Optimized = true;
			} else if (head == "lastweek_possibleattendtotal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeek_PossibleAttendTotal")) variable.Value = ssLastWeek_PossibleAttendTotal; else variable.Optimized = true;
			} else if (head == "lastweek_actualattendtotal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeek_ActualAttendTotal")) variable.Value = ssLastWeek_ActualAttendTotal; else variable.Optimized = true;
			} else if (head == "lastweek_punctotal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastWeek_PuncTotal")) variable.Value = ssLastWeek_PuncTotal; else variable.Optimized = true;
			} else if (head == "thisyear_possibleattendtotal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ThisYear_PossibleAttendTotal")) variable.Value = ssThisYear_PossibleAttendTotal; else variable.Optimized = true;
			} else if (head == "thisyear_actualattendtotal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ThisYear_ActualAttendTotal")) variable.Value = ssThisYear_ActualAttendTotal; else variable.Optimized = true;
			} else if (head == "thisyear_punctotal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ThisYear_PuncTotal")) variable.Value = ssThisYear_PuncTotal; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdPunctualityLastWeek) {
				return ssPunctualityLastWeek;
			} else if (key == IdPunctualityOverwall) {
				return ssPunctualityOverwall;
			} else if (key == IdAttendanceLastWeek) {
				return ssAttendanceLastWeek;
			} else if (key == IdAttendanceOverwall) {
				return ssAttendanceOverwall;
			} else if (key == IdOfferingCode) {
				return ssOfferingCode;
			} else if (key == IdOfferingName) {
				return ssOfferingName;
			} else if (key == IdEnrolmentStart) {
				return ssEnrolmentStart;
			} else if (key == IdEnrolmentEnd) {
				return ssEnrolmentEnd;
			} else if (key == IdLastWeek_PossibleAttendTotal) {
				return ssLastWeek_PossibleAttendTotal;
			} else if (key == IdLastWeek_ActualAttendTotal) {
				return ssLastWeek_ActualAttendTotal;
			} else if (key == IdLastWeek_PuncTotal) {
				return ssLastWeek_PuncTotal;
			} else if (key == IdThisYear_PossibleAttendTotal) {
				return ssThisYear_PossibleAttendTotal;
			} else if (key == IdThisYear_ActualAttendTotal) {
				return ssThisYear_ActualAttendTotal;
			} else if (key == IdThisYear_PuncTotal) {
				return ssThisYear_PuncTotal;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssPunctualityLastWeek = (int) other.AttributeGet(IdPunctualityLastWeek);
			ssPunctualityOverwall = (int) other.AttributeGet(IdPunctualityOverwall);
			ssAttendanceLastWeek = (int) other.AttributeGet(IdAttendanceLastWeek);
			ssAttendanceOverwall = (int) other.AttributeGet(IdAttendanceOverwall);
			ssOfferingCode = (string) other.AttributeGet(IdOfferingCode);
			ssOfferingName = (string) other.AttributeGet(IdOfferingName);
			ssEnrolmentStart = (DateTime) other.AttributeGet(IdEnrolmentStart);
			ssEnrolmentEnd = (DateTime) other.AttributeGet(IdEnrolmentEnd);
			ssLastWeek_PossibleAttendTotal = (int) other.AttributeGet(IdLastWeek_PossibleAttendTotal);
			ssLastWeek_ActualAttendTotal = (int) other.AttributeGet(IdLastWeek_ActualAttendTotal);
			ssLastWeek_PuncTotal = (string) other.AttributeGet(IdLastWeek_PuncTotal);
			ssThisYear_PossibleAttendTotal = (int) other.AttributeGet(IdThisYear_PossibleAttendTotal);
			ssThisYear_ActualAttendTotal = (int) other.AttributeGet(IdThisYear_ActualAttendTotal);
			ssThisYear_PuncTotal = (int) other.AttributeGet(IdThisYear_PuncTotal);
		}
	} // STStudentAttenndance_ListStructure
	/// <summary>
	/// Structure <code>RCStudentAttenndance_ListRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStudentAttenndance_ListRecord: ISerializable, ITypedRecord<RCStudentAttenndance_ListRecord> {
		private static readonly GlobalObjectKey IdStudentAttenndance_List = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*1Exmprv3x_DYWGJRSV5Ovg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentAttenndance_List")]
		public STStudentAttenndance_ListStructure ssSTStudentAttenndance_List;


		public static implicit operator STStudentAttenndance_ListStructure(RCStudentAttenndance_ListRecord r) {
			return r.ssSTStudentAttenndance_List;
		}

		public static implicit operator RCStudentAttenndance_ListRecord(STStudentAttenndance_ListStructure r) {
			RCStudentAttenndance_ListRecord res = new RCStudentAttenndance_ListRecord(null);
			res.ssSTStudentAttenndance_List = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCStudentAttenndance_ListRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTStudentAttenndance_List = new STStudentAttenndance_ListStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTStudentAttenndance_List.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTStudentAttenndance_List.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStudentAttenndance_ListRecord r) {
			this = r;
		}


		public static bool operator == (RCStudentAttenndance_ListRecord a, RCStudentAttenndance_ListRecord b) {
			if (a.ssSTStudentAttenndance_List != b.ssSTStudentAttenndance_List) return false;
			return true;
		}

		public static bool operator != (RCStudentAttenndance_ListRecord a, RCStudentAttenndance_ListRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStudentAttenndance_ListRecord)) return false;
			return (this == (RCStudentAttenndance_ListRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTStudentAttenndance_List.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStudentAttenndance_ListRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTStudentAttenndance_List = new STStudentAttenndance_ListStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTStudentAttenndance_List = (STStudentAttenndance_ListStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTStudentAttenndance_List.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTStudentAttenndance_List.InternalRecursiveSave();
		}


		public RCStudentAttenndance_ListRecord Duplicate() {
			RCStudentAttenndance_ListRecord t;
			t.ssSTStudentAttenndance_List = (STStudentAttenndance_ListStructure) this.ssSTStudentAttenndance_List.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTStudentAttenndance_List.ToXml(this, recordElem, "StudentAttenndance_List", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentattenndance_list") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentAttenndance_List")) variable.Value = ssSTStudentAttenndance_List; else variable.Optimized = true;
				variable.SetFieldName("studentattenndance_list");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentAttenndance_List) {
				return ssSTStudentAttenndance_List;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTStudentAttenndance_List.FillFromOther((IRecord) other.AttributeGet(IdStudentAttenndance_List));
		}
	} // RCStudentAttenndance_ListRecord
	/// <summary>
	/// RecordList type <code>RLStudentAttenndance_ListRecordList</code> that represents a record list of
	///  <code>StudentAttenndance_List</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentAttenndance_ListRecordList: GenericRecordList<RCStudentAttenndance_ListRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStudentAttenndance_ListRecord GetElementDefaultValue() {
			return new RCStudentAttenndance_ListRecord("");
		}

		public T[] ToArray<T>(Func<RCStudentAttenndance_ListRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentAttenndance_ListRecordList recordlist, Func<RCStudentAttenndance_ListRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentAttenndance_ListRecordList ToList<T>(T[] array, Func <T, RCStudentAttenndance_ListRecord> converter) {
			RLStudentAttenndance_ListRecordList result = new RLStudentAttenndance_ListRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentAttenndance_ListRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttenndance_ListRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttenndance_ListRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentAttenndance_ListRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStudentAttenndance_ListRecord> NewList() {
			return new RLStudentAttenndance_ListRecordList();
		}


	} // RLStudentAttenndance_ListRecordList
	/// <summary>
	/// RecordList type <code>RLStudentAttenndance_ListList</code> that represents a record list of
	///  <code>Text, Text, Text, Date, Date, Integer, Integer, Integer, Integer, Integer, Integer, Integer
	/// , Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStudentAttenndance_ListList: GenericRecordList<STStudentAttenndance_ListStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		static RLStudentAttenndance_ListList() {
			ssCaseConferencing.RLStudentAttenndance_ListListTypeFactoryImpl.InitializeFactory();
		}

		protected override STStudentAttenndance_ListStructure GetElementDefaultValue() {
			return new STStudentAttenndance_ListStructure("");
		}

		public T[] ToArray<T>(Func<STStudentAttenndance_ListStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStudentAttenndance_ListList recordlist, Func<STStudentAttenndance_ListStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStudentAttenndance_ListList ToList<T>(T[] array, Func <T, STStudentAttenndance_ListStructure> converter) {
			RLStudentAttenndance_ListList result = new RLStudentAttenndance_ListList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStudentAttenndance_ListList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttenndance_ListList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStudentAttenndance_ListList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStudentAttenndance_ListList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STStudentAttenndance_ListStructure> NewList() {
			return new RLStudentAttenndance_ListList();
		}


	} // RLStudentAttenndance_ListList
}

namespace ssCaseConferencing {
	[XmlType("StudentAttenndance_List")]
	public class WORCStudentAttenndance_ListRecord {
		[System.Xml.Serialization.XmlElement("PunctualityLastWeek")]
		public int varWSPunctualityLastWeek;

		[System.Xml.Serialization.XmlElement("PunctualityOverwall")]
		public int varWSPunctualityOverwall;

		[System.Xml.Serialization.XmlElement("AttendanceLastWeek")]
		public int varWSAttendanceLastWeek;

		[System.Xml.Serialization.XmlElement("AttendanceOverwall")]
		public int varWSAttendanceOverwall;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string varWSOfferingCode;

		[System.Xml.Serialization.XmlElement("OfferingName")]
		public string varWSOfferingName;

		[System.Xml.Serialization.XmlElement("EnrolmentStart", DataType= "date")]
		public DateTime varWSEnrolmentStart;

		[System.Xml.Serialization.XmlElement("EnrolmentEnd", DataType= "date")]
		public DateTime varWSEnrolmentEnd;

		[System.Xml.Serialization.XmlElement("LastWeek_PossibleAttendTotal")]
		public int varWSLastWeek_PossibleAttendTotal;

		[System.Xml.Serialization.XmlElement("LastWeek_ActualAttendTotal")]
		public int varWSLastWeek_ActualAttendTotal;

		[System.Xml.Serialization.XmlElement("LastWeek_PuncTotal")]
		public string varWSLastWeek_PuncTotal;

		[System.Xml.Serialization.XmlElement("ThisYear_PossibleAttendTotal")]
		public int varWSThisYear_PossibleAttendTotal;

		[System.Xml.Serialization.XmlElement("ThisYear_ActualAttendTotal")]
		public int varWSThisYear_ActualAttendTotal;

		[System.Xml.Serialization.XmlElement("ThisYear_PuncTotal")]
		public int varWSThisYear_PuncTotal;

		public WORCStudentAttenndance_ListRecord() {
			varWSPunctualityLastWeek = (int) 0;
			varWSPunctualityOverwall = (int) 0;
			varWSAttendanceLastWeek = (int) 0;
			varWSAttendanceOverwall = (int) 0;
			varWSOfferingCode = (string) "";
			varWSOfferingName = (string) "";
			varWSEnrolmentStart = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSEnrolmentEnd = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLastWeek_PossibleAttendTotal = (int) 0;
			varWSLastWeek_ActualAttendTotal = (int) 0;
			varWSLastWeek_PuncTotal = (string) "";
			varWSThisYear_PossibleAttendTotal = (int) 0;
			varWSThisYear_ActualAttendTotal = (int) 0;
			varWSThisYear_PuncTotal = (int) 0;
		}

		public WORCStudentAttenndance_ListRecord(STStudentAttenndance_ListStructure r) {
			varWSPunctualityLastWeek = (int) r.ssPunctualityLastWeek;
			varWSPunctualityOverwall = (int) r.ssPunctualityOverwall;
			varWSAttendanceLastWeek = (int) r.ssAttendanceLastWeek;
			varWSAttendanceOverwall = (int) r.ssAttendanceOverwall;
			varWSOfferingCode = BaseAppUtils.RemoveControlChars(r.ssOfferingCode);
			varWSOfferingName = BaseAppUtils.RemoveControlChars(r.ssOfferingName);
			varWSEnrolmentStart = (DateTime) r.ssEnrolmentStart;
			varWSEnrolmentEnd = (DateTime) r.ssEnrolmentEnd;
			varWSLastWeek_PossibleAttendTotal = (int) r.ssLastWeek_PossibleAttendTotal;
			varWSLastWeek_ActualAttendTotal = (int) r.ssLastWeek_ActualAttendTotal;
			varWSLastWeek_PuncTotal = BaseAppUtils.RemoveControlChars(r.ssLastWeek_PuncTotal);
			varWSThisYear_PossibleAttendTotal = (int) r.ssThisYear_PossibleAttendTotal;
			varWSThisYear_ActualAttendTotal = (int) r.ssThisYear_ActualAttendTotal;
			varWSThisYear_PuncTotal = (int) r.ssThisYear_PuncTotal;
		}

		public static RLStudentAttenndance_ListList ToRecordList(WORCStudentAttenndance_ListRecord[] array) {
			RLStudentAttenndance_ListList rl = new RLStudentAttenndance_ListList();
			if (array != null) {
				foreach(WORCStudentAttenndance_ListRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStudentAttenndance_ListRecord[] FromRecordList(RLStudentAttenndance_ListList rl) {
			WORCStudentAttenndance_ListRecord[] array = new WORCStudentAttenndance_ListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStudentAttenndance_ListRecord {
		public static implicit operator WORCStudentAttenndance_ListRecord(RCStudentAttenndance_ListRecord r) {
			return new WORCStudentAttenndance_ListRecord(r.ssSTStudentAttenndance_List);
		}

		public static implicit operator RCStudentAttenndance_ListRecord(WORCStudentAttenndance_ListRecord w) {
			RCStudentAttenndance_ListRecord r = new RCStudentAttenndance_ListRecord("");
			if (w != null) {
				r.ssSTStudentAttenndance_List = w;
			}
			return r;
		}

	}

	partial struct STStudentAttenndance_ListStructure {
		public static implicit operator WORCStudentAttenndance_ListRecord(STStudentAttenndance_ListStructure r) {
			return new WORCStudentAttenndance_ListRecord(r);
		}

		public static implicit operator STStudentAttenndance_ListStructure(WORCStudentAttenndance_ListRecord w) {
			STStudentAttenndance_ListStructure r = new STStudentAttenndance_ListStructure("");
			if (w != null) {
				r.ssPunctualityLastWeek = (int) w.varWSPunctualityLastWeek;
				r.ssPunctualityOverwall = (int) w.varWSPunctualityOverwall;
				r.ssAttendanceLastWeek = (int) w.varWSAttendanceLastWeek;
				r.ssAttendanceOverwall = (int) w.varWSAttendanceOverwall;
				r.ssOfferingCode = ((string) w.varWSOfferingCode ?? "");
				r.ssOfferingName = ((string) w.varWSOfferingName ?? "");
				r.ssEnrolmentStart = (DateTime) w.varWSEnrolmentStart;
				r.ssEnrolmentEnd = (DateTime) w.varWSEnrolmentEnd;
				r.ssLastWeek_PossibleAttendTotal = (int) w.varWSLastWeek_PossibleAttendTotal;
				r.ssLastWeek_ActualAttendTotal = (int) w.varWSLastWeek_ActualAttendTotal;
				r.ssLastWeek_PuncTotal = ((string) w.varWSLastWeek_PuncTotal ?? "");
				r.ssThisYear_PossibleAttendTotal = (int) w.varWSThisYear_PossibleAttendTotal;
				r.ssThisYear_ActualAttendTotal = (int) w.varWSThisYear_ActualAttendTotal;
				r.ssThisYear_PuncTotal = (int) w.varWSThisYear_PuncTotal;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentAttenndance_ListRecordList {
		public WORCStudentAttenndance_ListRecord[] Array;


		public WORLStudentAttenndance_ListRecordList(WORCStudentAttenndance_ListRecord[] r) {
			if (r == null)
			Array = new WORCStudentAttenndance_ListRecord[0];
			else
			Array = r;
		}
		public WORLStudentAttenndance_ListRecordList() {
			Array = new WORCStudentAttenndance_ListRecord[0];
		}

		public WORLStudentAttenndance_ListRecordList(RLStudentAttenndance_ListRecordList rl) {
			rl=(RLStudentAttenndance_ListRecordList) rl.Duplicate();
			Array = new WORCStudentAttenndance_ListRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStudentAttenndance_ListRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentAttenndance_ListRecordList {
		public static implicit operator RLStudentAttenndance_ListRecordList(WORCStudentAttenndance_ListRecord[] array) {
			RLStudentAttenndance_ListRecordList rl = new RLStudentAttenndance_ListRecordList();
			if (array != null) {
				foreach(WORCStudentAttenndance_ListRecord val in array) {
					rl.Append((RCStudentAttenndance_ListRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentAttenndance_ListRecord[](RLStudentAttenndance_ListRecordList rl) {
			WORCStudentAttenndance_ListRecord[] array = new WORCStudentAttenndance_ListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStudentAttenndance_ListRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentAttenndance_ListRecordList {
		public static implicit operator RLStudentAttenndance_ListRecordList(WORLStudentAttenndance_ListRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentAttenndance_ListRecordList(RLStudentAttenndance_ListRecordList rl) {
			return new WORLStudentAttenndance_ListRecordList(rl);
		}
		public static implicit operator WORCStudentAttenndance_ListRecord[](WORLStudentAttenndance_ListRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentAttenndance_ListRecordList(WORCStudentAttenndance_ListRecord[] array) {
			return new WORLStudentAttenndance_ListRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStudentAttenndance_ListList {
		public WORCStudentAttenndance_ListRecord[] Array;


		public WORLStudentAttenndance_ListList(WORCStudentAttenndance_ListRecord[] r) {
			if (r == null)
			Array = new WORCStudentAttenndance_ListRecord[0];
			else
			Array = r;
		}
		public WORLStudentAttenndance_ListList() {
			Array = new WORCStudentAttenndance_ListRecord[0];
		}

		public WORLStudentAttenndance_ListList(RLStudentAttenndance_ListList rl) {
			rl=(RLStudentAttenndance_ListList) rl.Duplicate();
			Array = new WORCStudentAttenndance_ListRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStudentAttenndance_ListList {
		public static implicit operator RLStudentAttenndance_ListList(WORCStudentAttenndance_ListRecord[] array) {
			RLStudentAttenndance_ListList rl = new RLStudentAttenndance_ListList();
			if (array != null) {
				foreach(WORCStudentAttenndance_ListRecord val in array) {
					rl.Append((STStudentAttenndance_ListStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStudentAttenndance_ListRecord[](RLStudentAttenndance_ListList rl) {
			WORCStudentAttenndance_ListRecord[] array = new WORCStudentAttenndance_ListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STStudentAttenndance_ListStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStudentAttenndance_ListList {
		public static implicit operator RLStudentAttenndance_ListList(WORLStudentAttenndance_ListList w) {
			return w.Array;
		}
		public static implicit operator WORLStudentAttenndance_ListList(RLStudentAttenndance_ListList rl) {
			return new WORLStudentAttenndance_ListList(rl);
		}
		public static implicit operator WORCStudentAttenndance_ListRecord[](WORLStudentAttenndance_ListList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStudentAttenndance_ListList(WORCStudentAttenndance_ListRecord[] array) {
			return new WORLStudentAttenndance_ListList(array);
		}
	}
}

