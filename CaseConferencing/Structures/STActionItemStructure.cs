/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STActionItemStructure</code> that represents the Service Studio structure
	///  <code>ActionItem</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STActionItemStructure: ISerializable, ITypedRecord<STActionItemStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*vZyG1d1LDEqIFCVcWNaTFg");
		private static readonly GlobalObjectKey IdText = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ifsm0VrEREG81ttx435k+g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Value")]
		public string ssValue;

		[System.Xml.Serialization.XmlElement("Text")]
		public string ssText;


		public BitArray OptimizedAttributes;

		public STActionItemStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssValue = "";
			ssText = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssValue = r.ReadText(index++, "ActionItem.Value", "");
			ssText = r.ReadText(index++, "ActionItem.Text", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STActionItemStructure r) {
			this = r;
		}


		public static bool operator == (STActionItemStructure a, STActionItemStructure b) {
			if (a.ssValue != b.ssValue) return false;
			if (a.ssText != b.ssText) return false;
			return true;
		}

		public static bool operator != (STActionItemStructure a, STActionItemStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STActionItemStructure)) return false;
			return (this == (STActionItemStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssValue.GetHashCode()
				^ ssText.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STActionItemStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssValue = "";
			ssText = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssValue = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssText = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STActionItemStructure Duplicate() {
			STActionItemStructure t;
			t.ssValue = this.ssValue;
			t.ssText = this.ssText;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Text")) VarValue.AppendAttribute(recordElem, "Text", ssText, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Text");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			} else if (head == "text") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Text")) variable.Value = ssText; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdValue) {
				return ssValue;
			} else if (key == IdText) {
				return ssText;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssValue = (string) other.AttributeGet(IdValue);
			ssText = (string) other.AttributeGet(IdText);
		}
	} // STActionItemStructure
	/// <summary>
	/// Structure <code>RCActionItemRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCActionItemRecord: ISerializable, ITypedRecord<RCActionItemRecord> {
		private static readonly GlobalObjectKey IdActionItem = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*kavUclCyYgvrZErDHYbIZA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ActionItem")]
		public STActionItemStructure ssSTActionItem;


		public static implicit operator STActionItemStructure(RCActionItemRecord r) {
			return r.ssSTActionItem;
		}

		public static implicit operator RCActionItemRecord(STActionItemStructure r) {
			RCActionItemRecord res = new RCActionItemRecord(null);
			res.ssSTActionItem = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCActionItemRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTActionItem = new STActionItemStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTActionItem.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTActionItem.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCActionItemRecord r) {
			this = r;
		}


		public static bool operator == (RCActionItemRecord a, RCActionItemRecord b) {
			if (a.ssSTActionItem != b.ssSTActionItem) return false;
			return true;
		}

		public static bool operator != (RCActionItemRecord a, RCActionItemRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCActionItemRecord)) return false;
			return (this == (RCActionItemRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTActionItem.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCActionItemRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTActionItem = new STActionItemStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTActionItem = (STActionItemStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTActionItem.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTActionItem.InternalRecursiveSave();
		}


		public RCActionItemRecord Duplicate() {
			RCActionItemRecord t;
			t.ssSTActionItem = (STActionItemStructure) this.ssSTActionItem.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTActionItem.ToXml(this, recordElem, "ActionItem", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "actionitem") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ActionItem")) variable.Value = ssSTActionItem; else variable.Optimized = true;
				variable.SetFieldName("actionitem");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdActionItem) {
				return ssSTActionItem;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTActionItem.FillFromOther((IRecord) other.AttributeGet(IdActionItem));
		}
	} // RCActionItemRecord
	/// <summary>
	/// RecordList type <code>RLActionItemRecordList</code> that represents a record list of
	///  <code>ActionItem</code>
	/// </summary>
	[Serializable()]
	public partial class RLActionItemRecordList: GenericRecordList<RCActionItemRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCActionItemRecord GetElementDefaultValue() {
			return new RCActionItemRecord("");
		}

		public T[] ToArray<T>(Func<RCActionItemRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLActionItemRecordList recordlist, Func<RCActionItemRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLActionItemRecordList ToList<T>(T[] array, Func <T, RCActionItemRecord> converter) {
			RLActionItemRecordList result = new RLActionItemRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLActionItemRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLActionItemRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLActionItemRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLActionItemRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCActionItemRecord> NewList() {
			return new RLActionItemRecordList();
		}


	} // RLActionItemRecordList
	/// <summary>
	/// RecordList type <code>RLActionItemList</code> that represents a record list of <code>Text,
	///  Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLActionItemList: GenericRecordList<STActionItemStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STActionItemStructure GetElementDefaultValue() {
			return new STActionItemStructure("");
		}

		public T[] ToArray<T>(Func<STActionItemStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLActionItemList recordlist, Func<STActionItemStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLActionItemList ToList<T>(T[] array, Func <T, STActionItemStructure> converter) {
			RLActionItemList result = new RLActionItemList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLActionItemList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLActionItemList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLActionItemList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLActionItemList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STActionItemStructure> NewList() {
			return new RLActionItemList();
		}


	} // RLActionItemList
}

namespace ssCaseConferencing {
	[XmlType("ActionItem")]
	public class WORCActionItemRecord {
		[System.Xml.Serialization.XmlElement("Value")]
		public string varWSValue;

		[System.Xml.Serialization.XmlElement("Text")]
		public string varWSText;

		public WORCActionItemRecord() {
			varWSValue = (string) "";
			varWSText = (string) "";
		}

		public WORCActionItemRecord(STActionItemStructure r) {
			varWSValue = BaseAppUtils.RemoveControlChars(r.ssValue);
			varWSText = BaseAppUtils.RemoveControlChars(r.ssText);
		}

		public static RLActionItemList ToRecordList(WORCActionItemRecord[] array) {
			RLActionItemList rl = new RLActionItemList();
			if (array != null) {
				foreach(WORCActionItemRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCActionItemRecord[] FromRecordList(RLActionItemList rl) {
			WORCActionItemRecord[] array = new WORCActionItemRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCActionItemRecord {
		public static implicit operator WORCActionItemRecord(RCActionItemRecord r) {
			return new WORCActionItemRecord(r.ssSTActionItem);
		}

		public static implicit operator RCActionItemRecord(WORCActionItemRecord w) {
			RCActionItemRecord r = new RCActionItemRecord("");
			if (w != null) {
				r.ssSTActionItem = w;
			}
			return r;
		}

	}

	partial struct STActionItemStructure {
		public static implicit operator WORCActionItemRecord(STActionItemStructure r) {
			return new WORCActionItemRecord(r);
		}

		public static implicit operator STActionItemStructure(WORCActionItemRecord w) {
			STActionItemStructure r = new STActionItemStructure("");
			if (w != null) {
				r.ssValue = ((string) w.varWSValue ?? "");
				r.ssText = ((string) w.varWSText ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLActionItemRecordList {
		public WORCActionItemRecord[] Array;


		public WORLActionItemRecordList(WORCActionItemRecord[] r) {
			if (r == null)
			Array = new WORCActionItemRecord[0];
			else
			Array = r;
		}
		public WORLActionItemRecordList() {
			Array = new WORCActionItemRecord[0];
		}

		public WORLActionItemRecordList(RLActionItemRecordList rl) {
			rl=(RLActionItemRecordList) rl.Duplicate();
			Array = new WORCActionItemRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCActionItemRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLActionItemRecordList {
		public static implicit operator RLActionItemRecordList(WORCActionItemRecord[] array) {
			RLActionItemRecordList rl = new RLActionItemRecordList();
			if (array != null) {
				foreach(WORCActionItemRecord val in array) {
					rl.Append((RCActionItemRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCActionItemRecord[](RLActionItemRecordList rl) {
			WORCActionItemRecord[] array = new WORCActionItemRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCActionItemRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLActionItemRecordList {
		public static implicit operator RLActionItemRecordList(WORLActionItemRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLActionItemRecordList(RLActionItemRecordList rl) {
			return new WORLActionItemRecordList(rl);
		}
		public static implicit operator WORCActionItemRecord[](WORLActionItemRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLActionItemRecordList(WORCActionItemRecord[] array) {
			return new WORLActionItemRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLActionItemList {
		public WORCActionItemRecord[] Array;


		public WORLActionItemList(WORCActionItemRecord[] r) {
			if (r == null)
			Array = new WORCActionItemRecord[0];
			else
			Array = r;
		}
		public WORLActionItemList() {
			Array = new WORCActionItemRecord[0];
		}

		public WORLActionItemList(RLActionItemList rl) {
			rl=(RLActionItemList) rl.Duplicate();
			Array = new WORCActionItemRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLActionItemList {
		public static implicit operator RLActionItemList(WORCActionItemRecord[] array) {
			RLActionItemList rl = new RLActionItemList();
			if (array != null) {
				foreach(WORCActionItemRecord val in array) {
					rl.Append((STActionItemStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCActionItemRecord[](RLActionItemList rl) {
			WORCActionItemRecord[] array = new WORCActionItemRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STActionItemStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLActionItemList {
		public static implicit operator RLActionItemList(WORLActionItemList w) {
			return w.Array;
		}
		public static implicit operator WORLActionItemList(RLActionItemList rl) {
			return new WORLActionItemList(rl);
		}
		public static implicit operator WORCActionItemRecord[](WORLActionItemList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLActionItemList(WORCActionItemRecord[] array) {
			return new WORLActionItemList(array);
		}
	}
}

