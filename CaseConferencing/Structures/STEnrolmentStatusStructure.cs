/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STEnrolmentStatusStructure</code> that represents the Service Studio structure
	///  <code>EnrolmentStatus</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STEnrolmentStatusStructure: ISerializable, ITypedRecord<STEnrolmentStatusStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdEnrolmentStatus = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*uy_bzG+voUmFqqMyxbQUsA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("EnrolmentStatus")]
		public string ssEnrolmentStatus;


		public BitArray OptimizedAttributes;

		public STEnrolmentStatusStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssEnrolmentStatus = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssEnrolmentStatus = r.ReadText(index++, "EnrolmentStatus.EnrolmentStatus", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEnrolmentStatusStructure r) {
			this = r;
		}


		public static bool operator == (STEnrolmentStatusStructure a, STEnrolmentStatusStructure b) {
			if (a.ssEnrolmentStatus != b.ssEnrolmentStatus) return false;
			return true;
		}

		public static bool operator != (STEnrolmentStatusStructure a, STEnrolmentStatusStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEnrolmentStatusStructure)) return false;
			return (this == (STEnrolmentStatusStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssEnrolmentStatus.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEnrolmentStatusStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssEnrolmentStatus = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssEnrolmentStatus = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STEnrolmentStatusStructure Duplicate() {
			STEnrolmentStatusStructure t;
			t.ssEnrolmentStatus = this.ssEnrolmentStatus;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EnrolmentStatus")) VarValue.AppendAttribute(recordElem, "EnrolmentStatus", ssEnrolmentStatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EnrolmentStatus");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "enrolmentstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnrolmentStatus")) variable.Value = ssEnrolmentStatus; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdEnrolmentStatus) {
				return ssEnrolmentStatus;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssEnrolmentStatus = (string) other.AttributeGet(IdEnrolmentStatus);
		}
	} // STEnrolmentStatusStructure
	/// <summary>
	/// Structure <code>RCEnrolmentStatusRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCEnrolmentStatusRecord: ISerializable, ITypedRecord<RCEnrolmentStatusRecord> {
		private static readonly GlobalObjectKey IdEnrolmentStatus = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Mp9imuqbRs2LjahQQVF3og");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("EnrolmentStatus")]
		public STEnrolmentStatusStructure ssSTEnrolmentStatus;


		public static implicit operator STEnrolmentStatusStructure(RCEnrolmentStatusRecord r) {
			return r.ssSTEnrolmentStatus;
		}

		public static implicit operator RCEnrolmentStatusRecord(STEnrolmentStatusStructure r) {
			RCEnrolmentStatusRecord res = new RCEnrolmentStatusRecord(null);
			res.ssSTEnrolmentStatus = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCEnrolmentStatusRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTEnrolmentStatus = new STEnrolmentStatusStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTEnrolmentStatus.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTEnrolmentStatus.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCEnrolmentStatusRecord r) {
			this = r;
		}


		public static bool operator == (RCEnrolmentStatusRecord a, RCEnrolmentStatusRecord b) {
			if (a.ssSTEnrolmentStatus != b.ssSTEnrolmentStatus) return false;
			return true;
		}

		public static bool operator != (RCEnrolmentStatusRecord a, RCEnrolmentStatusRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCEnrolmentStatusRecord)) return false;
			return (this == (RCEnrolmentStatusRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTEnrolmentStatus.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCEnrolmentStatusRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTEnrolmentStatus = new STEnrolmentStatusStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTEnrolmentStatus = (STEnrolmentStatusStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTEnrolmentStatus.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTEnrolmentStatus.InternalRecursiveSave();
		}


		public RCEnrolmentStatusRecord Duplicate() {
			RCEnrolmentStatusRecord t;
			t.ssSTEnrolmentStatus = (STEnrolmentStatusStructure) this.ssSTEnrolmentStatus.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTEnrolmentStatus.ToXml(this, recordElem, "EnrolmentStatus", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "enrolmentstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnrolmentStatus")) variable.Value = ssSTEnrolmentStatus; else variable.Optimized = true;
				variable.SetFieldName("enrolmentstatus");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdEnrolmentStatus) {
				return ssSTEnrolmentStatus;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTEnrolmentStatus.FillFromOther((IRecord) other.AttributeGet(IdEnrolmentStatus));
		}
	} // RCEnrolmentStatusRecord
	/// <summary>
	/// RecordList type <code>RLEnrolmentStatusRecordList</code> that represents a record list of
	///  <code>EnrolmentStatus</code>
	/// </summary>
	[Serializable()]
	public partial class RLEnrolmentStatusRecordList: GenericRecordList<RCEnrolmentStatusRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCEnrolmentStatusRecord GetElementDefaultValue() {
			return new RCEnrolmentStatusRecord("");
		}

		public T[] ToArray<T>(Func<RCEnrolmentStatusRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLEnrolmentStatusRecordList recordlist, Func<RCEnrolmentStatusRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLEnrolmentStatusRecordList ToList<T>(T[] array, Func <T, RCEnrolmentStatusRecord> converter) {
			RLEnrolmentStatusRecordList result = new RLEnrolmentStatusRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLEnrolmentStatusRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEnrolmentStatusRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEnrolmentStatusRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLEnrolmentStatusRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCEnrolmentStatusRecord> NewList() {
			return new RLEnrolmentStatusRecordList();
		}


	} // RLEnrolmentStatusRecordList
	/// <summary>
	/// RecordList type <code>RLEnrolmentStatusList</code> that represents a record list of
	///  <code>Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLEnrolmentStatusList: GenericRecordList<STEnrolmentStatusStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STEnrolmentStatusStructure GetElementDefaultValue() {
			return new STEnrolmentStatusStructure("");
		}

		public T[] ToArray<T>(Func<STEnrolmentStatusStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLEnrolmentStatusList recordlist, Func<STEnrolmentStatusStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLEnrolmentStatusList ToList<T>(T[] array, Func <T, STEnrolmentStatusStructure> converter) {
			RLEnrolmentStatusList result = new RLEnrolmentStatusList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLEnrolmentStatusList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEnrolmentStatusList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLEnrolmentStatusList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLEnrolmentStatusList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STEnrolmentStatusStructure> NewList() {
			return new RLEnrolmentStatusList();
		}


	} // RLEnrolmentStatusList
}

namespace ssCaseConferencing {
	[XmlType("EnrolmentStatus")]
	public class WORCEnrolmentStatusRecord {
		[System.Xml.Serialization.XmlElement("EnrolmentStatus")]
		public string varWSEnrolmentStatus;

		public WORCEnrolmentStatusRecord() {
			varWSEnrolmentStatus = (string) "";
		}

		public WORCEnrolmentStatusRecord(STEnrolmentStatusStructure r) {
			varWSEnrolmentStatus = BaseAppUtils.RemoveControlChars(r.ssEnrolmentStatus);
		}

		public static RLEnrolmentStatusList ToRecordList(WORCEnrolmentStatusRecord[] array) {
			RLEnrolmentStatusList rl = new RLEnrolmentStatusList();
			if (array != null) {
				foreach(WORCEnrolmentStatusRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCEnrolmentStatusRecord[] FromRecordList(RLEnrolmentStatusList rl) {
			WORCEnrolmentStatusRecord[] array = new WORCEnrolmentStatusRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCEnrolmentStatusRecord {
		public static implicit operator WORCEnrolmentStatusRecord(RCEnrolmentStatusRecord r) {
			return new WORCEnrolmentStatusRecord(r.ssSTEnrolmentStatus);
		}

		public static implicit operator RCEnrolmentStatusRecord(WORCEnrolmentStatusRecord w) {
			RCEnrolmentStatusRecord r = new RCEnrolmentStatusRecord("");
			if (w != null) {
				r.ssSTEnrolmentStatus = w;
			}
			return r;
		}

	}

	partial struct STEnrolmentStatusStructure {
		public static implicit operator WORCEnrolmentStatusRecord(STEnrolmentStatusStructure r) {
			return new WORCEnrolmentStatusRecord(r);
		}

		public static implicit operator STEnrolmentStatusStructure(WORCEnrolmentStatusRecord w) {
			STEnrolmentStatusStructure r = new STEnrolmentStatusStructure("");
			if (w != null) {
				r.ssEnrolmentStatus = ((string) w.varWSEnrolmentStatus ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLEnrolmentStatusRecordList {
		public WORCEnrolmentStatusRecord[] Array;


		public WORLEnrolmentStatusRecordList(WORCEnrolmentStatusRecord[] r) {
			if (r == null)
			Array = new WORCEnrolmentStatusRecord[0];
			else
			Array = r;
		}
		public WORLEnrolmentStatusRecordList() {
			Array = new WORCEnrolmentStatusRecord[0];
		}

		public WORLEnrolmentStatusRecordList(RLEnrolmentStatusRecordList rl) {
			rl=(RLEnrolmentStatusRecordList) rl.Duplicate();
			Array = new WORCEnrolmentStatusRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCEnrolmentStatusRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLEnrolmentStatusRecordList {
		public static implicit operator RLEnrolmentStatusRecordList(WORCEnrolmentStatusRecord[] array) {
			RLEnrolmentStatusRecordList rl = new RLEnrolmentStatusRecordList();
			if (array != null) {
				foreach(WORCEnrolmentStatusRecord val in array) {
					rl.Append((RCEnrolmentStatusRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCEnrolmentStatusRecord[](RLEnrolmentStatusRecordList rl) {
			WORCEnrolmentStatusRecord[] array = new WORCEnrolmentStatusRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCEnrolmentStatusRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLEnrolmentStatusRecordList {
		public static implicit operator RLEnrolmentStatusRecordList(WORLEnrolmentStatusRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLEnrolmentStatusRecordList(RLEnrolmentStatusRecordList rl) {
			return new WORLEnrolmentStatusRecordList(rl);
		}
		public static implicit operator WORCEnrolmentStatusRecord[](WORLEnrolmentStatusRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLEnrolmentStatusRecordList(WORCEnrolmentStatusRecord[] array) {
			return new WORLEnrolmentStatusRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLEnrolmentStatusList {
		public WORCEnrolmentStatusRecord[] Array;


		public WORLEnrolmentStatusList(WORCEnrolmentStatusRecord[] r) {
			if (r == null)
			Array = new WORCEnrolmentStatusRecord[0];
			else
			Array = r;
		}
		public WORLEnrolmentStatusList() {
			Array = new WORCEnrolmentStatusRecord[0];
		}

		public WORLEnrolmentStatusList(RLEnrolmentStatusList rl) {
			rl=(RLEnrolmentStatusList) rl.Duplicate();
			Array = new WORCEnrolmentStatusRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLEnrolmentStatusList {
		public static implicit operator RLEnrolmentStatusList(WORCEnrolmentStatusRecord[] array) {
			RLEnrolmentStatusList rl = new RLEnrolmentStatusList();
			if (array != null) {
				foreach(WORCEnrolmentStatusRecord val in array) {
					rl.Append((STEnrolmentStatusStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCEnrolmentStatusRecord[](RLEnrolmentStatusList rl) {
			WORCEnrolmentStatusRecord[] array = new WORCEnrolmentStatusRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STEnrolmentStatusStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLEnrolmentStatusList {
		public static implicit operator RLEnrolmentStatusList(WORLEnrolmentStatusList w) {
			return w.Array;
		}
		public static implicit operator WORLEnrolmentStatusList(RLEnrolmentStatusList rl) {
			return new WORLEnrolmentStatusList(rl);
		}
		public static implicit operator WORCEnrolmentStatusRecord[](WORLEnrolmentStatusList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLEnrolmentStatusList(WORCEnrolmentStatusRecord[] array) {
			return new WORLEnrolmentStatusList(array);
		}
	}
}

