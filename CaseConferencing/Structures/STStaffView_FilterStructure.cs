/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STStaffView_FilterStructure</code> that represents the Service Studio structure
	///  <code>StaffView_Filter</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STStaffView_FilterStructure: ISerializable, ITypedRecord<STStaffView_FilterStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdFilterVisible = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*4vkrkjzuPkmdPcD1+WAPaw");
		private static readonly GlobalObjectKey IdRAGStatusListIds = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*DuPoY4kVlUGNFUDV05cOrQ");
		private static readonly GlobalObjectKey IdRAG_Red = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*3mbQE7P6p0maUXfnypR8Eg");
		private static readonly GlobalObjectKey IdRAG_Green = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*EVKOpcCnlUygbLPCb3mCNA");
		private static readonly GlobalObjectKey IdRAG_Amber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*S82h+tYvqEieGm0Gg0+Z7Q");
		private static readonly GlobalObjectKey IdAttendance_Red = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*XxepWiLS9UWM1164_WZodg");
		private static readonly GlobalObjectKey IdAttendance_Green = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*IjDF06qtqU6yhIDdNRu6MQ");
		private static readonly GlobalObjectKey IdAttendance_Amber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*A2DppQjHfkyFSKIm_tpXZQ");
		private static readonly GlobalObjectKey IdPunctuality_Red = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*J4QztYmEtkiYYQKVrLoBHQ");
		private static readonly GlobalObjectKey IdPunctuality_Green = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*LMunL7CjikyHy4tVEHCwlg");
		private static readonly GlobalObjectKey IdPunctuality_Amber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*d6kUUSpe90KfnFslvrHlzg");
		private static readonly GlobalObjectKey IdVOC_Red = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*u+xk5llkkkimCf18J1bP0Q");
		private static readonly GlobalObjectKey IdVOC_Green = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*RJrKsGdGq0Wawbfo70EAuw");
		private static readonly GlobalObjectKey IdVOC_Amber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*mQXrGiKqO0GrEvRv8LrCaA");
		private static readonly GlobalObjectKey IdMath_Red = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*SQGBRKHpmkmyfYdTccsCcg");
		private static readonly GlobalObjectKey IdMath_Green = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*GNaykXWGeUKIYZFpko0rKg");
		private static readonly GlobalObjectKey IdMath_Amber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*hzifZC8g6kqHWdZIDEXVoQ");
		private static readonly GlobalObjectKey IdEnglish_Red = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*nBefRRyDz0u2tCmwDG5X5A");
		private static readonly GlobalObjectKey IdEnglish_Green = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*9vNjqp7IiE+vReoQ5W9q+g");
		private static readonly GlobalObjectKey IdEnglish_Amber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*5CqyFKmvCEKQwaRdeHwfPA");
		private static readonly GlobalObjectKey IdMLW_Red = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*+46E6QJDZkWyEUVzmf9D3w");
		private static readonly GlobalObjectKey IdMLW_Green = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*+7lXtE3c0km9z_EOGvMZCQ");
		private static readonly GlobalObjectKey IdMLW_Amber = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ultPH_sn_kOzmoxVMC_bSA");
		private static readonly GlobalObjectKey IdCFC = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*llL6kfqGc0K+iizSKk4wbw");
		private static readonly GlobalObjectKey IdSafeGuard = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*V83pmYQYxE2axYKJQR96Yg");
		private static readonly GlobalObjectKey IdReward = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*kYQFMkAAzUKvKsAhjxIoPA");
		private static readonly GlobalObjectKey IdOrderBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*xp9gD6nwd069vNZBDv1KDQ");
		private static readonly GlobalObjectKey IdOrderDirection = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*uLDV1s6yLkCt0je7a1t1Og");
		private static readonly GlobalObjectKey IdSupportTransport = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*_dAuiAvgWkyyhzwWnOGc4Q");
		private static readonly GlobalObjectKey IdSupportFinancial = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*iDgB70EUekGulcKz6pX_Uw");
		private static readonly GlobalObjectKey IdSupportAcademic = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*B2NuEWncwUCY2z1TZgMhuQ");
		private static readonly GlobalObjectKey IdSupportPersonal = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*cid_i0WHVU2tAvvQ8wF6uQ");
		private static readonly GlobalObjectKey IdSupports = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*dYhbI4x18kOLBHqDu3Ca+Q");
		private static readonly GlobalObjectKey IdFilterActive = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*RiYzESkyU0iPK8Bx7gcbtg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("FilterVisible")]
		public bool ssFilterVisible;

		[System.Xml.Serialization.XmlElement("RAGStatusListIds")]
		public string ssRAGStatusListIds;

		[System.Xml.Serialization.XmlElement("RAG_Red")]
		public bool ssRAG_Red;

		[System.Xml.Serialization.XmlElement("RAG_Green")]
		public bool ssRAG_Green;

		[System.Xml.Serialization.XmlElement("RAG_Amber")]
		public bool ssRAG_Amber;

		[System.Xml.Serialization.XmlElement("Attendance_Red")]
		public bool ssAttendance_Red;

		[System.Xml.Serialization.XmlElement("Attendance_Green")]
		public bool ssAttendance_Green;

		[System.Xml.Serialization.XmlElement("Attendance_Amber")]
		public bool ssAttendance_Amber;

		[System.Xml.Serialization.XmlElement("Punctuality_Red")]
		public bool ssPunctuality_Red;

		[System.Xml.Serialization.XmlElement("Punctuality_Green")]
		public bool ssPunctuality_Green;

		[System.Xml.Serialization.XmlElement("Punctuality_Amber")]
		public bool ssPunctuality_Amber;

		[System.Xml.Serialization.XmlElement("VOC_Red")]
		public bool ssVOC_Red;

		[System.Xml.Serialization.XmlElement("VOC_Green")]
		public bool ssVOC_Green;

		[System.Xml.Serialization.XmlElement("VOC_Amber")]
		public bool ssVOC_Amber;

		[System.Xml.Serialization.XmlElement("Math_Red")]
		public bool ssMath_Red;

		[System.Xml.Serialization.XmlElement("Math_Green")]
		public bool ssMath_Green;

		[System.Xml.Serialization.XmlElement("Math_Amber")]
		public bool ssMath_Amber;

		[System.Xml.Serialization.XmlElement("English_Red")]
		public bool ssEnglish_Red;

		[System.Xml.Serialization.XmlElement("English_Green")]
		public bool ssEnglish_Green;

		[System.Xml.Serialization.XmlElement("English_Amber")]
		public bool ssEnglish_Amber;

		[System.Xml.Serialization.XmlElement("MLW_Red")]
		public bool ssMLW_Red;

		[System.Xml.Serialization.XmlElement("MLW_Green")]
		public bool ssMLW_Green;

		[System.Xml.Serialization.XmlElement("MLW_Amber")]
		public bool ssMLW_Amber;

		[System.Xml.Serialization.XmlElement("CFC")]
		public bool ssCFC;

		[System.Xml.Serialization.XmlElement("SafeGuard")]
		public bool ssSafeGuard;

		[System.Xml.Serialization.XmlElement("Reward")]
		public bool ssReward;

		[System.Xml.Serialization.XmlElement("OrderBy")]
		public string ssOrderBy;

		[System.Xml.Serialization.XmlElement("OrderDirection")]
		public string ssOrderDirection;

		[System.Xml.Serialization.XmlElement("SupportTransport")]
		public bool ssSupportTransport;

		[System.Xml.Serialization.XmlElement("SupportFinancial")]
		public bool ssSupportFinancial;

		[System.Xml.Serialization.XmlElement("SupportAcademic")]
		public bool ssSupportAcademic;

		[System.Xml.Serialization.XmlElement("SupportPersonal")]
		public bool ssSupportPersonal;

		[System.Xml.Serialization.XmlElement("Supports")]
		public string ssSupports;

		[System.Xml.Serialization.XmlElement("FilterActive")]
		public bool ssFilterActive;


		public BitArray OptimizedAttributes;

		public STStaffView_FilterStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssFilterVisible = false;
			ssRAGStatusListIds = "\'0\'";
			ssRAG_Red = false;
			ssRAG_Green = false;
			ssRAG_Amber = false;
			ssAttendance_Red = false;
			ssAttendance_Green = false;
			ssAttendance_Amber = false;
			ssPunctuality_Red = false;
			ssPunctuality_Green = false;
			ssPunctuality_Amber = false;
			ssVOC_Red = false;
			ssVOC_Green = false;
			ssVOC_Amber = false;
			ssMath_Red = false;
			ssMath_Green = false;
			ssMath_Amber = false;
			ssEnglish_Red = false;
			ssEnglish_Green = false;
			ssEnglish_Amber = false;
			ssMLW_Red = false;
			ssMLW_Green = false;
			ssMLW_Amber = false;
			ssCFC = false;
			ssSafeGuard = false;
			ssReward = false;
			ssOrderBy = "Name";
			ssOrderDirection = "ASC";
			ssSupportTransport = false;
			ssSupportFinancial = false;
			ssSupportAcademic = false;
			ssSupportPersonal = false;
			ssSupports = "";
			ssFilterActive = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssFilterVisible = r.ReadBoolean(index++, "StaffView_Filter.FilterVisible", false);
			ssRAGStatusListIds = r.ReadText(index++, "StaffView_Filter.RAGStatusListIds", "");
			ssRAG_Red = r.ReadBoolean(index++, "StaffView_Filter.RAG_Red", false);
			ssRAG_Green = r.ReadBoolean(index++, "StaffView_Filter.RAG_Green", false);
			ssRAG_Amber = r.ReadBoolean(index++, "StaffView_Filter.RAG_Amber", false);
			ssAttendance_Red = r.ReadBoolean(index++, "StaffView_Filter.Attendance_Red", false);
			ssAttendance_Green = r.ReadBoolean(index++, "StaffView_Filter.Attendance_Green", false);
			ssAttendance_Amber = r.ReadBoolean(index++, "StaffView_Filter.Attendance_Amber", false);
			ssPunctuality_Red = r.ReadBoolean(index++, "StaffView_Filter.Punctuality_Red", false);
			ssPunctuality_Green = r.ReadBoolean(index++, "StaffView_Filter.Punctuality_Green", false);
			ssPunctuality_Amber = r.ReadBoolean(index++, "StaffView_Filter.Punctuality_Amber", false);
			ssVOC_Red = r.ReadBoolean(index++, "StaffView_Filter.VOC_Red", false);
			ssVOC_Green = r.ReadBoolean(index++, "StaffView_Filter.VOC_Green", false);
			ssVOC_Amber = r.ReadBoolean(index++, "StaffView_Filter.VOC_Amber", false);
			ssMath_Red = r.ReadBoolean(index++, "StaffView_Filter.Math_Red", false);
			ssMath_Green = r.ReadBoolean(index++, "StaffView_Filter.Math_Green", false);
			ssMath_Amber = r.ReadBoolean(index++, "StaffView_Filter.Math_Amber", false);
			ssEnglish_Red = r.ReadBoolean(index++, "StaffView_Filter.English_Red", false);
			ssEnglish_Green = r.ReadBoolean(index++, "StaffView_Filter.English_Green", false);
			ssEnglish_Amber = r.ReadBoolean(index++, "StaffView_Filter.English_Amber", false);
			ssMLW_Red = r.ReadBoolean(index++, "StaffView_Filter.MLW_Red", false);
			ssMLW_Green = r.ReadBoolean(index++, "StaffView_Filter.MLW_Green", false);
			ssMLW_Amber = r.ReadBoolean(index++, "StaffView_Filter.MLW_Amber", false);
			ssCFC = r.ReadBoolean(index++, "StaffView_Filter.CFC", false);
			ssSafeGuard = r.ReadBoolean(index++, "StaffView_Filter.SafeGuard", false);
			ssReward = r.ReadBoolean(index++, "StaffView_Filter.Reward", false);
			ssOrderBy = r.ReadText(index++, "StaffView_Filter.OrderBy", "");
			ssOrderDirection = r.ReadText(index++, "StaffView_Filter.OrderDirection", "");
			ssSupportTransport = r.ReadBoolean(index++, "StaffView_Filter.SupportTransport", false);
			ssSupportFinancial = r.ReadBoolean(index++, "StaffView_Filter.SupportFinancial", false);
			ssSupportAcademic = r.ReadBoolean(index++, "StaffView_Filter.SupportAcademic", false);
			ssSupportPersonal = r.ReadBoolean(index++, "StaffView_Filter.SupportPersonal", false);
			ssSupports = r.ReadText(index++, "StaffView_Filter.Supports", "");
			ssFilterActive = r.ReadBoolean(index++, "StaffView_Filter.FilterActive", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STStaffView_FilterStructure r) {
			this = r;
		}


		public static bool operator == (STStaffView_FilterStructure a, STStaffView_FilterStructure b) {
			if (a.ssFilterVisible != b.ssFilterVisible) return false;
			if (a.ssRAGStatusListIds != b.ssRAGStatusListIds) return false;
			if (a.ssRAG_Red != b.ssRAG_Red) return false;
			if (a.ssRAG_Green != b.ssRAG_Green) return false;
			if (a.ssRAG_Amber != b.ssRAG_Amber) return false;
			if (a.ssAttendance_Red != b.ssAttendance_Red) return false;
			if (a.ssAttendance_Green != b.ssAttendance_Green) return false;
			if (a.ssAttendance_Amber != b.ssAttendance_Amber) return false;
			if (a.ssPunctuality_Red != b.ssPunctuality_Red) return false;
			if (a.ssPunctuality_Green != b.ssPunctuality_Green) return false;
			if (a.ssPunctuality_Amber != b.ssPunctuality_Amber) return false;
			if (a.ssVOC_Red != b.ssVOC_Red) return false;
			if (a.ssVOC_Green != b.ssVOC_Green) return false;
			if (a.ssVOC_Amber != b.ssVOC_Amber) return false;
			if (a.ssMath_Red != b.ssMath_Red) return false;
			if (a.ssMath_Green != b.ssMath_Green) return false;
			if (a.ssMath_Amber != b.ssMath_Amber) return false;
			if (a.ssEnglish_Red != b.ssEnglish_Red) return false;
			if (a.ssEnglish_Green != b.ssEnglish_Green) return false;
			if (a.ssEnglish_Amber != b.ssEnglish_Amber) return false;
			if (a.ssMLW_Red != b.ssMLW_Red) return false;
			if (a.ssMLW_Green != b.ssMLW_Green) return false;
			if (a.ssMLW_Amber != b.ssMLW_Amber) return false;
			if (a.ssCFC != b.ssCFC) return false;
			if (a.ssSafeGuard != b.ssSafeGuard) return false;
			if (a.ssReward != b.ssReward) return false;
			if (a.ssOrderBy != b.ssOrderBy) return false;
			if (a.ssOrderDirection != b.ssOrderDirection) return false;
			if (a.ssSupportTransport != b.ssSupportTransport) return false;
			if (a.ssSupportFinancial != b.ssSupportFinancial) return false;
			if (a.ssSupportAcademic != b.ssSupportAcademic) return false;
			if (a.ssSupportPersonal != b.ssSupportPersonal) return false;
			if (a.ssSupports != b.ssSupports) return false;
			if (a.ssFilterActive != b.ssFilterActive) return false;
			return true;
		}

		public static bool operator != (STStaffView_FilterStructure a, STStaffView_FilterStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STStaffView_FilterStructure)) return false;
			return (this == (STStaffView_FilterStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssFilterVisible.GetHashCode()
				^ ssRAGStatusListIds.GetHashCode()
				^ ssRAG_Red.GetHashCode()
				^ ssRAG_Green.GetHashCode()
				^ ssRAG_Amber.GetHashCode()
				^ ssAttendance_Red.GetHashCode()
				^ ssAttendance_Green.GetHashCode()
				^ ssAttendance_Amber.GetHashCode()
				^ ssPunctuality_Red.GetHashCode()
				^ ssPunctuality_Green.GetHashCode()
				^ ssPunctuality_Amber.GetHashCode()
				^ ssVOC_Red.GetHashCode()
				^ ssVOC_Green.GetHashCode()
				^ ssVOC_Amber.GetHashCode()
				^ ssMath_Red.GetHashCode()
				^ ssMath_Green.GetHashCode()
				^ ssMath_Amber.GetHashCode()
				^ ssEnglish_Red.GetHashCode()
				^ ssEnglish_Green.GetHashCode()
				^ ssEnglish_Amber.GetHashCode()
				^ ssMLW_Red.GetHashCode()
				^ ssMLW_Green.GetHashCode()
				^ ssMLW_Amber.GetHashCode()
				^ ssCFC.GetHashCode()
				^ ssSafeGuard.GetHashCode()
				^ ssReward.GetHashCode()
				^ ssOrderBy.GetHashCode()
				^ ssOrderDirection.GetHashCode()
				^ ssSupportTransport.GetHashCode()
				^ ssSupportFinancial.GetHashCode()
				^ ssSupportAcademic.GetHashCode()
				^ ssSupportPersonal.GetHashCode()
				^ ssSupports.GetHashCode()
				^ ssFilterActive.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STStaffView_FilterStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssFilterVisible = false;
			ssRAGStatusListIds = "\'0\'";
			ssRAG_Red = false;
			ssRAG_Green = false;
			ssRAG_Amber = false;
			ssAttendance_Red = false;
			ssAttendance_Green = false;
			ssAttendance_Amber = false;
			ssPunctuality_Red = false;
			ssPunctuality_Green = false;
			ssPunctuality_Amber = false;
			ssVOC_Red = false;
			ssVOC_Green = false;
			ssVOC_Amber = false;
			ssMath_Red = false;
			ssMath_Green = false;
			ssMath_Amber = false;
			ssEnglish_Red = false;
			ssEnglish_Green = false;
			ssEnglish_Amber = false;
			ssMLW_Red = false;
			ssMLW_Green = false;
			ssMLW_Amber = false;
			ssCFC = false;
			ssSafeGuard = false;
			ssReward = false;
			ssOrderBy = "Name";
			ssOrderDirection = "ASC";
			ssSupportTransport = false;
			ssSupportFinancial = false;
			ssSupportAcademic = false;
			ssSupportPersonal = false;
			ssSupports = "";
			ssFilterActive = false;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssFilterVisible = (bool) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssRAGStatusListIds = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssRAG_Red = (bool) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssRAG_Green = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssRAG_Amber = (bool) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssAttendance_Red = (bool) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssAttendance_Green = (bool) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssAttendance_Amber = (bool) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssPunctuality_Red = (bool) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssPunctuality_Green = (bool) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			ssPunctuality_Amber = (bool) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			ssVOC_Red = (bool) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			ssVOC_Green = (bool) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			ssVOC_Amber = (bool) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			ssMath_Red = (bool) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			ssMath_Green = (bool) info.GetValue(fields[15] .Name, fields[15] .FieldType);
			if (fields[16] .FieldType.IsSerializable)
			ssMath_Amber = (bool) info.GetValue(fields[16] .Name, fields[16] .FieldType);
			if (fields[17] .FieldType.IsSerializable)
			ssEnglish_Red = (bool) info.GetValue(fields[17] .Name, fields[17] .FieldType);
			if (fields[18] .FieldType.IsSerializable)
			ssEnglish_Green = (bool) info.GetValue(fields[18] .Name, fields[18] .FieldType);
			if (fields[19] .FieldType.IsSerializable)
			ssEnglish_Amber = (bool) info.GetValue(fields[19] .Name, fields[19] .FieldType);
			if (fields[20] .FieldType.IsSerializable)
			ssMLW_Red = (bool) info.GetValue(fields[20] .Name, fields[20] .FieldType);
			if (fields[21] .FieldType.IsSerializable)
			ssMLW_Green = (bool) info.GetValue(fields[21] .Name, fields[21] .FieldType);
			if (fields[22] .FieldType.IsSerializable)
			ssMLW_Amber = (bool) info.GetValue(fields[22] .Name, fields[22] .FieldType);
			if (fields[23] .FieldType.IsSerializable)
			ssCFC = (bool) info.GetValue(fields[23] .Name, fields[23] .FieldType);
			if (fields[24] .FieldType.IsSerializable)
			ssSafeGuard = (bool) info.GetValue(fields[24] .Name, fields[24] .FieldType);
			if (fields[25] .FieldType.IsSerializable)
			ssReward = (bool) info.GetValue(fields[25] .Name, fields[25] .FieldType);
			if (fields[26] .FieldType.IsSerializable)
			ssOrderBy = (string) info.GetValue(fields[26] .Name, fields[26] .FieldType);
			if (fields[27] .FieldType.IsSerializable)
			ssOrderDirection = (string) info.GetValue(fields[27] .Name, fields[27] .FieldType);
			if (fields[28] .FieldType.IsSerializable)
			ssSupportTransport = (bool) info.GetValue(fields[28] .Name, fields[28] .FieldType);
			if (fields[29] .FieldType.IsSerializable)
			ssSupportFinancial = (bool) info.GetValue(fields[29] .Name, fields[29] .FieldType);
			if (fields[30] .FieldType.IsSerializable)
			ssSupportAcademic = (bool) info.GetValue(fields[30] .Name, fields[30] .FieldType);
			if (fields[31] .FieldType.IsSerializable)
			ssSupportPersonal = (bool) info.GetValue(fields[31] .Name, fields[31] .FieldType);
			if (fields[32] .FieldType.IsSerializable)
			ssSupports = (string) info.GetValue(fields[32] .Name, fields[32] .FieldType);
			if (fields[33] .FieldType.IsSerializable)
			ssFilterActive = (bool) info.GetValue(fields[33] .Name, fields[33] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STStaffView_FilterStructure Duplicate() {
			STStaffView_FilterStructure t;
			t.ssFilterVisible = this.ssFilterVisible;
			t.ssRAGStatusListIds = this.ssRAGStatusListIds;
			t.ssRAG_Red = this.ssRAG_Red;
			t.ssRAG_Green = this.ssRAG_Green;
			t.ssRAG_Amber = this.ssRAG_Amber;
			t.ssAttendance_Red = this.ssAttendance_Red;
			t.ssAttendance_Green = this.ssAttendance_Green;
			t.ssAttendance_Amber = this.ssAttendance_Amber;
			t.ssPunctuality_Red = this.ssPunctuality_Red;
			t.ssPunctuality_Green = this.ssPunctuality_Green;
			t.ssPunctuality_Amber = this.ssPunctuality_Amber;
			t.ssVOC_Red = this.ssVOC_Red;
			t.ssVOC_Green = this.ssVOC_Green;
			t.ssVOC_Amber = this.ssVOC_Amber;
			t.ssMath_Red = this.ssMath_Red;
			t.ssMath_Green = this.ssMath_Green;
			t.ssMath_Amber = this.ssMath_Amber;
			t.ssEnglish_Red = this.ssEnglish_Red;
			t.ssEnglish_Green = this.ssEnglish_Green;
			t.ssEnglish_Amber = this.ssEnglish_Amber;
			t.ssMLW_Red = this.ssMLW_Red;
			t.ssMLW_Green = this.ssMLW_Green;
			t.ssMLW_Amber = this.ssMLW_Amber;
			t.ssCFC = this.ssCFC;
			t.ssSafeGuard = this.ssSafeGuard;
			t.ssReward = this.ssReward;
			t.ssOrderBy = this.ssOrderBy;
			t.ssOrderDirection = this.ssOrderDirection;
			t.ssSupportTransport = this.ssSupportTransport;
			t.ssSupportFinancial = this.ssSupportFinancial;
			t.ssSupportAcademic = this.ssSupportAcademic;
			t.ssSupportPersonal = this.ssSupportPersonal;
			t.ssSupports = this.ssSupports;
			t.ssFilterActive = this.ssFilterActive;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FilterVisible")) VarValue.AppendAttribute(recordElem, "FilterVisible", ssFilterVisible, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "FilterVisible");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RAGStatusListIds")) VarValue.AppendAttribute(recordElem, "RAGStatusListIds", ssRAGStatusListIds, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "RAGStatusListIds");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RAG_Red")) VarValue.AppendAttribute(recordElem, "RAG_Red", ssRAG_Red, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "RAG_Red");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RAG_Green")) VarValue.AppendAttribute(recordElem, "RAG_Green", ssRAG_Green, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "RAG_Green");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RAG_Amber")) VarValue.AppendAttribute(recordElem, "RAG_Amber", ssRAG_Amber, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "RAG_Amber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Attendance_Red")) VarValue.AppendAttribute(recordElem, "Attendance_Red", ssAttendance_Red, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Attendance_Red");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Attendance_Green")) VarValue.AppendAttribute(recordElem, "Attendance_Green", ssAttendance_Green, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Attendance_Green");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Attendance_Amber")) VarValue.AppendAttribute(recordElem, "Attendance_Amber", ssAttendance_Amber, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Attendance_Amber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Punctuality_Red")) VarValue.AppendAttribute(recordElem, "Punctuality_Red", ssPunctuality_Red, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Punctuality_Red");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Punctuality_Green")) VarValue.AppendAttribute(recordElem, "Punctuality_Green", ssPunctuality_Green, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Punctuality_Green");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Punctuality_Amber")) VarValue.AppendAttribute(recordElem, "Punctuality_Amber", ssPunctuality_Amber, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Punctuality_Amber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VOC_Red")) VarValue.AppendAttribute(recordElem, "VOC_Red", ssVOC_Red, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "VOC_Red");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VOC_Green")) VarValue.AppendAttribute(recordElem, "VOC_Green", ssVOC_Green, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "VOC_Green");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VOC_Amber")) VarValue.AppendAttribute(recordElem, "VOC_Amber", ssVOC_Amber, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "VOC_Amber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Math_Red")) VarValue.AppendAttribute(recordElem, "Math_Red", ssMath_Red, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Math_Red");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Math_Green")) VarValue.AppendAttribute(recordElem, "Math_Green", ssMath_Green, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Math_Green");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Math_Amber")) VarValue.AppendAttribute(recordElem, "Math_Amber", ssMath_Amber, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Math_Amber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".English_Red")) VarValue.AppendAttribute(recordElem, "English_Red", ssEnglish_Red, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "English_Red");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".English_Green")) VarValue.AppendAttribute(recordElem, "English_Green", ssEnglish_Green, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "English_Green");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".English_Amber")) VarValue.AppendAttribute(recordElem, "English_Amber", ssEnglish_Amber, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "English_Amber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLW_Red")) VarValue.AppendAttribute(recordElem, "MLW_Red", ssMLW_Red, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "MLW_Red");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLW_Green")) VarValue.AppendAttribute(recordElem, "MLW_Green", ssMLW_Green, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "MLW_Green");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MLW_Amber")) VarValue.AppendAttribute(recordElem, "MLW_Amber", ssMLW_Amber, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "MLW_Amber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CFC")) VarValue.AppendAttribute(recordElem, "CFC", ssCFC, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "CFC");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeGuard")) VarValue.AppendAttribute(recordElem, "SafeGuard", ssSafeGuard, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SafeGuard");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Reward")) VarValue.AppendAttribute(recordElem, "Reward", ssReward, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Reward");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OrderBy")) VarValue.AppendAttribute(recordElem, "OrderBy", ssOrderBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OrderBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OrderDirection")) VarValue.AppendAttribute(recordElem, "OrderDirection", ssOrderDirection, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OrderDirection");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportTransport")) VarValue.AppendAttribute(recordElem, "SupportTransport", ssSupportTransport, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SupportTransport");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportFinancial")) VarValue.AppendAttribute(recordElem, "SupportFinancial", ssSupportFinancial, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SupportFinancial");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportAcademic")) VarValue.AppendAttribute(recordElem, "SupportAcademic", ssSupportAcademic, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SupportAcademic");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SupportPersonal")) VarValue.AppendAttribute(recordElem, "SupportPersonal", ssSupportPersonal, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SupportPersonal");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Supports")) VarValue.AppendAttribute(recordElem, "Supports", ssSupports, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Supports");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FilterActive")) VarValue.AppendAttribute(recordElem, "FilterActive", ssFilterActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "FilterActive");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "filtervisible") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FilterVisible")) variable.Value = ssFilterVisible; else variable.Optimized = true;
			} else if (head == "ragstatuslistids") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatusListIds")) variable.Value = ssRAGStatusListIds; else variable.Optimized = true;
			} else if (head == "rag_red") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAG_Red")) variable.Value = ssRAG_Red; else variable.Optimized = true;
			} else if (head == "rag_green") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAG_Green")) variable.Value = ssRAG_Green; else variable.Optimized = true;
			} else if (head == "rag_amber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAG_Amber")) variable.Value = ssRAG_Amber; else variable.Optimized = true;
			} else if (head == "attendance_red") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Attendance_Red")) variable.Value = ssAttendance_Red; else variable.Optimized = true;
			} else if (head == "attendance_green") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Attendance_Green")) variable.Value = ssAttendance_Green; else variable.Optimized = true;
			} else if (head == "attendance_amber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Attendance_Amber")) variable.Value = ssAttendance_Amber; else variable.Optimized = true;
			} else if (head == "punctuality_red") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Punctuality_Red")) variable.Value = ssPunctuality_Red; else variable.Optimized = true;
			} else if (head == "punctuality_green") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Punctuality_Green")) variable.Value = ssPunctuality_Green; else variable.Optimized = true;
			} else if (head == "punctuality_amber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Punctuality_Amber")) variable.Value = ssPunctuality_Amber; else variable.Optimized = true;
			} else if (head == "voc_red") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VOC_Red")) variable.Value = ssVOC_Red; else variable.Optimized = true;
			} else if (head == "voc_green") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VOC_Green")) variable.Value = ssVOC_Green; else variable.Optimized = true;
			} else if (head == "voc_amber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VOC_Amber")) variable.Value = ssVOC_Amber; else variable.Optimized = true;
			} else if (head == "math_red") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Math_Red")) variable.Value = ssMath_Red; else variable.Optimized = true;
			} else if (head == "math_green") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Math_Green")) variable.Value = ssMath_Green; else variable.Optimized = true;
			} else if (head == "math_amber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Math_Amber")) variable.Value = ssMath_Amber; else variable.Optimized = true;
			} else if (head == "english_red") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".English_Red")) variable.Value = ssEnglish_Red; else variable.Optimized = true;
			} else if (head == "english_green") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".English_Green")) variable.Value = ssEnglish_Green; else variable.Optimized = true;
			} else if (head == "english_amber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".English_Amber")) variable.Value = ssEnglish_Amber; else variable.Optimized = true;
			} else if (head == "mlw_red") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLW_Red")) variable.Value = ssMLW_Red; else variable.Optimized = true;
			} else if (head == "mlw_green") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLW_Green")) variable.Value = ssMLW_Green; else variable.Optimized = true;
			} else if (head == "mlw_amber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MLW_Amber")) variable.Value = ssMLW_Amber; else variable.Optimized = true;
			} else if (head == "cfc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CFC")) variable.Value = ssCFC; else variable.Optimized = true;
			} else if (head == "safeguard") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeGuard")) variable.Value = ssSafeGuard; else variable.Optimized = true;
			} else if (head == "reward") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Reward")) variable.Value = ssReward; else variable.Optimized = true;
			} else if (head == "orderby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OrderBy")) variable.Value = ssOrderBy; else variable.Optimized = true;
			} else if (head == "orderdirection") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OrderDirection")) variable.Value = ssOrderDirection; else variable.Optimized = true;
			} else if (head == "supporttransport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportTransport")) variable.Value = ssSupportTransport; else variable.Optimized = true;
			} else if (head == "supportfinancial") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportFinancial")) variable.Value = ssSupportFinancial; else variable.Optimized = true;
			} else if (head == "supportacademic") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportAcademic")) variable.Value = ssSupportAcademic; else variable.Optimized = true;
			} else if (head == "supportpersonal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SupportPersonal")) variable.Value = ssSupportPersonal; else variable.Optimized = true;
			} else if (head == "supports") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Supports")) variable.Value = ssSupports; else variable.Optimized = true;
			} else if (head == "filteractive") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FilterActive")) variable.Value = ssFilterActive; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdFilterVisible) {
				return ssFilterVisible;
			} else if (key == IdRAGStatusListIds) {
				return ssRAGStatusListIds;
			} else if (key == IdRAG_Red) {
				return ssRAG_Red;
			} else if (key == IdRAG_Green) {
				return ssRAG_Green;
			} else if (key == IdRAG_Amber) {
				return ssRAG_Amber;
			} else if (key == IdAttendance_Red) {
				return ssAttendance_Red;
			} else if (key == IdAttendance_Green) {
				return ssAttendance_Green;
			} else if (key == IdAttendance_Amber) {
				return ssAttendance_Amber;
			} else if (key == IdPunctuality_Red) {
				return ssPunctuality_Red;
			} else if (key == IdPunctuality_Green) {
				return ssPunctuality_Green;
			} else if (key == IdPunctuality_Amber) {
				return ssPunctuality_Amber;
			} else if (key == IdVOC_Red) {
				return ssVOC_Red;
			} else if (key == IdVOC_Green) {
				return ssVOC_Green;
			} else if (key == IdVOC_Amber) {
				return ssVOC_Amber;
			} else if (key == IdMath_Red) {
				return ssMath_Red;
			} else if (key == IdMath_Green) {
				return ssMath_Green;
			} else if (key == IdMath_Amber) {
				return ssMath_Amber;
			} else if (key == IdEnglish_Red) {
				return ssEnglish_Red;
			} else if (key == IdEnglish_Green) {
				return ssEnglish_Green;
			} else if (key == IdEnglish_Amber) {
				return ssEnglish_Amber;
			} else if (key == IdMLW_Red) {
				return ssMLW_Red;
			} else if (key == IdMLW_Green) {
				return ssMLW_Green;
			} else if (key == IdMLW_Amber) {
				return ssMLW_Amber;
			} else if (key == IdCFC) {
				return ssCFC;
			} else if (key == IdSafeGuard) {
				return ssSafeGuard;
			} else if (key == IdReward) {
				return ssReward;
			} else if (key == IdOrderBy) {
				return ssOrderBy;
			} else if (key == IdOrderDirection) {
				return ssOrderDirection;
			} else if (key == IdSupportTransport) {
				return ssSupportTransport;
			} else if (key == IdSupportFinancial) {
				return ssSupportFinancial;
			} else if (key == IdSupportAcademic) {
				return ssSupportAcademic;
			} else if (key == IdSupportPersonal) {
				return ssSupportPersonal;
			} else if (key == IdSupports) {
				return ssSupports;
			} else if (key == IdFilterActive) {
				return ssFilterActive;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssFilterVisible = (bool) other.AttributeGet(IdFilterVisible);
			ssRAGStatusListIds = (string) other.AttributeGet(IdRAGStatusListIds);
			ssRAG_Red = (bool) other.AttributeGet(IdRAG_Red);
			ssRAG_Green = (bool) other.AttributeGet(IdRAG_Green);
			ssRAG_Amber = (bool) other.AttributeGet(IdRAG_Amber);
			ssAttendance_Red = (bool) other.AttributeGet(IdAttendance_Red);
			ssAttendance_Green = (bool) other.AttributeGet(IdAttendance_Green);
			ssAttendance_Amber = (bool) other.AttributeGet(IdAttendance_Amber);
			ssPunctuality_Red = (bool) other.AttributeGet(IdPunctuality_Red);
			ssPunctuality_Green = (bool) other.AttributeGet(IdPunctuality_Green);
			ssPunctuality_Amber = (bool) other.AttributeGet(IdPunctuality_Amber);
			ssVOC_Red = (bool) other.AttributeGet(IdVOC_Red);
			ssVOC_Green = (bool) other.AttributeGet(IdVOC_Green);
			ssVOC_Amber = (bool) other.AttributeGet(IdVOC_Amber);
			ssMath_Red = (bool) other.AttributeGet(IdMath_Red);
			ssMath_Green = (bool) other.AttributeGet(IdMath_Green);
			ssMath_Amber = (bool) other.AttributeGet(IdMath_Amber);
			ssEnglish_Red = (bool) other.AttributeGet(IdEnglish_Red);
			ssEnglish_Green = (bool) other.AttributeGet(IdEnglish_Green);
			ssEnglish_Amber = (bool) other.AttributeGet(IdEnglish_Amber);
			ssMLW_Red = (bool) other.AttributeGet(IdMLW_Red);
			ssMLW_Green = (bool) other.AttributeGet(IdMLW_Green);
			ssMLW_Amber = (bool) other.AttributeGet(IdMLW_Amber);
			ssCFC = (bool) other.AttributeGet(IdCFC);
			ssSafeGuard = (bool) other.AttributeGet(IdSafeGuard);
			ssReward = (bool) other.AttributeGet(IdReward);
			ssOrderBy = (string) other.AttributeGet(IdOrderBy);
			ssOrderDirection = (string) other.AttributeGet(IdOrderDirection);
			ssSupportTransport = (bool) other.AttributeGet(IdSupportTransport);
			ssSupportFinancial = (bool) other.AttributeGet(IdSupportFinancial);
			ssSupportAcademic = (bool) other.AttributeGet(IdSupportAcademic);
			ssSupportPersonal = (bool) other.AttributeGet(IdSupportPersonal);
			ssSupports = (string) other.AttributeGet(IdSupports);
			ssFilterActive = (bool) other.AttributeGet(IdFilterActive);
		}
	} // STStaffView_FilterStructure
	/// <summary>
	/// Structure <code>RCStaffView_FilterRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffView_FilterRecord: ISerializable, ITypedRecord<RCStaffView_FilterRecord> {
		private static readonly GlobalObjectKey IdStaffView_Filter = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*k3GVanUrTn8wiCUbUEozqw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StaffView_Filter")]
		public STStaffView_FilterStructure ssSTStaffView_Filter;


		public static implicit operator STStaffView_FilterStructure(RCStaffView_FilterRecord r) {
			return r.ssSTStaffView_Filter;
		}

		public static implicit operator RCStaffView_FilterRecord(STStaffView_FilterStructure r) {
			RCStaffView_FilterRecord res = new RCStaffView_FilterRecord(null);
			res.ssSTStaffView_Filter = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCStaffView_FilterRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTStaffView_Filter = new STStaffView_FilterStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTStaffView_Filter.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTStaffView_Filter.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffView_FilterRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffView_FilterRecord a, RCStaffView_FilterRecord b) {
			if (a.ssSTStaffView_Filter != b.ssSTStaffView_Filter) return false;
			return true;
		}

		public static bool operator != (RCStaffView_FilterRecord a, RCStaffView_FilterRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffView_FilterRecord)) return false;
			return (this == (RCStaffView_FilterRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTStaffView_Filter.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffView_FilterRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTStaffView_Filter = new STStaffView_FilterStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTStaffView_Filter = (STStaffView_FilterStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTStaffView_Filter.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTStaffView_Filter.InternalRecursiveSave();
		}


		public RCStaffView_FilterRecord Duplicate() {
			RCStaffView_FilterRecord t;
			t.ssSTStaffView_Filter = (STStaffView_FilterStructure) this.ssSTStaffView_Filter.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTStaffView_Filter.ToXml(this, recordElem, "StaffView_Filter", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staffview_filter") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffView_Filter")) variable.Value = ssSTStaffView_Filter; else variable.Optimized = true;
				variable.SetFieldName("staffview_filter");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaffView_Filter) {
				return ssSTStaffView_Filter;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTStaffView_Filter.FillFromOther((IRecord) other.AttributeGet(IdStaffView_Filter));
		}
	} // RCStaffView_FilterRecord
	/// <summary>
	/// RecordList type <code>RLStaffView_FilterRecordList</code> that represents a record list of
	///  <code>StaffView_Filter</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffView_FilterRecordList: GenericRecordList<RCStaffView_FilterRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffView_FilterRecord GetElementDefaultValue() {
			return new RCStaffView_FilterRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffView_FilterRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffView_FilterRecordList recordlist, Func<RCStaffView_FilterRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffView_FilterRecordList ToList<T>(T[] array, Func <T, RCStaffView_FilterRecord> converter) {
			RLStaffView_FilterRecordList result = new RLStaffView_FilterRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffView_FilterRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_FilterRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_FilterRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffView_FilterRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffView_FilterRecord> NewList() {
			return new RLStaffView_FilterRecordList();
		}


	} // RLStaffView_FilterRecordList
	/// <summary>
	/// RecordList type <code>RLStaffView_FilterList</code> that represents a record list of <code>Text,
	///  Text, Text, Text, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean
	/// , Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean,
	///  Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean
	/// , Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffView_FilterList: GenericRecordList<STStaffView_FilterStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STStaffView_FilterStructure GetElementDefaultValue() {
			return new STStaffView_FilterStructure("");
		}

		public T[] ToArray<T>(Func<STStaffView_FilterStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffView_FilterList recordlist, Func<STStaffView_FilterStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffView_FilterList ToList<T>(T[] array, Func <T, STStaffView_FilterStructure> converter) {
			RLStaffView_FilterList result = new RLStaffView_FilterList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffView_FilterList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_FilterList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_FilterList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffView_FilterList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STStaffView_FilterStructure> NewList() {
			return new RLStaffView_FilterList();
		}


	} // RLStaffView_FilterList
}

namespace ssCaseConferencing {
	[XmlType("StaffView_Filter")]
	public class WORCStaffView_FilterRecord {
		[System.Xml.Serialization.XmlElement("FilterVisible")]
		public bool varWSFilterVisible;

		[System.Xml.Serialization.XmlElement("RAGStatusListIds")]
		public string varWSRAGStatusListIds;

		[System.Xml.Serialization.XmlElement("RAG_Red")]
		public bool varWSRAG_Red;

		[System.Xml.Serialization.XmlElement("RAG_Green")]
		public bool varWSRAG_Green;

		[System.Xml.Serialization.XmlElement("RAG_Amber")]
		public bool varWSRAG_Amber;

		[System.Xml.Serialization.XmlElement("Attendance_Red")]
		public bool varWSAttendance_Red;

		[System.Xml.Serialization.XmlElement("Attendance_Green")]
		public bool varWSAttendance_Green;

		[System.Xml.Serialization.XmlElement("Attendance_Amber")]
		public bool varWSAttendance_Amber;

		[System.Xml.Serialization.XmlElement("Punctuality_Red")]
		public bool varWSPunctuality_Red;

		[System.Xml.Serialization.XmlElement("Punctuality_Green")]
		public bool varWSPunctuality_Green;

		[System.Xml.Serialization.XmlElement("Punctuality_Amber")]
		public bool varWSPunctuality_Amber;

		[System.Xml.Serialization.XmlElement("VOC_Red")]
		public bool varWSVOC_Red;

		[System.Xml.Serialization.XmlElement("VOC_Green")]
		public bool varWSVOC_Green;

		[System.Xml.Serialization.XmlElement("VOC_Amber")]
		public bool varWSVOC_Amber;

		[System.Xml.Serialization.XmlElement("Math_Red")]
		public bool varWSMath_Red;

		[System.Xml.Serialization.XmlElement("Math_Green")]
		public bool varWSMath_Green;

		[System.Xml.Serialization.XmlElement("Math_Amber")]
		public bool varWSMath_Amber;

		[System.Xml.Serialization.XmlElement("English_Red")]
		public bool varWSEnglish_Red;

		[System.Xml.Serialization.XmlElement("English_Green")]
		public bool varWSEnglish_Green;

		[System.Xml.Serialization.XmlElement("English_Amber")]
		public bool varWSEnglish_Amber;

		[System.Xml.Serialization.XmlElement("MLW_Red")]
		public bool varWSMLW_Red;

		[System.Xml.Serialization.XmlElement("MLW_Green")]
		public bool varWSMLW_Green;

		[System.Xml.Serialization.XmlElement("MLW_Amber")]
		public bool varWSMLW_Amber;

		[System.Xml.Serialization.XmlElement("CFC")]
		public bool varWSCFC;

		[System.Xml.Serialization.XmlElement("SafeGuard")]
		public bool varWSSafeGuard;

		[System.Xml.Serialization.XmlElement("Reward")]
		public bool varWSReward;

		[System.Xml.Serialization.XmlElement("OrderBy")]
		public string varWSOrderBy;

		[System.Xml.Serialization.XmlElement("OrderDirection")]
		public string varWSOrderDirection;

		[System.Xml.Serialization.XmlElement("SupportTransport")]
		public bool varWSSupportTransport;

		[System.Xml.Serialization.XmlElement("SupportFinancial")]
		public bool varWSSupportFinancial;

		[System.Xml.Serialization.XmlElement("SupportAcademic")]
		public bool varWSSupportAcademic;

		[System.Xml.Serialization.XmlElement("SupportPersonal")]
		public bool varWSSupportPersonal;

		[System.Xml.Serialization.XmlElement("Supports")]
		public string varWSSupports;

		[System.Xml.Serialization.XmlElement("FilterActive")]
		public bool varWSFilterActive;

		public WORCStaffView_FilterRecord() {
			varWSFilterVisible = (bool) false;
			varWSRAGStatusListIds = (string) "\'0\'";
			varWSRAG_Red = (bool) false;
			varWSRAG_Green = (bool) false;
			varWSRAG_Amber = (bool) false;
			varWSAttendance_Red = (bool) false;
			varWSAttendance_Green = (bool) false;
			varWSAttendance_Amber = (bool) false;
			varWSPunctuality_Red = (bool) false;
			varWSPunctuality_Green = (bool) false;
			varWSPunctuality_Amber = (bool) false;
			varWSVOC_Red = (bool) false;
			varWSVOC_Green = (bool) false;
			varWSVOC_Amber = (bool) false;
			varWSMath_Red = (bool) false;
			varWSMath_Green = (bool) false;
			varWSMath_Amber = (bool) false;
			varWSEnglish_Red = (bool) false;
			varWSEnglish_Green = (bool) false;
			varWSEnglish_Amber = (bool) false;
			varWSMLW_Red = (bool) false;
			varWSMLW_Green = (bool) false;
			varWSMLW_Amber = (bool) false;
			varWSCFC = (bool) false;
			varWSSafeGuard = (bool) false;
			varWSReward = (bool) false;
			varWSOrderBy = (string) "Name";
			varWSOrderDirection = (string) "ASC";
			varWSSupportTransport = (bool) false;
			varWSSupportFinancial = (bool) false;
			varWSSupportAcademic = (bool) false;
			varWSSupportPersonal = (bool) false;
			varWSSupports = (string) "";
			varWSFilterActive = (bool) false;
		}

		public WORCStaffView_FilterRecord(STStaffView_FilterStructure r) {
			varWSFilterVisible = (bool) r.ssFilterVisible;
			varWSRAGStatusListIds = BaseAppUtils.RemoveControlChars(r.ssRAGStatusListIds);
			varWSRAG_Red = (bool) r.ssRAG_Red;
			varWSRAG_Green = (bool) r.ssRAG_Green;
			varWSRAG_Amber = (bool) r.ssRAG_Amber;
			varWSAttendance_Red = (bool) r.ssAttendance_Red;
			varWSAttendance_Green = (bool) r.ssAttendance_Green;
			varWSAttendance_Amber = (bool) r.ssAttendance_Amber;
			varWSPunctuality_Red = (bool) r.ssPunctuality_Red;
			varWSPunctuality_Green = (bool) r.ssPunctuality_Green;
			varWSPunctuality_Amber = (bool) r.ssPunctuality_Amber;
			varWSVOC_Red = (bool) r.ssVOC_Red;
			varWSVOC_Green = (bool) r.ssVOC_Green;
			varWSVOC_Amber = (bool) r.ssVOC_Amber;
			varWSMath_Red = (bool) r.ssMath_Red;
			varWSMath_Green = (bool) r.ssMath_Green;
			varWSMath_Amber = (bool) r.ssMath_Amber;
			varWSEnglish_Red = (bool) r.ssEnglish_Red;
			varWSEnglish_Green = (bool) r.ssEnglish_Green;
			varWSEnglish_Amber = (bool) r.ssEnglish_Amber;
			varWSMLW_Red = (bool) r.ssMLW_Red;
			varWSMLW_Green = (bool) r.ssMLW_Green;
			varWSMLW_Amber = (bool) r.ssMLW_Amber;
			varWSCFC = (bool) r.ssCFC;
			varWSSafeGuard = (bool) r.ssSafeGuard;
			varWSReward = (bool) r.ssReward;
			varWSOrderBy = BaseAppUtils.RemoveControlChars(r.ssOrderBy);
			varWSOrderDirection = BaseAppUtils.RemoveControlChars(r.ssOrderDirection);
			varWSSupportTransport = (bool) r.ssSupportTransport;
			varWSSupportFinancial = (bool) r.ssSupportFinancial;
			varWSSupportAcademic = (bool) r.ssSupportAcademic;
			varWSSupportPersonal = (bool) r.ssSupportPersonal;
			varWSSupports = BaseAppUtils.RemoveControlChars(r.ssSupports);
			varWSFilterActive = (bool) r.ssFilterActive;
		}

		public static RLStaffView_FilterList ToRecordList(WORCStaffView_FilterRecord[] array) {
			RLStaffView_FilterList rl = new RLStaffView_FilterList();
			if (array != null) {
				foreach(WORCStaffView_FilterRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStaffView_FilterRecord[] FromRecordList(RLStaffView_FilterList rl) {
			WORCStaffView_FilterRecord[] array = new WORCStaffView_FilterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStaffView_FilterRecord {
		public static implicit operator WORCStaffView_FilterRecord(RCStaffView_FilterRecord r) {
			return new WORCStaffView_FilterRecord(r.ssSTStaffView_Filter);
		}

		public static implicit operator RCStaffView_FilterRecord(WORCStaffView_FilterRecord w) {
			RCStaffView_FilterRecord r = new RCStaffView_FilterRecord("");
			if (w != null) {
				r.ssSTStaffView_Filter = w;
			}
			return r;
		}

	}

	partial struct STStaffView_FilterStructure {
		public static implicit operator WORCStaffView_FilterRecord(STStaffView_FilterStructure r) {
			return new WORCStaffView_FilterRecord(r);
		}

		public static implicit operator STStaffView_FilterStructure(WORCStaffView_FilterRecord w) {
			STStaffView_FilterStructure r = new STStaffView_FilterStructure("");
			if (w != null) {
				r.ssFilterVisible = (bool) w.varWSFilterVisible;
				r.ssRAGStatusListIds = ((string) w.varWSRAGStatusListIds ?? "");
				r.ssRAG_Red = (bool) w.varWSRAG_Red;
				r.ssRAG_Green = (bool) w.varWSRAG_Green;
				r.ssRAG_Amber = (bool) w.varWSRAG_Amber;
				r.ssAttendance_Red = (bool) w.varWSAttendance_Red;
				r.ssAttendance_Green = (bool) w.varWSAttendance_Green;
				r.ssAttendance_Amber = (bool) w.varWSAttendance_Amber;
				r.ssPunctuality_Red = (bool) w.varWSPunctuality_Red;
				r.ssPunctuality_Green = (bool) w.varWSPunctuality_Green;
				r.ssPunctuality_Amber = (bool) w.varWSPunctuality_Amber;
				r.ssVOC_Red = (bool) w.varWSVOC_Red;
				r.ssVOC_Green = (bool) w.varWSVOC_Green;
				r.ssVOC_Amber = (bool) w.varWSVOC_Amber;
				r.ssMath_Red = (bool) w.varWSMath_Red;
				r.ssMath_Green = (bool) w.varWSMath_Green;
				r.ssMath_Amber = (bool) w.varWSMath_Amber;
				r.ssEnglish_Red = (bool) w.varWSEnglish_Red;
				r.ssEnglish_Green = (bool) w.varWSEnglish_Green;
				r.ssEnglish_Amber = (bool) w.varWSEnglish_Amber;
				r.ssMLW_Red = (bool) w.varWSMLW_Red;
				r.ssMLW_Green = (bool) w.varWSMLW_Green;
				r.ssMLW_Amber = (bool) w.varWSMLW_Amber;
				r.ssCFC = (bool) w.varWSCFC;
				r.ssSafeGuard = (bool) w.varWSSafeGuard;
				r.ssReward = (bool) w.varWSReward;
				r.ssOrderBy = ((string) w.varWSOrderBy ?? "");
				r.ssOrderDirection = ((string) w.varWSOrderDirection ?? "");
				r.ssSupportTransport = (bool) w.varWSSupportTransport;
				r.ssSupportFinancial = (bool) w.varWSSupportFinancial;
				r.ssSupportAcademic = (bool) w.varWSSupportAcademic;
				r.ssSupportPersonal = (bool) w.varWSSupportPersonal;
				r.ssSupports = ((string) w.varWSSupports ?? "");
				r.ssFilterActive = (bool) w.varWSFilterActive;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffView_FilterRecordList {
		public WORCStaffView_FilterRecord[] Array;


		public WORLStaffView_FilterRecordList(WORCStaffView_FilterRecord[] r) {
			if (r == null)
			Array = new WORCStaffView_FilterRecord[0];
			else
			Array = r;
		}
		public WORLStaffView_FilterRecordList() {
			Array = new WORCStaffView_FilterRecord[0];
		}

		public WORLStaffView_FilterRecordList(RLStaffView_FilterRecordList rl) {
			rl=(RLStaffView_FilterRecordList) rl.Duplicate();
			Array = new WORCStaffView_FilterRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStaffView_FilterRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffView_FilterRecordList {
		public static implicit operator RLStaffView_FilterRecordList(WORCStaffView_FilterRecord[] array) {
			RLStaffView_FilterRecordList rl = new RLStaffView_FilterRecordList();
			if (array != null) {
				foreach(WORCStaffView_FilterRecord val in array) {
					rl.Append((RCStaffView_FilterRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffView_FilterRecord[](RLStaffView_FilterRecordList rl) {
			WORCStaffView_FilterRecord[] array = new WORCStaffView_FilterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStaffView_FilterRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffView_FilterRecordList {
		public static implicit operator RLStaffView_FilterRecordList(WORLStaffView_FilterRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffView_FilterRecordList(RLStaffView_FilterRecordList rl) {
			return new WORLStaffView_FilterRecordList(rl);
		}
		public static implicit operator WORCStaffView_FilterRecord[](WORLStaffView_FilterRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffView_FilterRecordList(WORCStaffView_FilterRecord[] array) {
			return new WORLStaffView_FilterRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffView_FilterList {
		public WORCStaffView_FilterRecord[] Array;


		public WORLStaffView_FilterList(WORCStaffView_FilterRecord[] r) {
			if (r == null)
			Array = new WORCStaffView_FilterRecord[0];
			else
			Array = r;
		}
		public WORLStaffView_FilterList() {
			Array = new WORCStaffView_FilterRecord[0];
		}

		public WORLStaffView_FilterList(RLStaffView_FilterList rl) {
			rl=(RLStaffView_FilterList) rl.Duplicate();
			Array = new WORCStaffView_FilterRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffView_FilterList {
		public static implicit operator RLStaffView_FilterList(WORCStaffView_FilterRecord[] array) {
			RLStaffView_FilterList rl = new RLStaffView_FilterList();
			if (array != null) {
				foreach(WORCStaffView_FilterRecord val in array) {
					rl.Append((STStaffView_FilterStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffView_FilterRecord[](RLStaffView_FilterList rl) {
			WORCStaffView_FilterRecord[] array = new WORCStaffView_FilterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STStaffView_FilterStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffView_FilterList {
		public static implicit operator RLStaffView_FilterList(WORLStaffView_FilterList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffView_FilterList(RLStaffView_FilterList rl) {
			return new WORLStaffView_FilterList(rl);
		}
		public static implicit operator WORCStaffView_FilterRecord[](WORLStaffView_FilterList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffView_FilterList(WORCStaffView_FilterRecord[] array) {
			return new WORLStaffView_FilterList(array);
		}
	}
}

