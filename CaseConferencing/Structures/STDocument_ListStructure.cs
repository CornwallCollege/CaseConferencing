/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STDocument_ListStructure</code> that represents the Service Studio structure
	///  <code>Document_List</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDocument_ListStructure: ISerializable, ITypedRecord<STDocument_ListStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdDocuments = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*otulmDuIjEOe9WNX4RTpWA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Documents")]
		public RLDocumentsRecordList ssDocuments;


		public BitArray OptimizedAttributes;

		public STDocument_ListStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssDocuments = new RLDocumentsRecordList();
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDocument_ListStructure r) {
			this = r;
		}


		public static bool operator == (STDocument_ListStructure a, STDocument_ListStructure b) {
			if (a.ssDocuments != b.ssDocuments) return false;
			return true;
		}

		public static bool operator != (STDocument_ListStructure a, STDocument_ListStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDocument_ListStructure)) return false;
			return (this == (STDocument_ListStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssDocuments.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDocument_ListStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssDocuments = new RLDocumentsRecordList();
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssDocuments = (RLDocumentsRecordList) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssDocuments.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssDocuments.InternalRecursiveSave();
		}


		public STDocument_ListStructure Duplicate() {
			STDocument_ListStructure t;
			t.ssDocuments = (RLDocumentsRecordList) this.ssDocuments.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				ssDocuments.ToXml(this, recordElem, "Documents", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "documents") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Documents")) variable.Value = ssDocuments; else variable.Optimized = true;
				variable.SetFieldName("documents");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDocuments) {
				return ssDocuments;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssDocuments = new RLDocumentsRecordList();
			ssDocuments.FillFromOther((IOSList) other.AttributeGet(IdDocuments));
		}
	} // STDocument_ListStructure
	/// <summary>
	/// Structure <code>RCDocument_ListRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCDocument_ListRecord: ISerializable, ITypedRecord<RCDocument_ListRecord> {
		private static readonly GlobalObjectKey IdDocument_List = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*klvNHvX1JiTYeoi6Gv8Nhg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Document_List")]
		public STDocument_ListStructure ssSTDocument_List;


		public static implicit operator STDocument_ListStructure(RCDocument_ListRecord r) {
			return r.ssSTDocument_List;
		}

		public static implicit operator RCDocument_ListRecord(STDocument_ListStructure r) {
			RCDocument_ListRecord res = new RCDocument_ListRecord(null);
			res.ssSTDocument_List = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCDocument_ListRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTDocument_List = new STDocument_ListStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTDocument_List.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTDocument_List.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCDocument_ListRecord r) {
			this = r;
		}


		public static bool operator == (RCDocument_ListRecord a, RCDocument_ListRecord b) {
			if (a.ssSTDocument_List != b.ssSTDocument_List) return false;
			return true;
		}

		public static bool operator != (RCDocument_ListRecord a, RCDocument_ListRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCDocument_ListRecord)) return false;
			return (this == (RCDocument_ListRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTDocument_List.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCDocument_ListRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTDocument_List = new STDocument_ListStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTDocument_List = (STDocument_ListStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTDocument_List.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTDocument_List.InternalRecursiveSave();
		}


		public RCDocument_ListRecord Duplicate() {
			RCDocument_ListRecord t;
			t.ssSTDocument_List = (STDocument_ListStructure) this.ssSTDocument_List.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTDocument_List.ToXml(this, recordElem, "Document_List", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "document_list") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Document_List")) variable.Value = ssSTDocument_List; else variable.Optimized = true;
				variable.SetFieldName("document_list");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDocument_List) {
				return ssSTDocument_List;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTDocument_List.FillFromOther((IRecord) other.AttributeGet(IdDocument_List));
		}
	} // RCDocument_ListRecord
	/// <summary>
	/// RecordList type <code>RLDocument_ListRecordList</code> that represents a record list of
	///  <code>Document_List</code>
	/// </summary>
	[Serializable()]
	public partial class RLDocument_ListRecordList: GenericRecordList<RCDocument_ListRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCDocument_ListRecord GetElementDefaultValue() {
			return new RCDocument_ListRecord("");
		}

		public T[] ToArray<T>(Func<RCDocument_ListRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDocument_ListRecordList recordlist, Func<RCDocument_ListRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDocument_ListRecordList ToList<T>(T[] array, Func <T, RCDocument_ListRecord> converter) {
			RLDocument_ListRecordList result = new RLDocument_ListRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDocument_ListRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocument_ListRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocument_ListRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDocument_ListRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCDocument_ListRecord> NewList() {
			return new RLDocument_ListRecordList();
		}


	} // RLDocument_ListRecordList
	/// <summary>
	/// RecordList type <code>RLDocument_ListList</code> that represents a record list of
	///  <code>DocumentsRecordList</code>
	/// </summary>
	[Serializable()]
	public partial class RLDocument_ListList: GenericRecordList<STDocument_ListStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STDocument_ListStructure GetElementDefaultValue() {
			return new STDocument_ListStructure("");
		}

		public T[] ToArray<T>(Func<STDocument_ListStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDocument_ListList recordlist, Func<STDocument_ListStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDocument_ListList ToList<T>(T[] array, Func <T, STDocument_ListStructure> converter) {
			RLDocument_ListList result = new RLDocument_ListList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDocument_ListList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocument_ListList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDocument_ListList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDocument_ListList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STDocument_ListStructure> NewList() {
			return new RLDocument_ListList();
		}


	} // RLDocument_ListList
}

namespace ssCaseConferencing {
	[XmlType("Document_List")]
	public class WORCDocument_ListRecord {
		[System.Xml.Serialization.XmlArray("Documents")]
		public WORCDocumentsRecord[] varWSDocuments;

		public WORCDocument_ListRecord() {
			varWSDocuments = new WORCDocumentsRecord[0];
		}

		public WORCDocument_ListRecord(STDocument_ListStructure r) {
			varWSDocuments = r.ssDocuments;
		}

		public static RLDocument_ListList ToRecordList(WORCDocument_ListRecord[] array) {
			RLDocument_ListList rl = new RLDocument_ListList();
			if (array != null) {
				foreach(WORCDocument_ListRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCDocument_ListRecord[] FromRecordList(RLDocument_ListList rl) {
			WORCDocument_ListRecord[] array = new WORCDocument_ListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCDocument_ListRecord {
		public static implicit operator WORCDocument_ListRecord(RCDocument_ListRecord r) {
			return new WORCDocument_ListRecord(r.ssSTDocument_List);
		}

		public static implicit operator RCDocument_ListRecord(WORCDocument_ListRecord w) {
			RCDocument_ListRecord r = new RCDocument_ListRecord("");
			if (w != null) {
				r.ssSTDocument_List = w;
			}
			return r;
		}

	}

	partial struct STDocument_ListStructure {
		public static implicit operator WORCDocument_ListRecord(STDocument_ListStructure r) {
			return new WORCDocument_ListRecord(r);
		}

		public static implicit operator STDocument_ListStructure(WORCDocument_ListRecord w) {
			STDocument_ListStructure r = new STDocument_ListStructure("");
			if (w != null) {
				r.ssDocuments = w.varWSDocuments;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLDocument_ListRecordList {
		public WORCDocument_ListRecord[] Array;


		public WORLDocument_ListRecordList(WORCDocument_ListRecord[] r) {
			if (r == null)
			Array = new WORCDocument_ListRecord[0];
			else
			Array = r;
		}
		public WORLDocument_ListRecordList() {
			Array = new WORCDocument_ListRecord[0];
		}

		public WORLDocument_ListRecordList(RLDocument_ListRecordList rl) {
			rl=(RLDocument_ListRecordList) rl.Duplicate();
			Array = new WORCDocument_ListRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCDocument_ListRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLDocument_ListRecordList {
		public static implicit operator RLDocument_ListRecordList(WORCDocument_ListRecord[] array) {
			RLDocument_ListRecordList rl = new RLDocument_ListRecordList();
			if (array != null) {
				foreach(WORCDocument_ListRecord val in array) {
					rl.Append((RCDocument_ListRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCDocument_ListRecord[](RLDocument_ListRecordList rl) {
			WORCDocument_ListRecord[] array = new WORCDocument_ListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCDocument_ListRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLDocument_ListRecordList {
		public static implicit operator RLDocument_ListRecordList(WORLDocument_ListRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLDocument_ListRecordList(RLDocument_ListRecordList rl) {
			return new WORLDocument_ListRecordList(rl);
		}
		public static implicit operator WORCDocument_ListRecord[](WORLDocument_ListRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLDocument_ListRecordList(WORCDocument_ListRecord[] array) {
			return new WORLDocument_ListRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLDocument_ListList {
		public WORCDocument_ListRecord[] Array;


		public WORLDocument_ListList(WORCDocument_ListRecord[] r) {
			if (r == null)
			Array = new WORCDocument_ListRecord[0];
			else
			Array = r;
		}
		public WORLDocument_ListList() {
			Array = new WORCDocument_ListRecord[0];
		}

		public WORLDocument_ListList(RLDocument_ListList rl) {
			rl=(RLDocument_ListList) rl.Duplicate();
			Array = new WORCDocument_ListRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLDocument_ListList {
		public static implicit operator RLDocument_ListList(WORCDocument_ListRecord[] array) {
			RLDocument_ListList rl = new RLDocument_ListList();
			if (array != null) {
				foreach(WORCDocument_ListRecord val in array) {
					rl.Append((STDocument_ListStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCDocument_ListRecord[](RLDocument_ListList rl) {
			WORCDocument_ListRecord[] array = new WORCDocument_ListRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STDocument_ListStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLDocument_ListList {
		public static implicit operator RLDocument_ListList(WORLDocument_ListList w) {
			return w.Array;
		}
		public static implicit operator WORLDocument_ListList(RLDocument_ListList rl) {
			return new WORLDocument_ListList(rl);
		}
		public static implicit operator WORCDocument_ListRecord[](WORLDocument_ListList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLDocument_ListList(WORCDocument_ListRecord[] array) {
			return new WORLDocument_ListList(array);
		}
	}
}

