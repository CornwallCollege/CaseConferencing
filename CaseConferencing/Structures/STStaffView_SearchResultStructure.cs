/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STStaffView_SearchResultStructure</code> that represents the Service Studio
	///  structure <code>StaffView_SearchResult</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STStaffView_SearchResultStructure: ISerializable, ITypedRecord<STStaffView_SearchResultStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ZEwQNwfC50mngLBwQMaAXA");
		private static readonly GlobalObjectKey IdIsFavourite = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Pfc5H59gcE258gGM3ih6XA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;

		[System.Xml.Serialization.XmlElement("IsFavourite")]
		public int ssIsFavourite;


		public BitArray OptimizedAttributes;

		public STStaffView_SearchResultStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssIsFavourite = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentReference = r.ReadTextEntityReference(index++, "StaffView_SearchResult.StudentReference", "");
			ssIsFavourite = r.ReadEntityReference(index++, "StaffView_SearchResult.IsFavourite", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STStaffView_SearchResultStructure r) {
			this = r;
		}


		public static bool operator == (STStaffView_SearchResultStructure a, STStaffView_SearchResultStructure b) {
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssIsFavourite != b.ssIsFavourite) return false;
			return true;
		}

		public static bool operator != (STStaffView_SearchResultStructure a, STStaffView_SearchResultStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STStaffView_SearchResultStructure)) return false;
			return (this == (STStaffView_SearchResultStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssIsFavourite.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STStaffView_SearchResultStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssIsFavourite = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssIsFavourite = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STStaffView_SearchResultStructure Duplicate() {
			STStaffView_SearchResultStructure t;
			t.ssStudentReference = this.ssStudentReference;
			t.ssIsFavourite = this.ssIsFavourite;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsFavourite")) VarValue.AppendAttribute(recordElem, "IsFavourite", ssIsFavourite, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "IsFavourite");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "isfavourite") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsFavourite")) variable.Value = ssIsFavourite; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdIsFavourite) {
				return ssIsFavourite;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ssIsFavourite = (int) other.AttributeGet(IdIsFavourite);
		}
	} // STStaffView_SearchResultStructure
	/// <summary>
	/// Structure <code>RCStaffView_SearchResultRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffView_SearchResultRecord: ISerializable, ITypedRecord<RCStaffView_SearchResultRecord> {
		private static readonly GlobalObjectKey IdStaffView_SearchResult = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*QJwE6fqHBNi4BCCYliNYZg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StaffView_SearchResult")]
		public STStaffView_SearchResultStructure ssSTStaffView_SearchResult;


		public static implicit operator STStaffView_SearchResultStructure(RCStaffView_SearchResultRecord r) {
			return r.ssSTStaffView_SearchResult;
		}

		public static implicit operator RCStaffView_SearchResultRecord(STStaffView_SearchResultStructure r) {
			RCStaffView_SearchResultRecord res = new RCStaffView_SearchResultRecord(null);
			res.ssSTStaffView_SearchResult = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCStaffView_SearchResultRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTStaffView_SearchResult = new STStaffView_SearchResultStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTStaffView_SearchResult.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTStaffView_SearchResult.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffView_SearchResultRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffView_SearchResultRecord a, RCStaffView_SearchResultRecord b) {
			if (a.ssSTStaffView_SearchResult != b.ssSTStaffView_SearchResult) return false;
			return true;
		}

		public static bool operator != (RCStaffView_SearchResultRecord a, RCStaffView_SearchResultRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffView_SearchResultRecord)) return false;
			return (this == (RCStaffView_SearchResultRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTStaffView_SearchResult.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffView_SearchResultRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTStaffView_SearchResult = new STStaffView_SearchResultStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTStaffView_SearchResult = (STStaffView_SearchResultStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTStaffView_SearchResult.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTStaffView_SearchResult.InternalRecursiveSave();
		}


		public RCStaffView_SearchResultRecord Duplicate() {
			RCStaffView_SearchResultRecord t;
			t.ssSTStaffView_SearchResult = (STStaffView_SearchResultStructure) this.ssSTStaffView_SearchResult.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTStaffView_SearchResult.ToXml(this, recordElem, "StaffView_SearchResult", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staffview_searchresult") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffView_SearchResult")) variable.Value = ssSTStaffView_SearchResult; else variable.Optimized = true;
				variable.SetFieldName("staffview_searchresult");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaffView_SearchResult) {
				return ssSTStaffView_SearchResult;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTStaffView_SearchResult.FillFromOther((IRecord) other.AttributeGet(IdStaffView_SearchResult));
		}
	} // RCStaffView_SearchResultRecord
	/// <summary>
	/// RecordList type <code>RLStaffView_SearchResultRecordList</code> that represents a record list of
	///  <code>StaffView_SearchResult</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffView_SearchResultRecordList: GenericRecordList<RCStaffView_SearchResultRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffView_SearchResultRecord GetElementDefaultValue() {
			return new RCStaffView_SearchResultRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffView_SearchResultRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffView_SearchResultRecordList recordlist, Func<RCStaffView_SearchResultRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffView_SearchResultRecordList ToList<T>(T[] array, Func <T, RCStaffView_SearchResultRecord> converter) {
			RLStaffView_SearchResultRecordList result = new RLStaffView_SearchResultRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffView_SearchResultRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_SearchResultRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_SearchResultRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffView_SearchResultRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffView_SearchResultRecord> NewList() {
			return new RLStaffView_SearchResultRecordList();
		}


	} // RLStaffView_SearchResultRecordList
	/// <summary>
	/// RecordList type <code>RLStaffView_SearchResultList</code> that represents a record list of
	///  <code>StudentIdentifier, StaffStudentFavouriteIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffView_SearchResultList: GenericRecordList<STStaffView_SearchResultStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STStaffView_SearchResultStructure GetElementDefaultValue() {
			return new STStaffView_SearchResultStructure("");
		}

		public T[] ToArray<T>(Func<STStaffView_SearchResultStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffView_SearchResultList recordlist, Func<STStaffView_SearchResultStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffView_SearchResultList ToList<T>(T[] array, Func <T, STStaffView_SearchResultStructure> converter) {
			RLStaffView_SearchResultList result = new RLStaffView_SearchResultList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffView_SearchResultList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_SearchResultList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_SearchResultList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffView_SearchResultList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STStaffView_SearchResultStructure> NewList() {
			return new RLStaffView_SearchResultList();
		}


	} // RLStaffView_SearchResultList
}

namespace ssCaseConferencing {
	[XmlType("StaffView_SearchResult")]
	public class WORCStaffView_SearchResultRecord {
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("IsFavourite")]
		public int varWSIsFavourite;

		public WORCStaffView_SearchResultRecord() {
			varWSStudentReference = (string) "";
			varWSIsFavourite = (int) 0;
		}

		public WORCStaffView_SearchResultRecord(STStaffView_SearchResultStructure r) {
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSIsFavourite = (int) r.ssIsFavourite;
		}

		public static RLStaffView_SearchResultList ToRecordList(WORCStaffView_SearchResultRecord[] array) {
			RLStaffView_SearchResultList rl = new RLStaffView_SearchResultList();
			if (array != null) {
				foreach(WORCStaffView_SearchResultRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStaffView_SearchResultRecord[] FromRecordList(RLStaffView_SearchResultList rl) {
			WORCStaffView_SearchResultRecord[] array = new WORCStaffView_SearchResultRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStaffView_SearchResultRecord {
		public static implicit operator WORCStaffView_SearchResultRecord(RCStaffView_SearchResultRecord r) {
			return new WORCStaffView_SearchResultRecord(r.ssSTStaffView_SearchResult);
		}

		public static implicit operator RCStaffView_SearchResultRecord(WORCStaffView_SearchResultRecord w) {
			RCStaffView_SearchResultRecord r = new RCStaffView_SearchResultRecord("");
			if (w != null) {
				r.ssSTStaffView_SearchResult = w;
			}
			return r;
		}

	}

	partial struct STStaffView_SearchResultStructure {
		public static implicit operator WORCStaffView_SearchResultRecord(STStaffView_SearchResultStructure r) {
			return new WORCStaffView_SearchResultRecord(r);
		}

		public static implicit operator STStaffView_SearchResultStructure(WORCStaffView_SearchResultRecord w) {
			STStaffView_SearchResultStructure r = new STStaffView_SearchResultStructure("");
			if (w != null) {
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssIsFavourite = (int) w.varWSIsFavourite;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffView_SearchResultRecordList {
		public WORCStaffView_SearchResultRecord[] Array;


		public WORLStaffView_SearchResultRecordList(WORCStaffView_SearchResultRecord[] r) {
			if (r == null)
			Array = new WORCStaffView_SearchResultRecord[0];
			else
			Array = r;
		}
		public WORLStaffView_SearchResultRecordList() {
			Array = new WORCStaffView_SearchResultRecord[0];
		}

		public WORLStaffView_SearchResultRecordList(RLStaffView_SearchResultRecordList rl) {
			rl=(RLStaffView_SearchResultRecordList) rl.Duplicate();
			Array = new WORCStaffView_SearchResultRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStaffView_SearchResultRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffView_SearchResultRecordList {
		public static implicit operator RLStaffView_SearchResultRecordList(WORCStaffView_SearchResultRecord[] array) {
			RLStaffView_SearchResultRecordList rl = new RLStaffView_SearchResultRecordList();
			if (array != null) {
				foreach(WORCStaffView_SearchResultRecord val in array) {
					rl.Append((RCStaffView_SearchResultRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffView_SearchResultRecord[](RLStaffView_SearchResultRecordList rl) {
			WORCStaffView_SearchResultRecord[] array = new WORCStaffView_SearchResultRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStaffView_SearchResultRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffView_SearchResultRecordList {
		public static implicit operator RLStaffView_SearchResultRecordList(WORLStaffView_SearchResultRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffView_SearchResultRecordList(RLStaffView_SearchResultRecordList rl) {
			return new WORLStaffView_SearchResultRecordList(rl);
		}
		public static implicit operator WORCStaffView_SearchResultRecord[](WORLStaffView_SearchResultRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffView_SearchResultRecordList(WORCStaffView_SearchResultRecord[] array) {
			return new WORLStaffView_SearchResultRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffView_SearchResultList {
		public WORCStaffView_SearchResultRecord[] Array;


		public WORLStaffView_SearchResultList(WORCStaffView_SearchResultRecord[] r) {
			if (r == null)
			Array = new WORCStaffView_SearchResultRecord[0];
			else
			Array = r;
		}
		public WORLStaffView_SearchResultList() {
			Array = new WORCStaffView_SearchResultRecord[0];
		}

		public WORLStaffView_SearchResultList(RLStaffView_SearchResultList rl) {
			rl=(RLStaffView_SearchResultList) rl.Duplicate();
			Array = new WORCStaffView_SearchResultRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffView_SearchResultList {
		public static implicit operator RLStaffView_SearchResultList(WORCStaffView_SearchResultRecord[] array) {
			RLStaffView_SearchResultList rl = new RLStaffView_SearchResultList();
			if (array != null) {
				foreach(WORCStaffView_SearchResultRecord val in array) {
					rl.Append((STStaffView_SearchResultStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffView_SearchResultRecord[](RLStaffView_SearchResultList rl) {
			WORCStaffView_SearchResultRecord[] array = new WORCStaffView_SearchResultRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STStaffView_SearchResultStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffView_SearchResultList {
		public static implicit operator RLStaffView_SearchResultList(WORLStaffView_SearchResultList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffView_SearchResultList(RLStaffView_SearchResultList rl) {
			return new WORLStaffView_SearchResultList(rl);
		}
		public static implicit operator WORCStaffView_SearchResultRecord[](WORLStaffView_SearchResultList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffView_SearchResultList(WORCStaffView_SearchResultRecord[] array) {
			return new WORLStaffView_SearchResultList(array);
		}
	}
}

