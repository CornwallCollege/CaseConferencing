/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STDecimalStructure</code> that represents the Service Studio structure
	///  <code>Decimal</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDecimalStructure: ISerializable, ITypedRecord<STDecimalStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*_YfEDYjCAkWmh1VvgMUtAg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Value")]
		public decimal ssValue;


		public BitArray OptimizedAttributes;

		public STDecimalStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssValue = 0.0M;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssValue = r.ReadDecimal(index++, "Decimal.Value", 0.0M);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDecimalStructure r) {
			this = r;
		}


		public static bool operator == (STDecimalStructure a, STDecimalStructure b) {
			if (a.ssValue != b.ssValue) return false;
			return true;
		}

		public static bool operator != (STDecimalStructure a, STDecimalStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDecimalStructure)) return false;
			return (this == (STDecimalStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssValue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDecimalStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssValue = 0.0M;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssValue = (decimal) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDecimalStructure Duplicate() {
			STDecimalStructure t;
			t.ssValue = this.ssValue;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdValue) {
				return ssValue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssValue = (decimal) other.AttributeGet(IdValue);
		}
	} // STDecimalStructure
	/// <summary>
	/// Structure <code>RCDecimalRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCDecimalRecord: ISerializable, ITypedRecord<RCDecimalRecord> {
		private static readonly GlobalObjectKey IdDecimal = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*G_iCof5Mh1ZSIakyyk0W8A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Decimal")]
		public STDecimalStructure ssSTDecimal;


		public static implicit operator STDecimalStructure(RCDecimalRecord r) {
			return r.ssSTDecimal;
		}

		public static implicit operator RCDecimalRecord(STDecimalStructure r) {
			RCDecimalRecord res = new RCDecimalRecord(null);
			res.ssSTDecimal = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCDecimalRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTDecimal = new STDecimalStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTDecimal.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTDecimal.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCDecimalRecord r) {
			this = r;
		}


		public static bool operator == (RCDecimalRecord a, RCDecimalRecord b) {
			if (a.ssSTDecimal != b.ssSTDecimal) return false;
			return true;
		}

		public static bool operator != (RCDecimalRecord a, RCDecimalRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCDecimalRecord)) return false;
			return (this == (RCDecimalRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTDecimal.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCDecimalRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTDecimal = new STDecimalStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTDecimal = (STDecimalStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTDecimal.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTDecimal.InternalRecursiveSave();
		}


		public RCDecimalRecord Duplicate() {
			RCDecimalRecord t;
			t.ssSTDecimal = (STDecimalStructure) this.ssSTDecimal.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTDecimal.ToXml(this, recordElem, "Decimal", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "decimal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Decimal")) variable.Value = ssSTDecimal; else variable.Optimized = true;
				variable.SetFieldName("decimal");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDecimal) {
				return ssSTDecimal;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTDecimal.FillFromOther((IRecord) other.AttributeGet(IdDecimal));
		}
	} // RCDecimalRecord
	/// <summary>
	/// RecordList type <code>RLDecimalRecordList</code> that represents a record list of
	///  <code>Decimal</code>
	/// </summary>
	[Serializable()]
	public partial class RLDecimalRecordList: GenericRecordList<RCDecimalRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCDecimalRecord GetElementDefaultValue() {
			return new RCDecimalRecord("");
		}

		public T[] ToArray<T>(Func<RCDecimalRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDecimalRecordList recordlist, Func<RCDecimalRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDecimalRecordList ToList<T>(T[] array, Func <T, RCDecimalRecord> converter) {
			RLDecimalRecordList result = new RLDecimalRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDecimalRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDecimalRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDecimalRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDecimalRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCDecimalRecord> NewList() {
			return new RLDecimalRecordList();
		}


	} // RLDecimalRecordList
	/// <summary>
	/// RecordList type <code>RLDecimalList</code> that represents a record list of <code>Decimal</code>
	/// </summary>
	[Serializable()]
	public partial class RLDecimalList: GenericRecordList<STDecimalStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STDecimalStructure GetElementDefaultValue() {
			return new STDecimalStructure("");
		}

		public T[] ToArray<T>(Func<STDecimalStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDecimalList recordlist, Func<STDecimalStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDecimalList ToList<T>(T[] array, Func <T, STDecimalStructure> converter) {
			RLDecimalList result = new RLDecimalList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDecimalList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDecimalList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDecimalList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDecimalList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STDecimalStructure> NewList() {
			return new RLDecimalList();
		}


	} // RLDecimalList
}

namespace ssCaseConferencing {
	[XmlType("Decimal")]
	public class WORCDecimalRecord {
		[System.Xml.Serialization.XmlElement("Value")]
		public decimal varWSValue;

		public WORCDecimalRecord() {
			varWSValue = (decimal) 0.0M;
		}

		public WORCDecimalRecord(STDecimalStructure r) {
			varWSValue = (decimal) r.ssValue;
		}

		public static RLDecimalList ToRecordList(WORCDecimalRecord[] array) {
			RLDecimalList rl = new RLDecimalList();
			if (array != null) {
				foreach(WORCDecimalRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCDecimalRecord[] FromRecordList(RLDecimalList rl) {
			WORCDecimalRecord[] array = new WORCDecimalRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCDecimalRecord {
		public static implicit operator decimal(RCDecimalRecord r) {
			return (decimal) r.ssSTDecimal.ssValue;
		}

		public static implicit operator RCDecimalRecord(decimal w) {
			RCDecimalRecord r = new RCDecimalRecord("");
			r.ssSTDecimal.ssValue = (decimal) w;
			return r;
		}
		public static implicit operator System.Single(RCDecimalRecord r) {
			return (System.Single) r.ssSTDecimal.ssValue;
		}

		public static implicit operator RCDecimalRecord(System.Single w) {
			RCDecimalRecord r = new RCDecimalRecord("");
			r.ssSTDecimal.ssValue = (decimal) w;
			return r;
		}
		public static implicit operator System.Double(RCDecimalRecord r) {
			return (System.Double) r.ssSTDecimal.ssValue;
		}

		public static implicit operator RCDecimalRecord(System.Double w) {
			RCDecimalRecord r = new RCDecimalRecord("");
			r.ssSTDecimal.ssValue = (decimal) w;
			return r;
		}
		public static implicit operator WORCDecimalRecord(RCDecimalRecord r) {
			return new WORCDecimalRecord(r.ssSTDecimal);
		}

		public static implicit operator RCDecimalRecord(WORCDecimalRecord w) {
			RCDecimalRecord r = new RCDecimalRecord("");
			if (w != null) {
				r.ssSTDecimal = w;
			}
			return r;
		}

	}

	partial struct STDecimalStructure {
		public static implicit operator WORCDecimalRecord(STDecimalStructure r) {
			return new WORCDecimalRecord(r);
		}

		public static implicit operator STDecimalStructure(WORCDecimalRecord w) {
			STDecimalStructure r = new STDecimalStructure("");
			if (w != null) {
				r.ssValue = (decimal) w.varWSValue;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLDecimalRecordList {
		public decimal[] Array;


		public WORLDecimalRecordList(decimal[] r) {
			if (r == null)
			Array = new decimal[0];
			else
			Array = r;
		}
		public WORLDecimalRecordList() {
			Array = new decimal[0];
		}
		public WORLDecimalRecordList(System.Single[] r) {
			if (r == null)
			Array = new decimal[0];
			else {
				Array = new decimal[r.Length];
				for (int index = 0; index < r.Length; index++)
				Array[index] = (decimal) r[index];
			}
		}
		public WORLDecimalRecordList(System.Double[] r) {
			if (r == null)
			Array = new decimal[0];
			else {
				Array = new decimal[r.Length];
				for (int index = 0; index < r.Length; index++)
				Array[index] = (decimal) r[index];
			}
		}

		public WORLDecimalRecordList(RLDecimalRecordList rl) {
			rl=(RLDecimalRecordList) rl.Duplicate();
			Array = new decimal[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.ssSTDecimal.ssValue;
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLDecimalRecordList {
		public static implicit operator RLDecimalRecordList(decimal[] array) {
			RLDecimalRecordList rl = new RLDecimalRecordList();
			if (array != null) {
				foreach(decimal val in array) {
					rl.Append((RCDecimalRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator decimal[](RLDecimalRecordList rl) {
			decimal[] array = new decimal[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCDecimalRecord) rl.Data[i];
			}
			return array;
		}
		public static implicit operator RLDecimalRecordList(decimal?[] array) {
			RLDecimalRecordList rl = new RLDecimalRecordList();
			if (array != null) {
				foreach(decimal? val in array) {
					rl.Append((val != null ?(RCDecimalRecord) val.Value:(RCDecimalRecord)default(decimal)));
}
}
return rl;
}
public static implicit operator decimal?[](RLDecimalRecordList rl) {
	decimal?[] array = new decimal?[rl == null ? 0: rl.Length];
	for (int i = 0; i < array.Length; i++) {
		array[i] = (RCDecimalRecord) rl.Data[i];
	}
	return array;
}
public static implicit operator RLDecimalRecordList(System.Single[] array) {
	RLDecimalRecordList rl = new RLDecimalRecordList();
	if (array != null) {
		foreach(System.Single val in array) {
			rl.Append((RCDecimalRecord) val);
		}
	}
	return rl;
}
public static implicit operator System.Single[](RLDecimalRecordList rl) {
	System.Single[] array = new System.Single[rl == null ? 0: rl.Length];
	for (int i = 0; i < array.Length; i++) {
		array[i] = (RCDecimalRecord) rl.Data[i];
	}
	return array;
}
public static implicit operator RLDecimalRecordList(System.Single?[] array) {
	RLDecimalRecordList rl = new RLDecimalRecordList();
	if (array != null) {
		foreach(System.Single? val in array) {
			rl.Append((val != null ?(RCDecimalRecord) val.Value:(RCDecimalRecord)default(System.Single)));
}
}
return rl;
}
public static implicit operator System.Single?[](RLDecimalRecordList rl) {
	System.Single?[] array = new System.Single?[rl == null ? 0: rl.Length];
	for (int i = 0; i < array.Length; i++) {
		array[i] = (RCDecimalRecord) rl.Data[i];
	}
	return array;
}
public static implicit operator RLDecimalRecordList(System.Double[] array) {
	RLDecimalRecordList rl = new RLDecimalRecordList();
	if (array != null) {
		foreach(System.Double val in array) {
			rl.Append((RCDecimalRecord) val);
		}
	}
	return rl;
}
public static implicit operator System.Double[](RLDecimalRecordList rl) {
	System.Double[] array = new System.Double[rl == null ? 0: rl.Length];
	for (int i = 0; i < array.Length; i++) {
		array[i] = (RCDecimalRecord) rl.Data[i];
	}
	return array;
}
public static implicit operator RLDecimalRecordList(System.Double?[] array) {
	RLDecimalRecordList rl = new RLDecimalRecordList();
	if (array != null) {
		foreach(System.Double? val in array) {
			rl.Append((val != null ?(RCDecimalRecord) val.Value:(RCDecimalRecord)default(System.Double)));
}
}
return rl;
}
public static implicit operator System.Double?[](RLDecimalRecordList rl) {
	System.Double?[] array = new System.Double?[rl == null ? 0: rl.Length];
	for (int i = 0; i < array.Length; i++) {
		array[i] = (RCDecimalRecord) rl.Data[i];
	}
	return array;
}
}
}

namespace ssCaseConferencing {
	partial class WORLDecimalRecordList {
		public static implicit operator RLDecimalRecordList(WORLDecimalRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLDecimalRecordList(RLDecimalRecordList rl) {
			return new WORLDecimalRecordList(rl);
		}
		public static implicit operator decimal[](WORLDecimalRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLDecimalRecordList(decimal[] array) {
			return new WORLDecimalRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLDecimalList {
		public WORCDecimalRecord[] Array;


		public WORLDecimalList(WORCDecimalRecord[] r) {
			if (r == null)
			Array = new WORCDecimalRecord[0];
			else
			Array = r;
		}
		public WORLDecimalList() {
			Array = new WORCDecimalRecord[0];
		}

		public WORLDecimalList(RLDecimalList rl) {
			rl=(RLDecimalList) rl.Duplicate();
			Array = new WORCDecimalRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLDecimalList {
		public static implicit operator RLDecimalList(WORCDecimalRecord[] array) {
			RLDecimalList rl = new RLDecimalList();
			if (array != null) {
				foreach(WORCDecimalRecord val in array) {
					rl.Append((STDecimalStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCDecimalRecord[](RLDecimalList rl) {
			WORCDecimalRecord[] array = new WORCDecimalRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STDecimalStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLDecimalList {
		public static implicit operator RLDecimalList(WORLDecimalList w) {
			return w.Array;
		}
		public static implicit operator WORLDecimalList(RLDecimalList rl) {
			return new WORLDecimalList(rl);
		}
		public static implicit operator WORCDecimalRecord[](WORLDecimalList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLDecimalList(WORCDecimalRecord[] array) {
			return new WORLDecimalList(array);
		}
	}
}

