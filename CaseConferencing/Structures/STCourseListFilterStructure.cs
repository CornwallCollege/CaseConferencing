/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STCourseListFilterStructure</code> that represents the Service Studio structure
	///  <code>CourseListFilter</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STCourseListFilterStructure: ISerializable, ITypedRecord<STCourseListFilterStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdClusterId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*UilzpNT4CEaWgITOLvF4ew");
		private static readonly GlobalObjectKey IdTeamId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*kd4roeiMdkydAUi7+flWAw");
		private static readonly GlobalObjectKey IdCurriculumLeadId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*GIilLwJWrkyFWaa9l8X3lg");
		private static readonly GlobalObjectKey IdKeywordSearch = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*GZm9AyPY0kOiyn11Dm146A");
		private static readonly GlobalObjectKey IdIsFavouriteFilter = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*lyjtRVJBok6g+pTFUA1qFg");
		private static readonly GlobalObjectKey IdSiteName = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*YGKKvn9pXUe3w8IipliZ9A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ClusterId")]
		public string ssClusterId;

		[System.Xml.Serialization.XmlElement("TeamId")]
		public int ssTeamId;

		[System.Xml.Serialization.XmlElement("CurriculumLeadId")]
		public int ssCurriculumLeadId;

		[System.Xml.Serialization.XmlElement("KeywordSearch")]
		public string ssKeywordSearch;

		[System.Xml.Serialization.XmlElement("IsFavouriteFilter")]
		public bool ssIsFavouriteFilter;

		[System.Xml.Serialization.XmlElement("SiteName")]
		public string ssSiteName;


		public BitArray OptimizedAttributes;

		public STCourseListFilterStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssClusterId = "";
			ssTeamId = 0;
			ssCurriculumLeadId = 0;
			ssKeywordSearch = "";
			ssIsFavouriteFilter = true;
			ssSiteName = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssClusterId = r.ReadTextEntityReference(index++, "CourseListFilter.ClusterId", "");
			ssTeamId = r.ReadEntityReference(index++, "CourseListFilter.TeamId", 0);
			ssCurriculumLeadId = r.ReadEntityReference(index++, "CourseListFilter.CurriculumLeadId", 0);
			ssKeywordSearch = r.ReadText(index++, "CourseListFilter.KeywordSearch", "");
			ssIsFavouriteFilter = r.ReadBoolean(index++, "CourseListFilter.IsFavouriteFilter", false);
			ssSiteName = r.ReadText(index++, "CourseListFilter.SiteName", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STCourseListFilterStructure r) {
			this = r;
		}


		public static bool operator == (STCourseListFilterStructure a, STCourseListFilterStructure b) {
			if (a.ssClusterId != b.ssClusterId) return false;
			if (a.ssTeamId != b.ssTeamId) return false;
			if (a.ssCurriculumLeadId != b.ssCurriculumLeadId) return false;
			if (a.ssKeywordSearch != b.ssKeywordSearch) return false;
			if (a.ssIsFavouriteFilter != b.ssIsFavouriteFilter) return false;
			if (a.ssSiteName != b.ssSiteName) return false;
			return true;
		}

		public static bool operator != (STCourseListFilterStructure a, STCourseListFilterStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STCourseListFilterStructure)) return false;
			return (this == (STCourseListFilterStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssClusterId.GetHashCode()
				^ ssTeamId.GetHashCode()
				^ ssCurriculumLeadId.GetHashCode()
				^ ssKeywordSearch.GetHashCode()
				^ ssIsFavouriteFilter.GetHashCode()
				^ ssSiteName.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STCourseListFilterStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssClusterId = "";
			ssTeamId = 0;
			ssCurriculumLeadId = 0;
			ssKeywordSearch = "";
			ssIsFavouriteFilter = true;
			ssSiteName = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssClusterId = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssTeamId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssCurriculumLeadId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssKeywordSearch = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssIsFavouriteFilter = (bool) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssSiteName = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STCourseListFilterStructure Duplicate() {
			STCourseListFilterStructure t;
			t.ssClusterId = this.ssClusterId;
			t.ssTeamId = this.ssTeamId;
			t.ssCurriculumLeadId = this.ssCurriculumLeadId;
			t.ssKeywordSearch = this.ssKeywordSearch;
			t.ssIsFavouriteFilter = this.ssIsFavouriteFilter;
			t.ssSiteName = this.ssSiteName;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ClusterId")) VarValue.AppendAttribute(recordElem, "ClusterId", ssClusterId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ClusterId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TeamId")) VarValue.AppendAttribute(recordElem, "TeamId", ssTeamId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "TeamId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CurriculumLeadId")) VarValue.AppendAttribute(recordElem, "CurriculumLeadId", ssCurriculumLeadId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CurriculumLeadId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".KeywordSearch")) VarValue.AppendAttribute(recordElem, "KeywordSearch", ssKeywordSearch, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "KeywordSearch");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsFavouriteFilter")) VarValue.AppendAttribute(recordElem, "IsFavouriteFilter", ssIsFavouriteFilter, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsFavouriteFilter");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SiteName")) VarValue.AppendAttribute(recordElem, "SiteName", ssSiteName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SiteName");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "clusterid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ClusterId")) variable.Value = ssClusterId; else variable.Optimized = true;
			} else if (head == "teamid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TeamId")) variable.Value = ssTeamId; else variable.Optimized = true;
			} else if (head == "curriculumleadid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CurriculumLeadId")) variable.Value = ssCurriculumLeadId; else variable.Optimized = true;
			} else if (head == "keywordsearch") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".KeywordSearch")) variable.Value = ssKeywordSearch; else variable.Optimized = true;
			} else if (head == "isfavouritefilter") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsFavouriteFilter")) variable.Value = ssIsFavouriteFilter; else variable.Optimized = true;
			} else if (head == "sitename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SiteName")) variable.Value = ssSiteName; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdClusterId) {
				return ssClusterId;
			} else if (key == IdTeamId) {
				return ssTeamId;
			} else if (key == IdCurriculumLeadId) {
				return ssCurriculumLeadId;
			} else if (key == IdKeywordSearch) {
				return ssKeywordSearch;
			} else if (key == IdIsFavouriteFilter) {
				return ssIsFavouriteFilter;
			} else if (key == IdSiteName) {
				return ssSiteName;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssClusterId = (string) other.AttributeGet(IdClusterId);
			ssTeamId = (int) other.AttributeGet(IdTeamId);
			ssCurriculumLeadId = (int) other.AttributeGet(IdCurriculumLeadId);
			ssKeywordSearch = (string) other.AttributeGet(IdKeywordSearch);
			ssIsFavouriteFilter = (bool) other.AttributeGet(IdIsFavouriteFilter);
			ssSiteName = (string) other.AttributeGet(IdSiteName);
		}
	} // STCourseListFilterStructure
	/// <summary>
	/// Structure <code>RCCourseListFilterRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCourseListFilterRecord: ISerializable, ITypedRecord<RCCourseListFilterRecord> {
		private static readonly GlobalObjectKey IdCourseListFilter = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*t4W8uaO_G0K25rj+XT08yw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CourseListFilter")]
		public STCourseListFilterStructure ssSTCourseListFilter;


		public static implicit operator STCourseListFilterStructure(RCCourseListFilterRecord r) {
			return r.ssSTCourseListFilter;
		}

		public static implicit operator RCCourseListFilterRecord(STCourseListFilterStructure r) {
			RCCourseListFilterRecord res = new RCCourseListFilterRecord(null);
			res.ssSTCourseListFilter = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCCourseListFilterRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTCourseListFilter = new STCourseListFilterStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTCourseListFilter.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTCourseListFilter.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCourseListFilterRecord r) {
			this = r;
		}


		public static bool operator == (RCCourseListFilterRecord a, RCCourseListFilterRecord b) {
			if (a.ssSTCourseListFilter != b.ssSTCourseListFilter) return false;
			return true;
		}

		public static bool operator != (RCCourseListFilterRecord a, RCCourseListFilterRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCourseListFilterRecord)) return false;
			return (this == (RCCourseListFilterRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTCourseListFilter.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCourseListFilterRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTCourseListFilter = new STCourseListFilterStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTCourseListFilter = (STCourseListFilterStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTCourseListFilter.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTCourseListFilter.InternalRecursiveSave();
		}


		public RCCourseListFilterRecord Duplicate() {
			RCCourseListFilterRecord t;
			t.ssSTCourseListFilter = (STCourseListFilterStructure) this.ssSTCourseListFilter.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTCourseListFilter.ToXml(this, recordElem, "CourseListFilter", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "courselistfilter") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseListFilter")) variable.Value = ssSTCourseListFilter; else variable.Optimized = true;
				variable.SetFieldName("courselistfilter");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCourseListFilter) {
				return ssSTCourseListFilter;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTCourseListFilter.FillFromOther((IRecord) other.AttributeGet(IdCourseListFilter));
		}
	} // RCCourseListFilterRecord
	/// <summary>
	/// RecordList type <code>RLCourseListFilterRecordList</code> that represents a record list of
	///  <code>CourseListFilter</code>
	/// </summary>
	[Serializable()]
	public partial class RLCourseListFilterRecordList: GenericRecordList<RCCourseListFilterRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCourseListFilterRecord GetElementDefaultValue() {
			return new RCCourseListFilterRecord("");
		}

		public T[] ToArray<T>(Func<RCCourseListFilterRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCourseListFilterRecordList recordlist, Func<RCCourseListFilterRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCourseListFilterRecordList ToList<T>(T[] array, Func <T, RCCourseListFilterRecord> converter) {
			RLCourseListFilterRecordList result = new RLCourseListFilterRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCourseListFilterRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseListFilterRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseListFilterRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCourseListFilterRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCourseListFilterRecord> NewList() {
			return new RLCourseListFilterRecordList();
		}


	} // RLCourseListFilterRecordList
	/// <summary>
	/// RecordList type <code>RLCourseListFilterList</code> that represents a record list of
	///  <code>ClusterIdentifier, TeamIdentifier, CurriculumLeadIdentifier, Text, Text, Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLCourseListFilterList: GenericRecordList<STCourseListFilterStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STCourseListFilterStructure GetElementDefaultValue() {
			return new STCourseListFilterStructure("");
		}

		public T[] ToArray<T>(Func<STCourseListFilterStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCourseListFilterList recordlist, Func<STCourseListFilterStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCourseListFilterList ToList<T>(T[] array, Func <T, STCourseListFilterStructure> converter) {
			RLCourseListFilterList result = new RLCourseListFilterList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCourseListFilterList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseListFilterList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseListFilterList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCourseListFilterList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STCourseListFilterStructure> NewList() {
			return new RLCourseListFilterList();
		}


	} // RLCourseListFilterList
}

namespace ssCaseConferencing {
	[XmlType("CourseListFilter")]
	public class WORCCourseListFilterRecord {
		[System.Xml.Serialization.XmlElement("ClusterId")]
		public string varWSClusterId;

		[System.Xml.Serialization.XmlElement("TeamId")]
		public int varWSTeamId;

		[System.Xml.Serialization.XmlElement("CurriculumLeadId")]
		public int varWSCurriculumLeadId;

		[System.Xml.Serialization.XmlElement("KeywordSearch")]
		public string varWSKeywordSearch;

		[System.Xml.Serialization.XmlElement("IsFavouriteFilter")]
		public bool varWSIsFavouriteFilter;

		[System.Xml.Serialization.XmlElement("SiteName")]
		public string varWSSiteName;

		public WORCCourseListFilterRecord() {
			varWSClusterId = (string) "";
			varWSTeamId = (int) 0;
			varWSCurriculumLeadId = (int) 0;
			varWSKeywordSearch = (string) "";
			varWSIsFavouriteFilter = (bool) true;
			varWSSiteName = (string) "";
		}

		public WORCCourseListFilterRecord(STCourseListFilterStructure r) {
			varWSClusterId = BaseAppUtils.RemoveControlChars(r.ssClusterId);
			varWSTeamId = (int) r.ssTeamId;
			varWSCurriculumLeadId = (int) r.ssCurriculumLeadId;
			varWSKeywordSearch = BaseAppUtils.RemoveControlChars(r.ssKeywordSearch);
			varWSIsFavouriteFilter = (bool) r.ssIsFavouriteFilter;
			varWSSiteName = BaseAppUtils.RemoveControlChars(r.ssSiteName);
		}

		public static RLCourseListFilterList ToRecordList(WORCCourseListFilterRecord[] array) {
			RLCourseListFilterList rl = new RLCourseListFilterList();
			if (array != null) {
				foreach(WORCCourseListFilterRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCourseListFilterRecord[] FromRecordList(RLCourseListFilterList rl) {
			WORCCourseListFilterRecord[] array = new WORCCourseListFilterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCourseListFilterRecord {
		public static implicit operator WORCCourseListFilterRecord(RCCourseListFilterRecord r) {
			return new WORCCourseListFilterRecord(r.ssSTCourseListFilter);
		}

		public static implicit operator RCCourseListFilterRecord(WORCCourseListFilterRecord w) {
			RCCourseListFilterRecord r = new RCCourseListFilterRecord("");
			if (w != null) {
				r.ssSTCourseListFilter = w;
			}
			return r;
		}

	}

	partial struct STCourseListFilterStructure {
		public static implicit operator WORCCourseListFilterRecord(STCourseListFilterStructure r) {
			return new WORCCourseListFilterRecord(r);
		}

		public static implicit operator STCourseListFilterStructure(WORCCourseListFilterRecord w) {
			STCourseListFilterStructure r = new STCourseListFilterStructure("");
			if (w != null) {
				r.ssClusterId = (string) w.varWSClusterId;
				r.ssTeamId = (int) w.varWSTeamId;
				r.ssCurriculumLeadId = (int) w.varWSCurriculumLeadId;
				r.ssKeywordSearch = ((string) w.varWSKeywordSearch ?? "");
				r.ssIsFavouriteFilter = (bool) w.varWSIsFavouriteFilter;
				r.ssSiteName = ((string) w.varWSSiteName ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCourseListFilterRecordList {
		public WORCCourseListFilterRecord[] Array;


		public WORLCourseListFilterRecordList(WORCCourseListFilterRecord[] r) {
			if (r == null)
			Array = new WORCCourseListFilterRecord[0];
			else
			Array = r;
		}
		public WORLCourseListFilterRecordList() {
			Array = new WORCCourseListFilterRecord[0];
		}

		public WORLCourseListFilterRecordList(RLCourseListFilterRecordList rl) {
			rl=(RLCourseListFilterRecordList) rl.Duplicate();
			Array = new WORCCourseListFilterRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCourseListFilterRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCourseListFilterRecordList {
		public static implicit operator RLCourseListFilterRecordList(WORCCourseListFilterRecord[] array) {
			RLCourseListFilterRecordList rl = new RLCourseListFilterRecordList();
			if (array != null) {
				foreach(WORCCourseListFilterRecord val in array) {
					rl.Append((RCCourseListFilterRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCourseListFilterRecord[](RLCourseListFilterRecordList rl) {
			WORCCourseListFilterRecord[] array = new WORCCourseListFilterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCourseListFilterRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCourseListFilterRecordList {
		public static implicit operator RLCourseListFilterRecordList(WORLCourseListFilterRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCourseListFilterRecordList(RLCourseListFilterRecordList rl) {
			return new WORLCourseListFilterRecordList(rl);
		}
		public static implicit operator WORCCourseListFilterRecord[](WORLCourseListFilterRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCourseListFilterRecordList(WORCCourseListFilterRecord[] array) {
			return new WORLCourseListFilterRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCourseListFilterList {
		public WORCCourseListFilterRecord[] Array;


		public WORLCourseListFilterList(WORCCourseListFilterRecord[] r) {
			if (r == null)
			Array = new WORCCourseListFilterRecord[0];
			else
			Array = r;
		}
		public WORLCourseListFilterList() {
			Array = new WORCCourseListFilterRecord[0];
		}

		public WORLCourseListFilterList(RLCourseListFilterList rl) {
			rl=(RLCourseListFilterList) rl.Duplicate();
			Array = new WORCCourseListFilterRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCourseListFilterList {
		public static implicit operator RLCourseListFilterList(WORCCourseListFilterRecord[] array) {
			RLCourseListFilterList rl = new RLCourseListFilterList();
			if (array != null) {
				foreach(WORCCourseListFilterRecord val in array) {
					rl.Append((STCourseListFilterStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCourseListFilterRecord[](RLCourseListFilterList rl) {
			WORCCourseListFilterRecord[] array = new WORCCourseListFilterRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STCourseListFilterStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCourseListFilterList {
		public static implicit operator RLCourseListFilterList(WORLCourseListFilterList w) {
			return w.Array;
		}
		public static implicit operator WORLCourseListFilterList(RLCourseListFilterList rl) {
			return new WORLCourseListFilterList(rl);
		}
		public static implicit operator WORCCourseListFilterRecord[](WORLCourseListFilterList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCourseListFilterList(WORCCourseListFilterRecord[] array) {
			return new WORLCourseListFilterList(array);
		}
	}
}

