/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STCourseLearnerProgressReportSummaryStructure</code> that represents the Service
	///  Studio structure <code>CourseLearnerProgressReportSummary</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STCourseLearnerProgressReportSummaryStructure: ISerializable, ITypedRecord<STCourseLearnerProgressReportSummaryStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*MRJFou5czU6eBDDy760lsA");
		private static readonly GlobalObjectKey IdProgressReportId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ylfxt+HGc0mo4Sq8CQASJg");
		private static readonly GlobalObjectKey IdTotalNumberOfSections = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*7PG5evYoaECrXjTRRrF4Yw");
		private static readonly GlobalObjectKey IdTotalNumberOfVisibleSections = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*V3lHAyptg0iDGVqZg3o_mQ");
		private static readonly GlobalObjectKey IdTotalNumberOfCompletedSections = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*lV_QR_H5H0e9wNGDYjL4RA");
		private static readonly GlobalObjectKey IdHasProgressReport = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*PuP52fNRk0CNlEbJyvKpnA");
		private static readonly GlobalObjectKey IdStudentSurname = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*z1AppOSYKkqrurOxLJDbBg");
		private static readonly GlobalObjectKey IdStudentForename = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*zM04ozkLkEy0vf0Zg6r5lQ");
		private static readonly GlobalObjectKey IdStudentPhotoURL = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*xJbsFtC1ukCfa8t07q24Eg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;

		[System.Xml.Serialization.XmlElement("ProgressReportId")]
		public int ssProgressReportId;

		[System.Xml.Serialization.XmlElement("TotalNumberOfSections")]
		public int ssTotalNumberOfSections;

		[System.Xml.Serialization.XmlElement("TotalNumberOfVisibleSections")]
		public int ssTotalNumberOfVisibleSections;

		[System.Xml.Serialization.XmlElement("TotalNumberOfCompletedSections")]
		public int ssTotalNumberOfCompletedSections;

		[System.Xml.Serialization.XmlElement("HasProgressReport")]
		public bool ssHasProgressReport;

		[System.Xml.Serialization.XmlElement("StudentSurname")]
		public string ssStudentSurname;

		[System.Xml.Serialization.XmlElement("StudentForename")]
		public string ssStudentForename;

		[System.Xml.Serialization.XmlElement("StudentPhotoURL")]
		public string ssStudentPhotoURL;


		public BitArray OptimizedAttributes;

		public STCourseLearnerProgressReportSummaryStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssProgressReportId = 0;
			ssTotalNumberOfSections = 0;
			ssTotalNumberOfVisibleSections = 0;
			ssTotalNumberOfCompletedSections = 0;
			ssHasProgressReport = false;
			ssStudentSurname = "";
			ssStudentForename = "";
			ssStudentPhotoURL = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentReference = r.ReadText(index++, "CourseLearnerProgressReportSummary.StudentReference", "");
			ssProgressReportId = r.ReadEntityReference(index++, "CourseLearnerProgressReportSummary.ProgressReportId", 0);
			ssTotalNumberOfSections = r.ReadInteger(index++, "CourseLearnerProgressReportSummary.TotalNumberOfSections", 0);
			ssTotalNumberOfVisibleSections = r.ReadInteger(index++, "CourseLearnerProgressReportSummary.TotalNumberOfVisibleSections", 0);
			ssTotalNumberOfCompletedSections = r.ReadInteger(index++, "CourseLearnerProgressReportSummary.TotalNumberOfCompletedSections", 0);
			ssHasProgressReport = r.ReadBoolean(index++, "CourseLearnerProgressReportSummary.HasProgressReport", false);
			ssStudentSurname = r.ReadText(index++, "CourseLearnerProgressReportSummary.StudentSurname", "");
			ssStudentForename = r.ReadText(index++, "CourseLearnerProgressReportSummary.StudentForename", "");
			ssStudentPhotoURL = r.ReadText(index++, "CourseLearnerProgressReportSummary.StudentPhotoURL", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STCourseLearnerProgressReportSummaryStructure r) {
			this = r;
		}


		public static bool operator == (STCourseLearnerProgressReportSummaryStructure a, STCourseLearnerProgressReportSummaryStructure b) {
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssProgressReportId != b.ssProgressReportId) return false;
			if (a.ssTotalNumberOfSections != b.ssTotalNumberOfSections) return false;
			if (a.ssTotalNumberOfVisibleSections != b.ssTotalNumberOfVisibleSections) return false;
			if (a.ssTotalNumberOfCompletedSections != b.ssTotalNumberOfCompletedSections) return false;
			if (a.ssHasProgressReport != b.ssHasProgressReport) return false;
			if (a.ssStudentSurname != b.ssStudentSurname) return false;
			if (a.ssStudentForename != b.ssStudentForename) return false;
			if (a.ssStudentPhotoURL != b.ssStudentPhotoURL) return false;
			return true;
		}

		public static bool operator != (STCourseLearnerProgressReportSummaryStructure a, STCourseLearnerProgressReportSummaryStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STCourseLearnerProgressReportSummaryStructure)) return false;
			return (this == (STCourseLearnerProgressReportSummaryStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssProgressReportId.GetHashCode()
				^ ssTotalNumberOfSections.GetHashCode()
				^ ssTotalNumberOfVisibleSections.GetHashCode()
				^ ssTotalNumberOfCompletedSections.GetHashCode()
				^ ssHasProgressReport.GetHashCode()
				^ ssStudentSurname.GetHashCode()
				^ ssStudentForename.GetHashCode()
				^ ssStudentPhotoURL.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STCourseLearnerProgressReportSummaryStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssProgressReportId = 0;
			ssTotalNumberOfSections = 0;
			ssTotalNumberOfVisibleSections = 0;
			ssTotalNumberOfCompletedSections = 0;
			ssHasProgressReport = false;
			ssStudentSurname = "";
			ssStudentForename = "";
			ssStudentPhotoURL = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssProgressReportId = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssTotalNumberOfSections = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssTotalNumberOfVisibleSections = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssTotalNumberOfCompletedSections = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssHasProgressReport = (bool) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssStudentSurname = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssStudentForename = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssStudentPhotoURL = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STCourseLearnerProgressReportSummaryStructure Duplicate() {
			STCourseLearnerProgressReportSummaryStructure t;
			t.ssStudentReference = this.ssStudentReference;
			t.ssProgressReportId = this.ssProgressReportId;
			t.ssTotalNumberOfSections = this.ssTotalNumberOfSections;
			t.ssTotalNumberOfVisibleSections = this.ssTotalNumberOfVisibleSections;
			t.ssTotalNumberOfCompletedSections = this.ssTotalNumberOfCompletedSections;
			t.ssHasProgressReport = this.ssHasProgressReport;
			t.ssStudentSurname = this.ssStudentSurname;
			t.ssStudentForename = this.ssStudentForename;
			t.ssStudentPhotoURL = this.ssStudentPhotoURL;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProgressReportId")) VarValue.AppendAttribute(recordElem, "ProgressReportId", ssProgressReportId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ProgressReportId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TotalNumberOfSections")) VarValue.AppendAttribute(recordElem, "TotalNumberOfSections", ssTotalNumberOfSections, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "TotalNumberOfSections");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TotalNumberOfVisibleSections")) VarValue.AppendAttribute(recordElem, "TotalNumberOfVisibleSections", ssTotalNumberOfVisibleSections, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "TotalNumberOfVisibleSections");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TotalNumberOfCompletedSections")) VarValue.AppendAttribute(recordElem, "TotalNumberOfCompletedSections", ssTotalNumberOfCompletedSections, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "TotalNumberOfCompletedSections");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HasProgressReport")) VarValue.AppendAttribute(recordElem, "HasProgressReport", ssHasProgressReport, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "HasProgressReport");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentSurname")) VarValue.AppendAttribute(recordElem, "StudentSurname", ssStudentSurname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentSurname");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentForename")) VarValue.AppendAttribute(recordElem, "StudentForename", ssStudentForename, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentForename");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentPhotoURL")) VarValue.AppendAttribute(recordElem, "StudentPhotoURL", ssStudentPhotoURL, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentPhotoURL");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "progressreportid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProgressReportId")) variable.Value = ssProgressReportId; else variable.Optimized = true;
			} else if (head == "totalnumberofsections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TotalNumberOfSections")) variable.Value = ssTotalNumberOfSections; else variable.Optimized = true;
			} else if (head == "totalnumberofvisiblesections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TotalNumberOfVisibleSections")) variable.Value = ssTotalNumberOfVisibleSections; else variable.Optimized = true;
			} else if (head == "totalnumberofcompletedsections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TotalNumberOfCompletedSections")) variable.Value = ssTotalNumberOfCompletedSections; else variable.Optimized = true;
			} else if (head == "hasprogressreport") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HasProgressReport")) variable.Value = ssHasProgressReport; else variable.Optimized = true;
			} else if (head == "studentsurname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentSurname")) variable.Value = ssStudentSurname; else variable.Optimized = true;
			} else if (head == "studentforename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentForename")) variable.Value = ssStudentForename; else variable.Optimized = true;
			} else if (head == "studentphotourl") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentPhotoURL")) variable.Value = ssStudentPhotoURL; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdProgressReportId) {
				return ssProgressReportId;
			} else if (key == IdTotalNumberOfSections) {
				return ssTotalNumberOfSections;
			} else if (key == IdTotalNumberOfVisibleSections) {
				return ssTotalNumberOfVisibleSections;
			} else if (key == IdTotalNumberOfCompletedSections) {
				return ssTotalNumberOfCompletedSections;
			} else if (key == IdHasProgressReport) {
				return ssHasProgressReport;
			} else if (key == IdStudentSurname) {
				return ssStudentSurname;
			} else if (key == IdStudentForename) {
				return ssStudentForename;
			} else if (key == IdStudentPhotoURL) {
				return ssStudentPhotoURL;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ssProgressReportId = (int) other.AttributeGet(IdProgressReportId);
			ssTotalNumberOfSections = (int) other.AttributeGet(IdTotalNumberOfSections);
			ssTotalNumberOfVisibleSections = (int) other.AttributeGet(IdTotalNumberOfVisibleSections);
			ssTotalNumberOfCompletedSections = (int) other.AttributeGet(IdTotalNumberOfCompletedSections);
			ssHasProgressReport = (bool) other.AttributeGet(IdHasProgressReport);
			ssStudentSurname = (string) other.AttributeGet(IdStudentSurname);
			ssStudentForename = (string) other.AttributeGet(IdStudentForename);
			ssStudentPhotoURL = (string) other.AttributeGet(IdStudentPhotoURL);
		}
	} // STCourseLearnerProgressReportSummaryStructure
	/// <summary>
	/// Structure <code>RCCourseLearnerProgressReportSummaryRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCourseLearnerProgressReportSummaryRecord: ISerializable, ITypedRecord<RCCourseLearnerProgressReportSummaryRecord> {
		private static readonly GlobalObjectKey IdCourseLearnerProgressReportSummary = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Sc8dTlh9+H8zuZyqvmZKCA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CourseLearnerProgressReportSummary")]
		public STCourseLearnerProgressReportSummaryStructure ssSTCourseLearnerProgressReportSummary;


		public static implicit operator STCourseLearnerProgressReportSummaryStructure(RCCourseLearnerProgressReportSummaryRecord r) {
			return r.ssSTCourseLearnerProgressReportSummary;
		}

		public static implicit operator RCCourseLearnerProgressReportSummaryRecord(STCourseLearnerProgressReportSummaryStructure r) {
			RCCourseLearnerProgressReportSummaryRecord res = new RCCourseLearnerProgressReportSummaryRecord(null);
			res.ssSTCourseLearnerProgressReportSummary = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCCourseLearnerProgressReportSummaryRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTCourseLearnerProgressReportSummary = new STCourseLearnerProgressReportSummaryStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTCourseLearnerProgressReportSummary.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTCourseLearnerProgressReportSummary.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCourseLearnerProgressReportSummaryRecord r) {
			this = r;
		}


		public static bool operator == (RCCourseLearnerProgressReportSummaryRecord a, RCCourseLearnerProgressReportSummaryRecord b) {
			if (a.ssSTCourseLearnerProgressReportSummary != b.ssSTCourseLearnerProgressReportSummary) return false;
			return true;
		}

		public static bool operator != (RCCourseLearnerProgressReportSummaryRecord a, RCCourseLearnerProgressReportSummaryRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCourseLearnerProgressReportSummaryRecord)) return false;
			return (this == (RCCourseLearnerProgressReportSummaryRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTCourseLearnerProgressReportSummary.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCourseLearnerProgressReportSummaryRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTCourseLearnerProgressReportSummary = new STCourseLearnerProgressReportSummaryStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTCourseLearnerProgressReportSummary = (STCourseLearnerProgressReportSummaryStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTCourseLearnerProgressReportSummary.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTCourseLearnerProgressReportSummary.InternalRecursiveSave();
		}


		public RCCourseLearnerProgressReportSummaryRecord Duplicate() {
			RCCourseLearnerProgressReportSummaryRecord t;
			t.ssSTCourseLearnerProgressReportSummary = (STCourseLearnerProgressReportSummaryStructure) this.ssSTCourseLearnerProgressReportSummary.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTCourseLearnerProgressReportSummary.ToXml(this, recordElem, "CourseLearnerProgressReportSummary", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "courselearnerprogressreportsummary") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CourseLearnerProgressReportSummary")) variable.Value = ssSTCourseLearnerProgressReportSummary; else variable.Optimized = true;
				variable.SetFieldName("courselearnerprogressreportsummary");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCourseLearnerProgressReportSummary) {
				return ssSTCourseLearnerProgressReportSummary;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTCourseLearnerProgressReportSummary.FillFromOther((IRecord) other.AttributeGet(IdCourseLearnerProgressReportSummary));
		}
	} // RCCourseLearnerProgressReportSummaryRecord
	/// <summary>
	/// RecordList type <code>RLCourseLearnerProgressReportSummaryRecordList</code> that represents a
	///  record list of <code>CourseLearnerProgressReportSummary</code>
	/// </summary>
	[Serializable()]
	public partial class RLCourseLearnerProgressReportSummaryRecordList: GenericRecordList<RCCourseLearnerProgressReportSummaryRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCourseLearnerProgressReportSummaryRecord GetElementDefaultValue() {
			return new RCCourseLearnerProgressReportSummaryRecord("");
		}

		public T[] ToArray<T>(Func<RCCourseLearnerProgressReportSummaryRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCourseLearnerProgressReportSummaryRecordList recordlist, Func<RCCourseLearnerProgressReportSummaryRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCourseLearnerProgressReportSummaryRecordList ToList<T>(T[] array, Func <T, RCCourseLearnerProgressReportSummaryRecord> converter) {
			RLCourseLearnerProgressReportSummaryRecordList result = new RLCourseLearnerProgressReportSummaryRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCourseLearnerProgressReportSummaryRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseLearnerProgressReportSummaryRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseLearnerProgressReportSummaryRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCourseLearnerProgressReportSummaryRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCourseLearnerProgressReportSummaryRecord> NewList() {
			return new RLCourseLearnerProgressReportSummaryRecordList();
		}


	} // RLCourseLearnerProgressReportSummaryRecordList
	/// <summary>
	/// RecordList type <code>RLCourseLearnerProgressReportSummaryList</code> that represents a record list
	///  of <code>Text, Text, Text, Text, Boolean, Integer, Integer, Integer
	/// , ProgressReportIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLCourseLearnerProgressReportSummaryList: GenericRecordList<STCourseLearnerProgressReportSummaryStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STCourseLearnerProgressReportSummaryStructure GetElementDefaultValue() {
			return new STCourseLearnerProgressReportSummaryStructure("");
		}

		public T[] ToArray<T>(Func<STCourseLearnerProgressReportSummaryStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCourseLearnerProgressReportSummaryList recordlist, Func<STCourseLearnerProgressReportSummaryStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCourseLearnerProgressReportSummaryList ToList<T>(T[] array, Func <T, STCourseLearnerProgressReportSummaryStructure> converter) {
			RLCourseLearnerProgressReportSummaryList result = new RLCourseLearnerProgressReportSummaryList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCourseLearnerProgressReportSummaryList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseLearnerProgressReportSummaryList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCourseLearnerProgressReportSummaryList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCourseLearnerProgressReportSummaryList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STCourseLearnerProgressReportSummaryStructure> NewList() {
			return new RLCourseLearnerProgressReportSummaryList();
		}


	} // RLCourseLearnerProgressReportSummaryList
}

namespace ssCaseConferencing {
	[XmlType("CourseLearnerProgressReportSummary")]
	public class WORCCourseLearnerProgressReportSummaryRecord {
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("ProgressReportId")]
		public int varWSProgressReportId;

		[System.Xml.Serialization.XmlElement("TotalNumberOfSections")]
		public int varWSTotalNumberOfSections;

		[System.Xml.Serialization.XmlElement("TotalNumberOfVisibleSections")]
		public int varWSTotalNumberOfVisibleSections;

		[System.Xml.Serialization.XmlElement("TotalNumberOfCompletedSections")]
		public int varWSTotalNumberOfCompletedSections;

		[System.Xml.Serialization.XmlElement("HasProgressReport")]
		public bool varWSHasProgressReport;

		[System.Xml.Serialization.XmlElement("StudentSurname")]
		public string varWSStudentSurname;

		[System.Xml.Serialization.XmlElement("StudentForename")]
		public string varWSStudentForename;

		[System.Xml.Serialization.XmlElement("StudentPhotoURL")]
		public string varWSStudentPhotoURL;

		public WORCCourseLearnerProgressReportSummaryRecord() {
			varWSStudentReference = (string) "";
			varWSProgressReportId = (int) 0;
			varWSTotalNumberOfSections = (int) 0;
			varWSTotalNumberOfVisibleSections = (int) 0;
			varWSTotalNumberOfCompletedSections = (int) 0;
			varWSHasProgressReport = (bool) false;
			varWSStudentSurname = (string) "";
			varWSStudentForename = (string) "";
			varWSStudentPhotoURL = (string) "";
		}

		public WORCCourseLearnerProgressReportSummaryRecord(STCourseLearnerProgressReportSummaryStructure r) {
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSProgressReportId = (int) r.ssProgressReportId;
			varWSTotalNumberOfSections = (int) r.ssTotalNumberOfSections;
			varWSTotalNumberOfVisibleSections = (int) r.ssTotalNumberOfVisibleSections;
			varWSTotalNumberOfCompletedSections = (int) r.ssTotalNumberOfCompletedSections;
			varWSHasProgressReport = (bool) r.ssHasProgressReport;
			varWSStudentSurname = BaseAppUtils.RemoveControlChars(r.ssStudentSurname);
			varWSStudentForename = BaseAppUtils.RemoveControlChars(r.ssStudentForename);
			varWSStudentPhotoURL = BaseAppUtils.RemoveControlChars(r.ssStudentPhotoURL);
		}

		public static RLCourseLearnerProgressReportSummaryList ToRecordList(WORCCourseLearnerProgressReportSummaryRecord[] array) {
			RLCourseLearnerProgressReportSummaryList rl = new RLCourseLearnerProgressReportSummaryList();
			if (array != null) {
				foreach(WORCCourseLearnerProgressReportSummaryRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCourseLearnerProgressReportSummaryRecord[] FromRecordList(RLCourseLearnerProgressReportSummaryList rl) {
			WORCCourseLearnerProgressReportSummaryRecord[] array = new WORCCourseLearnerProgressReportSummaryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCCourseLearnerProgressReportSummaryRecord {
		public static implicit operator WORCCourseLearnerProgressReportSummaryRecord(RCCourseLearnerProgressReportSummaryRecord r) {
			return new WORCCourseLearnerProgressReportSummaryRecord(r.ssSTCourseLearnerProgressReportSummary);
		}

		public static implicit operator RCCourseLearnerProgressReportSummaryRecord(WORCCourseLearnerProgressReportSummaryRecord w) {
			RCCourseLearnerProgressReportSummaryRecord r = new RCCourseLearnerProgressReportSummaryRecord("");
			if (w != null) {
				r.ssSTCourseLearnerProgressReportSummary = w;
			}
			return r;
		}

	}

	partial struct STCourseLearnerProgressReportSummaryStructure {
		public static implicit operator WORCCourseLearnerProgressReportSummaryRecord(STCourseLearnerProgressReportSummaryStructure r) {
			return new WORCCourseLearnerProgressReportSummaryRecord(r);
		}

		public static implicit operator STCourseLearnerProgressReportSummaryStructure(WORCCourseLearnerProgressReportSummaryRecord w) {
			STCourseLearnerProgressReportSummaryStructure r = new STCourseLearnerProgressReportSummaryStructure("");
			if (w != null) {
				r.ssStudentReference = ((string) w.varWSStudentReference ?? "");
				r.ssProgressReportId = (int) w.varWSProgressReportId;
				r.ssTotalNumberOfSections = (int) w.varWSTotalNumberOfSections;
				r.ssTotalNumberOfVisibleSections = (int) w.varWSTotalNumberOfVisibleSections;
				r.ssTotalNumberOfCompletedSections = (int) w.varWSTotalNumberOfCompletedSections;
				r.ssHasProgressReport = (bool) w.varWSHasProgressReport;
				r.ssStudentSurname = ((string) w.varWSStudentSurname ?? "");
				r.ssStudentForename = ((string) w.varWSStudentForename ?? "");
				r.ssStudentPhotoURL = ((string) w.varWSStudentPhotoURL ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCourseLearnerProgressReportSummaryRecordList {
		public WORCCourseLearnerProgressReportSummaryRecord[] Array;


		public WORLCourseLearnerProgressReportSummaryRecordList(WORCCourseLearnerProgressReportSummaryRecord[] r) {
			if (r == null)
			Array = new WORCCourseLearnerProgressReportSummaryRecord[0];
			else
			Array = r;
		}
		public WORLCourseLearnerProgressReportSummaryRecordList() {
			Array = new WORCCourseLearnerProgressReportSummaryRecord[0];
		}

		public WORLCourseLearnerProgressReportSummaryRecordList(RLCourseLearnerProgressReportSummaryRecordList rl) {
			rl=(RLCourseLearnerProgressReportSummaryRecordList) rl.Duplicate();
			Array = new WORCCourseLearnerProgressReportSummaryRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCourseLearnerProgressReportSummaryRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCourseLearnerProgressReportSummaryRecordList {
		public static implicit operator RLCourseLearnerProgressReportSummaryRecordList(WORCCourseLearnerProgressReportSummaryRecord[] array) {
			RLCourseLearnerProgressReportSummaryRecordList rl = new RLCourseLearnerProgressReportSummaryRecordList();
			if (array != null) {
				foreach(WORCCourseLearnerProgressReportSummaryRecord val in array) {
					rl.Append((RCCourseLearnerProgressReportSummaryRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCourseLearnerProgressReportSummaryRecord[](RLCourseLearnerProgressReportSummaryRecordList rl) {
			WORCCourseLearnerProgressReportSummaryRecord[] array = new WORCCourseLearnerProgressReportSummaryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCourseLearnerProgressReportSummaryRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCourseLearnerProgressReportSummaryRecordList {
		public static implicit operator RLCourseLearnerProgressReportSummaryRecordList(WORLCourseLearnerProgressReportSummaryRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCourseLearnerProgressReportSummaryRecordList(RLCourseLearnerProgressReportSummaryRecordList rl) {
			return new WORLCourseLearnerProgressReportSummaryRecordList(rl);
		}
		public static implicit operator WORCCourseLearnerProgressReportSummaryRecord[](WORLCourseLearnerProgressReportSummaryRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCourseLearnerProgressReportSummaryRecordList(WORCCourseLearnerProgressReportSummaryRecord[] array) {
			return new WORLCourseLearnerProgressReportSummaryRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLCourseLearnerProgressReportSummaryList {
		public WORCCourseLearnerProgressReportSummaryRecord[] Array;


		public WORLCourseLearnerProgressReportSummaryList(WORCCourseLearnerProgressReportSummaryRecord[] r) {
			if (r == null)
			Array = new WORCCourseLearnerProgressReportSummaryRecord[0];
			else
			Array = r;
		}
		public WORLCourseLearnerProgressReportSummaryList() {
			Array = new WORCCourseLearnerProgressReportSummaryRecord[0];
		}

		public WORLCourseLearnerProgressReportSummaryList(RLCourseLearnerProgressReportSummaryList rl) {
			rl=(RLCourseLearnerProgressReportSummaryList) rl.Duplicate();
			Array = new WORCCourseLearnerProgressReportSummaryRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLCourseLearnerProgressReportSummaryList {
		public static implicit operator RLCourseLearnerProgressReportSummaryList(WORCCourseLearnerProgressReportSummaryRecord[] array) {
			RLCourseLearnerProgressReportSummaryList rl = new RLCourseLearnerProgressReportSummaryList();
			if (array != null) {
				foreach(WORCCourseLearnerProgressReportSummaryRecord val in array) {
					rl.Append((STCourseLearnerProgressReportSummaryStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCourseLearnerProgressReportSummaryRecord[](RLCourseLearnerProgressReportSummaryList rl) {
			WORCCourseLearnerProgressReportSummaryRecord[] array = new WORCCourseLearnerProgressReportSummaryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STCourseLearnerProgressReportSummaryStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLCourseLearnerProgressReportSummaryList {
		public static implicit operator RLCourseLearnerProgressReportSummaryList(WORLCourseLearnerProgressReportSummaryList w) {
			return w.Array;
		}
		public static implicit operator WORLCourseLearnerProgressReportSummaryList(RLCourseLearnerProgressReportSummaryList rl) {
			return new WORLCourseLearnerProgressReportSummaryList(rl);
		}
		public static implicit operator WORCCourseLearnerProgressReportSummaryRecord[](WORLCourseLearnerProgressReportSummaryList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCourseLearnerProgressReportSummaryList(WORCCourseLearnerProgressReportSummaryRecord[] array) {
			return new WORLCourseLearnerProgressReportSummaryList(array);
		}
	}
}

