/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STRGBColorStructure</code> that represents the Service Studio structure
	///  <code>RGBColor</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STRGBColorStructure: ISerializable, ITypedRecord<STRGBColorStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdRed = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*rV7tq2Ghh0G0MQJmkRTpsw");
		private static readonly GlobalObjectKey IdGreen = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*bE1YjGNghki2v9_vnPqshA");
		private static readonly GlobalObjectKey IdBlue = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*1FOh1PLnzkSJHp29_vSJgg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Red")]
		public int ssRed;

		[System.Xml.Serialization.XmlElement("Green")]
		public int ssGreen;

		[System.Xml.Serialization.XmlElement("Blue")]
		public int ssBlue;


		public BitArray OptimizedAttributes;

		public STRGBColorStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssRed = 0;
			ssGreen = 0;
			ssBlue = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssRed = r.ReadInteger(index++, "RGBColor.Red", 0);
			ssGreen = r.ReadInteger(index++, "RGBColor.Green", 0);
			ssBlue = r.ReadInteger(index++, "RGBColor.Blue", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STRGBColorStructure r) {
			this = r;
		}


		public static bool operator == (STRGBColorStructure a, STRGBColorStructure b) {
			if (a.ssRed != b.ssRed) return false;
			if (a.ssGreen != b.ssGreen) return false;
			if (a.ssBlue != b.ssBlue) return false;
			return true;
		}

		public static bool operator != (STRGBColorStructure a, STRGBColorStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STRGBColorStructure)) return false;
			return (this == (STRGBColorStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssRed.GetHashCode()
				^ ssGreen.GetHashCode()
				^ ssBlue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STRGBColorStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssRed = 0;
			ssGreen = 0;
			ssBlue = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssRed = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssGreen = (int) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssBlue = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STRGBColorStructure Duplicate() {
			STRGBColorStructure t;
			t.ssRed = this.ssRed;
			t.ssGreen = this.ssGreen;
			t.ssBlue = this.ssBlue;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Red")) VarValue.AppendAttribute(recordElem, "Red", ssRed, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Red");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Green")) VarValue.AppendAttribute(recordElem, "Green", ssGreen, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Green");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Blue")) VarValue.AppendAttribute(recordElem, "Blue", ssBlue, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Blue");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "red") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Red")) variable.Value = ssRed; else variable.Optimized = true;
			} else if (head == "green") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Green")) variable.Value = ssGreen; else variable.Optimized = true;
			} else if (head == "blue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Blue")) variable.Value = ssBlue; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRed) {
				return ssRed;
			} else if (key == IdGreen) {
				return ssGreen;
			} else if (key == IdBlue) {
				return ssBlue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssRed = (int) other.AttributeGet(IdRed);
			ssGreen = (int) other.AttributeGet(IdGreen);
			ssBlue = (int) other.AttributeGet(IdBlue);
		}
	} // STRGBColorStructure
	/// <summary>
	/// Structure <code>RCRGBColorRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRGBColorRecord: ISerializable, ITypedRecord<RCRGBColorRecord> {
		private static readonly GlobalObjectKey IdRGBColor = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*3GrUijhKD6gj5N+SgmI+0w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RGBColor")]
		public STRGBColorStructure ssSTRGBColor;


		public static implicit operator STRGBColorStructure(RCRGBColorRecord r) {
			return r.ssSTRGBColor;
		}

		public static implicit operator RCRGBColorRecord(STRGBColorStructure r) {
			RCRGBColorRecord res = new RCRGBColorRecord(null);
			res.ssSTRGBColor = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCRGBColorRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTRGBColor = new STRGBColorStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTRGBColor.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTRGBColor.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRGBColorRecord r) {
			this = r;
		}


		public static bool operator == (RCRGBColorRecord a, RCRGBColorRecord b) {
			if (a.ssSTRGBColor != b.ssSTRGBColor) return false;
			return true;
		}

		public static bool operator != (RCRGBColorRecord a, RCRGBColorRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRGBColorRecord)) return false;
			return (this == (RCRGBColorRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTRGBColor.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRGBColorRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTRGBColor = new STRGBColorStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTRGBColor = (STRGBColorStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTRGBColor.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTRGBColor.InternalRecursiveSave();
		}


		public RCRGBColorRecord Duplicate() {
			RCRGBColorRecord t;
			t.ssSTRGBColor = (STRGBColorStructure) this.ssSTRGBColor.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTRGBColor.ToXml(this, recordElem, "RGBColor", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "rgbcolor") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RGBColor")) variable.Value = ssSTRGBColor; else variable.Optimized = true;
				variable.SetFieldName("rgbcolor");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRGBColor) {
				return ssSTRGBColor;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTRGBColor.FillFromOther((IRecord) other.AttributeGet(IdRGBColor));
		}
	} // RCRGBColorRecord
	/// <summary>
	/// RecordList type <code>RLRGBColorRecordList</code> that represents a record list of
	///  <code>RGBColor</code>
	/// </summary>
	[Serializable()]
	public partial class RLRGBColorRecordList: GenericRecordList<RCRGBColorRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRGBColorRecord GetElementDefaultValue() {
			return new RCRGBColorRecord("");
		}

		public T[] ToArray<T>(Func<RCRGBColorRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRGBColorRecordList recordlist, Func<RCRGBColorRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRGBColorRecordList ToList<T>(T[] array, Func <T, RCRGBColorRecord> converter) {
			RLRGBColorRecordList result = new RLRGBColorRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRGBColorRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRGBColorRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRGBColorRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRGBColorRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRGBColorRecord> NewList() {
			return new RLRGBColorRecordList();
		}


	} // RLRGBColorRecordList
	/// <summary>
	/// RecordList type <code>RLRGBColorList</code> that represents a record list of <code>Integer,
	///  Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLRGBColorList: GenericRecordList<STRGBColorStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STRGBColorStructure GetElementDefaultValue() {
			return new STRGBColorStructure("");
		}

		public T[] ToArray<T>(Func<STRGBColorStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRGBColorList recordlist, Func<STRGBColorStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRGBColorList ToList<T>(T[] array, Func <T, STRGBColorStructure> converter) {
			RLRGBColorList result = new RLRGBColorList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRGBColorList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRGBColorList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRGBColorList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRGBColorList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STRGBColorStructure> NewList() {
			return new RLRGBColorList();
		}


	} // RLRGBColorList
}

namespace ssCaseConferencing {
	[XmlType("RGBColor")]
	public class WORCRGBColorRecord {
		[System.Xml.Serialization.XmlElement("Red")]
		public int varWSRed;

		[System.Xml.Serialization.XmlElement("Green")]
		public int varWSGreen;

		[System.Xml.Serialization.XmlElement("Blue")]
		public int varWSBlue;

		public WORCRGBColorRecord() {
			varWSRed = (int) 0;
			varWSGreen = (int) 0;
			varWSBlue = (int) 0;
		}

		public WORCRGBColorRecord(STRGBColorStructure r) {
			varWSRed = (int) r.ssRed;
			varWSGreen = (int) r.ssGreen;
			varWSBlue = (int) r.ssBlue;
		}

		public static RLRGBColorList ToRecordList(WORCRGBColorRecord[] array) {
			RLRGBColorList rl = new RLRGBColorList();
			if (array != null) {
				foreach(WORCRGBColorRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRGBColorRecord[] FromRecordList(RLRGBColorList rl) {
			WORCRGBColorRecord[] array = new WORCRGBColorRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCRGBColorRecord {
		public static implicit operator WORCRGBColorRecord(RCRGBColorRecord r) {
			return new WORCRGBColorRecord(r.ssSTRGBColor);
		}

		public static implicit operator RCRGBColorRecord(WORCRGBColorRecord w) {
			RCRGBColorRecord r = new RCRGBColorRecord("");
			if (w != null) {
				r.ssSTRGBColor = w;
			}
			return r;
		}

	}

	partial struct STRGBColorStructure {
		public static implicit operator WORCRGBColorRecord(STRGBColorStructure r) {
			return new WORCRGBColorRecord(r);
		}

		public static implicit operator STRGBColorStructure(WORCRGBColorRecord w) {
			STRGBColorStructure r = new STRGBColorStructure("");
			if (w != null) {
				r.ssRed = (int) w.varWSRed;
				r.ssGreen = (int) w.varWSGreen;
				r.ssBlue = (int) w.varWSBlue;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRGBColorRecordList {
		public WORCRGBColorRecord[] Array;


		public WORLRGBColorRecordList(WORCRGBColorRecord[] r) {
			if (r == null)
			Array = new WORCRGBColorRecord[0];
			else
			Array = r;
		}
		public WORLRGBColorRecordList() {
			Array = new WORCRGBColorRecord[0];
		}

		public WORLRGBColorRecordList(RLRGBColorRecordList rl) {
			rl=(RLRGBColorRecordList) rl.Duplicate();
			Array = new WORCRGBColorRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRGBColorRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRGBColorRecordList {
		public static implicit operator RLRGBColorRecordList(WORCRGBColorRecord[] array) {
			RLRGBColorRecordList rl = new RLRGBColorRecordList();
			if (array != null) {
				foreach(WORCRGBColorRecord val in array) {
					rl.Append((RCRGBColorRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRGBColorRecord[](RLRGBColorRecordList rl) {
			WORCRGBColorRecord[] array = new WORCRGBColorRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRGBColorRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRGBColorRecordList {
		public static implicit operator RLRGBColorRecordList(WORLRGBColorRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRGBColorRecordList(RLRGBColorRecordList rl) {
			return new WORLRGBColorRecordList(rl);
		}
		public static implicit operator WORCRGBColorRecord[](WORLRGBColorRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRGBColorRecordList(WORCRGBColorRecord[] array) {
			return new WORLRGBColorRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRGBColorList {
		public WORCRGBColorRecord[] Array;


		public WORLRGBColorList(WORCRGBColorRecord[] r) {
			if (r == null)
			Array = new WORCRGBColorRecord[0];
			else
			Array = r;
		}
		public WORLRGBColorList() {
			Array = new WORCRGBColorRecord[0];
		}

		public WORLRGBColorList(RLRGBColorList rl) {
			rl=(RLRGBColorList) rl.Duplicate();
			Array = new WORCRGBColorRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRGBColorList {
		public static implicit operator RLRGBColorList(WORCRGBColorRecord[] array) {
			RLRGBColorList rl = new RLRGBColorList();
			if (array != null) {
				foreach(WORCRGBColorRecord val in array) {
					rl.Append((STRGBColorStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRGBColorRecord[](RLRGBColorList rl) {
			WORCRGBColorRecord[] array = new WORCRGBColorRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STRGBColorStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRGBColorList {
		public static implicit operator RLRGBColorList(WORLRGBColorList w) {
			return w.Array;
		}
		public static implicit operator WORLRGBColorList(RLRGBColorList rl) {
			return new WORLRGBColorList(rl);
		}
		public static implicit operator WORCRGBColorRecord[](WORLRGBColorList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRGBColorList(WORCRGBColorRecord[] array) {
			return new WORLRGBColorList(array);
		}
	}
}

