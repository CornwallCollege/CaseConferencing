/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STMarkbookTasksStructure</code> that represents the Service Studio structure
	///  <code>MarkbookTasks</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STMarkbookTasksStructure: ISerializable, ITypedRecord<STMarkbookTasksStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdTaskID = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*_xZFpcJKpkqVV0HUlvGDAA");
		private static readonly GlobalObjectKey IdTaskCode = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*udfjOdXeLk+oVe6TaHkjeQ");
		private static readonly GlobalObjectKey IdTaskName = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*KmIg2ZrfnUylWlrJ+2HgDQ");
		private static readonly GlobalObjectKey IdTaskCompleted = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*hDZxigDUJECEfkXh1z1fEg");
		private static readonly GlobalObjectKey IdTaskGrade = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*qTR8weUOXka5nl4Dfwo4Rw");
		private static readonly GlobalObjectKey IdTaskDateCompleted = GlobalObjectKey.Parse("9iBL85w0ZUGz9zoHIHP4NA*WNLVJa_VqkW+1rA3oVJKTw");

		public static void EnsureInitialized() {}

		static STMarkbookTasksStructure() {
			ssCaseConferencing.STMarkbookTasksStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("TaskID")]
		public int ssTaskID;

		[System.Xml.Serialization.XmlElement("TaskCode")]
		public string ssTaskCode;

		[System.Xml.Serialization.XmlElement("TaskName")]
		public string ssTaskName;

		[System.Xml.Serialization.XmlElement("TaskCompleted")]
		public bool ssTaskCompleted;

		[System.Xml.Serialization.XmlElement("TaskGrade")]
		public string ssTaskGrade;

		[System.Xml.Serialization.XmlElement("TaskDateCompleted")]
		public DateTime ssTaskDateCompleted;


		public BitArray OptimizedAttributes;

		public STMarkbookTasksStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssTaskID = 0;
			ssTaskCode = "";
			ssTaskName = "";
			ssTaskCompleted = false;
			ssTaskGrade = "";
			ssTaskDateCompleted = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssTaskID = r.ReadInteger(index++, "MarkbookTasks.TaskID", 0);
			ssTaskCode = r.ReadText(index++, "MarkbookTasks.TaskCode", "");
			ssTaskName = r.ReadText(index++, "MarkbookTasks.TaskName", "");
			ssTaskCompleted = r.ReadBoolean(index++, "MarkbookTasks.TaskCompleted", false);
			ssTaskGrade = r.ReadText(index++, "MarkbookTasks.TaskGrade", "");
			ssTaskDateCompleted = r.ReadDateTime(index++, "MarkbookTasks.TaskDateCompleted", new DateTime(1900, 1, 1, 0, 0, 0));
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STMarkbookTasksStructure r) {
			this = r;
		}


		public static bool operator == (STMarkbookTasksStructure a, STMarkbookTasksStructure b) {
			if (a.ssTaskID != b.ssTaskID) return false;
			if (a.ssTaskCode != b.ssTaskCode) return false;
			if (a.ssTaskName != b.ssTaskName) return false;
			if (a.ssTaskCompleted != b.ssTaskCompleted) return false;
			if (a.ssTaskGrade != b.ssTaskGrade) return false;
			if (a.ssTaskDateCompleted != b.ssTaskDateCompleted) return false;
			return true;
		}

		public static bool operator != (STMarkbookTasksStructure a, STMarkbookTasksStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STMarkbookTasksStructure)) return false;
			return (this == (STMarkbookTasksStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssTaskID.GetHashCode()
				^ ssTaskCode.GetHashCode()
				^ ssTaskName.GetHashCode()
				^ ssTaskCompleted.GetHashCode()
				^ ssTaskGrade.GetHashCode()
				^ ssTaskDateCompleted.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STMarkbookTasksStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssTaskID = 0;
			ssTaskCode = "";
			ssTaskName = "";
			ssTaskCompleted = false;
			ssTaskGrade = "";
			ssTaskDateCompleted = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssTaskID = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssTaskCode = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssTaskName = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssTaskCompleted = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssTaskGrade = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssTaskDateCompleted = (DateTime) info.GetValue(fields[5] .Name, fields[5] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STMarkbookTasksStructure Duplicate() {
			STMarkbookTasksStructure t;
			t.ssTaskID = this.ssTaskID;
			t.ssTaskCode = this.ssTaskCode;
			t.ssTaskName = this.ssTaskName;
			t.ssTaskCompleted = this.ssTaskCompleted;
			t.ssTaskGrade = this.ssTaskGrade;
			t.ssTaskDateCompleted = this.ssTaskDateCompleted;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TaskID")) VarValue.AppendAttribute(recordElem, "TaskID", ssTaskID, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "TaskID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TaskCode")) VarValue.AppendAttribute(recordElem, "TaskCode", ssTaskCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TaskCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TaskName")) VarValue.AppendAttribute(recordElem, "TaskName", ssTaskName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TaskName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TaskCompleted")) VarValue.AppendAttribute(recordElem, "TaskCompleted", ssTaskCompleted, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "TaskCompleted");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TaskGrade")) VarValue.AppendAttribute(recordElem, "TaskGrade", ssTaskGrade, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TaskGrade");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TaskDateCompleted")) VarValue.AppendAttribute(recordElem, "TaskDateCompleted", ssTaskDateCompleted, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "TaskDateCompleted");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "taskid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TaskID")) variable.Value = ssTaskID; else variable.Optimized = true;
			} else if (head == "taskcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TaskCode")) variable.Value = ssTaskCode; else variable.Optimized = true;
			} else if (head == "taskname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TaskName")) variable.Value = ssTaskName; else variable.Optimized = true;
			} else if (head == "taskcompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TaskCompleted")) variable.Value = ssTaskCompleted; else variable.Optimized = true;
			} else if (head == "taskgrade") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TaskGrade")) variable.Value = ssTaskGrade; else variable.Optimized = true;
			} else if (head == "taskdatecompleted") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TaskDateCompleted")) variable.Value = ssTaskDateCompleted; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTaskID) {
				return ssTaskID;
			} else if (key == IdTaskCode) {
				return ssTaskCode;
			} else if (key == IdTaskName) {
				return ssTaskName;
			} else if (key == IdTaskCompleted) {
				return ssTaskCompleted;
			} else if (key == IdTaskGrade) {
				return ssTaskGrade;
			} else if (key == IdTaskDateCompleted) {
				return ssTaskDateCompleted;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssTaskID = (int) other.AttributeGet(IdTaskID);
			ssTaskCode = (string) other.AttributeGet(IdTaskCode);
			ssTaskName = (string) other.AttributeGet(IdTaskName);
			ssTaskCompleted = (bool) other.AttributeGet(IdTaskCompleted);
			ssTaskGrade = (string) other.AttributeGet(IdTaskGrade);
			ssTaskDateCompleted = (DateTime) other.AttributeGet(IdTaskDateCompleted);
		}
	} // STMarkbookTasksStructure
	/// <summary>
	/// Structure <code>RCMarkbookTasksRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCMarkbookTasksRecord: ISerializable, ITypedRecord<RCMarkbookTasksRecord> {
		private static readonly GlobalObjectKey IdMarkbookTasks = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*4KXCV_sGZKJS3l3h_oJIUQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("MarkbookTasks")]
		public STMarkbookTasksStructure ssSTMarkbookTasks;


		public static implicit operator STMarkbookTasksStructure(RCMarkbookTasksRecord r) {
			return r.ssSTMarkbookTasks;
		}

		public static implicit operator RCMarkbookTasksRecord(STMarkbookTasksStructure r) {
			RCMarkbookTasksRecord res = new RCMarkbookTasksRecord(null);
			res.ssSTMarkbookTasks = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCMarkbookTasksRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTMarkbookTasks = new STMarkbookTasksStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTMarkbookTasks.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTMarkbookTasks.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCMarkbookTasksRecord r) {
			this = r;
		}


		public static bool operator == (RCMarkbookTasksRecord a, RCMarkbookTasksRecord b) {
			if (a.ssSTMarkbookTasks != b.ssSTMarkbookTasks) return false;
			return true;
		}

		public static bool operator != (RCMarkbookTasksRecord a, RCMarkbookTasksRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCMarkbookTasksRecord)) return false;
			return (this == (RCMarkbookTasksRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTMarkbookTasks.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCMarkbookTasksRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTMarkbookTasks = new STMarkbookTasksStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTMarkbookTasks = (STMarkbookTasksStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTMarkbookTasks.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTMarkbookTasks.InternalRecursiveSave();
		}


		public RCMarkbookTasksRecord Duplicate() {
			RCMarkbookTasksRecord t;
			t.ssSTMarkbookTasks = (STMarkbookTasksStructure) this.ssSTMarkbookTasks.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTMarkbookTasks.ToXml(this, recordElem, "MarkbookTasks", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "markbooktasks") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MarkbookTasks")) variable.Value = ssSTMarkbookTasks; else variable.Optimized = true;
				variable.SetFieldName("markbooktasks");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdMarkbookTasks) {
				return ssSTMarkbookTasks;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTMarkbookTasks.FillFromOther((IRecord) other.AttributeGet(IdMarkbookTasks));
		}
	} // RCMarkbookTasksRecord
	/// <summary>
	/// RecordList type <code>RLMarkbookTasksRecordList</code> that represents a record list of
	///  <code>MarkbookTasks</code>
	/// </summary>
	[Serializable()]
	public partial class RLMarkbookTasksRecordList: GenericRecordList<RCMarkbookTasksRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCMarkbookTasksRecord GetElementDefaultValue() {
			return new RCMarkbookTasksRecord("");
		}

		public T[] ToArray<T>(Func<RCMarkbookTasksRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMarkbookTasksRecordList recordlist, Func<RCMarkbookTasksRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLMarkbookTasksRecordList ToList<T>(T[] array, Func <T, RCMarkbookTasksRecord> converter) {
			RLMarkbookTasksRecordList result = new RLMarkbookTasksRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMarkbookTasksRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookTasksRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookTasksRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMarkbookTasksRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCMarkbookTasksRecord> NewList() {
			return new RLMarkbookTasksRecordList();
		}


	} // RLMarkbookTasksRecordList
	/// <summary>
	/// RecordList type <code>RLMarkbookTasksList</code> that represents a record list of <code>Text, Text,
	///  Text, DateTime, Boolean, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLMarkbookTasksList: GenericRecordList<STMarkbookTasksStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		static RLMarkbookTasksList() {
			ssCaseConferencing.RLMarkbookTasksListTypeFactoryImpl.InitializeFactory();
		}

		protected override STMarkbookTasksStructure GetElementDefaultValue() {
			return new STMarkbookTasksStructure("");
		}

		public T[] ToArray<T>(Func<STMarkbookTasksStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMarkbookTasksList recordlist, Func<STMarkbookTasksStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLMarkbookTasksList ToList<T>(T[] array, Func <T, STMarkbookTasksStructure> converter) {
			RLMarkbookTasksList result = new RLMarkbookTasksList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMarkbookTasksList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookTasksList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMarkbookTasksList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMarkbookTasksList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STMarkbookTasksStructure> NewList() {
			return new RLMarkbookTasksList();
		}


	} // RLMarkbookTasksList
}

namespace ssCaseConferencing {
	[XmlType("MarkbookTasks")]
	public class WORCMarkbookTasksRecord {
		[System.Xml.Serialization.XmlElement("TaskID")]
		public int varWSTaskID;

		[System.Xml.Serialization.XmlElement("TaskCode")]
		public string varWSTaskCode;

		[System.Xml.Serialization.XmlElement("TaskName")]
		public string varWSTaskName;

		[System.Xml.Serialization.XmlElement("TaskCompleted")]
		public bool varWSTaskCompleted;

		[System.Xml.Serialization.XmlElement("TaskGrade")]
		public string varWSTaskGrade;

		[System.Xml.Serialization.XmlElement("TaskDateCompleted")]
		public DateTime varWSTaskDateCompleted;

		public WORCMarkbookTasksRecord() {
			varWSTaskID = (int) 0;
			varWSTaskCode = (string) "";
			varWSTaskName = (string) "";
			varWSTaskCompleted = (bool) false;
			varWSTaskGrade = (string) "";
			varWSTaskDateCompleted = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCMarkbookTasksRecord(STMarkbookTasksStructure r) {
			varWSTaskID = (int) r.ssTaskID;
			varWSTaskCode = BaseAppUtils.RemoveControlChars(r.ssTaskCode);
			varWSTaskName = BaseAppUtils.RemoveControlChars(r.ssTaskName);
			varWSTaskCompleted = (bool) r.ssTaskCompleted;
			varWSTaskGrade = BaseAppUtils.RemoveControlChars(r.ssTaskGrade);
			varWSTaskDateCompleted = (DateTime) r.ssTaskDateCompleted;
		}

		public static RLMarkbookTasksList ToRecordList(WORCMarkbookTasksRecord[] array) {
			RLMarkbookTasksList rl = new RLMarkbookTasksList();
			if (array != null) {
				foreach(WORCMarkbookTasksRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCMarkbookTasksRecord[] FromRecordList(RLMarkbookTasksList rl) {
			WORCMarkbookTasksRecord[] array = new WORCMarkbookTasksRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCMarkbookTasksRecord {
		public static implicit operator WORCMarkbookTasksRecord(RCMarkbookTasksRecord r) {
			return new WORCMarkbookTasksRecord(r.ssSTMarkbookTasks);
		}

		public static implicit operator RCMarkbookTasksRecord(WORCMarkbookTasksRecord w) {
			RCMarkbookTasksRecord r = new RCMarkbookTasksRecord("");
			if (w != null) {
				r.ssSTMarkbookTasks = w;
			}
			return r;
		}

	}

	partial struct STMarkbookTasksStructure {
		public static implicit operator WORCMarkbookTasksRecord(STMarkbookTasksStructure r) {
			return new WORCMarkbookTasksRecord(r);
		}

		public static implicit operator STMarkbookTasksStructure(WORCMarkbookTasksRecord w) {
			STMarkbookTasksStructure r = new STMarkbookTasksStructure("");
			if (w != null) {
				r.ssTaskID = (int) w.varWSTaskID;
				r.ssTaskCode = ((string) w.varWSTaskCode ?? "");
				r.ssTaskName = ((string) w.varWSTaskName ?? "");
				r.ssTaskCompleted = (bool) w.varWSTaskCompleted;
				r.ssTaskGrade = ((string) w.varWSTaskGrade ?? "");
				r.ssTaskDateCompleted = (DateTime) w.varWSTaskDateCompleted;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLMarkbookTasksRecordList {
		public WORCMarkbookTasksRecord[] Array;


		public WORLMarkbookTasksRecordList(WORCMarkbookTasksRecord[] r) {
			if (r == null)
			Array = new WORCMarkbookTasksRecord[0];
			else
			Array = r;
		}
		public WORLMarkbookTasksRecordList() {
			Array = new WORCMarkbookTasksRecord[0];
		}

		public WORLMarkbookTasksRecordList(RLMarkbookTasksRecordList rl) {
			rl=(RLMarkbookTasksRecordList) rl.Duplicate();
			Array = new WORCMarkbookTasksRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCMarkbookTasksRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLMarkbookTasksRecordList {
		public static implicit operator RLMarkbookTasksRecordList(WORCMarkbookTasksRecord[] array) {
			RLMarkbookTasksRecordList rl = new RLMarkbookTasksRecordList();
			if (array != null) {
				foreach(WORCMarkbookTasksRecord val in array) {
					rl.Append((RCMarkbookTasksRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMarkbookTasksRecord[](RLMarkbookTasksRecordList rl) {
			WORCMarkbookTasksRecord[] array = new WORCMarkbookTasksRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCMarkbookTasksRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLMarkbookTasksRecordList {
		public static implicit operator RLMarkbookTasksRecordList(WORLMarkbookTasksRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLMarkbookTasksRecordList(RLMarkbookTasksRecordList rl) {
			return new WORLMarkbookTasksRecordList(rl);
		}
		public static implicit operator WORCMarkbookTasksRecord[](WORLMarkbookTasksRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMarkbookTasksRecordList(WORCMarkbookTasksRecord[] array) {
			return new WORLMarkbookTasksRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLMarkbookTasksList {
		public WORCMarkbookTasksRecord[] Array;


		public WORLMarkbookTasksList(WORCMarkbookTasksRecord[] r) {
			if (r == null)
			Array = new WORCMarkbookTasksRecord[0];
			else
			Array = r;
		}
		public WORLMarkbookTasksList() {
			Array = new WORCMarkbookTasksRecord[0];
		}

		public WORLMarkbookTasksList(RLMarkbookTasksList rl) {
			rl=(RLMarkbookTasksList) rl.Duplicate();
			Array = new WORCMarkbookTasksRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLMarkbookTasksList {
		public static implicit operator RLMarkbookTasksList(WORCMarkbookTasksRecord[] array) {
			RLMarkbookTasksList rl = new RLMarkbookTasksList();
			if (array != null) {
				foreach(WORCMarkbookTasksRecord val in array) {
					rl.Append((STMarkbookTasksStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMarkbookTasksRecord[](RLMarkbookTasksList rl) {
			WORCMarkbookTasksRecord[] array = new WORCMarkbookTasksRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STMarkbookTasksStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLMarkbookTasksList {
		public static implicit operator RLMarkbookTasksList(WORLMarkbookTasksList w) {
			return w.Array;
		}
		public static implicit operator WORLMarkbookTasksList(RLMarkbookTasksList rl) {
			return new WORLMarkbookTasksList(rl);
		}
		public static implicit operator WORCMarkbookTasksRecord[](WORLMarkbookTasksList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMarkbookTasksList(WORCMarkbookTasksRecord[] array) {
			return new WORLMarkbookTasksList(array);
		}
	}
}

