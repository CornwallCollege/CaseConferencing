/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STForSkillsInitialAssessmentSummaryStructure</code> that represents the Service
	///  Studio structure <code>ForSkillsInitialAssessmentSummary</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STForSkillsInitialAssessmentSummaryStructure: ISerializable, ITypedRecord<STForSkillsInitialAssessmentSummaryStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdEnglishLevel = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*2UZKvxtqL0ySD5KRLKUejg");
		private static readonly GlobalObjectKey IdEnglishDate = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*xxW+0m7AC069Fx3cZeDgqg");
		private static readonly GlobalObjectKey IdMathsLevel = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*SSwMXYJl_0ip95HsyULfOQ");
		private static readonly GlobalObjectKey IdMathsDate = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*dOa_QJn9xUak91E3qbHgRw");
		private static readonly GlobalObjectKey IdItLevel = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*FkrOHFeVx06sHfMv90X+Ig");
		private static readonly GlobalObjectKey IdITDate = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*515rUVXgoUmAfBniZZ6eBw");
		private static readonly GlobalObjectKey IdESOLLevel = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*MSXQnNKt5EeMKcmJ0HaIeA");
		private static readonly GlobalObjectKey IdESOLDate = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*OtiaCh1KvUyKer_b8vKqkQ");
		private static readonly GlobalObjectKey IdLearningStyle = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*7ucN5OJxoUaVvLowPMJFxQ");
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("6Uyvzhjk_EmEASEahOprEw*9g99d0ryAU69alIrM7UUhA");

		public static void EnsureInitialized() {}

		static STForSkillsInitialAssessmentSummaryStructure() {
			ssCaseConferencing.STForSkillsInitialAssessmentSummaryStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("EnglishLevel")]
		public string ssEnglishLevel;

		[System.Xml.Serialization.XmlElement("EnglishDate")]
		public DateTime ssEnglishDate;

		[System.Xml.Serialization.XmlElement("MathsLevel")]
		public string ssMathsLevel;

		[System.Xml.Serialization.XmlElement("MathsDate")]
		public DateTime ssMathsDate;

		[System.Xml.Serialization.XmlElement("ItLevel")]
		public string ssItLevel;

		[System.Xml.Serialization.XmlElement("ITDate")]
		public string ssITDate;

		[System.Xml.Serialization.XmlElement("ESOLLevel")]
		public string ssESOLLevel;

		[System.Xml.Serialization.XmlElement("ESOLDate")]
		public string ssESOLDate;

		[System.Xml.Serialization.XmlElement("LearningStyle")]
		public string ssLearningStyle;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;


		public BitArray OptimizedAttributes;

		public STForSkillsInitialAssessmentSummaryStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssEnglishLevel = "";
			ssEnglishDate = new DateTime(1900, 1, 1, 0, 0, 0);
			ssMathsLevel = "";
			ssMathsDate = new DateTime(1900, 1, 1, 0, 0, 0);
			ssItLevel = "";
			ssITDate = "";
			ssESOLLevel = "";
			ssESOLDate = "";
			ssLearningStyle = "";
			ssStudentReference = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssEnglishLevel = r.ReadText(index++, "ForSkillsInitialAssessmentSummary.EnglishLevel", "");
			ssEnglishDate = r.ReadDate(index++, "ForSkillsInitialAssessmentSummary.EnglishDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssMathsLevel = r.ReadText(index++, "ForSkillsInitialAssessmentSummary.MathsLevel", "");
			ssMathsDate = r.ReadDate(index++, "ForSkillsInitialAssessmentSummary.MathsDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssItLevel = r.ReadText(index++, "ForSkillsInitialAssessmentSummary.ItLevel", "");
			ssITDate = r.ReadText(index++, "ForSkillsInitialAssessmentSummary.ITDate", "");
			ssESOLLevel = r.ReadText(index++, "ForSkillsInitialAssessmentSummary.ESOLLevel", "");
			ssESOLDate = r.ReadText(index++, "ForSkillsInitialAssessmentSummary.ESOLDate", "");
			ssLearningStyle = r.ReadText(index++, "ForSkillsInitialAssessmentSummary.LearningStyle", "");
			ssStudentReference = r.ReadText(index++, "ForSkillsInitialAssessmentSummary.StudentReference", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STForSkillsInitialAssessmentSummaryStructure r) {
			this = r;
		}


		public static bool operator == (STForSkillsInitialAssessmentSummaryStructure a, STForSkillsInitialAssessmentSummaryStructure b) {
			if (a.ssEnglishLevel != b.ssEnglishLevel) return false;
			if (a.ssEnglishDate != b.ssEnglishDate) return false;
			if (a.ssMathsLevel != b.ssMathsLevel) return false;
			if (a.ssMathsDate != b.ssMathsDate) return false;
			if (a.ssItLevel != b.ssItLevel) return false;
			if (a.ssITDate != b.ssITDate) return false;
			if (a.ssESOLLevel != b.ssESOLLevel) return false;
			if (a.ssESOLDate != b.ssESOLDate) return false;
			if (a.ssLearningStyle != b.ssLearningStyle) return false;
			if (a.ssStudentReference != b.ssStudentReference) return false;
			return true;
		}

		public static bool operator != (STForSkillsInitialAssessmentSummaryStructure a, STForSkillsInitialAssessmentSummaryStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STForSkillsInitialAssessmentSummaryStructure)) return false;
			return (this == (STForSkillsInitialAssessmentSummaryStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssEnglishLevel.GetHashCode()
				^ ssEnglishDate.GetHashCode()
				^ ssMathsLevel.GetHashCode()
				^ ssMathsDate.GetHashCode()
				^ ssItLevel.GetHashCode()
				^ ssITDate.GetHashCode()
				^ ssESOLLevel.GetHashCode()
				^ ssESOLDate.GetHashCode()
				^ ssLearningStyle.GetHashCode()
				^ ssStudentReference.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STForSkillsInitialAssessmentSummaryStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssEnglishLevel = "";
			ssEnglishDate = new DateTime(1900, 1, 1, 0, 0, 0);
			ssMathsLevel = "";
			ssMathsDate = new DateTime(1900, 1, 1, 0, 0, 0);
			ssItLevel = "";
			ssITDate = "";
			ssESOLLevel = "";
			ssESOLDate = "";
			ssLearningStyle = "";
			ssStudentReference = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssEnglishLevel = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssEnglishDate = (DateTime) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssMathsLevel = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssMathsDate = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssItLevel = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssITDate = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssESOLLevel = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssESOLDate = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssLearningStyle = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STForSkillsInitialAssessmentSummaryStructure Duplicate() {
			STForSkillsInitialAssessmentSummaryStructure t;
			t.ssEnglishLevel = this.ssEnglishLevel;
			t.ssEnglishDate = this.ssEnglishDate;
			t.ssMathsLevel = this.ssMathsLevel;
			t.ssMathsDate = this.ssMathsDate;
			t.ssItLevel = this.ssItLevel;
			t.ssITDate = this.ssITDate;
			t.ssESOLLevel = this.ssESOLLevel;
			t.ssESOLDate = this.ssESOLDate;
			t.ssLearningStyle = this.ssLearningStyle;
			t.ssStudentReference = this.ssStudentReference;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EnglishLevel")) VarValue.AppendAttribute(recordElem, "EnglishLevel", ssEnglishLevel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EnglishLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EnglishDate")) VarValue.AppendAttribute(recordElem, "EnglishDate", ssEnglishDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "EnglishDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathsLevel")) VarValue.AppendAttribute(recordElem, "MathsLevel", ssMathsLevel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MathsLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MathsDate")) VarValue.AppendAttribute(recordElem, "MathsDate", ssMathsDate, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "MathsDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ItLevel")) VarValue.AppendAttribute(recordElem, "ItLevel", ssItLevel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ItLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ITDate")) VarValue.AppendAttribute(recordElem, "ITDate", ssITDate, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ITDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESOLLevel")) VarValue.AppendAttribute(recordElem, "ESOLLevel", ssESOLLevel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ESOLLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESOLDate")) VarValue.AppendAttribute(recordElem, "ESOLDate", ssESOLDate, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ESOLDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LearningStyle")) VarValue.AppendAttribute(recordElem, "LearningStyle", ssLearningStyle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LearningStyle");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "englishlevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnglishLevel")) variable.Value = ssEnglishLevel; else variable.Optimized = true;
			} else if (head == "englishdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnglishDate")) variable.Value = ssEnglishDate; else variable.Optimized = true;
			} else if (head == "mathslevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathsLevel")) variable.Value = ssMathsLevel; else variable.Optimized = true;
			} else if (head == "mathsdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MathsDate")) variable.Value = ssMathsDate; else variable.Optimized = true;
			} else if (head == "itlevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ItLevel")) variable.Value = ssItLevel; else variable.Optimized = true;
			} else if (head == "itdate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ITDate")) variable.Value = ssITDate; else variable.Optimized = true;
			} else if (head == "esollevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESOLLevel")) variable.Value = ssESOLLevel; else variable.Optimized = true;
			} else if (head == "esoldate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESOLDate")) variable.Value = ssESOLDate; else variable.Optimized = true;
			} else if (head == "learningstyle") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearningStyle")) variable.Value = ssLearningStyle; else variable.Optimized = true;
			} else if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdEnglishLevel) {
				return ssEnglishLevel;
			} else if (key == IdEnglishDate) {
				return ssEnglishDate;
			} else if (key == IdMathsLevel) {
				return ssMathsLevel;
			} else if (key == IdMathsDate) {
				return ssMathsDate;
			} else if (key == IdItLevel) {
				return ssItLevel;
			} else if (key == IdITDate) {
				return ssITDate;
			} else if (key == IdESOLLevel) {
				return ssESOLLevel;
			} else if (key == IdESOLDate) {
				return ssESOLDate;
			} else if (key == IdLearningStyle) {
				return ssLearningStyle;
			} else if (key == IdStudentReference) {
				return ssStudentReference;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssEnglishLevel = (string) other.AttributeGet(IdEnglishLevel);
			ssEnglishDate = (DateTime) other.AttributeGet(IdEnglishDate);
			ssMathsLevel = (string) other.AttributeGet(IdMathsLevel);
			ssMathsDate = (DateTime) other.AttributeGet(IdMathsDate);
			ssItLevel = (string) other.AttributeGet(IdItLevel);
			ssITDate = (string) other.AttributeGet(IdITDate);
			ssESOLLevel = (string) other.AttributeGet(IdESOLLevel);
			ssESOLDate = (string) other.AttributeGet(IdESOLDate);
			ssLearningStyle = (string) other.AttributeGet(IdLearningStyle);
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
		}
	} // STForSkillsInitialAssessmentSummaryStructure
	/// <summary>
	/// Structure <code>RCForSkillsInitialAssessmentSummaryRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCForSkillsInitialAssessmentSummaryRecord: ISerializable, ITypedRecord<RCForSkillsInitialAssessmentSummaryRecord> {
		private static readonly GlobalObjectKey IdForSkillsInitialAssessmentSummary = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*_4tC1Q5urh9r9X7Y4qGq0Q");

		public static void EnsureInitialized() {}

		static RCForSkillsInitialAssessmentSummaryRecord() {
			ssCaseConferencing.RCForSkillsInitialAssessmentSummaryRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("ForSkillsInitialAssessmentSummary")]
		public STForSkillsInitialAssessmentSummaryStructure ssSTForSkillsInitialAssessmentSummary;


		public static implicit operator STForSkillsInitialAssessmentSummaryStructure(RCForSkillsInitialAssessmentSummaryRecord r) {
			return r.ssSTForSkillsInitialAssessmentSummary;
		}

		public static implicit operator RCForSkillsInitialAssessmentSummaryRecord(STForSkillsInitialAssessmentSummaryStructure r) {
			RCForSkillsInitialAssessmentSummaryRecord res = new RCForSkillsInitialAssessmentSummaryRecord(null);
			res.ssSTForSkillsInitialAssessmentSummary = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCForSkillsInitialAssessmentSummaryRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTForSkillsInitialAssessmentSummary = new STForSkillsInitialAssessmentSummaryStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTForSkillsInitialAssessmentSummary.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTForSkillsInitialAssessmentSummary.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCForSkillsInitialAssessmentSummaryRecord r) {
			this = r;
		}


		public static bool operator == (RCForSkillsInitialAssessmentSummaryRecord a, RCForSkillsInitialAssessmentSummaryRecord b) {
			if (a.ssSTForSkillsInitialAssessmentSummary != b.ssSTForSkillsInitialAssessmentSummary) return false;
			return true;
		}

		public static bool operator != (RCForSkillsInitialAssessmentSummaryRecord a, RCForSkillsInitialAssessmentSummaryRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCForSkillsInitialAssessmentSummaryRecord)) return false;
			return (this == (RCForSkillsInitialAssessmentSummaryRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTForSkillsInitialAssessmentSummary.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCForSkillsInitialAssessmentSummaryRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTForSkillsInitialAssessmentSummary = new STForSkillsInitialAssessmentSummaryStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTForSkillsInitialAssessmentSummary = (STForSkillsInitialAssessmentSummaryStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTForSkillsInitialAssessmentSummary.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTForSkillsInitialAssessmentSummary.InternalRecursiveSave();
		}


		public RCForSkillsInitialAssessmentSummaryRecord Duplicate() {
			RCForSkillsInitialAssessmentSummaryRecord t;
			t.ssSTForSkillsInitialAssessmentSummary = (STForSkillsInitialAssessmentSummaryStructure) this.ssSTForSkillsInitialAssessmentSummary.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTForSkillsInitialAssessmentSummary.ToXml(this, recordElem, "ForSkillsInitialAssessmentSummary", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "forskillsinitialassessmentsummary") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ForSkillsInitialAssessmentSummary")) variable.Value = ssSTForSkillsInitialAssessmentSummary; else variable.Optimized = true;
				variable.SetFieldName("forskillsinitialassessmentsummary");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdForSkillsInitialAssessmentSummary) {
				return ssSTForSkillsInitialAssessmentSummary;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTForSkillsInitialAssessmentSummary.FillFromOther((IRecord) other.AttributeGet(IdForSkillsInitialAssessmentSummary));
		}
	} // RCForSkillsInitialAssessmentSummaryRecord
	/// <summary>
	/// RecordList type <code>RLForSkillsInitialAssessmentSummaryRecordList</code> that represents a record
	///  list of <code>ForSkillsInitialAssessmentSummary</code>
	/// </summary>
	[Serializable()]
	public partial class RLForSkillsInitialAssessmentSummaryRecordList: GenericRecordList<RCForSkillsInitialAssessmentSummaryRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCForSkillsInitialAssessmentSummaryRecord GetElementDefaultValue() {
			return new RCForSkillsInitialAssessmentSummaryRecord("");
		}

		public T[] ToArray<T>(Func<RCForSkillsInitialAssessmentSummaryRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLForSkillsInitialAssessmentSummaryRecordList recordlist, Func<RCForSkillsInitialAssessmentSummaryRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLForSkillsInitialAssessmentSummaryRecordList ToList<T>(T[] array, Func <T, RCForSkillsInitialAssessmentSummaryRecord> converter) {
			RLForSkillsInitialAssessmentSummaryRecordList result = new RLForSkillsInitialAssessmentSummaryRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLForSkillsInitialAssessmentSummaryRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLForSkillsInitialAssessmentSummaryRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLForSkillsInitialAssessmentSummaryRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLForSkillsInitialAssessmentSummaryRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCForSkillsInitialAssessmentSummaryRecord> NewList() {
			return new RLForSkillsInitialAssessmentSummaryRecordList();
		}


	} // RLForSkillsInitialAssessmentSummaryRecordList
	/// <summary>
	/// RecordList type <code>RLForSkillsInitialAssessmentSummaryList</code> that represents a record list
	///  of <code>Text, Text, Text, Text, Text, Text, Text, Text, Date, Date</code>
	/// </summary>
	[Serializable()]
	public partial class RLForSkillsInitialAssessmentSummaryList: GenericRecordList<STForSkillsInitialAssessmentSummaryStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STForSkillsInitialAssessmentSummaryStructure GetElementDefaultValue() {
			return new STForSkillsInitialAssessmentSummaryStructure("");
		}

		public T[] ToArray<T>(Func<STForSkillsInitialAssessmentSummaryStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLForSkillsInitialAssessmentSummaryList recordlist, Func<STForSkillsInitialAssessmentSummaryStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLForSkillsInitialAssessmentSummaryList ToList<T>(T[] array, Func <T, STForSkillsInitialAssessmentSummaryStructure> converter) {
			RLForSkillsInitialAssessmentSummaryList result = new RLForSkillsInitialAssessmentSummaryList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLForSkillsInitialAssessmentSummaryList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLForSkillsInitialAssessmentSummaryList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLForSkillsInitialAssessmentSummaryList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLForSkillsInitialAssessmentSummaryList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STForSkillsInitialAssessmentSummaryStructure> NewList() {
			return new RLForSkillsInitialAssessmentSummaryList();
		}


	} // RLForSkillsInitialAssessmentSummaryList
}

namespace ssCaseConferencing {
	[XmlType("ForSkillsInitialAssessmentSummary")]
	public class WORCForSkillsInitialAssessmentSummaryRecord {
		[System.Xml.Serialization.XmlElement("EnglishLevel")]
		public string varWSEnglishLevel;

		[System.Xml.Serialization.XmlElement("EnglishDate", DataType= "date")]
		public DateTime varWSEnglishDate;

		[System.Xml.Serialization.XmlElement("MathsLevel")]
		public string varWSMathsLevel;

		[System.Xml.Serialization.XmlElement("MathsDate", DataType= "date")]
		public DateTime varWSMathsDate;

		[System.Xml.Serialization.XmlElement("ItLevel")]
		public string varWSItLevel;

		[System.Xml.Serialization.XmlElement("ITDate")]
		public string varWSITDate;

		[System.Xml.Serialization.XmlElement("ESOLLevel")]
		public string varWSESOLLevel;

		[System.Xml.Serialization.XmlElement("ESOLDate")]
		public string varWSESOLDate;

		[System.Xml.Serialization.XmlElement("LearningStyle")]
		public string varWSLearningStyle;

		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		public WORCForSkillsInitialAssessmentSummaryRecord() {
			varWSEnglishLevel = (string) "";
			varWSEnglishDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSMathsLevel = (string) "";
			varWSMathsDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSItLevel = (string) "";
			varWSITDate = (string) "";
			varWSESOLLevel = (string) "";
			varWSESOLDate = (string) "";
			varWSLearningStyle = (string) "";
			varWSStudentReference = (string) "";
		}

		public WORCForSkillsInitialAssessmentSummaryRecord(STForSkillsInitialAssessmentSummaryStructure r) {
			varWSEnglishLevel = BaseAppUtils.RemoveControlChars(r.ssEnglishLevel);
			varWSEnglishDate = (DateTime) r.ssEnglishDate;
			varWSMathsLevel = BaseAppUtils.RemoveControlChars(r.ssMathsLevel);
			varWSMathsDate = (DateTime) r.ssMathsDate;
			varWSItLevel = BaseAppUtils.RemoveControlChars(r.ssItLevel);
			varWSITDate = BaseAppUtils.RemoveControlChars(r.ssITDate);
			varWSESOLLevel = BaseAppUtils.RemoveControlChars(r.ssESOLLevel);
			varWSESOLDate = BaseAppUtils.RemoveControlChars(r.ssESOLDate);
			varWSLearningStyle = BaseAppUtils.RemoveControlChars(r.ssLearningStyle);
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
		}

		public static RLForSkillsInitialAssessmentSummaryList ToRecordList(WORCForSkillsInitialAssessmentSummaryRecord[] array) {
			RLForSkillsInitialAssessmentSummaryList rl = new RLForSkillsInitialAssessmentSummaryList();
			if (array != null) {
				foreach(WORCForSkillsInitialAssessmentSummaryRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCForSkillsInitialAssessmentSummaryRecord[] FromRecordList(RLForSkillsInitialAssessmentSummaryList rl) {
			WORCForSkillsInitialAssessmentSummaryRecord[] array = new WORCForSkillsInitialAssessmentSummaryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCForSkillsInitialAssessmentSummaryRecord {
		public static implicit operator WORCForSkillsInitialAssessmentSummaryRecord(RCForSkillsInitialAssessmentSummaryRecord r) {
			return new WORCForSkillsInitialAssessmentSummaryRecord(r.ssSTForSkillsInitialAssessmentSummary);
		}

		public static implicit operator RCForSkillsInitialAssessmentSummaryRecord(WORCForSkillsInitialAssessmentSummaryRecord w) {
			RCForSkillsInitialAssessmentSummaryRecord r = new RCForSkillsInitialAssessmentSummaryRecord("");
			if (w != null) {
				r.ssSTForSkillsInitialAssessmentSummary = w;
			}
			return r;
		}

	}

	partial struct STForSkillsInitialAssessmentSummaryStructure {
		public static implicit operator WORCForSkillsInitialAssessmentSummaryRecord(STForSkillsInitialAssessmentSummaryStructure r) {
			return new WORCForSkillsInitialAssessmentSummaryRecord(r);
		}

		public static implicit operator STForSkillsInitialAssessmentSummaryStructure(WORCForSkillsInitialAssessmentSummaryRecord w) {
			STForSkillsInitialAssessmentSummaryStructure r = new STForSkillsInitialAssessmentSummaryStructure("");
			if (w != null) {
				r.ssEnglishLevel = ((string) w.varWSEnglishLevel ?? "");
				r.ssEnglishDate = (DateTime) w.varWSEnglishDate;
				r.ssMathsLevel = ((string) w.varWSMathsLevel ?? "");
				r.ssMathsDate = (DateTime) w.varWSMathsDate;
				r.ssItLevel = ((string) w.varWSItLevel ?? "");
				r.ssITDate = ((string) w.varWSITDate ?? "");
				r.ssESOLLevel = ((string) w.varWSESOLLevel ?? "");
				r.ssESOLDate = ((string) w.varWSESOLDate ?? "");
				r.ssLearningStyle = ((string) w.varWSLearningStyle ?? "");
				r.ssStudentReference = ((string) w.varWSStudentReference ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLForSkillsInitialAssessmentSummaryRecordList {
		public WORCForSkillsInitialAssessmentSummaryRecord[] Array;


		public WORLForSkillsInitialAssessmentSummaryRecordList(WORCForSkillsInitialAssessmentSummaryRecord[] r) {
			if (r == null)
			Array = new WORCForSkillsInitialAssessmentSummaryRecord[0];
			else
			Array = r;
		}
		public WORLForSkillsInitialAssessmentSummaryRecordList() {
			Array = new WORCForSkillsInitialAssessmentSummaryRecord[0];
		}

		public WORLForSkillsInitialAssessmentSummaryRecordList(RLForSkillsInitialAssessmentSummaryRecordList rl) {
			rl=(RLForSkillsInitialAssessmentSummaryRecordList) rl.Duplicate();
			Array = new WORCForSkillsInitialAssessmentSummaryRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCForSkillsInitialAssessmentSummaryRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLForSkillsInitialAssessmentSummaryRecordList {
		public static implicit operator RLForSkillsInitialAssessmentSummaryRecordList(WORCForSkillsInitialAssessmentSummaryRecord[] array) {
			RLForSkillsInitialAssessmentSummaryRecordList rl = new RLForSkillsInitialAssessmentSummaryRecordList();
			if (array != null) {
				foreach(WORCForSkillsInitialAssessmentSummaryRecord val in array) {
					rl.Append((RCForSkillsInitialAssessmentSummaryRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCForSkillsInitialAssessmentSummaryRecord[](RLForSkillsInitialAssessmentSummaryRecordList rl) {
			WORCForSkillsInitialAssessmentSummaryRecord[] array = new WORCForSkillsInitialAssessmentSummaryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCForSkillsInitialAssessmentSummaryRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLForSkillsInitialAssessmentSummaryRecordList {
		public static implicit operator RLForSkillsInitialAssessmentSummaryRecordList(WORLForSkillsInitialAssessmentSummaryRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLForSkillsInitialAssessmentSummaryRecordList(RLForSkillsInitialAssessmentSummaryRecordList rl) {
			return new WORLForSkillsInitialAssessmentSummaryRecordList(rl);
		}
		public static implicit operator WORCForSkillsInitialAssessmentSummaryRecord[](WORLForSkillsInitialAssessmentSummaryRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLForSkillsInitialAssessmentSummaryRecordList(WORCForSkillsInitialAssessmentSummaryRecord[] array) {
			return new WORLForSkillsInitialAssessmentSummaryRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLForSkillsInitialAssessmentSummaryList {
		public WORCForSkillsInitialAssessmentSummaryRecord[] Array;


		public WORLForSkillsInitialAssessmentSummaryList(WORCForSkillsInitialAssessmentSummaryRecord[] r) {
			if (r == null)
			Array = new WORCForSkillsInitialAssessmentSummaryRecord[0];
			else
			Array = r;
		}
		public WORLForSkillsInitialAssessmentSummaryList() {
			Array = new WORCForSkillsInitialAssessmentSummaryRecord[0];
		}

		public WORLForSkillsInitialAssessmentSummaryList(RLForSkillsInitialAssessmentSummaryList rl) {
			rl=(RLForSkillsInitialAssessmentSummaryList) rl.Duplicate();
			Array = new WORCForSkillsInitialAssessmentSummaryRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLForSkillsInitialAssessmentSummaryList {
		public static implicit operator RLForSkillsInitialAssessmentSummaryList(WORCForSkillsInitialAssessmentSummaryRecord[] array) {
			RLForSkillsInitialAssessmentSummaryList rl = new RLForSkillsInitialAssessmentSummaryList();
			if (array != null) {
				foreach(WORCForSkillsInitialAssessmentSummaryRecord val in array) {
					rl.Append((STForSkillsInitialAssessmentSummaryStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCForSkillsInitialAssessmentSummaryRecord[](RLForSkillsInitialAssessmentSummaryList rl) {
			WORCForSkillsInitialAssessmentSummaryRecord[] array = new WORCForSkillsInitialAssessmentSummaryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STForSkillsInitialAssessmentSummaryStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLForSkillsInitialAssessmentSummaryList {
		public static implicit operator RLForSkillsInitialAssessmentSummaryList(WORLForSkillsInitialAssessmentSummaryList w) {
			return w.Array;
		}
		public static implicit operator WORLForSkillsInitialAssessmentSummaryList(RLForSkillsInitialAssessmentSummaryList rl) {
			return new WORLForSkillsInitialAssessmentSummaryList(rl);
		}
		public static implicit operator WORCForSkillsInitialAssessmentSummaryRecord[](WORLForSkillsInitialAssessmentSummaryList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLForSkillsInitialAssessmentSummaryList(WORCForSkillsInitialAssessmentSummaryRecord[] array) {
			return new WORLForSkillsInitialAssessmentSummaryList(array);
		}
	}
}

