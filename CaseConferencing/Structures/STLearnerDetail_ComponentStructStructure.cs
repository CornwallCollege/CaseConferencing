/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STLearnerDetail_ComponentStructStructure</code> that represents the Service Studio
	///  structure <code>LearnerDetail_ComponentStruct</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STLearnerDetail_ComponentStructStructure: ISerializable, ITypedRecord<STLearnerDetail_ComponentStructStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdComponentName = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*m_RA8vPiMEKMa4CR4aV1QQ");
		private static readonly GlobalObjectKey IdCompetenciesId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*kJ+KGhQNIU2fi6W51MPeyg");
		private static readonly GlobalObjectKey IdProcessCompetenciesId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*sBC9KqL3e0KOyOdZK3hxpA");
		private static readonly GlobalObjectKey IdStudentProcessId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*knKn3bnGZEysN4JGgi4B+g");
		private static readonly GlobalObjectKey IdCompetenciesLevel = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*wjuKwLCnXEudvXcj68qxRA");
		private static readonly GlobalObjectKey IdCompetenciesUpdateBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*IzpVsIejTkqjhLRLv05ZJA");
		private static readonly GlobalObjectKey IdCompetenciesUpdateOn = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*SqQTSHRwYkaNwIL1m4Dgqg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ComponentName")]
		public string ssComponentName;

		[System.Xml.Serialization.XmlElement("CompetenciesId")]
		public string ssCompetenciesId;

		[System.Xml.Serialization.XmlElement("ProcessCompetenciesId")]
		public int ssProcessCompetenciesId;

		[System.Xml.Serialization.XmlElement("StudentProcessId")]
		public int ssStudentProcessId;

		[System.Xml.Serialization.XmlElement("CompetenciesLevel")]
		public int ssCompetenciesLevel;

		[System.Xml.Serialization.XmlElement("CompetenciesUpdateBy")]
		public string ssCompetenciesUpdateBy;

		[System.Xml.Serialization.XmlElement("CompetenciesUpdateOn")]
		public DateTime ssCompetenciesUpdateOn;


		public BitArray OptimizedAttributes;

		public STLearnerDetail_ComponentStructStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssComponentName = "";
			ssCompetenciesId = "";
			ssProcessCompetenciesId = 0;
			ssStudentProcessId = 0;
			ssCompetenciesLevel = 0;
			ssCompetenciesUpdateBy = "";
			ssCompetenciesUpdateOn = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssComponentName = r.ReadText(index++, "LearnerDetail_ComponentStruct.ComponentName", "");
			ssCompetenciesId = r.ReadTextEntityReference(index++, "LearnerDetail_ComponentStruct.CompetenciesId", "");
			ssProcessCompetenciesId = r.ReadEntityReference(index++, "LearnerDetail_ComponentStruct.ProcessCompetenciesId", 0);
			ssStudentProcessId = r.ReadEntityReference(index++, "LearnerDetail_ComponentStruct.StudentProcessId", 0);
			ssCompetenciesLevel = r.ReadInteger(index++, "LearnerDetail_ComponentStruct.CompetenciesLevel", 0);
			ssCompetenciesUpdateBy = r.ReadText(index++, "LearnerDetail_ComponentStruct.CompetenciesUpdateBy", "");
			ssCompetenciesUpdateOn = r.ReadDateTime(index++, "LearnerDetail_ComponentStruct.CompetenciesUpdateOn", new DateTime(1900, 1, 1, 0, 0, 0));
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STLearnerDetail_ComponentStructStructure r) {
			this = r;
		}


		public static bool operator == (STLearnerDetail_ComponentStructStructure a, STLearnerDetail_ComponentStructStructure b) {
			if (a.ssComponentName != b.ssComponentName) return false;
			if (a.ssCompetenciesId != b.ssCompetenciesId) return false;
			if (a.ssProcessCompetenciesId != b.ssProcessCompetenciesId) return false;
			if (a.ssStudentProcessId != b.ssStudentProcessId) return false;
			if (a.ssCompetenciesLevel != b.ssCompetenciesLevel) return false;
			if (a.ssCompetenciesUpdateBy != b.ssCompetenciesUpdateBy) return false;
			if (a.ssCompetenciesUpdateOn != b.ssCompetenciesUpdateOn) return false;
			return true;
		}

		public static bool operator != (STLearnerDetail_ComponentStructStructure a, STLearnerDetail_ComponentStructStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STLearnerDetail_ComponentStructStructure)) return false;
			return (this == (STLearnerDetail_ComponentStructStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssComponentName.GetHashCode()
				^ ssCompetenciesId.GetHashCode()
				^ ssProcessCompetenciesId.GetHashCode()
				^ ssStudentProcessId.GetHashCode()
				^ ssCompetenciesLevel.GetHashCode()
				^ ssCompetenciesUpdateBy.GetHashCode()
				^ ssCompetenciesUpdateOn.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STLearnerDetail_ComponentStructStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssComponentName = "";
			ssCompetenciesId = "";
			ssProcessCompetenciesId = 0;
			ssStudentProcessId = 0;
			ssCompetenciesLevel = 0;
			ssCompetenciesUpdateBy = "";
			ssCompetenciesUpdateOn = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssComponentName = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssCompetenciesId = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssProcessCompetenciesId = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssStudentProcessId = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssCompetenciesLevel = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssCompetenciesUpdateBy = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssCompetenciesUpdateOn = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STLearnerDetail_ComponentStructStructure Duplicate() {
			STLearnerDetail_ComponentStructStructure t;
			t.ssComponentName = this.ssComponentName;
			t.ssCompetenciesId = this.ssCompetenciesId;
			t.ssProcessCompetenciesId = this.ssProcessCompetenciesId;
			t.ssStudentProcessId = this.ssStudentProcessId;
			t.ssCompetenciesLevel = this.ssCompetenciesLevel;
			t.ssCompetenciesUpdateBy = this.ssCompetenciesUpdateBy;
			t.ssCompetenciesUpdateOn = this.ssCompetenciesUpdateOn;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ComponentName")) VarValue.AppendAttribute(recordElem, "ComponentName", ssComponentName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ComponentName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompetenciesId")) VarValue.AppendAttribute(recordElem, "CompetenciesId", ssCompetenciesId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CompetenciesId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProcessCompetenciesId")) VarValue.AppendAttribute(recordElem, "ProcessCompetenciesId", ssProcessCompetenciesId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ProcessCompetenciesId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentProcessId")) VarValue.AppendAttribute(recordElem, "StudentProcessId", ssStudentProcessId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentProcessId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompetenciesLevel")) VarValue.AppendAttribute(recordElem, "CompetenciesLevel", ssCompetenciesLevel, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CompetenciesLevel");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompetenciesUpdateBy")) VarValue.AppendAttribute(recordElem, "CompetenciesUpdateBy", ssCompetenciesUpdateBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CompetenciesUpdateBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompetenciesUpdateOn")) VarValue.AppendAttribute(recordElem, "CompetenciesUpdateOn", ssCompetenciesUpdateOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CompetenciesUpdateOn");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "componentname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ComponentName")) variable.Value = ssComponentName; else variable.Optimized = true;
			} else if (head == "competenciesid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompetenciesId")) variable.Value = ssCompetenciesId; else variable.Optimized = true;
			} else if (head == "processcompetenciesid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProcessCompetenciesId")) variable.Value = ssProcessCompetenciesId; else variable.Optimized = true;
			} else if (head == "studentprocessid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentProcessId")) variable.Value = ssStudentProcessId; else variable.Optimized = true;
			} else if (head == "competencieslevel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompetenciesLevel")) variable.Value = ssCompetenciesLevel; else variable.Optimized = true;
			} else if (head == "competenciesupdateby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompetenciesUpdateBy")) variable.Value = ssCompetenciesUpdateBy; else variable.Optimized = true;
			} else if (head == "competenciesupdateon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompetenciesUpdateOn")) variable.Value = ssCompetenciesUpdateOn; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdComponentName) {
				return ssComponentName;
			} else if (key == IdCompetenciesId) {
				return ssCompetenciesId;
			} else if (key == IdProcessCompetenciesId) {
				return ssProcessCompetenciesId;
			} else if (key == IdStudentProcessId) {
				return ssStudentProcessId;
			} else if (key == IdCompetenciesLevel) {
				return ssCompetenciesLevel;
			} else if (key == IdCompetenciesUpdateBy) {
				return ssCompetenciesUpdateBy;
			} else if (key == IdCompetenciesUpdateOn) {
				return ssCompetenciesUpdateOn;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssComponentName = (string) other.AttributeGet(IdComponentName);
			ssCompetenciesId = (string) other.AttributeGet(IdCompetenciesId);
			ssProcessCompetenciesId = (int) other.AttributeGet(IdProcessCompetenciesId);
			ssStudentProcessId = (int) other.AttributeGet(IdStudentProcessId);
			ssCompetenciesLevel = (int) other.AttributeGet(IdCompetenciesLevel);
			ssCompetenciesUpdateBy = (string) other.AttributeGet(IdCompetenciesUpdateBy);
			ssCompetenciesUpdateOn = (DateTime) other.AttributeGet(IdCompetenciesUpdateOn);
		}
	} // STLearnerDetail_ComponentStructStructure
	/// <summary>
	/// Structure <code>RCLearnerDetail_ComponentStructRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCLearnerDetail_ComponentStructRecord: ISerializable, ITypedRecord<RCLearnerDetail_ComponentStructRecord> {
		private static readonly GlobalObjectKey IdLearnerDetail_ComponentStruct = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*dQ295RVB9xIG3J5DsAek2Q");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("LearnerDetail_ComponentStruct")]
		public STLearnerDetail_ComponentStructStructure ssSTLearnerDetail_ComponentStruct;


		public static implicit operator STLearnerDetail_ComponentStructStructure(RCLearnerDetail_ComponentStructRecord r) {
			return r.ssSTLearnerDetail_ComponentStruct;
		}

		public static implicit operator RCLearnerDetail_ComponentStructRecord(STLearnerDetail_ComponentStructStructure r) {
			RCLearnerDetail_ComponentStructRecord res = new RCLearnerDetail_ComponentStructRecord(null);
			res.ssSTLearnerDetail_ComponentStruct = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCLearnerDetail_ComponentStructRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTLearnerDetail_ComponentStruct = new STLearnerDetail_ComponentStructStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTLearnerDetail_ComponentStruct.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTLearnerDetail_ComponentStruct.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCLearnerDetail_ComponentStructRecord r) {
			this = r;
		}


		public static bool operator == (RCLearnerDetail_ComponentStructRecord a, RCLearnerDetail_ComponentStructRecord b) {
			if (a.ssSTLearnerDetail_ComponentStruct != b.ssSTLearnerDetail_ComponentStruct) return false;
			return true;
		}

		public static bool operator != (RCLearnerDetail_ComponentStructRecord a, RCLearnerDetail_ComponentStructRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCLearnerDetail_ComponentStructRecord)) return false;
			return (this == (RCLearnerDetail_ComponentStructRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTLearnerDetail_ComponentStruct.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCLearnerDetail_ComponentStructRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTLearnerDetail_ComponentStruct = new STLearnerDetail_ComponentStructStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTLearnerDetail_ComponentStruct = (STLearnerDetail_ComponentStructStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTLearnerDetail_ComponentStruct.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTLearnerDetail_ComponentStruct.InternalRecursiveSave();
		}


		public RCLearnerDetail_ComponentStructRecord Duplicate() {
			RCLearnerDetail_ComponentStructRecord t;
			t.ssSTLearnerDetail_ComponentStruct = (STLearnerDetail_ComponentStructStructure) this.ssSTLearnerDetail_ComponentStruct.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTLearnerDetail_ComponentStruct.ToXml(this, recordElem, "LearnerDetail_ComponentStruct", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "learnerdetail_componentstruct") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearnerDetail_ComponentStruct")) variable.Value = ssSTLearnerDetail_ComponentStruct; else variable.Optimized = true;
				variable.SetFieldName("learnerdetail_componentstruct");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLearnerDetail_ComponentStruct) {
				return ssSTLearnerDetail_ComponentStruct;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTLearnerDetail_ComponentStruct.FillFromOther((IRecord) other.AttributeGet(IdLearnerDetail_ComponentStruct));
		}
	} // RCLearnerDetail_ComponentStructRecord
	/// <summary>
	/// RecordList type <code>RLLearnerDetail_ComponentStructRecordList</code> that represents a record
	///  list of <code>LearnerDetail_ComponentStruct</code>
	/// </summary>
	[Serializable()]
	public partial class RLLearnerDetail_ComponentStructRecordList: GenericRecordList<RCLearnerDetail_ComponentStructRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCLearnerDetail_ComponentStructRecord GetElementDefaultValue() {
			return new RCLearnerDetail_ComponentStructRecord("");
		}

		public T[] ToArray<T>(Func<RCLearnerDetail_ComponentStructRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLLearnerDetail_ComponentStructRecordList recordlist, Func<RCLearnerDetail_ComponentStructRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLLearnerDetail_ComponentStructRecordList ToList<T>(T[] array, Func <T, RCLearnerDetail_ComponentStructRecord> converter) {
			RLLearnerDetail_ComponentStructRecordList result = new RLLearnerDetail_ComponentStructRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLLearnerDetail_ComponentStructRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearnerDetail_ComponentStructRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearnerDetail_ComponentStructRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLLearnerDetail_ComponentStructRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCLearnerDetail_ComponentStructRecord> NewList() {
			return new RLLearnerDetail_ComponentStructRecordList();
		}


	} // RLLearnerDetail_ComponentStructRecordList
	/// <summary>
	/// RecordList type <code>RLLearnerDetail_ComponentStructList</code> that represents a record list of
	///  <code>Text, Text, DateTime, Integer, MLWCompetenciesIdentifier
	/// , StudentMLWProcessCompetenciesIdentifier, StudentMLWProcessIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLLearnerDetail_ComponentStructList: GenericRecordList<STLearnerDetail_ComponentStructStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STLearnerDetail_ComponentStructStructure GetElementDefaultValue() {
			return new STLearnerDetail_ComponentStructStructure("");
		}

		public T[] ToArray<T>(Func<STLearnerDetail_ComponentStructStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLLearnerDetail_ComponentStructList recordlist, Func<STLearnerDetail_ComponentStructStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLLearnerDetail_ComponentStructList ToList<T>(T[] array, Func <T, STLearnerDetail_ComponentStructStructure> converter) {
			RLLearnerDetail_ComponentStructList result = new RLLearnerDetail_ComponentStructList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLLearnerDetail_ComponentStructList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearnerDetail_ComponentStructList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearnerDetail_ComponentStructList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLLearnerDetail_ComponentStructList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STLearnerDetail_ComponentStructStructure> NewList() {
			return new RLLearnerDetail_ComponentStructList();
		}


	} // RLLearnerDetail_ComponentStructList
}

namespace ssCaseConferencing {
	[XmlType("LearnerDetail_ComponentStruct")]
	public class WORCLearnerDetail_ComponentStructRecord {
		[System.Xml.Serialization.XmlElement("ComponentName")]
		public string varWSComponentName;

		[System.Xml.Serialization.XmlElement("CompetenciesId")]
		public string varWSCompetenciesId;

		[System.Xml.Serialization.XmlElement("ProcessCompetenciesId")]
		public int varWSProcessCompetenciesId;

		[System.Xml.Serialization.XmlElement("StudentProcessId")]
		public int varWSStudentProcessId;

		[System.Xml.Serialization.XmlElement("CompetenciesLevel")]
		public int varWSCompetenciesLevel;

		[System.Xml.Serialization.XmlElement("CompetenciesUpdateBy")]
		public string varWSCompetenciesUpdateBy;

		[System.Xml.Serialization.XmlElement("CompetenciesUpdateOn")]
		public DateTime varWSCompetenciesUpdateOn;

		public WORCLearnerDetail_ComponentStructRecord() {
			varWSComponentName = (string) "";
			varWSCompetenciesId = (string) "";
			varWSProcessCompetenciesId = (int) 0;
			varWSStudentProcessId = (int) 0;
			varWSCompetenciesLevel = (int) 0;
			varWSCompetenciesUpdateBy = (string) "";
			varWSCompetenciesUpdateOn = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCLearnerDetail_ComponentStructRecord(STLearnerDetail_ComponentStructStructure r) {
			varWSComponentName = BaseAppUtils.RemoveControlChars(r.ssComponentName);
			varWSCompetenciesId = BaseAppUtils.RemoveControlChars(r.ssCompetenciesId);
			varWSProcessCompetenciesId = (int) r.ssProcessCompetenciesId;
			varWSStudentProcessId = (int) r.ssStudentProcessId;
			varWSCompetenciesLevel = (int) r.ssCompetenciesLevel;
			varWSCompetenciesUpdateBy = BaseAppUtils.RemoveControlChars(r.ssCompetenciesUpdateBy);
			varWSCompetenciesUpdateOn = (DateTime) r.ssCompetenciesUpdateOn;
		}

		public static RLLearnerDetail_ComponentStructList ToRecordList(WORCLearnerDetail_ComponentStructRecord[] array) {
			RLLearnerDetail_ComponentStructList rl = new RLLearnerDetail_ComponentStructList();
			if (array != null) {
				foreach(WORCLearnerDetail_ComponentStructRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCLearnerDetail_ComponentStructRecord[] FromRecordList(RLLearnerDetail_ComponentStructList rl) {
			WORCLearnerDetail_ComponentStructRecord[] array = new WORCLearnerDetail_ComponentStructRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCLearnerDetail_ComponentStructRecord {
		public static implicit operator WORCLearnerDetail_ComponentStructRecord(RCLearnerDetail_ComponentStructRecord r) {
			return new WORCLearnerDetail_ComponentStructRecord(r.ssSTLearnerDetail_ComponentStruct);
		}

		public static implicit operator RCLearnerDetail_ComponentStructRecord(WORCLearnerDetail_ComponentStructRecord w) {
			RCLearnerDetail_ComponentStructRecord r = new RCLearnerDetail_ComponentStructRecord("");
			if (w != null) {
				r.ssSTLearnerDetail_ComponentStruct = w;
			}
			return r;
		}

	}

	partial struct STLearnerDetail_ComponentStructStructure {
		public static implicit operator WORCLearnerDetail_ComponentStructRecord(STLearnerDetail_ComponentStructStructure r) {
			return new WORCLearnerDetail_ComponentStructRecord(r);
		}

		public static implicit operator STLearnerDetail_ComponentStructStructure(WORCLearnerDetail_ComponentStructRecord w) {
			STLearnerDetail_ComponentStructStructure r = new STLearnerDetail_ComponentStructStructure("");
			if (w != null) {
				r.ssComponentName = ((string) w.varWSComponentName ?? "");
				r.ssCompetenciesId = (string) w.varWSCompetenciesId;
				r.ssProcessCompetenciesId = (int) w.varWSProcessCompetenciesId;
				r.ssStudentProcessId = (int) w.varWSStudentProcessId;
				r.ssCompetenciesLevel = (int) w.varWSCompetenciesLevel;
				r.ssCompetenciesUpdateBy = ((string) w.varWSCompetenciesUpdateBy ?? "");
				r.ssCompetenciesUpdateOn = (DateTime) w.varWSCompetenciesUpdateOn;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLLearnerDetail_ComponentStructRecordList {
		public WORCLearnerDetail_ComponentStructRecord[] Array;


		public WORLLearnerDetail_ComponentStructRecordList(WORCLearnerDetail_ComponentStructRecord[] r) {
			if (r == null)
			Array = new WORCLearnerDetail_ComponentStructRecord[0];
			else
			Array = r;
		}
		public WORLLearnerDetail_ComponentStructRecordList() {
			Array = new WORCLearnerDetail_ComponentStructRecord[0];
		}

		public WORLLearnerDetail_ComponentStructRecordList(RLLearnerDetail_ComponentStructRecordList rl) {
			rl=(RLLearnerDetail_ComponentStructRecordList) rl.Duplicate();
			Array = new WORCLearnerDetail_ComponentStructRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCLearnerDetail_ComponentStructRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLLearnerDetail_ComponentStructRecordList {
		public static implicit operator RLLearnerDetail_ComponentStructRecordList(WORCLearnerDetail_ComponentStructRecord[] array) {
			RLLearnerDetail_ComponentStructRecordList rl = new RLLearnerDetail_ComponentStructRecordList();
			if (array != null) {
				foreach(WORCLearnerDetail_ComponentStructRecord val in array) {
					rl.Append((RCLearnerDetail_ComponentStructRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCLearnerDetail_ComponentStructRecord[](RLLearnerDetail_ComponentStructRecordList rl) {
			WORCLearnerDetail_ComponentStructRecord[] array = new WORCLearnerDetail_ComponentStructRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCLearnerDetail_ComponentStructRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLLearnerDetail_ComponentStructRecordList {
		public static implicit operator RLLearnerDetail_ComponentStructRecordList(WORLLearnerDetail_ComponentStructRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLLearnerDetail_ComponentStructRecordList(RLLearnerDetail_ComponentStructRecordList rl) {
			return new WORLLearnerDetail_ComponentStructRecordList(rl);
		}
		public static implicit operator WORCLearnerDetail_ComponentStructRecord[](WORLLearnerDetail_ComponentStructRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLLearnerDetail_ComponentStructRecordList(WORCLearnerDetail_ComponentStructRecord[] array) {
			return new WORLLearnerDetail_ComponentStructRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLLearnerDetail_ComponentStructList {
		public WORCLearnerDetail_ComponentStructRecord[] Array;


		public WORLLearnerDetail_ComponentStructList(WORCLearnerDetail_ComponentStructRecord[] r) {
			if (r == null)
			Array = new WORCLearnerDetail_ComponentStructRecord[0];
			else
			Array = r;
		}
		public WORLLearnerDetail_ComponentStructList() {
			Array = new WORCLearnerDetail_ComponentStructRecord[0];
		}

		public WORLLearnerDetail_ComponentStructList(RLLearnerDetail_ComponentStructList rl) {
			rl=(RLLearnerDetail_ComponentStructList) rl.Duplicate();
			Array = new WORCLearnerDetail_ComponentStructRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLLearnerDetail_ComponentStructList {
		public static implicit operator RLLearnerDetail_ComponentStructList(WORCLearnerDetail_ComponentStructRecord[] array) {
			RLLearnerDetail_ComponentStructList rl = new RLLearnerDetail_ComponentStructList();
			if (array != null) {
				foreach(WORCLearnerDetail_ComponentStructRecord val in array) {
					rl.Append((STLearnerDetail_ComponentStructStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCLearnerDetail_ComponentStructRecord[](RLLearnerDetail_ComponentStructList rl) {
			WORCLearnerDetail_ComponentStructRecord[] array = new WORCLearnerDetail_ComponentStructRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STLearnerDetail_ComponentStructStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLLearnerDetail_ComponentStructList {
		public static implicit operator RLLearnerDetail_ComponentStructList(WORLLearnerDetail_ComponentStructList w) {
			return w.Array;
		}
		public static implicit operator WORLLearnerDetail_ComponentStructList(RLLearnerDetail_ComponentStructList rl) {
			return new WORLLearnerDetail_ComponentStructList(rl);
		}
		public static implicit operator WORCLearnerDetail_ComponentStructRecord[](WORLLearnerDetail_ComponentStructList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLLearnerDetail_ComponentStructList(WORCLearnerDetail_ComponentStructRecord[] array) {
			return new WORLLearnerDetail_ComponentStructList(array);
		}
	}
}

