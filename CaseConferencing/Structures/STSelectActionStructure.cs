/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STSelectActionStructure</code> that represents the Service Studio structure
	///  <code>SelectAction</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSelectActionStructure: ISerializable, ITypedRecord<STSelectActionStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdSelectAction = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ko9mW6tT70ispKz2+OiYFw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SelectAction")]
		public string ssSelectAction;


		public BitArray OptimizedAttributes;

		public STSelectActionStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssSelectAction = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSelectAction = r.ReadText(index++, "SelectAction.SelectAction", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSelectActionStructure r) {
			this = r;
		}


		public static bool operator == (STSelectActionStructure a, STSelectActionStructure b) {
			if (a.ssSelectAction != b.ssSelectAction) return false;
			return true;
		}

		public static bool operator != (STSelectActionStructure a, STSelectActionStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSelectActionStructure)) return false;
			return (this == (STSelectActionStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSelectAction.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSelectActionStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSelectAction = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSelectAction = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STSelectActionStructure Duplicate() {
			STSelectActionStructure t;
			t.ssSelectAction = this.ssSelectAction;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SelectAction")) VarValue.AppendAttribute(recordElem, "SelectAction", ssSelectAction, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SelectAction");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "selectaction") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SelectAction")) variable.Value = ssSelectAction; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSelectAction) {
				return ssSelectAction;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSelectAction = (string) other.AttributeGet(IdSelectAction);
		}
	} // STSelectActionStructure
	/// <summary>
	/// Structure <code>RCSelectActionRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSelectActionRecord: ISerializable, ITypedRecord<RCSelectActionRecord> {
		private static readonly GlobalObjectKey IdSelectAction = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*z8X7z66tTmSEgc8sS62VzA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SelectAction")]
		public STSelectActionStructure ssSTSelectAction;


		public static implicit operator STSelectActionStructure(RCSelectActionRecord r) {
			return r.ssSTSelectAction;
		}

		public static implicit operator RCSelectActionRecord(STSelectActionStructure r) {
			RCSelectActionRecord res = new RCSelectActionRecord(null);
			res.ssSTSelectAction = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCSelectActionRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTSelectAction = new STSelectActionStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTSelectAction.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTSelectAction.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSelectActionRecord r) {
			this = r;
		}


		public static bool operator == (RCSelectActionRecord a, RCSelectActionRecord b) {
			if (a.ssSTSelectAction != b.ssSTSelectAction) return false;
			return true;
		}

		public static bool operator != (RCSelectActionRecord a, RCSelectActionRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSelectActionRecord)) return false;
			return (this == (RCSelectActionRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTSelectAction.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSelectActionRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTSelectAction = new STSelectActionStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTSelectAction = (STSelectActionStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTSelectAction.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTSelectAction.InternalRecursiveSave();
		}


		public RCSelectActionRecord Duplicate() {
			RCSelectActionRecord t;
			t.ssSTSelectAction = (STSelectActionStructure) this.ssSTSelectAction.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTSelectAction.ToXml(this, recordElem, "SelectAction", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "selectaction") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SelectAction")) variable.Value = ssSTSelectAction; else variable.Optimized = true;
				variable.SetFieldName("selectaction");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSelectAction) {
				return ssSTSelectAction;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTSelectAction.FillFromOther((IRecord) other.AttributeGet(IdSelectAction));
		}
	} // RCSelectActionRecord
	/// <summary>
	/// RecordList type <code>RLSelectActionRecordList</code> that represents a record list of
	///  <code>SelectAction</code>
	/// </summary>
	[Serializable()]
	public partial class RLSelectActionRecordList: GenericRecordList<RCSelectActionRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSelectActionRecord GetElementDefaultValue() {
			return new RCSelectActionRecord("");
		}

		public T[] ToArray<T>(Func<RCSelectActionRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSelectActionRecordList recordlist, Func<RCSelectActionRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSelectActionRecordList ToList<T>(T[] array, Func <T, RCSelectActionRecord> converter) {
			RLSelectActionRecordList result = new RLSelectActionRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSelectActionRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSelectActionRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSelectActionRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSelectActionRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSelectActionRecord> NewList() {
			return new RLSelectActionRecordList();
		}


	} // RLSelectActionRecordList
	/// <summary>
	/// RecordList type <code>RLSelectActionList</code> that represents a record list of <code>Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLSelectActionList: GenericRecordList<STSelectActionStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STSelectActionStructure GetElementDefaultValue() {
			return new STSelectActionStructure("");
		}

		public T[] ToArray<T>(Func<STSelectActionStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSelectActionList recordlist, Func<STSelectActionStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSelectActionList ToList<T>(T[] array, Func <T, STSelectActionStructure> converter) {
			RLSelectActionList result = new RLSelectActionList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSelectActionList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSelectActionList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSelectActionList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSelectActionList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STSelectActionStructure> NewList() {
			return new RLSelectActionList();
		}


	} // RLSelectActionList
}

namespace ssCaseConferencing {
	[XmlType("SelectAction")]
	public class WORCSelectActionRecord {
		[System.Xml.Serialization.XmlElement("SelectAction")]
		public string varWSSelectAction;

		public WORCSelectActionRecord() {
			varWSSelectAction = (string) "";
		}

		public WORCSelectActionRecord(STSelectActionStructure r) {
			varWSSelectAction = BaseAppUtils.RemoveControlChars(r.ssSelectAction);
		}

		public static RLSelectActionList ToRecordList(WORCSelectActionRecord[] array) {
			RLSelectActionList rl = new RLSelectActionList();
			if (array != null) {
				foreach(WORCSelectActionRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSelectActionRecord[] FromRecordList(RLSelectActionList rl) {
			WORCSelectActionRecord[] array = new WORCSelectActionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCSelectActionRecord {
		public static implicit operator WORCSelectActionRecord(RCSelectActionRecord r) {
			return new WORCSelectActionRecord(r.ssSTSelectAction);
		}

		public static implicit operator RCSelectActionRecord(WORCSelectActionRecord w) {
			RCSelectActionRecord r = new RCSelectActionRecord("");
			if (w != null) {
				r.ssSTSelectAction = w;
			}
			return r;
		}

	}

	partial struct STSelectActionStructure {
		public static implicit operator WORCSelectActionRecord(STSelectActionStructure r) {
			return new WORCSelectActionRecord(r);
		}

		public static implicit operator STSelectActionStructure(WORCSelectActionRecord w) {
			STSelectActionStructure r = new STSelectActionStructure("");
			if (w != null) {
				r.ssSelectAction = ((string) w.varWSSelectAction ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSelectActionRecordList {
		public WORCSelectActionRecord[] Array;


		public WORLSelectActionRecordList(WORCSelectActionRecord[] r) {
			if (r == null)
			Array = new WORCSelectActionRecord[0];
			else
			Array = r;
		}
		public WORLSelectActionRecordList() {
			Array = new WORCSelectActionRecord[0];
		}

		public WORLSelectActionRecordList(RLSelectActionRecordList rl) {
			rl=(RLSelectActionRecordList) rl.Duplicate();
			Array = new WORCSelectActionRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSelectActionRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSelectActionRecordList {
		public static implicit operator RLSelectActionRecordList(WORCSelectActionRecord[] array) {
			RLSelectActionRecordList rl = new RLSelectActionRecordList();
			if (array != null) {
				foreach(WORCSelectActionRecord val in array) {
					rl.Append((RCSelectActionRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSelectActionRecord[](RLSelectActionRecordList rl) {
			WORCSelectActionRecord[] array = new WORCSelectActionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSelectActionRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSelectActionRecordList {
		public static implicit operator RLSelectActionRecordList(WORLSelectActionRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSelectActionRecordList(RLSelectActionRecordList rl) {
			return new WORLSelectActionRecordList(rl);
		}
		public static implicit operator WORCSelectActionRecord[](WORLSelectActionRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSelectActionRecordList(WORCSelectActionRecord[] array) {
			return new WORLSelectActionRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLSelectActionList {
		public WORCSelectActionRecord[] Array;


		public WORLSelectActionList(WORCSelectActionRecord[] r) {
			if (r == null)
			Array = new WORCSelectActionRecord[0];
			else
			Array = r;
		}
		public WORLSelectActionList() {
			Array = new WORCSelectActionRecord[0];
		}

		public WORLSelectActionList(RLSelectActionList rl) {
			rl=(RLSelectActionList) rl.Duplicate();
			Array = new WORCSelectActionRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLSelectActionList {
		public static implicit operator RLSelectActionList(WORCSelectActionRecord[] array) {
			RLSelectActionList rl = new RLSelectActionList();
			if (array != null) {
				foreach(WORCSelectActionRecord val in array) {
					rl.Append((STSelectActionStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSelectActionRecord[](RLSelectActionList rl) {
			WORCSelectActionRecord[] array = new WORCSelectActionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STSelectActionStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLSelectActionList {
		public static implicit operator RLSelectActionList(WORLSelectActionList w) {
			return w.Array;
		}
		public static implicit operator WORLSelectActionList(RLSelectActionList rl) {
			return new WORLSelectActionList(rl);
		}
		public static implicit operator WORCSelectActionRecord[](WORLSelectActionList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSelectActionList(WORCSelectActionRecord[] array) {
			return new WORLSelectActionList(array);
		}
	}
}

