/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STLearnerCategoryMenuStructure</code> that represents the Service Studio structure
	///  <code>LearnerCategoryMenu</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STLearnerCategoryMenuStructure: ISerializable, ITypedRecord<STLearnerCategoryMenuStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdCategoryId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*aev+s4uqPk++HG3JlSjkFA");
		private static readonly GlobalObjectKey IdOfferingName = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*FtexQrmks0+MKwT0CyuunQ");
		private static readonly GlobalObjectKey IdOfferingCode = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ThB1ngXeDUudbBM73cRSBA");
		private static readonly GlobalObjectKey IdCompletedUnits = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*vE9lAqKfy0qpGdzu6f9usg");
		private static readonly GlobalObjectKey IdTotalUnits = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*RkVSm_KcM0OEAu_sp4fazg");
		private static readonly GlobalObjectKey IdCompletedTargets = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*fVDR6oYQOkWNeChY6xYEtQ");
		private static readonly GlobalObjectKey IdTotalTargets = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*jL16xOyLAkGlsKc7mdylxw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("CategoryId")]
		public int ssCategoryId;

		[System.Xml.Serialization.XmlElement("OfferingName")]
		public string ssOfferingName;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string ssOfferingCode;

		[System.Xml.Serialization.XmlElement("CompletedUnits")]
		public int ssCompletedUnits;

		[System.Xml.Serialization.XmlElement("TotalUnits")]
		public int ssTotalUnits;

		[System.Xml.Serialization.XmlElement("CompletedTargets")]
		public int ssCompletedTargets;

		[System.Xml.Serialization.XmlElement("TotalTargets")]
		public int ssTotalTargets;


		public BitArray OptimizedAttributes;

		public STLearnerCategoryMenuStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssCategoryId = 0;
			ssOfferingName = "";
			ssOfferingCode = "";
			ssCompletedUnits = 0;
			ssTotalUnits = 0;
			ssCompletedTargets = 0;
			ssTotalTargets = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssCategoryId = r.ReadEntityReference(index++, "LearnerCategoryMenu.CategoryId", 0);
			ssOfferingName = r.ReadText(index++, "LearnerCategoryMenu.OfferingName", "");
			ssOfferingCode = r.ReadText(index++, "LearnerCategoryMenu.OfferingCode", "");
			ssCompletedUnits = r.ReadInteger(index++, "LearnerCategoryMenu.CompletedUnits", 0);
			ssTotalUnits = r.ReadInteger(index++, "LearnerCategoryMenu.TotalUnits", 0);
			ssCompletedTargets = r.ReadInteger(index++, "LearnerCategoryMenu.CompletedTargets", 0);
			ssTotalTargets = r.ReadInteger(index++, "LearnerCategoryMenu.TotalTargets", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STLearnerCategoryMenuStructure r) {
			this = r;
		}


		public static bool operator == (STLearnerCategoryMenuStructure a, STLearnerCategoryMenuStructure b) {
			if (a.ssCategoryId != b.ssCategoryId) return false;
			if (a.ssOfferingName != b.ssOfferingName) return false;
			if (a.ssOfferingCode != b.ssOfferingCode) return false;
			if (a.ssCompletedUnits != b.ssCompletedUnits) return false;
			if (a.ssTotalUnits != b.ssTotalUnits) return false;
			if (a.ssCompletedTargets != b.ssCompletedTargets) return false;
			if (a.ssTotalTargets != b.ssTotalTargets) return false;
			return true;
		}

		public static bool operator != (STLearnerCategoryMenuStructure a, STLearnerCategoryMenuStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STLearnerCategoryMenuStructure)) return false;
			return (this == (STLearnerCategoryMenuStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssCategoryId.GetHashCode()
				^ ssOfferingName.GetHashCode()
				^ ssOfferingCode.GetHashCode()
				^ ssCompletedUnits.GetHashCode()
				^ ssTotalUnits.GetHashCode()
				^ ssCompletedTargets.GetHashCode()
				^ ssTotalTargets.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STLearnerCategoryMenuStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssCategoryId = 0;
			ssOfferingName = "";
			ssOfferingCode = "";
			ssCompletedUnits = 0;
			ssTotalUnits = 0;
			ssCompletedTargets = 0;
			ssTotalTargets = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssCategoryId = (int) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssOfferingName = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssOfferingCode = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssCompletedUnits = (int) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssTotalUnits = (int) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssCompletedTargets = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssTotalTargets = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STLearnerCategoryMenuStructure Duplicate() {
			STLearnerCategoryMenuStructure t;
			t.ssCategoryId = this.ssCategoryId;
			t.ssOfferingName = this.ssOfferingName;
			t.ssOfferingCode = this.ssOfferingCode;
			t.ssCompletedUnits = this.ssCompletedUnits;
			t.ssTotalUnits = this.ssTotalUnits;
			t.ssCompletedTargets = this.ssCompletedTargets;
			t.ssTotalTargets = this.ssTotalTargets;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CategoryId")) VarValue.AppendAttribute(recordElem, "CategoryId", ssCategoryId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CategoryId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingName")) VarValue.AppendAttribute(recordElem, "OfferingName", ssOfferingName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCode")) VarValue.AppendAttribute(recordElem, "OfferingCode", ssOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletedUnits")) VarValue.AppendAttribute(recordElem, "CompletedUnits", ssCompletedUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CompletedUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TotalUnits")) VarValue.AppendAttribute(recordElem, "TotalUnits", ssTotalUnits, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "TotalUnits");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompletedTargets")) VarValue.AppendAttribute(recordElem, "CompletedTargets", ssCompletedTargets, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CompletedTargets");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TotalTargets")) VarValue.AppendAttribute(recordElem, "TotalTargets", ssTotalTargets, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "TotalTargets");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "categoryid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CategoryId")) variable.Value = ssCategoryId; else variable.Optimized = true;
			} else if (head == "offeringname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingName")) variable.Value = ssOfferingName; else variable.Optimized = true;
			} else if (head == "offeringcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCode")) variable.Value = ssOfferingCode; else variable.Optimized = true;
			} else if (head == "completedunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletedUnits")) variable.Value = ssCompletedUnits; else variable.Optimized = true;
			} else if (head == "totalunits") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TotalUnits")) variable.Value = ssTotalUnits; else variable.Optimized = true;
			} else if (head == "completedtargets") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompletedTargets")) variable.Value = ssCompletedTargets; else variable.Optimized = true;
			} else if (head == "totaltargets") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TotalTargets")) variable.Value = ssTotalTargets; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCategoryId) {
				return ssCategoryId;
			} else if (key == IdOfferingName) {
				return ssOfferingName;
			} else if (key == IdOfferingCode) {
				return ssOfferingCode;
			} else if (key == IdCompletedUnits) {
				return ssCompletedUnits;
			} else if (key == IdTotalUnits) {
				return ssTotalUnits;
			} else if (key == IdCompletedTargets) {
				return ssCompletedTargets;
			} else if (key == IdTotalTargets) {
				return ssTotalTargets;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssCategoryId = (int) other.AttributeGet(IdCategoryId);
			ssOfferingName = (string) other.AttributeGet(IdOfferingName);
			ssOfferingCode = (string) other.AttributeGet(IdOfferingCode);
			ssCompletedUnits = (int) other.AttributeGet(IdCompletedUnits);
			ssTotalUnits = (int) other.AttributeGet(IdTotalUnits);
			ssCompletedTargets = (int) other.AttributeGet(IdCompletedTargets);
			ssTotalTargets = (int) other.AttributeGet(IdTotalTargets);
		}
	} // STLearnerCategoryMenuStructure
	/// <summary>
	/// Structure <code>RCLearnerCategoryMenuRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCLearnerCategoryMenuRecord: ISerializable, ITypedRecord<RCLearnerCategoryMenuRecord> {
		private static readonly GlobalObjectKey IdLearnerCategoryMenu = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*GiVNj4EwVinD5gj8OfzNMw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("LearnerCategoryMenu")]
		public STLearnerCategoryMenuStructure ssSTLearnerCategoryMenu;


		public static implicit operator STLearnerCategoryMenuStructure(RCLearnerCategoryMenuRecord r) {
			return r.ssSTLearnerCategoryMenu;
		}

		public static implicit operator RCLearnerCategoryMenuRecord(STLearnerCategoryMenuStructure r) {
			RCLearnerCategoryMenuRecord res = new RCLearnerCategoryMenuRecord(null);
			res.ssSTLearnerCategoryMenu = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCLearnerCategoryMenuRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTLearnerCategoryMenu = new STLearnerCategoryMenuStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTLearnerCategoryMenu.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTLearnerCategoryMenu.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCLearnerCategoryMenuRecord r) {
			this = r;
		}


		public static bool operator == (RCLearnerCategoryMenuRecord a, RCLearnerCategoryMenuRecord b) {
			if (a.ssSTLearnerCategoryMenu != b.ssSTLearnerCategoryMenu) return false;
			return true;
		}

		public static bool operator != (RCLearnerCategoryMenuRecord a, RCLearnerCategoryMenuRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCLearnerCategoryMenuRecord)) return false;
			return (this == (RCLearnerCategoryMenuRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTLearnerCategoryMenu.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCLearnerCategoryMenuRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTLearnerCategoryMenu = new STLearnerCategoryMenuStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTLearnerCategoryMenu = (STLearnerCategoryMenuStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTLearnerCategoryMenu.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTLearnerCategoryMenu.InternalRecursiveSave();
		}


		public RCLearnerCategoryMenuRecord Duplicate() {
			RCLearnerCategoryMenuRecord t;
			t.ssSTLearnerCategoryMenu = (STLearnerCategoryMenuStructure) this.ssSTLearnerCategoryMenu.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTLearnerCategoryMenu.ToXml(this, recordElem, "LearnerCategoryMenu", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "learnercategorymenu") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LearnerCategoryMenu")) variable.Value = ssSTLearnerCategoryMenu; else variable.Optimized = true;
				variable.SetFieldName("learnercategorymenu");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLearnerCategoryMenu) {
				return ssSTLearnerCategoryMenu;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTLearnerCategoryMenu.FillFromOther((IRecord) other.AttributeGet(IdLearnerCategoryMenu));
		}
	} // RCLearnerCategoryMenuRecord
	/// <summary>
	/// RecordList type <code>RLLearnerCategoryMenuRecordList</code> that represents a record list of
	///  <code>LearnerCategoryMenu</code>
	/// </summary>
	[Serializable()]
	public partial class RLLearnerCategoryMenuRecordList: GenericRecordList<RCLearnerCategoryMenuRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCLearnerCategoryMenuRecord GetElementDefaultValue() {
			return new RCLearnerCategoryMenuRecord("");
		}

		public T[] ToArray<T>(Func<RCLearnerCategoryMenuRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLLearnerCategoryMenuRecordList recordlist, Func<RCLearnerCategoryMenuRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLLearnerCategoryMenuRecordList ToList<T>(T[] array, Func <T, RCLearnerCategoryMenuRecord> converter) {
			RLLearnerCategoryMenuRecordList result = new RLLearnerCategoryMenuRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLLearnerCategoryMenuRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearnerCategoryMenuRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearnerCategoryMenuRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLLearnerCategoryMenuRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCLearnerCategoryMenuRecord> NewList() {
			return new RLLearnerCategoryMenuRecordList();
		}


	} // RLLearnerCategoryMenuRecordList
	/// <summary>
	/// RecordList type <code>RLLearnerCategoryMenuList</code> that represents a record list of
	///  <code>CategoryIdentifier, Text, Text, Integer, Integer, Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLLearnerCategoryMenuList: GenericRecordList<STLearnerCategoryMenuStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STLearnerCategoryMenuStructure GetElementDefaultValue() {
			return new STLearnerCategoryMenuStructure("");
		}

		public T[] ToArray<T>(Func<STLearnerCategoryMenuStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLLearnerCategoryMenuList recordlist, Func<STLearnerCategoryMenuStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLLearnerCategoryMenuList ToList<T>(T[] array, Func <T, STLearnerCategoryMenuStructure> converter) {
			RLLearnerCategoryMenuList result = new RLLearnerCategoryMenuList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLLearnerCategoryMenuList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearnerCategoryMenuList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLLearnerCategoryMenuList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLLearnerCategoryMenuList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STLearnerCategoryMenuStructure> NewList() {
			return new RLLearnerCategoryMenuList();
		}


	} // RLLearnerCategoryMenuList
}

namespace ssCaseConferencing {
	[XmlType("LearnerCategoryMenu")]
	public class WORCLearnerCategoryMenuRecord {
		[System.Xml.Serialization.XmlElement("CategoryId")]
		public int varWSCategoryId;

		[System.Xml.Serialization.XmlElement("OfferingName")]
		public string varWSOfferingName;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string varWSOfferingCode;

		[System.Xml.Serialization.XmlElement("CompletedUnits")]
		public int varWSCompletedUnits;

		[System.Xml.Serialization.XmlElement("TotalUnits")]
		public int varWSTotalUnits;

		[System.Xml.Serialization.XmlElement("CompletedTargets")]
		public int varWSCompletedTargets;

		[System.Xml.Serialization.XmlElement("TotalTargets")]
		public int varWSTotalTargets;

		public WORCLearnerCategoryMenuRecord() {
			varWSCategoryId = (int) 0;
			varWSOfferingName = (string) "";
			varWSOfferingCode = (string) "";
			varWSCompletedUnits = (int) 0;
			varWSTotalUnits = (int) 0;
			varWSCompletedTargets = (int) 0;
			varWSTotalTargets = (int) 0;
		}

		public WORCLearnerCategoryMenuRecord(STLearnerCategoryMenuStructure r) {
			varWSCategoryId = (int) r.ssCategoryId;
			varWSOfferingName = BaseAppUtils.RemoveControlChars(r.ssOfferingName);
			varWSOfferingCode = BaseAppUtils.RemoveControlChars(r.ssOfferingCode);
			varWSCompletedUnits = (int) r.ssCompletedUnits;
			varWSTotalUnits = (int) r.ssTotalUnits;
			varWSCompletedTargets = (int) r.ssCompletedTargets;
			varWSTotalTargets = (int) r.ssTotalTargets;
		}

		public static RLLearnerCategoryMenuList ToRecordList(WORCLearnerCategoryMenuRecord[] array) {
			RLLearnerCategoryMenuList rl = new RLLearnerCategoryMenuList();
			if (array != null) {
				foreach(WORCLearnerCategoryMenuRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCLearnerCategoryMenuRecord[] FromRecordList(RLLearnerCategoryMenuList rl) {
			WORCLearnerCategoryMenuRecord[] array = new WORCLearnerCategoryMenuRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCLearnerCategoryMenuRecord {
		public static implicit operator WORCLearnerCategoryMenuRecord(RCLearnerCategoryMenuRecord r) {
			return new WORCLearnerCategoryMenuRecord(r.ssSTLearnerCategoryMenu);
		}

		public static implicit operator RCLearnerCategoryMenuRecord(WORCLearnerCategoryMenuRecord w) {
			RCLearnerCategoryMenuRecord r = new RCLearnerCategoryMenuRecord("");
			if (w != null) {
				r.ssSTLearnerCategoryMenu = w;
			}
			return r;
		}

	}

	partial struct STLearnerCategoryMenuStructure {
		public static implicit operator WORCLearnerCategoryMenuRecord(STLearnerCategoryMenuStructure r) {
			return new WORCLearnerCategoryMenuRecord(r);
		}

		public static implicit operator STLearnerCategoryMenuStructure(WORCLearnerCategoryMenuRecord w) {
			STLearnerCategoryMenuStructure r = new STLearnerCategoryMenuStructure("");
			if (w != null) {
				r.ssCategoryId = (int) w.varWSCategoryId;
				r.ssOfferingName = ((string) w.varWSOfferingName ?? "");
				r.ssOfferingCode = ((string) w.varWSOfferingCode ?? "");
				r.ssCompletedUnits = (int) w.varWSCompletedUnits;
				r.ssTotalUnits = (int) w.varWSTotalUnits;
				r.ssCompletedTargets = (int) w.varWSCompletedTargets;
				r.ssTotalTargets = (int) w.varWSTotalTargets;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLLearnerCategoryMenuRecordList {
		public WORCLearnerCategoryMenuRecord[] Array;


		public WORLLearnerCategoryMenuRecordList(WORCLearnerCategoryMenuRecord[] r) {
			if (r == null)
			Array = new WORCLearnerCategoryMenuRecord[0];
			else
			Array = r;
		}
		public WORLLearnerCategoryMenuRecordList() {
			Array = new WORCLearnerCategoryMenuRecord[0];
		}

		public WORLLearnerCategoryMenuRecordList(RLLearnerCategoryMenuRecordList rl) {
			rl=(RLLearnerCategoryMenuRecordList) rl.Duplicate();
			Array = new WORCLearnerCategoryMenuRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCLearnerCategoryMenuRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLLearnerCategoryMenuRecordList {
		public static implicit operator RLLearnerCategoryMenuRecordList(WORCLearnerCategoryMenuRecord[] array) {
			RLLearnerCategoryMenuRecordList rl = new RLLearnerCategoryMenuRecordList();
			if (array != null) {
				foreach(WORCLearnerCategoryMenuRecord val in array) {
					rl.Append((RCLearnerCategoryMenuRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCLearnerCategoryMenuRecord[](RLLearnerCategoryMenuRecordList rl) {
			WORCLearnerCategoryMenuRecord[] array = new WORCLearnerCategoryMenuRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCLearnerCategoryMenuRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLLearnerCategoryMenuRecordList {
		public static implicit operator RLLearnerCategoryMenuRecordList(WORLLearnerCategoryMenuRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLLearnerCategoryMenuRecordList(RLLearnerCategoryMenuRecordList rl) {
			return new WORLLearnerCategoryMenuRecordList(rl);
		}
		public static implicit operator WORCLearnerCategoryMenuRecord[](WORLLearnerCategoryMenuRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLLearnerCategoryMenuRecordList(WORCLearnerCategoryMenuRecord[] array) {
			return new WORLLearnerCategoryMenuRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLLearnerCategoryMenuList {
		public WORCLearnerCategoryMenuRecord[] Array;


		public WORLLearnerCategoryMenuList(WORCLearnerCategoryMenuRecord[] r) {
			if (r == null)
			Array = new WORCLearnerCategoryMenuRecord[0];
			else
			Array = r;
		}
		public WORLLearnerCategoryMenuList() {
			Array = new WORCLearnerCategoryMenuRecord[0];
		}

		public WORLLearnerCategoryMenuList(RLLearnerCategoryMenuList rl) {
			rl=(RLLearnerCategoryMenuList) rl.Duplicate();
			Array = new WORCLearnerCategoryMenuRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLLearnerCategoryMenuList {
		public static implicit operator RLLearnerCategoryMenuList(WORCLearnerCategoryMenuRecord[] array) {
			RLLearnerCategoryMenuList rl = new RLLearnerCategoryMenuList();
			if (array != null) {
				foreach(WORCLearnerCategoryMenuRecord val in array) {
					rl.Append((STLearnerCategoryMenuStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCLearnerCategoryMenuRecord[](RLLearnerCategoryMenuList rl) {
			WORCLearnerCategoryMenuRecord[] array = new WORCLearnerCategoryMenuRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STLearnerCategoryMenuStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLLearnerCategoryMenuList {
		public static implicit operator RLLearnerCategoryMenuList(WORLLearnerCategoryMenuList w) {
			return w.Array;
		}
		public static implicit operator WORLLearnerCategoryMenuList(RLLearnerCategoryMenuList rl) {
			return new WORLLearnerCategoryMenuList(rl);
		}
		public static implicit operator WORCLearnerCategoryMenuRecord[](WORLLearnerCategoryMenuList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLLearnerCategoryMenuList(WORCLearnerCategoryMenuRecord[] array) {
			return new WORLLearnerCategoryMenuList(array);
		}
	}
}

