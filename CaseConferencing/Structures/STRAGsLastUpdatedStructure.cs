/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STRAGsLastUpdatedStructure</code> that represents the Service Studio structure
	///  <code>RAGsLastUpdated</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STRAGsLastUpdatedStructure: ISerializable, ITypedRecord<STRAGsLastUpdatedStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentCatVocShortTermLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*2nK43cpwVkCT8deGdI6cxw");
		private static readonly GlobalObjectKey IdStudentCatVocShortTermUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*CZ994an0FkOeQuo0oksCGg");
		private static readonly GlobalObjectKey IdStudentCatVocOverallLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*l6aDl445PkKuSLEW9s66RQ");
		private static readonly GlobalObjectKey IdStudentCatVocOverallUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*bbhgfji4XUKVqRMTgRzGeA");
		private static readonly GlobalObjectKey IdStudentCatMathShortTermLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*A_i4lWdPUU+PAC6DHtzFTQ");
		private static readonly GlobalObjectKey IdStudentCatMathShortTermUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*vuefa_raJUe6cy_bEd0FFA");
		private static readonly GlobalObjectKey IdStudentCatMathOverallLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*QY2M7qrh7kS9dwFHxtGm0w");
		private static readonly GlobalObjectKey IdStudentCatMathOverallUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*g1VTqg4rpUSZoY2Xe7O2TQ");
		private static readonly GlobalObjectKey IdStudentCatEngShortTermLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*urIDbjLi1kuH3TnHNdNgqA");
		private static readonly GlobalObjectKey IdStudentCatEngShortTermUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*lqZrxnE1qkexKuDY8VlSvQ");
		private static readonly GlobalObjectKey IdStudentCatEngOverallLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*3be0SkWeYk29Iu5XG_o4eg");
		private static readonly GlobalObjectKey IdStudentCatEngOverallUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*kekAM_J+VU6644lk1MK_OQ");
		private static readonly GlobalObjectKey IdStudentCatMLWShortTermLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*ykjndVDk9Eq+Ligrrcqfxw");
		private static readonly GlobalObjectKey IdStudentCatMLWShortTermUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*c8Lb_oDqhUmPCtLVWK5Oaw");
		private static readonly GlobalObjectKey IdStudentCatMLWOverallLastUpdatedBy = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Bx47lL46HkupKiTYh5u7cA");
		private static readonly GlobalObjectKey IdStudentCatMLWOverallUpdatedAt = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*l9RwWhv6LkCHsiTf7ntirw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentCatVocShortTermLastUpdatedBy")]
		public string ssStudentCatVocShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatVocShortTermUpdatedAt")]
		public DateTime ssStudentCatVocShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatVocOverallLastUpdatedBy")]
		public string ssStudentCatVocOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatVocOverallUpdatedAt")]
		public DateTime ssStudentCatVocOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMathShortTermLastUpdatedBy")]
		public string ssStudentCatMathShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMathShortTermUpdatedAt")]
		public DateTime ssStudentCatMathShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMathOverallLastUpdatedBy")]
		public string ssStudentCatMathOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMathOverallUpdatedAt")]
		public DateTime ssStudentCatMathOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatEngShortTermLastUpdatedBy")]
		public string ssStudentCatEngShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatEngShortTermUpdatedAt")]
		public DateTime ssStudentCatEngShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatEngOverallLastUpdatedBy")]
		public string ssStudentCatEngOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatEngOverallUpdatedAt")]
		public DateTime ssStudentCatEngOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMLWShortTermLastUpdatedBy")]
		public string ssStudentCatMLWShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMLWShortTermUpdatedAt")]
		public DateTime ssStudentCatMLWShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMLWOverallLastUpdatedBy")]
		public string ssStudentCatMLWOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMLWOverallUpdatedAt")]
		public DateTime ssStudentCatMLWOverallUpdatedAt;


		public BitArray OptimizedAttributes;

		public STRAGsLastUpdatedStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssStudentCatVocShortTermLastUpdatedBy = "";
			ssStudentCatVocShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatVocOverallLastUpdatedBy = "";
			ssStudentCatVocOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMathShortTermLastUpdatedBy = "";
			ssStudentCatMathShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMathOverallLastUpdatedBy = "";
			ssStudentCatMathOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatEngShortTermLastUpdatedBy = "";
			ssStudentCatEngShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatEngOverallLastUpdatedBy = "";
			ssStudentCatEngOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMLWShortTermLastUpdatedBy = "";
			ssStudentCatMLWShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMLWOverallLastUpdatedBy = "";
			ssStudentCatMLWOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentCatVocShortTermLastUpdatedBy = r.ReadText(index++, "RAGsLastUpdated.StudentCatVocShortTermLastUpdatedBy", "");
			ssStudentCatVocShortTermUpdatedAt = r.ReadDate(index++, "RAGsLastUpdated.StudentCatVocShortTermUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatVocOverallLastUpdatedBy = r.ReadText(index++, "RAGsLastUpdated.StudentCatVocOverallLastUpdatedBy", "");
			ssStudentCatVocOverallUpdatedAt = r.ReadDate(index++, "RAGsLastUpdated.StudentCatVocOverallUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatMathShortTermLastUpdatedBy = r.ReadText(index++, "RAGsLastUpdated.StudentCatMathShortTermLastUpdatedBy", "");
			ssStudentCatMathShortTermUpdatedAt = r.ReadDate(index++, "RAGsLastUpdated.StudentCatMathShortTermUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatMathOverallLastUpdatedBy = r.ReadText(index++, "RAGsLastUpdated.StudentCatMathOverallLastUpdatedBy", "");
			ssStudentCatMathOverallUpdatedAt = r.ReadDate(index++, "RAGsLastUpdated.StudentCatMathOverallUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatEngShortTermLastUpdatedBy = r.ReadText(index++, "RAGsLastUpdated.StudentCatEngShortTermLastUpdatedBy", "");
			ssStudentCatEngShortTermUpdatedAt = r.ReadDate(index++, "RAGsLastUpdated.StudentCatEngShortTermUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatEngOverallLastUpdatedBy = r.ReadText(index++, "RAGsLastUpdated.StudentCatEngOverallLastUpdatedBy", "");
			ssStudentCatEngOverallUpdatedAt = r.ReadDate(index++, "RAGsLastUpdated.StudentCatEngOverallUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatMLWShortTermLastUpdatedBy = r.ReadText(index++, "RAGsLastUpdated.StudentCatMLWShortTermLastUpdatedBy", "");
			ssStudentCatMLWShortTermUpdatedAt = r.ReadDate(index++, "RAGsLastUpdated.StudentCatMLWShortTermUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
			ssStudentCatMLWOverallLastUpdatedBy = r.ReadText(index++, "RAGsLastUpdated.StudentCatMLWOverallLastUpdatedBy", "");
			ssStudentCatMLWOverallUpdatedAt = r.ReadDate(index++, "RAGsLastUpdated.StudentCatMLWOverallUpdatedAt", new DateTime(1900, 1, 1, 0, 0, 0));
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STRAGsLastUpdatedStructure r) {
			this = r;
		}


		public static bool operator == (STRAGsLastUpdatedStructure a, STRAGsLastUpdatedStructure b) {
			if (a.ssStudentCatVocShortTermLastUpdatedBy != b.ssStudentCatVocShortTermLastUpdatedBy) return false;
			if (a.ssStudentCatVocShortTermUpdatedAt != b.ssStudentCatVocShortTermUpdatedAt) return false;
			if (a.ssStudentCatVocOverallLastUpdatedBy != b.ssStudentCatVocOverallLastUpdatedBy) return false;
			if (a.ssStudentCatVocOverallUpdatedAt != b.ssStudentCatVocOverallUpdatedAt) return false;
			if (a.ssStudentCatMathShortTermLastUpdatedBy != b.ssStudentCatMathShortTermLastUpdatedBy) return false;
			if (a.ssStudentCatMathShortTermUpdatedAt != b.ssStudentCatMathShortTermUpdatedAt) return false;
			if (a.ssStudentCatMathOverallLastUpdatedBy != b.ssStudentCatMathOverallLastUpdatedBy) return false;
			if (a.ssStudentCatMathOverallUpdatedAt != b.ssStudentCatMathOverallUpdatedAt) return false;
			if (a.ssStudentCatEngShortTermLastUpdatedBy != b.ssStudentCatEngShortTermLastUpdatedBy) return false;
			if (a.ssStudentCatEngShortTermUpdatedAt != b.ssStudentCatEngShortTermUpdatedAt) return false;
			if (a.ssStudentCatEngOverallLastUpdatedBy != b.ssStudentCatEngOverallLastUpdatedBy) return false;
			if (a.ssStudentCatEngOverallUpdatedAt != b.ssStudentCatEngOverallUpdatedAt) return false;
			if (a.ssStudentCatMLWShortTermLastUpdatedBy != b.ssStudentCatMLWShortTermLastUpdatedBy) return false;
			if (a.ssStudentCatMLWShortTermUpdatedAt != b.ssStudentCatMLWShortTermUpdatedAt) return false;
			if (a.ssStudentCatMLWOverallLastUpdatedBy != b.ssStudentCatMLWOverallLastUpdatedBy) return false;
			if (a.ssStudentCatMLWOverallUpdatedAt != b.ssStudentCatMLWOverallUpdatedAt) return false;
			return true;
		}

		public static bool operator != (STRAGsLastUpdatedStructure a, STRAGsLastUpdatedStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STRAGsLastUpdatedStructure)) return false;
			return (this == (STRAGsLastUpdatedStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentCatVocShortTermLastUpdatedBy.GetHashCode()
				^ ssStudentCatVocShortTermUpdatedAt.GetHashCode()
				^ ssStudentCatVocOverallLastUpdatedBy.GetHashCode()
				^ ssStudentCatVocOverallUpdatedAt.GetHashCode()
				^ ssStudentCatMathShortTermLastUpdatedBy.GetHashCode()
				^ ssStudentCatMathShortTermUpdatedAt.GetHashCode()
				^ ssStudentCatMathOverallLastUpdatedBy.GetHashCode()
				^ ssStudentCatMathOverallUpdatedAt.GetHashCode()
				^ ssStudentCatEngShortTermLastUpdatedBy.GetHashCode()
				^ ssStudentCatEngShortTermUpdatedAt.GetHashCode()
				^ ssStudentCatEngOverallLastUpdatedBy.GetHashCode()
				^ ssStudentCatEngOverallUpdatedAt.GetHashCode()
				^ ssStudentCatMLWShortTermLastUpdatedBy.GetHashCode()
				^ ssStudentCatMLWShortTermUpdatedAt.GetHashCode()
				^ ssStudentCatMLWOverallLastUpdatedBy.GetHashCode()
				^ ssStudentCatMLWOverallUpdatedAt.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STRAGsLastUpdatedStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssStudentCatVocShortTermLastUpdatedBy = "";
			ssStudentCatVocShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatVocOverallLastUpdatedBy = "";
			ssStudentCatVocOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMathShortTermLastUpdatedBy = "";
			ssStudentCatMathShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMathOverallLastUpdatedBy = "";
			ssStudentCatMathOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatEngShortTermLastUpdatedBy = "";
			ssStudentCatEngShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatEngOverallLastUpdatedBy = "";
			ssStudentCatEngOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMLWShortTermLastUpdatedBy = "";
			ssStudentCatMLWShortTermUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			ssStudentCatMLWOverallLastUpdatedBy = "";
			ssStudentCatMLWOverallUpdatedAt = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssStudentCatVocShortTermLastUpdatedBy = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssStudentCatVocShortTermUpdatedAt = (DateTime) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssStudentCatVocOverallLastUpdatedBy = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssStudentCatVocOverallUpdatedAt = (DateTime) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssStudentCatMathShortTermLastUpdatedBy = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssStudentCatMathShortTermUpdatedAt = (DateTime) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssStudentCatMathOverallLastUpdatedBy = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssStudentCatMathOverallUpdatedAt = (DateTime) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssStudentCatEngShortTermLastUpdatedBy = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssStudentCatEngShortTermUpdatedAt = (DateTime) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			ssStudentCatEngOverallLastUpdatedBy = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			ssStudentCatEngOverallUpdatedAt = (DateTime) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			ssStudentCatMLWShortTermLastUpdatedBy = (string) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			ssStudentCatMLWShortTermUpdatedAt = (DateTime) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			ssStudentCatMLWOverallLastUpdatedBy = (string) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			ssStudentCatMLWOverallUpdatedAt = (DateTime) info.GetValue(fields[15] .Name, fields[15] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STRAGsLastUpdatedStructure Duplicate() {
			STRAGsLastUpdatedStructure t;
			t.ssStudentCatVocShortTermLastUpdatedBy = this.ssStudentCatVocShortTermLastUpdatedBy;
			t.ssStudentCatVocShortTermUpdatedAt = this.ssStudentCatVocShortTermUpdatedAt;
			t.ssStudentCatVocOverallLastUpdatedBy = this.ssStudentCatVocOverallLastUpdatedBy;
			t.ssStudentCatVocOverallUpdatedAt = this.ssStudentCatVocOverallUpdatedAt;
			t.ssStudentCatMathShortTermLastUpdatedBy = this.ssStudentCatMathShortTermLastUpdatedBy;
			t.ssStudentCatMathShortTermUpdatedAt = this.ssStudentCatMathShortTermUpdatedAt;
			t.ssStudentCatMathOverallLastUpdatedBy = this.ssStudentCatMathOverallLastUpdatedBy;
			t.ssStudentCatMathOverallUpdatedAt = this.ssStudentCatMathOverallUpdatedAt;
			t.ssStudentCatEngShortTermLastUpdatedBy = this.ssStudentCatEngShortTermLastUpdatedBy;
			t.ssStudentCatEngShortTermUpdatedAt = this.ssStudentCatEngShortTermUpdatedAt;
			t.ssStudentCatEngOverallLastUpdatedBy = this.ssStudentCatEngOverallLastUpdatedBy;
			t.ssStudentCatEngOverallUpdatedAt = this.ssStudentCatEngOverallUpdatedAt;
			t.ssStudentCatMLWShortTermLastUpdatedBy = this.ssStudentCatMLWShortTermLastUpdatedBy;
			t.ssStudentCatMLWShortTermUpdatedAt = this.ssStudentCatMLWShortTermUpdatedAt;
			t.ssStudentCatMLWOverallLastUpdatedBy = this.ssStudentCatMLWOverallLastUpdatedBy;
			t.ssStudentCatMLWOverallUpdatedAt = this.ssStudentCatMLWOverallUpdatedAt;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatVocShortTermLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatVocShortTermLastUpdatedBy", ssStudentCatVocShortTermLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatVocShortTermLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatVocShortTermUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatVocShortTermUpdatedAt", ssStudentCatVocShortTermUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatVocShortTermUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatVocOverallLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatVocOverallLastUpdatedBy", ssStudentCatVocOverallLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatVocOverallLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatVocOverallUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatVocOverallUpdatedAt", ssStudentCatVocOverallUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatVocOverallUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMathShortTermLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatMathShortTermLastUpdatedBy", ssStudentCatMathShortTermLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMathShortTermLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMathShortTermUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatMathShortTermUpdatedAt", ssStudentCatMathShortTermUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMathShortTermUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMathOverallLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatMathOverallLastUpdatedBy", ssStudentCatMathOverallLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMathOverallLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMathOverallUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatMathOverallUpdatedAt", ssStudentCatMathOverallUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMathOverallUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatEngShortTermLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatEngShortTermLastUpdatedBy", ssStudentCatEngShortTermLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatEngShortTermLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatEngShortTermUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatEngShortTermUpdatedAt", ssStudentCatEngShortTermUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatEngShortTermUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatEngOverallLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatEngOverallLastUpdatedBy", ssStudentCatEngOverallLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatEngOverallLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatEngOverallUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatEngOverallUpdatedAt", ssStudentCatEngOverallUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatEngOverallUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMLWShortTermLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatMLWShortTermLastUpdatedBy", ssStudentCatMLWShortTermLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMLWShortTermLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMLWShortTermUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatMLWShortTermUpdatedAt", ssStudentCatMLWShortTermUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMLWShortTermUpdatedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMLWOverallLastUpdatedBy")) VarValue.AppendAttribute(recordElem, "StudentCatMLWOverallLastUpdatedBy", ssStudentCatMLWOverallLastUpdatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMLWOverallLastUpdatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentCatMLWOverallUpdatedAt")) VarValue.AppendAttribute(recordElem, "StudentCatMLWOverallUpdatedAt", ssStudentCatMLWOverallUpdatedAt, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "StudentCatMLWOverallUpdatedAt");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentcatvocshorttermlastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatVocShortTermLastUpdatedBy")) variable.Value = ssStudentCatVocShortTermLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatvocshorttermupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatVocShortTermUpdatedAt")) variable.Value = ssStudentCatVocShortTermUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatvocoveralllastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatVocOverallLastUpdatedBy")) variable.Value = ssStudentCatVocOverallLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatvocoverallupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatVocOverallUpdatedAt")) variable.Value = ssStudentCatVocOverallUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatmathshorttermlastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMathShortTermLastUpdatedBy")) variable.Value = ssStudentCatMathShortTermLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatmathshorttermupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMathShortTermUpdatedAt")) variable.Value = ssStudentCatMathShortTermUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatmathoveralllastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMathOverallLastUpdatedBy")) variable.Value = ssStudentCatMathOverallLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatmathoverallupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMathOverallUpdatedAt")) variable.Value = ssStudentCatMathOverallUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatengshorttermlastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatEngShortTermLastUpdatedBy")) variable.Value = ssStudentCatEngShortTermLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatengshorttermupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatEngShortTermUpdatedAt")) variable.Value = ssStudentCatEngShortTermUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatengoveralllastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatEngOverallLastUpdatedBy")) variable.Value = ssStudentCatEngOverallLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatengoverallupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatEngOverallUpdatedAt")) variable.Value = ssStudentCatEngOverallUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatmlwshorttermlastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMLWShortTermLastUpdatedBy")) variable.Value = ssStudentCatMLWShortTermLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatmlwshorttermupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMLWShortTermUpdatedAt")) variable.Value = ssStudentCatMLWShortTermUpdatedAt; else variable.Optimized = true;
			} else if (head == "studentcatmlwoveralllastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMLWOverallLastUpdatedBy")) variable.Value = ssStudentCatMLWOverallLastUpdatedBy; else variable.Optimized = true;
			} else if (head == "studentcatmlwoverallupdatedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentCatMLWOverallUpdatedAt")) variable.Value = ssStudentCatMLWOverallUpdatedAt; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentCatVocShortTermLastUpdatedBy) {
				return ssStudentCatVocShortTermLastUpdatedBy;
			} else if (key == IdStudentCatVocShortTermUpdatedAt) {
				return ssStudentCatVocShortTermUpdatedAt;
			} else if (key == IdStudentCatVocOverallLastUpdatedBy) {
				return ssStudentCatVocOverallLastUpdatedBy;
			} else if (key == IdStudentCatVocOverallUpdatedAt) {
				return ssStudentCatVocOverallUpdatedAt;
			} else if (key == IdStudentCatMathShortTermLastUpdatedBy) {
				return ssStudentCatMathShortTermLastUpdatedBy;
			} else if (key == IdStudentCatMathShortTermUpdatedAt) {
				return ssStudentCatMathShortTermUpdatedAt;
			} else if (key == IdStudentCatMathOverallLastUpdatedBy) {
				return ssStudentCatMathOverallLastUpdatedBy;
			} else if (key == IdStudentCatMathOverallUpdatedAt) {
				return ssStudentCatMathOverallUpdatedAt;
			} else if (key == IdStudentCatEngShortTermLastUpdatedBy) {
				return ssStudentCatEngShortTermLastUpdatedBy;
			} else if (key == IdStudentCatEngShortTermUpdatedAt) {
				return ssStudentCatEngShortTermUpdatedAt;
			} else if (key == IdStudentCatEngOverallLastUpdatedBy) {
				return ssStudentCatEngOverallLastUpdatedBy;
			} else if (key == IdStudentCatEngOverallUpdatedAt) {
				return ssStudentCatEngOverallUpdatedAt;
			} else if (key == IdStudentCatMLWShortTermLastUpdatedBy) {
				return ssStudentCatMLWShortTermLastUpdatedBy;
			} else if (key == IdStudentCatMLWShortTermUpdatedAt) {
				return ssStudentCatMLWShortTermUpdatedAt;
			} else if (key == IdStudentCatMLWOverallLastUpdatedBy) {
				return ssStudentCatMLWOverallLastUpdatedBy;
			} else if (key == IdStudentCatMLWOverallUpdatedAt) {
				return ssStudentCatMLWOverallUpdatedAt;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssStudentCatVocShortTermLastUpdatedBy = (string) other.AttributeGet(IdStudentCatVocShortTermLastUpdatedBy);
			ssStudentCatVocShortTermUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatVocShortTermUpdatedAt);
			ssStudentCatVocOverallLastUpdatedBy = (string) other.AttributeGet(IdStudentCatVocOverallLastUpdatedBy);
			ssStudentCatVocOverallUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatVocOverallUpdatedAt);
			ssStudentCatMathShortTermLastUpdatedBy = (string) other.AttributeGet(IdStudentCatMathShortTermLastUpdatedBy);
			ssStudentCatMathShortTermUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatMathShortTermUpdatedAt);
			ssStudentCatMathOverallLastUpdatedBy = (string) other.AttributeGet(IdStudentCatMathOverallLastUpdatedBy);
			ssStudentCatMathOverallUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatMathOverallUpdatedAt);
			ssStudentCatEngShortTermLastUpdatedBy = (string) other.AttributeGet(IdStudentCatEngShortTermLastUpdatedBy);
			ssStudentCatEngShortTermUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatEngShortTermUpdatedAt);
			ssStudentCatEngOverallLastUpdatedBy = (string) other.AttributeGet(IdStudentCatEngOverallLastUpdatedBy);
			ssStudentCatEngOverallUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatEngOverallUpdatedAt);
			ssStudentCatMLWShortTermLastUpdatedBy = (string) other.AttributeGet(IdStudentCatMLWShortTermLastUpdatedBy);
			ssStudentCatMLWShortTermUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatMLWShortTermUpdatedAt);
			ssStudentCatMLWOverallLastUpdatedBy = (string) other.AttributeGet(IdStudentCatMLWOverallLastUpdatedBy);
			ssStudentCatMLWOverallUpdatedAt = (DateTime) other.AttributeGet(IdStudentCatMLWOverallUpdatedAt);
		}
	} // STRAGsLastUpdatedStructure
	/// <summary>
	/// Structure <code>RCRAGsLastUpdatedRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRAGsLastUpdatedRecord: ISerializable, ITypedRecord<RCRAGsLastUpdatedRecord> {
		private static readonly GlobalObjectKey IdRAGsLastUpdated = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ZsEaCPF2tabFAqP0tuqLkg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RAGsLastUpdated")]
		public STRAGsLastUpdatedStructure ssSTRAGsLastUpdated;


		public static implicit operator STRAGsLastUpdatedStructure(RCRAGsLastUpdatedRecord r) {
			return r.ssSTRAGsLastUpdated;
		}

		public static implicit operator RCRAGsLastUpdatedRecord(STRAGsLastUpdatedStructure r) {
			RCRAGsLastUpdatedRecord res = new RCRAGsLastUpdatedRecord(null);
			res.ssSTRAGsLastUpdated = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCRAGsLastUpdatedRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTRAGsLastUpdated = new STRAGsLastUpdatedStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTRAGsLastUpdated.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTRAGsLastUpdated.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRAGsLastUpdatedRecord r) {
			this = r;
		}


		public static bool operator == (RCRAGsLastUpdatedRecord a, RCRAGsLastUpdatedRecord b) {
			if (a.ssSTRAGsLastUpdated != b.ssSTRAGsLastUpdated) return false;
			return true;
		}

		public static bool operator != (RCRAGsLastUpdatedRecord a, RCRAGsLastUpdatedRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRAGsLastUpdatedRecord)) return false;
			return (this == (RCRAGsLastUpdatedRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTRAGsLastUpdated.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRAGsLastUpdatedRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTRAGsLastUpdated = new STRAGsLastUpdatedStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTRAGsLastUpdated = (STRAGsLastUpdatedStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTRAGsLastUpdated.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTRAGsLastUpdated.InternalRecursiveSave();
		}


		public RCRAGsLastUpdatedRecord Duplicate() {
			RCRAGsLastUpdatedRecord t;
			t.ssSTRAGsLastUpdated = (STRAGsLastUpdatedStructure) this.ssSTRAGsLastUpdated.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTRAGsLastUpdated.ToXml(this, recordElem, "RAGsLastUpdated", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "ragslastupdated") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGsLastUpdated")) variable.Value = ssSTRAGsLastUpdated; else variable.Optimized = true;
				variable.SetFieldName("ragslastupdated");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRAGsLastUpdated) {
				return ssSTRAGsLastUpdated;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTRAGsLastUpdated.FillFromOther((IRecord) other.AttributeGet(IdRAGsLastUpdated));
		}
	} // RCRAGsLastUpdatedRecord
	/// <summary>
	/// RecordList type <code>RLRAGsLastUpdatedRecordList</code> that represents a record list of
	///  <code>RAGsLastUpdated</code>
	/// </summary>
	[Serializable()]
	public partial class RLRAGsLastUpdatedRecordList: GenericRecordList<RCRAGsLastUpdatedRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRAGsLastUpdatedRecord GetElementDefaultValue() {
			return new RCRAGsLastUpdatedRecord("");
		}

		public T[] ToArray<T>(Func<RCRAGsLastUpdatedRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRAGsLastUpdatedRecordList recordlist, Func<RCRAGsLastUpdatedRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRAGsLastUpdatedRecordList ToList<T>(T[] array, Func <T, RCRAGsLastUpdatedRecord> converter) {
			RLRAGsLastUpdatedRecordList result = new RLRAGsLastUpdatedRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRAGsLastUpdatedRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRAGsLastUpdatedRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRAGsLastUpdatedRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRAGsLastUpdatedRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRAGsLastUpdatedRecord> NewList() {
			return new RLRAGsLastUpdatedRecordList();
		}


	} // RLRAGsLastUpdatedRecordList
	/// <summary>
	/// RecordList type <code>RLRAGsLastUpdatedList</code> that represents a record list of <code>Text,
	///  Text, Text, Text, Text, Text, Text, Text, Date, Date, Date, Date, Date, Date, Date, Date</code>
	/// </summary>
	[Serializable()]
	public partial class RLRAGsLastUpdatedList: GenericRecordList<STRAGsLastUpdatedStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STRAGsLastUpdatedStructure GetElementDefaultValue() {
			return new STRAGsLastUpdatedStructure("");
		}

		public T[] ToArray<T>(Func<STRAGsLastUpdatedStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRAGsLastUpdatedList recordlist, Func<STRAGsLastUpdatedStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLRAGsLastUpdatedList ToList<T>(T[] array, Func <T, STRAGsLastUpdatedStructure> converter) {
			RLRAGsLastUpdatedList result = new RLRAGsLastUpdatedList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRAGsLastUpdatedList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRAGsLastUpdatedList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRAGsLastUpdatedList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRAGsLastUpdatedList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STRAGsLastUpdatedStructure> NewList() {
			return new RLRAGsLastUpdatedList();
		}


	} // RLRAGsLastUpdatedList
}

namespace ssCaseConferencing {
	[XmlType("RAGsLastUpdated")]
	public class WORCRAGsLastUpdatedRecord {
		[System.Xml.Serialization.XmlElement("StudentCatVocShortTermLastUpdatedBy")]
		public string varWSStudentCatVocShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatVocShortTermUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatVocShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatVocOverallLastUpdatedBy")]
		public string varWSStudentCatVocOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatVocOverallUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatVocOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMathShortTermLastUpdatedBy")]
		public string varWSStudentCatMathShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMathShortTermUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatMathShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMathOverallLastUpdatedBy")]
		public string varWSStudentCatMathOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMathOverallUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatMathOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatEngShortTermLastUpdatedBy")]
		public string varWSStudentCatEngShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatEngShortTermUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatEngShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatEngOverallLastUpdatedBy")]
		public string varWSStudentCatEngOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatEngOverallUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatEngOverallUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMLWShortTermLastUpdatedBy")]
		public string varWSStudentCatMLWShortTermLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMLWShortTermUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatMLWShortTermUpdatedAt;

		[System.Xml.Serialization.XmlElement("StudentCatMLWOverallLastUpdatedBy")]
		public string varWSStudentCatMLWOverallLastUpdatedBy;

		[System.Xml.Serialization.XmlElement("StudentCatMLWOverallUpdatedAt", DataType= "date")]
		public DateTime varWSStudentCatMLWOverallUpdatedAt;

		public WORCRAGsLastUpdatedRecord() {
			varWSStudentCatVocShortTermLastUpdatedBy = (string) "";
			varWSStudentCatVocShortTermUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatVocOverallLastUpdatedBy = (string) "";
			varWSStudentCatVocOverallUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatMathShortTermLastUpdatedBy = (string) "";
			varWSStudentCatMathShortTermUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatMathOverallLastUpdatedBy = (string) "";
			varWSStudentCatMathOverallUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatEngShortTermLastUpdatedBy = (string) "";
			varWSStudentCatEngShortTermUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatEngOverallLastUpdatedBy = (string) "";
			varWSStudentCatEngOverallUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatMLWShortTermLastUpdatedBy = (string) "";
			varWSStudentCatMLWShortTermUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSStudentCatMLWOverallLastUpdatedBy = (string) "";
			varWSStudentCatMLWOverallUpdatedAt = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCRAGsLastUpdatedRecord(STRAGsLastUpdatedStructure r) {
			varWSStudentCatVocShortTermLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatVocShortTermLastUpdatedBy);
			varWSStudentCatVocShortTermUpdatedAt = (DateTime) r.ssStudentCatVocShortTermUpdatedAt;
			varWSStudentCatVocOverallLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatVocOverallLastUpdatedBy);
			varWSStudentCatVocOverallUpdatedAt = (DateTime) r.ssStudentCatVocOverallUpdatedAt;
			varWSStudentCatMathShortTermLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatMathShortTermLastUpdatedBy);
			varWSStudentCatMathShortTermUpdatedAt = (DateTime) r.ssStudentCatMathShortTermUpdatedAt;
			varWSStudentCatMathOverallLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatMathOverallLastUpdatedBy);
			varWSStudentCatMathOverallUpdatedAt = (DateTime) r.ssStudentCatMathOverallUpdatedAt;
			varWSStudentCatEngShortTermLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatEngShortTermLastUpdatedBy);
			varWSStudentCatEngShortTermUpdatedAt = (DateTime) r.ssStudentCatEngShortTermUpdatedAt;
			varWSStudentCatEngOverallLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatEngOverallLastUpdatedBy);
			varWSStudentCatEngOverallUpdatedAt = (DateTime) r.ssStudentCatEngOverallUpdatedAt;
			varWSStudentCatMLWShortTermLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatMLWShortTermLastUpdatedBy);
			varWSStudentCatMLWShortTermUpdatedAt = (DateTime) r.ssStudentCatMLWShortTermUpdatedAt;
			varWSStudentCatMLWOverallLastUpdatedBy = BaseAppUtils.RemoveControlChars(r.ssStudentCatMLWOverallLastUpdatedBy);
			varWSStudentCatMLWOverallUpdatedAt = (DateTime) r.ssStudentCatMLWOverallUpdatedAt;
		}

		public static RLRAGsLastUpdatedList ToRecordList(WORCRAGsLastUpdatedRecord[] array) {
			RLRAGsLastUpdatedList rl = new RLRAGsLastUpdatedList();
			if (array != null) {
				foreach(WORCRAGsLastUpdatedRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRAGsLastUpdatedRecord[] FromRecordList(RLRAGsLastUpdatedList rl) {
			WORCRAGsLastUpdatedRecord[] array = new WORCRAGsLastUpdatedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCRAGsLastUpdatedRecord {
		public static implicit operator WORCRAGsLastUpdatedRecord(RCRAGsLastUpdatedRecord r) {
			return new WORCRAGsLastUpdatedRecord(r.ssSTRAGsLastUpdated);
		}

		public static implicit operator RCRAGsLastUpdatedRecord(WORCRAGsLastUpdatedRecord w) {
			RCRAGsLastUpdatedRecord r = new RCRAGsLastUpdatedRecord("");
			if (w != null) {
				r.ssSTRAGsLastUpdated = w;
			}
			return r;
		}

	}

	partial struct STRAGsLastUpdatedStructure {
		public static implicit operator WORCRAGsLastUpdatedRecord(STRAGsLastUpdatedStructure r) {
			return new WORCRAGsLastUpdatedRecord(r);
		}

		public static implicit operator STRAGsLastUpdatedStructure(WORCRAGsLastUpdatedRecord w) {
			STRAGsLastUpdatedStructure r = new STRAGsLastUpdatedStructure("");
			if (w != null) {
				r.ssStudentCatVocShortTermLastUpdatedBy = ((string) w.varWSStudentCatVocShortTermLastUpdatedBy ?? "");
				r.ssStudentCatVocShortTermUpdatedAt = (DateTime) w.varWSStudentCatVocShortTermUpdatedAt;
				r.ssStudentCatVocOverallLastUpdatedBy = ((string) w.varWSStudentCatVocOverallLastUpdatedBy ?? "");
				r.ssStudentCatVocOverallUpdatedAt = (DateTime) w.varWSStudentCatVocOverallUpdatedAt;
				r.ssStudentCatMathShortTermLastUpdatedBy = ((string) w.varWSStudentCatMathShortTermLastUpdatedBy ?? "");
				r.ssStudentCatMathShortTermUpdatedAt = (DateTime) w.varWSStudentCatMathShortTermUpdatedAt;
				r.ssStudentCatMathOverallLastUpdatedBy = ((string) w.varWSStudentCatMathOverallLastUpdatedBy ?? "");
				r.ssStudentCatMathOverallUpdatedAt = (DateTime) w.varWSStudentCatMathOverallUpdatedAt;
				r.ssStudentCatEngShortTermLastUpdatedBy = ((string) w.varWSStudentCatEngShortTermLastUpdatedBy ?? "");
				r.ssStudentCatEngShortTermUpdatedAt = (DateTime) w.varWSStudentCatEngShortTermUpdatedAt;
				r.ssStudentCatEngOverallLastUpdatedBy = ((string) w.varWSStudentCatEngOverallLastUpdatedBy ?? "");
				r.ssStudentCatEngOverallUpdatedAt = (DateTime) w.varWSStudentCatEngOverallUpdatedAt;
				r.ssStudentCatMLWShortTermLastUpdatedBy = ((string) w.varWSStudentCatMLWShortTermLastUpdatedBy ?? "");
				r.ssStudentCatMLWShortTermUpdatedAt = (DateTime) w.varWSStudentCatMLWShortTermUpdatedAt;
				r.ssStudentCatMLWOverallLastUpdatedBy = ((string) w.varWSStudentCatMLWOverallLastUpdatedBy ?? "");
				r.ssStudentCatMLWOverallUpdatedAt = (DateTime) w.varWSStudentCatMLWOverallUpdatedAt;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRAGsLastUpdatedRecordList {
		public WORCRAGsLastUpdatedRecord[] Array;


		public WORLRAGsLastUpdatedRecordList(WORCRAGsLastUpdatedRecord[] r) {
			if (r == null)
			Array = new WORCRAGsLastUpdatedRecord[0];
			else
			Array = r;
		}
		public WORLRAGsLastUpdatedRecordList() {
			Array = new WORCRAGsLastUpdatedRecord[0];
		}

		public WORLRAGsLastUpdatedRecordList(RLRAGsLastUpdatedRecordList rl) {
			rl=(RLRAGsLastUpdatedRecordList) rl.Duplicate();
			Array = new WORCRAGsLastUpdatedRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRAGsLastUpdatedRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRAGsLastUpdatedRecordList {
		public static implicit operator RLRAGsLastUpdatedRecordList(WORCRAGsLastUpdatedRecord[] array) {
			RLRAGsLastUpdatedRecordList rl = new RLRAGsLastUpdatedRecordList();
			if (array != null) {
				foreach(WORCRAGsLastUpdatedRecord val in array) {
					rl.Append((RCRAGsLastUpdatedRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRAGsLastUpdatedRecord[](RLRAGsLastUpdatedRecordList rl) {
			WORCRAGsLastUpdatedRecord[] array = new WORCRAGsLastUpdatedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRAGsLastUpdatedRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRAGsLastUpdatedRecordList {
		public static implicit operator RLRAGsLastUpdatedRecordList(WORLRAGsLastUpdatedRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRAGsLastUpdatedRecordList(RLRAGsLastUpdatedRecordList rl) {
			return new WORLRAGsLastUpdatedRecordList(rl);
		}
		public static implicit operator WORCRAGsLastUpdatedRecord[](WORLRAGsLastUpdatedRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRAGsLastUpdatedRecordList(WORCRAGsLastUpdatedRecord[] array) {
			return new WORLRAGsLastUpdatedRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLRAGsLastUpdatedList {
		public WORCRAGsLastUpdatedRecord[] Array;


		public WORLRAGsLastUpdatedList(WORCRAGsLastUpdatedRecord[] r) {
			if (r == null)
			Array = new WORCRAGsLastUpdatedRecord[0];
			else
			Array = r;
		}
		public WORLRAGsLastUpdatedList() {
			Array = new WORCRAGsLastUpdatedRecord[0];
		}

		public WORLRAGsLastUpdatedList(RLRAGsLastUpdatedList rl) {
			rl=(RLRAGsLastUpdatedList) rl.Duplicate();
			Array = new WORCRAGsLastUpdatedRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLRAGsLastUpdatedList {
		public static implicit operator RLRAGsLastUpdatedList(WORCRAGsLastUpdatedRecord[] array) {
			RLRAGsLastUpdatedList rl = new RLRAGsLastUpdatedList();
			if (array != null) {
				foreach(WORCRAGsLastUpdatedRecord val in array) {
					rl.Append((STRAGsLastUpdatedStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRAGsLastUpdatedRecord[](RLRAGsLastUpdatedList rl) {
			WORCRAGsLastUpdatedRecord[] array = new WORCRAGsLastUpdatedRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STRAGsLastUpdatedStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLRAGsLastUpdatedList {
		public static implicit operator RLRAGsLastUpdatedList(WORLRAGsLastUpdatedList w) {
			return w.Array;
		}
		public static implicit operator WORLRAGsLastUpdatedList(RLRAGsLastUpdatedList rl) {
			return new WORLRAGsLastUpdatedList(rl);
		}
		public static implicit operator WORCRAGsLastUpdatedRecord[](WORLRAGsLastUpdatedList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRAGsLastUpdatedList(WORCRAGsLastUpdatedRecord[] array) {
			return new WORLRAGsLastUpdatedList(array);
		}
	}
}

