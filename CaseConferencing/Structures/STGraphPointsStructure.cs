/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STGraphPointsStructure</code> that represents the Service Studio structure
	///  <code>GraphPoints</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STGraphPointsStructure: ISerializable, ITypedRecord<STGraphPointsStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*L+zYXl1m106FqfRzK5O0eQ");
		private static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*X6sQh6iqB0ySPcq4h5Qtaw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Label")]
		public string ssLabel;

		[System.Xml.Serialization.XmlElement("Value")]
		public decimal ssValue;


		public BitArray OptimizedAttributes;

		public STGraphPointsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssLabel = "";
			ssValue = 0.0M;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssLabel = r.ReadText(index++, "GraphPoints.Label", "");
			ssValue = r.ReadDecimal(index++, "GraphPoints.Value", 0.0M);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STGraphPointsStructure r) {
			this = r;
		}


		public static bool operator == (STGraphPointsStructure a, STGraphPointsStructure b) {
			if (a.ssLabel != b.ssLabel) return false;
			if (a.ssValue != b.ssValue) return false;
			return true;
		}

		public static bool operator != (STGraphPointsStructure a, STGraphPointsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STGraphPointsStructure)) return false;
			return (this == (STGraphPointsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssLabel.GetHashCode()
				^ ssValue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STGraphPointsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssLabel = "";
			ssValue = 0.0M;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssLabel = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssValue = (decimal) info.GetValue(fields[1] .Name, fields[1] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STGraphPointsStructure Duplicate() {
			STGraphPointsStructure t;
			t.ssLabel = this.ssLabel;
			t.ssValue = this.ssValue;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			} else if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLabel) {
				return ssLabel;
			} else if (key == IdValue) {
				return ssValue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssLabel = (string) other.AttributeGet(IdLabel);
			ssValue = (decimal) other.AttributeGet(IdValue);
		}
	} // STGraphPointsStructure
	/// <summary>
	/// Structure <code>RCGraphPointsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGraphPointsRecord: ISerializable, ITypedRecord<RCGraphPointsRecord> {
		private static readonly GlobalObjectKey IdGraphPoints = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*nTVB3OkiD9lvxBtzLXuh+w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("GraphPoints")]
		public STGraphPointsStructure ssSTGraphPoints;


		public static implicit operator STGraphPointsStructure(RCGraphPointsRecord r) {
			return r.ssSTGraphPoints;
		}

		public static implicit operator RCGraphPointsRecord(STGraphPointsStructure r) {
			RCGraphPointsRecord res = new RCGraphPointsRecord(null);
			res.ssSTGraphPoints = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCGraphPointsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTGraphPoints = new STGraphPointsStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTGraphPoints.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTGraphPoints.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGraphPointsRecord r) {
			this = r;
		}


		public static bool operator == (RCGraphPointsRecord a, RCGraphPointsRecord b) {
			if (a.ssSTGraphPoints != b.ssSTGraphPoints) return false;
			return true;
		}

		public static bool operator != (RCGraphPointsRecord a, RCGraphPointsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGraphPointsRecord)) return false;
			return (this == (RCGraphPointsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTGraphPoints.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGraphPointsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTGraphPoints = new STGraphPointsStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTGraphPoints = (STGraphPointsStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTGraphPoints.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTGraphPoints.InternalRecursiveSave();
		}


		public RCGraphPointsRecord Duplicate() {
			RCGraphPointsRecord t;
			t.ssSTGraphPoints = (STGraphPointsStructure) this.ssSTGraphPoints.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTGraphPoints.ToXml(this, recordElem, "GraphPoints", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "graphpoints") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GraphPoints")) variable.Value = ssSTGraphPoints; else variable.Optimized = true;
				variable.SetFieldName("graphpoints");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGraphPoints) {
				return ssSTGraphPoints;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTGraphPoints.FillFromOther((IRecord) other.AttributeGet(IdGraphPoints));
		}
	} // RCGraphPointsRecord
	/// <summary>
	/// RecordList type <code>RLGraphPointsRecordList</code> that represents a record list of
	///  <code>GraphPoints</code>
	/// </summary>
	[Serializable()]
	public partial class RLGraphPointsRecordList: GenericRecordList<RCGraphPointsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGraphPointsRecord GetElementDefaultValue() {
			return new RCGraphPointsRecord("");
		}

		public T[] ToArray<T>(Func<RCGraphPointsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGraphPointsRecordList recordlist, Func<RCGraphPointsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGraphPointsRecordList ToList<T>(T[] array, Func <T, RCGraphPointsRecord> converter) {
			RLGraphPointsRecordList result = new RLGraphPointsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGraphPointsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGraphPointsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGraphPointsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGraphPointsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGraphPointsRecord> NewList() {
			return new RLGraphPointsRecordList();
		}


	} // RLGraphPointsRecordList
	/// <summary>
	/// RecordList type <code>RLGraphPointsList</code> that represents a record list of <code>Text,
	///  Decimal</code>
	/// </summary>
	[Serializable()]
	public partial class RLGraphPointsList: GenericRecordList<STGraphPointsStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STGraphPointsStructure GetElementDefaultValue() {
			return new STGraphPointsStructure("");
		}

		public T[] ToArray<T>(Func<STGraphPointsStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGraphPointsList recordlist, Func<STGraphPointsStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGraphPointsList ToList<T>(T[] array, Func <T, STGraphPointsStructure> converter) {
			RLGraphPointsList result = new RLGraphPointsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGraphPointsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGraphPointsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGraphPointsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGraphPointsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STGraphPointsStructure> NewList() {
			return new RLGraphPointsList();
		}


	} // RLGraphPointsList
}

namespace ssCaseConferencing {
	[XmlType("GraphPoints")]
	public class WORCGraphPointsRecord {
		[System.Xml.Serialization.XmlElement("Label")]
		public string varWSLabel;

		[System.Xml.Serialization.XmlElement("Value")]
		public decimal varWSValue;

		public WORCGraphPointsRecord() {
			varWSLabel = (string) "";
			varWSValue = (decimal) 0.0M;
		}

		public WORCGraphPointsRecord(STGraphPointsStructure r) {
			varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
			varWSValue = (decimal) r.ssValue;
		}

		public static RLGraphPointsList ToRecordList(WORCGraphPointsRecord[] array) {
			RLGraphPointsList rl = new RLGraphPointsList();
			if (array != null) {
				foreach(WORCGraphPointsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCGraphPointsRecord[] FromRecordList(RLGraphPointsList rl) {
			WORCGraphPointsRecord[] array = new WORCGraphPointsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCGraphPointsRecord {
		public static implicit operator WORCGraphPointsRecord(RCGraphPointsRecord r) {
			return new WORCGraphPointsRecord(r.ssSTGraphPoints);
		}

		public static implicit operator RCGraphPointsRecord(WORCGraphPointsRecord w) {
			RCGraphPointsRecord r = new RCGraphPointsRecord("");
			if (w != null) {
				r.ssSTGraphPoints = w;
			}
			return r;
		}

	}

	partial struct STGraphPointsStructure {
		public static implicit operator WORCGraphPointsRecord(STGraphPointsStructure r) {
			return new WORCGraphPointsRecord(r);
		}

		public static implicit operator STGraphPointsStructure(WORCGraphPointsRecord w) {
			STGraphPointsStructure r = new STGraphPointsStructure("");
			if (w != null) {
				r.ssLabel = ((string) w.varWSLabel ?? "");
				r.ssValue = (decimal) w.varWSValue;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLGraphPointsRecordList {
		public WORCGraphPointsRecord[] Array;


		public WORLGraphPointsRecordList(WORCGraphPointsRecord[] r) {
			if (r == null)
			Array = new WORCGraphPointsRecord[0];
			else
			Array = r;
		}
		public WORLGraphPointsRecordList() {
			Array = new WORCGraphPointsRecord[0];
		}

		public WORLGraphPointsRecordList(RLGraphPointsRecordList rl) {
			rl=(RLGraphPointsRecordList) rl.Duplicate();
			Array = new WORCGraphPointsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCGraphPointsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLGraphPointsRecordList {
		public static implicit operator RLGraphPointsRecordList(WORCGraphPointsRecord[] array) {
			RLGraphPointsRecordList rl = new RLGraphPointsRecordList();
			if (array != null) {
				foreach(WORCGraphPointsRecord val in array) {
					rl.Append((RCGraphPointsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCGraphPointsRecord[](RLGraphPointsRecordList rl) {
			WORCGraphPointsRecord[] array = new WORCGraphPointsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCGraphPointsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLGraphPointsRecordList {
		public static implicit operator RLGraphPointsRecordList(WORLGraphPointsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLGraphPointsRecordList(RLGraphPointsRecordList rl) {
			return new WORLGraphPointsRecordList(rl);
		}
		public static implicit operator WORCGraphPointsRecord[](WORLGraphPointsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLGraphPointsRecordList(WORCGraphPointsRecord[] array) {
			return new WORLGraphPointsRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLGraphPointsList {
		public WORCGraphPointsRecord[] Array;


		public WORLGraphPointsList(WORCGraphPointsRecord[] r) {
			if (r == null)
			Array = new WORCGraphPointsRecord[0];
			else
			Array = r;
		}
		public WORLGraphPointsList() {
			Array = new WORCGraphPointsRecord[0];
		}

		public WORLGraphPointsList(RLGraphPointsList rl) {
			rl=(RLGraphPointsList) rl.Duplicate();
			Array = new WORCGraphPointsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLGraphPointsList {
		public static implicit operator RLGraphPointsList(WORCGraphPointsRecord[] array) {
			RLGraphPointsList rl = new RLGraphPointsList();
			if (array != null) {
				foreach(WORCGraphPointsRecord val in array) {
					rl.Append((STGraphPointsStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCGraphPointsRecord[](RLGraphPointsList rl) {
			WORCGraphPointsRecord[] array = new WORCGraphPointsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STGraphPointsStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLGraphPointsList {
		public static implicit operator RLGraphPointsList(WORLGraphPointsList w) {
			return w.Array;
		}
		public static implicit operator WORLGraphPointsList(RLGraphPointsList rl) {
			return new WORLGraphPointsList(rl);
		}
		public static implicit operator WORCGraphPointsRecord[](WORLGraphPointsList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLGraphPointsList(WORCGraphPointsRecord[] array) {
			return new WORLGraphPointsList(array);
		}
	}
}

