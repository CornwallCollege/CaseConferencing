/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STTableRowStructure</code> that represents the Service Studio structure
	///  <code>TableRow</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STTableRowStructure: ISerializable, ITypedRecord<STTableRowStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdRow = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*qDucJq7N90SHbZ9OPdwb0Q");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Row")]
		public RLTDTagRecordList ssRow;


		public BitArray OptimizedAttributes;

		public STTableRowStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssRow = new RLTDTagRecordList();
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STTableRowStructure r) {
			this = r;
		}


		public static bool operator == (STTableRowStructure a, STTableRowStructure b) {
			if (a.ssRow != b.ssRow) return false;
			return true;
		}

		public static bool operator != (STTableRowStructure a, STTableRowStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STTableRowStructure)) return false;
			return (this == (STTableRowStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssRow.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STTableRowStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssRow = new RLTDTagRecordList();
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssRow = (RLTDTagRecordList) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssRow.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssRow.InternalRecursiveSave();
		}


		public STTableRowStructure Duplicate() {
			STTableRowStructure t;
			t.ssRow = (RLTDTagRecordList) this.ssRow.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				ssRow.ToXml(this, recordElem, "Row", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "row") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Row")) variable.Value = ssRow; else variable.Optimized = true;
				variable.SetFieldName("row");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRow) {
				return ssRow;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssRow = new RLTDTagRecordList();
			ssRow.FillFromOther((IOSList) other.AttributeGet(IdRow));
		}
	} // STTableRowStructure
	/// <summary>
	/// Structure <code>RCTableRowRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCTableRowRecord: ISerializable, ITypedRecord<RCTableRowRecord> {
		private static readonly GlobalObjectKey IdTableRow = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*ASJOOwmtN1Rvw9_xY4K3Sw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("TableRow")]
		public STTableRowStructure ssSTTableRow;


		public static implicit operator STTableRowStructure(RCTableRowRecord r) {
			return r.ssSTTableRow;
		}

		public static implicit operator RCTableRowRecord(STTableRowStructure r) {
			RCTableRowRecord res = new RCTableRowRecord(null);
			res.ssSTTableRow = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCTableRowRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTTableRow = new STTableRowStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTTableRow.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTTableRow.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCTableRowRecord r) {
			this = r;
		}


		public static bool operator == (RCTableRowRecord a, RCTableRowRecord b) {
			if (a.ssSTTableRow != b.ssSTTableRow) return false;
			return true;
		}

		public static bool operator != (RCTableRowRecord a, RCTableRowRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCTableRowRecord)) return false;
			return (this == (RCTableRowRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTTableRow.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCTableRowRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTTableRow = new STTableRowStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTTableRow = (STTableRowStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTTableRow.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTTableRow.InternalRecursiveSave();
		}


		public RCTableRowRecord Duplicate() {
			RCTableRowRecord t;
			t.ssSTTableRow = (STTableRowStructure) this.ssSTTableRow.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTTableRow.ToXml(this, recordElem, "TableRow", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "tablerow") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TableRow")) variable.Value = ssSTTableRow; else variable.Optimized = true;
				variable.SetFieldName("tablerow");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTableRow) {
				return ssSTTableRow;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTTableRow.FillFromOther((IRecord) other.AttributeGet(IdTableRow));
		}
	} // RCTableRowRecord
	/// <summary>
	/// RecordList type <code>RLTableRowRecordList</code> that represents a record list of
	///  <code>TableRow</code>
	/// </summary>
	[Serializable()]
	public partial class RLTableRowRecordList: GenericRecordList<RCTableRowRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCTableRowRecord GetElementDefaultValue() {
			return new RCTableRowRecord("");
		}

		public T[] ToArray<T>(Func<RCTableRowRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTableRowRecordList recordlist, Func<RCTableRowRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTableRowRecordList ToList<T>(T[] array, Func <T, RCTableRowRecord> converter) {
			RLTableRowRecordList result = new RLTableRowRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTableRowRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTableRowRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTableRowRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTableRowRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCTableRowRecord> NewList() {
			return new RLTableRowRecordList();
		}


	} // RLTableRowRecordList
	/// <summary>
	/// RecordList type <code>RLTableRowList</code> that represents a record list of
	///  <code>TDTagRecordList</code>
	/// </summary>
	[Serializable()]
	public partial class RLTableRowList: GenericRecordList<STTableRowStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STTableRowStructure GetElementDefaultValue() {
			return new STTableRowStructure("");
		}

		public T[] ToArray<T>(Func<STTableRowStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLTableRowList recordlist, Func<STTableRowStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLTableRowList ToList<T>(T[] array, Func <T, STTableRowStructure> converter) {
			RLTableRowList result = new RLTableRowList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLTableRowList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTableRowList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLTableRowList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLTableRowList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STTableRowStructure> NewList() {
			return new RLTableRowList();
		}


	} // RLTableRowList
}

namespace ssCaseConferencing {
	[XmlType("TableRow")]
	public class WORCTableRowRecord {
		[System.Xml.Serialization.XmlArray("Row")]
		public WORCTDTagRecord[] varWSRow;

		public WORCTableRowRecord() {
			varWSRow = new WORCTDTagRecord[0];
		}

		public WORCTableRowRecord(STTableRowStructure r) {
			varWSRow = r.ssRow;
		}

		public static RLTableRowList ToRecordList(WORCTableRowRecord[] array) {
			RLTableRowList rl = new RLTableRowList();
			if (array != null) {
				foreach(WORCTableRowRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCTableRowRecord[] FromRecordList(RLTableRowList rl) {
			WORCTableRowRecord[] array = new WORCTableRowRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCTableRowRecord {
		public static implicit operator WORCTableRowRecord(RCTableRowRecord r) {
			return new WORCTableRowRecord(r.ssSTTableRow);
		}

		public static implicit operator RCTableRowRecord(WORCTableRowRecord w) {
			RCTableRowRecord r = new RCTableRowRecord("");
			if (w != null) {
				r.ssSTTableRow = w;
			}
			return r;
		}

	}

	partial struct STTableRowStructure {
		public static implicit operator WORCTableRowRecord(STTableRowStructure r) {
			return new WORCTableRowRecord(r);
		}

		public static implicit operator STTableRowStructure(WORCTableRowRecord w) {
			STTableRowStructure r = new STTableRowStructure("");
			if (w != null) {
				r.ssRow = w.varWSRow;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTableRowRecordList {
		public WORCTableRowRecord[] Array;


		public WORLTableRowRecordList(WORCTableRowRecord[] r) {
			if (r == null)
			Array = new WORCTableRowRecord[0];
			else
			Array = r;
		}
		public WORLTableRowRecordList() {
			Array = new WORCTableRowRecord[0];
		}

		public WORLTableRowRecordList(RLTableRowRecordList rl) {
			rl=(RLTableRowRecordList) rl.Duplicate();
			Array = new WORCTableRowRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCTableRowRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTableRowRecordList {
		public static implicit operator RLTableRowRecordList(WORCTableRowRecord[] array) {
			RLTableRowRecordList rl = new RLTableRowRecordList();
			if (array != null) {
				foreach(WORCTableRowRecord val in array) {
					rl.Append((RCTableRowRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTableRowRecord[](RLTableRowRecordList rl) {
			WORCTableRowRecord[] array = new WORCTableRowRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCTableRowRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTableRowRecordList {
		public static implicit operator RLTableRowRecordList(WORLTableRowRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLTableRowRecordList(RLTableRowRecordList rl) {
			return new WORLTableRowRecordList(rl);
		}
		public static implicit operator WORCTableRowRecord[](WORLTableRowRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTableRowRecordList(WORCTableRowRecord[] array) {
			return new WORLTableRowRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLTableRowList {
		public WORCTableRowRecord[] Array;


		public WORLTableRowList(WORCTableRowRecord[] r) {
			if (r == null)
			Array = new WORCTableRowRecord[0];
			else
			Array = r;
		}
		public WORLTableRowList() {
			Array = new WORCTableRowRecord[0];
		}

		public WORLTableRowList(RLTableRowList rl) {
			rl=(RLTableRowList) rl.Duplicate();
			Array = new WORCTableRowRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLTableRowList {
		public static implicit operator RLTableRowList(WORCTableRowRecord[] array) {
			RLTableRowList rl = new RLTableRowList();
			if (array != null) {
				foreach(WORCTableRowRecord val in array) {
					rl.Append((STTableRowStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCTableRowRecord[](RLTableRowList rl) {
			WORCTableRowRecord[] array = new WORCTableRowRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STTableRowStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLTableRowList {
		public static implicit operator RLTableRowList(WORLTableRowList w) {
			return w.Array;
		}
		public static implicit operator WORLTableRowList(RLTableRowList rl) {
			return new WORLTableRowList(rl);
		}
		public static implicit operator WORCTableRowRecord[](WORLTableRowList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLTableRowList(WORCTableRowRecord[] array) {
			return new WORLTableRowList(array);
		}
	}
}

