/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STReporting_SafeguardingIssuesStructure</code> that represents the Service Studio
	///  structure <code>Reporting_SafeguardingIssues</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STReporting_SafeguardingIssuesStructure: ISerializable, ITypedRecord<STReporting_SafeguardingIssuesStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*AwEVI1llBUOmW1k4MSXsAQ");
		private static readonly GlobalObjectKey IdStudentPhotoURL = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*kDcTHx6zLUGHcbh39ON44g");
		private static readonly GlobalObjectKey IdStudentForenames = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*16Yj50ptz0mJ+WMMCNaM3w");
		private static readonly GlobalObjectKey IdStudentSurname = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*fcTRlmeurE65WhRXT_SubQ");
		private static readonly GlobalObjectKey IdStudentMainOfferingCode = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*HCC5lmJjnE+PObbvrF31zw");
		private static readonly GlobalObjectKey IdRAGStatusHexColor = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*_fge3UF_JkSwugb9YBg4gw");
		private static readonly GlobalObjectKey IdSafeguardingIssueID = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*eDN8x0D5zkW+OECqz3UYog");
		private static readonly GlobalObjectKey IdSafeguardingIssueType = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*t50d3LWHfUKVyI2f4mLLLQ");
		private static readonly GlobalObjectKey IdDateOfRefferal = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*6uzKtTzgXUqFxmmlyuKTLg");
		private static readonly GlobalObjectKey IdActionTaken = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*iRz8KQrJXUCGD_hO5pVNzQ");
		private static readonly GlobalObjectKey IdAdditionalInformation = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*zYK84cj5j0OaggXQHzWM_w");
		private static readonly GlobalObjectKey IdStaffForenames = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*2doJX+o5jkC5QaAnUxNqDA");
		private static readonly GlobalObjectKey IdStaffSurname = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*MRAFBjWMWkmmmCFD6uXKxQ");
		private static readonly GlobalObjectKey IdSafeguardingOutcomeId = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*HiPQE1PGeEOJTKxGCMwaUQ");
		private static readonly GlobalObjectKey IdSafeguardingOutcomeLabel = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*QbXHhGJ_gEe_5hPPSbTyyg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;

		[System.Xml.Serialization.XmlElement("StudentPhotoURL")]
		public string ssStudentPhotoURL;

		[System.Xml.Serialization.XmlElement("StudentForenames")]
		public string ssStudentForenames;

		[System.Xml.Serialization.XmlElement("StudentSurname")]
		public string ssStudentSurname;

		[System.Xml.Serialization.XmlElement("StudentMainOfferingCode")]
		public string ssStudentMainOfferingCode;

		[System.Xml.Serialization.XmlElement("RAGStatusHexColor")]
		public string ssRAGStatusHexColor;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueID")]
		public int ssSafeguardingIssueID;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueType")]
		public string ssSafeguardingIssueType;

		[System.Xml.Serialization.XmlElement("DateOfRefferal")]
		public DateTime ssDateOfRefferal;

		[System.Xml.Serialization.XmlElement("ActionTaken")]
		public string ssActionTaken;

		[System.Xml.Serialization.XmlElement("AdditionalInformation")]
		public string ssAdditionalInformation;

		[System.Xml.Serialization.XmlElement("StaffForenames")]
		public string ssStaffForenames;

		[System.Xml.Serialization.XmlElement("StaffSurname")]
		public string ssStaffSurname;

		[System.Xml.Serialization.XmlElement("SafeguardingOutcomeId")]
		public string ssSafeguardingOutcomeId;

		[System.Xml.Serialization.XmlElement("SafeguardingOutcomeLabel")]
		public string ssSafeguardingOutcomeLabel;


		public BitArray OptimizedAttributes;

		public STReporting_SafeguardingIssuesStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssStudentPhotoURL = "";
			ssStudentForenames = "";
			ssStudentSurname = "";
			ssStudentMainOfferingCode = "";
			ssRAGStatusHexColor = "";
			ssSafeguardingIssueID = 0;
			ssSafeguardingIssueType = "";
			ssDateOfRefferal = new DateTime(1900, 1, 1, 0, 0, 0);
			ssActionTaken = "";
			ssAdditionalInformation = "";
			ssStaffForenames = "";
			ssStaffSurname = "";
			ssSafeguardingOutcomeId = "";
			ssSafeguardingOutcomeLabel = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentReference = r.ReadTextEntityReference(index++, "Reporting_SafeguardingIssues.StudentReference", "");
			ssStudentPhotoURL = r.ReadText(index++, "Reporting_SafeguardingIssues.StudentPhotoURL", "");
			ssStudentForenames = r.ReadText(index++, "Reporting_SafeguardingIssues.StudentForenames", "");
			ssStudentSurname = r.ReadText(index++, "Reporting_SafeguardingIssues.StudentSurname", "");
			ssStudentMainOfferingCode = r.ReadText(index++, "Reporting_SafeguardingIssues.StudentMainOfferingCode", "");
			ssRAGStatusHexColor = r.ReadText(index++, "Reporting_SafeguardingIssues.RAGStatusHexColor", "");
			ssSafeguardingIssueID = r.ReadEntityReference(index++, "Reporting_SafeguardingIssues.SafeguardingIssueID", 0);
			ssSafeguardingIssueType = r.ReadTextEntityReference(index++, "Reporting_SafeguardingIssues.SafeguardingIssueType", "");
			ssDateOfRefferal = r.ReadDate(index++, "Reporting_SafeguardingIssues.DateOfRefferal", new DateTime(1900, 1, 1, 0, 0, 0));
			ssActionTaken = r.ReadText(index++, "Reporting_SafeguardingIssues.ActionTaken", "");
			ssAdditionalInformation = r.ReadText(index++, "Reporting_SafeguardingIssues.AdditionalInformation", "");
			ssStaffForenames = r.ReadText(index++, "Reporting_SafeguardingIssues.StaffForenames", "");
			ssStaffSurname = r.ReadText(index++, "Reporting_SafeguardingIssues.StaffSurname", "");
			ssSafeguardingOutcomeId = r.ReadTextEntityReference(index++, "Reporting_SafeguardingIssues.SafeguardingOutcomeId", "");
			ssSafeguardingOutcomeLabel = r.ReadText(index++, "Reporting_SafeguardingIssues.SafeguardingOutcomeLabel", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STReporting_SafeguardingIssuesStructure r) {
			this = r;
		}


		public static bool operator == (STReporting_SafeguardingIssuesStructure a, STReporting_SafeguardingIssuesStructure b) {
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssStudentPhotoURL != b.ssStudentPhotoURL) return false;
			if (a.ssStudentForenames != b.ssStudentForenames) return false;
			if (a.ssStudentSurname != b.ssStudentSurname) return false;
			if (a.ssStudentMainOfferingCode != b.ssStudentMainOfferingCode) return false;
			if (a.ssRAGStatusHexColor != b.ssRAGStatusHexColor) return false;
			if (a.ssSafeguardingIssueID != b.ssSafeguardingIssueID) return false;
			if (a.ssSafeguardingIssueType != b.ssSafeguardingIssueType) return false;
			if (a.ssDateOfRefferal != b.ssDateOfRefferal) return false;
			if (a.ssActionTaken != b.ssActionTaken) return false;
			if (a.ssAdditionalInformation != b.ssAdditionalInformation) return false;
			if (a.ssStaffForenames != b.ssStaffForenames) return false;
			if (a.ssStaffSurname != b.ssStaffSurname) return false;
			if (a.ssSafeguardingOutcomeId != b.ssSafeguardingOutcomeId) return false;
			if (a.ssSafeguardingOutcomeLabel != b.ssSafeguardingOutcomeLabel) return false;
			return true;
		}

		public static bool operator != (STReporting_SafeguardingIssuesStructure a, STReporting_SafeguardingIssuesStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STReporting_SafeguardingIssuesStructure)) return false;
			return (this == (STReporting_SafeguardingIssuesStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssStudentPhotoURL.GetHashCode()
				^ ssStudentForenames.GetHashCode()
				^ ssStudentSurname.GetHashCode()
				^ ssStudentMainOfferingCode.GetHashCode()
				^ ssRAGStatusHexColor.GetHashCode()
				^ ssSafeguardingIssueID.GetHashCode()
				^ ssSafeguardingIssueType.GetHashCode()
				^ ssDateOfRefferal.GetHashCode()
				^ ssActionTaken.GetHashCode()
				^ ssAdditionalInformation.GetHashCode()
				^ ssStaffForenames.GetHashCode()
				^ ssStaffSurname.GetHashCode()
				^ ssSafeguardingOutcomeId.GetHashCode()
				^ ssSafeguardingOutcomeLabel.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STReporting_SafeguardingIssuesStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssStudentPhotoURL = "";
			ssStudentForenames = "";
			ssStudentSurname = "";
			ssStudentMainOfferingCode = "";
			ssRAGStatusHexColor = "";
			ssSafeguardingIssueID = 0;
			ssSafeguardingIssueType = "";
			ssDateOfRefferal = new DateTime(1900, 1, 1, 0, 0, 0);
			ssActionTaken = "";
			ssAdditionalInformation = "";
			ssStaffForenames = "";
			ssStaffSurname = "";
			ssSafeguardingOutcomeId = "";
			ssSafeguardingOutcomeLabel = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssStudentPhotoURL = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssStudentForenames = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssStudentSurname = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			ssStudentMainOfferingCode = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			ssRAGStatusHexColor = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			ssSafeguardingIssueID = (int) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			ssSafeguardingIssueType = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			ssDateOfRefferal = (DateTime) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			ssActionTaken = (string) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			ssAdditionalInformation = (string) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			ssStaffForenames = (string) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			ssStaffSurname = (string) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			ssSafeguardingOutcomeId = (string) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			ssSafeguardingOutcomeLabel = (string) info.GetValue(fields[14] .Name, fields[14] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STReporting_SafeguardingIssuesStructure Duplicate() {
			STReporting_SafeguardingIssuesStructure t;
			t.ssStudentReference = this.ssStudentReference;
			t.ssStudentPhotoURL = this.ssStudentPhotoURL;
			t.ssStudentForenames = this.ssStudentForenames;
			t.ssStudentSurname = this.ssStudentSurname;
			t.ssStudentMainOfferingCode = this.ssStudentMainOfferingCode;
			t.ssRAGStatusHexColor = this.ssRAGStatusHexColor;
			t.ssSafeguardingIssueID = this.ssSafeguardingIssueID;
			t.ssSafeguardingIssueType = this.ssSafeguardingIssueType;
			t.ssDateOfRefferal = this.ssDateOfRefferal;
			t.ssActionTaken = this.ssActionTaken;
			t.ssAdditionalInformation = this.ssAdditionalInformation;
			t.ssStaffForenames = this.ssStaffForenames;
			t.ssStaffSurname = this.ssStaffSurname;
			t.ssSafeguardingOutcomeId = this.ssSafeguardingOutcomeId;
			t.ssSafeguardingOutcomeLabel = this.ssSafeguardingOutcomeLabel;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentPhotoURL")) VarValue.AppendAttribute(recordElem, "StudentPhotoURL", ssStudentPhotoURL, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentPhotoURL");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentForenames")) VarValue.AppendAttribute(recordElem, "StudentForenames", ssStudentForenames, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentForenames");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentSurname")) VarValue.AppendAttribute(recordElem, "StudentSurname", ssStudentSurname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentSurname");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentMainOfferingCode")) VarValue.AppendAttribute(recordElem, "StudentMainOfferingCode", ssStudentMainOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentMainOfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RAGStatusHexColor")) VarValue.AppendAttribute(recordElem, "RAGStatusHexColor", ssRAGStatusHexColor, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "RAGStatusHexColor");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingIssueID")) VarValue.AppendAttribute(recordElem, "SafeguardingIssueID", ssSafeguardingIssueID, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingIssueID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingIssueType")) VarValue.AppendAttribute(recordElem, "SafeguardingIssueType", ssSafeguardingIssueType, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingIssueType");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DateOfRefferal")) VarValue.AppendAttribute(recordElem, "DateOfRefferal", ssDateOfRefferal, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "DateOfRefferal");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ActionTaken")) VarValue.AppendAttribute(recordElem, "ActionTaken", ssActionTaken, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ActionTaken");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AdditionalInformation")) VarValue.AppendAttribute(recordElem, "AdditionalInformation", ssAdditionalInformation, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AdditionalInformation");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StaffForenames")) VarValue.AppendAttribute(recordElem, "StaffForenames", ssStaffForenames, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StaffForenames");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StaffSurname")) VarValue.AppendAttribute(recordElem, "StaffSurname", ssStaffSurname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StaffSurname");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingOutcomeId")) VarValue.AppendAttribute(recordElem, "SafeguardingOutcomeId", ssSafeguardingOutcomeId, detailLevel, TypeKind.TextEntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingOutcomeId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SafeguardingOutcomeLabel")) VarValue.AppendAttribute(recordElem, "SafeguardingOutcomeLabel", ssSafeguardingOutcomeLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SafeguardingOutcomeLabel");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "studentphotourl") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentPhotoURL")) variable.Value = ssStudentPhotoURL; else variable.Optimized = true;
			} else if (head == "studentforenames") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentForenames")) variable.Value = ssStudentForenames; else variable.Optimized = true;
			} else if (head == "studentsurname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentSurname")) variable.Value = ssStudentSurname; else variable.Optimized = true;
			} else if (head == "studentmainofferingcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentMainOfferingCode")) variable.Value = ssStudentMainOfferingCode; else variable.Optimized = true;
			} else if (head == "ragstatushexcolor") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGStatusHexColor")) variable.Value = ssRAGStatusHexColor; else variable.Optimized = true;
			} else if (head == "safeguardingissueid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssueID")) variable.Value = ssSafeguardingIssueID; else variable.Optimized = true;
			} else if (head == "safeguardingissuetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingIssueType")) variable.Value = ssSafeguardingIssueType; else variable.Optimized = true;
			} else if (head == "dateofrefferal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DateOfRefferal")) variable.Value = ssDateOfRefferal; else variable.Optimized = true;
			} else if (head == "actiontaken") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ActionTaken")) variable.Value = ssActionTaken; else variable.Optimized = true;
			} else if (head == "additionalinformation") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AdditionalInformation")) variable.Value = ssAdditionalInformation; else variable.Optimized = true;
			} else if (head == "staffforenames") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffForenames")) variable.Value = ssStaffForenames; else variable.Optimized = true;
			} else if (head == "staffsurname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffSurname")) variable.Value = ssStaffSurname; else variable.Optimized = true;
			} else if (head == "safeguardingoutcomeid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingOutcomeId")) variable.Value = ssSafeguardingOutcomeId; else variable.Optimized = true;
			} else if (head == "safeguardingoutcomelabel") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SafeguardingOutcomeLabel")) variable.Value = ssSafeguardingOutcomeLabel; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdStudentPhotoURL) {
				return ssStudentPhotoURL;
			} else if (key == IdStudentForenames) {
				return ssStudentForenames;
			} else if (key == IdStudentSurname) {
				return ssStudentSurname;
			} else if (key == IdStudentMainOfferingCode) {
				return ssStudentMainOfferingCode;
			} else if (key == IdRAGStatusHexColor) {
				return ssRAGStatusHexColor;
			} else if (key == IdSafeguardingIssueID) {
				return ssSafeguardingIssueID;
			} else if (key == IdSafeguardingIssueType) {
				return ssSafeguardingIssueType;
			} else if (key == IdDateOfRefferal) {
				return ssDateOfRefferal;
			} else if (key == IdActionTaken) {
				return ssActionTaken;
			} else if (key == IdAdditionalInformation) {
				return ssAdditionalInformation;
			} else if (key == IdStaffForenames) {
				return ssStaffForenames;
			} else if (key == IdStaffSurname) {
				return ssStaffSurname;
			} else if (key == IdSafeguardingOutcomeId) {
				return ssSafeguardingOutcomeId;
			} else if (key == IdSafeguardingOutcomeLabel) {
				return ssSafeguardingOutcomeLabel;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ssStudentPhotoURL = (string) other.AttributeGet(IdStudentPhotoURL);
			ssStudentForenames = (string) other.AttributeGet(IdStudentForenames);
			ssStudentSurname = (string) other.AttributeGet(IdStudentSurname);
			ssStudentMainOfferingCode = (string) other.AttributeGet(IdStudentMainOfferingCode);
			ssRAGStatusHexColor = (string) other.AttributeGet(IdRAGStatusHexColor);
			ssSafeguardingIssueID = (int) other.AttributeGet(IdSafeguardingIssueID);
			ssSafeguardingIssueType = (string) other.AttributeGet(IdSafeguardingIssueType);
			ssDateOfRefferal = (DateTime) other.AttributeGet(IdDateOfRefferal);
			ssActionTaken = (string) other.AttributeGet(IdActionTaken);
			ssAdditionalInformation = (string) other.AttributeGet(IdAdditionalInformation);
			ssStaffForenames = (string) other.AttributeGet(IdStaffForenames);
			ssStaffSurname = (string) other.AttributeGet(IdStaffSurname);
			ssSafeguardingOutcomeId = (string) other.AttributeGet(IdSafeguardingOutcomeId);
			ssSafeguardingOutcomeLabel = (string) other.AttributeGet(IdSafeguardingOutcomeLabel);
		}
	} // STReporting_SafeguardingIssuesStructure
	/// <summary>
	/// Structure <code>RCReporting_SafeguardingIssuesRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCReporting_SafeguardingIssuesRecord: ISerializable, ITypedRecord<RCReporting_SafeguardingIssuesRecord> {
		private static readonly GlobalObjectKey IdReporting_SafeguardingIssues = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Ctvk3zB4_tnd6i2KbSxQng");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Reporting_SafeguardingIssues")]
		public STReporting_SafeguardingIssuesStructure ssSTReporting_SafeguardingIssues;


		public static implicit operator STReporting_SafeguardingIssuesStructure(RCReporting_SafeguardingIssuesRecord r) {
			return r.ssSTReporting_SafeguardingIssues;
		}

		public static implicit operator RCReporting_SafeguardingIssuesRecord(STReporting_SafeguardingIssuesStructure r) {
			RCReporting_SafeguardingIssuesRecord res = new RCReporting_SafeguardingIssuesRecord(null);
			res.ssSTReporting_SafeguardingIssues = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCReporting_SafeguardingIssuesRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTReporting_SafeguardingIssues = new STReporting_SafeguardingIssuesStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTReporting_SafeguardingIssues.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTReporting_SafeguardingIssues.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCReporting_SafeguardingIssuesRecord r) {
			this = r;
		}


		public static bool operator == (RCReporting_SafeguardingIssuesRecord a, RCReporting_SafeguardingIssuesRecord b) {
			if (a.ssSTReporting_SafeguardingIssues != b.ssSTReporting_SafeguardingIssues) return false;
			return true;
		}

		public static bool operator != (RCReporting_SafeguardingIssuesRecord a, RCReporting_SafeguardingIssuesRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCReporting_SafeguardingIssuesRecord)) return false;
			return (this == (RCReporting_SafeguardingIssuesRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTReporting_SafeguardingIssues.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCReporting_SafeguardingIssuesRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTReporting_SafeguardingIssues = new STReporting_SafeguardingIssuesStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTReporting_SafeguardingIssues = (STReporting_SafeguardingIssuesStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTReporting_SafeguardingIssues.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTReporting_SafeguardingIssues.InternalRecursiveSave();
		}


		public RCReporting_SafeguardingIssuesRecord Duplicate() {
			RCReporting_SafeguardingIssuesRecord t;
			t.ssSTReporting_SafeguardingIssues = (STReporting_SafeguardingIssuesStructure) this.ssSTReporting_SafeguardingIssues.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTReporting_SafeguardingIssues.ToXml(this, recordElem, "Reporting_SafeguardingIssues", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "reporting_safeguardingissues") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Reporting_SafeguardingIssues")) variable.Value = ssSTReporting_SafeguardingIssues; else variable.Optimized = true;
				variable.SetFieldName("reporting_safeguardingissues");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdReporting_SafeguardingIssues) {
				return ssSTReporting_SafeguardingIssues;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTReporting_SafeguardingIssues.FillFromOther((IRecord) other.AttributeGet(IdReporting_SafeguardingIssues));
		}
	} // RCReporting_SafeguardingIssuesRecord
	/// <summary>
	/// RecordList type <code>RLReporting_SafeguardingIssuesRecordList</code> that represents a record list
	///  of <code>Reporting_SafeguardingIssues</code>
	/// </summary>
	[Serializable()]
	public partial class RLReporting_SafeguardingIssuesRecordList: GenericRecordList<RCReporting_SafeguardingIssuesRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCReporting_SafeguardingIssuesRecord GetElementDefaultValue() {
			return new RCReporting_SafeguardingIssuesRecord("");
		}

		public T[] ToArray<T>(Func<RCReporting_SafeguardingIssuesRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLReporting_SafeguardingIssuesRecordList recordlist, Func<RCReporting_SafeguardingIssuesRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLReporting_SafeguardingIssuesRecordList ToList<T>(T[] array, Func <T, RCReporting_SafeguardingIssuesRecord> converter) {
			RLReporting_SafeguardingIssuesRecordList result = new RLReporting_SafeguardingIssuesRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLReporting_SafeguardingIssuesRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLReporting_SafeguardingIssuesRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLReporting_SafeguardingIssuesRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLReporting_SafeguardingIssuesRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCReporting_SafeguardingIssuesRecord> NewList() {
			return new RLReporting_SafeguardingIssuesRecordList();
		}


	} // RLReporting_SafeguardingIssuesRecordList
	/// <summary>
	/// RecordList type <code>RLReporting_SafeguardingIssuesList</code> that represents a record list of
	///  <code>StudentIdentifier, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Date
	/// , SafeguardingIssueIdentifier, SafeguardingIssueTypeIdentifier,
	///  SafeguardingOutcomeIdentifier</code>
	/// </summary>
	[Serializable()]
	public partial class RLReporting_SafeguardingIssuesList: GenericRecordList<STReporting_SafeguardingIssuesStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STReporting_SafeguardingIssuesStructure GetElementDefaultValue() {
			return new STReporting_SafeguardingIssuesStructure("");
		}

		public T[] ToArray<T>(Func<STReporting_SafeguardingIssuesStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLReporting_SafeguardingIssuesList recordlist, Func<STReporting_SafeguardingIssuesStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLReporting_SafeguardingIssuesList ToList<T>(T[] array, Func <T, STReporting_SafeguardingIssuesStructure> converter) {
			RLReporting_SafeguardingIssuesList result = new RLReporting_SafeguardingIssuesList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLReporting_SafeguardingIssuesList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLReporting_SafeguardingIssuesList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLReporting_SafeguardingIssuesList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLReporting_SafeguardingIssuesList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STReporting_SafeguardingIssuesStructure> NewList() {
			return new RLReporting_SafeguardingIssuesList();
		}


	} // RLReporting_SafeguardingIssuesList
}

namespace ssCaseConferencing {
	[XmlType("Reporting_SafeguardingIssues")]
	public class WORCReporting_SafeguardingIssuesRecord {
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("StudentPhotoURL")]
		public string varWSStudentPhotoURL;

		[System.Xml.Serialization.XmlElement("StudentForenames")]
		public string varWSStudentForenames;

		[System.Xml.Serialization.XmlElement("StudentSurname")]
		public string varWSStudentSurname;

		[System.Xml.Serialization.XmlElement("StudentMainOfferingCode")]
		public string varWSStudentMainOfferingCode;

		[System.Xml.Serialization.XmlElement("RAGStatusHexColor")]
		public string varWSRAGStatusHexColor;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueID")]
		public int varWSSafeguardingIssueID;

		[System.Xml.Serialization.XmlElement("SafeguardingIssueType")]
		public string varWSSafeguardingIssueType;

		[System.Xml.Serialization.XmlElement("DateOfRefferal", DataType= "date")]
		public DateTime varWSDateOfRefferal;

		[System.Xml.Serialization.XmlElement("ActionTaken")]
		public string varWSActionTaken;

		[System.Xml.Serialization.XmlElement("AdditionalInformation")]
		public string varWSAdditionalInformation;

		[System.Xml.Serialization.XmlElement("StaffForenames")]
		public string varWSStaffForenames;

		[System.Xml.Serialization.XmlElement("StaffSurname")]
		public string varWSStaffSurname;

		[System.Xml.Serialization.XmlElement("SafeguardingOutcomeId")]
		public string varWSSafeguardingOutcomeId;

		[System.Xml.Serialization.XmlElement("SafeguardingOutcomeLabel")]
		public string varWSSafeguardingOutcomeLabel;

		public WORCReporting_SafeguardingIssuesRecord() {
			varWSStudentReference = (string) "";
			varWSStudentPhotoURL = (string) "";
			varWSStudentForenames = (string) "";
			varWSStudentSurname = (string) "";
			varWSStudentMainOfferingCode = (string) "";
			varWSRAGStatusHexColor = (string) "";
			varWSSafeguardingIssueID = (int) 0;
			varWSSafeguardingIssueType = (string) "";
			varWSDateOfRefferal = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSActionTaken = (string) "";
			varWSAdditionalInformation = (string) "";
			varWSStaffForenames = (string) "";
			varWSStaffSurname = (string) "";
			varWSSafeguardingOutcomeId = (string) "";
			varWSSafeguardingOutcomeLabel = (string) "";
		}

		public WORCReporting_SafeguardingIssuesRecord(STReporting_SafeguardingIssuesStructure r) {
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSStudentPhotoURL = BaseAppUtils.RemoveControlChars(r.ssStudentPhotoURL);
			varWSStudentForenames = BaseAppUtils.RemoveControlChars(r.ssStudentForenames);
			varWSStudentSurname = BaseAppUtils.RemoveControlChars(r.ssStudentSurname);
			varWSStudentMainOfferingCode = BaseAppUtils.RemoveControlChars(r.ssStudentMainOfferingCode);
			varWSRAGStatusHexColor = BaseAppUtils.RemoveControlChars(r.ssRAGStatusHexColor);
			varWSSafeguardingIssueID = (int) r.ssSafeguardingIssueID;
			varWSSafeguardingIssueType = BaseAppUtils.RemoveControlChars(r.ssSafeguardingIssueType);
			varWSDateOfRefferal = (DateTime) r.ssDateOfRefferal;
			varWSActionTaken = BaseAppUtils.RemoveControlChars(r.ssActionTaken);
			varWSAdditionalInformation = BaseAppUtils.RemoveControlChars(r.ssAdditionalInformation);
			varWSStaffForenames = BaseAppUtils.RemoveControlChars(r.ssStaffForenames);
			varWSStaffSurname = BaseAppUtils.RemoveControlChars(r.ssStaffSurname);
			varWSSafeguardingOutcomeId = BaseAppUtils.RemoveControlChars(r.ssSafeguardingOutcomeId);
			varWSSafeguardingOutcomeLabel = BaseAppUtils.RemoveControlChars(r.ssSafeguardingOutcomeLabel);
		}

		public static RLReporting_SafeguardingIssuesList ToRecordList(WORCReporting_SafeguardingIssuesRecord[] array) {
			RLReporting_SafeguardingIssuesList rl = new RLReporting_SafeguardingIssuesList();
			if (array != null) {
				foreach(WORCReporting_SafeguardingIssuesRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCReporting_SafeguardingIssuesRecord[] FromRecordList(RLReporting_SafeguardingIssuesList rl) {
			WORCReporting_SafeguardingIssuesRecord[] array = new WORCReporting_SafeguardingIssuesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCReporting_SafeguardingIssuesRecord {
		public static implicit operator WORCReporting_SafeguardingIssuesRecord(RCReporting_SafeguardingIssuesRecord r) {
			return new WORCReporting_SafeguardingIssuesRecord(r.ssSTReporting_SafeguardingIssues);
		}

		public static implicit operator RCReporting_SafeguardingIssuesRecord(WORCReporting_SafeguardingIssuesRecord w) {
			RCReporting_SafeguardingIssuesRecord r = new RCReporting_SafeguardingIssuesRecord("");
			if (w != null) {
				r.ssSTReporting_SafeguardingIssues = w;
			}
			return r;
		}

	}

	partial struct STReporting_SafeguardingIssuesStructure {
		public static implicit operator WORCReporting_SafeguardingIssuesRecord(STReporting_SafeguardingIssuesStructure r) {
			return new WORCReporting_SafeguardingIssuesRecord(r);
		}

		public static implicit operator STReporting_SafeguardingIssuesStructure(WORCReporting_SafeguardingIssuesRecord w) {
			STReporting_SafeguardingIssuesStructure r = new STReporting_SafeguardingIssuesStructure("");
			if (w != null) {
				r.ssStudentReference = (string) w.varWSStudentReference;
				r.ssStudentPhotoURL = ((string) w.varWSStudentPhotoURL ?? "");
				r.ssStudentForenames = ((string) w.varWSStudentForenames ?? "");
				r.ssStudentSurname = ((string) w.varWSStudentSurname ?? "");
				r.ssStudentMainOfferingCode = ((string) w.varWSStudentMainOfferingCode ?? "");
				r.ssRAGStatusHexColor = ((string) w.varWSRAGStatusHexColor ?? "");
				r.ssSafeguardingIssueID = (int) w.varWSSafeguardingIssueID;
				r.ssSafeguardingIssueType = (string) w.varWSSafeguardingIssueType;
				r.ssDateOfRefferal = (DateTime) w.varWSDateOfRefferal;
				r.ssActionTaken = ((string) w.varWSActionTaken ?? "");
				r.ssAdditionalInformation = ((string) w.varWSAdditionalInformation ?? "");
				r.ssStaffForenames = ((string) w.varWSStaffForenames ?? "");
				r.ssStaffSurname = ((string) w.varWSStaffSurname ?? "");
				r.ssSafeguardingOutcomeId = (string) w.varWSSafeguardingOutcomeId;
				r.ssSafeguardingOutcomeLabel = ((string) w.varWSSafeguardingOutcomeLabel ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLReporting_SafeguardingIssuesRecordList {
		public WORCReporting_SafeguardingIssuesRecord[] Array;


		public WORLReporting_SafeguardingIssuesRecordList(WORCReporting_SafeguardingIssuesRecord[] r) {
			if (r == null)
			Array = new WORCReporting_SafeguardingIssuesRecord[0];
			else
			Array = r;
		}
		public WORLReporting_SafeguardingIssuesRecordList() {
			Array = new WORCReporting_SafeguardingIssuesRecord[0];
		}

		public WORLReporting_SafeguardingIssuesRecordList(RLReporting_SafeguardingIssuesRecordList rl) {
			rl=(RLReporting_SafeguardingIssuesRecordList) rl.Duplicate();
			Array = new WORCReporting_SafeguardingIssuesRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCReporting_SafeguardingIssuesRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLReporting_SafeguardingIssuesRecordList {
		public static implicit operator RLReporting_SafeguardingIssuesRecordList(WORCReporting_SafeguardingIssuesRecord[] array) {
			RLReporting_SafeguardingIssuesRecordList rl = new RLReporting_SafeguardingIssuesRecordList();
			if (array != null) {
				foreach(WORCReporting_SafeguardingIssuesRecord val in array) {
					rl.Append((RCReporting_SafeguardingIssuesRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCReporting_SafeguardingIssuesRecord[](RLReporting_SafeguardingIssuesRecordList rl) {
			WORCReporting_SafeguardingIssuesRecord[] array = new WORCReporting_SafeguardingIssuesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCReporting_SafeguardingIssuesRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLReporting_SafeguardingIssuesRecordList {
		public static implicit operator RLReporting_SafeguardingIssuesRecordList(WORLReporting_SafeguardingIssuesRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLReporting_SafeguardingIssuesRecordList(RLReporting_SafeguardingIssuesRecordList rl) {
			return new WORLReporting_SafeguardingIssuesRecordList(rl);
		}
		public static implicit operator WORCReporting_SafeguardingIssuesRecord[](WORLReporting_SafeguardingIssuesRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLReporting_SafeguardingIssuesRecordList(WORCReporting_SafeguardingIssuesRecord[] array) {
			return new WORLReporting_SafeguardingIssuesRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLReporting_SafeguardingIssuesList {
		public WORCReporting_SafeguardingIssuesRecord[] Array;


		public WORLReporting_SafeguardingIssuesList(WORCReporting_SafeguardingIssuesRecord[] r) {
			if (r == null)
			Array = new WORCReporting_SafeguardingIssuesRecord[0];
			else
			Array = r;
		}
		public WORLReporting_SafeguardingIssuesList() {
			Array = new WORCReporting_SafeguardingIssuesRecord[0];
		}

		public WORLReporting_SafeguardingIssuesList(RLReporting_SafeguardingIssuesList rl) {
			rl=(RLReporting_SafeguardingIssuesList) rl.Duplicate();
			Array = new WORCReporting_SafeguardingIssuesRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLReporting_SafeguardingIssuesList {
		public static implicit operator RLReporting_SafeguardingIssuesList(WORCReporting_SafeguardingIssuesRecord[] array) {
			RLReporting_SafeguardingIssuesList rl = new RLReporting_SafeguardingIssuesList();
			if (array != null) {
				foreach(WORCReporting_SafeguardingIssuesRecord val in array) {
					rl.Append((STReporting_SafeguardingIssuesStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCReporting_SafeguardingIssuesRecord[](RLReporting_SafeguardingIssuesList rl) {
			WORCReporting_SafeguardingIssuesRecord[] array = new WORCReporting_SafeguardingIssuesRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STReporting_SafeguardingIssuesStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLReporting_SafeguardingIssuesList {
		public static implicit operator RLReporting_SafeguardingIssuesList(WORLReporting_SafeguardingIssuesList w) {
			return w.Array;
		}
		public static implicit operator WORLReporting_SafeguardingIssuesList(RLReporting_SafeguardingIssuesList rl) {
			return new WORLReporting_SafeguardingIssuesList(rl);
		}
		public static implicit operator WORCReporting_SafeguardingIssuesRecord[](WORLReporting_SafeguardingIssuesList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLReporting_SafeguardingIssuesList(WORCReporting_SafeguardingIssuesRecord[] array) {
			return new WORLReporting_SafeguardingIssuesList(array);
		}
	}
}

