/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STAllStudentsAllRAGsStructure</code> that represents the Service Studio structure
	///  <code>AllStudentsAllRAGs</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STAllStudentsAllRAGsStructure: ISerializable, ITypedRecord<STAllStudentsAllRAGsStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStudentReference = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*aXUqblCfP02W1oXGJvJdlQ");
		private static readonly GlobalObjectKey IdOfferingCode = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*Q6wDMRG4s0e_C4cBxUNIbw");
		private static readonly GlobalObjectKey IdType = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*8hImR9B4cUqACQFeBLRt1w");
		private static readonly GlobalObjectKey IdRAGRating = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*GRgP3NGS_EC3Zva9jCTRuQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string ssStudentReference;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string ssOfferingCode;

		[System.Xml.Serialization.XmlElement("Type")]
		public string ssType;

		[System.Xml.Serialization.XmlElement("RAGRating")]
		public string ssRAGRating;


		public BitArray OptimizedAttributes;

		public STAllStudentsAllRAGsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssOfferingCode = "";
			ssType = "";
			ssRAGRating = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStudentReference = r.ReadText(index++, "AllStudentsAllRAGs.StudentReference", "");
			ssOfferingCode = r.ReadText(index++, "AllStudentsAllRAGs.OfferingCode", "");
			ssType = r.ReadText(index++, "AllStudentsAllRAGs.Type", "");
			ssRAGRating = r.ReadText(index++, "AllStudentsAllRAGs.RAGRating", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STAllStudentsAllRAGsStructure r) {
			this = r;
		}


		public static bool operator == (STAllStudentsAllRAGsStructure a, STAllStudentsAllRAGsStructure b) {
			if (a.ssStudentReference != b.ssStudentReference) return false;
			if (a.ssOfferingCode != b.ssOfferingCode) return false;
			if (a.ssType != b.ssType) return false;
			if (a.ssRAGRating != b.ssRAGRating) return false;
			return true;
		}

		public static bool operator != (STAllStudentsAllRAGsStructure a, STAllStudentsAllRAGsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STAllStudentsAllRAGsStructure)) return false;
			return (this == (STAllStudentsAllRAGsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStudentReference.GetHashCode()
				^ ssOfferingCode.GetHashCode()
				^ ssType.GetHashCode()
				^ ssRAGRating.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STAllStudentsAllRAGsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssStudentReference = "";
			ssOfferingCode = "";
			ssType = "";
			ssRAGRating = "";
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssStudentReference = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssOfferingCode = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssType = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			ssRAGRating = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STAllStudentsAllRAGsStructure Duplicate() {
			STAllStudentsAllRAGsStructure t;
			t.ssStudentReference = this.ssStudentReference;
			t.ssOfferingCode = this.ssOfferingCode;
			t.ssType = this.ssType;
			t.ssRAGRating = this.ssRAGRating;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".StudentReference")) VarValue.AppendAttribute(recordElem, "StudentReference", ssStudentReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "StudentReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OfferingCode")) VarValue.AppendAttribute(recordElem, "OfferingCode", ssOfferingCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OfferingCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Type")) VarValue.AppendAttribute(recordElem, "Type", ssType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RAGRating")) VarValue.AppendAttribute(recordElem, "RAGRating", ssRAGRating, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "RAGRating");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "studentreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StudentReference")) variable.Value = ssStudentReference; else variable.Optimized = true;
			} else if (head == "offeringcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OfferingCode")) variable.Value = ssOfferingCode; else variable.Optimized = true;
			} else if (head == "type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Type")) variable.Value = ssType; else variable.Optimized = true;
			} else if (head == "ragrating") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RAGRating")) variable.Value = ssRAGRating; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStudentReference) {
				return ssStudentReference;
			} else if (key == IdOfferingCode) {
				return ssOfferingCode;
			} else if (key == IdType) {
				return ssType;
			} else if (key == IdRAGRating) {
				return ssRAGRating;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssStudentReference = (string) other.AttributeGet(IdStudentReference);
			ssOfferingCode = (string) other.AttributeGet(IdOfferingCode);
			ssType = (string) other.AttributeGet(IdType);
			ssRAGRating = (string) other.AttributeGet(IdRAGRating);
		}
	} // STAllStudentsAllRAGsStructure
	/// <summary>
	/// Structure <code>RCAllStudentsAllRAGsRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAllStudentsAllRAGsRecord: ISerializable, ITypedRecord<RCAllStudentsAllRAGsRecord> {
		private static readonly GlobalObjectKey IdAllStudentsAllRAGs = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*EoX12eqvBTQfvu_gP2xLcQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AllStudentsAllRAGs")]
		public STAllStudentsAllRAGsStructure ssSTAllStudentsAllRAGs;


		public static implicit operator STAllStudentsAllRAGsStructure(RCAllStudentsAllRAGsRecord r) {
			return r.ssSTAllStudentsAllRAGs;
		}

		public static implicit operator RCAllStudentsAllRAGsRecord(STAllStudentsAllRAGsStructure r) {
			RCAllStudentsAllRAGsRecord res = new RCAllStudentsAllRAGsRecord(null);
			res.ssSTAllStudentsAllRAGs = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCAllStudentsAllRAGsRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTAllStudentsAllRAGs = new STAllStudentsAllRAGsStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTAllStudentsAllRAGs.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTAllStudentsAllRAGs.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAllStudentsAllRAGsRecord r) {
			this = r;
		}


		public static bool operator == (RCAllStudentsAllRAGsRecord a, RCAllStudentsAllRAGsRecord b) {
			if (a.ssSTAllStudentsAllRAGs != b.ssSTAllStudentsAllRAGs) return false;
			return true;
		}

		public static bool operator != (RCAllStudentsAllRAGsRecord a, RCAllStudentsAllRAGsRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAllStudentsAllRAGsRecord)) return false;
			return (this == (RCAllStudentsAllRAGsRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTAllStudentsAllRAGs.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAllStudentsAllRAGsRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTAllStudentsAllRAGs = new STAllStudentsAllRAGsStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTAllStudentsAllRAGs = (STAllStudentsAllRAGsStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTAllStudentsAllRAGs.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTAllStudentsAllRAGs.InternalRecursiveSave();
		}


		public RCAllStudentsAllRAGsRecord Duplicate() {
			RCAllStudentsAllRAGsRecord t;
			t.ssSTAllStudentsAllRAGs = (STAllStudentsAllRAGsStructure) this.ssSTAllStudentsAllRAGs.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTAllStudentsAllRAGs.ToXml(this, recordElem, "AllStudentsAllRAGs", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "allstudentsallrags") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllStudentsAllRAGs")) variable.Value = ssSTAllStudentsAllRAGs; else variable.Optimized = true;
				variable.SetFieldName("allstudentsallrags");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAllStudentsAllRAGs) {
				return ssSTAllStudentsAllRAGs;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTAllStudentsAllRAGs.FillFromOther((IRecord) other.AttributeGet(IdAllStudentsAllRAGs));
		}
	} // RCAllStudentsAllRAGsRecord
	/// <summary>
	/// RecordList type <code>RLAllStudentsAllRAGsRecordList</code> that represents a record list of
	///  <code>AllStudentsAllRAGs</code>
	/// </summary>
	[Serializable()]
	public partial class RLAllStudentsAllRAGsRecordList: GenericRecordList<RCAllStudentsAllRAGsRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAllStudentsAllRAGsRecord GetElementDefaultValue() {
			return new RCAllStudentsAllRAGsRecord("");
		}

		public T[] ToArray<T>(Func<RCAllStudentsAllRAGsRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAllStudentsAllRAGsRecordList recordlist, Func<RCAllStudentsAllRAGsRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAllStudentsAllRAGsRecordList ToList<T>(T[] array, Func <T, RCAllStudentsAllRAGsRecord> converter) {
			RLAllStudentsAllRAGsRecordList result = new RLAllStudentsAllRAGsRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAllStudentsAllRAGsRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAllStudentsAllRAGsRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAllStudentsAllRAGsRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAllStudentsAllRAGsRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAllStudentsAllRAGsRecord> NewList() {
			return new RLAllStudentsAllRAGsRecordList();
		}


	} // RLAllStudentsAllRAGsRecordList
	/// <summary>
	/// RecordList type <code>RLAllStudentsAllRAGsList</code> that represents a record list of <code>Text,
	///  Text, Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLAllStudentsAllRAGsList: GenericRecordList<STAllStudentsAllRAGsStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STAllStudentsAllRAGsStructure GetElementDefaultValue() {
			return new STAllStudentsAllRAGsStructure("");
		}

		public T[] ToArray<T>(Func<STAllStudentsAllRAGsStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAllStudentsAllRAGsList recordlist, Func<STAllStudentsAllRAGsStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAllStudentsAllRAGsList ToList<T>(T[] array, Func <T, STAllStudentsAllRAGsStructure> converter) {
			RLAllStudentsAllRAGsList result = new RLAllStudentsAllRAGsList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAllStudentsAllRAGsList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAllStudentsAllRAGsList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAllStudentsAllRAGsList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAllStudentsAllRAGsList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STAllStudentsAllRAGsStructure> NewList() {
			return new RLAllStudentsAllRAGsList();
		}


	} // RLAllStudentsAllRAGsList
}

namespace ssCaseConferencing {
	[XmlType("AllStudentsAllRAGs")]
	public class WORCAllStudentsAllRAGsRecord {
		[System.Xml.Serialization.XmlElement("StudentReference")]
		public string varWSStudentReference;

		[System.Xml.Serialization.XmlElement("OfferingCode")]
		public string varWSOfferingCode;

		[System.Xml.Serialization.XmlElement("Type")]
		public string varWSType;

		[System.Xml.Serialization.XmlElement("RAGRating")]
		public string varWSRAGRating;

		public WORCAllStudentsAllRAGsRecord() {
			varWSStudentReference = (string) "";
			varWSOfferingCode = (string) "";
			varWSType = (string) "";
			varWSRAGRating = (string) "";
		}

		public WORCAllStudentsAllRAGsRecord(STAllStudentsAllRAGsStructure r) {
			varWSStudentReference = BaseAppUtils.RemoveControlChars(r.ssStudentReference);
			varWSOfferingCode = BaseAppUtils.RemoveControlChars(r.ssOfferingCode);
			varWSType = BaseAppUtils.RemoveControlChars(r.ssType);
			varWSRAGRating = BaseAppUtils.RemoveControlChars(r.ssRAGRating);
		}

		public static RLAllStudentsAllRAGsList ToRecordList(WORCAllStudentsAllRAGsRecord[] array) {
			RLAllStudentsAllRAGsList rl = new RLAllStudentsAllRAGsList();
			if (array != null) {
				foreach(WORCAllStudentsAllRAGsRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAllStudentsAllRAGsRecord[] FromRecordList(RLAllStudentsAllRAGsList rl) {
			WORCAllStudentsAllRAGsRecord[] array = new WORCAllStudentsAllRAGsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCAllStudentsAllRAGsRecord {
		public static implicit operator WORCAllStudentsAllRAGsRecord(RCAllStudentsAllRAGsRecord r) {
			return new WORCAllStudentsAllRAGsRecord(r.ssSTAllStudentsAllRAGs);
		}

		public static implicit operator RCAllStudentsAllRAGsRecord(WORCAllStudentsAllRAGsRecord w) {
			RCAllStudentsAllRAGsRecord r = new RCAllStudentsAllRAGsRecord("");
			if (w != null) {
				r.ssSTAllStudentsAllRAGs = w;
			}
			return r;
		}

	}

	partial struct STAllStudentsAllRAGsStructure {
		public static implicit operator WORCAllStudentsAllRAGsRecord(STAllStudentsAllRAGsStructure r) {
			return new WORCAllStudentsAllRAGsRecord(r);
		}

		public static implicit operator STAllStudentsAllRAGsStructure(WORCAllStudentsAllRAGsRecord w) {
			STAllStudentsAllRAGsStructure r = new STAllStudentsAllRAGsStructure("");
			if (w != null) {
				r.ssStudentReference = ((string) w.varWSStudentReference ?? "");
				r.ssOfferingCode = ((string) w.varWSOfferingCode ?? "");
				r.ssType = ((string) w.varWSType ?? "");
				r.ssRAGRating = ((string) w.varWSRAGRating ?? "");
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAllStudentsAllRAGsRecordList {
		public WORCAllStudentsAllRAGsRecord[] Array;


		public WORLAllStudentsAllRAGsRecordList(WORCAllStudentsAllRAGsRecord[] r) {
			if (r == null)
			Array = new WORCAllStudentsAllRAGsRecord[0];
			else
			Array = r;
		}
		public WORLAllStudentsAllRAGsRecordList() {
			Array = new WORCAllStudentsAllRAGsRecord[0];
		}

		public WORLAllStudentsAllRAGsRecordList(RLAllStudentsAllRAGsRecordList rl) {
			rl=(RLAllStudentsAllRAGsRecordList) rl.Duplicate();
			Array = new WORCAllStudentsAllRAGsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAllStudentsAllRAGsRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAllStudentsAllRAGsRecordList {
		public static implicit operator RLAllStudentsAllRAGsRecordList(WORCAllStudentsAllRAGsRecord[] array) {
			RLAllStudentsAllRAGsRecordList rl = new RLAllStudentsAllRAGsRecordList();
			if (array != null) {
				foreach(WORCAllStudentsAllRAGsRecord val in array) {
					rl.Append((RCAllStudentsAllRAGsRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAllStudentsAllRAGsRecord[](RLAllStudentsAllRAGsRecordList rl) {
			WORCAllStudentsAllRAGsRecord[] array = new WORCAllStudentsAllRAGsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAllStudentsAllRAGsRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAllStudentsAllRAGsRecordList {
		public static implicit operator RLAllStudentsAllRAGsRecordList(WORLAllStudentsAllRAGsRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAllStudentsAllRAGsRecordList(RLAllStudentsAllRAGsRecordList rl) {
			return new WORLAllStudentsAllRAGsRecordList(rl);
		}
		public static implicit operator WORCAllStudentsAllRAGsRecord[](WORLAllStudentsAllRAGsRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAllStudentsAllRAGsRecordList(WORCAllStudentsAllRAGsRecord[] array) {
			return new WORLAllStudentsAllRAGsRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLAllStudentsAllRAGsList {
		public WORCAllStudentsAllRAGsRecord[] Array;


		public WORLAllStudentsAllRAGsList(WORCAllStudentsAllRAGsRecord[] r) {
			if (r == null)
			Array = new WORCAllStudentsAllRAGsRecord[0];
			else
			Array = r;
		}
		public WORLAllStudentsAllRAGsList() {
			Array = new WORCAllStudentsAllRAGsRecord[0];
		}

		public WORLAllStudentsAllRAGsList(RLAllStudentsAllRAGsList rl) {
			rl=(RLAllStudentsAllRAGsList) rl.Duplicate();
			Array = new WORCAllStudentsAllRAGsRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLAllStudentsAllRAGsList {
		public static implicit operator RLAllStudentsAllRAGsList(WORCAllStudentsAllRAGsRecord[] array) {
			RLAllStudentsAllRAGsList rl = new RLAllStudentsAllRAGsList();
			if (array != null) {
				foreach(WORCAllStudentsAllRAGsRecord val in array) {
					rl.Append((STAllStudentsAllRAGsStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAllStudentsAllRAGsRecord[](RLAllStudentsAllRAGsList rl) {
			WORCAllStudentsAllRAGsRecord[] array = new WORCAllStudentsAllRAGsRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STAllStudentsAllRAGsStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLAllStudentsAllRAGsList {
		public static implicit operator RLAllStudentsAllRAGsList(WORLAllStudentsAllRAGsList w) {
			return w.Array;
		}
		public static implicit operator WORLAllStudentsAllRAGsList(RLAllStudentsAllRAGsList rl) {
			return new WORLAllStudentsAllRAGsList(rl);
		}
		public static implicit operator WORCAllStudentsAllRAGsRecord[](WORLAllStudentsAllRAGsList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAllStudentsAllRAGsList(WORCAllStudentsAllRAGsRecord[] array) {
			return new WORLAllStudentsAllRAGsList(array);
		}
	}
}

