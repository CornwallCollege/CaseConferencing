/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssCaseConferencing {
	/// <summary>
	/// Structure <code>STStaffView_SearchStructure</code> that represents the Service Studio structure
	///  <code>StaffView_Search</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STStaffView_SearchStructure: ISerializable, ITypedRecord<STStaffView_SearchStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdSearchKeyword = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*W+nI+QidD02Z_qkFP72Prg");
		private static readonly GlobalObjectKey IdGroupDescription = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*aO6SMotEo0Kp71vGT+r8xg");
		private static readonly GlobalObjectKey IdSearchType = GlobalObjectKey.Parse("shmcdFKEAEWXZGfrlZEwCQ*V14EWEE2Sk+ktoyNQVv2Fw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("SearchKeyword")]
		public string ssSearchKeyword;

		[System.Xml.Serialization.XmlElement("GroupDescription")]
		public string ssGroupDescription;

		[System.Xml.Serialization.XmlElement("SearchType")]
		public int ssSearchType;


		public BitArray OptimizedAttributes;

		public STStaffView_SearchStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssSearchKeyword = "";
			ssGroupDescription = "";
			ssSearchType = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSearchKeyword = r.ReadText(index++, "StaffView_Search.SearchKeyword", "");
			ssGroupDescription = r.ReadText(index++, "StaffView_Search.GroupDescription", "");
			ssSearchType = r.ReadInteger(index++, "StaffView_Search.SearchType", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STStaffView_SearchStructure r) {
			this = r;
		}


		public static bool operator == (STStaffView_SearchStructure a, STStaffView_SearchStructure b) {
			if (a.ssSearchKeyword != b.ssSearchKeyword) return false;
			if (a.ssGroupDescription != b.ssGroupDescription) return false;
			if (a.ssSearchType != b.ssSearchType) return false;
			return true;
		}

		public static bool operator != (STStaffView_SearchStructure a, STStaffView_SearchStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STStaffView_SearchStructure)) return false;
			return (this == (STStaffView_SearchStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSearchKeyword.GetHashCode()
				^ ssGroupDescription.GetHashCode()
				^ ssSearchType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STStaffView_SearchStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSearchKeyword = "";
			ssGroupDescription = "";
			ssSearchType = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSearchKeyword = (string) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			ssGroupDescription = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			ssSearchType = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STStaffView_SearchStructure Duplicate() {
			STStaffView_SearchStructure t;
			t.ssSearchKeyword = this.ssSearchKeyword;
			t.ssGroupDescription = this.ssGroupDescription;
			t.ssSearchType = this.ssSearchType;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SearchKeyword")) VarValue.AppendAttribute(recordElem, "SearchKeyword", ssSearchKeyword, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SearchKeyword");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GroupDescription")) VarValue.AppendAttribute(recordElem, "GroupDescription", ssGroupDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "GroupDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SearchType")) VarValue.AppendAttribute(recordElem, "SearchType", ssSearchType, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "SearchType");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "searchkeyword") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SearchKeyword")) variable.Value = ssSearchKeyword; else variable.Optimized = true;
			} else if (head == "groupdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GroupDescription")) variable.Value = ssGroupDescription; else variable.Optimized = true;
			} else if (head == "searchtype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SearchType")) variable.Value = ssSearchType; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSearchKeyword) {
				return ssSearchKeyword;
			} else if (key == IdGroupDescription) {
				return ssGroupDescription;
			} else if (key == IdSearchType) {
				return ssSearchType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSearchKeyword = (string) other.AttributeGet(IdSearchKeyword);
			ssGroupDescription = (string) other.AttributeGet(IdGroupDescription);
			ssSearchType = (int) other.AttributeGet(IdSearchType);
		}
	} // STStaffView_SearchStructure
	/// <summary>
	/// Structure <code>RCStaffView_SearchRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCStaffView_SearchRecord: ISerializable, ITypedRecord<RCStaffView_SearchRecord> {
		private static readonly GlobalObjectKey IdStaffView_Search = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*clWnQKpI23_1BL0Gm8E90A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("StaffView_Search")]
		public STStaffView_SearchStructure ssSTStaffView_Search;


		public static implicit operator STStaffView_SearchStructure(RCStaffView_SearchRecord r) {
			return r.ssSTStaffView_Search;
		}

		public static implicit operator RCStaffView_SearchRecord(STStaffView_SearchStructure r) {
			RCStaffView_SearchRecord res = new RCStaffView_SearchRecord(null);
			res.ssSTStaffView_Search = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCStaffView_SearchRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTStaffView_Search = new STStaffView_SearchStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTStaffView_Search.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTStaffView_Search.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCStaffView_SearchRecord r) {
			this = r;
		}


		public static bool operator == (RCStaffView_SearchRecord a, RCStaffView_SearchRecord b) {
			if (a.ssSTStaffView_Search != b.ssSTStaffView_Search) return false;
			return true;
		}

		public static bool operator != (RCStaffView_SearchRecord a, RCStaffView_SearchRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCStaffView_SearchRecord)) return false;
			return (this == (RCStaffView_SearchRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTStaffView_Search.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCStaffView_SearchRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTStaffView_Search = new STStaffView_SearchStructure(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssSTStaffView_Search = (STStaffView_SearchStructure) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssSTStaffView_Search.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTStaffView_Search.InternalRecursiveSave();
		}


		public RCStaffView_SearchRecord Duplicate() {
			RCStaffView_SearchRecord t;
			t.ssSTStaffView_Search = (STStaffView_SearchStructure) this.ssSTStaffView_Search.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTStaffView_Search.ToXml(this, recordElem, "StaffView_Search", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "staffview_search") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".StaffView_Search")) variable.Value = ssSTStaffView_Search; else variable.Optimized = true;
				variable.SetFieldName("staffview_search");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStaffView_Search) {
				return ssSTStaffView_Search;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTStaffView_Search.FillFromOther((IRecord) other.AttributeGet(IdStaffView_Search));
		}
	} // RCStaffView_SearchRecord
	/// <summary>
	/// RecordList type <code>RLStaffView_SearchRecordList</code> that represents a record list of
	///  <code>StaffView_Search</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffView_SearchRecordList: GenericRecordList<RCStaffView_SearchRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCStaffView_SearchRecord GetElementDefaultValue() {
			return new RCStaffView_SearchRecord("");
		}

		public T[] ToArray<T>(Func<RCStaffView_SearchRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffView_SearchRecordList recordlist, Func<RCStaffView_SearchRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffView_SearchRecordList ToList<T>(T[] array, Func <T, RCStaffView_SearchRecord> converter) {
			RLStaffView_SearchRecordList result = new RLStaffView_SearchRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffView_SearchRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_SearchRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_SearchRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffView_SearchRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCStaffView_SearchRecord> NewList() {
			return new RLStaffView_SearchRecordList();
		}


	} // RLStaffView_SearchRecordList
	/// <summary>
	/// RecordList type <code>RLStaffView_SearchList</code> that represents a record list of <code>Text,
	///  Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLStaffView_SearchList: GenericRecordList<STStaffView_SearchStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STStaffView_SearchStructure GetElementDefaultValue() {
			return new STStaffView_SearchStructure("");
		}

		public T[] ToArray<T>(Func<STStaffView_SearchStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLStaffView_SearchList recordlist, Func<STStaffView_SearchStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLStaffView_SearchList ToList<T>(T[] array, Func <T, STStaffView_SearchStructure> converter) {
			RLStaffView_SearchList result = new RLStaffView_SearchList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLStaffView_SearchList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_SearchList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLStaffView_SearchList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLStaffView_SearchList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STStaffView_SearchStructure> NewList() {
			return new RLStaffView_SearchList();
		}


	} // RLStaffView_SearchList
}

namespace ssCaseConferencing {
	[XmlType("StaffView_Search")]
	public class WORCStaffView_SearchRecord {
		[System.Xml.Serialization.XmlElement("SearchKeyword")]
		public string varWSSearchKeyword;

		[System.Xml.Serialization.XmlElement("GroupDescription")]
		public string varWSGroupDescription;

		[System.Xml.Serialization.XmlElement("SearchType")]
		public int varWSSearchType;

		public WORCStaffView_SearchRecord() {
			varWSSearchKeyword = (string) "";
			varWSGroupDescription = (string) "";
			varWSSearchType = (int) 0;
		}

		public WORCStaffView_SearchRecord(STStaffView_SearchStructure r) {
			varWSSearchKeyword = BaseAppUtils.RemoveControlChars(r.ssSearchKeyword);
			varWSGroupDescription = BaseAppUtils.RemoveControlChars(r.ssGroupDescription);
			varWSSearchType = (int) r.ssSearchType;
		}

		public static RLStaffView_SearchList ToRecordList(WORCStaffView_SearchRecord[] array) {
			RLStaffView_SearchList rl = new RLStaffView_SearchList();
			if (array != null) {
				foreach(WORCStaffView_SearchRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCStaffView_SearchRecord[] FromRecordList(RLStaffView_SearchList rl) {
			WORCStaffView_SearchRecord[] array = new WORCStaffView_SearchRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial struct RCStaffView_SearchRecord {
		public static implicit operator WORCStaffView_SearchRecord(RCStaffView_SearchRecord r) {
			return new WORCStaffView_SearchRecord(r.ssSTStaffView_Search);
		}

		public static implicit operator RCStaffView_SearchRecord(WORCStaffView_SearchRecord w) {
			RCStaffView_SearchRecord r = new RCStaffView_SearchRecord("");
			if (w != null) {
				r.ssSTStaffView_Search = w;
			}
			return r;
		}

	}

	partial struct STStaffView_SearchStructure {
		public static implicit operator WORCStaffView_SearchRecord(STStaffView_SearchStructure r) {
			return new WORCStaffView_SearchRecord(r);
		}

		public static implicit operator STStaffView_SearchStructure(WORCStaffView_SearchRecord w) {
			STStaffView_SearchStructure r = new STStaffView_SearchStructure("");
			if (w != null) {
				r.ssSearchKeyword = ((string) w.varWSSearchKeyword ?? "");
				r.ssGroupDescription = ((string) w.varWSGroupDescription ?? "");
				r.ssSearchType = (int) w.varWSSearchType;
			}
			return r;
		}

	}
}


namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffView_SearchRecordList {
		public WORCStaffView_SearchRecord[] Array;


		public WORLStaffView_SearchRecordList(WORCStaffView_SearchRecord[] r) {
			if (r == null)
			Array = new WORCStaffView_SearchRecord[0];
			else
			Array = r;
		}
		public WORLStaffView_SearchRecordList() {
			Array = new WORCStaffView_SearchRecord[0];
		}

		public WORLStaffView_SearchRecordList(RLStaffView_SearchRecordList rl) {
			rl=(RLStaffView_SearchRecordList) rl.Duplicate();
			Array = new WORCStaffView_SearchRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCStaffView_SearchRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffView_SearchRecordList {
		public static implicit operator RLStaffView_SearchRecordList(WORCStaffView_SearchRecord[] array) {
			RLStaffView_SearchRecordList rl = new RLStaffView_SearchRecordList();
			if (array != null) {
				foreach(WORCStaffView_SearchRecord val in array) {
					rl.Append((RCStaffView_SearchRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffView_SearchRecord[](RLStaffView_SearchRecordList rl) {
			WORCStaffView_SearchRecord[] array = new WORCStaffView_SearchRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCStaffView_SearchRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffView_SearchRecordList {
		public static implicit operator RLStaffView_SearchRecordList(WORLStaffView_SearchRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffView_SearchRecordList(RLStaffView_SearchRecordList rl) {
			return new WORLStaffView_SearchRecordList(rl);
		}
		public static implicit operator WORCStaffView_SearchRecord[](WORLStaffView_SearchRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffView_SearchRecordList(WORCStaffView_SearchRecord[] array) {
			return new WORLStaffView_SearchRecordList(array);
		}
	}
}

namespace ssCaseConferencing {
	[Serializable()]
	public partial class WORLStaffView_SearchList {
		public WORCStaffView_SearchRecord[] Array;


		public WORLStaffView_SearchList(WORCStaffView_SearchRecord[] r) {
			if (r == null)
			Array = new WORCStaffView_SearchRecord[0];
			else
			Array = r;
		}
		public WORLStaffView_SearchList() {
			Array = new WORCStaffView_SearchRecord[0];
		}

		public WORLStaffView_SearchList(RLStaffView_SearchList rl) {
			rl=(RLStaffView_SearchList) rl.Duplicate();
			Array = new WORCStaffView_SearchRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssCaseConferencing {
	partial class RLStaffView_SearchList {
		public static implicit operator RLStaffView_SearchList(WORCStaffView_SearchRecord[] array) {
			RLStaffView_SearchList rl = new RLStaffView_SearchList();
			if (array != null) {
				foreach(WORCStaffView_SearchRecord val in array) {
					rl.Append((STStaffView_SearchStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCStaffView_SearchRecord[](RLStaffView_SearchList rl) {
			WORCStaffView_SearchRecord[] array = new WORCStaffView_SearchRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STStaffView_SearchStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssCaseConferencing {
	partial class WORLStaffView_SearchList {
		public static implicit operator RLStaffView_SearchList(WORLStaffView_SearchList w) {
			return w.Array;
		}
		public static implicit operator WORLStaffView_SearchList(RLStaffView_SearchList rl) {
			return new WORLStaffView_SearchList(rl);
		}
		public static implicit operator WORCStaffView_SearchRecord[](WORLStaffView_SearchList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLStaffView_SearchList(WORCStaffView_SearchRecord[] array) {
			return new WORLStaffView_SearchList(array);
		}
	}
}

